{
  "0shot": [
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Mary",
            "start_time": "1:00PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Sarah",
            "start_time": "2:45PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Thomas",
            "start_time": "3:15PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Helen",
            "start_time": "9:45PM",
            "end_time": "10:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Sarah",
            "start_time": "2:45PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Mary",
            "start_time": "4:48PM",
            "end_time": "6:03PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Helen",
            "start_time": "9:45PM",
            "end_time": "10:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\ndef calculate_schedule():\n    # Define travel times between locations\n    travel_times = {\n        'Haight-Ashbury': {'Fisherman\\'s Wharf': 23, 'Richmond District': 10, 'Mission District': 11, 'Bayview': 18},\n        'Fisherman\\'s Wharf': {'Haight-Ashbury': 22, 'Richmond District': 18, 'Mission District': 22, 'Bayview': 26},\n        'Richmond District': {'Haight-Ashbury': 10, 'Fisherman\\'s Wharf': 18, 'Mission District': 20, 'Bayview': 26},\n        'Mission District': {'Haight-Ashbury': 12, 'Fisherman\\'s Wharf': 22, 'Richmond District': 20, 'Bayview': 15},\n        'Bayview': {'Haight-Ashbury': 19, 'Fisherman\\'s Wharf': 25, 'Richmond District': 25, 'Mission District': 13}\n    }\n\n    # Define meeting constraints\n    meetings = [\n        {'name': 'Sarah', 'location': 'Fisherman\\'s Wharf','start_time': '2:45PM', 'end_time': '5:30PM', 'duration': 105},\n        {'name': 'Mary', 'location': 'Richmond District','start_time': '1:00PM', 'end_time': '7:15PM', 'duration': 75},\n        {'name': 'Helen', 'location': 'Mission District','start_time': '9:45PM', 'end_time': '10:30PM', 'duration': 30},\n        {'name': 'Thomas', 'location': 'Bayview','start_time': '3:15PM', 'end_time': '6:45PM', 'duration': 120}\n    ]\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Haight-Ashbury at 9:00AM\n    schedule.append({'action':'start', 'location': 'Haight-Ashbury', 'time': '9:00AM'})\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: x['start_time'])\n\n    # Iterate through meetings\n    current_location = 'Haight-Ashbury'\n    current_time = '9:00AM'\n    for meeting in meetings:\n        # Travel to meeting location\n        travel_duration = travel_times[current_location][meeting['location']]\n        arrival_time = calculate_arrival_time(current_time, travel_duration)\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': arrival_time, 'to': meeting['location']})\n\n        # Wait until meeting start time\n        meeting_start_time = convert_time_to_minutes(meeting['start_time'])\n        arrival_time_minutes = convert_time_to_minutes(arrival_time)\n        wait_duration = meeting_start_time - arrival_time_minutes\n        if wait_duration > 0:\n            schedule.append({'action': 'wait', 'location': meeting['location'], 'time': convert_minutes_to_time(arrival_time_minutes + wait_duration)})\n\n        # Attend meeting\n        schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': meeting['start_time']})\n\n        # Update current location and time\n        current_location = meeting['location']\n        current_time = meeting['end_time']\n\n    return schedule\n\ndef calculate_arrival_time(current_time, travel_duration):\n    current_time_minutes = convert_time_to_minutes(current_time)\n    arrival_time_minutes = current_time_minutes + travel_duration\n    return convert_minutes_to_time(arrival_time_minutes)\n\ndef convert_time_to_minutes(time):\n    time_parts = time[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1])\n    if time[-2:] == 'PM' and hours!= 12:\n        hours += 12\n    elif time[-2:] == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({'schedule': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_389"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Joshua",
            "start_time": "10:30AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Kenneth",
            "start_time": "12:45PM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Betty",
            "start_time": "2:00PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Kimberly",
            "start_time": "3:30PM",
            "end_time": "3:45PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Deborah",
            "start_time": "5:15PM",
            "end_time": "5:30PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Barbara",
            "start_time": "5:30PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Steven",
            "start_time": "5:45PM",
            "end_time": "7:15PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Daniel",
            "start_time": "6:30PM",
            "end_time": "6:45PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Elizabeth",
            "start_time": "7:15PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Sandra",
            "start_time": "7:30PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Joshua",
            "start_time": "10:30AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Kimberly",
            "start_time": "3:30PM",
            "end_time": "3:45PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Kenneth",
            "start_time": "4:03PM",
            "end_time": "4:33PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Betty",
            "start_time": "4:57PM",
            "end_time": "5:57PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Daniel",
            "start_time": "6:30PM",
            "end_time": "6:45PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Elizabeth",
            "start_time": "7:15PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Deborah",
            "start_time": "7:45PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\ndef calculate_schedule():\n    # Define travel times between locations\n    travel_times = {\n        'Union Square': {'Presidio': 24, 'Alamo Square': 15, 'Marina District': 18, 'Financial District': 9, 'Nob Hill': 9, 'Sunset District': 27, 'Chinatown': 7, 'Russian Hill': 13, 'North Beach': 10, 'Haight-Ashbury': 18},\n        'Presidio': {'Union Square': 22, 'Alamo Square': 19, 'Marina District': 11, 'Financial District': 23, 'Nob Hill': 18, 'Sunset District': 15, 'Chinatown': 21, 'Russian Hill': 14, 'North Beach': 18, 'Haight-Ashbury': 15},\n        'Alamo Square': {'Union Square': 14, 'Presidio': 17, 'Marina District': 15, 'Financial District': 17, 'Nob Hill': 11, 'Sunset District': 16, 'Chinatown': 15, 'Russian Hill': 13, 'North Beach': 15, 'Haight-Ashbury': 5},\n        'Marina District': {'Union Square': 16, 'Presidio': 10, 'Alamo Square': 15, 'Financial District': 17, 'Nob Hill': 12, 'Sunset District': 19, 'Chinatown': 15, 'Russian Hill': 8, 'North Beach': 11, 'Haight-Ashbury': 16},\n        'Financial District': {'Union Square': 9, 'Presidio': 22, 'Alamo Square': 17, 'Marina District': 15, 'Nob Hill': 8, 'Sunset District': 30, 'Chinatown': 5, 'Russian Hill': 11, 'North Beach': 7, 'Haight-Ashbury': 19},\n        'Nob Hill': {'Union Square': 7, 'Presidio': 17, 'Alamo Square': 11, 'Marina District': 11, 'Financial District': 9, 'Sunset District': 24, 'Chinatown': 6, 'Russian Hill': 5, 'North Beach': 8, 'Haight-Ashbury': 13},\n        'Sunset District': {'Union Square': 30, 'Presidio': 16, 'Alamo Square': 17, 'Marina District': 21, 'Financial District': 30, 'Nob Hill': 27, 'Chinatown': 30, 'Russian Hill': 24, 'North Beach': 28, 'Haight-Ashbury': 15},\n        'Chinatown': {'Union Square': 7, 'Presidio': 19, 'Alamo Square': 17, 'Marina District': 12, 'Financial District': 5, 'Nob Hill': 9, 'Sunset District': 29, 'Russian Hill': 7, 'North Beach': 3, 'Haight-Ashbury': 19},\n        'Russian Hill': {'Union Square': 10, 'Presidio': 14, 'Alamo Square': 15, 'Marina District': 7, 'Financial District': 11, 'Nob Hill': 5, 'Sunset District': 23, 'Chinatown': 9, 'North Beach': 5, 'Haight-Ashbury': 17},\n        'North Beach': {'Union Square': 7, 'Presidio': 17, 'Alamo Square': 16, 'Marina District': 9, 'Financial District': 8, 'Nob Hill': 7, 'Sunset District': 27, 'Chinatown': 6, 'Russian Hill': 4, 'Haight-Ashbury': 18},\n        'Haight-Ashbury': {'Union Square': 19, 'Presidio': 15, 'Alamo Square': 5, 'Marina District': 17, 'Financial District': 21, 'Nob Hill': 15, 'Sunset District': 15, 'Chinatown': 19, 'Russian Hill': 17, 'North Beach': 19}\n    }\n\n    # Define meeting constraints\n    meetings = [\n        {'name': 'Kimberly', 'location': 'Presidio','start_time': '3:30PM', 'end_time': '4:00PM', 'duration': 15},\n        {'name': 'Elizabeth', 'location': 'Alamo Square','start_time': '7:15PM', 'end_time': '8:15PM', 'duration': 15},\n        {'name': 'Joshua', 'location': 'Marina District','start_time': '10:30AM', 'end_time': '2:15PM', 'duration': 45},\n        {'name': 'Sandra', 'location': 'Financial District','start_time': '7:30PM', 'end_time': '8:15PM', 'duration': 45},\n        {'name': 'Kenneth', 'location': 'Nob Hill','start_time': '12:45PM', 'end_time': '9:45PM', 'duration': 30},\n        {'name': 'Betty', 'location': 'Sunset District','start_time': '2:00PM', 'end_time': '7:00PM', 'duration': 60},\n        {'name': 'Deborah', 'location': 'Chinatown','start_time': '5:15PM', 'end_time': '8:30PM', 'duration': 15},\n        {'name': 'Barbara', 'location': 'Russian Hill','start_time': '5:30PM', 'end_time': '9:15PM', 'duration': 120},\n        {'name': 'Steven', 'location': 'North Beach','start_time': '5:45PM', 'end_time': '8:45PM', 'duration': 90},\n        {'name': 'Daniel', 'location': 'Haight-Ashbury','start_time': '6:30PM', 'end_time': '6:45PM', 'duration': 15}\n    ]\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Union Square at 9:00AM\n    schedule.append({'action':'start', 'location': 'Union Square', 'time': '9:00AM'})\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: convert_time_to_minutes(x['start_time']))\n\n    # Iterate through meetings\n    current_location = 'Union Square'\n    current_time = '9:00AM'\n    for meeting in meetings:\n        # Travel to meeting location\n        travel_duration = travel_times[current_location][meeting['location']]\n        arrival_time = calculate_arrival_time(current_time, travel_duration)\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': arrival_time, 'to': meeting['location']})\n\n        # Wait until meeting start time\n        meeting_start_time = convert_time_to_minutes(meeting['start_time'])\n        arrival_time_minutes = convert_time_to_minutes(arrival_time)\n        wait_duration = meeting_start_time - arrival_time_minutes\n        if wait_duration > 0:\n            schedule.append({'action': 'wait', 'location': meeting['location'], 'time': convert_minutes_to_time(arrival_time_minutes + wait_duration)})\n\n        # Attend meeting\n        schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': meeting['start_time']})\n\n        # Update current location and time\n        current_location = meeting['location']\n        current_time = meeting['end_time']\n\n    return schedule\n\ndef calculate_arrival_time(current_time, travel_duration):\n    current_time_minutes = convert_time_to_minutes(current_time)\n    arrival_time_minutes = current_time_minutes + travel_duration\n    return convert_minutes_to_time(arrival_time_minutes)\n\ndef convert_time_to_minutes(time):\n    time_parts = time[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1])\n    if time[-2:] == 'PM' and hours!= 12:\n        hours += 12\n    elif time[-2:] == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({'schedule': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_912"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Margaret",
            "start_time": "9:30AM",
            "end_time": "10:00AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Robert",
            "start_time": "12:15PM",
            "end_time": "12:30PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Kimberly",
            "start_time": "1:15PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Rebecca",
            "start_time": "1:15PM",
            "end_time": "2:30PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Kenneth",
            "start_time": "7:30PM",
            "end_time": "8:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Robert",
            "start_time": "12:15PM",
            "end_time": "12:30PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Margaret",
            "start_time": "12:52PM",
            "end_time": "1:22PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Kimberly",
            "start_time": "1:47PM",
            "end_time": "2:02PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Rebecca",
            "start_time": "2:19PM",
            "end_time": "3:34PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Kenneth",
            "start_time": "7:30PM",
            "end_time": "8:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\ndef calculate_schedule():\n    # Define travel times between locations\n    travel_times = {\n        'Richmond District': {'Marina District': 9, 'Chinatown': 20, 'Financial District': 22, 'Bayview': 26, 'Union Square': 21},\n        'Marina District': {'Richmond District': 11, 'Chinatown': 16, 'Financial District': 17, 'Bayview': 27, 'Union Square': 16},\n        'Chinatown': {'Richmond District': 20, 'Marina District': 12, 'Financial District': 5, 'Bayview': 22, 'Union Square': 7},\n        'Financial District': {'Richmond District': 21, 'Marina District': 15, 'Chinatown': 5, 'Bayview': 19, 'Union Square': 9},\n        'Bayview': {'Richmond District': 25, 'Marina District': 25, 'Chinatown': 18, 'Financial District': 19, 'Union Square': 17},\n        'Union Square': {'Richmond District': 20, 'Marina District': 18, 'Chinatown': 7, 'Financial District': 9, 'Bayview': 15}\n    }\n\n    # Define meeting constraints\n    meetings = [\n        {'name': 'Kimberly', 'location': 'Marina District','start_time': '1:15PM', 'end_time': '4:45PM', 'duration': 15},\n        {'name': 'Robert', 'location': 'Chinatown','start_time': '12:15PM', 'end_time': '8:15PM', 'duration': 15},\n        {'name': 'Rebecca', 'location': 'Financial District','start_time': '1:15PM', 'end_time': '4:45PM', 'duration': 75},\n        {'name': 'Margaret', 'location': 'Bayview','start_time': '9:30AM', 'end_time': '1:30PM', 'duration': 30},\n        {'name': 'Kenneth', 'location': 'Union Square','start_time': '7:30PM', 'end_time': '9:15PM', 'duration': 75}\n    ]\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Richmond District at 9:00AM\n    schedule.append({'action':'start', 'location': 'Richmond District', 'time': '9:00AM'})\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: convert_time_to_minutes(x['start_time']))\n\n    # Iterate through meetings\n    current_location = 'Richmond District'\n    current_time = '9:00AM'\n    for meeting in meetings:\n        # Travel to meeting location\n        travel_duration = travel_times[current_location][meeting['location']]\n        arrival_time = calculate_arrival_time(current_time, travel_duration)\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': arrival_time, 'to': meeting['location']})\n\n        # Wait until meeting start time\n        meeting_start_time = convert_time_to_minutes(meeting['start_time'])\n        arrival_time_minutes = convert_time_to_minutes(arrival_time)\n        wait_duration = meeting_start_time - arrival_time_minutes\n        if wait_duration > 0:\n            schedule.append({'action': 'wait', 'location': meeting['location'], 'time': convert_minutes_to_time(arrival_time_minutes + wait_duration)})\n\n        # Attend meeting\n        schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': meeting['start_time']})\n\n        # Update current location and time\n        current_location = meeting['location']\n        current_time = meeting['end_time']\n\n    return schedule\n\ndef calculate_arrival_time(current_time, travel_duration):\n    current_time_minutes = convert_time_to_minutes(current_time)\n    arrival_time_minutes = current_time_minutes + travel_duration\n    return convert_minutes_to_time(arrival_time_minutes)\n\ndef convert_time_to_minutes(time):\n    time_parts = time[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1])\n    if time[-2:] == 'PM' and hours!= 12:\n        hours += 12\n    elif time[-2:] == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({'schedule': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_446"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Patricia",
            "start_time": "9:15AM",
            "end_time": "10:15AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Laura",
            "start_time": "12:30PM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Ronald",
            "start_time": "1:45PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Mary",
            "start_time": "3:00PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Emily",
            "start_time": "4:15PM",
            "end_time": "5:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Patricia",
            "start_time": "9:31AM",
            "end_time": "10:31AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Laura",
            "start_time": "12:30PM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Ronald",
            "start_time": "1:45PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Emily",
            "start_time": "4:15PM",
            "end_time": "5:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\ndef calculate_schedule():\n    # Define travel times between locations\n    travel_times = {\n        'Financial District': {'Russian Hill': 10, 'Sunset District': 31, 'North Beach': 7, 'The Castro': 23, 'Golden Gate Park': 23},\n        'Russian Hill': {'Financial District': 11, 'Sunset District': 23, 'North Beach': 5, 'The Castro': 21, 'Golden Gate Park': 21},\n        'Sunset District': {'Financial District': 30, 'Russian Hill': 24, 'North Beach': 29, 'The Castro': 17, 'Golden Gate Park': 11},\n        'North Beach': {'Financial District': 8, 'Russian Hill': 4, 'Sunset District': 27, 'The Castro': 22, 'Golden Gate Park': 22},\n        'The Castro': {'Financial District': 20, 'Russian Hill': 18, 'Sunset District': 17, 'North Beach': 20, 'Golden Gate Park': 11},\n        'Golden Gate Park': {'Financial District': 26, 'Russian Hill': 19, 'Sunset District': 10, 'North Beach': 24, 'The Castro': 13}\n    }\n\n    # Define meeting constraints\n    meetings = [\n        {'name': 'Ronald', 'location': 'Russian Hill','start_time': '1:45PM', 'end_time': '5:15PM', 'duration': 105},\n        {'name': 'Patricia', 'location': 'Sunset District','start_time': '9:15AM', 'end_time': '10:00PM', 'duration': 60},\n        {'name': 'Laura', 'location': 'North Beach','start_time': '12:30PM', 'end_time': '12:45PM', 'duration': 15},\n        {'name': 'Emily', 'location': 'The Castro','start_time': '4:15PM', 'end_time': '6:30PM', 'duration': 60},\n        {'name': 'Mary', 'location': 'Golden Gate Park','start_time': '3:00PM', 'end_time': '4:30PM', 'duration': 60}\n    ]\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Financial District at 9:00AM\n    schedule.append({'action':'start', 'location': 'Financial District', 'time': '9:00AM'})\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: convert_time_to_minutes(x['start_time']))\n\n    # Iterate through meetings\n    current_location = 'Financial District'\n    current_time = '9:00AM'\n    for meeting in meetings:\n        # Travel to meeting location\n        travel_duration = travel_times[current_location][meeting['location']]\n        arrival_time = calculate_arrival_time(current_time, travel_duration)\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': arrival_time, 'to': meeting['location']})\n\n        # Wait until meeting start time\n        meeting_start_time = convert_time_to_minutes(meeting['start_time'])\n        arrival_time_minutes = convert_time_to_minutes(arrival_time)\n        wait_duration = meeting_start_time - arrival_time_minutes\n        if wait_duration > 0:\n            schedule.append({'action': 'wait', 'location': meeting['location'], 'time': convert_minutes_to_time(arrival_time_minutes + wait_duration)})\n\n        # Attend meeting\n        schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': meeting['start_time']})\n\n        # Update current location and time\n        current_location = meeting['location']\n        current_time = meeting['end_time']\n\n    return schedule\n\ndef calculate_arrival_time(current_time, travel_duration):\n    current_time_minutes = convert_time_to_minutes(current_time)\n    arrival_time_minutes = current_time_minutes + travel_duration\n    return convert_minutes_to_time(arrival_time_minutes)\n\ndef convert_time_to_minutes(time):\n    time_parts = time[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1])\n    if time[-2:] == 'PM' and hours!= 12:\n        hours += 12\n    elif time[-2:] == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({'schedule': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_444"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Betty",
            "start_time": "7:15AM",
            "end_time": "8:45AM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Mary",
            "start_time": "10:00AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Charles",
            "start_time": "11:15AM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Lisa",
            "start_time": "8:30PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Mary",
            "start_time": "10:00AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Betty",
            "start_time": "10:56AM",
            "end_time": "12:26PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Charles",
            "start_time": "12:47PM",
            "end_time": "2:47PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Lisa",
            "start_time": "8:30PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\ndef calculate_schedule():\n    # Define travel times between locations\n    travel_times = {\n        'Bayview': {'Pacific Heights': 23, 'Mission District': 13, 'Haight-Ashbury': 19, 'Financial District': 19},\n        'Pacific Heights': {'Bayview': 22, 'Mission District': 15, 'Haight-Ashbury': 11, 'Financial District': 13},\n        'Mission District': {'Bayview': 15, 'Pacific Heights': 16, 'Haight-Ashbury': 12, 'Financial District': 17},\n        'Haight-Ashbury': {'Bayview': 18, 'Pacific Heights': 12, 'Mission District': 11, 'Financial District': 21},\n        'Financial District': {'Bayview': 19, 'Pacific Heights': 13, 'Mission District': 17, 'Haight-Ashbury': 19}\n    }\n\n    # Define meeting constraints\n    meetings = [\n        {'name': 'Mary', 'location': 'Pacific Heights','start_time': '10:00AM', 'end_time': '7:00PM', 'duration': 45},\n        {'name': 'Lisa', 'location': 'Mission District','start_time': '8:30PM', 'end_time': '10:00PM', 'duration': 75},\n        {'name': 'Betty', 'location': 'Haight-Ashbury','start_time': '7:15AM', 'end_time': '5:15PM', 'duration': 90},\n        {'name': 'Charles', 'location': 'Financial District','start_time': '11:15AM', 'end_time': '3:00PM', 'duration': 120}\n    ]\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Bayview at 9:00AM\n    schedule.append({'action':'start', 'location': 'Bayview', 'time': '9:00AM'})\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: convert_time_to_minutes(x['start_time']))\n\n    # Iterate through meetings\n    current_location = 'Bayview'\n    current_time = '9:00AM'\n    for meeting in meetings:\n        # Travel to meeting location\n        travel_duration = travel_times[current_location][meeting['location']]\n        arrival_time = calculate_arrival_time(current_time, travel_duration)\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': arrival_time, 'to': meeting['location']})\n\n        # Wait until meeting start time\n        meeting_start_time = convert_time_to_minutes(meeting['start_time'])\n        arrival_time_minutes = convert_time_to_minutes(arrival_time)\n        wait_duration = meeting_start_time - arrival_time_minutes\n        if wait_duration > 0:\n            schedule.append({'action': 'wait', 'location': meeting['location'], 'time': convert_minutes_to_time(arrival_time_minutes + wait_duration)})\n\n        # Attend meeting\n        schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': meeting['start_time']})\n\n        # Update current location and time\n        current_location = meeting['location']\n        current_time = meeting['end_time']\n\n    return schedule\n\ndef calculate_arrival_time(current_time, travel_duration):\n    current_time_minutes = convert_time_to_minutes(current_time)\n    arrival_time_minutes = current_time_minutes + travel_duration\n    return convert_minutes_to_time(arrival_time_minutes)\n\ndef convert_time_to_minutes(time):\n    time_parts = time[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1])\n    if time[-2:] == 'PM' and hours!= 12:\n        hours += 12\n    elif time[-2:] == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({'schedule': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_350"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Sandra",
            "start_time": "7:00AM",
            "end_time": "9:00AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Amanda",
            "start_time": "7:45AM",
            "end_time": "8:00AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Robert",
            "start_time": "10:00AM",
            "end_time": "10:15AM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Kimberly",
            "start_time": "10:15AM",
            "end_time": "12:00PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Elizabeth",
            "start_time": "10:30AM",
            "end_time": "12:00PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Kenneth",
            "start_time": "10:45AM",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "David",
            "start_time": "3:15PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Melissa",
            "start_time": "6:15PM",
            "end_time": "6:30PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Thomas",
            "start_time": "7:30PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Sandra",
            "start_time": "9:12AM",
            "end_time": "11:12AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Robert",
            "start_time": "11:25AM",
            "end_time": "11:40AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Kenneth",
            "start_time": "11:49AM",
            "end_time": "12:34PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Elizabeth",
            "start_time": "12:54PM",
            "end_time": "2:24PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "David",
            "start_time": "3:15PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Kimberly",
            "start_time": "4:27PM",
            "end_time": "6:12PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Amanda",
            "start_time": "6:23PM",
            "end_time": "6:38PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Melissa",
            "start_time": "6:45PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Thomas",
            "start_time": "7:30PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\ndef calculate_schedule():\n    # Define travel times between locations\n    travel_times = {\n        'Haight-Ashbury': {'Mission District': 11, 'Union Square': 19, 'Pacific Heights': 12, 'Bayview': 18, 'Fisherman\\'s Wharf': 23, 'Marina District': 17, 'Richmond District': 10, 'Sunset District': 15, 'Golden Gate Park': 7},\n        'Mission District': {'Haight-Ashbury': 12, 'Union Square': 15, 'Pacific Heights': 16, 'Bayview': 14, 'Fisherman\\'s Wharf': 22, 'Marina District': 19, 'Richmond District': 20, 'Sunset District': 24, 'Golden Gate Park': 17},\n        'Union Square': {'Haight-Ashbury': 18, 'Mission District': 14, 'Pacific Heights': 15, 'Bayview': 15, 'Fisherman\\'s Wharf': 15, 'Marina District': 18, 'Richmond District': 20, 'Sunset District': 27, 'Golden Gate Park': 22},\n        'Pacific Heights': {'Haight-Ashbury': 11, 'Mission District': 15, 'Union Square': 12, 'Bayview': 22, 'Fisherman\\'s Wharf': 13, 'Marina District': 6, 'Richmond District': 12, 'Sunset District': 21, 'Golden Gate Park': 15},\n        'Bayview': {'Haight-Ashbury': 19, 'Mission District': 13, 'Union Square': 18, 'Pacific Heights': 23, 'Fisherman\\'s Wharf': 25, 'Marina District': 27, 'Richmond District': 25, 'Sunset District': 23, 'Golden Gate Park': 22},\n        'Fisherman\\'s Wharf': {'Haight-Ashbury': 22, 'Mission District': 22, 'Union Square': 13, 'Pacific Heights': 12, 'Bayview': 26, 'Marina District': 9, 'Richmond District': 18, 'Sunset District': 27, 'Golden Gate Park': 25},\n        'Marina District': {'Haight-Ashbury': 16, 'Mission District': 20, 'Union Square': 16, 'Pacific Heights': 7, 'Bayview': 27, 'Fisherman\\'s Wharf': 10, 'Richmond District': 11, 'Sunset District': 19, 'Golden Gate Park': 18},\n        'Richmond District': {'Haight-Ashbury': 10, 'Mission District': 20, 'Union Square': 21, 'Pacific Heights': 10, 'Bayview': 27, 'Fisherman\\'s Wharf': 18, 'Marina District': 9, 'Sunset District': 11, 'Golden Gate Park': 9},\n        'Sunset District': {'Haight-Ashbury': 15, 'Mission District': 25, 'Union Square': 30, 'Pacific Heights': 21, 'Bayview': 22, 'Fisherman\\'s Wharf': 29, 'Marina District': 21, 'Richmond District': 12, 'Golden Gate Park': 11},\n        'Golden Gate Park': {'Haight-Ashbury': 7, 'Mission District': 17, 'Union Square': 22, 'Pacific Heights': 16, 'Bayview': 23, 'Fisherman\\'s Wharf': 24, 'Marina District': 16, 'Richmond District': 7, 'Sunset District': 10}\n    }\n\n    # Define meeting constraints\n    meetings = [\n        {'name': 'Elizabeth', 'location': 'Mission District','start_time': '10:30AM', 'end_time': '8:00PM', 'duration': 90},\n        {'name': 'David', 'location': 'Union Square','start_time': '3:15PM', 'end_time': '7:00PM', 'duration': 45},\n        {'name': 'Sandra', 'location': 'Pacific Heights','start_time': '7:00AM', 'end_time': '8:00PM', 'duration': 120},\n        {'name': 'Thomas', 'location': 'Bayview','start_time': '7:30PM', 'end_time': '8:30PM', 'duration': 30},\n        {'name': 'Robert', 'location': 'Fisherman\\'s Wharf','start_time': '10:00AM', 'end_time': '3:00PM', 'duration': 15},\n        {'name': 'Kenneth', 'location': 'Marina District','start_time': '10:45AM', 'end_time': '1:00PM', 'duration': 45},\n        {'name': 'Melissa', 'location': 'Richmond District','start_time': '6:15PM', 'end_time': '8:00PM', 'duration': 15},\n        {'name': 'Kimberly', 'location': 'Sunset District','start_time': '10:15AM', 'end_time': '6:15PM', 'duration': 105},\n        {'name': 'Amanda', 'location': 'Golden Gate Park','start_time': '7:45AM', 'end_time': '6:45PM', 'duration': 15}\n    ]\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Haight-Ashbury at 9:00AM\n    schedule.append({'action':'start', 'location': 'Haight-Ashbury', 'time': '9:00AM'})\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: convert_time_to_minutes(x['start_time']))\n\n    # Iterate through meetings\n    current_location = 'Haight-Ashbury'\n    current_time = '9:00AM'\n    for meeting in meetings:\n        # Travel to meeting location\n        travel_duration = travel_times[current_location][meeting['location']]\n        arrival_time = calculate_arrival_time(current_time, travel_duration)\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': arrival_time, 'to': meeting['location']})\n\n        # Wait until meeting start time\n        meeting_start_time = convert_time_to_minutes(meeting['start_time'])\n        arrival_time_minutes = convert_time_to_minutes(arrival_time)\n        wait_duration = meeting_start_time - arrival_time_minutes\n        if wait_duration > 0:\n            schedule.append({'action': 'wait', 'location': meeting['location'], 'time': convert_minutes_to_time(arrival_time_minutes + wait_duration)})\n\n        # Attend meeting\n        schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': meeting['start_time']})\n\n        # Update current location and time\n        current_location = meeting['location']\n        current_time = meeting['end_time']\n\n    return schedule\n\ndef calculate_arrival_time(current_time, travel_duration):\n    current_time_minutes = convert_time_to_minutes(current_time)\n    arrival_time_minutes = current_time_minutes + travel_duration\n    return convert_minutes_to_time(arrival_time_minutes)\n\ndef convert_time_to_minutes(time):\n    time_parts = time[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1])\n    if time[-2:] == 'PM' and hours!= 12:\n        hours += 12\n    elif time[-2:] == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({'schedule': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_867"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Elizabeth",
            "start_time": "8:45AM",
            "end_time": "10:30AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Brian",
            "start_time": "9:45AM",
            "end_time": "10:00AM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Jason",
            "start_time": "1:00PM",
            "end_time": "2:30PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Laura",
            "start_time": "2:15PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Melissa",
            "start_time": "6:45PM",
            "end_time": "7:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Jason",
            "start_time": "1:00PM",
            "end_time": "2:30PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Brian",
            "start_time": "2:52PM",
            "end_time": "3:07PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Elizabeth",
            "start_time": "3:30PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Laura",
            "start_time": "5:37PM",
            "end_time": "6:52PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Melissa",
            "start_time": "7:02PM",
            "end_time": "7:47PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\ndef calculate_schedule():\n    # Define travel times between locations\n    travel_times = {\n        'Presidio': {'Richmond District': 7, 'North Beach': 18, 'Financial District': 23, 'Golden Gate Park': 12, 'Union Square': 22},\n        'Richmond District': {'Presidio': 7, 'North Beach': 17, 'Financial District': 22, 'Golden Gate Park': 9, 'Union Square': 21},\n        'North Beach': {'Presidio': 17, 'Richmond District': 18, 'Financial District': 8, 'Golden Gate Park': 22, 'Union Square': 7},\n        'Financial District': {'Presidio': 22, 'Richmond District': 21, 'North Beach': 7, 'Golden Gate Park': 23, 'Union Square': 9},\n        'Golden Gate Park': {'Presidio': 11, 'Richmond District': 7, 'North Beach': 24, 'Financial District': 26, 'Union Square': 22},\n        'Union Square': {'Presidio': 24, 'Richmond District': 20, 'North Beach': 10, 'Financial District': 9, 'Golden Gate Park': 22}\n    }\n\n    # Define meeting constraints\n    meetings = [\n        {'name': 'Jason', 'location': 'Richmond District','start_time': '1:00PM', 'end_time': '8:45PM', 'duration': 90},\n        {'name': 'Melissa', 'location': 'North Beach','start_time': '6:45PM', 'end_time': '8:15PM', 'duration': 45},\n        {'name': 'Brian', 'location': 'Financial District','start_time': '9:45AM', 'end_time': '9:45PM', 'duration': 15},\n        {'name': 'Elizabeth', 'location': 'Golden Gate Park','start_time': '8:45AM', 'end_time': '9:30PM', 'duration': 105},\n        {'name': 'Laura', 'location': 'Union Square','start_time': '2:15PM', 'end_time': '7:30PM', 'duration': 75}\n    ]\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Presidio at 9:00AM\n    schedule.append({'action':'start', 'location': 'Presidio', 'time': '9:00AM'})\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: convert_time_to_minutes(x['start_time']))\n\n    # Iterate through meetings\n    current_location = 'Presidio'\n    current_time = '9:00AM'\n    for meeting in meetings:\n        # Travel to meeting location\n        travel_duration = travel_times[current_location][meeting['location']]\n        arrival_time = calculate_arrival_time(current_time, travel_duration)\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': arrival_time, 'to': meeting['location']})\n\n        # Wait until meeting start time\n        meeting_start_time = convert_time_to_minutes(meeting['start_time'])\n        arrival_time_minutes = convert_time_to_minutes(arrival_time)\n        wait_duration = meeting_start_time - arrival_time_minutes\n        if wait_duration > 0:\n            schedule.append({'action': 'wait', 'location': meeting['location'], 'time': convert_minutes_to_time(arrival_time_minutes + wait_duration)})\n\n        # Attend meeting\n        schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': meeting['start_time']})\n\n        # Update current location and time\n        current_location = meeting['location']\n        current_time = meeting['end_time']\n\n    return schedule\n\ndef calculate_arrival_time(current_time, travel_duration):\n    current_time_minutes = convert_time_to_minutes(current_time)\n    arrival_time_minutes = current_time_minutes + travel_duration\n    return convert_minutes_to_time(arrival_time_minutes)\n\ndef convert_time_to_minutes(time):\n    time_parts = time[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1])\n    if time[-2:] == 'PM' and hours!= 12:\n        hours += 12\n    elif time[-2:] == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({'schedule': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_423"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Joseph",
            "start_time": "8:30AM",
            "end_time": "10:15AM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Melissa",
            "start_time": "9:30AM",
            "end_time": "10:00AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Matthew",
            "start_time": "10:15AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Robert",
            "start_time": "11:15AM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Jeffrey",
            "start_time": "12:45PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Amanda",
            "start_time": "2:45PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Nancy",
            "start_time": "5:00PM",
            "end_time": "6:45PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Karen",
            "start_time": "5:30PM",
            "end_time": "7:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Melissa",
            "start_time": "9:30AM",
            "end_time": "10:00AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Matthew",
            "start_time": "10:19AM",
            "end_time": "10:49AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Robert",
            "start_time": "11:15AM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Joseph",
            "start_time": "1:24PM",
            "end_time": "3:09PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Amanda",
            "start_time": "3:25PM",
            "end_time": "5:10PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Karen",
            "start_time": "5:30PM",
            "end_time": "7:15PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Nancy",
            "start_time": "7:31PM",
            "end_time": "9:16PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\ndef calculate_schedule():\n    # Define travel times between locations\n    travel_times = {\n        'Presidio': {'Marina District': 11, 'The Castro': 21, 'Fisherman\\'s Wharf': 19, 'Bayview': 31, 'Pacific Heights': 11, 'Mission District': 26, 'Alamo Square': 19, 'Golden Gate Park': 12},\n        'Marina District': {'Presidio': 10, 'The Castro': 22, 'Fisherman\\'s Wharf': 10, 'Bayview': 27, 'Pacific Heights': 7, 'Mission District': 20, 'Alamo Square': 15, 'Golden Gate Park': 18},\n        'The Castro': {'Presidio': 20, 'Marina District': 21, 'Fisherman\\'s Wharf': 24, 'Bayview': 19, 'Pacific Heights': 16, 'Mission District': 7, 'Alamo Square': 8, 'Golden Gate Park': 11},\n        'Fisherman\\'s Wharf': {'Presidio': 17, 'Marina District': 9, 'The Castro': 27, 'Bayview': 26, 'Pacific Heights': 12, 'Mission District': 22, 'Alamo Square': 21, 'Golden Gate Park': 25},\n        'Bayview': {'Presidio': 32, 'Marina District': 27, 'The Castro': 19, 'Fisherman\\'s Wharf': 25, 'Pacific Heights': 23, 'Mission District': 13, 'Alamo Square': 16, 'Golden Gate Park': 22},\n        'Pacific Heights': {'Presidio': 11, 'Marina District': 6, 'The Castro': 16, 'Fisherman\\'s Wharf': 13, 'Bayview': 22, 'Mission District': 15, 'Alamo Square': 10, 'Golden Gate Park': 15},\n        'Mission District': {'Presidio': 25, 'Marina District': 19, 'The Castro': 7, 'Fisherman\\'s Wharf': 22, 'Bayview': 14, 'Pacific Heights': 16, 'Alamo Square': 11, 'Golden Gate Park': 17},\n        'Alamo Square': {'Presidio': 17, 'Marina District': 15, 'The Castro': 8, 'Fisherman\\'s Wharf': 19, 'Bayview': 16, 'Pacific Heights': 10, 'Mission District': 10, 'Golden Gate Park': 9},\n        'Golden Gate Park': {'Presidio': 11, 'Marina District': 16, 'The Castro': 13, 'Fisherman\\'s Wharf': 24, 'Bayview': 23, 'Pacific Heights': 16, 'Mission District': 17, 'Alamo Square': 9}\n    }\n\n    # Define meeting constraints\n    meetings = [\n        {'name': 'Amanda', 'location': 'Marina District','start_time': '2:45PM', 'end_time': '7:30PM', 'duration': 105},\n        {'name': 'Melissa', 'location': 'The Castro','start_time': '9:30AM', 'end_time': '5:00PM', 'duration': 30},\n        {'name': 'Jeffrey', 'location': 'Fisherman\\'s Wharf','start_time': '12:45PM', 'end_time': '6:45PM', 'duration': 120},\n        {'name': 'Matthew', 'location': 'Bayview','start_time': '10:15AM', 'end_time': '1:15PM', 'duration': 30},\n        {'name': 'Nancy', 'location': 'Pacific Heights','start_time': '5:00PM', 'end_time': '9:30PM', 'duration': 105},\n        {'name': 'Karen', 'location': 'Mission District','start_time': '5:30PM', 'end_time': '8:30PM', 'duration': 105},\n        {'name': 'Robert', 'location': 'Alamo Square','start_time': '11:15AM', 'end_time': '5:30PM', 'duration': 120},\n        {'name': 'Joseph', 'location': 'Golden Gate Park','start_time': '8:30AM', 'end_time': '9:15PM', 'duration': 105}\n    ]\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Presidio at 9:00AM\n    schedule.append({'action':'start', 'location': 'Presidio', 'time': '9:00AM'})\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: convert_time_to_minutes(x['start_time']))\n\n    # Iterate through meetings\n    current_location = 'Presidio'\n    current_time = '9:00AM'\n    for meeting in meetings:\n        # Travel to meeting location\n        travel_duration = travel_times[current_location][meeting['location']]\n        arrival_time = calculate_arrival_time(current_time, travel_duration)\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': arrival_time, 'to': meeting['location']})\n\n        # Wait until meeting start time\n        meeting_start_time = convert_time_to_minutes(meeting['start_time'])\n        arrival_time_minutes = convert_time_to_minutes(arrival_time)\n        wait_duration = meeting_start_time - arrival_time_minutes\n        if wait_duration > 0:\n            schedule.append({'action': 'wait', 'location': meeting['location'], 'time': convert_minutes_to_time(arrival_time_minutes + wait_duration)})\n\n        # Attend meeting\n        schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': meeting['start_time']})\n\n        # Update current location and time\n        current_location = meeting['location']\n        current_time = meeting['end_time']\n\n    return schedule\n\ndef calculate_arrival_time(current_time, travel_duration):\n    current_time_minutes = convert_time_to_minutes(current_time)\n    arrival_time_minutes = current_time_minutes + travel_duration\n    return convert_minutes_to_time(arrival_time_minutes)\n\ndef convert_time_to_minutes(time):\n    time_parts = time[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1])\n    if time[-2:] == 'PM' and hours!= 12:\n        hours += 12\n    elif time[-2:] == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({'schedule': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_715"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Robert",
            "start_time": "7:45AM",
            "end_time": "9:15AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Anthony",
            "start_time": "7:45AM",
            "end_time": "8:00AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Steven",
            "start_time": "8:30AM",
            "end_time": "9:45AM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Sandra",
            "start_time": "2:45PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Kevin",
            "start_time": "7:15PM",
            "end_time": "8:30PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Stephanie",
            "start_time": "8:00PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Steven",
            "start_time": "9:07AM",
            "end_time": "10:22AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Anthony",
            "start_time": "10:32AM",
            "end_time": "10:47AM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Sandra",
            "start_time": "2:45PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Stephanie",
            "start_time": "8:00PM",
            "end_time": "8:15PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Kevin",
            "start_time": "8:22PM",
            "end_time": "9:37PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\ndef calculate_schedule():\n    # Define travel times between locations\n    travel_times = {\n        'Haight-Ashbury': {'Russian Hill': 17, 'Fisherman\\'s Wharf': 23, 'Nob Hill': 15, 'Golden Gate Park': 7, 'Alamo Square': 5, 'Pacific Heights': 12},\n        'Russian Hill': {'Haight-Ashbury': 17, 'Fisherman\\'s Wharf': 7, 'Nob Hill': 5, 'Golden Gate Park': 21, 'Alamo Square': 15, 'Pacific Heights': 7},\n        'Fisherman\\'s Wharf': {'Haight-Ashbury': 22, 'Russian Hill': 7, 'Nob Hill': 11, 'Golden Gate Park': 25, 'Alamo Square': 20, 'Pacific Heights': 12},\n        'Nob Hill': {'Haight-Ashbury': 13, 'Russian Hill': 5, 'Fisherman\\'s Wharf': 11, 'Golden Gate Park': 17, 'Alamo Square': 11, 'Pacific Heights': 8},\n        'Golden Gate Park': {'Haight-Ashbury': 7, 'Russian Hill': 19, 'Fisherman\\'s Wharf': 24, 'Nob Hill': 20, 'Alamo Square': 10, 'Pacific Heights': 16},\n        'Alamo Square': {'Haight-Ashbury': 5, 'Russian Hill': 13, 'Fisherman\\'s Wharf': 19, 'Nob Hill': 11, 'Golden Gate Park': 9, 'Pacific Heights': 10},\n        'Pacific Heights': {'Haight-Ashbury': 11, 'Russian Hill': 7, 'Fisherman\\'s Wharf': 13, 'Nob Hill': 8, 'Golden Gate Park': 15, 'Alamo Square': 10}\n    }\n\n    # Define meeting constraints\n    meetings = [\n        {'name': 'Stephanie', 'location': 'Russian Hill','start_time': '8:00PM', 'end_time': '8:45PM', 'duration': 15},\n        {'name': 'Kevin', 'location': 'Fisherman\\'s Wharf','start_time': '7:15PM', 'end_time': '9:45PM', 'duration': 75},\n        {'name': 'Robert', 'location': 'Nob Hill','start_time': '7:45AM', 'end_time': '10:30AM', 'duration': 90},\n        {'name': 'Steven', 'location': 'Golden Gate Park','start_time': '8:30AM', 'end_time': '5:00PM', 'duration': 75},\n        {'name': 'Anthony', 'location': 'Alamo Square','start_time': '7:45AM', 'end_time': '7:45PM', 'duration': 15},\n        {'name': 'Sandra', 'location': 'Pacific Heights','start_time': '2:45PM', 'end_time': '9:45PM', 'duration': 45}\n    ]\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Haight-Ashbury at 9:00AM\n    schedule.append({'action':'start', 'location': 'Haight-Ashbury', 'time': '9:00AM'})\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: convert_time_to_minutes(x['start_time']))\n\n    # Iterate through meetings\n    current_location = 'Haight-Ashbury'\n    current_time = '9:00AM'\n    for meeting in meetings:\n        # Travel to meeting location\n        travel_duration = travel_times[current_location][meeting['location']]\n        arrival_time = calculate_arrival_time(current_time, travel_duration)\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': arrival_time, 'to': meeting['location']})\n\n        # Wait until meeting start time\n        meeting_start_time = convert_time_to_minutes(meeting['start_time'])\n        arrival_time_minutes = convert_time_to_minutes(arrival_time)\n        wait_duration = meeting_start_time - arrival_time_minutes\n        if wait_duration > 0:\n            schedule.append({'action': 'wait', 'location': meeting['location'], 'time': convert_minutes_to_time(arrival_time_minutes + wait_duration)})\n\n        # Attend meeting\n        schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': meeting['start_time']})\n\n        # Update current location and time\n        current_location = meeting['location']\n        current_time = meeting['end_time']\n\n    return schedule\n\ndef calculate_arrival_time(current_time, travel_duration):\n    current_time_minutes = convert_time_to_minutes(current_time)\n    arrival_time_minutes = current_time_minutes + travel_duration\n    return convert_minutes_to_time(arrival_time_minutes)\n\ndef convert_time_to_minutes(time):\n    time_parts = time[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1])\n    if time[-2:] == 'PM' and hours!= 12:\n        hours += 12\n    elif time[-2:] == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({'schedule': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_577"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Elizabeth",
            "start_time": "10:00AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Ashley",
            "start_time": "11:30AM",
            "end_time": "12:15PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Joseph",
            "start_time": "11:45AM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Karen",
            "start_time": "2:15PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Kimberly",
            "start_time": "2:15PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Richard",
            "start_time": "2:30PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Helen",
            "start_time": "2:45PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Robert",
            "start_time": "9:45PM",
            "end_time": "10:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Elizabeth",
            "start_time": "10:00AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Joseph",
            "start_time": "11:45AM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Richard",
            "start_time": "2:30PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Kimberly",
            "start_time": "3:22PM",
            "end_time": "5:07PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Karen",
            "start_time": "5:18PM",
            "end_time": "5:48PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Helen",
            "start_time": "6:12PM",
            "end_time": "7:57PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Ashley",
            "start_time": "8:21PM",
            "end_time": "9:06PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Robert",
            "start_time": "9:45PM",
            "end_time": "10:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\ndef calculate_schedule():\n    # Define travel times between locations\n    travel_times = {\n        'Marina District': {'Mission District': 20, 'Fisherman\\'s Wharf': 10, 'Presidio': 10, 'Union Square': 16, 'Sunset District': 19, 'Financial District': 17, 'Haight-Ashbury': 16, 'Russian Hill': 8},\n        'Mission District': {'Marina District': 19, 'Fisherman\\'s Wharf': 22, 'Presidio': 25, 'Union Square': 15, 'Sunset District': 24, 'Financial District': 15, 'Haight-Ashbury': 12, 'Russian Hill': 15},\n        'Fisherman\\'s Wharf': {'Marina District': 9, 'Mission District': 22, 'Presidio': 17, 'Union Square': 13, 'Sunset District': 27, 'Financial District': 11, 'Haight-Ashbury': 22, 'Russian Hill': 7},\n        'Presidio': {'Marina District': 11, 'Mission District': 26, 'Fisherman\\'s Wharf': 19, 'Union Square': 22, 'Sunset District': 15, 'Financial District': 23, 'Haight-Ashbury': 15, 'Russian Hill': 14},\n        'Union Square': {'Marina District': 18, 'Mission District': 14, 'Fisherman\\'s Wharf': 15, 'Presidio': 24, 'Sunset District': 27, 'Financial District': 9, 'Haight-Ashbury': 18, 'Russian Hill': 13},\n        'Sunset District': {'Marina District': 21, 'Mission District': 25, 'Fisherman\\'s Wharf': 29, 'Presidio': 16, 'Union Square': 30, 'Financial District': 30, 'Haight-Ashbury': 15, 'Russian Hill': 24},\n        'Financial District': {'Marina District': 15, 'Mission District': 17, 'Fisherman\\'s Wharf': 10, 'Presidio': 22, 'Union Square': 9, 'Sunset District': 30, 'Haight-Ashbury': 19, 'Russian Hill': 11},\n        'Haight-Ashbury': {'Marina District': 17, 'Mission District': 11, 'Fisherman\\'s Wharf': 23, 'Presidio': 15, 'Union Square': 19, 'Sunset District': 15, 'Financial District': 21, 'Russian Hill': 17},\n        'Russian Hill': {'Marina District': 7, 'Mission District': 16, 'Fisherman\\'s Wharf': 7, 'Presidio': 14, 'Union Square': 10, 'Sunset District': 23, 'Financial District': 11, 'Haight-Ashbury': 17}\n    }\n\n    # Define meeting constraints\n    meetings = [\n        {'name': 'Karen', 'location': 'Mission District','start_time': '2:15PM', 'end_time': '10:00PM', 'duration': 30},\n        {'name': 'Richard', 'location': 'Fisherman\\'s Wharf','start_time': '2:30PM', 'end_time': '5:30PM', 'duration': 30},\n        {'name': 'Robert', 'location': 'Presidio','start_time': '9:45PM', 'end_time': '10:45PM', 'duration': 60},\n        {'name': 'Joseph', 'location': 'Union Square','start_time': '11:45AM', 'end_time': '2:45PM', 'duration': 120},\n        {'name': 'Helen', 'location': 'Sunset District','start_time': '2:45PM', 'end_time': '8:45PM', 'duration': 105},\n        {'name': 'Elizabeth', 'location': 'Financial District','start_time': '10:00AM', 'end_time': '12:45PM', 'duration': 75},\n        {'name': 'Kimberly', 'location': 'Haight-Ashbury','start_time': '2:15PM', 'end_time': '5:30PM', 'duration': 105},\n        {'name': 'Ashley', 'location': 'Russian Hill','start_time': '11:30AM', 'end_time': '9:30PM', 'duration': 45}\n    ]\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Marina District at 9:00AM\n    schedule.append({'action':'start', 'location': 'Marina District', 'time': '9:00AM'})\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: convert_time_to_minutes(x['start_time']))\n\n    # Iterate through meetings\n    current_location = 'Marina District'\n    current_time = '9:00AM'\n    for meeting in meetings:\n        # Travel to meeting location\n        travel_duration = travel_times[current_location][meeting['location']]\n        arrival_time = calculate_arrival_time(current_time, travel_duration)\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': arrival_time, 'to': meeting['location']})\n\n        # Wait until meeting start time\n        meeting_start_time = convert_time_to_minutes(meeting['start_time'])\n        arrival_time_minutes = convert_time_to_minutes(arrival_time)\n        wait_duration = meeting_start_time - arrival_time_minutes\n        if wait_duration > 0:\n            schedule.append({'action': 'wait', 'location': meeting['location'], 'time': convert_minutes_to_time(arrival_time_minutes + wait_duration)})\n\n        # Attend meeting\n        schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': meeting['start_time']})\n\n        # Update current location and time\n        current_location = meeting['location']\n        current_time = meeting['end_time']\n\n    return schedule\n\ndef calculate_arrival_time(current_time, travel_duration):\n    current_time_minutes = convert_time_to_minutes(current_time)\n    arrival_time_minutes = current_time_minutes + travel_duration\n    return convert_minutes_to_time(arrival_time_minutes)\n\ndef convert_time_to_minutes(time):\n    time_parts = time[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1])\n    if time[-2:] == 'PM' and hours!= 12:\n        hours += 12\n    elif time[-2:] == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({'schedule': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_728"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Ronald",
            "start_time": "7:45AM",
            "end_time": "9:45AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Richard",
            "start_time": "9:30AM",
            "end_time": "9:45AM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Laura",
            "start_time": "9:45AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Jeffrey",
            "start_time": "10:15AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Jason",
            "start_time": "10:45AM",
            "end_time": "12:30PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Margaret",
            "start_time": "1:15PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Elizabeth",
            "start_time": "2:45PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Melissa",
            "start_time": "5:45PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "George",
            "start_time": "7:00PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Jeffrey",
            "start_time": "10:15AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Ronald",
            "start_time": "12:06PM",
            "end_time": "2:06PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Margaret",
            "start_time": "2:22PM",
            "end_time": "3:52PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Richard",
            "start_time": "3:59PM",
            "end_time": "4:14PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Laura",
            "start_time": "4:34PM",
            "end_time": "5:34PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Melissa",
            "start_time": "5:55PM",
            "end_time": "6:10PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "George",
            "start_time": "7:00PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\ndef calculate_schedule():\n    # Define travel times between locations\n    travel_times = {\n        'Presidio': {'Fisherman\\'s Wharf': 19, 'Alamo Square': 19, 'Financial District': 23, 'Union Square': 22, 'Sunset District': 15, 'Embarcadero': 20, 'Golden Gate Park': 12, 'Chinatown': 21, 'Richmond District': 7},\n        'Fisherman\\'s Wharf': {'Presidio': 17, 'Alamo Square': 21, 'Financial District': 11, 'Union Square': 13, 'Sunset District': 27, 'Embarcadero': 8, 'Golden Gate Park': 25, 'Chinatown': 12, 'Richmond District': 18},\n        'Alamo Square': {'Presidio': 17, 'Fisherman\\'s Wharf': 19, 'Financial District': 17, 'Union Square': 14, 'Sunset District': 16, 'Embarcadero': 16, 'Golden Gate Park': 9, 'Chinatown': 15, 'Richmond District': 11},\n        'Financial District': {'Presidio': 22, 'Fisherman\\'s Wharf': 10, 'Alamo Square': 17, 'Union Square': 9, 'Sunset District': 30, 'Embarcadero': 4, 'Golden Gate Park': 23, 'Chinatown': 5, 'Richmond District': 21},\n        'Union Square': {'Presidio': 24, 'Fisherman\\'s Wharf': 15, 'Alamo Square': 15, 'Financial District': 9, 'Sunset District': 27, 'Embarcadero': 11, 'Golden Gate Park': 22, 'Chinatown': 7, 'Richmond District': 20},\n        'Sunset District': {'Presidio': 16, 'Fisherman\\'s Wharf': 29, 'Alamo Square': 17, 'Financial District': 30, 'Union Square': 30, 'Embarcadero': 30, 'Golden Gate Park': 11, 'Chinatown': 30, 'Richmond District': 12},\n        'Embarcadero': {'Presidio': 20, 'Fisherman\\'s Wharf': 6, 'Alamo Square': 19, 'Financial District': 5, 'Union Square': 10, 'Sunset District': 30, 'Golden Gate Park': 25, 'Chinatown': 7, 'Richmond District': 21},\n        'Golden Gate Park': {'Presidio': 11, 'Fisherman\\'s Wharf': 24, 'Alamo Square': 9, 'Financial District': 26, 'Union Square': 22, 'Sunset District': 10, 'Embarcadero': 25, 'Chinatown': 23, 'Richmond District': 7},\n        'Chinatown': {'Presidio': 19, 'Fisherman\\'s Wharf': 8, 'Alamo Square': 17, 'Financial District': 5, 'Union Square': 7, 'Sunset District': 29, 'Embarcadero': 5, 'Golden Gate Park': 23, 'Richmond District': 20},\n        'Richmond District': {'Presidio': 7, 'Fisherman\\'s Wharf': 18, 'Alamo Square': 13, 'Financial District': 22, 'Union Square': 21, 'Sunset District': 11, 'Embarcadero': 19, 'Golden Gate Park': 9, 'Chinatown': 20}\n    }\n\n    # Define meeting constraints\n    meetings = [\n        {'name': 'Jeffrey', 'location': 'Fisherman\\'s Wharf','start_time': '10:15AM', 'end_time': '1:00PM', 'duration': 90},\n        {'name': 'Ronald', 'location': 'Alamo Square','start_time': '7:45AM', 'end_time': '2:45PM', 'duration': 120},\n        {'name': 'Jason', 'location': 'Financial District','start_time': '10:45AM', 'end_time': '4:00PM', 'duration': 105},\n        {'name': 'Melissa', 'location': 'Union Square','start_time': '5:45PM', 'end_time': '6:15PM', 'duration': 15},\n        {'name': 'Elizabeth', 'location': 'Sunset District','start_time': '2:45PM', 'end_time': '5:30PM', 'duration': 105},\n        {'name': 'Margaret', 'location': 'Embarcadero','start_time': '1:15PM', 'end_time': '7:00PM', 'duration': 90},\n        {'name': 'George', 'location': 'Golden Gate Park','start_time': '7:00PM', 'end_time': '10:00PM', 'duration': 75},\n        {'name': 'Richard', 'location': 'Chinatown','start_time': '9:30AM', 'end_time': '9:00PM', 'duration': 15},\n        {'name': 'Laura', 'location': 'Richmond District','start_time': '9:45AM', 'end_time': '6:00PM', 'duration': 60}\n    ]\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Presidio at 9:00AM\n    schedule.append({'action':'start', 'location': 'Presidio', 'time': '9:00AM'})\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: convert_time_to_minutes(x['start_time']))\n\n    # Iterate through meetings\n    current_location = 'Presidio'\n    current_time = '9:00AM'\n    for meeting in meetings:\n        # Travel to meeting location\n        travel_duration = travel_times[current_location][meeting['location']]\n        arrival_time = calculate_arrival_time(current_time, travel_duration)\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': arrival_time, 'to': meeting['location']})\n\n        # Wait until meeting start time\n        meeting_start_time = convert_time_to_minutes(meeting['start_time'])\n        arrival_time_minutes = convert_time_to_minutes(arrival_time)\n        wait_duration = meeting_start_time - arrival_time_minutes\n        if wait_duration > 0:\n            schedule.append({'action': 'wait', 'location': meeting['location'], 'time': convert_minutes_to_time(arrival_time_minutes + wait_duration)})\n\n        # Attend meeting\n        schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': meeting['start_time']})\n\n        # Update current location and time\n        current_location = meeting['location']\n        current_time = meeting['end_time']\n\n    return schedule\n\ndef calculate_arrival_time(current_time, travel_duration):\n    current_time_minutes = convert_time_to_minutes(current_time)\n    arrival_time_minutes = current_time_minutes + travel_duration\n    return convert_minutes_to_time(arrival_time_minutes)\n\ndef convert_time_to_minutes(time):\n    time_parts = time[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1])\n    if time[-2:] == 'PM' and hours!= 12:\n        hours += 12\n    elif time[-2:] == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({'schedule': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_831"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Betty",
            "start_time": "7:00AM",
            "end_time": "8:45AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "James",
            "start_time": "7:30AM",
            "end_time": "9:00AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Melissa",
            "start_time": "9:30AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Anthony",
            "start_time": "11:45AM",
            "end_time": "1:00PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Joshua",
            "start_time": "12:15PM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Jeffrey",
            "start_time": "12:15PM",
            "end_time": "1:00PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Timothy",
            "start_time": "12:30PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Emily",
            "start_time": "7:30PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Betty",
            "start_time": "9:13AM",
            "end_time": "10:58AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Melissa",
            "start_time": "11:13AM",
            "end_time": "12:58PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Joshua",
            "start_time": "1:03PM",
            "end_time": "2:33PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Jeffrey",
            "start_time": "2:50PM",
            "end_time": "3:35PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "James",
            "start_time": "4:02PM",
            "end_time": "5:32PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Emily",
            "start_time": "7:30PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\ndef calculate_schedule():\n    # Define travel times between locations\n    travel_times = {\n        'Union Square': {'Russian Hill': 13, 'Alamo Square': 15, 'Haight-Ashbury': 18, 'Marina District': 18, 'Bayview': 15, 'Chinatown': 7, 'Presidio': 24, 'Sunset District': 27},\n        'Russian Hill': {'Union Square': 10, 'Alamo Square': 15, 'Haight-Ashbury': 17, 'Marina District': 7, 'Bayview': 23, 'Chinatown': 9, 'Presidio': 14, 'Sunset District': 23},\n        'Alamo Square': {'Union Square': 14, 'Russian Hill': 13, 'Haight-Ashbury': 5, 'Marina District': 15, 'Bayview': 16, 'Chinatown': 15, 'Presidio': 17, 'Sunset District': 16},\n        'Haight-Ashbury': {'Union Square': 19, 'Russian Hill': 17, 'Alamo Square': 5, 'Marina District': 17, 'Bayview': 18, 'Chinatown': 19, 'Presidio': 15, 'Sunset District': 15},\n        'Marina District': {'Union Square': 16, 'Russian Hill': 8, 'Alamo Square': 15, 'Haight-Ashbury': 16, 'Bayview': 27, 'Chinatown': 15, 'Presidio': 10, 'Sunset District': 19},\n        'Bayview': {'Union Square': 18, 'Russian Hill': 23, 'Alamo Square': 16, 'Haight-Ashbury': 19, 'Marina District': 27, 'Chinatown': 19, 'Presidio': 32, 'Sunset District': 23},\n        'Chinatown': {'Union Square': 7, 'Russian Hill': 7, 'Alamo Square': 17, 'Haight-Ashbury': 19, 'Marina District': 12, 'Bayview': 20, 'Presidio': 19, 'Sunset District': 29},\n        'Presidio': {'Union Square': 22, 'Russian Hill': 14, 'Alamo Square': 19, 'Haight-Ashbury': 15, 'Marina District': 11, 'Bayview': 31, 'Chinatown': 21, 'Sunset District': 15},\n        'Sunset District': {'Union Square': 30, 'Russian Hill': 24, 'Alamo Square': 17, 'Haight-Ashbury': 15, 'Marina District': 21, 'Bayview': 22, 'Chinatown': 30, 'Presidio': 16}\n    }\n\n    # Define meeting constraints\n    meetings = [\n        {'name': 'Betty', 'location': 'Russian Hill','start_time': '7:00AM', 'end_time': '4:45PM', 'duration': 105},\n        {'name': 'Melissa', 'location': 'Alamo Square','start_time': '9:30AM', 'end_time': '5:15PM', 'duration': 105},\n        {'name': 'Joshua', 'location': 'Haight-Ashbury','start_time': '12:15PM', 'end_time': '7:00PM', 'duration': 90},\n        {'name': 'Jeffrey', 'location': 'Marina District','start_time': '12:15PM', 'end_time': '6:00PM', 'duration': 45},\n        {'name': 'James', 'location': 'Bayview','start_time': '7:30AM', 'end_time': '8:00PM', 'duration': 90},\n        {'name': 'Anthony', 'location': 'Chinatown','start_time': '11:45AM', 'end_time': '1:30PM', 'duration': 75},\n        {'name': 'Timothy', 'location': 'Presidio','start_time': '12:30PM', 'end_time': '2:45PM', 'duration': 90},\n        {'name': 'Emily', 'location': 'Sunset District','start_time': '7:30PM', 'end_time': '9:30PM', 'duration': 120}\n    ]\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Union Square at 9:00AM\n    schedule.append({'action':'start', 'location': 'Union Square', 'time': '9:00AM'})\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: convert_time_to_minutes(x['start_time']))\n\n    # Iterate through meetings\n    current_location = 'Union Square'\n    current_time = '9:00AM'\n    for meeting in meetings:\n        # Travel to meeting location\n        travel_duration = travel_times[current_location][meeting['location']]\n        arrival_time = calculate_arrival_time(current_time, travel_duration)\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': arrival_time, 'to': meeting['location']})\n\n        # Wait until meeting start time\n        meeting_start_time = convert_time_to_minutes(meeting['start_time'])\n        arrival_time_minutes = convert_time_to_minutes(arrival_time)\n        wait_duration = meeting_start_time - arrival_time_minutes\n        if wait_duration > 0:\n            schedule.append({'action': 'wait', 'location': meeting['location'], 'time': convert_minutes_to_time(arrival_time_minutes + wait_duration)})\n\n        # Attend meeting\n        schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': meeting['start_time']})\n\n        # Update current location and time\n        current_location = meeting['location']\n        current_time = meeting['end_time']\n\n    return schedule\n\ndef calculate_arrival_time(current_time, travel_duration):\n    current_time_minutes = convert_time_to_minutes(current_time)\n    arrival_time_minutes = current_time_minutes + travel_duration\n    return convert_minutes_to_time(arrival_time_minutes)\n\ndef convert_time_to_minutes(time):\n    time_parts = time[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1])\n    if time[-2:] == 'PM' and hours!= 12:\n        hours += 12\n    elif time[-2:] == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({'schedule': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_789"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Emily",
            "start_time": "11:45AM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Barbara",
            "start_time": "4:45PM",
            "end_time": "5:45PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "William",
            "start_time": "5:15PM",
            "end_time": "7:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Emily",
            "start_time": "11:45AM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Barbara",
            "start_time": "4:45PM",
            "end_time": "5:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\ndef calculate_schedule():\n    # Define travel times between locations\n    travel_times = {\n        'The Castro': {'Alamo Square': 8, 'Union Square': 19, 'Chinatown': 20},\n        'Alamo Square': {'The Castro': 8, 'Union Square': 14, 'Chinatown': 16},\n        'Union Square': {'The Castro': 19, 'Alamo Square': 15, 'Chinatown': 7},\n        'Chinatown': {'The Castro': 22, 'Alamo Square': 17, 'Union Square': 7}\n    }\n\n    # Define meeting constraints\n    meetings = [\n        {'name': 'Emily', 'location': 'Alamo Square','start_time': '11:45AM', 'end_time': '3:15PM', 'duration': 105},\n        {'name': 'Barbara', 'location': 'Union Square','start_time': '4:45PM', 'end_time': '6:15PM', 'duration': 60},\n        {'name': 'William', 'location': 'Chinatown','start_time': '5:15PM', 'end_time': '7:00PM', 'duration': 105}\n    ]\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at The Castro at 9:00AM\n    schedule.append({'action':'start', 'location': 'The Castro', 'time': '9:00AM'})\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: convert_time_to_minutes(x['start_time']))\n\n    # Iterate through meetings\n    current_location = 'The Castro'\n    current_time = '9:00AM'\n    for meeting in meetings:\n        # Travel to meeting location\n        travel_duration = travel_times[current_location][meeting['location']]\n        arrival_time = calculate_arrival_time(current_time, travel_duration)\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': arrival_time, 'to': meeting['location']})\n\n        # Wait until meeting start time\n        meeting_start_time = convert_time_to_minutes(meeting['start_time'])\n        arrival_time_minutes = convert_time_to_minutes(arrival_time)\n        wait_duration = meeting_start_time - arrival_time_minutes\n        if wait_duration > 0:\n            schedule.append({'action': 'wait', 'location': meeting['location'], 'time': convert_minutes_to_time(arrival_time_minutes + wait_duration)})\n\n        # Attend meeting\n        schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': meeting['start_time']})\n\n        # Update current location and time\n        current_location = meeting['location']\n        current_time = meeting['end_time']\n\n    return schedule\n\ndef calculate_arrival_time(current_time, travel_duration):\n    current_time_minutes = convert_time_to_minutes(current_time)\n    arrival_time_minutes = current_time_minutes + travel_duration\n    return convert_minutes_to_time(arrival_time_minutes)\n\ndef convert_time_to_minutes(time):\n    time_parts = time[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1])\n    if time[-2:] == 'PM' and hours!= 12:\n        hours += 12\n    elif time[-2:] == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({'schedule': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_219"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "William",
            "start_time": "7:00AM",
            "end_time": "8:30AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Stephanie",
            "start_time": "7:30AM",
            "end_time": "8:15AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Joseph",
            "start_time": "11:30AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "2:30PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Kimberly",
            "start_time": "3:45PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Laura",
            "start_time": "7:45PM",
            "end_time": "9:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Daniel",
            "start_time": "9:15PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Joseph",
            "start_time": "11:30AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "2:30PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Kimberly",
            "start_time": "3:45PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Laura",
            "start_time": "7:45PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\ndef calculate_schedule():\n    # Define travel times between locations\n    travel_times = {\n        'Fisherman\\'s Wharf': {'The Castro': 26, 'Golden Gate Park': 25, 'Embarcadero': 8, 'Russian Hill': 7, 'Nob Hill': 11, 'Alamo Square': 20, 'North Beach': 6},\n        'The Castro': {'Fisherman\\'s Wharf': 24, 'Golden Gate Park': 11, 'Embarcadero': 22, 'Russian Hill': 18, 'Nob Hill': 16, 'Alamo Square': 8, 'North Beach': 20},\n        'Golden Gate Park': {'Fisherman\\'s Wharf': 24, 'The Castro': 13, 'Embarcadero': 25, 'Russian Hill': 19, 'Nob Hill': 20, 'Alamo Square': 10, 'North Beach': 24},\n        'Embarcadero': {'Fisherman\\'s Wharf': 6, 'The Castro': 25, 'Golden Gate Park': 25, 'Russian Hill': 8, 'Nob Hill': 10, 'Alamo Square': 19, 'North Beach': 5},\n        'Russian Hill': {'Fisherman\\'s Wharf': 7, 'The Castro': 21, 'Golden Gate Park': 21, 'Embarcadero': 8, 'Nob Hill': 5, 'Alamo Square': 15, 'North Beach': 5},\n        'Nob Hill': {'Fisherman\\'s Wharf': 11, 'The Castro': 17, 'Golden Gate Park': 17, 'Embarcadero': 9, 'Russian Hill': 5, 'Alamo Square': 11, 'North Beach': 8},\n        'Alamo Square': {'Fisherman\\'s Wharf': 19, 'The Castro': 8, 'Golden Gate Park': 9, 'Embarcadero': 17, 'Russian Hill': 13, 'Nob Hill': 11, 'North Beach': 15},\n        'North Beach': {'Fisherman\\'s Wharf': 5, 'The Castro': 22, 'Golden Gate Park': 22, 'Embarcadero': 6, 'Russian Hill': 4, 'Nob Hill': 7, 'Alamo Square': 16}\n    }\n\n    # Define meeting constraints\n    meetings = [\n        {'name': 'Laura', 'location': 'The Castro','start_time': '7:45PM', 'end_time': '9:30PM', 'duration': 105},\n        {'name': 'Daniel', 'location': 'Golden Gate Park','start_time': '9:15PM', 'end_time': '9:45PM', 'duration': 15},\n        {'name': 'William', 'location': 'Embarcadero','start_time': '7:00AM', 'end_time': '9:00AM', 'duration': 90},\n        {'name': 'Karen', 'location': 'Russian Hill','start_time': '2:30PM', 'end_time': '7:45PM', 'duration': 30},\n        {'name': 'Stephanie', 'location': 'Nob Hill','start_time': '7:30AM', 'end_time': '9:30AM', 'duration': 45},\n        {'name': 'Joseph', 'location': 'Alamo Square','start_time': '11:30AM', 'end_time': '12:45PM', 'duration': 15},\n        {'name': 'Kimberly', 'location': 'North Beach','start_time': '3:45PM', 'end_time': '7:15PM', 'duration': 30}\n    ]\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Fisherman's Wharf at 9:00AM\n    schedule.append({'action':'start', 'location': 'Fisherman\\'s Wharf', 'time': '9:00AM'})\n\n    # Sort meetings by start time\n    meetings.sort(key=lambda x: convert_time_to_minutes(x['start_time']))\n\n    # Iterate through meetings\n    current_location = 'Fisherman\\'s Wharf'\n    current_time = '9:00AM'\n    for meeting in meetings:\n        # Travel to meeting location\n        travel_duration = travel_times[current_location][meeting['location']]\n        arrival_time = calculate_arrival_time(current_time, travel_duration)\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': arrival_time, 'to': meeting['location']})\n\n        # Wait until meeting start time\n        meeting_start_time = convert_time_to_minutes(meeting['start_time'])\n        arrival_time_minutes = convert_time_to_minutes(arrival_time)\n        wait_duration = meeting_start_time - arrival_time_minutes\n        if wait_duration > 0:\n            schedule.append({'action': 'wait', 'location': meeting['location'], 'time': convert_minutes_to_time(arrival_time_minutes + wait_duration)})\n\n        # Attend meeting\n        schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': meeting['start_time']})\n\n        # Update current location and time\n        current_location = meeting['location']\n        current_time = meeting['end_time']\n\n    return schedule\n\ndef calculate_arrival_time(current_time, travel_duration):\n    current_time_minutes = convert_time_to_minutes(current_time)\n    arrival_time_minutes = current_time_minutes + travel_duration\n    return convert_minutes_to_time(arrival_time_minutes)\n\ndef convert_time_to_minutes(time):\n    time_parts = time[:-2].split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1])\n    if time[-2:] == 'PM' and hours!= 12:\n        hours += 12\n    elif time[-2:] == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps({'schedule': schedule}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
      "count": "meeting_planning_example_604"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Barbara",
            "start_time": "1:15PM",
            "end_time": "2:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Barbara",
            "start_time": "1:15PM",
            "end_time": "2:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_back, meeting_duration):\n    schedule = []\n\n    # Start at Russian Hill\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Russian Hill\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Wait until it's time to travel to the meeting\n    wait_until = meeting_start - timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Russian Hill\",\n        \"time\": wait_until.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to the meeting\n    travel_start = wait_until\n    travel_end = travel_start + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": travel_start.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n\n    # Meet Barbara\n    meet_start = travel_end\n    meet_end = meet_start + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_start.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Russian Hill\n    travel_back_start = meet_end\n    travel_back_end = travel_back_start + timedelta(minutes=travel_duration_back)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_duration_back,\n        \"time\": travel_back_start.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n\n    # End at Russian Hill\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Russian Hill\",\n        \"time\": travel_back_end.strftime(\"%I:%M%p\")\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 14\n    travel_duration_back = 13\n    meeting_duration = 45\n\n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_back, meeting_duration)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_52"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Kenneth",
            "start_time": "12:00PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Barbara",
            "start_time": "1:53PM",
            "end_time": "2:38PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, kenneth_start, kenneth_end, barbara_start, barbara_end, travel_fd_ch, travel_fd_ggp, travel_ch_fd, travel_ch_ggp, travel_ggp_fd, travel_ggp_ch, kenneth_duration, barbara_duration):\n    schedule = []\n\n    # Start at Financial District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Financial District\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Barbara\n    meet_barbara_start = max(arrival_time, barbara_start)\n    meet_barbara_end = meet_barbara_start + timedelta(minutes=barbara_duration)\n    if meet_barbara_start < kenneth_start:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_fd_ggp,\n            \"time\": meet_barbara_start - timedelta(minutes=travel_fd_ggp),\n            \"to\": \"Golden Gate Park\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": barbara_duration,\n            \"time\": meet_barbara_start.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_ggp_ch,\n            \"time\": meet_barbara_end,\n            \"to\": \"Chinatown\"\n        })\n        wait_until = kenneth_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": wait_until.strftime(\"%I:%M%p\")\n        })\n    else:\n        wait_until = kenneth_start\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_fd_ch,\n            \"time\": wait_until - timedelta(minutes=travel_fd_ch),\n            \"to\": \"Chinatown\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": wait_until.strftime(\"%I:%M%p\")\n        })\n\n    # Meet Kenneth\n    meet_kenneth_start = wait_until\n    meet_kenneth_end = meet_kenneth_start + timedelta(minutes=kenneth_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": kenneth_duration,\n        \"time\": meet_kenneth_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Barbara again if there's enough time\n    if meet_kenneth_end + timedelta(minutes=travel_ch_ggp) < barbara_end:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_ch_ggp,\n            \"time\": meet_kenneth_end,\n            \"to\": \"Golden Gate Park\"\n        })\n        meet_barbara_again_start = meet_kenneth_end + timedelta(minutes=travel_ch_ggp)\n        meet_barbara_again_end = meet_barbara_again_start + timedelta(minutes=barbara_duration)\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": barbara_duration,\n            \"time\": meet_barbara_again_start.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_ggp_fd,\n            \"time\": meet_barbara_again_end,\n            \"to\": \"Financial District\"\n        })\n        schedule.append({\n            \"action\": \"end\",\n            \"location\": \"Financial District\",\n            \"time\": (meet_barbara_again_end + timedelta(minutes=travel_ggp_fd)).strftime(\"%I:%M%p\")\n        })\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_ch_fd,\n            \"time\": meet_kenneth_end,\n            \"to\": \"Financial District\"\n        })\n        schedule.append({\n            \"action\": \"end\",\n            \"location\": \"Financial District\",\n            \"time\": (meet_kenneth_end + timedelta(minutes=travel_ch_fd)).strftime(\"%I:%M%p\")\n        })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    kenneth_start = datetime.strptime(\"12:00PM\", \"%I:%M%p\")\n    kenneth_end = datetime.strptime(\"3:00PM\", \"%I:%M%p\")\n    barbara_start = datetime.strptime(\"8:15AM\", \"%I:%M%p\")\n    barbara_end = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    travel_fd_ch = 5\n    travel_fd_ggp = 23\n    travel_ch_fd = 5\n    travel_ch_ggp = 23\n    travel_ggp_fd = 26\n    travel_ggp_ch = 23\n    kenneth_duration = 90\n    barbara_duration = 45\n\n    schedule = calculate_schedule(arrival_time, kenneth_start, kenneth_end, barbara_start, barbara_end, travel_fd_ch, travel_fd_ggp, travel_ch_fd, travel_ch_ggp, travel_ggp_fd, travel_ggp_ch, kenneth_duration, barbara_duration)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_137"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Nancy",
            "start_time": "9:16AM",
            "end_time": "10:46AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Stephanie",
            "start_time": "10:59AM",
            "end_time": "12:14PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Elizabeth",
            "start_time": "12:33PM",
            "end_time": "1:33PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Robert",
            "start_time": "1:42PM",
            "end_time": "2:27PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Melissa",
            "start_time": "2:48PM",
            "end_time": "3:18PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "James",
            "start_time": "3:25PM",
            "end_time": "5:25PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Sarah",
            "start_time": "5:37PM",
            "end_time": "6:52PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Steven",
            "start_time": "7:15PM",
            "end_time": "7:30PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, steven_start, steven_end, sarah_start, sarah_end, brian_start, brian_end, stephanie_start, stephanie_end, melissa_start, melissa_end, nancy_start, nancy_end, david_start, david_end, james_start, james_end, elizabeth_start, elizabeth_end, robert_start, robert_end, \n                      travel_castro_nb, travel_castro_ggp, travel_castro_emb, travel_castro_ha, travel_castro_rd, travel_castro_nh, travel_castro_md, travel_castro_pres, travel_castro_us, travel_castro_fd, \n                      travel_nb_castro, travel_nb_ggp, travel_nb_emb, travel_nb_ha, travel_nb_rd, travel_nb_nh, travel_nb_md, travel_nb_pres, travel_nb_us, travel_nb_fd, \n                      travel_ggp_castro, travel_ggp_nb, travel_ggp_emb, travel_ggp_ha, travel_ggp_rd, travel_ggp_nh, travel_ggp_md, travel_ggp_pres, travel_ggp_us, travel_ggp_fd, \n                      travel_emb_castro, travel_emb_nb, travel_emb_ggp, travel_emb_ha, travel_emb_rd, travel_emb_nh, travel_emb_md, travel_emb_pres, travel_emb_us, travel_emb_fd, \n                      travel_ha_castro, travel_ha_nb, travel_ha_ggp, travel_ha_emb, travel_ha_rd, travel_ha_nh, travel_ha_md, travel_ha_pres, travel_ha_us, travel_ha_fd, \n                      travel_rd_castro, travel_rd_nb, travel_rd_ggp, travel_rd_emb, travel_rd_ha, travel_rd_nh, travel_rd_md, travel_rd_pres, travel_rd_us, travel_rd_fd, \n                      travel_nh_castro, travel_nh_nb, travel_nh_ggp, travel_nh_emb, travel_nh_ha, travel_nh_rd, travel_nh_md, travel_nh_pres, travel_nh_us, travel_nh_fd, \n                      travel_md_castro, travel_md_nb, travel_md_ggp, travel_md_emb, travel_md_ha, travel_md_rd, travel_md_nh, travel_md_pres, travel_md_us, travel_md_fd, \n                      travel_pres_castro, travel_pres_nb, travel_pres_ggp, travel_pres_emb, travel_pres_ha, travel_pres_rd, travel_pres_nh, travel_pres_md, travel_pres_us, travel_pres_fd, \n                      travel_us_castro, travel_us_nb, travel_us_ggp, travel_us_emb, travel_us_ha, travel_us_rd, travel_us_nh, travel_us_md, travel_us_pres, travel_us_fd, \n                      travel_fd_castro, travel_fd_nb, travel_fd_ggp, travel_fd_emb, travel_fd_ha, travel_fd_rd, travel_fd_nh, travel_fd_md, travel_fd_pres, travel_fd_us, \n                      steven_duration, sarah_duration, brian_duration, stephanie_duration, melissa_duration, nancy_duration, david_duration, james_duration, elizabeth_duration, robert_duration):\n    schedule = []\n\n    # Start at The Castro\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"The Castro\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Nancy\n    meet_nancy_start = max(arrival_time, nancy_start)\n    meet_nancy_end = meet_nancy_start + timedelta(minutes=nancy_duration)\n    if meet_nancy_start < stephanie_start:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_castro_nh,\n            \"time\": meet_nancy_start - timedelta(minutes=travel_castro_nh),\n            \"to\": \"Nob Hill\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"duration\": nancy_duration,\n            \"time\": meet_nancy_start.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_nh_ha,\n            \"time\": meet_nancy_end,\n            \"to\": \"Haight-Ashbury\"\n        })\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_castro_ha,\n            \"time\": meet_nancy_start - timedelta(minutes=travel_castro_ha),\n            \"to\": \"Haight-Ashbury\"\n        })\n\n    # Meet Stephanie\n    meet_stephanie_start = max(meet_nancy_end, stephanie_start)\n    meet_stephanie_end = meet_stephanie_start + timedelta(minutes=stephanie_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": stephanie_duration,\n        \"time\": meet_stephanie_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet David\n    meet_david_start = max(meet_stephanie_end, david_start)\n    meet_david_end = meet_david_start + timedelta(minutes=david_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_ha_md,\n        \"time\": meet_david_start - timedelta(minutes=travel_ha_md),\n        \"to\": \"Marina District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": david_duration,\n        \"time\": meet_david_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Elizabeth\n    meet_elizabeth_start = max(meet_david_end, elizabeth_start)\n    meet_elizabeth_end = meet_elizabeth_start + timedelta(minutes=elizabeth_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_md_us,\n        \"time\": meet_elizabeth_start - timedelta(minutes=travel_md_us),\n        \"to\": \"Union Square\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": elizabeth_duration,\n        \"time\": meet_elizabeth_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Robert\n    meet_robert_start = max(meet_elizabeth_end, robert_start)\n    meet_robert_end = meet_robert_start + timedelta(minutes=robert_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_us_fd,\n        \"time\": meet_robert_start - timedelta(minutes=travel_us_fd),\n        \"to\": \"Financial District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": robert_duration,\n        \"time\": meet_robert_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Brian\n    meet_brian_start = max(meet_robert_end, brian_start)\n    meet_brian_end = meet_brian_start + timedelta(minutes=brian_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_fd_emb,\n        \"time\": meet_brian_start - timedelta(minutes=travel_fd_emb),\n        \"to\": \"Embarcadero\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": brian_duration,\n        \"time\": meet_brian_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Melissa\n    meet_melissa_start = max(meet_brian_end, melissa_start)\n    meet_melissa_end = meet_melissa_start + timedelta(minutes=melissa_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_emb_rd,\n        \"time\": meet_melissa_start - timedelta(minutes=travel_emb_rd),\n        \"to\": \"Richmond District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": melissa_duration,\n        \"time\": meet_melissa_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet James\n    meet_james_start = max(meet_melissa_end, james_start)\n    meet_james_end = meet_james_start + timedelta(minutes=james_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_rd_pres,\n        \"time\": meet_james_start - timedelta(minutes=travel_rd_pres),\n        \"to\": \"Presidio\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": james_duration,\n        \"time\": meet_james_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Sarah\n    meet_sarah_start = max(meet_james_end, sarah_start)\n    meet_sarah_end = meet_sarah_start + timedelta(minutes=sarah_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_pres_ggp,\n        \"time\": meet_sarah_start - timedelta(minutes=travel_pres_ggp),\n        \"to\": \"Golden Gate Park\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": sarah_duration,\n        \"time\": meet_sarah_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Steven\n    meet_steven_start = max(meet_sarah_end, steven_start)\n    meet_steven_end = meet_steven_start + timedelta(minutes=steven_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_ggp_nb,\n        \"time\": meet_steven_start - timedelta(minutes=travel_ggp_nb),\n        \"to\": \"North Beach\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": steven_duration,\n        \"time\": meet_steven_start.strftime(\"%I:%M%p\")\n    })\n\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"North Beach\",\n        \"time\": meet_steven_end.strftime(\"%I:%M%p\")\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    steven_start = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\n    steven_end = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    sarah_start = datetime.strptime(\"5:00PM\", \"%I:%M%p\")\n    sarah_end = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    brian_start = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    brian_end = datetime.strptime(\"4:00PM\", \"%I:%M%p\")\n    stephanie_start = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\n    stephanie_end = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\n    melissa_start = datetime.strptime(\"2:00PM\", \"%I:%M%p\")\n    melissa_end = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    nancy_start = datetime.strptime(\"8:15AM\", \"%I:%M%p\")\n    nancy_end = datetime.strptime(\"12:45PM\", \"%I:%M%p\")\n    david_start = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    david_end = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    james_start = datetime.strptime(\"3:00PM\", \"%I:%M%p\")\n    james_end = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    elizabeth_start = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    elizabeth_end = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    robert_start = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    robert_end = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    travel_castro_nb = 20\n    travel_castro_ggp = 11\n    travel_castro_emb = 22\n    travel_castro_ha = 6\n    travel_castro_rd = 16\n    travel_castro_nh = 16\n    travel_castro_md = 21\n    travel_castro_pres = 20\n    travel_castro_us = 19\n    travel_castro_fd = 21\n    travel_nb_castro = 23\n    travel_nb_ggp = 22\n    travel_nb_emb = 6\n    travel_nb_ha = 18\n    travel_nb_rd = 18\n    travel_nb_nh = 7\n    travel_nb_md = 9\n    travel_nb_pres = 17\n    travel_nb_us = 7\n    travel_nb_fd = 8\n    travel_ggp_castro = 13\n    travel_ggp_nb = 23\n    travel_ggp_emb = 25\n    travel_ggp_ha = 7\n    travel_ggp_rd = 7\n    travel_ggp_nh = 20\n    travel_ggp_md = 16\n    travel_ggp_pres = 11\n    travel_ggp_us = 22\n    travel_ggp_fd = 26\n    travel_emb_castro = 25\n    travel_emb_nb = 5\n    travel_emb_ggp = 25\n    travel_emb_ha = 21\n    travel_emb_rd = 21\n    travel_emb_nh = 10\n    travel_emb_md = 12\n    travel_emb_pres = 20\n    travel_emb_us = 10\n    travel_emb_fd = 5\n    travel_ha_castro = 6\n    travel_ha_nb = 19\n    travel_ha_ggp = 7\n    travel_ha_emb = 20\n    travel_ha_rd = 10\n    travel_ha_nh = 15\n    travel_ha_md = 17\n    travel_ha_pres = 15\n    travel_ha_us = 19\n    travel_ha_fd = 21\n    travel_rd_castro = 16\n    travel_rd_nb = 17\n    travel_rd_ggp = 9\n    travel_rd_emb = 19\n    travel_rd_ha = 10\n    travel_rd_nh = 17\n    travel_rd_md = 9\n    travel_rd_pres = 7\n    travel_rd_us = 21\n    travel_rd_fd = 22\n    travel_nh_castro = 17\n    travel_nh_nb = 8\n    travel_nh_ggp = 17\n    travel_nh_emb = 9\n    travel_nh_ha = 13\n    travel_nh_rd = 14\n    travel_nh_md = 11\n    travel_nh_pres = 17\n    travel_nh_us = 7\n    travel_nh_fd = 9\n    travel_md_castro = 22\n    travel_md_nb = 11\n    travel_md_ggp = 18\n    travel_md_emb = 14\n    travel_md_ha = 16\n    travel_md_rd = 11\n    travel_md_nh = 12\n    travel_md_pres = 10\n    travel_md_us = 16\n    travel_md_fd = 17\n    travel_pres_castro = 21\n    travel_pres_nb = 18\n    travel_pres_ggp = 12\n    travel_pres_emb = 20\n    travel_pres_ha = 15\n    travel_pres_rd = 7\n    travel_pres_nh = 18\n    travel_pres_md = 11\n    travel_pres_us = 22\n    travel_pres_fd = 23\n    travel_us_castro = 17\n    travel_us_nb = 10\n    travel_us_ggp = 22\n    travel_us_emb = 11\n    travel_us_ha = 18\n    travel_us_rd = 20\n    travel_us_nh = 9\n    travel_us_md = 18\n    travel_us_pres = 24\n    travel_us_fd = 9\n    travel_fd_castro = 20\n    travel_fd_nb = 7\n    travel_fd_ggp = 23\n    travel_fd_emb = 4\n    travel_fd_ha = 19\n    travel_fd_rd = 21\n    travel_fd_nh = 8\n    travel_fd_md = 15\n    travel_fd_pres = 22\n    travel_fd_us = 9\n    steven_duration = 15\n    sarah_duration = 75\n    brian_duration = 105\n    stephanie_duration = 75\n    melissa_duration = 30\n    nancy_duration = 90\n    david_duration = 120\n    james_duration = 120\n    elizabeth_duration = 60\n    robert_duration = 45\n\n    schedule = calculate_schedule(arrival_time, steven_start, steven_end, sarah_start, sarah_end, brian_start, brian_end, stephanie_start, stephanie_end, melissa_start, melissa_end, nancy_start, nancy_end, david_start, david_end, james_start, james_end, elizabeth_start, elizabeth_end, robert_start, robert_end, \n                      travel_castro_nb, travel_castro_ggp, travel_castro_emb, travel_castro_ha, travel_castro_rd, travel_castro_nh, travel_castro_md, travel_castro_pres, travel_castro_us, travel_castro_fd, \n                      travel_nb_castro, travel_nb_ggp, travel_nb_emb, travel_nb_ha, travel_nb_rd, travel_nb_nh, travel_nb_md, travel_nb_pres, travel_nb_us, travel_nb_fd, \n                      travel_ggp_castro, travel_ggp_nb, travel_ggp_emb, travel_ggp_ha, travel_ggp_rd, travel_ggp_nh, travel_ggp_md, travel_ggp_pres, travel_ggp_us, travel_ggp_fd, \n                      travel_emb_castro, travel_emb_nb, travel_emb_ggp, travel_emb_ha, travel_emb_rd, travel_emb_nh, travel_emb_md, travel_emb_pres, travel_emb_us, travel_emb_fd, \n                      travel_ha_castro, travel_ha_nb, travel_ha_ggp, travel_ha_emb, travel_ha_rd, travel_ha_nh, travel_ha_md, travel_ha_pres, travel_ha_us, travel_ha_fd, \n                      travel_rd_castro, travel_rd_nb, travel_rd_ggp, travel_rd_emb, travel_rd_ha, travel_rd_nh, travel_rd_md, travel_rd_pres, travel_rd_us, travel_rd_fd, \n                      travel_nh_castro, travel_nh_nb, travel_nh_ggp, travel_nh_emb, travel_nh_ha, travel_nh_rd, travel_nh_md, travel_nh_pres, travel_nh_us, travel_nh_fd, \n                      travel_md_castro, travel_md_nb, travel_md_ggp, travel_md_emb, travel_md_ha, travel_md_rd, travel_md_nh, travel_md_pres, travel_md_us, travel_md_fd, \n                      travel_pres_castro, travel_pres_nb, travel_pres_ggp, travel_pres_emb, travel_pres_ha, travel_pres_rd, travel_pres_nh, travel_pres_md, travel_pres_us, travel_pres_fd, \n                      travel_us_castro, travel_us_nb, travel_us_ggp, travel_us_emb, travel_us_ha, travel_us_rd, travel_us_nh, travel_us_md, travel_us_pres, travel_us_fd, \n                      travel_fd_castro, travel_fd_nb, travel_fd_ggp, travel_fd_emb, travel_fd_ha, travel_fd_rd, travel_fd_nh, travel_fd_md, travel_fd_pres, travel_fd_us, \n                      steven_duration, sarah_duration, brian_duration, stephanie_duration, melissa_duration, nancy_duration, david_duration, james_duration, elizabeth_duration, robert_duration)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_911"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Jeffrey",
            "start_time": "11:15AM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Deborah",
            "start_time": "1:45PM",
            "end_time": "3:15PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Margaret",
            "start_time": "4:30PM",
            "end_time": "5:45PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Ronald",
            "start_time": "6:30PM",
            "end_time": "7:15PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Emily",
            "start_time": "7:33PM",
            "end_time": "7:48PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, emily_start, emily_end, margaret_start, margaret_end, ronald_start, ronald_end, deborah_start, deborah_end, jeffrey_start, jeffrey_end, \n                      travel_nh_rd, travel_nh_fd, travel_nh_nb, travel_nh_castro, travel_nh_ggp, \n                      travel_rd_nh, travel_rd_fd, travel_rd_nb, travel_rd_castro, travel_rd_ggp, \n                      travel_fd_nh, travel_fd_rd, travel_fd_nb, travel_fd_castro, travel_fd_ggp, \n                      travel_nb_nh, travel_nb_rd, travel_nb_fd, travel_nb_castro, travel_nb_ggp, \n                      travel_castro_nh, travel_castro_rd, travel_castro_fd, travel_castro_nb, travel_castro_ggp, \n                      travel_ggp_nh, travel_ggp_rd, travel_ggp_fd, travel_ggp_nb, travel_ggp_castro, \n                      emily_duration, margaret_duration, ronald_duration, deborah_duration, jeffrey_duration):\n    schedule = []\n\n    # Start at Nob Hill\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Nob Hill\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Jeffrey\n    meet_jeffrey_start = max(arrival_time, jeffrey_start)\n    meet_jeffrey_end = meet_jeffrey_start + timedelta(minutes=jeffrey_duration)\n    if meet_jeffrey_start < deborah_start:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_nh_ggp,\n            \"time\": meet_jeffrey_start - timedelta(minutes=travel_nh_ggp),\n            \"to\": \"Golden Gate Park\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": jeffrey_duration,\n            \"time\": meet_jeffrey_start.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_ggp_castro,\n            \"time\": meet_jeffrey_end,\n            \"to\": \"The Castro\"\n        })\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_nh_castro,\n            \"time\": meet_jeffrey_start - timedelta(minutes=travel_nh_castro),\n            \"to\": \"The Castro\"\n        })\n\n    # Meet Deborah\n    meet_deborah_start = max(meet_jeffrey_end, deborah_start)\n    meet_deborah_end = meet_deborah_start + timedelta(minutes=deborah_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": deborah_duration,\n        \"time\": meet_deborah_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Ronald\n    meet_ronald_start = max(meet_deborah_end, ronald_start)\n    meet_ronald_end = meet_ronald_start + timedelta(minutes=ronald_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_castro_nb,\n        \"time\": meet_ronald_start - timedelta(minutes=travel_castro_nb),\n        \"to\": \"North Beach\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": ronald_duration,\n        \"time\": meet_ronald_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Margaret\n    meet_margaret_start = max(meet_ronald_end, margaret_start)\n    meet_margaret_end = meet_margaret_start + timedelta(minutes=margaret_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_nb_fd,\n        \"time\": meet_margaret_start - timedelta(minutes=travel_nb_fd),\n        \"to\": \"Financial District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": margaret_duration,\n        \"time\": meet_margaret_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Emily\n    meet_emily_start = max(meet_margaret_end, emily_start)\n    meet_emily_end = meet_emily_start + timedelta(minutes=emily_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_fd_rd,\n        \"time\": meet_emily_start - timedelta(minutes=travel_fd_rd),\n        \"to\": \"Richmond District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": emily_duration,\n        \"time\": meet_emily_start.strftime(\"%I:%M%p\")\n    })\n\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Richmond District\",\n        \"time\": meet_emily_end.strftime(\"%I:%M%p\")\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    emily_start = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    emily_end = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    margaret_start = datetime.strptime(\"4:30PM\", \"%I:%M%p\")\n    margaret_end = datetime.strptime(\"8:15PM\", \"%I:%M%p\")\n    ronald_start = datetime.strptime(\"6:30PM\", \"%I:%M%p\")\n    ronald_end = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    deborah_start = datetime.strptime(\"1:45PM\", \"%I:%M%p\")\n    deborah_end = datetime.strptime(\"9:15PM\", \"%I:%M%p\")\n    jeffrey_start = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    jeffrey_end = datetime.strptime(\"2:30PM\", \"%I:%M%p\")\n    travel_nh_rd = 14\n    travel_nh_fd = 9\n    travel_nh_nb = 8\n    travel_nh_castro = 17\n    travel_nh_ggp = 17\n    travel_rd_nh = 17\n    travel_rd_fd = 22\n    travel_rd_nb = 17\n    travel_rd_castro = 16\n    travel_rd_ggp = 9\n    travel_fd_nh = 8\n    travel_fd_rd = 21\n    travel_fd_nb = 7\n    travel_fd_castro = 23\n    travel_fd_ggp = 23\n    travel_nb_nh = 7\n    travel_nb_rd = 18\n    travel_nb_fd = 8\n    travel_nb_castro = 22\n    travel_nb_ggp = 22\n    travel_castro_nh = 16\n    travel_castro_rd = 16\n    travel_castro_fd = 20\n    travel_castro_nb = 20\n    travel_castro_ggp = 11\n    travel_ggp_nh = 20\n    travel_ggp_rd = 7\n    travel_ggp_fd = 26\n    travel_ggp_nb = 24\n    travel_ggp_castro = 13\n    emily_duration = 15\n    margaret_duration = 75\n    ronald_duration = 45\n    deborah_duration = 90\n    jeffrey_duration = 120\n\n    schedule = calculate_schedule(arrival_time, emily_start, emily_end, margaret_start, margaret_end, ronald_start, ronald_end, deborah_start, deborah_end, jeffrey_start, jeffrey_end, \n                      travel_nh_rd, travel_nh_fd, travel_nh_nb, travel_nh_castro, travel_nh_ggp, \n                      travel_rd_nh, travel_rd_fd, travel_rd_nb, travel_rd_castro, travel_rd_ggp, \n                      travel_fd_nh, travel_fd_rd, travel_fd_nb, travel_fd_castro, travel_fd_ggp, \n                      travel_nb_nh, travel_nb_rd, travel_nb_fd, travel_nb_castro, travel_nb_ggp, \n                      travel_castro_nh, travel_castro_rd, travel_castro_fd, travel_castro_nb, travel_castro_ggp, \n                      travel_ggp_nh, travel_ggp_rd, travel_ggp_fd, travel_ggp_nb, travel_ggp_castro, \n                      emily_duration, margaret_duration, ronald_duration, deborah_duration, jeffrey_duration)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_433"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "David",
            "start_time": "10:45AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Timothy",
            "start_time": "11:12AM",
            "end_time": "12:27PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Robert",
            "start_time": "12:42PM",
            "end_time": "2:12PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, david_start, david_end, timothy_start, timothy_end, robert_start, robert_end, \n                      travel_fd_fw, travel_fd_ph, travel_fd_md, \n                      travel_fw_fd, travel_fw_ph, travel_fw_md, \n                      travel_ph_fd, travel_ph_fw, travel_ph_md, \n                      travel_md_fd, travel_md_fw, travel_md_ph, \n                      david_duration, timothy_duration, robert_duration):\n    schedule = []\n\n    # Start at Financial District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Financial District\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Timothy\n    meet_timothy_start = max(arrival_time, timothy_start)\n    meet_timothy_end = meet_timothy_start + timedelta(minutes=timothy_duration)\n    if meet_timothy_start < david_start:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_fd_ph,\n            \"time\": meet_timothy_start - timedelta(minutes=travel_fd_ph),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": timothy_duration,\n            \"time\": meet_timothy_start.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_ph_fw,\n            \"time\": meet_timothy_end,\n            \"to\": \"Fisherman's Wharf\"\n        })\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_fd_fw,\n            \"time\": meet_timothy_start - timedelta(minutes=travel_fd_fw),\n            \"to\": \"Fisherman's Wharf\"\n        })\n\n    # Meet David\n    meet_david_start = max(meet_timothy_end, david_start)\n    meet_david_end = meet_david_start + timedelta(minutes=david_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": david_duration,\n        \"time\": meet_david_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Robert\n    meet_robert_start = max(meet_david_end, robert_start)\n    meet_robert_end = meet_robert_start + timedelta(minutes=robert_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_fw_md,\n        \"time\": meet_robert_start - timedelta(minutes=travel_fw_md),\n        \"to\": \"Mission District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": robert_duration,\n        \"time\": meet_robert_start.strftime(\"%I:%M%p\")\n    })\n\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Mission District\",\n        \"time\": meet_robert_end.strftime(\"%I:%M%p\")\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    david_start = datetime.strptime(\"10:45AM\", \"%I:%M%p\")\n    david_end = datetime.strptime(\"3:30PM\", \"%I:%M%p\")\n    timothy_start = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    timothy_end = datetime.strptime(\"3:30PM\", \"%I:%M%p\")\n    robert_start = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\n    robert_end = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    travel_fd_fw = 10\n    travel_fd_ph = 13\n    travel_fd_md = 17\n    travel_fw_fd = 11\n    travel_fw_ph = 12\n    travel_fw_md = 22\n    travel_ph_fd = 13\n    travel_ph_fw = 13\n    travel_ph_md = 15\n    travel_md_fd = 17\n    travel_md_fw = 22\n    travel_md_ph = 16\n    david_duration = 15\n    timothy_duration = 75\n    robert_duration = 90\n\n    schedule = calculate_schedule(arrival_time, david_start, david_end, timothy_start, timothy_end, robert_start, robert_end, \n                      travel_fd_fw, travel_fd_ph, travel_fd_md, \n                      travel_fw_fd, travel_fw_ph, travel_fw_md, \n                      travel_ph_fd, travel_ph_fw, travel_ph_md, \n                      travel_md_fd, travel_md_fw, travel_md_ph, \n                      david_duration, timothy_duration, robert_duration)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_203"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Melissa",
            "start_time": "9:25AM",
            "end_time": "9:40AM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Emily",
            "start_time": "4:45PM",
            "end_time": "6:45PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Nancy",
            "start_time": "7:45PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, melissa_start, melissa_end, nancy_start, nancy_end, emily_start, emily_end, \n                      travel_fw_ggp, travel_fw_pres, travel_fw_rd, \n                      travel_ggp_fw, travel_ggp_pres, travel_ggp_rd, \n                      travel_pres_fw, travel_pres_ggp, travel_pres_rd, \n                      travel_rd_fw, travel_rd_ggp, travel_rd_pres, \n                      melissa_duration, nancy_duration, emily_duration):\n    schedule = []\n\n    # Start at Fisherman's Wharf\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Fisherman's Wharf\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Melissa\n    meet_melissa_start = max(arrival_time, melissa_start)\n    meet_melissa_end = meet_melissa_start + timedelta(minutes=melissa_duration)\n    if meet_melissa_start < emily_start:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_fw_ggp,\n            \"time\": meet_melissa_start - timedelta(minutes=travel_fw_ggp),\n            \"to\": \"Golden Gate Park\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": melissa_duration,\n            \"time\": meet_melissa_start.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_ggp_rd,\n            \"time\": meet_melissa_end,\n            \"to\": \"Richmond District\"\n        })\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_fw_rd,\n            \"time\": meet_melissa_start - timedelta(minutes=travel_fw_rd),\n            \"to\": \"Richmond District\"\n        })\n\n    # Meet Emily\n    meet_emily_start = max(meet_melissa_end, emily_start)\n    meet_emily_end = meet_emily_start + timedelta(minutes=emily_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": emily_duration,\n        \"time\": meet_emily_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Nancy\n    meet_nancy_start = max(meet_emily_end, nancy_start)\n    meet_nancy_end = meet_nancy_start + timedelta(minutes=nancy_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_rd_pres,\n        \"time\": meet_nancy_start - timedelta(minutes=travel_rd_pres),\n        \"to\": \"Presidio\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": nancy_duration,\n        \"time\": meet_nancy_start.strftime(\"%I:%M%p\")\n    })\n\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Presidio\",\n        \"time\": meet_nancy_end.strftime(\"%I:%M%p\")\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    melissa_start = datetime.strptime(\"8:30AM\", \"%I:%M%p\")\n    melissa_end = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    nancy_start = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    nancy_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    emily_start = datetime.strptime(\"4:45PM\", \"%I:%M%p\")\n    emily_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    travel_fw_ggp = 25\n    travel_fw_pres = 17\n    travel_fw_rd = 18\n    travel_ggp_fw = 24\n    travel_ggp_pres = 11\n    travel_ggp_rd = 7\n    travel_pres_fw = 19\n    travel_pres_ggp = 12\n    travel_pres_rd = 7\n    travel_rd_fw = 18\n    travel_rd_ggp = 9\n    travel_rd_pres = 7\n    melissa_duration = 15\n    nancy_duration = 105\n    emily_duration = 120\n\n    schedule = calculate_schedule(arrival_time, melissa_start, melissa_end, nancy_start, nancy_end, emily_start, emily_end, \n                      travel_fw_ggp, travel_fw_pres, travel_fw_rd, \n                      travel_ggp_fw, travel_ggp_pres, travel_ggp_rd, \n                      travel_pres_fw, travel_pres_ggp, travel_pres_rd, \n                      travel_rd_fw, travel_rd_ggp, travel_rd_pres, \n                      melissa_duration, nancy_duration, emily_duration)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_224"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Joseph",
            "start_time": "9:15AM",
            "end_time": "10:15AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Carol",
            "start_time": "10:45AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Joshua",
            "start_time": "11:04AM",
            "end_time": "12:49PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Jeffrey",
            "start_time": "1:10PM",
            "end_time": "2:25PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Charles",
            "start_time": "2:43PM",
            "end_time": "4:43PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Matthew",
            "start_time": "5:05PM",
            "end_time": "5:50PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Paul",
            "start_time": "7:15PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Rebecca",
            "start_time": "7:41PM",
            "end_time": "8:26PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, joshua_start, joshua_end, jeffrey_start, jeffrey_end, charles_start, charles_end, joseph_start, joseph_end, elizabeth_start, elizabeth_end, matthew_start, matthew_end, carol_start, carol_end, paul_start, paul_end, rebecca_start, rebecca_end, \n                      travel_md_emb, travel_md_bv, travel_md_us, travel_md_ct, travel_md_sd, travel_md_ggp, travel_md_fd, travel_md_ha, travel_md_ms, \n                      travel_emb_md, travel_emb_bv, travel_emb_us, travel_emb_ct, travel_emb_sd, travel_emb_ggp, travel_emb_fd, travel_emb_ha, travel_emb_ms, \n                      travel_bv_md, travel_bv_emb, travel_bv_us, travel_bv_ct, travel_bv_sd, travel_bv_ggp, travel_bv_fd, travel_bv_ha, travel_bv_ms, \n                      travel_us_md, travel_us_emb, travel_us_bv, travel_us_ct, travel_us_sd, travel_us_ggp, travel_us_fd, travel_us_ha, travel_us_ms, \n                      travel_ct_md, travel_ct_emb, travel_ct_bv, travel_ct_us, travel_ct_sd, travel_ct_ggp, travel_ct_fd, travel_ct_ha, travel_ct_ms, \n                      travel_sd_md, travel_sd_emb, travel_sd_bv, travel_sd_us, travel_sd_ct, travel_sd_ggp, travel_sd_fd, travel_sd_ha, travel_sd_ms, \n                      travel_ggp_md, travel_ggp_emb, travel_ggp_bv, travel_ggp_us, travel_ggp_ct, travel_ggp_sd, travel_ggp_fd, travel_ggp_ha, travel_ggp_ms, \n                      travel_fd_md, travel_fd_emb, travel_fd_bv, travel_fd_us, travel_fd_ct, travel_fd_sd, travel_fd_ggp, travel_fd_ha, travel_fd_ms, \n                      travel_ha_md, travel_ha_emb, travel_ha_bv, travel_ha_us, travel_ha_ct, travel_ha_sd, travel_ha_ggp, travel_ha_fd, travel_ha_ms, \n                      travel_ms_md, travel_ms_emb, travel_ms_bv, travel_ms_us, travel_ms_ct, travel_ms_sd, travel_ms_ggp, travel_ms_fd, travel_ms_ha, \n                      joshua_duration, jeffrey_duration, charles_duration, joseph_duration, elizabeth_duration, matthew_duration, carol_duration, paul_duration, rebecca_duration):\n    schedule = []\n\n    # Start at Marina District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Marina District\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Elizabeth\n    meet_elizabeth_start = max(arrival_time, elizabeth_start)\n    meet_elizabeth_end = meet_elizabeth_start + timedelta(minutes=elizabeth_duration)\n    if meet_elizabeth_start < joseph_start:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_md_sd,\n            \"time\": meet_elizabeth_start - timedelta(minutes=travel_md_sd),\n            \"to\": \"Sunset District\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Sunset District\",\n            \"duration\": elizabeth_duration,\n            \"time\": meet_elizabeth_start.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_sd_ct,\n            \"time\": meet_elizabeth_end,\n            \"to\": \"Chinatown\"\n        })\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_md_ct,\n            \"time\": meet_elizabeth_start - timedelta(minutes=travel_md_ct),\n            \"to\": \"Chinatown\"\n        })\n\n    # Meet Joseph\n    meet_joseph_start = max(meet_elizabeth_end, joseph_start)\n    meet_joseph_end = meet_joseph_start + timedelta(minutes=joseph_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": joseph_duration,\n        \"time\": meet_joseph_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Carol\n    meet_carol_start = max(meet_joseph_end, carol_start)\n    meet_carol_end = meet_carol_start + timedelta(minutes=carol_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_ct_fd,\n        \"time\": meet_carol_start - timedelta(minutes=travel_ct_fd),\n        \"to\": \"Financial District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": carol_duration,\n        \"time\": meet_carol_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Joshua\n    meet_joshua_start = max(meet_carol_end, joshua_start)\n    meet_joshua_end = meet_joshua_start + timedelta(minutes=joshua_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_fd_emb,\n        \"time\": meet_joshua_start - timedelta(minutes=travel_fd_emb),\n        \"to\": \"Embarcadero\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": joshua_duration,\n        \"time\": meet_joshua_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Matthew\n    meet_matthew_start = max(meet_joshua_end, matthew_start)\n    meet_matthew_end = meet_matthew_start + timedelta(minutes=matthew_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_emb_ggp,\n        \"time\": meet_matthew_start - timedelta(minutes=travel_emb_ggp),\n        \"to\": \"Golden Gate Park\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": matthew_duration,\n        \"time\": meet_matthew_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Jeffrey\n    meet_jeffrey_start = max(meet_matthew_end, jeffrey_start)\n    meet_jeffrey_end = meet_jeffrey_start + timedelta(minutes=jeffrey_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_ggp_bv,\n        \"time\": meet_jeffrey_start - timedelta(minutes=travel_ggp_bv),\n        \"to\": \"Bayview\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": jeffrey_duration,\n        \"time\": meet_jeffrey_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Charles\n    meet_charles_start = max(meet_jeffrey_end, charles_start)\n    meet_charles_end = meet_charles_start + timedelta(minutes=charles_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_bv_us,\n        \"time\": meet_charles_start - timedelta(minutes=travel_bv_us),\n        \"to\": \"Union Square\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": charles_duration,\n        \"time\": meet_charles_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Rebecca\n    meet_rebecca_start = max(meet_charles_end, rebecca_start)\n    meet_rebecca_end = meet_rebecca_start + timedelta(minutes=rebecca_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_us_ms,\n        \"time\": meet_rebecca_start - timedelta(minutes=travel_us_ms),\n        \"to\": \"Mission District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": rebecca_duration,\n        \"time\": meet_rebecca_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Paul\n    meet_paul_start = max(meet_rebecca_end, paul_start)\n    meet_paul_end = meet_paul_start + timedelta(minutes=paul_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_ms_ha,\n        \"time\": meet_paul_start - timedelta(minutes=travel_ms_ha),\n        \"to\": \"Haight-Ashbury\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": paul_duration,\n        \"time\": meet_paul_start.strftime(\"%I:%M%p\")\n    })\n\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Haight-Ashbury\",\n        \"time\": meet_paul_end.strftime(\"%I:%M%p\")\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    joshua_start = datetime.strptime(\"9:45AM\", \"%I:%M%p\")\n    joshua_end = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    jeffrey_start = datetime.strptime(\"9:45AM\", \"%I:%M%p\")\n    jeffrey_end = datetime.strptime(\"8:15PM\", \"%I:%M%p\")\n    charles_start = datetime.strptime(\"10:45AM\", \"%I:%M%p\")\n    charles_end = datetime.strptime(\"8:15PM\", \"%I:%M%p\")\n    joseph_start = datetime.strptime(\"7:00AM\", \"%I:%M%p\")\n    joseph_end = datetime.strptime(\"3:30PM\", \"%I:%M%p\")\n    elizabeth_start = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    elizabeth_end = datetime.strptime(\"9:45AM\", \"%I:%M%p\")\n    matthew_start = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    matthew_end = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    carol_start = datetime.strptime(\"10:45AM\", \"%I:%M%p\")\n    carol_end = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    paul_start = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    paul_end = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    rebecca_start = datetime.strptime(\"5:00PM\", \"%I:%M%p\")\n    rebecca_end = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    travel_md_emb = 14\n    travel_md_bv = 27\n    travel_md_us = 16\n    travel_md_ct = 15\n    travel_md_sd = 19\n    travel_md_ggp = 18\n    travel_md_fd = 17\n    travel_md_ha = 16\n    travel_md_ms = 20\n    travel_emb_md = 12\n    travel_emb_bv = 21\n    travel_emb_us = 10\n    travel_emb_ct = 7\n    travel_emb_sd = 30\n    travel_emb_ggp = 25\n    travel_emb_fd = 5\n    travel_emb_ha = 21\n    travel_emb_ms = 20\n    travel_bv_md = 27\n    travel_bv_emb = 19\n    travel_bv_us = 18\n    travel_bv_ct = 19\n    travel_bv_sd = 23\n    travel_bv_ggp = 22\n    travel_bv_fd = 19\n    travel_bv_ha = 19\n    travel_bv_ms = 13\n    travel_us_md = 18\n    travel_us_emb = 11\n    travel_us_bv = 15\n    travel_us_ct = 7\n    travel_us_sd = 27\n    travel_us_ggp = 22\n    travel_us_fd = 9\n    travel_us_ha = 18\n    travel_us_ms = 14\n    travel_ct_md = 12\n    travel_ct_emb = 5\n    travel_ct_bv = 20\n    travel_ct_us = 7\n    travel_ct_sd = 29\n    travel_ct_ggp = 23\n    travel_ct_fd = 5\n    travel_ct_ha = 19\n    travel_ct_ms = 17\n    travel_sd_md = 21\n    travel_sd_emb = 30\n    travel_sd_bv = 22\n    travel_sd_us = 30\n    travel_sd_ct = 30\n    travel_sd_ggp = 11\n    travel_sd_fd = 30\n    travel_sd_ha = 15\n    travel_sd_ms = 25\n    travel_ggp_md = 16\n    travel_ggp_emb = 25\n    travel_ggp_bv = 23\n    travel_ggp_us = 22\n    travel_ggp_ct = 23\n    travel_ggp_sd = 10\n    travel_ggp_fd = 26\n    travel_ggp_ha = 7\n    travel_ggp_ms = 17\n    travel_fd_md = 15\n    travel_fd_emb = 4\n    travel_fd_bv = 19\n    travel_fd_us = 9\n    travel_fd_ct = 5\n    travel_fd_sd = 30\n    travel_fd_ggp = 23\n    travel_fd_ha = 19\n    travel_fd_ms = 17\n    travel_ha_md = 17\n    travel_ha_emb = 20\n    travel_ha_bv = 18\n    travel_ha_us = 19\n    travel_ha_ct = 19\n    travel_ha_sd = 15\n    travel_ha_ggp = 7\n    travel_ha_fd = 21\n    travel_ha_ms = 11\n    travel_ms_md = 19\n    travel_ms_emb = 19\n    travel_ms_bv = 14\n    travel_ms_us = 15\n    travel_ms_ct = 16\n    travel_ms_sd = 24\n    travel_ms_ggp = 17\n    travel_ms_fd = 15\n    travel_ms_ha = 12\n    joshua_duration = 105\n    jeffrey_duration = 75\n    charles_duration = 120\n    joseph_duration = 60\n    elizabeth_duration = 45\n    matthew_duration = 45\n    carol_duration = 15\n    paul_duration = 15\n    rebecca_duration = 45\n\n    schedule = calculate_schedule(arrival_time, joshua_start, joshua_end, jeffrey_start, jeffrey_end, charles_start, charles_end, joseph_start, joseph_end, elizabeth_start, elizabeth_end, matthew_start, matthew_end, carol_start, carol_end, paul_start, paul_end, rebecca_start, rebecca_end, \n                      travel_md_emb, travel_md_bv, travel_md_us, travel_md_ct, travel_md_sd, travel_md_ggp, travel_md_fd, travel_md_ha, travel_md_ms, \n                      travel_emb_md, travel_emb_bv, travel_emb_us, travel_emb_ct, travel_emb_sd, travel_emb_ggp, travel_emb_fd, travel_emb_ha, travel_emb_ms, \n                      travel_bv_md, travel_bv_emb, travel_bv_us, travel_bv_ct, travel_bv_sd, travel_bv_ggp, travel_bv_fd, travel_bv_ha, travel_bv_ms, \n                      travel_us_md, travel_us_emb, travel_us_bv, travel_us_ct, travel_us_sd, travel_us_ggp, travel_us_fd, travel_us_ha, travel_us_ms, \n                      travel_ct_md, travel_ct_emb, travel_ct_bv, travel_ct_us, travel_ct_sd, travel_ct_ggp, travel_ct_fd, travel_ct_ha, travel_ct_ms, \n                      travel_sd_md, travel_sd_emb, travel_sd_bv, travel_sd_us, travel_sd_ct, travel_sd_ggp, travel_sd_fd, travel_sd_ha, travel_sd_ms, \n                      travel_ggp_md, travel_ggp_emb, travel_ggp_bv, travel_ggp_us, travel_ggp_ct, travel_ggp_sd, travel_ggp_fd, travel_ggp_ha, travel_ggp_ms, \n                      travel_fd_md, travel_fd_emb, travel_fd_bv, travel_fd_us, travel_fd_ct, travel_fd_sd, travel_fd_ggp, travel_fd_ha, travel_fd_ms, \n                      travel_ha_md, travel_ha_emb, travel_ha_bv, travel_ha_us, travel_ha_ct, travel_ha_sd, travel_ha_ggp, travel_ha_fd, travel_ha_ms, \n                      travel_ms_md, travel_ms_emb, travel_ms_bv, travel_ms_us, travel_ms_ct, travel_ms_sd, travel_ms_ggp, travel_ms_fd, travel_ms_ha, \n                      joshua_duration, jeffrey_duration, charles_duration, joseph_duration, elizabeth_duration, matthew_duration, carol_duration, paul_duration, rebecca_duration)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_813"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Emily",
            "start_time": "4:00PM",
            "end_time": "4:45PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Margaret",
            "start_time": "7:00PM",
            "end_time": "9:00PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, emily_start, emily_end, margaret_start, margaret_end, \n                      travel_nb_us, travel_nb_rh, travel_us_nb, travel_us_rh, travel_rh_nb, travel_rh_us, \n                      emily_duration, margaret_duration):\n    schedule = []\n\n    # Start at North Beach\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"North Beach\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Emily\n    meet_emily_start = max(arrival_time, emily_start)\n    meet_emily_end = meet_emily_start + timedelta(minutes=emily_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_nb_us,\n        \"time\": meet_emily_start - timedelta(minutes=travel_nb_us),\n        \"to\": \"Union Square\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": emily_duration,\n        \"time\": meet_emily_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Margaret\n    meet_margaret_start = max(meet_emily_end, margaret_start)\n    meet_margaret_end = meet_margaret_start + timedelta(minutes=margaret_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_us_rh,\n        \"time\": meet_margaret_start - timedelta(minutes=travel_us_rh),\n        \"to\": \"Russian Hill\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": margaret_duration,\n        \"time\": meet_margaret_start.strftime(\"%I:%M%p\")\n    })\n\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Russian Hill\",\n        \"time\": meet_margaret_end.strftime(\"%I:%M%p\")\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    emily_start = datetime.strptime(\"4:00PM\", \"%I:%M%p\")\n    emily_end = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\n    margaret_start = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    margaret_end = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    travel_nb_us = 7\n    travel_nb_rh = 4\n    travel_us_nb = 10\n    travel_us_rh = 13\n    travel_rh_nb = 5\n    travel_rh_us = 11\n    emily_duration = 45\n    margaret_duration = 120\n\n    schedule = calculate_schedule(arrival_time, emily_start, emily_end, margaret_start, margaret_end, \n                      travel_nb_us, travel_nb_rh, travel_us_nb, travel_us_rh, travel_rh_nb, travel_rh_us, \n                      emily_duration, margaret_duration)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_170"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Laura",
            "start_time": "9:14AM",
            "end_time": "10:59AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Charles",
            "start_time": "11:30AM",
            "end_time": "12:15PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Margaret",
            "start_time": "2:15PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Rebecca",
            "start_time": "4:24PM",
            "end_time": "5:54PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Melissa",
            "start_time": "5:59PM",
            "end_time": "6:29PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Patricia",
            "start_time": "6:46PM",
            "end_time": "7:31PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Robert",
            "start_time": "7:46PM",
            "end_time": "8:16PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Karen",
            "start_time": "8:28PM",
            "end_time": "9:28PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, charles_start, charles_end, robert_start, robert_end, karen_start, karen_end, rebecca_start, rebecca_end, margaret_start, margaret_end, patricia_start, patricia_end, mark_start, mark_end, melissa_start, melissa_end, laura_start, laura_end, \n                      travel_md_bv, travel_md_sd, travel_md_rd, travel_md_nh, travel_md_ct, travel_md_ha, travel_md_nb, travel_md_rh, travel_md_emb, \n                      travel_bv_md, travel_bv_sd, travel_bv_rd, travel_bv_nh, travel_bv_ct, travel_bv_ha, travel_bv_nb, travel_bv_rh, travel_bv_emb, \n                      travel_sd_md, travel_sd_bv, travel_sd_rd, travel_sd_nh, travel_sd_ct, travel_sd_ha, travel_sd_nb, travel_sd_rh, travel_sd_emb, \n                      travel_rd_md, travel_rd_bv, travel_rd_sd, travel_rd_nh, travel_rd_ct, travel_rd_ha, travel_rd_nb, travel_rd_rh, travel_rd_emb, \n                      travel_nh_md, travel_nh_bv, travel_nh_sd, travel_nh_rd, travel_nh_ct, travel_nh_ha, travel_nh_nb, travel_nh_rh, travel_nh_emb, \n                      travel_ct_md, travel_ct_bv, travel_ct_sd, travel_ct_rd, travel_ct_nh, travel_ct_ha, travel_ct_nb, travel_ct_rh, travel_ct_emb, \n                      travel_ha_md, travel_ha_bv, travel_ha_sd, travel_ha_rd, travel_ha_nh, travel_ha_ct, travel_ha_nb, travel_ha_rh, travel_ha_emb, \n                      travel_nb_md, travel_nb_bv, travel_nb_sd, travel_nb_rd, travel_nb_nh, travel_nb_ct, travel_nb_ha, travel_nb_rh, travel_nb_emb, \n                      travel_rh_md, travel_rh_bv, travel_rh_sd, travel_rh_rd, travel_rh_nh, travel_rh_ct, travel_rh_ha, travel_rh_nb, travel_rh_emb, \n                      travel_emb_md, travel_emb_bv, travel_emb_sd, travel_emb_rd, travel_emb_nh, travel_emb_ct, travel_emb_ha, travel_emb_nb, travel_emb_rh, \n                      charles_duration, robert_duration, karen_duration, rebecca_duration, margaret_duration, patricia_duration, mark_duration, melissa_duration, laura_duration):\n    schedule = []\n\n    # Start at Marina District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Marina District\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Laura\n    meet_laura_start = max(arrival_time, laura_start)\n    meet_laura_end = meet_laura_start + timedelta(minutes=laura_duration)\n    if meet_laura_start < melissa_start:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_md_emb,\n            \"time\": meet_laura_start - timedelta(minutes=travel_md_emb),\n            \"to\": \"Embarcadero\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Embarcadero\",\n            \"duration\": laura_duration,\n            \"time\": meet_laura_start.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_emb_rh,\n            \"time\": meet_laura_end,\n            \"to\": \"Russian Hill\"\n        })\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_md_rh,\n            \"time\": meet_laura_start - timedelta(minutes=travel_md_rh),\n            \"to\": \"Russian Hill\"\n        })\n\n    # Meet Melissa\n    meet_melissa_start = max(meet_laura_end, melissa_start)\n    meet_melissa_end = meet_melissa_start + timedelta(minutes=melissa_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": melissa_duration,\n        \"time\": meet_melissa_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Mark\n    meet_mark_start = max(meet_melissa_end, mark_start)\n    meet_mark_end = meet_mark_start + timedelta(minutes=mark_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_rh_nb,\n        \"time\": meet_mark_start - timedelta(minutes=travel_rh_nb),\n        \"to\": \"North Beach\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": mark_duration,\n        \"time\": meet_mark_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Patricia\n    meet_patricia_start = max(meet_mark_end, patricia_start)\n    meet_patricia_end = meet_patricia_start + timedelta(minutes=patricia_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_nb_ha,\n        \"time\": meet_patricia_start - timedelta(minutes=travel_nb_ha),\n        \"to\": \"Haight-Ashbury\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": patricia_duration,\n        \"time\": meet_patricia_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Margaret\n    meet_margaret_start = max(meet_patricia_end, margaret_start)\n    meet_margaret_end = meet_margaret_start + timedelta(minutes=margaret_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_ha_ct,\n        \"time\": meet_margaret_start - timedelta(minutes=travel_ha_ct),\n        \"to\": \"Chinatown\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": margaret_duration,\n        \"time\": meet_margaret_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Rebecca\n    meet_rebecca_start = max(meet_margaret_end, rebecca_start)\n    meet_rebecca_end = meet_rebecca_start + timedelta(minutes=rebecca_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_ct_nh,\n        \"time\": meet_rebecca_start - timedelta(minutes=travel_ct_nh),\n        \"to\": \"Nob Hill\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": rebecca_duration,\n        \"time\": meet_rebecca_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Karen\n    meet_karen_start = max(meet_rebecca_end, karen_start)\n    meet_karen_end = meet_karen_start + timedelta(minutes=karen_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_nh_rd,\n        \"time\": meet_karen_start - timedelta(minutes=travel_nh_rd),\n        \"to\": \"Richmond District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": karen_duration,\n        \"time\": meet_karen_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Robert\n    meet_robert_start = max(meet_karen_end, robert_start)\n    meet_robert_end = meet_robert_start + timedelta(minutes=robert_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_rd_sd,\n        \"time\": meet_robert_start - timedelta(minutes=travel_rd_sd),\n        \"to\": \"Sunset District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": robert_duration,\n        \"time\": meet_robert_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Charles\n    meet_charles_start = max(meet_robert_end, charles_start)\n    meet_charles_end = meet_charles_start + timedelta(minutes=charles_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_sd_bv,\n        \"time\": meet_charles_start - timedelta(minutes=travel_sd_bv),\n        \"to\": \"Bayview\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": charles_duration,\n        \"time\": meet_charles_start.strftime(\"%I:%M%p\")\n    })\n\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Bayview\",\n        \"time\": meet_charles_end.strftime(\"%I:%M%p\")\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    charles_start = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    charles_end = datetime.strptime(\"2:30PM\", \"%I:%M%p\")\n    robert_start = datetime.strptime(\"4:45PM\", \"%I:%M%p\")\n    robert_end = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    karen_start = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    karen_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    rebecca_start = datetime.strptime(\"4:15PM\", \"%I:%M%p\")\n    rebecca_end = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    margaret_start = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    margaret_end = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    patricia_start = datetime.strptime(\"2:30PM\", \"%I:%M%p\")\n    patricia_end = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    mark_start = datetime.strptime(\"2:00PM\", \"%I:%M%p\")\n    mark_end = datetime.strptime(\"6:30PM\", \"%I:%M%p\")\n    melissa_start = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    melissa_end = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    laura_start = datetime.strptime(\"7:45AM\", \"%I:%M%p\")\n    laura_end = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    travel_md_bv = 27\n    travel_md_sd = 19\n    travel_md_rd = 11\n    travel_md_nh = 12\n    travel_md_ct = 15\n    travel_md_ha = 16\n    travel_md_nb = 11\n    travel_md_rh = 8\n    travel_md_emb = 14\n    travel_bv_md = 27\n    travel_bv_sd = 23\n    travel_bv_rd = 25\n    travel_bv_nh = 20\n    travel_bv_ct = 19\n    travel_bv_ha = 19\n    travel_bv_nb = 22\n    travel_bv_rh = 23\n    travel_bv_emb = 19\n    travel_sd_md = 21\n    travel_sd_bv = 22\n    travel_sd_rd = 12\n    travel_sd_nh = 27\n    travel_sd_ct = 30\n    travel_sd_ha = 15\n    travel_sd_nb = 28\n    travel_sd_rh = 24\n    travel_sd_emb = 30\n    travel_rd_md = 9\n    travel_rd_bv = 27\n    travel_rd_sd = 11\n    travel_rd_nh = 17\n    travel_rd_ct = 20\n    travel_rd_ha = 10\n    travel_rd_nb = 17\n    travel_rd_rh = 13\n    travel_rd_emb = 19\n    travel_nh_md = 11\n    travel_nh_bv = 19\n    travel_nh_sd = 24\n    travel_nh_rd = 14\n    travel_nh_ct = 6\n    travel_nh_ha = 13\n    travel_nh_nb = 8\n    travel_nh_rh = 5\n    travel_nh_emb = 9\n    travel_ct_md = 12\n    travel_ct_bv = 20\n    travel_ct_sd = 29\n    travel_ct_rd = 20\n    travel_ct_nh = 9\n    travel_ct_ha = 19\n    travel_ct_nb = 3\n    travel_ct_rh = 7\n    travel_ct_emb = 5\n    travel_ha_md = 17\n    travel_ha_bv = 18\n    travel_ha_sd = 15\n    travel_ha_rd = 10\n    travel_ha_nh = 15\n    travel_ha_ct = 19\n    travel_ha_nb = 19\n    travel_ha_rh = 17\n    travel_ha_emb = 20\n    travel_nb_md = 9\n    travel_nb_bv = 25\n    travel_nb_sd = 27\n    travel_nb_rd = 18\n    travel_nb_nh = 7\n    travel_nb_ct = 6\n    travel_nb_ha = 18\n    travel_nb_rh = 4\n    travel_nb_emb = 6\n    travel_rh_md = 7\n    travel_rh_bv = 23\n    travel_rh_sd = 23\n    travel_rh_rd = 14\n    travel_rh_nh = 5\n    travel_rh_ct = 9\n    travel_rh_ha = 17\n    travel_rh_nb = 5\n    travel_rh_emb = 8\n    travel_emb_md = 12\n    travel_emb_bv = 21\n    travel_emb_sd = 30\n    travel_emb_rd = 21\n    travel_emb_nh = 10\n    travel_emb_ct = 7\n    travel_emb_ha = 21\n    travel_emb_nb = 5\n    travel_emb_rh = 8\n    charles_duration = 45\n    robert_duration = 30\n    karen_duration = 60\n    rebecca_duration = 90\n    margaret_duration = 120\n    patricia_duration = 45\n    mark_duration = 105\n    melissa_duration = 30\n    laura_duration = 105\n\n    schedule = calculate_schedule(arrival_time, charles_start, charles_end, robert_start, robert_end, karen_start, karen_end, rebecca_start, rebecca_end, margaret_start, margaret_end, patricia_start, patricia_end, mark_start, mark_end, melissa_start, melissa_end, laura_start, laura_end, \n                      travel_md_bv, travel_md_sd, travel_md_rd, travel_md_nh, travel_md_ct, travel_md_ha, travel_md_nb, travel_md_rh, travel_md_emb, \n                      travel_bv_md, travel_bv_sd, travel_bv_rd, travel_bv_nh, travel_bv_ct, travel_bv_ha, travel_bv_nb, travel_bv_rh, travel_bv_emb, \n                      travel_sd_md, travel_sd_bv, travel_sd_rd, travel_sd_nh, travel_sd_ct, travel_sd_ha, travel_sd_nb, travel_sd_rh, travel_sd_emb, \n                      travel_rd_md, travel_rd_bv, travel_rd_sd, travel_rd_nh, travel_rd_ct, travel_rd_ha, travel_rd_nb, travel_rd_rh, travel_rd_emb, \n                      travel_nh_md, travel_nh_bv, travel_nh_sd, travel_nh_rd, travel_nh_ct, travel_nh_ha, travel_nh_nb, travel_nh_rh, travel_nh_emb, \n                      travel_ct_md, travel_ct_bv, travel_ct_sd, travel_ct_rd, travel_ct_nh, travel_ct_ha, travel_ct_nb, travel_ct_rh, travel_ct_emb, \n                      travel_ha_md, travel_ha_bv, travel_ha_sd, travel_ha_rd, travel_ha_nh, travel_ha_ct, travel_ha_nb, travel_ha_rh, travel_ha_emb, \n                      travel_nb_md, travel_nb_bv, travel_nb_sd, travel_nb_rd, travel_nb_nh, travel_nb_ct, travel_nb_ha, travel_nb_rh, travel_nb_emb, \n                      travel_rh_md, travel_rh_bv, travel_rh_sd, travel_rh_rd, travel_rh_nh, travel_rh_ct, travel_rh_ha, travel_rh_nb, travel_rh_emb, \n                      travel_emb_md, travel_emb_bv, travel_emb_sd, travel_emb_rd, travel_emb_nh, travel_emb_ct, travel_emb_ha, travel_emb_nb, travel_emb_rh, \n                      charles_duration, robert_duration, karen_duration, rebecca_duration, margaret_duration, patricia_duration, mark_duration, melissa_duration, laura_duration)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_892"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Betty",
            "start_time": "10:15AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "David",
            "start_time": "1:00PM",
            "end_time": "2:30PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Barbara",
            "start_time": "2:48PM",
            "end_time": "4:48PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, betty_start, betty_end, david_start, david_end, barbara_start, barbara_end, \n                      travel_emb_pres, travel_emb_rd, travel_emb_fw, \n                      travel_pres_emb, travel_pres_rd, travel_pres_fw, \n                      travel_rd_emb, travel_rd_pres, travel_rd_fw, \n                      travel_fw_emb, travel_fw_pres, travel_fw_rd, \n                      betty_duration, david_duration, barbara_duration):\n    schedule = []\n\n    # Start at Embarcadero\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Embarcadero\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Barbara\n    meet_barbara_start = max(arrival_time, barbara_start)\n    meet_barbara_end = meet_barbara_start + timedelta(minutes=barbara_duration)\n    if meet_barbara_start < betty_start:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_emb_fw,\n            \"time\": meet_barbara_start - timedelta(minutes=travel_emb_fw),\n            \"to\": \"Fisherman's Wharf\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": barbara_duration,\n            \"time\": meet_barbara_start.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_fw_pres,\n            \"time\": meet_barbara_end,\n            \"to\": \"Presidio\"\n        })\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": travel_emb_pres,\n            \"time\": meet_barbara_start - timedelta(minutes=travel_emb_pres),\n            \"to\": \"Presidio\"\n        })\n\n    # Meet Betty\n    meet_betty_start = max(meet_barbara_end, betty_start)\n    meet_betty_end = meet_betty_start + timedelta(minutes=betty_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": betty_duration,\n        \"time\": meet_betty_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet David\n    meet_david_start = max(meet_betty_end, david_start)\n    meet_david_end = meet_david_start + timedelta(minutes=david_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_pres_rd,\n        \"time\": meet_david_start - timedelta(minutes=travel_pres_rd),\n        \"to\": \"Richmond District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": david_duration,\n        \"time\": meet_david_start.strftime(\"%I:%M%p\")\n    })\n\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Richmond District\",\n        \"time\": meet_david_end.strftime(\"%I:%M%p\")\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    betty_start = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\n    betty_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    david_start = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    david_end = datetime.strptime(\"8:15PM\", \"%I:%M%p\")\n    barbara_start = datetime.strptime(\"9:15AM\", \"%I:%M%p\")\n    barbara_end = datetime.strptime(\"8:15PM\", \"%I:%M%p\")\n    travel_emb_pres = 20\n    travel_emb_rd = 21\n    travel_emb_fw = 6\n    travel_pres_emb = 20\n    travel_pres_rd = 7\n    travel_pres_fw = 19\n    travel_rd_emb = 19\n    travel_rd_pres = 7\n    travel_rd_fw = 18\n    travel_fw_emb = 8\n    travel_fw_pres = 17\n    travel_fw_rd = 18\n    betty_duration = 45\n    david_duration = 90\n    barbara_duration = 120\n\n    schedule = calculate_schedule(arrival_time, betty_start, betty_end, david_start, david_end, barbara_start, barbara_end, \n                      travel_emb_pres, travel_emb_rd, travel_emb_fw, \n                      travel_pres_emb, travel_pres_rd, travel_pres_fw, \n                      travel_rd_emb, travel_rd_pres, travel_rd_fw, \n                      travel_fw_emb, travel_fw_pres, travel_fw_rd, \n                      betty_duration, david_duration, barbara_duration)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_258"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Helen",
            "start_time": "11:00AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Emily",
            "start_time": "4:15PM",
            "end_time": "4:45PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Mary",
            "start_time": "5:30PM",
            "end_time": "6:15PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Mark",
            "start_time": "6:26PM",
            "end_time": "7:41PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Michelle",
            "start_time": "8:00PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, kevin_start, kevin_end, michelle_start, michelle_end, emily_start, emily_end, mark_start, mark_end, barbara_start, barbara_end, laura_start, laura_end, mary_start, mary_end, helen_start, helen_end, \n                      travel_pres_ph, travel_pres_ggp, travel_pres_fw, travel_pres_md, travel_pres_as, travel_pres_sd, travel_pres_nh, travel_pres_nb, \n                      travel_ph_pres, travel_ph_ggp, travel_ph_fw, travel_ph_md, travel_ph_as, travel_ph_sd, travel_ph_nh, travel_ph_nb, \n                      travel_ggp_pres, travel_ggp_ph, travel_ggp_fw, travel_ggp_md, travel_ggp_as, travel_ggp_sd, travel_ggp_nh, travel_ggp_nb, \n                      travel_fw_pres, travel_fw_ph, travel_fw_ggp, travel_fw_md, travel_fw_as, travel_fw_sd, travel_fw_nh, travel_fw_nb, \n                      travel_md_pres, travel_md_ph, travel_md_ggp, travel_md_fw, travel_md_as, travel_md_sd, travel_md_nh, travel_md_nb, \n                      travel_as_pres, travel_as_ph, travel_as_ggp, travel_as_fw, travel_as_md, travel_as_sd, travel_as_nh, travel_as_nb, \n                      travel_sd_pres, travel_sd_ph, travel_sd_ggp, travel_sd_fw, travel_sd_md, travel_sd_as, travel_sd_nh, travel_sd_nb, \n                      travel_nh_pres, travel_nh_ph, travel_nh_ggp, travel_nh_fw, travel_nh_md, travel_nh_as, travel_nh_sd, travel_nh_nb, \n                      travel_nb_pres, travel_nb_ph, travel_nb_ggp, travel_nb_fw, travel_nb_md, travel_nb_as, travel_nb_sd, travel_nb_nh, \n                      kevin_duration, michelle_duration, emily_duration, mark_duration, barbara_duration, laura_duration, mary_duration, helen_duration):\n    schedule = []\n\n    # Start at Presidio\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Presidio\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Kevin\n    meet_kevin_start = max(arrival_time, kevin_start)\n    meet_kevin_end = meet_kevin_start + timedelta(minutes=kevin_duration)\n    if meet_kevin_start < helen_start:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_pres_ph,\n            \"time\": meet_kevin_start - timedelta(minutes=travel_pres_ph),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": kevin_duration,\n            \"time\": meet_kevin_start.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_ph_nb,\n            \"time\": meet_kevin_end,\n            \"to\": \"North Beach\"\n        })\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_pres_nb,\n            \"time\": meet_kevin_start - timedelta(minutes=travel_pres_nb),\n            \"to\": \"North Beach\"\n        })\n\n    # Meet Helen\n    meet_helen_start = max(meet_kevin_end, helen_start)\n    meet_helen_end = meet_helen_start + timedelta(minutes=helen_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": helen_duration,\n        \"time\": meet_helen_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Mary\n    meet_mary_start = max(meet_helen_end, mary_start)\n    meet_mary_end = meet_mary_start + timedelta(minutes=mary_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_nb_nh,\n        \"time\": meet_mary_start - timedelta(minutes=travel_nb_nh),\n        \"to\": \"Nob Hill\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": mary_duration,\n        \"time\": meet_mary_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Barbara\n    meet_barbara_start = max(meet_mary_end, barbara_start)\n    meet_barbara_end = meet_barbara_start + timedelta(minutes=barbara_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_nh_as,\n        \"time\": meet_barbara_start - timedelta(minutes=travel_nh_as),\n        \"to\": \"Alamo Square\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": barbara_duration,\n        \"time\": meet_barbara_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Emily\n    meet_emily_start = max(meet_barbara_end, emily_start)\n    meet_emily_end = meet_emily_start + timedelta(minutes=emily_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_as_fw,\n        \"time\": meet_emily_start - timedelta(minutes=travel_as_fw),\n        \"to\": \"Fisherman's Wharf\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": emily_duration,\n        \"time\": meet_emily_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Mark\n    meet_mark_start = max(meet_emily_end, mark_start)\n    meet_mark_end = meet_mark_start + timedelta(minutes=mark_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_fw_md,\n        \"time\": meet_mark_start - timedelta(minutes=travel_fw_md),\n        \"to\": \"Marina District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": mark_duration,\n        \"time\": meet_mark_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Laura\n    meet_laura_start = max(meet_mark_end, laura_start)\n    meet_laura_end = meet_laura_start + timedelta(minutes=laura_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_md_sd,\n        \"time\": meet_laura_start - timedelta(minutes=travel_md_sd),\n        \"to\": \"Sunset District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": laura_duration,\n        \"time\": meet_laura_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Michelle\n    meet_michelle_start = max(meet_laura_end, michelle_start)\n    meet_michelle_end = meet_michelle_start + timedelta(minutes=michelle_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_sd_ggp,\n        \"time\": meet_michelle_start - timedelta(minutes=travel_sd_ggp),\n        \"to\": \"Golden Gate Park\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": michelle_duration,\n        \"time\": meet_michelle_start.strftime(\"%I:%M%p\")\n    })\n\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": meet_michelle_end.strftime(\"%I:%M%p\")\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    kevin_start = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\n    kevin_end = datetime.strptime(\"8:45AM\", \"%I:%M%p\")\n    michelle_start = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    michelle_end = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    emily_start = datetime.strptime(\"4:15PM\", \"%I:%M%p\")\n    emily_end = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    mark_start = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    mark_end = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    barbara_start = datetime.strptime(\"5:00PM\", \"%I:%M%p\")\n    barbara_end = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    laura_start = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    laura_end = datetime.strptime(\"9:15PM\", \"%I:%M%p\")\n    mary_start = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\n    mary_end = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    helen_start = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    helen_end = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\n    travel_pres_ph = 11\n    travel_pres_ggp = 12\n    travel_pres_fw = 19\n    travel_pres_md = 11\n    travel_pres_as = 19\n    travel_pres_sd = 15\n    travel_pres_nh = 18\n    travel_pres_nb = 18\n    travel_ph_pres = 11\n    travel_ph_ggp = 15\n    travel_ph_fw = 13\n    travel_ph_md = 6\n    travel_ph_as = 10\n    travel_ph_sd = 21\n    travel_ph_nh = 8\n    travel_ph_nb = 9\n    travel_ggp_pres = 11\n    travel_ggp_ph = 16\n    travel_ggp_fw = 24\n    travel_ggp_md = 16\n    travel_ggp_as = 9\n    travel_ggp_sd = 10\n    travel_ggp_nh = 20\n    travel_ggp_nb = 23\n    travel_fw_pres = 17\n    travel_fw_ph = 12\n    travel_fw_ggp = 25\n    travel_fw_md = 9\n    travel_fw_as = 21\n    travel_fw_sd = 27\n    travel_fw_nh = 11\n    travel_fw_nb = 6\n    travel_md_pres = 10\n    travel_md_ph = 7\n    travel_md_ggp = 18\n    travel_md_fw = 10\n    travel_md_as = 15\n    travel_md_sd = 19\n    travel_md_nh = 12\n    travel_md_nb = 11\n    travel_as_pres = 17\n    travel_as_ph = 10\n    travel_as_ggp = 9\n    travel_as_fw = 19\n    travel_as_md = 15\n    travel_as_sd = 16\n    travel_as_nh = 11\n    travel_as_nb = 15\n    travel_sd_pres = 16\n    travel_sd_ph = 21\n    travel_sd_ggp = 11\n    travel_sd_fw = 29\n    travel_sd_md = 21\n    travel_sd_as = 17\n    travel_sd_nh = 27\n    travel_sd_nb = 28\n    travel_nh_pres = 17\n    travel_nh_ph = 8\n    travel_nh_ggp = 17\n    travel_nh_fw = 10\n    travel_nh_md = 11\n    travel_nh_as = 11\n    travel_nh_sd = 24\n    travel_nh_nb = 8\n    travel_nb_pres = 17\n    travel_nb_ph = 8\n    travel_nb_ggp = 22\n    travel_nb_fw = 5\n    travel_nb_md = 9\n    travel_nb_as = 16\n    travel_nb_sd = 27\n    travel_nb_nh = 7\n    kevin_duration = 90\n    michelle_duration = 15\n    emily_duration = 30\n    mark_duration = 75\n    barbara_duration = 120\n    laura_duration = 75\n    mary_duration = 45\n    helen_duration = 45\n\n    schedule = calculate_schedule(arrival_time, kevin_start, kevin_end, michelle_start, michelle_end, emily_start, emily_end, mark_start, mark_end, barbara_start, barbara_end, laura_start, laura_end, mary_start, mary_end, helen_start, helen_end, \n                      travel_pres_ph, travel_pres_ggp, travel_pres_fw, travel_pres_md, travel_pres_as, travel_pres_sd, travel_pres_nh, travel_pres_nb, \n                      travel_ph_pres, travel_ph_ggp, travel_ph_fw, travel_ph_md, travel_ph_as, travel_ph_sd, travel_ph_nh, travel_ph_nb, \n                      travel_ggp_pres, travel_ggp_ph, travel_ggp_fw, travel_ggp_md, travel_ggp_as, travel_ggp_sd, travel_ggp_nh, travel_ggp_nb, \n                      travel_fw_pres, travel_fw_ph, travel_fw_ggp, travel_fw_md, travel_fw_as, travel_fw_sd, travel_fw_nh, travel_fw_nb, \n                      travel_md_pres, travel_md_ph, travel_md_ggp, travel_md_fw, travel_md_as, travel_md_sd, travel_md_nh, travel_md_nb, \n                      travel_as_pres, travel_as_ph, travel_as_ggp, travel_as_fw, travel_as_md, travel_as_sd, travel_as_nh, travel_as_nb, \n                      travel_sd_pres, travel_sd_ph, travel_sd_ggp, travel_sd_fw, travel_sd_md, travel_sd_as, travel_sd_nh, travel_sd_nb, \n                      travel_nh_pres, travel_nh_ph, travel_nh_ggp, travel_nh_fw, travel_nh_md, travel_nh_as, travel_nh_sd, travel_nh_nb, \n                      travel_nb_pres, travel_nb_ph, travel_nb_ggp, travel_nb_fw, travel_nb_md, travel_nb_as, travel_nb_sd, travel_nb_nh, \n                      kevin_duration, michelle_duration, emily_duration, mark_duration, barbara_duration, laura_duration, mary_duration, helen_duration)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_700"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Karen",
            "start_time": "9:25AM",
            "end_time": "9:55AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Anthony",
            "start_time": "10:06AM",
            "end_time": "11:51AM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Betty",
            "start_time": "7:45PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, betty_start, betty_end, karen_start, karen_end, anthony_start, anthony_end, \n                      travel_bv_emb, travel_bv_fw, travel_bv_fd, \n                      travel_emb_bv, travel_emb_fw, travel_emb_fd, \n                      travel_fw_bv, travel_fw_emb, travel_fw_fd, \n                      travel_fd_bv, travel_fd_emb, travel_fd_fw, \n                      betty_duration, karen_duration, anthony_duration):\n    schedule = []\n\n    # Start at Bayview\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Bayview\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Karen\n    meet_karen_start = max(arrival_time, karen_start)\n    meet_karen_end = meet_karen_start + timedelta(minutes=karen_duration)\n    if meet_karen_start < anthony_start:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_bv_fw,\n            \"time\": meet_karen_start - timedelta(minutes=travel_bv_fw),\n            \"to\": \"Fisherman's Wharf\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": karen_duration,\n            \"time\": meet_karen_start.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_fw_fd,\n            \"time\": meet_karen_end,\n            \"to\": \"Financial District\"\n        })\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_bv_fd,\n            \"time\": meet_karen_start - timedelta(minutes=travel_bv_fd),\n            \"to\": \"Financial District\"\n        })\n\n    # Meet Anthony\n    meet_anthony_start = max(meet_karen_end, anthony_start)\n    meet_anthony_end = meet_anthony_start + timedelta(minutes=anthony_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": anthony_duration,\n        \"time\": meet_anthony_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Betty\n    meet_betty_start = max(meet_anthony_end, betty_start)\n    meet_betty_end = meet_betty_start + timedelta(minutes=betty_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_fd_emb,\n        \"time\": meet_betty_start - timedelta(minutes=travel_fd_emb),\n        \"to\": \"Embarcadero\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": betty_duration,\n        \"time\": meet_betty_start.strftime(\"%I:%M%p\")\n    })\n\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Embarcadero\",\n        \"time\": meet_betty_end.strftime(\"%I:%M%p\")\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    betty_start = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    betty_end = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    karen_start = datetime.strptime(\"8:45AM\", \"%I:%M%p\")\n    karen_end = datetime.strptime(\"3:00PM\", \"%I:%M%p\")\n    anthony_start = datetime.strptime(\"9:15AM\", \"%I:%M%p\")\n    anthony_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    travel_bv_emb = 19\n    travel_bv_fw = 25\n    travel_bv_fd = 19\n    travel_emb_bv = 21\n    travel_emb_fw = 6\n    travel_emb_fd = 5\n    travel_fw_bv = 26\n    travel_fw_emb = 8\n    travel_fw_fd = 11\n    travel_fd_bv = 19\n    travel_fd_emb = 4\n    travel_fd_fw = 10\n    betty_duration = 15\n    karen_duration = 30\n    anthony_duration = 105\n\n    schedule = calculate_schedule(arrival_time, betty_start, betty_end, karen_start, karen_end, anthony_start, anthony_end, \n                      travel_bv_emb, travel_bv_fw, travel_bv_fd, \n                      travel_emb_bv, travel_emb_fw, travel_emb_fd, \n                      travel_fw_bv, travel_fw_emb, travel_fw_fd, \n                      travel_fd_bv, travel_fd_emb, travel_fd_fw, \n                      betty_duration, karen_duration, anthony_duration)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_263"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Sarah",
            "start_time": "10:45AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Richard",
            "start_time": "11:45AM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Elizabeth",
            "start_time": "1:26PM",
            "end_time": "3:26PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Michelle",
            "start_time": "6:15PM",
            "end_time": "7:45PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, sarah_start, sarah_end, richard_start, richard_end, elizabeth_start, elizabeth_end, michelle_start, michelle_end, \n                      travel_rd_sd, travel_rd_ha, travel_rd_md, travel_rd_ggp, \n                      travel_sd_rd, travel_sd_ha, travel_sd_md, travel_sd_ggp, \n                      travel_ha_rd, travel_ha_sd, travel_ha_md, travel_ha_ggp, \n                      travel_md_rd, travel_md_sd, travel_md_ha, travel_md_ggp, \n                      travel_ggp_rd, travel_ggp_sd, travel_ggp_ha, travel_ggp_md, \n                      sarah_duration, richard_duration, elizabeth_duration, michelle_duration):\n    schedule = []\n\n    # Start at Richmond District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Richmond District\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Elizabeth\n    meet_elizabeth_start = max(arrival_time, elizabeth_start)\n    meet_elizabeth_end = meet_elizabeth_start + timedelta(minutes=elizabeth_duration)\n    if meet_elizabeth_start < richard_start:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_rd_md,\n            \"time\": meet_elizabeth_start - timedelta(minutes=travel_rd_md),\n            \"to\": \"Mission District\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Mission District\",\n            \"duration\": elizabeth_duration,\n            \"time\": meet_elizabeth_start.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_md_ha,\n            \"time\": meet_elizabeth_end,\n            \"to\": \"Haight-Ashbury\"\n        })\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_rd_ha,\n            \"time\": meet_elizabeth_start - timedelta(minutes=travel_rd_ha),\n            \"to\": \"Haight-Ashbury\"\n        })\n\n    # Meet Richard\n    meet_richard_start = max(meet_elizabeth_end, richard_start)\n    meet_richard_end = meet_richard_start + timedelta(minutes=richard_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": richard_duration,\n        \"time\": meet_richard_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Sarah\n    meet_sarah_start = max(meet_richard_end, sarah_start)\n    meet_sarah_end = meet_sarah_start + timedelta(minutes=sarah_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_ha_sd,\n        \"time\": meet_sarah_start - timedelta(minutes=travel_ha_sd),\n        \"to\": \"Sunset District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": sarah_duration,\n        \"time\": meet_sarah_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Michelle\n    meet_michelle_start = max(meet_sarah_end, michelle_start)\n    meet_michelle_end = meet_michelle_start + timedelta(minutes=michelle_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_sd_ggp,\n        \"time\": meet_michelle_start - timedelta(minutes=travel_sd_ggp),\n        \"to\": \"Golden Gate Park\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": michelle_duration,\n        \"time\": meet_michelle_start.strftime(\"%I:%M%p\")\n    })\n\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": meet_michelle_end.strftime(\"%I:%M%p\")\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    sarah_start = datetime.strptime(\"10:45AM\", \"%I:%M%p\")\n    sarah_end = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    richard_start = datetime.strptime(\"11:45AM\", \"%I:%M%p\")\n    richard_end = datetime.strptime(\"3:45PM\", \"%I:%M%p\")\n    elizabeth_start = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    elizabeth_end = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\n    michelle_start = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    michelle_end = datetime.strptime(\"8:45PM\", \"%I:%M%p\")\n    travel_rd_sd = 11\n    travel_rd_ha = 10\n    travel_rd_md = 20\n    travel_rd_ggp = 9\n    travel_sd_rd = 12\n    travel_sd_ha = 15\n    travel_sd_md = 24\n    travel_sd_ggp = 11\n    travel_ha_rd = 10\n    travel_ha_sd = 15\n    travel_ha_md = 11\n    travel_ha_ggp = 7\n    travel_md_rd = 20\n    travel_md_sd = 24\n    travel_md_ha = 12\n    travel_md_ggp = 17\n    travel_ggp_rd = 7\n    travel_ggp_sd = 10\n    travel_ggp_ha = 7\n    travel_ggp_md = 17\n    sarah_duration = 30\n    richard_duration = 90\n    elizabeth_duration = 120\n    michelle_duration = 90\n\n    schedule = calculate_schedule(arrival_time, sarah_start, sarah_end, richard_start, richard_end, elizabeth_start, elizabeth_end, michelle_start, michelle_end, \n                      travel_rd_sd, travel_rd_ha, travel_rd_md, travel_rd_ggp, \n                      travel_sd_rd, travel_sd_ha, travel_sd_md, travel_sd_ggp, \n                      travel_ha_rd, travel_ha_sd, travel_ha_md, travel_ha_ggp, \n                      travel_md_rd, travel_md_sd, travel_md_ha, travel_md_ggp, \n                      travel_ggp_rd, travel_ggp_sd, travel_ggp_ha, travel_ggp_md, \n                      sarah_duration, richard_duration, elizabeth_duration, michelle_duration)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_312"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Ronald",
            "start_time": "10:00AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Helen",
            "start_time": "1:30PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Joshua",
            "start_time": "3:47PM",
            "end_time": "5:17PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Margaret",
            "start_time": "5:32PM",
            "end_time": "6:32PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, ronald_start, ronald_end, sarah_start, sarah_end, helen_start, helen_end, joshua_start, joshua_end, margaret_start, margaret_end, \n                      travel_ph_nh, travel_ph_rh, travel_ph_castro, travel_ph_sd, travel_ph_ha, \n                      travel_nh_ph, travel_nh_rh, travel_nh_castro, travel_nh_sd, travel_nh_ha, \n                      travel_rh_ph, travel_rh_nh, travel_rh_castro, travel_rh_sd, travel_rh_ha, \n                      travel_castro_ph, travel_castro_nh, travel_castro_rh, travel_castro_sd, travel_castro_ha, \n                      travel_sd_ph, travel_sd_nh, travel_sd_rh, travel_sd_castro, travel_sd_ha, \n                      travel_ha_ph, travel_ha_nh, travel_ha_rh, travel_ha_castro, travel_ha_sd, \n                      ronald_duration, sarah_duration, helen_duration, joshua_duration, margaret_duration):\n    schedule = []\n\n    # Start at Pacific Heights\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Pacific Heights\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Sarah\n    meet_sarah_start = max(arrival_time, sarah_start)\n    meet_sarah_end = meet_sarah_start + timedelta(minutes=sarah_duration)\n    if meet_sarah_start < ronald_start:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_ph_rh,\n            \"time\": meet_sarah_start - timedelta(minutes=travel_ph_rh),\n            \"to\": \"Russian Hill\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Russian Hill\",\n            \"duration\": sarah_duration,\n            \"time\": meet_sarah_start.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Russian Hill\",\n            \"duration\": travel_rh_nh,\n            \"time\": meet_sarah_end,\n            \"to\": \"Nob Hill\"\n        })\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_ph_nh,\n            \"time\": meet_sarah_start - timedelta(minutes=travel_ph_nh),\n            \"to\": \"Nob Hill\"\n        })\n\n    # Meet Ronald\n    meet_ronald_start = max(meet_sarah_end, ronald_start)\n    meet_ronald_end = meet_ronald_start + timedelta(minutes=ronald_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": ronald_duration,\n        \"time\": meet_ronald_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Margaret\n    meet_margaret_start = max(meet_ronald_end, margaret_start)\n    meet_margaret_end = meet_margaret_start + timedelta(minutes=margaret_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_nh_ha,\n        \"time\": meet_margaret_start - timedelta(minutes=travel_nh_ha),\n        \"to\": \"Haight-Ashbury\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": margaret_duration,\n        \"time\": meet_margaret_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Helen\n    meet_helen_start = max(meet_margaret_end, helen_start)\n    meet_helen_end = meet_helen_start + timedelta(minutes=helen_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_ha_castro,\n        \"time\": meet_helen_start - timedelta(minutes=travel_ha_castro),\n        \"to\": \"The Castro\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": helen_duration,\n        \"time\": meet_helen_start.strftime(\"%I:%M%p\")\n    })\n\n    # Meet Joshua\n    meet_joshua_start = max(meet_helen_end, joshua_start)\n    meet_joshua_end = meet_joshua_start + timedelta(minutes=joshua_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_castro_sd,\n        \"time\": meet_joshua_start - timedelta(minutes=travel_castro_sd),\n        \"to\": \"Sunset District\"\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": joshua_duration,\n        \"time\": meet_joshua_start.strftime(\"%I:%M%p\")\n    })\n\n    schedule.append({\n        \"action\": \"end\",\n        \"location\": \"Sunset District\",\n        \"time\": meet_joshua_end.strftime(\"%I:%M%p\")\n    })\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    ronald_start = datetime.strptime(\"10:00AM\", \"%I:%M%p\")\n    ronald_end = datetime.strptime(\"5:00PM\", \"%I:%M%p\")\n    sarah_start = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\n    sarah_end = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    helen_start = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\n    helen_end = datetime.strptime(\"5:00PM\", \"%I:%M%p\")\n    joshua_start = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    joshua_end = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    margaret_start = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\n    margaret_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    travel_ph_nh = 8\n    travel_ph_rh = 7\n    travel_ph_castro = 16\n    travel_ph_sd = 21\n    travel_ph_ha = 11\n    travel_nh_ph = 8\n    travel_nh_rh = 5\n    travel_nh_castro = 17\n    travel_nh_sd = 25\n    travel_nh_ha = 13\n    travel_rh_ph = 7\n    travel_rh_nh = 5\n    travel_rh_castro = 21\n    travel_rh_sd = 23\n    travel_rh_ha = 17\n    travel_castro_ph = 16\n    travel_castro_nh = 16\n    travel_castro_rh = 18\n    travel_castro_sd = 17\n    travel_castro_ha = 6\n    travel_sd_ph = 21\n    travel_sd_nh = 27\n    travel_sd_rh = 24\n    travel_sd_castro = 17\n    travel_sd_ha = 15\n    travel_ha_ph = 12\n    travel_ha_nh = 15\n    travel_ha_rh = 17\n    travel_ha_castro = 6\n    travel_ha_sd = 15\n    ronald_duration = 105\n    sarah_duration = 45\n    helen_duration = 120\n    joshua_duration = 90\n    margaret_duration = 60\n\n    schedule = calculate_schedule(arrival_time, ronald_start, ronald_end, sarah_start, sarah_end, helen_start, helen_end, joshua_start, joshua_end, margaret_start, margaret_end, \n                      travel_ph_nh, travel_ph_rh, travel_ph_castro, travel_ph_sd, travel_ph_ha, \n                      travel_nh_ph, travel_nh_rh, travel_nh_castro, travel_nh_sd, travel_nh_ha, \n                      travel_rh_ph, travel_rh_nh, travel_rh_castro, travel_rh_sd, travel_rh_ha, \n                      travel_castro_ph, travel_castro_nh, travel_castro_rh, travel_castro_sd, travel_castro_ha, \n                      travel_sd_ph, travel_sd_nh, travel_sd_rh, travel_sd_castro, travel_sd_ha, \n                      travel_ha_ph, travel_ha_nh, travel_ha_rh, travel_ha_castro, travel_ha_sd, \n                      ronald_duration, sarah_duration, helen_duration, joshua_duration, margaret_duration)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
      "count": "meeting_planning_example_488"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Jason",
            "start_time": "4:00PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Jessica",
            "start_time": "4:45PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Sandra",
            "start_time": "6:30PM",
            "end_time": "8:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Jason",
            "start_time": "4:00PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Jessica",
            "start_time": "4:45PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Sandra",
            "start_time": "6:30PM",
            "end_time": "8:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define the locations and their travel times\nlocations = {\n    \"Bayview\": {\"Embarcadero\": 19, \"Richmond District\": 25, \"Fisherman's Wharf\": 25},\n    \"Embarcadero\": {\"Bayview\": 21, \"Richmond District\": 21, \"Fisherman's Wharf\": 6},\n    \"Richmond District\": {\"Bayview\": 26, \"Embarcadero\": 19, \"Fisherman's Wharf\": 18},\n    \"Fisherman's Wharf\": {\"Bayview\": 26, \"Embarcadero\": 8, \"Richmond District\": 18}\n}\n\n# Define the meeting constraints\nmeetings = {\n    \"Jessica\": {\"location\": \"Embarcadero\", \"start_time\": \"4:45PM\", \"end_time\": \"7:00PM\", \"duration\": 30},\n    \"Sandra\": {\"location\": \"Richmond District\", \"start_time\": \"6:30PM\", \"end_time\": \"9:45PM\", \"duration\": 120},\n    \"Jason\": {\"location\": \"Fisherman's Wharf\", \"start_time\": \"4:00PM\", \"end_time\": \"4:45PM\", \"duration\": 30}\n}\n\ndef convert_time_to_minutes(time):\n    \"\"\"Convert a time string to minutes\"\"\"\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1][:2])\n    if \"PM\" in time_parts[1]:\n        hours += 12\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    \"\"\"Convert minutes to a time string\"\"\"\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\ndef calculate_schedule():\n    schedule = []\n    current_location = \"Bayview\"\n    current_time = convert_time_to_minutes(\"9:00AM\")\n\n    # Meet Jason\n    travel_time = locations[current_location][\"Fisherman's Wharf\"]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": \"Fisherman's Wharf\", \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": \"Fisherman's Wharf\"})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Jason\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Jason\"][\"duration\"], convert_time_to_minutes(meetings[\"Jason\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": \"Fisherman's Wharf\", \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Jessica\n    travel_time = locations[\"Fisherman's Wharf\"][\"Embarcadero\"]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": \"Embarcadero\"})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Jessica\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Jessica\"][\"duration\"], convert_time_to_minutes(meetings[\"Jessica\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Sandra\n    travel_time = locations[\"Embarcadero\"][\"Richmond District\"]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": \"Richmond District\"})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Sandra\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Sandra\"][\"duration\"], convert_time_to_minutes(meetings[\"Sandra\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": \"Richmond District\", \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    return schedule\n\nschedule = calculate_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_215"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Karen",
            "start_time": "9:13AM",
            "end_time": "10:28AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Deborah",
            "start_time": "12:00PM",
            "end_time": "3:00AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Laura",
            "start_time": "3:19PM",
            "end_time": "4:19PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Jason",
            "start_time": "4:25PM",
            "end_time": "5:55PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Steven",
            "start_time": "5:59PM",
            "end_time": "6:30PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Elizabeth",
            "start_time": "12:15PM",
            "end_time": "9:30AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Carol",
            "start_time": "9:49PM",
            "end_time": "10:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Karen",
            "start_time": "9:13AM",
            "end_time": "10:28AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Laura",
            "start_time": "11:45AM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Deborah",
            "start_time": "1:05PM",
            "end_time": "2:50PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Steven",
            "start_time": "3:03PM",
            "end_time": "5:03PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Jason",
            "start_time": "5:08PM",
            "end_time": "6:38PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Elizabeth",
            "start_time": "6:44PM",
            "end_time": "7:59PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Carol",
            "start_time": "9:30PM",
            "end_time": "10:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define the locations and their travel times\nlocations = {\n    \"Golden Gate Park\": {\"Haight-Ashbury\": 7, \"Fisherman's Wharf\": 24, \"The Castro\": 13, \"Chinatown\": 23, \"Alamo Square\": 10, \"North Beach\": 24, \"Russian Hill\": 19},\n    \"Haight-Ashbury\": {\"Golden Gate Park\": 7, \"Fisherman's Wharf\": 23, \"The Castro\": 6, \"Chinatown\": 19, \"Alamo Square\": 5, \"North Beach\": 19, \"Russian Hill\": 17},\n    \"Fisherman's Wharf\": {\"Golden Gate Park\": 25, \"Haight-Ashbury\": 22, \"The Castro\": 26, \"Chinatown\": 12, \"Alamo Square\": 20, \"North Beach\": 6, \"Russian Hill\": 7},\n    \"The Castro\": {\"Golden Gate Park\": 11, \"Haight-Ashbury\": 6, \"Fisherman's Wharf\": 24, \"Chinatown\": 20, \"Alamo Square\": 8, \"North Beach\": 20, \"Russian Hill\": 18},\n    \"Chinatown\": {\"Golden Gate Park\": 23, \"Haight-Ashbury\": 19, \"Fisherman's Wharf\": 8, \"The Castro\": 22, \"Alamo Square\": 17, \"North Beach\": 3, \"Russian Hill\": 7},\n    \"Alamo Square\": {\"Golden Gate Park\": 9, \"Haight-Ashbury\": 5, \"Fisherman's Wharf\": 19, \"The Castro\": 8, \"Chinatown\": 16, \"North Beach\": 15, \"Russian Hill\": 13},\n    \"North Beach\": {\"Golden Gate Park\": 22, \"Haight-Ashbury\": 18, \"Fisherman's Wharf\": 5, \"The Castro\": 22, \"Chinatown\": 6, \"Alamo Square\": 16, \"Russian Hill\": 4},\n    \"Russian Hill\": {\"Golden Gate Park\": 21, \"Haight-Ashbury\": 17, \"Fisherman's Wharf\": 7, \"The Castro\": 21, \"Chinatown\": 9, \"Alamo Square\": 15, \"North Beach\": 5}\n}\n\n# Define the meeting constraints\nmeetings = {\n    \"Carol\": {\"location\": \"Haight-Ashbury\", \"start_time\": \"9:30PM\", \"end_time\": \"10:30PM\", \"duration\": 60},\n    \"Laura\": {\"location\": \"Fisherman's Wharf\", \"start_time\": \"11:45AM\", \"end_time\": \"9:30PM\", \"duration\": 60},\n    \"Karen\": {\"location\": \"The Castro\", \"start_time\": \"7:15AM\", \"end_time\": \"2:00PM\", \"duration\": 75},\n    \"Elizabeth\": {\"location\": \"Chinatown\", \"start_time\": \"12:15PM\", \"end_time\": \"9:30PM\", \"duration\": 75},\n    \"Deborah\": {\"location\": \"Alamo Square\", \"start_time\": \"12:00PM\", \"end_time\": \"3:00PM\", \"duration\": 105},\n    \"Jason\": {\"location\": \"North Beach\", \"start_time\": \"2:45PM\", \"end_time\": \"7:00PM\", \"duration\": 90},\n    \"Steven\": {\"location\": \"Russian Hill\", \"start_time\": \"2:45PM\", \"end_time\": \"6:30PM\", \"duration\": 120}\n}\n\ndef convert_time_to_minutes(time):\n    \"\"\"Convert a time string to minutes\"\"\"\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1][:2])\n    if \"PM\" in time_parts[1]:\n        hours += 12\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    \"\"\"Convert minutes to a time string\"\"\"\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\ndef calculate_schedule():\n    schedule = []\n    current_location = \"Golden Gate Park\"\n    current_time = convert_time_to_minutes(\"9:00AM\")\n\n    # Meet Karen\n    travel_time = locations[current_location][meetings[\"Karen\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Karen\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Karen\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Karen\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Karen\"][\"duration\"], convert_time_to_minutes(meetings[\"Karen\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Karen\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Deborah\n    travel_time = locations[meetings[\"Karen\"][\"location\"]][meetings[\"Deborah\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Deborah\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Deborah\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Deborah\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Deborah\"][\"duration\"], convert_time_to_minutes(meetings[\"Deborah\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Deborah\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Laura\n    travel_time = locations[meetings[\"Deborah\"][\"location\"]][meetings[\"Laura\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Laura\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Laura\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Laura\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Laura\"][\"duration\"], convert_time_to_minutes(meetings[\"Laura\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Laura\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Jason\n    travel_time = locations[meetings[\"Laura\"][\"location\"]][meetings[\"Jason\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Jason\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Jason\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Jason\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Jason\"][\"duration\"], convert_time_to_minutes(meetings[\"Jason\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Jason\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Steven\n    travel_time = locations[meetings[\"Jason\"][\"location\"]][meetings[\"Steven\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Steven\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Steven\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Steven\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Steven\"][\"duration\"], convert_time_to_minutes(meetings[\"Steven\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Steven\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Elizabeth\n    travel_time = locations[meetings[\"Steven\"][\"location\"]][meetings[\"Elizabeth\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Elizabeth\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Elizabeth\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Elizabeth\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Elizabeth\"][\"duration\"], convert_time_to_minutes(meetings[\"Elizabeth\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Elizabeth\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Carol\n    travel_time = locations[meetings[\"Elizabeth\"][\"location\"]][meetings[\"Carol\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Carol\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Carol\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Carol\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Carol\"][\"duration\"], convert_time_to_minutes(meetings[\"Carol\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Carol\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n\n    return schedule\n\nschedule = calculate_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_624"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Joseph",
            "start_time": "9:20AM",
            "end_time": "10:05AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Joshua",
            "start_time": "10:20AM",
            "end_time": "10:35AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Lisa",
            "start_time": "10:56AM",
            "end_time": "11:11AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Betty",
            "start_time": "11:26AM",
            "end_time": "12:26PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "John",
            "start_time": "1:15PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Sarah",
            "start_time": "4:15PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Daniel",
            "start_time": "6:30PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Melissa",
            "start_time": "7:37PM",
            "end_time": "9:37PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Stephanie",
            "start_time": "9:44PM",
            "end_time": "10:00PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Unknown",
            "start_time": "10:11PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Lisa",
            "start_time": "10:45AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Joshua",
            "start_time": "11:19AM",
            "end_time": "11:34AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Joseph",
            "start_time": "11:49AM",
            "end_time": "12:34PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Betty",
            "start_time": "12:45PM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "John",
            "start_time": "2:07PM",
            "end_time": "2:52PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Stephanie",
            "start_time": "3:30PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Melissa",
            "start_time": "5:00PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Daniel",
            "start_time": "7:07PM",
            "end_time": "8:07PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Andrew",
            "start_time": "8:15PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define the locations and their travel times\nlocations = {\n    \"Embarcadero\": {\"Fisherman's Wharf\": 6, \"Financial District\": 5, \"Russian Hill\": 8, \"Marina District\": 12, \"Richmond District\": 21, \"Pacific Heights\": 11, \"Haight-Ashbury\": 21, \"Presidio\": 20, \"Nob Hill\": 10, \"The Castro\": 25},\n    \"Fisherman's Wharf\": {\"Embarcadero\": 8, \"Financial District\": 11, \"Russian Hill\": 7, \"Marina District\": 9, \"Richmond District\": 18, \"Pacific Heights\": 12, \"Haight-Ashbury\": 22, \"Presidio\": 17, \"Nob Hill\": 11, \"The Castro\": 27},\n    \"Financial District\": {\"Embarcadero\": 4, \"Fisherman's Wharf\": 10, \"Russian Hill\": 11, \"Marina District\": 15, \"Richmond District\": 21, \"Pacific Heights\": 13, \"Haight-Ashbury\": 19, \"Presidio\": 22, \"Nob Hill\": 8, \"The Castro\": 20},\n    \"Russian Hill\": {\"Embarcadero\": 8, \"Fisherman's Wharf\": 7, \"Financial District\": 11, \"Marina District\": 7, \"Richmond District\": 14, \"Pacific Heights\": 7, \"Haight-Ashbury\": 17, \"Presidio\": 14, \"Nob Hill\": 5, \"The Castro\": 21},\n    \"Marina District\": {\"Embarcadero\": 14, \"Fisherman's Wharf\": 10, \"Financial District\": 17, \"Russian Hill\": 8, \"Richmond District\": 11, \"Pacific Heights\": 7, \"Haight-Ashbury\": 16, \"Presidio\": 10, \"Nob Hill\": 12, \"The Castro\": 22},\n    \"Richmond District\": {\"Embarcadero\": 19, \"Fisherman's Wharf\": 18, \"Financial District\": 22, \"Russian Hill\": 13, \"Marina District\": 9, \"Pacific Heights\": 10, \"Haight-Ashbury\": 10, \"Presidio\": 7, \"Nob Hill\": 17, \"The Castro\": 16},\n    \"Pacific Heights\": {\"Embarcadero\": 10, \"Fisherman's Wharf\": 13, \"Financial District\": 13, \"Russian Hill\": 7, \"Marina District\": 6, \"Richmond District\": 12, \"Haight-Ashbury\": 11, \"Presidio\": 11, \"Nob Hill\": 8, \"The Castro\": 16},\n    \"Haight-Ashbury\": {\"Embarcadero\": 20, \"Fisherman's Wharf\": 23, \"Financial District\": 21, \"Russian Hill\": 17, \"Marina District\": 17, \"Richmond District\": 10, \"Pacific Heights\": 12, \"Presidio\": 15, \"Nob Hill\": 15, \"The Castro\": 6},\n    \"Presidio\": {\"Embarcadero\": 20, \"Fisherman's Wharf\": 19, \"Financial District\": 23, \"Russian Hill\": 14, \"Marina District\": 11, \"Richmond District\": 7, \"Pacific Heights\": 11, \"Haight-Ashbury\": 15, \"Nob Hill\": 18, \"The Castro\": 21},\n    \"Nob Hill\": {\"Embarcadero\": 9, \"Fisherman's Wharf\": 10, \"Financial District\": 9, \"Russian Hill\": 5, \"Marina District\": 11, \"Richmond District\": 14, \"Pacific Heights\": 8, \"Haight-Ashbury\": 13, \"Presidio\": 17, \"The Castro\": 17},\n    \"The Castro\": {\"Embarcadero\": 22, \"Fisherman's Wharf\": 24, \"Financial District\": 21, \"Russian Hill\": 18, \"Marina District\": 21, \"Richmond District\": 16, \"Pacific Heights\": 16, \"Haight-Ashbury\": 6, \"Presidio\": 20, \"Nob Hill\": 16}\n}\n\n# Define the meeting constraints\nmeetings = {\n    \"Stephanie\": {\"location\": \"Fisherman's Wharf\", \"start_time\": \"3:30PM\", \"end_time\": \"10:00PM\", \"duration\": 30},\n    \"Lisa\": {\"location\": \"Financial District\", \"start_time\": \"10:45AM\", \"end_time\": \"5:15PM\", \"duration\": 15},\n    \"Melissa\": {\"location\": \"Russian Hill\", \"start_time\": \"5:00PM\", \"end_time\": \"9:45PM\", \"duration\": 120},\n    \"Betty\": {\"location\": \"Marina District\", \"start_time\": \"10:45AM\", \"end_time\": \"2:15PM\", \"duration\": 60},\n    \"Sarah\": {\"location\": \"Richmond District\", \"start_time\": \"4:15PM\", \"end_time\": \"7:30PM\", \"duration\": 105},\n    \"Daniel\": {\"location\": \"Pacific Heights\", \"start_time\": \"6:30PM\", \"end_time\": \"9:45PM\", \"duration\": 60},\n    \"Joshua\": {\"location\": \"Haight-Ashbury\", \"start_time\": \"9:00AM\", \"end_time\": \"3:30PM\", \"duration\": 15},\n    \"Joseph\": {\"location\": \"Presidio\", \"start_time\": \"7:00AM\", \"end_time\": \"1:00PM\", \"duration\": 45},\n    \"Andrew\": {\"location\": \"Nob Hill\", \"start_time\": \"7:45PM\", \"end_time\": \"10:00PM\", \"duration\": 105},\n    \"John\": {\"location\": \"The Castro\", \"start_time\": \"1:15PM\", \"end_time\": \"7:45PM\", \"duration\": 45}\n}\n\ndef convert_time_to_minutes(time):\n    \"\"\"Convert a time string to minutes\"\"\"\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1][:2])\n    if \"PM\" in time_parts[1]:\n        hours += 12\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    \"\"\"Convert minutes to a time string\"\"\"\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\ndef calculate_schedule():\n    schedule = []\n    current_location = \"Embarcadero\"\n    current_time = convert_time_to_minutes(\"9:00AM\")\n\n    # Meet Joseph\n    travel_time = locations[current_location][meetings[\"Joseph\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Joseph\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Joseph\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Joseph\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Joseph\"][\"duration\"], convert_time_to_minutes(meetings[\"Joseph\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Joseph\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Joshua\n    travel_time = locations[meetings[\"Joseph\"][\"location\"]][meetings[\"Joshua\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Joshua\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Joshua\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Joshua\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Joshua\"][\"duration\"], convert_time_to_minutes(meetings[\"Joshua\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Joshua\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Lisa\n    travel_time = locations[meetings[\"Joshua\"][\"location\"]][meetings[\"Lisa\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Lisa\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Lisa\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Lisa\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Lisa\"][\"duration\"], convert_time_to_minutes(meetings[\"Lisa\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Lisa\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Betty\n    travel_time = locations[meetings[\"Lisa\"][\"location\"]][meetings[\"Betty\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Betty\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Betty\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Betty\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Betty\"][\"duration\"], convert_time_to_minutes(meetings[\"Betty\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Betty\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet John\n    travel_time = locations[meetings[\"Betty\"][\"location\"]][meetings[\"John\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"John\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"John\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"John\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"John\"][\"duration\"], convert_time_to_minutes(meetings[\"John\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"John\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Sarah\n    travel_time = locations[meetings[\"John\"][\"location\"]][meetings[\"Sarah\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Sarah\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Sarah\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Sarah\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Sarah\"][\"duration\"], convert_time_to_minutes(meetings[\"Sarah\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Sarah\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Daniel\n    travel_time = locations[meetings[\"Sarah\"][\"location\"]][meetings[\"Daniel\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Daniel\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Daniel\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Daniel\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Daniel\"][\"duration\"], convert_time_to_minutes(meetings[\"Daniel\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Daniel\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Melissa\n    travel_time = locations[meetings[\"Daniel\"][\"location\"]][meetings[\"Melissa\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Melissa\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Melissa\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Melissa\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Melissa\"][\"duration\"], convert_time_to_minutes(meetings[\"Melissa\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Melissa\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Stephanie\n    travel_time = locations[meetings[\"Melissa\"][\"location\"]][meetings[\"Stephanie\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Stephanie\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Stephanie\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Stephanie\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Stephanie\"][\"duration\"], convert_time_to_minutes(meetings[\"Stephanie\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Stephanie\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Andrew\n    travel_time = locations[meetings[\"Stephanie\"][\"location\"]][meetings[\"Andrew\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Andrew\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Andrew\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Andrew\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Andrew\"][\"duration\"], convert_time_to_minutes(meetings[\"Andrew\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Andrew\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n\n    return schedule\n\nschedule = calculate_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_978"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Richard",
            "start_time": "9:06AM",
            "end_time": "9:36AM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Kenneth",
            "start_time": "11:15AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "1:15PM",
            "end_time": "3:15PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Unknown",
            "start_time": "3:25PM",
            "end_time": "2:30PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Daniel",
            "start_time": "2:45PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Mark",
            "start_time": "5:30PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Unknown",
            "start_time": "7:53PM",
            "end_time": "7:45PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "David",
            "start_time": "8:00PM",
            "end_time": "9:00PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Joseph",
            "start_time": "9:16PM",
            "end_time": "10:00PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Unknown",
            "start_time": "10:20PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Kenneth",
            "start_time": "11:15AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Sarah",
            "start_time": "12:04PM",
            "end_time": "1:34PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Daniel",
            "start_time": "1:49PM",
            "end_time": "2:04PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Richard",
            "start_time": "2:15PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "2:52PM",
            "end_time": "4:52PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Thomas",
            "start_time": "7:15PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Mary",
            "start_time": "8:00PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define the locations and their travel times\nlocations = {\n    \"Nob Hill\": {\"Embarcadero\": 9, \"The Castro\": 17, \"Haight-Ashbury\": 13, \"Union Square\": 7, \"North Beach\": 8, \"Pacific Heights\": 8, \"Chinatown\": 6, \"Golden Gate Park\": 17, \"Marina District\": 11, \"Russian Hill\": 5},\n    \"Embarcadero\": {\"Nob Hill\": 10, \"The Castro\": 25, \"Haight-Ashbury\": 21, \"Union Square\": 10, \"North Beach\": 5, \"Pacific Heights\": 11, \"Chinatown\": 7, \"Golden Gate Park\": 25, \"Marina District\": 12, \"Russian Hill\": 8},\n    \"The Castro\": {\"Nob Hill\": 16, \"Embarcadero\": 22, \"Haight-Ashbury\": 6, \"Union Square\": 19, \"North Beach\": 20, \"Pacific Heights\": 16, \"Chinatown\": 22, \"Golden Gate Park\": 11, \"Marina District\": 21, \"Russian Hill\": 18},\n    \"Haight-Ashbury\": {\"Nob Hill\": 15, \"Embarcadero\": 20, \"The Castro\": 6, \"Union Square\": 19, \"North Beach\": 19, \"Pacific Heights\": 12, \"Chinatown\": 19, \"Golden Gate Park\": 7, \"Marina District\": 17, \"Russian Hill\": 17},\n    \"Union Square\": {\"Nob Hill\": 9, \"Embarcadero\": 11, \"The Castro\": 17, \"Haight-Ashbury\": 18, \"North Beach\": 10, \"Pacific Heights\": 15, \"Chinatown\": 7, \"Golden Gate Park\": 22, \"Marina District\": 18, \"Russian Hill\": 13},\n    \"North Beach\": {\"Nob Hill\": 7, \"Embarcadero\": 6, \"The Castro\": 23, \"Haight-Ashbury\": 18, \"Union Square\": 7, \"Pacific Heights\": 8, \"Chinatown\": 6, \"Golden Gate Park\": 22, \"Marina District\": 9, \"Russian Hill\": 4},\n    \"Pacific Heights\": {\"Nob Hill\": 8, \"Embarcadero\": 10, \"The Castro\": 16, \"Haight-Ashbury\": 11, \"Union Square\": 12, \"North Beach\": 9, \"Chinatown\": 11, \"Golden Gate Park\": 15, \"Marina District\": 6, \"Russian Hill\": 7},\n    \"Chinatown\": {\"Nob Hill\": 9, \"Embarcadero\": 5, \"The Castro\": 22, \"Haight-Ashbury\": 19, \"Union Square\": 7, \"North Beach\": 3, \"Pacific Heights\": 10, \"Golden Gate Park\": 23, \"Marina District\": 12, \"Russian Hill\": 7},\n    \"Golden Gate Park\": {\"Nob Hill\": 20, \"Embarcadero\": 25, \"The Castro\": 13, \"Haight-Ashbury\": 7, \"Union Square\": 22, \"North Beach\": 23, \"Pacific Heights\": 16, \"Chinatown\": 23, \"Marina District\": 16, \"Russian Hill\": 19},\n    \"Marina District\": {\"Nob Hill\": 12, \"Embarcadero\": 14, \"The Castro\": 22, \"Haight-Ashbury\": 16, \"Union Square\": 16, \"North Beach\": 11, \"Pacific Heights\": 7, \"Chinatown\": 15, \"Golden Gate Park\": 18, \"Russian Hill\": 8},\n    \"Russian Hill\": {\"Nob Hill\": 5, \"Embarcadero\": 8, \"The Castro\": 21, \"Haight-Ashbury\": 17, \"Union Square\": 10, \"North Beach\": 5, \"Pacific Heights\": 7, \"Chinatown\": 9, \"Golden Gate Park\": 21, \"Marina District\": 7}\n}\n\n# Define the meeting constraints\nmeetings = {\n    \"Mary\": {\"location\": \"Embarcadero\", \"start_time\": \"8:00PM\", \"end_time\": \"9:15PM\", \"duration\": 75},\n    \"Kenneth\": {\"location\": \"The Castro\", \"start_time\": \"11:15AM\", \"end_time\": \"7:15PM\", \"duration\": 30},\n    \"Joseph\": {\"location\": \"Haight-Ashbury\", \"start_time\": \"8:00PM\", \"end_time\": \"10:00PM\", \"duration\": 120},\n    \"Sarah\": {\"location\": \"Union Square\", \"start_time\": \"11:45AM\", \"end_time\": \"2:30PM\", \"duration\": 90},\n    \"Thomas\": {\"location\": \"North Beach\", \"start_time\": \"7:15PM\", \"end_time\": \"7:45PM\", \"duration\": 15},\n    \"Daniel\": {\"location\": \"Pacific Heights\", \"start_time\": \"1:45PM\", \"end_time\": \"8:30PM\", \"duration\": 15},\n    \"Richard\": {\"location\": \"Chinatown\", \"start_time\": \"8:00AM\", \"end_time\": \"6:45PM\", \"duration\": 30},\n    \"Mark\": {\"location\": \"Golden Gate Park\", \"start_time\": \"5:30PM\", \"end_time\": \"9:30PM\", \"duration\": 120},\n    \"David\": {\"location\": \"Marina District\", \"start_time\": \"8:00PM\", \"end_time\": \"9:00PM\", \"duration\": 60},\n    \"Karen\": {\"location\": \"Russian Hill\", \"start_time\": \"1:15PM\", \"end_time\": \"6:30PM\", \"duration\": 120}\n}\n\ndef convert_time_to_minutes(time):\n    \"\"\"Convert a time string to minutes\"\"\"\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1][:2])\n    if \"PM\" in time_parts[1]:\n        hours += 12\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    \"\"\"Convert minutes to a time string\"\"\"\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\ndef calculate_schedule():\n    schedule = []\n    current_location = \"Nob Hill\"\n    current_time = convert_time_to_minutes(\"9:00AM\")\n\n    # Meet Richard\n    travel_time = locations[current_location][meetings[\"Richard\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Richard\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Richard\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Richard\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Richard\"][\"duration\"], convert_time_to_minutes(meetings[\"Richard\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Richard\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Kenneth\n    travel_time = locations[meetings[\"Richard\"][\"location\"]][meetings[\"Kenneth\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Kenneth\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Kenneth\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Kenneth\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Kenneth\"][\"duration\"], convert_time_to_minutes(meetings[\"Kenneth\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Kenneth\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Karen\n    travel_time = locations[meetings[\"Kenneth\"][\"location\"]][meetings[\"Karen\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Karen\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Karen\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Karen\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Karen\"][\"duration\"], convert_time_to_minutes(meetings[\"Karen\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Karen\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Sarah\n    travel_time = locations[meetings[\"Karen\"][\"location\"]][meetings[\"Sarah\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Sarah\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Sarah\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Sarah\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Sarah\"][\"duration\"], convert_time_to_minutes(meetings[\"Sarah\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Sarah\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Daniel\n    travel_time = locations[meetings[\"Sarah\"][\"location\"]][meetings[\"Daniel\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Daniel\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Daniel\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Daniel\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Daniel\"][\"duration\"], convert_time_to_minutes(meetings[\"Daniel\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Daniel\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Mark\n    travel_time = locations[meetings[\"Daniel\"][\"location\"]][meetings[\"Mark\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Mark\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Mark\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Mark\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Mark\"][\"duration\"], convert_time_to_minutes(meetings[\"Mark\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Mark\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Thomas\n    travel_time = locations[meetings[\"Mark\"][\"location\"]][meetings[\"Thomas\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Thomas\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Thomas\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Thomas\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Thomas\"][\"duration\"], convert_time_to_minutes(meetings[\"Thomas\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Thomas\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet David\n    travel_time = locations[meetings[\"Thomas\"][\"location\"]][meetings[\"David\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"David\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"David\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"David\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"David\"][\"duration\"], convert_time_to_minutes(meetings[\"David\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"David\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Joseph\n    travel_time = locations[meetings[\"David\"][\"location\"]][meetings[\"Joseph\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Joseph\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Joseph\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Joseph\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Joseph\"][\"duration\"], convert_time_to_minutes(meetings[\"Joseph\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Joseph\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Mary\n    travel_time = locations[meetings[\"Joseph\"][\"location\"]][meetings[\"Mary\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Mary\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Mary\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Mary\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Mary\"][\"duration\"], convert_time_to_minutes(meetings[\"Mary\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Mary\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n\n    return schedule\n\nschedule = calculate_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_934"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Mark",
            "start_time": "10:00AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "William",
            "start_time": "1:15PM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Robert",
            "start_time": "2:15PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Linda",
            "start_time": "3:30PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Elizabeth",
            "start_time": "5:15PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Rebecca",
            "start_time": "7:15PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "William",
            "start_time": "1:15PM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Robert",
            "start_time": "2:15PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Mark",
            "start_time": "3:19PM",
            "end_time": "4:34PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Linda",
            "start_time": "4:57PM",
            "end_time": "5:27PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Elizabeth",
            "start_time": "5:42PM",
            "end_time": "7:27PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Rebecca",
            "start_time": "7:42PM",
            "end_time": "8:42PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define the locations and their travel times\nlocations = {\n    \"The Castro\": {\"Presidio\": 20, \"Sunset District\": 17, \"Haight-Ashbury\": 6, \"Mission District\": 7, \"Golden Gate Park\": 11, \"Russian Hill\": 18},\n    \"Presidio\": {\"The Castro\": 21, \"Sunset District\": 15, \"Haight-Ashbury\": 15, \"Mission District\": 26, \"Golden Gate Park\": 12, \"Russian Hill\": 14},\n    \"Sunset District\": {\"The Castro\": 17, \"Presidio\": 16, \"Haight-Ashbury\": 15, \"Mission District\": 24, \"Golden Gate Park\": 11, \"Russian Hill\": 24},\n    \"Haight-Ashbury\": {\"The Castro\": 6, \"Presidio\": 15, \"Sunset District\": 15, \"Mission District\": 11, \"Golden Gate Park\": 7, \"Russian Hill\": 17},\n    \"Mission District\": {\"The Castro\": 7, \"Presidio\": 25, \"Sunset District\": 24, \"Haight-Ashbury\": 12, \"Golden Gate Park\": 17, \"Russian Hill\": 15},\n    \"Golden Gate Park\": {\"The Castro\": 13, \"Presidio\": 11, \"Sunset District\": 10, \"Haight-Ashbury\": 7, \"Mission District\": 17, \"Russian Hill\": 19},\n    \"Russian Hill\": {\"The Castro\": 21, \"Presidio\": 14, \"Sunset District\": 23, \"Haight-Ashbury\": 17, \"Mission District\": 16, \"Golden Gate Park\": 21}\n}\n\n# Define the meeting constraints\nmeetings = {\n    \"Rebecca\": {\"location\": \"Presidio\", \"start_time\": \"6:15PM\", \"end_time\": \"8:45PM\", \"duration\": 60},\n    \"Linda\": {\"location\": \"Sunset District\", \"start_time\": \"3:30PM\", \"end_time\": \"7:45PM\", \"duration\": 30},\n    \"Elizabeth\": {\"location\": \"Haight-Ashbury\", \"start_time\": \"5:15PM\", \"end_time\": \"7:30PM\", \"duration\": 105},\n    \"William\": {\"location\": \"Mission District\", \"start_time\": \"1:15PM\", \"end_time\": \"7:30PM\", \"duration\": 30},\n    \"Robert\": {\"location\": \"Golden Gate Park\", \"start_time\": \"2:15PM\", \"end_time\": \"9:30PM\", \"duration\": 45},\n    \"Mark\": {\"location\": \"Russian Hill\", \"start_time\": \"10:00AM\", \"end_time\": \"9:15PM\", \"duration\": 75}\n}\n\ndef convert_time_to_minutes(time):\n    \"\"\"Convert a time string to minutes\"\"\"\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1][:2])\n    if \"PM\" in time_parts[1]:\n        hours += 12\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    \"\"\"Convert minutes to a time string\"\"\"\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\ndef calculate_schedule():\n    schedule = []\n    current_location = \"The Castro\"\n    current_time = convert_time_to_minutes(\"9:00AM\")\n\n    # Meet Mark\n    travel_time = locations[current_location][meetings[\"Mark\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Mark\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Mark\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Mark\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Mark\"][\"duration\"], convert_time_to_minutes(meetings[\"Mark\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Mark\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet William\n    travel_time = locations[meetings[\"Mark\"][\"location\"]][meetings[\"William\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"William\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"William\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"William\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"William\"][\"duration\"], convert_time_to_minutes(meetings[\"William\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"William\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Robert\n    travel_time = locations[meetings[\"William\"][\"location\"]][meetings[\"Robert\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Robert\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Robert\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Robert\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Robert\"][\"duration\"], convert_time_to_minutes(meetings[\"Robert\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Robert\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Linda\n    travel_time = locations[meetings[\"Robert\"][\"location\"]][meetings[\"Linda\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Linda\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Linda\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Linda\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Linda\"][\"duration\"], convert_time_to_minutes(meetings[\"Linda\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Linda\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Elizabeth\n    travel_time = locations[meetings[\"Linda\"][\"location\"]][meetings[\"Elizabeth\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Elizabeth\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Elizabeth\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Elizabeth\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Elizabeth\"][\"duration\"], convert_time_to_minutes(meetings[\"Elizabeth\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Elizabeth\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Rebecca\n    travel_time = locations[meetings[\"Elizabeth\"][\"location\"]][meetings[\"Rebecca\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Rebecca\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Rebecca\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Rebecca\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Rebecca\"][\"duration\"], convert_time_to_minutes(meetings[\"Rebecca\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Rebecca\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n\n    return schedule\n\nschedule = calculate_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_575"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Kimberly",
            "start_time": "9:17AM",
            "end_time": "9:47AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Margaret",
            "start_time": "10:15AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Barbara",
            "start_time": "1:45PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Kevin",
            "start_time": "8:00PM",
            "end_time": "8:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Margaret",
            "start_time": "10:15AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Barbara",
            "start_time": "1:45PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Kimberly",
            "start_time": "2:52PM",
            "end_time": "3:22PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Kevin",
            "start_time": "8:00PM",
            "end_time": "8:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define the locations and their travel times\nlocations = {\n    \"Bayview\": {\"North Beach\": 21, \"Presidio\": 31, \"Haight-Ashbury\": 19, \"Union Square\": 17},\n    \"North Beach\": {\"Bayview\": 22, \"Presidio\": 17, \"Haight-Ashbury\": 18, \"Union Square\": 7},\n    \"Presidio\": {\"Bayview\": 31, \"North Beach\": 18, \"Haight-Ashbury\": 15, \"Union Square\": 22},\n    \"Haight-Ashbury\": {\"Bayview\": 18, \"North Beach\": 19, \"Presidio\": 15, \"Union Square\": 17},\n    \"Union Square\": {\"Bayview\": 15, \"North Beach\": 10, \"Presidio\": 24, \"Haight-Ashbury\": 18}\n}\n\n# Define the meeting constraints\nmeetings = {\n    \"Barbara\": {\"location\": \"North Beach\", \"start_time\": \"1:45PM\", \"end_time\": \"8:15PM\", \"duration\": 60},\n    \"Margaret\": {\"location\": \"Presidio\", \"start_time\": \"10:15AM\", \"end_time\": \"3:15PM\", \"duration\": 30},\n    \"Kevin\": {\"location\": \"Haight-Ashbury\", \"start_time\": \"8:00PM\", \"end_time\": \"8:45PM\", \"duration\": 30},\n    \"Kimberly\": {\"location\": \"Union Square\", \"start_time\": \"7:45AM\", \"end_time\": \"4:45PM\", \"duration\": 30}\n}\n\ndef convert_time_to_minutes(time):\n    \"\"\"Convert a time string to minutes\"\"\"\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1][:2])\n    if \"PM\" in time_parts[1]:\n        hours += 12\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    \"\"\"Convert minutes to a time string\"\"\"\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\ndef calculate_schedule():\n    schedule = []\n    current_location = \"Bayview\"\n    current_time = convert_time_to_minutes(\"9:00AM\")\n\n    # Meet Kimberly\n    travel_time = locations[current_location][meetings[\"Kimberly\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Kimberly\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Kimberly\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Kimberly\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Kimberly\"][\"duration\"], convert_time_to_minutes(meetings[\"Kimberly\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Kimberly\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Margaret\n    travel_time = locations[meetings[\"Kimberly\"][\"location\"]][meetings[\"Margaret\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Margaret\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Margaret\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Margaret\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Margaret\"][\"duration\"], convert_time_to_minutes(meetings[\"Margaret\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Margaret\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Barbara\n    travel_time = locations[meetings[\"Margaret\"][\"location\"]][meetings[\"Barbara\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Barbara\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Barbara\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Barbara\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Barbara\"][\"duration\"], convert_time_to_minutes(meetings[\"Barbara\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Barbara\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Kevin\n    travel_time = locations[meetings[\"Barbara\"][\"location\"]][meetings[\"Kevin\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Kevin\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Kevin\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Kevin\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Kevin\"][\"duration\"], convert_time_to_minutes(meetings[\"Kevin\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Kevin\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n\n    return schedule\n\nschedule = calculate_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_356"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Carol",
            "start_time": "10:15AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Rebecca",
            "start_time": "11:30AM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Karen",
            "start_time": "12:45PM",
            "end_time": "3:00AM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Carol",
            "start_time": "10:15AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Karen",
            "start_time": "12:45PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Rebecca",
            "start_time": "2:58PM",
            "end_time": "4:58PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define the locations and their travel times\nlocations = {\n    \"Union Square\": {\"Mission District\": 14, \"Bayview\": 15, \"Sunset District\": 26},\n    \"Mission District\": {\"Union Square\": 15, \"Bayview\": 15, \"Sunset District\": 24},\n    \"Bayview\": {\"Union Square\": 17, \"Mission District\": 13, \"Sunset District\": 23},\n    \"Sunset District\": {\"Union Square\": 30, \"Mission District\": 24, \"Bayview\": 22}\n}\n\n# Define the meeting constraints\nmeetings = {\n    \"Rebecca\": {\"location\": \"Mission District\", \"start_time\": \"11:30AM\", \"end_time\": \"8:15PM\", \"duration\": 120},\n    \"Karen\": {\"location\": \"Bayview\", \"start_time\": \"12:45PM\", \"end_time\": \"3:00PM\", \"duration\": 120},\n    \"Carol\": {\"location\": \"Sunset District\", \"start_time\": \"10:15AM\", \"end_time\": \"11:45AM\", \"duration\": 30}\n}\n\ndef convert_time_to_minutes(time):\n    \"\"\"Convert a time string to minutes\"\"\"\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1][:2])\n    if \"PM\" in time_parts[1]:\n        hours += 12\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    \"\"\"Convert minutes to a time string\"\"\"\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\ndef calculate_schedule():\n    schedule = []\n    current_location = \"Union Square\"\n    current_time = convert_time_to_minutes(\"9:00AM\")\n\n    # Meet Carol\n    travel_time = locations[current_location][meetings[\"Carol\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Carol\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Carol\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Carol\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Carol\"][\"duration\"], convert_time_to_minutes(meetings[\"Carol\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Carol\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Rebecca\n    travel_time = locations[meetings[\"Carol\"][\"location\"]][meetings[\"Rebecca\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Rebecca\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Rebecca\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Rebecca\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Rebecca\"][\"duration\"], convert_time_to_minutes(meetings[\"Rebecca\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Rebecca\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Karen\n    travel_time = locations[meetings[\"Rebecca\"][\"location\"]][meetings[\"Karen\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Karen\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Karen\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Karen\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Karen\"][\"duration\"], convert_time_to_minutes(meetings[\"Karen\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Karen\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n\n    return schedule\n\nschedule = calculate_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_286"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Melissa",
            "start_time": "3:45PM",
            "end_time": "5:00PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Emily",
            "start_time": "5:22PM",
            "end_time": "7:07PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Joseph",
            "start_time": "7:14PM",
            "end_time": "9:14PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Emily",
            "start_time": "4:15PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Joseph",
            "start_time": "6:07PM",
            "end_time": "8:07PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Melissa",
            "start_time": "8:29PM",
            "end_time": "9:44PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define the locations and their travel times\nlocations = {\n    \"Fisherman's Wharf\": {\"Presidio\": 17, \"Richmond District\": 18, \"Financial District\": 11},\n    \"Presidio\": {\"Fisherman's Wharf\": 19, \"Richmond District\": 7, \"Financial District\": 23},\n    \"Richmond District\": {\"Fisherman's Wharf\": 18, \"Presidio\": 7, \"Financial District\": 22},\n    \"Financial District\": {\"Fisherman's Wharf\": 10, \"Presidio\": 22, \"Richmond District\": 21}\n}\n\n# Define the meeting constraints\nmeetings = {\n    \"Emily\": {\"location\": \"Presidio\", \"start_time\": \"4:15PM\", \"end_time\": \"9:00PM\", \"duration\": 105},\n    \"Joseph\": {\"location\": \"Richmond District\", \"start_time\": \"5:15PM\", \"end_time\": \"10:00PM\", \"duration\": 120},\n    \"Melissa\": {\"location\": \"Financial District\", \"start_time\": \"3:45PM\", \"end_time\": \"9:45PM\", \"duration\": 75}\n}\n\ndef convert_time_to_minutes(time):\n    \"\"\"Convert a time string to minutes\"\"\"\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1][:2])\n    if \"PM\" in time_parts[1]:\n        hours += 12\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    \"\"\"Convert minutes to a time string\"\"\"\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\ndef calculate_schedule():\n    schedule = []\n    current_location = \"Fisherman's Wharf\"\n    current_time = convert_time_to_minutes(\"9:00AM\")\n\n    # Meet Melissa\n    travel_time = locations[current_location][meetings[\"Melissa\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Melissa\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Melissa\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Melissa\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Melissa\"][\"duration\"], convert_time_to_minutes(meetings[\"Melissa\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Melissa\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Emily\n    travel_time = locations[meetings[\"Melissa\"][\"location\"]][meetings[\"Emily\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Emily\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Emily\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Emily\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Emily\"][\"duration\"], convert_time_to_minutes(meetings[\"Emily\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Emily\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Joseph\n    travel_time = locations[meetings[\"Emily\"][\"location\"]][meetings[\"Joseph\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Joseph\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Joseph\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Joseph\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Joseph\"][\"duration\"], convert_time_to_minutes(meetings[\"Joseph\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Joseph\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n\n    return schedule\n\nschedule = calculate_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_210"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "The Castro",
            "person": "George",
            "start_time": "9:08AM",
            "end_time": "10:08AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Deborah",
            "start_time": "10:28AM",
            "end_time": "11:13AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Emily",
            "start_time": "12:15PM",
            "end_time": "2:15AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Steven",
            "start_time": "2:36PM",
            "end_time": "4:21PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Mark",
            "start_time": "4:32PM",
            "end_time": "5:32PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Margaret",
            "start_time": "9:30PM",
            "end_time": "10:30PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Unknown",
            "start_time": "11:01PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Deborah",
            "start_time": "9:16AM",
            "end_time": "10:01AM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "George",
            "start_time": "10:23AM",
            "end_time": "11:23AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Emily",
            "start_time": "12:15PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Mark",
            "start_time": "2:45PM",
            "end_time": "3:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Steven",
            "start_time": "3:57PM",
            "end_time": "5:42PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Margaret",
            "start_time": "9:30PM",
            "end_time": "10:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define the locations and their travel times\nlocations = {\n    \"Alamo Square\": {\"Russian Hill\": 13, \"Presidio\": 18, \"Chinatown\": 16, \"Sunset District\": 16, \"The Castro\": 8, \"Embarcadero\": 17, \"Golden Gate Park\": 9},\n    \"Russian Hill\": {\"Alamo Square\": 15, \"Presidio\": 14, \"Chinatown\": 9, \"Sunset District\": 23, \"The Castro\": 21, \"Embarcadero\": 8, \"Golden Gate Park\": 21},\n    \"Presidio\": {\"Alamo Square\": 18, \"Russian Hill\": 14, \"Chinatown\": 21, \"Sunset District\": 15, \"The Castro\": 21, \"Embarcadero\": 20, \"Golden Gate Park\": 12},\n    \"Chinatown\": {\"Alamo Square\": 17, \"Russian Hill\": 7, \"Presidio\": 19, \"Sunset District\": 29, \"The Castro\": 22, \"Embarcadero\": 5, \"Golden Gate Park\": 23},\n    \"Sunset District\": {\"Alamo Square\": 17, \"Russian Hill\": 24, \"Presidio\": 16, \"Chinatown\": 30, \"The Castro\": 17, \"Embarcadero\": 31, \"Golden Gate Park\": 11},\n    \"The Castro\": {\"Alamo Square\": 8, \"Russian Hill\": 18, \"Presidio\": 20, \"Chinatown\": 20, \"Sunset District\": 17, \"Embarcadero\": 22, \"Golden Gate Park\": 11},\n    \"Embarcadero\": {\"Alamo Square\": 19, \"Russian Hill\": 8, \"Presidio\": 20, \"Chinatown\": 7, \"Sunset District\": 30, \"The Castro\": 25, \"Golden Gate Park\": 25},\n    \"Golden Gate Park\": {\"Alamo Square\": 10, \"Russian Hill\": 19, \"Presidio\": 11, \"Chinatown\": 23, \"Sunset District\": 10, \"The Castro\": 13, \"Embarcadero\": 25}\n}\n\n# Define the meeting constraints\nmeetings = {\n    \"Emily\": {\"location\": \"Russian Hill\", \"start_time\": \"12:15PM\", \"end_time\": \"2:15PM\", \"duration\": 105},\n    \"Mark\": {\"location\": \"Presidio\", \"start_time\": \"2:45PM\", \"end_time\": \"7:30PM\", \"duration\": 60},\n    \"Deborah\": {\"location\": \"Chinatown\", \"start_time\": \"7:30AM\", \"end_time\": \"3:30PM\", \"duration\": 45},\n    \"Margaret\": {\"location\": \"Sunset District\", \"start_time\": \"9:30PM\", \"end_time\": \"10:30PM\", \"duration\": 60},\n    \"George\": {\"location\": \"The Castro\", \"start_time\": \"7:30AM\", \"end_time\": \"2:15PM\", \"duration\": 60},\n    \"Andrew\": {\"location\": \"Embarcadero\", \"start_time\": \"8:15PM\", \"end_time\": \"10:00PM\", \"duration\": 75},\n    \"Steven\": {\"location\": \"Golden Gate Park\", \"start_time\": \"11:15AM\", \"end_time\": \"9:15PM\", \"duration\": 105}\n}\n\ndef convert_time_to_minutes(time):\n    \"\"\"Convert a time string to minutes\"\"\"\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1][:2])\n    if \"PM\" in time_parts[1]:\n        hours += 12\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes):\n    \"\"\"Convert minutes to a time string\"\"\"\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\ndef calculate_schedule():\n    schedule = []\n    current_location = \"Alamo Square\"\n    current_time = convert_time_to_minutes(\"9:00AM\")\n\n    # Meet George\n    travel_time = locations[current_location][meetings[\"George\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"George\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"George\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"George\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"George\"][\"duration\"], convert_time_to_minutes(meetings[\"George\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"George\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Deborah\n    travel_time = locations[meetings[\"George\"][\"location\"]][meetings[\"Deborah\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Deborah\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Deborah\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Deborah\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Deborah\"][\"duration\"], convert_time_to_minutes(meetings[\"Deborah\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Deborah\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Emily\n    travel_time = locations[meetings[\"Deborah\"][\"location\"]][meetings[\"Emily\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Emily\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Emily\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Emily\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Emily\"][\"duration\"], convert_time_to_minutes(meetings[\"Emily\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Emily\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Steven\n    travel_time = locations[meetings[\"Emily\"][\"location\"]][meetings[\"Steven\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Steven\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Steven\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Steven\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Steven\"][\"duration\"], convert_time_to_minutes(meetings[\"Steven\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Steven\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Mark\n    travel_time = locations[meetings[\"Steven\"][\"location\"]][meetings[\"Mark\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Mark\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Mark\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Mark\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Mark\"][\"duration\"], convert_time_to_minutes(meetings[\"Mark\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Mark\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Margaret\n    travel_time = locations[meetings[\"Mark\"][\"location\"]][meetings[\"Margaret\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Margaret\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Margaret\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Margaret\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Margaret\"][\"duration\"], convert_time_to_minutes(meetings[\"Margaret\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Margaret\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n    current_time = end_time\n\n    # Meet Andrew\n    travel_time = locations[meetings[\"Margaret\"][\"location\"]][meetings[\"Andrew\"][\"location\"]]\n    current_time += travel_time\n    schedule.append({\"action\": \"travel\", \"location\": meetings[\"Andrew\"][\"location\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(current_time), \"to\": meetings[\"Andrew\"][\"location\"]})\n    start_time = max(current_time, convert_time_to_minutes(meetings[\"Andrew\"][\"start_time\"]))\n    end_time = min(start_time + meetings[\"Andrew\"][\"duration\"], convert_time_to_minutes(meetings[\"Andrew\"][\"end_time\"]))\n    schedule.append({\"action\": \"meet\", \"location\": meetings[\"Andrew\"][\"location\"], \"duration\": end_time - start_time, \"time\": convert_minutes_to_time(start_time)})\n\n    return schedule\n\nschedule = calculate_schedule()\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_612"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Linda",
            "start_time": "9:17AM",
            "end_time": "9:32AM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Anthony",
            "start_time": "9:43AM",
            "end_time": "11:28AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Nancy",
            "start_time": "11:39AM",
            "end_time": "1:39PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Unknown",
            "start_time": "1:49PM",
            "end_time": "3:49PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Unknown",
            "start_time": "3:59PM",
            "end_time": "4:29PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Margaret",
            "start_time": "4:50PM",
            "end_time": "5:35PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Helen",
            "start_time": "5:52PM",
            "end_time": "6:22PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Paul",
            "start_time": "6:27PM",
            "end_time": "7:57PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "William",
            "start_time": "8:23PM",
            "end_time": "10:23PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Unknown",
            "start_time": "10:45PM",
            "end_time": "12:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Emily",
            "start_time": "9:15AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Linda",
            "start_time": "11:26AM",
            "end_time": "11:41AM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Anthony",
            "start_time": "11:52AM",
            "end_time": "1:37PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Helen",
            "start_time": "1:54PM",
            "end_time": "2:24PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Paul",
            "start_time": "2:45PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "William",
            "start_time": "5:30PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Kimberly",
            "start_time": "7:52PM",
            "end_time": "9:07PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    emily = {\"location\": \"Pacific Heights\", \"start\": \"9:15AM\", \"end\": \"1:45PM\", \"duration\": 120}\n    helen = {\"location\": \"North Beach\", \"start\": \"1:45PM\", \"end\": \"6:45PM\", \"duration\": 30}\n    kimberly = {\"location\": \"Golden Gate Park\", \"start\": \"6:45PM\", \"end\": \"9:15PM\", \"duration\": 75}\n    james = {\"location\": \"Embarcadero\", \"start\": \"10:30AM\", \"end\": \"11:30AM\", \"duration\": 30}\n    linda = {\"location\": \"Haight-Ashbury\", \"start\": \"7:30AM\", \"end\": \"7:15PM\", \"duration\": 15}\n    paul = {\"location\": \"Fisherman's Wharf\", \"start\": \"2:45PM\", \"end\": \"6:45PM\", \"duration\": 90}\n    anthony = {\"location\": \"Mission District\", \"start\": \"8:00AM\", \"end\": \"2:45PM\", \"duration\": 105}\n    nancy = {\"location\": \"Alamo Square\", \"start\": \"8:30AM\", \"end\": \"1:45PM\", \"duration\": 120}\n    william = {\"location\": \"Bayview\", \"start\": \"5:30PM\", \"end\": \"8:30PM\", \"duration\": 120}\n    margaret = {\"location\": \"Richmond District\", \"start\": \"3:15PM\", \"end\": \"6:15PM\", \"duration\": 45}\n\n    # Travel times\n    travel_times = {\n        \"Russian Hill\": {\n            \"Pacific Heights\": 7,\n            \"North Beach\": 5,\n            \"Golden Gate Park\": 21,\n            \"Embarcadero\": 8,\n            \"Haight-Ashbury\": 17,\n            \"Fisherman's Wharf\": 7,\n            \"Mission District\": 16,\n            \"Alamo Square\": 15,\n            \"Bayview\": 23,\n            \"Richmond District\": 14\n        },\n        \"Pacific Heights\": {\n            \"Russian Hill\": 7,\n            \"North Beach\": 9,\n            \"Golden Gate Park\": 15,\n            \"Embarcadero\": 10,\n            \"Haight-Ashbury\": 11,\n            \"Fisherman's Wharf\": 13,\n            \"Mission District\": 15,\n            \"Alamo Square\": 10,\n            \"Bayview\": 22,\n            \"Richmond District\": 12\n        },\n        \"North Beach\": {\n            \"Russian Hill\": 4,\n            \"Pacific Heights\": 8,\n            \"Golden Gate Park\": 22,\n            \"Embarcadero\": 6,\n            \"Haight-Ashbury\": 18,\n            \"Fisherman's Wharf\": 5,\n            \"Mission District\": 18,\n            \"Alamo Square\": 16,\n            \"Bayview\": 25,\n            \"Richmond District\": 18\n        },\n        \"Golden Gate Park\": {\n            \"Russian Hill\": 19,\n            \"Pacific Heights\": 16,\n            \"North Beach\": 23,\n            \"Embarcadero\": 25,\n            \"Haight-Ashbury\": 7,\n            \"Fisherman's Wharf\": 24,\n            \"Mission District\": 17,\n            \"Alamo Square\": 9,\n            \"Bayview\": 23,\n            \"Richmond District\": 7\n        },\n        \"Embarcadero\": {\n            \"Russian Hill\": 8,\n            \"Pacific Heights\": 11,\n            \"North Beach\": 5,\n            \"Golden Gate Park\": 25,\n            \"Haight-Ashbury\": 21,\n            \"Fisherman's Wharf\": 6,\n            \"Mission District\": 20,\n            \"Alamo Square\": 19,\n            \"Bayview\": 21,\n            \"Richmond District\": 21\n        },\n        \"Haight-Ashbury\": {\n            \"Russian Hill\": 17,\n            \"Pacific Heights\": 12,\n            \"North Beach\": 19,\n            \"Golden Gate Park\": 7,\n            \"Embarcadero\": 20,\n            \"Fisherman's Wharf\": 23,\n            \"Mission District\": 11,\n            \"Alamo Square\": 5,\n            \"Bayview\": 18,\n            \"Richmond District\": 10\n        },\n        \"Fisherman's Wharf\": {\n            \"Russian Hill\": 7,\n            \"Pacific Heights\": 12,\n            \"North Beach\": 6,\n            \"Golden Gate Park\": 25,\n            \"Embarcadero\": 8,\n            \"Haight-Ashbury\": 22,\n            \"Mission District\": 22,\n            \"Alamo Square\": 21,\n            \"Bayview\": 26,\n            \"Richmond District\": 18\n        },\n        \"Mission District\": {\n            \"Russian Hill\": 15,\n            \"Pacific Heights\": 16,\n            \"North Beach\": 17,\n            \"Golden Gate Park\": 17,\n            \"Embarcadero\": 19,\n            \"Haight-Ashbury\": 12,\n            \"Fisherman's Wharf\": 22,\n            \"Alamo Square\": 11,\n            \"Bayview\": 14,\n            \"Richmond District\": 20\n        },\n        \"Alamo Square\": {\n            \"Russian Hill\": 13,\n            \"Pacific Heights\": 10,\n            \"North Beach\": 15,\n            \"Golden Gate Park\": 9,\n            \"Embarcadero\": 16,\n            \"Haight-Ashbury\": 5,\n            \"Fisherman's Wharf\": 19,\n            \"Mission District\": 10,\n            \"Bayview\": 16,\n            \"Richmond District\": 11\n        },\n        \"Bayview\": {\n            \"Russian Hill\": 23,\n            \"Pacific Heights\": 23,\n            \"North Beach\": 22,\n            \"Golden Gate Park\": 22,\n            \"Embarcadero\": 19,\n            \"Haight-Ashbury\": 19,\n            \"Fisherman's Wharf\": 25,\n            \"Mission District\": 13,\n            \"Alamo Square\": 16,\n            \"Richmond District\": 25\n        },\n        \"Richmond District\": {\n            \"Russian Hill\": 13,\n            \"Pacific Heights\": 10,\n            \"North Beach\": 17,\n            \"Golden Gate Park\": 9,\n            \"Embarcadero\": 19,\n            \"Haight-Ashbury\": 10,\n            \"Fisherman's Wharf\": 18,\n            \"Mission District\": 20,\n            \"Alamo Square\": 13,\n            \"Bayview\": 27\n        }\n    }\n\n    # Start at Russian Hill at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"Russian Hill\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Meet Linda at Haight-Ashbury\n    travel_duration = travel_times[current_location][\"Haight-Ashbury\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Haight-Ashbury\"})\n    current_location = \"Haight-Ashbury\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": linda[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=linda[\"duration\"])\n\n    # Meet Anthony at Mission District\n    travel_duration = travel_times[current_location][\"Mission District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Mission District\"})\n    current_location = \"Mission District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": anthony[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=anthony[\"duration\"])\n\n    # Meet Nancy at Alamo Square\n    travel_duration = travel_times[current_location][\"Alamo Square\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Alamo Square\"})\n    current_location = \"Alamo Square\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": nancy[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=nancy[\"duration\"])\n\n    # Meet Emily at Pacific Heights\n    travel_duration = travel_times[current_location][\"Pacific Heights\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Pacific Heights\"})\n    current_location = \"Pacific Heights\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": emily[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=emily[\"duration\"])\n\n    # Meet James at Embarcadero\n    travel_duration = travel_times[current_location][\"Embarcadero\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Embarcadero\"})\n    current_location = \"Embarcadero\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": james[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=james[\"duration\"])\n\n    # Meet Margaret at Richmond District\n    travel_duration = travel_times[current_location][\"Richmond District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Richmond District\"})\n    current_location = \"Richmond District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": margaret[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=margaret[\"duration\"])\n\n    # Meet Helen at North Beach\n    travel_duration = travel_times[current_location][\"North Beach\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"North Beach\"})\n    current_location = \"North Beach\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": helen[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=helen[\"duration\"])\n\n    # Meet Paul at Fisherman's Wharf\n    travel_duration = travel_times[current_location][\"Fisherman's Wharf\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Fisherman's Wharf\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Fisherman's Wharf\"})\n    current_location = \"Fisherman's Wharf\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": paul[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=paul[\"duration\"])\n\n    # Meet William at Bayview\n    travel_duration = travel_times[current_location][\"Bayview\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Bayview\"})\n    current_location = \"Bayview\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": william[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=william[\"duration\"])\n\n    # Meet Kimberly at Golden Gate Park\n    travel_duration = travel_times[current_location][\"Golden Gate Park\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    current_location = \"Golden Gate Park\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": kimberly[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=kimberly[\"duration\"])\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_901"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Helen",
            "start_time": "9:16AM",
            "end_time": "10:31AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Unknown",
            "start_time": "10:42AM",
            "end_time": "11:12AM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Joshua",
            "start_time": "11:22AM",
            "end_time": "11:37AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Joseph",
            "start_time": "11:59AM",
            "end_time": "12:14PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Karen",
            "start_time": "12:29PM",
            "end_time": "12:44PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Unknown",
            "start_time": "12:54PM",
            "end_time": "2:39PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Unknown",
            "start_time": "2:52PM",
            "end_time": "3:37PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Unknown",
            "start_time": "3:51PM",
            "end_time": "5:51PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Unknown",
            "start_time": "6:02PM",
            "end_time": "7:02PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Jeffrey",
            "start_time": "7:11PM",
            "end_time": "8:11PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Joshua",
            "start_time": "9:16AM",
            "end_time": "9:31AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Anthony",
            "start_time": "9:41AM",
            "end_time": "10:11AM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Helen",
            "start_time": "10:23AM",
            "end_time": "11:38AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Joseph",
            "start_time": "11:51AM",
            "end_time": "12:06PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "William",
            "start_time": "3:15PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "David",
            "start_time": "4:45PM",
            "end_time": "5:30PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Karen",
            "start_time": "5:48PM",
            "end_time": "6:03PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Brian",
            "start_time": "6:13PM",
            "end_time": "7:58PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Jeffrey",
            "start_time": "8:23PM",
            "end_time": "9:23PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    william = {\"location\": \"Alamo Square\", \"start\": \"3:15PM\", \"end\": \"5:15PM\", \"duration\": 60}\n    joshua = {\"location\": \"Richmond District\", \"start\": \"7:00AM\", \"end\": \"8:00PM\", \"duration\": 15}\n    joseph = {\"location\": \"Financial District\", \"start\": \"11:15AM\", \"end\": \"1:30PM\", \"duration\": 15}\n    david = {\"location\": \"Union Square\", \"start\": \"4:45PM\", \"end\": \"7:15PM\", \"duration\": 45}\n    brian = {\"location\": \"Fisherman's Wharf\", \"start\": \"1:45PM\", \"end\": \"8:45PM\", \"duration\": 105}\n    karen = {\"location\": \"Marina District\", \"start\": \"11:30AM\", \"end\": \"6:30PM\", \"duration\": 15}\n    anthony = {\"location\": \"Haight-Ashbury\", \"start\": \"7:15AM\", \"end\": \"10:30AM\", \"duration\": 30}\n    matthew = {\"location\": \"Mission District\", \"start\": \"5:15PM\", \"end\": \"7:15PM\", \"duration\": 120}\n    helen = {\"location\": \"Pacific Heights\", \"start\": \"8:00AM\", \"end\": \"12:00PM\", \"duration\": 75}\n    jeffrey = {\"location\": \"Golden Gate Park\", \"start\": \"7:00PM\", \"end\": \"9:30PM\", \"duration\": 60}\n\n    # Travel times\n    travel_times = {\n        \"The Castro\": {\n            \"Alamo Square\": 8,\n            \"Richmond District\": 16,\n            \"Financial District\": 21,\n            \"Union Square\": 19,\n            \"Fisherman's Wharf\": 24,\n            \"Marina District\": 21,\n            \"Haight-Ashbury\": 6,\n            \"Mission District\": 7,\n            \"Pacific Heights\": 16,\n            \"Golden Gate Park\": 11\n        },\n        \"Alamo Square\": {\n            \"The Castro\": 8,\n            \"Richmond District\": 11,\n            \"Financial District\": 17,\n            \"Union Square\": 14,\n            \"Fisherman's Wharf\": 19,\n            \"Marina District\": 15,\n            \"Haight-Ashbury\": 5,\n            \"Mission District\": 10,\n            \"Pacific Heights\": 10,\n            \"Golden Gate Park\": 9\n        },\n        \"Richmond District\": {\n            \"The Castro\": 16,\n            \"Alamo Square\": 13,\n            \"Financial District\": 22,\n            \"Union Square\": 21,\n            \"Fisherman's Wharf\": 18,\n            \"Marina District\": 9,\n            \"Haight-Ashbury\": 10,\n            \"Mission District\": 20,\n            \"Pacific Heights\": 10,\n            \"Golden Gate Park\": 9\n        },\n        \"Financial District\": {\n            \"The Castro\": 20,\n            \"Alamo Square\": 17,\n            \"Richmond District\": 21,\n            \"Union Square\": 9,\n            \"Fisherman's Wharf\": 10,\n            \"Marina District\": 15,\n            \"Haight-Ashbury\": 19,\n            \"Mission District\": 17,\n            \"Pacific Heights\": 13,\n            \"Golden Gate Park\": 23\n        },\n        \"Union Square\": {\n            \"The Castro\": 17,\n            \"Alamo Square\": 15,\n            \"Richmond District\": 20,\n            \"Financial District\": 9,\n            \"Fisherman's Wharf\": 15,\n            \"Marina District\": 18,\n            \"Haight-Ashbury\": 18,\n            \"Mission District\": 14,\n            \"Pacific Heights\": 15,\n            \"Golden Gate Park\": 22\n        },\n        \"Fisherman's Wharf\": {\n            \"The Castro\": 27,\n            \"Alamo Square\": 21,\n            \"Richmond District\": 18,\n            \"Financial District\": 11,\n            \"Union Square\": 13,\n            \"Marina District\": 9,\n            \"Haight-Ashbury\": 22,\n            \"Mission District\": 22,\n            \"Pacific Heights\": 12,\n            \"Golden Gate Park\": 25\n        },\n        \"Marina District\": {\n            \"The Castro\": 22,\n            \"Alamo Square\": 15,\n            \"Richmond District\": 11,\n            \"Financial District\": 17,\n            \"Union Square\": 16,\n            \"Fisherman's Wharf\": 10,\n            \"Haight-Ashbury\": 16,\n            \"Mission District\": 20,\n            \"Pacific Heights\": 7,\n            \"Golden Gate Park\": 18\n        },\n        \"Haight-Ashbury\": {\n            \"The Castro\": 6,\n            \"Alamo Square\": 5,\n            \"Richmond District\": 10,\n            \"Financial District\": 21,\n            \"Union Square\": 19,\n            \"Fisherman's Wharf\": 23,\n            \"Marina District\": 17,\n            \"Mission District\": 11,\n            \"Pacific Heights\": 12,\n            \"Golden Gate Park\": 7\n        },\n        \"Mission District\": {\n            \"The Castro\": 7,\n            \"Alamo Square\": 11,\n            \"Richmond District\": 20,\n            \"Financial District\": 15,\n            \"Union Square\": 15,\n            \"Fisherman's Wharf\": 22,\n            \"Marina District\": 19,\n            \"Haight-Ashbury\": 12,\n            \"Pacific Heights\": 16,\n            \"Golden Gate Park\": 17\n        },\n        \"Pacific Heights\": {\n            \"The Castro\": 16,\n            \"Alamo Square\": 10,\n            \"Richmond District\": 12,\n            \"Financial District\": 13,\n            \"Union Square\": 12,\n            \"Fisherman's Wharf\": 13,\n            \"Marina District\": 6,\n            \"Haight-Ashbury\": 11,\n            \"Mission District\": 15,\n            \"Golden Gate Park\": 15\n        },\n        \"Golden Gate Park\": {\n            \"The Castro\": 13,\n            \"Alamo Square\": 9,\n            \"Richmond District\": 7,\n            \"Financial District\": 26,\n            \"Union Square\": 22,\n            \"Fisherman's Wharf\": 24,\n            \"Marina District\": 16,\n            \"Haight-Ashbury\": 7,\n            \"Mission District\": 17,\n            \"Pacific Heights\": 16\n        }\n    }\n\n    # Start at The Castro at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"The Castro\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Meet Helen at Pacific Heights\n    travel_duration = travel_times[current_location][\"Pacific Heights\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Pacific Heights\"})\n    current_location = \"Pacific Heights\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": helen[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=helen[\"duration\"])\n\n    # Meet Anthony at Haight-Ashbury\n    travel_duration = travel_times[current_location][\"Haight-Ashbury\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Haight-Ashbury\"})\n    current_location = \"Haight-Ashbury\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": anthony[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=anthony[\"duration\"])\n\n    # Meet Joshua at Richmond District\n    travel_duration = travel_times[current_location][\"Richmond District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Richmond District\"})\n    current_location = \"Richmond District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": joshua[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=joshua[\"duration\"])\n\n    # Meet Joseph at Financial District\n    travel_duration = travel_times[current_location][\"Financial District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Financial District\"})\n    current_location = \"Financial District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": joseph[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=joseph[\"duration\"])\n\n    # Meet Karen at Marina District\n    travel_duration = travel_times[current_location][\"Marina District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Marina District\"})\n    current_location = \"Marina District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": karen[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=karen[\"duration\"])\n\n    # Meet Brian at Fisherman's Wharf\n    travel_duration = travel_times[current_location][\"Fisherman's Wharf\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Fisherman's Wharf\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Fisherman's Wharf\"})\n    current_location = \"Fisherman's Wharf\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": brian[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=brian[\"duration\"])\n\n    # Meet David at Union Square\n    travel_duration = travel_times[current_location][\"Union Square\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Union Square\"})\n    current_location = \"Union Square\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": david[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=david[\"duration\"])\n\n    # Meet Matthew at Mission District\n    travel_duration = travel_times[current_location][\"Mission District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Mission District\"})\n    current_location = \"Mission District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": matthew[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=matthew[\"duration\"])\n\n    # Meet William at Alamo Square\n    travel_duration = travel_times[current_location][\"Alamo Square\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Alamo Square\"})\n    current_location = \"Alamo Square\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": william[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=william[\"duration\"])\n\n    # Meet Jeffrey at Golden Gate Park\n    travel_duration = travel_times[current_location][\"Golden Gate Park\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    current_location = \"Golden Gate Park\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": jeffrey[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=jeffrey[\"duration\"])\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_956"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Barbara",
            "start_time": "9:07AM",
            "end_time": "10:07AM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Barbara",
            "start_time": "9:07AM",
            "end_time": "10:07AM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    barbara = {\"location\": \"Pacific Heights\", \"start\": \"7:15AM\", \"end\": \"10:00PM\", \"duration\": 60}\n\n    # Travel times\n    travel_times = {\n        \"Russian Hill\": {\n            \"Pacific Heights\": 7\n        },\n        \"Pacific Heights\": {\n            \"Russian Hill\": 7\n        }\n    }\n\n    # Start at Russian Hill at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"Russian Hill\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Meet Barbara at Pacific Heights\n    travel_duration = travel_times[current_location][\"Pacific Heights\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Pacific Heights\"})\n    current_location = \"Pacific Heights\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": barbara[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=barbara[\"duration\"])\n\n    # Return to Russian Hill\n    travel_duration = travel_times[current_location][\"Russian Hill\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Russian Hill\"})\n    current_location = \"Russian Hill\"\n    schedule.append({\"action\": \"wait\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_73"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Unknown",
            "start_time": "9:15AM",
            "end_time": "10:00AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Deborah",
            "start_time": "10:23AM",
            "end_time": "10:53AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Matthew",
            "start_time": "11:20AM",
            "end_time": "12:05PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Unknown",
            "start_time": "12:22PM",
            "end_time": "12:52PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Unknown",
            "start_time": "1:01PM",
            "end_time": "3:01PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Unknown",
            "start_time": "3:28PM",
            "end_time": "4:28PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Unknown",
            "start_time": "4:45PM",
            "end_time": "6:45PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Elizabeth",
            "start_time": "6:55PM",
            "end_time": "8:55PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Steven",
            "start_time": "9:02PM",
            "end_time": "10:47PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Helen",
            "start_time": "9:30AM",
            "end_time": "10:15AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Deborah",
            "start_time": "10:38AM",
            "end_time": "11:08AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Matthew",
            "start_time": "11:35AM",
            "end_time": "12:20PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Rebecca",
            "start_time": "2:45PM",
            "end_time": "3:15PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Joseph",
            "start_time": "3:24PM",
            "end_time": "5:24PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Ronald",
            "start_time": "5:51PM",
            "end_time": "6:51PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Steven",
            "start_time": "8:15PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    helen = {\"location\": \"Golden Gate Park\", \"start\": \"9:30AM\", \"end\": \"12:15PM\", \"duration\": 45}\n    steven = {\"location\": \"The Castro\", \"start\": \"8:15PM\", \"end\": \"10:00PM\", \"duration\": 105}\n    deborah = {\"location\": \"Bayview\", \"start\": \"8:30AM\", \"end\": \"12:00PM\", \"duration\": 30}\n    matthew = {\"location\": \"Marina District\", \"start\": \"9:15AM\", \"end\": \"2:15PM\", \"duration\": 45}\n    joseph = {\"location\": \"Union Square\", \"start\": \"2:15PM\", \"end\": \"6:45PM\", \"duration\": 120}\n    ronald = {\"location\": \"Sunset District\", \"start\": \"4:00PM\", \"end\": \"8:45PM\", \"duration\": 60}\n    robert = {\"location\": \"Alamo Square\", \"start\": \"6:30PM\", \"end\": \"9:15PM\", \"duration\": 120}\n    rebecca = {\"location\": \"Financial District\", \"start\": \"2:45PM\", \"end\": \"4:15PM\", \"duration\": 30}\n    elizabeth = {\"location\": \"Mission District\", \"start\": \"6:30PM\", \"end\": \"9:00PM\", \"duration\": 120}\n\n    # Travel times\n    travel_times = {\n        \"Pacific Heights\": {\n            \"Golden Gate Park\": 15,\n            \"The Castro\": 16,\n            \"Bayview\": 22,\n            \"Marina District\": 6,\n            \"Union Square\": 12,\n            \"Sunset District\": 21,\n            \"Alamo Square\": 10,\n            \"Financial District\": 13,\n            \"Mission District\": 15\n        },\n        \"Golden Gate Park\": {\n            \"Pacific Heights\": 16,\n            \"The Castro\": 13,\n            \"Bayview\": 23,\n            \"Marina District\": 16,\n            \"Union Square\": 22,\n            \"Sunset District\": 10,\n            \"Alamo Square\": 9,\n            \"Financial District\": 26,\n            \"Mission District\": 17\n        },\n        \"The Castro\": {\n            \"Pacific Heights\": 16,\n            \"Golden Gate Park\": 11,\n            \"Bayview\": 19,\n            \"Marina District\": 21,\n            \"Union Square\": 19,\n            \"Sunset District\": 17,\n            \"Alamo Square\": 8,\n            \"Financial District\": 21,\n            \"Mission District\": 7\n        },\n        \"Bayview\": {\n            \"Pacific Heights\": 23,\n            \"Golden Gate Park\": 22,\n            \"The Castro\": 19,\n            \"Marina District\": 27,\n            \"Union Square\": 18,\n            \"Sunset District\": 23,\n            \"Alamo Square\": 16,\n            \"Financial District\": 19,\n            \"Mission District\": 13\n        },\n        \"Marina District\": {\n            \"Pacific Heights\": 7,\n            \"Golden Gate Park\": 18,\n            \"The Castro\": 22,\n            \"Bayview\": 27,\n            \"Union Square\": 16,\n            \"Sunset District\": 19,\n            \"Alamo Square\": 15,\n            \"Financial District\": 17,\n            \"Mission District\": 20\n        },\n        \"Union Square\": {\n            \"Pacific Heights\": 15,\n            \"Golden Gate Park\": 22,\n            \"The Castro\": 17,\n            \"Bayview\": 15,\n            \"Marina District\": 18,\n            \"Sunset District\": 27,\n            \"Alamo Square\": 15,\n            \"Financial District\": 9,\n            \"Mission District\": 14\n        },\n        \"Sunset District\": {\n            \"Pacific Heights\": 21,\n            \"Golden Gate Park\": 11,\n            \"The Castro\": 17,\n            \"Bayview\": 22,\n            \"Marina District\": 21,\n            \"Union Square\": 30,\n            \"Alamo Square\": 17,\n            \"Financial District\": 30,\n            \"Mission District\": 25\n        },\n        \"Alamo Square\": {\n            \"Pacific Heights\": 10,\n            \"Golden Gate Park\": 9,\n            \"The Castro\": 8,\n            \"Bayview\": 16,\n            \"Marina District\": 15,\n            \"Union Square\": 14,\n            \"Sunset District\": 16,\n            \"Financial District\": 17,\n            \"Mission District\": 10\n        },\n        \"Financial District\": {\n            \"Pacific Heights\": 13,\n            \"Golden Gate Park\": 23,\n            \"The Castro\": 20,\n            \"Bayview\": 19,\n            \"Marina District\": 15,\n            \"Union Square\": 9,\n            \"Sunset District\": 30,\n            \"Alamo Square\": 17,\n            \"Mission District\": 17\n        },\n        \"Mission District\": {\n            \"Pacific Heights\": 16,\n            \"Golden Gate Park\": 17,\n            \"The Castro\": 7,\n            \"Bayview\": 14,\n            \"Marina District\": 19,\n            \"Union Square\": 15,\n            \"Sunset District\": 24,\n            \"Alamo Square\": 11,\n            \"Financial District\": 15\n        }\n    }\n\n    # Start at Pacific Heights at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"Pacific Heights\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Meet Helen at Golden Gate Park\n    travel_duration = travel_times[current_location][\"Golden Gate Park\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    current_location = \"Golden Gate Park\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": helen[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=helen[\"duration\"])\n\n    # Meet Deborah at Bayview\n    travel_duration = travel_times[current_location][\"Bayview\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Bayview\"})\n    current_location = \"Bayview\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": deborah[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=deborah[\"duration\"])\n\n    # Meet Matthew at Marina District\n    travel_duration = travel_times[current_location][\"Marina District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Marina District\"})\n    current_location = \"Marina District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": matthew[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=matthew[\"duration\"])\n\n    # Meet Rebecca at Financial District\n    travel_duration = travel_times[current_location][\"Financial District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Financial District\"})\n    current_location = \"Financial District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": rebecca[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=rebecca[\"duration\"])\n\n    # Meet Joseph at Union Square\n    travel_duration = travel_times[current_location][\"Union Square\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Union Square\"})\n    current_location = \"Union Square\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": joseph[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=joseph[\"duration\"])\n\n    # Meet Ronald at Sunset District\n    travel_duration = travel_times[current_location][\"Sunset District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Sunset District\"})\n    current_location = \"Sunset District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": ronald[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=ronald[\"duration\"])\n\n    # Meet Robert at Alamo Square\n    travel_duration = travel_times[current_location][\"Alamo Square\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Alamo Square\"})\n    current_location = \"Alamo Square\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": robert[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=robert[\"duration\"])\n\n    # Meet Elizabeth at Mission District\n    travel_duration = travel_times[current_location][\"Mission District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Mission District\"})\n    current_location = \"Mission District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": elizabeth[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=elizabeth[\"duration\"])\n\n    # Meet Steven at The Castro\n    travel_duration = travel_times[current_location][\"The Castro\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"The Castro\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"The Castro\"})\n    current_location = \"The Castro\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": steven[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=steven[\"duration\"])\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_835"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Richard",
            "start_time": "9:12AM",
            "end_time": "10:27AM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Stephanie",
            "start_time": "10:42AM",
            "end_time": "12:12PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Unknown",
            "start_time": "12:27PM",
            "end_time": "12:42PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Brian",
            "start_time": "1:05PM",
            "end_time": "3:05PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Jason",
            "start_time": "3:12PM",
            "end_time": "4:12PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Stephanie",
            "start_time": "9:11AM",
            "end_time": "10:41AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Sandra",
            "start_time": "1:00PM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Brian",
            "start_time": "1:38PM",
            "end_time": "3:38PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Jason",
            "start_time": "3:45PM",
            "end_time": "4:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    stephanie = {\"location\": \"Mission District\", \"start\": \"8:15AM\", \"end\": \"1:45PM\", \"duration\": 90}\n    sandra = {\"location\": \"Bayview\", \"start\": \"1:00PM\", \"end\": \"7:30PM\", \"duration\": 15}\n    richard = {\"location\": \"Pacific Heights\", \"start\": \"7:15AM\", \"end\": \"10:15AM\", \"duration\": 75}\n    brian = {\"location\": \"Russian Hill\", \"start\": \"12:15PM\", \"end\": \"4:00PM\", \"duration\": 120}\n    jason = {\"location\": \"Fisherman's Wharf\", \"start\": \"8:30AM\", \"end\": \"5:45PM\", \"duration\": 60}\n\n    # Travel times\n    travel_times = {\n        \"Haight-Ashbury\": {\n            \"Mission District\": 11,\n            \"Bayview\": 18,\n            \"Pacific Heights\": 12,\n            \"Russian Hill\": 17,\n            \"Fisherman's Wharf\": 23\n        },\n        \"Mission District\": {\n            \"Haight-Ashbury\": 12,\n            \"Bayview\": 15,\n            \"Pacific Heights\": 16,\n            \"Russian Hill\": 15,\n            \"Fisherman's Wharf\": 22\n        },\n        \"Bayview\": {\n            \"Haight-Ashbury\": 19,\n            \"Mission District\": 13,\n            \"Pacific Heights\": 23,\n            \"Russian Hill\": 23,\n            \"Fisherman's Wharf\": 25\n        },\n        \"Pacific Heights\": {\n            \"Haight-Ashbury\": 11,\n            \"Mission District\": 15,\n            \"Bayview\": 22,\n            \"Russian Hill\": 7,\n            \"Fisherman's Wharf\": 13\n        },\n        \"Russian Hill\": {\n            \"Haight-Ashbury\": 17,\n            \"Mission District\": 16,\n            \"Bayview\": 23,\n            \"Pacific Heights\": 7,\n            \"Fisherman's Wharf\": 7\n        },\n        \"Fisherman's Wharf\": {\n            \"Haight-Ashbury\": 22,\n            \"Mission District\": 22,\n            \"Bayview\": 26,\n            \"Pacific Heights\": 12,\n            \"Russian Hill\": 7\n        }\n    }\n\n    # Start at Haight-Ashbury at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"Haight-Ashbury\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Meet Richard at Pacific Heights\n    travel_duration = travel_times[current_location][\"Pacific Heights\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Pacific Heights\"})\n    current_location = \"Pacific Heights\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": richard[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=richard[\"duration\"])\n\n    # Meet Stephanie at Mission District\n    travel_duration = travel_times[current_location][\"Mission District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Mission District\"})\n    current_location = \"Mission District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": stephanie[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=stephanie[\"duration\"])\n\n    # Meet Sandra at Bayview\n    travel_duration = travel_times[current_location][\"Bayview\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Bayview\"})\n    current_location = \"Bayview\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": sandra[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=sandra[\"duration\"])\n\n    # Meet Brian at Russian Hill\n    travel_duration = travel_times[current_location][\"Russian Hill\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Russian Hill\"})\n    current_location = \"Russian Hill\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": brian[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=brian[\"duration\"])\n\n    # Meet Jason at Fisherman's Wharf\n    travel_duration = travel_times[current_location][\"Fisherman's Wharf\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Fisherman's Wharf\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Fisherman's Wharf\"})\n    current_location = \"Fisherman's Wharf\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": jason[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=jason[\"duration\"])\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_482"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Rebecca",
            "start_time": "9:10AM",
            "end_time": "9:40AM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Unknown",
            "start_time": "9:52AM",
            "end_time": "10:52AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Stephanie",
            "start_time": "11:07AM",
            "end_time": "12:52PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Unknown",
            "start_time": "1:15PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Unknown",
            "start_time": "1:37PM",
            "end_time": "2:07PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Unknown",
            "start_time": "2:17PM",
            "end_time": "4:17PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Rebecca",
            "start_time": "9:10AM",
            "end_time": "9:40AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Stephanie",
            "start_time": "11:00AM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Karen",
            "start_time": "1:45PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Brian",
            "start_time": "3:00PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Steven",
            "start_time": "3:40PM",
            "end_time": "5:40PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    stephanie = {\"location\": \"Golden Gate Park\", \"start\": \"11:00AM\", \"end\": \"3:00PM\", \"duration\": 105}\n    karen = {\"location\": \"Chinatown\", \"start\": \"1:45PM\", \"end\": \"4:30PM\", \"duration\": 15}\n    brian = {\"location\": \"Union Square\", \"start\": \"3:00PM\", \"end\": \"5:15PM\", \"duration\": 30}\n    rebecca = {\"location\": \"Fisherman's Wharf\", \"start\": \"8:00AM\", \"end\": \"11:15AM\", \"duration\": 30}\n    joseph = {\"location\": \"Pacific Heights\", \"start\": \"8:15AM\", \"end\": \"9:30AM\", \"duration\": 60}\n    steven = {\"location\": \"North Beach\", \"start\": \"2:30PM\", \"end\": \"8:45PM\", \"duration\": 120}\n\n    # Travel times\n    travel_times = {\n        \"Financial District\": {\n            \"Golden Gate Park\": 23,\n            \"Chinatown\": 5,\n            \"Union Square\": 9,\n            \"Fisherman's Wharf\": 10,\n            \"Pacific Heights\": 13,\n            \"North Beach\": 7\n        },\n        \"Golden Gate Park\": {\n            \"Financial District\": 26,\n            \"Chinatown\": 23,\n            \"Union Square\": 22,\n            \"Fisherman's Wharf\": 24,\n            \"Pacific Heights\": 16,\n            \"North Beach\": 24\n        },\n        \"Chinatown\": {\n            \"Financial District\": 5,\n            \"Golden Gate Park\": 23,\n            \"Union Square\": 7,\n            \"Fisherman's Wharf\": 8,\n            \"Pacific Heights\": 10,\n            \"North Beach\": 3\n        },\n        \"Union Square\": {\n            \"Financial District\": 9,\n            \"Golden Gate Park\": 22,\n            \"Chinatown\": 7,\n            \"Fisherman's Wharf\": 15,\n            \"Pacific Heights\": 15,\n            \"North Beach\": 10\n        },\n        \"Fisherman's Wharf\": {\n            \"Financial District\": 11,\n            \"Golden Gate Park\": 25,\n            \"Chinatown\": 12,\n            \"Union Square\": 13,\n            \"Pacific Heights\": 12,\n            \"North Beach\": 6\n        },\n        \"Pacific Heights\": {\n            \"Financial District\": 13,\n            \"Golden Gate Park\": 15,\n            \"Chinatown\": 11,\n            \"Union Square\": 12,\n            \"Fisherman's Wharf\": 13,\n            \"North Beach\": 9\n        },\n        \"North Beach\": {\n            \"Financial District\": 8,\n            \"Golden Gate Park\": 22,\n            \"Chinatown\": 6,\n            \"Union Square\": 7,\n            \"Fisherman's Wharf\": 5,\n            \"Pacific Heights\": 8\n        }\n    }\n\n    # Start at Financial District at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"Financial District\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Meet Rebecca at Fisherman's Wharf\n    travel_duration = travel_times[current_location][\"Fisherman's Wharf\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Fisherman's Wharf\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Fisherman's Wharf\"})\n    current_location = \"Fisherman's Wharf\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": rebecca[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=rebecca[\"duration\"])\n\n    # Meet Joseph at Pacific Heights\n    travel_duration = travel_times[current_location][\"Pacific Heights\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Pacific Heights\"})\n    current_location = \"Pacific Heights\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": joseph[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=joseph[\"duration\"])\n\n    # Meet Stephanie at Golden Gate Park\n    travel_duration = travel_times[current_location][\"Golden Gate Park\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    current_location = \"Golden Gate Park\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": stephanie[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=stephanie[\"duration\"])\n\n    # Meet Karen at Chinatown\n    travel_duration = travel_times[current_location][\"Chinatown\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Chinatown\"})\n    current_location = \"Chinatown\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": karen[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=karen[\"duration\"])\n\n    # Meet Brian at Union Square\n    travel_duration = travel_times[current_location][\"Union Square\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Union Square\"})\n    current_location = \"Union Square\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": brian[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=brian[\"duration\"])\n\n    # Meet Steven at North Beach\n    travel_duration = travel_times[current_location][\"North Beach\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"North Beach\"})\n    current_location = \"North Beach\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": steven[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=steven[\"duration\"])\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_502"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Unknown",
            "start_time": "9:30AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Unknown",
            "start_time": "11:00AM",
            "end_time": "12:15PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Unknown",
            "start_time": "12:30PM",
            "end_time": "1:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Sarah",
            "start_time": "4:00PM",
            "end_time": "5:00PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Jeffrey",
            "start_time": "5:07PM",
            "end_time": "6:22PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    sarah = {\"location\": \"North Beach\", \"start\": \"4:00PM\", \"end\": \"6:15PM\", \"duration\": 60}\n    jeffrey = {\"location\": \"Union Square\", \"start\": \"3:00PM\", \"end\": \"10:00PM\", \"duration\": 75}\n    brian = {\"location\": \"Alamo Square\", \"start\": \"4:00PM\", \"end\": \"5:30PM\", \"duration\": 75}\n\n    # Travel times\n    travel_times = {\n        \"Sunset District\": {\n            \"North Beach\": 29,\n            \"Union Square\": 30,\n            \"Alamo Square\": 17\n        },\n        \"North Beach\": {\n            \"Sunset District\": 27,\n            \"Union Square\": 7,\n            \"Alamo Square\": 16\n        },\n        \"Union Square\": {\n            \"Sunset District\": 26,\n            \"North Beach\": 10,\n            \"Alamo Square\": 15\n        },\n        \"Alamo Square\": {\n            \"Sunset District\": 16,\n            \"North Beach\": 15,\n            \"Union Square\": 14\n        }\n    }\n\n    # Start at Sunset District at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"Sunset District\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Meet Jeffrey at Union Square\n    travel_duration = travel_times[current_location][\"Union Square\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Union Square\"})\n    current_location = \"Union Square\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": jeffrey[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=jeffrey[\"duration\"])\n\n    # Meet Brian at Alamo Square\n    travel_duration = travel_times[current_location][\"Alamo Square\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Alamo Square\"})\n    current_location = \"Alamo Square\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": brian[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=brian[\"duration\"])\n\n    # Meet Sarah at North Beach\n    travel_duration = travel_times[current_location][\"North Beach\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"North Beach\"})\n    current_location = \"North Beach\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": sarah[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=sarah[\"duration\"])\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_225"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Daniel",
            "start_time": "9:11AM",
            "end_time": "9:26AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Margaret",
            "start_time": "9:45AM",
            "end_time": "10:15AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Unknown",
            "start_time": "10:30AM",
            "end_time": "12:00PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Unknown",
            "start_time": "12:10PM",
            "end_time": "1:40PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Margaret",
            "start_time": "9:24AM",
            "end_time": "9:54AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Daniel",
            "start_time": "10:15AM",
            "end_time": "10:30AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Charles",
            "start_time": "6:00PM",
            "end_time": "7:30PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Stephanie",
            "start_time": "8:30PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    charles = {\"location\": \"Alamo Square\", \"start\": \"6:00PM\", \"end\": \"8:45PM\", \"duration\": 90}\n    margaret = {\"location\": \"Russian Hill\", \"start\": \"9:00AM\", \"end\": \"4:00PM\", \"duration\": 30}\n    daniel = {\"location\": \"Golden Gate Park\", \"start\": \"8:00AM\", \"end\": \"1:30PM\", \"duration\": 15}\n    stephanie = {\"location\": \"Mission District\", \"start\": \"8:30PM\", \"end\": \"10:00PM\", \"duration\": 90}\n\n    # Travel times\n    travel_times = {\n        \"Sunset District\": {\n            \"Alamo Square\": 17,\n            \"Russian Hill\": 24,\n            \"Golden Gate Park\": 11,\n            \"Mission District\": 24\n        },\n        \"Alamo Square\": {\n            \"Sunset District\": 16,\n            \"Russian Hill\": 13,\n            \"Golden Gate Park\": 9,\n            \"Mission District\": 10\n        },\n        \"Russian Hill\": {\n            \"Sunset District\": 23,\n            \"Alamo Square\": 15,\n            \"Golden Gate Park\": 21,\n            \"Mission District\": 16\n        },\n        \"Golden Gate Park\": {\n            \"Sunset District\": 10,\n            \"Alamo Square\": 10,\n            \"Russian Hill\": 19,\n            \"Mission District\": 17\n        },\n        \"Mission District\": {\n            \"Sunset District\": 24,\n            \"Alamo Square\": 11,\n            \"Russian Hill\": 15,\n            \"Golden Gate Park\": 17\n        }\n    }\n\n    # Start at Sunset District at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"Sunset District\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Meet Daniel at Golden Gate Park\n    travel_duration = travel_times[current_location][\"Golden Gate Park\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    current_location = \"Golden Gate Park\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": daniel[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=daniel[\"duration\"])\n\n    # Meet Margaret at Russian Hill\n    travel_duration = travel_times[current_location][\"Russian Hill\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Russian Hill\"})\n    current_location = \"Russian Hill\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": margaret[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=margaret[\"duration\"])\n\n    # Meet Charles at Alamo Square\n    travel_duration = travel_times[current_location][\"Alamo Square\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Alamo Square\"})\n    current_location = \"Alamo Square\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": charles[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=charles[\"duration\"])\n\n    # Meet Stephanie at Mission District\n    travel_duration = travel_times[current_location][\"Mission District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Mission District\"})\n    current_location = \"Mission District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": stephanie[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=stephanie[\"duration\"])\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_372"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Daniel",
            "start_time": "9:12AM",
            "end_time": "9:27AM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Unknown",
            "start_time": "9:41AM",
            "end_time": "10:11AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Unknown",
            "start_time": "10:31AM",
            "end_time": "11:01AM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Unknown",
            "start_time": "11:11AM",
            "end_time": "12:41PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Unknown",
            "start_time": "12:47PM",
            "end_time": "2:17PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Unknown",
            "start_time": "2:35PM",
            "end_time": "3:35PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Unknown",
            "start_time": "3:46PM",
            "end_time": "4:31PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Unknown",
            "start_time": "4:52PM",
            "end_time": "6:52PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Daniel",
            "start_time": "9:12AM",
            "end_time": "9:27AM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Timothy",
            "start_time": "12:00PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Kevin",
            "start_time": "1:41PM",
            "end_time": "2:11PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Betty",
            "start_time": "2:31PM",
            "end_time": "3:01PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Steven",
            "start_time": "4:30PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Lisa",
            "start_time": "7:15PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    lisa = {\"location\": \"The Castro\", \"start\": \"7:15PM\", \"end\": \"9:15PM\", \"duration\": 120}\n    daniel = {\"location\": \"Nob Hill\", \"start\": \"8:15AM\", \"end\": \"11:00AM\", \"duration\": 15}\n    elizabeth = {\"location\": \"Presidio\", \"start\": \"9:15PM\", \"end\": \"10:15PM\", \"duration\": 45}\n    steven = {\"location\": \"Marina District\", \"start\": \"4:30PM\", \"end\": \"8:45PM\", \"duration\": 90}\n    timothy = {\"location\": \"Pacific Heights\", \"start\": \"12:00PM\", \"end\": \"6:00PM\", \"duration\": 90}\n    ashley = {\"location\": \"Golden Gate Park\", \"start\": \"8:45PM\", \"end\": \"9:45PM\", \"duration\": 60}\n    kevin = {\"location\": \"Chinatown\", \"start\": \"12:00PM\", \"end\": \"7:00PM\", \"duration\": 30}\n    betty = {\"location\": \"Richmond District\", \"start\": \"1:15PM\", \"end\": \"3:45PM\", \"duration\": 30}\n\n    # Travel times\n    travel_times = {\n        \"Mission District\": {\n            \"The Castro\": 7,\n            \"Nob Hill\": 12,\n            \"Presidio\": 25,\n            \"Marina District\": 19,\n            \"Pacific Heights\": 16,\n            \"Golden Gate Park\": 17,\n            \"Chinatown\": 16,\n            \"Richmond District\": 20\n        },\n        \"The Castro\": {\n            \"Mission District\": 7,\n            \"Nob Hill\": 16,\n            \"Presidio\": 20,\n            \"Marina District\": 21,\n            \"Pacific Heights\": 16,\n            \"Golden Gate Park\": 11,\n            \"Chinatown\": 22,\n            \"Richmond District\": 16\n        },\n        \"Nob Hill\": {\n            \"Mission District\": 13,\n            \"The Castro\": 17,\n            \"Presidio\": 17,\n            \"Marina District\": 11,\n            \"Pacific Heights\": 8,\n            \"Golden Gate Park\": 17,\n            \"Chinatown\": 6,\n            \"Richmond District\": 14\n        },\n        \"Presidio\": {\n            \"Mission District\": 26,\n            \"The Castro\": 21,\n            \"Nob Hill\": 18,\n            \"Marina District\": 11,\n            \"Pacific Heights\": 11,\n            \"Golden Gate Park\": 12,\n            \"Chinatown\": 21,\n            \"Richmond District\": 7\n        },\n        \"Marina District\": {\n            \"Mission District\": 20,\n            \"The Castro\": 22,\n            \"Nob Hill\": 12,\n            \"Presidio\": 10,\n            \"Pacific Heights\": 7,\n            \"Golden Gate Park\": 18,\n            \"Chinatown\": 15,\n            \"Richmond District\": 11\n        },\n        \"Pacific Heights\": {\n            \"Mission District\": 15,\n            \"The Castro\": 16,\n            \"Nob Hill\": 8,\n            \"Presidio\": 11,\n            \"Marina District\": 6,\n            \"Golden Gate Park\": 15,\n            \"Chinatown\": 11,\n            \"Richmond District\": 12\n        },\n        \"Golden Gate Park\": {\n            \"Mission District\": 17,\n            \"The Castro\": 13,\n            \"Nob Hill\": 20,\n            \"Presidio\": 11,\n            \"Marina District\": 16,\n            \"Pacific Heights\": 16,\n            \"Chinatown\": 23,\n            \"Richmond District\": 7\n        },\n        \"Chinatown\": {\n            \"Mission District\": 17,\n            \"The Castro\": 22,\n            \"Nob Hill\": 9,\n            \"Presidio\": 19,\n            \"Marina District\": 12,\n            \"Pacific Heights\": 10,\n            \"Golden Gate Park\": 23,\n            \"Richmond District\": 20\n        },\n        \"Richmond District\": {\n            \"Mission District\": 20,\n            \"The Castro\": 16,\n            \"Nob Hill\": 17,\n            \"Presidio\": 7,\n            \"Marina District\": 9,\n            \"Pacific Heights\": 10,\n            \"Golden Gate Park\": 9,\n            \"Chinatown\": 20\n        }\n    }\n\n    # Start at Mission District at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"Mission District\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Meet Daniel at Nob Hill\n    travel_duration = travel_times[current_location][\"Nob Hill\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Nob Hill\"})\n    current_location = \"Nob Hill\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": daniel[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=daniel[\"duration\"])\n\n    # Meet Betty at Richmond District\n    travel_duration = travel_times[current_location][\"Richmond District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Richmond District\"})\n    current_location = \"Richmond District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": betty[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=betty[\"duration\"])\n\n    # Meet Kevin at Chinatown\n    travel_duration = travel_times[current_location][\"Chinatown\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Chinatown\"})\n    current_location = \"Chinatown\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": kevin[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=kevin[\"duration\"])\n\n    # Meet Timothy at Pacific Heights\n    travel_duration = travel_times[current_location][\"Pacific Heights\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Pacific Heights\"})\n    current_location = \"Pacific Heights\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": timothy[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=timothy[\"duration\"])\n\n    # Meet Steven at Marina District\n    travel_duration = travel_times[current_location][\"Marina District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Marina District\"})\n    current_location = \"Marina District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": steven[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=steven[\"duration\"])\n\n    # Meet Ashley at Golden Gate Park\n    travel_duration = travel_times[current_location][\"Golden Gate Park\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    current_location = \"Golden Gate Park\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": ashley[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=ashley[\"duration\"])\n\n    # Meet Elizabeth at Presidio\n    travel_duration = travel_times[current_location][\"Presidio\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Presidio\"})\n    current_location = \"Presidio\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": elizabeth[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=elizabeth[\"duration\"])\n\n    # Meet Lisa at The Castro\n    travel_duration = travel_times[current_location][\"The Castro\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"The Castro\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"The Castro\"})\n    current_location = \"The Castro\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": lisa[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=lisa[\"duration\"])\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_701"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Ronald",
            "start_time": "9:16AM",
            "end_time": "10:46AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Joshua",
            "start_time": "10:53AM",
            "end_time": "12:38PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Unknown",
            "start_time": "12:58PM",
            "end_time": "1:28PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Unknown",
            "start_time": "1:47PM",
            "end_time": "2:17PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Unknown",
            "start_time": "2:22PM",
            "end_time": "3:37PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Unknown",
            "start_time": "3:44PM",
            "end_time": "4:29PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Unknown",
            "start_time": "4:55PM",
            "end_time": "5:40PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Laura",
            "start_time": "6:10PM",
            "end_time": "7:40PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Timothy",
            "start_time": "8:08PM",
            "end_time": "9:38PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Unknown",
            "start_time": "9:47PM",
            "end_time": "11:32PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Joshua",
            "start_time": "9:20AM",
            "end_time": "11:05AM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "David",
            "start_time": "11:25AM",
            "end_time": "11:55AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Stephanie",
            "start_time": "3:30PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Kimberly",
            "start_time": "4:45PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Lisa",
            "start_time": "6:07PM",
            "end_time": "6:52PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Timothy",
            "start_time": "7:45PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    elizabeth = {\"location\": \"Marina District\", \"start\": \"7:00PM\", \"end\": \"8:45PM\", \"duration\": 105}\n    joshua = {\"location\": \"Presidio\", \"start\": \"8:30AM\", \"end\": \"1:15PM\", \"duration\": 105}\n    timothy = {\"location\": \"North Beach\", \"start\": \"7:45PM\", \"end\": \"10:00PM\", \"duration\": 90}\n    david = {\"location\": \"Embarcadero\", \"start\": \"10:45AM\", \"end\": \"12:30PM\", \"duration\": 30}\n    kimberly = {\"location\": \"Haight-Ashbury\", \"start\": \"4:45PM\", \"end\": \"9:30PM\", \"duration\": 75}\n    lisa = {\"location\": \"Golden Gate Park\", \"start\": \"5:30PM\", \"end\": \"9:45PM\", \"duration\": 45}\n    ronald = {\"location\": \"Richmond District\", \"start\": \"8:00AM\", \"end\": \"9:30AM\", \"duration\": 90}\n    stephanie = {\"location\": \"Alamo Square\", \"start\": \"3:30PM\", \"end\": \"4:30PM\", \"duration\": 30}\n    helen = {\"location\": \"Financial District\", \"start\": \"5:30PM\", \"end\": \"6:30PM\", \"duration\": 45}\n    laura = {\"location\": \"Sunset District\", \"start\": \"5:45PM\", \"end\": \"9:15PM\", \"duration\": 90}\n\n    # Travel times\n    travel_times = {\n        \"The Castro\": {\n            \"Marina District\": 21,\n            \"Presidio\": 20,\n            \"North Beach\": 20,\n            \"Embarcadero\": 22,\n            \"Haight-Ashbury\": 6,\n            \"Golden Gate Park\": 11,\n            \"Richmond District\": 16,\n            \"Alamo Square\": 8,\n            \"Financial District\": 21,\n            \"Sunset District\": 17\n        },\n        \"Marina District\": {\n            \"The Castro\": 22,\n            \"Presidio\": 10,\n            \"North Beach\": 11,\n            \"Embarcadero\": 14,\n            \"Haight-Ashbury\": 16,\n            \"Golden Gate Park\": 18,\n            \"Richmond District\": 11,\n            \"Alamo Square\": 15,\n            \"Financial District\": 17,\n            \"Sunset District\": 19\n        },\n        \"Presidio\": {\n            \"The Castro\": 21,\n            \"Marina District\": 11,\n            \"North Beach\": 18,\n            \"Embarcadero\": 20,\n            \"Haight-Ashbury\": 15,\n            \"Golden Gate Park\": 12,\n            \"Richmond District\": 7,\n            \"Alamo Square\": 19,\n            \"Financial District\": 23,\n            \"Sunset District\": 15\n        },\n        \"North Beach\": {\n            \"The Castro\": 23,\n            \"Marina District\": 9,\n            \"Presidio\": 17,\n            \"Embarcadero\": 6,\n            \"Haight-Ashbury\": 18,\n            \"Golden Gate Park\": 22,\n            \"Richmond District\": 18,\n            \"Alamo Square\": 16,\n            \"Financial District\": 8,\n            \"Sunset District\": 27\n        },\n        \"Embarcadero\": {\n            \"The Castro\": 25,\n            \"Marina District\": 12,\n            \"Presidio\": 20,\n            \"North Beach\": 5,\n            \"Haight-Ashbury\": 21,\n            \"Golden Gate Park\": 25,\n            \"Richmond District\": 21,\n            \"Alamo Square\": 19,\n            \"Financial District\": 5,\n            \"Sunset District\": 30\n        },\n        \"Haight-Ashbury\": {\n            \"The Castro\": 6,\n            \"Marina District\": 17,\n            \"Presidio\": 15,\n            \"North Beach\": 19,\n            \"Embarcadero\": 20,\n            \"Golden Gate Park\": 7,\n            \"Richmond District\": 10,\n            \"Alamo Square\": 5,\n            \"Financial District\": 21,\n            \"Sunset District\": 15\n        },\n        \"Golden Gate Park\": {\n            \"The Castro\": 13,\n            \"Marina District\": 16,\n            \"Presidio\": 11,\n            \"North Beach\": 23,\n            \"Embarcadero\": 25,\n            \"Haight-Ashbury\": 7,\n            \"Richmond District\": 7,\n            \"Alamo Square\": 9,\n            \"Financial District\": 26,\n            \"Sunset District\": 10\n        },\n        \"Richmond District\": {\n            \"The Castro\": 16,\n            \"Marina District\": 9,\n            \"Presidio\": 7,\n            \"North Beach\": 17,\n            \"Embarcadero\": 19,\n            \"Haight-Ashbury\": 10,\n            \"Golden Gate Park\": 9,\n            \"Alamo Square\": 13,\n            \"Financial District\": 22,\n            \"Sunset District\": 11\n        },\n        \"Alamo Square\": {\n            \"The Castro\": 8,\n            \"Marina District\": 15,\n            \"Presidio\": 17,\n            \"North Beach\": 15,\n            \"Embarcadero\": 16,\n            \"Haight-Ashbury\": 5,\n            \"Golden Gate Park\": 9,\n            \"Richmond District\": 11,\n            \"Financial District\": 17,\n            \"Sunset District\": 16\n        },\n        \"Financial District\": {\n            \"The Castro\": 20,\n            \"Marina District\": 15,\n            \"Presidio\": 22,\n            \"North Beach\": 7,\n            \"Embarcadero\": 4,\n            \"Haight-Ashbury\": 19,\n            \"Golden Gate Park\": 23,\n            \"Richmond District\": 21,\n            \"Alamo Square\": 17,\n            \"Sunset District\": 30\n        },\n        \"Sunset District\": {\n            \"The Castro\": 17,\n            \"Marina District\": 21,\n            \"Presidio\": 16,\n            \"North Beach\": 28,\n            \"Embarcadero\": 30,\n            \"Haight-Ashbury\": 15,\n            \"Golden Gate Park\": 11,\n            \"Richmond District\": 12,\n            \"Alamo Square\": 17,\n            \"Financial District\": 30\n        }\n    }\n\n    # Start at The Castro at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"The Castro\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Meet Ronald at Richmond District\n    travel_duration = travel_times[current_location][\"Richmond District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Richmond District\"})\n    current_location = \"Richmond District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": ronald[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=ronald[\"duration\"])\n\n    # Meet Joshua at Presidio\n    travel_duration = travel_times[current_location][\"Presidio\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Presidio\"})\n    current_location = \"Presidio\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": joshua[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=joshua[\"duration\"])\n\n    # Meet David at Embarcadero\n    travel_duration = travel_times[current_location][\"Embarcadero\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Embarcadero\"})\n    current_location = \"Embarcadero\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": david[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=david[\"duration\"])\n\n    # Meet Stephanie at Alamo Square\n    travel_duration = travel_times[current_location][\"Alamo Square\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Alamo Square\"})\n    current_location = \"Alamo Square\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": stephanie[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=stephanie[\"duration\"])\n\n    # Meet Kimberly at Haight-Ashbury\n    travel_duration = travel_times[current_location][\"Haight-Ashbury\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Haight-Ashbury\"})\n    current_location = \"Haight-Ashbury\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": kimberly[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=kimberly[\"duration\"])\n\n    # Meet Lisa at Golden Gate Park\n    travel_duration = travel_times[current_location][\"Golden Gate Park\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    current_location = \"Golden Gate Park\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": lisa[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=lisa[\"duration\"])\n\n    # Meet Helen at Financial District\n    travel_duration = travel_times[current_location][\"Financial District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Financial District\"})\n    current_location = \"Financial District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": helen[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=helen[\"duration\"])\n\n    # Meet Laura at Sunset District\n    travel_duration = travel_times[current_location][\"Sunset District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Sunset District\"})\n    current_location = \"Sunset District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": laura[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=laura[\"duration\"])\n\n    # Meet Timothy at North Beach\n    travel_duration = travel_times[current_location][\"North Beach\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"North Beach\"})\n    current_location = \"North Beach\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": timothy[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=timothy[\"duration\"])\n\n    # Meet Elizabeth at Marina District\n    travel_duration = travel_times[current_location][\"Marina District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Marina District\"})\n    current_location = \"Marina District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": elizabeth[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=elizabeth[\"duration\"])\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_962"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Unknown",
            "start_time": "8:41PM",
            "end_time": "8:56PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Joshua",
            "start_time": "8:45PM",
            "end_time": "9:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    joshua = {\"location\": \"Golden Gate Park\", \"start\": \"8:45PM\", \"end\": \"9:45PM\", \"duration\": 15}\n\n    # Travel times\n    travel_times = {\n        \"Sunset District\": {\n            \"Golden Gate Park\": 11\n        },\n        \"Golden Gate Park\": {\n            \"Sunset District\": 10\n        }\n    }\n\n    # Start at Sunset District at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"Sunset District\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Wait until 8:30PM\n    wait_until_time = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    wait_duration = (wait_until_time - current_time).total_seconds() / 60\n    current_time = wait_until_time\n    schedule.append({\"action\": \"wait\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n\n    # Meet Joshua at Golden Gate Park\n    travel_duration = travel_times[current_location][\"Golden Gate Park\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    current_location = \"Golden Gate Park\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": joshua[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=joshua[\"duration\"])\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_88"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Ronald",
            "start_time": "9:21AM",
            "end_time": "10:51AM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Daniel",
            "start_time": "11:09AM",
            "end_time": "12:54PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Unknown",
            "start_time": "1:11PM",
            "end_time": "1:41PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "William",
            "start_time": "2:05PM",
            "end_time": "2:20PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Unknown",
            "start_time": "2:42PM",
            "end_time": "4:27PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Daniel",
            "start_time": "9:26AM",
            "end_time": "11:11AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Ronald",
            "start_time": "11:27AM",
            "end_time": "12:57PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Jessica",
            "start_time": "1:45PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Ashley",
            "start_time": "5:15PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "William",
            "start_time": "7:21PM",
            "end_time": "7:36PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    jessica = {\"location\": \"Golden Gate Park\", \"start\": \"1:45PM\", \"end\": \"3:00PM\", \"duration\": 30}\n    ashley = {\"location\": \"Bayview\", \"start\": \"5:15PM\", \"end\": \"8:00PM\", \"duration\": 105}\n    ronald = {\"location\": \"Chinatown\", \"start\": \"7:15AM\", \"end\": \"2:45PM\", \"duration\": 90}\n    william = {\"location\": \"North Beach\", \"start\": \"1:15PM\", \"end\": \"8:15PM\", \"duration\": 15}\n    daniel = {\"location\": \"Mission District\", \"start\": \"7:00AM\", \"end\": \"11:15AM\", \"duration\": 105}\n\n    # Travel times\n    travel_times = {\n        \"Presidio\": {\n            \"Golden Gate Park\": 12,\n            \"Bayview\": 31,\n            \"Chinatown\": 21,\n            \"North Beach\": 18,\n            \"Mission District\": 26\n        },\n        \"Golden Gate Park\": {\n            \"Presidio\": 11,\n            \"Bayview\": 23,\n            \"Chinatown\": 23,\n            \"North Beach\": 24,\n            \"Mission District\": 17\n        },\n        \"Bayview\": {\n            \"Presidio\": 31,\n            \"Golden Gate Park\": 22,\n            \"Chinatown\": 18,\n            \"North Beach\": 21,\n            \"Mission District\": 13\n        },\n        \"Chinatown\": {\n            \"Presidio\": 19,\n            \"Golden Gate Park\": 23,\n            \"Bayview\": 22,\n            \"North Beach\": 3,\n            \"Mission District\": 18\n        },\n        \"North Beach\": {\n            \"Presidio\": 17,\n            \"Golden Gate Park\": 22,\n            \"Bayview\": 22,\n            \"Chinatown\": 6,\n            \"Mission District\": 18\n        },\n        \"Mission District\": {\n            \"Presidio\": 25,\n            \"Golden Gate Park\": 17,\n            \"Bayview\": 15,\n            \"Chinatown\": 16,\n            \"North Beach\": 17\n        }\n    }\n\n    # Start at Presidio at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"Presidio\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Meet Ronald at Chinatown\n    travel_duration = travel_times[current_location][\"Chinatown\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Chinatown\"})\n    current_location = \"Chinatown\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": ronald[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=ronald[\"duration\"])\n\n    # Meet Daniel at Mission District\n    travel_duration = travel_times[current_location][\"Mission District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Mission District\"})\n    current_location = \"Mission District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": daniel[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=daniel[\"duration\"])\n\n    # Meet Jessica at Golden Gate Park\n    travel_duration = travel_times[current_location][\"Golden Gate Park\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    current_location = \"Golden Gate Park\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": jessica[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=jessica[\"duration\"])\n\n    # Meet William at North Beach\n    travel_duration = travel_times[current_location][\"North Beach\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"North Beach\"})\n    current_location = \"North Beach\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": william[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=william[\"duration\"])\n\n    # Meet Ashley at Bayview\n    travel_duration = travel_times[current_location][\"Bayview\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Bayview\"})\n    current_location = \"Bayview\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": ashley[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=ashley[\"duration\"])\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_454"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Unknown",
            "start_time": "9:08AM",
            "end_time": "11:08AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Patricia",
            "start_time": "6:30PM",
            "end_time": "8:00PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Unknown",
            "start_time": "8:13PM",
            "end_time": "8:58PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Timothy",
            "start_time": "9:45AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Patricia",
            "start_time": "6:30PM",
            "end_time": "8:00PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Ashley",
            "start_time": "8:30PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    patricia = {\"location\": \"Nob Hill\", \"start\": \"6:30PM\", \"end\": \"9:45PM\", \"duration\": 90}\n    ashley = {\"location\": \"Mission District\", \"start\": \"8:30PM\", \"end\": \"9:15PM\", \"duration\": 45}\n    timothy = {\"location\": \"Embarcadero\", \"start\": \"9:45AM\", \"end\": \"5:45PM\", \"duration\": 120}\n\n    # Travel times\n    travel_times = {\n        \"Russian Hill\": {\n            \"Nob Hill\": 5,\n            \"Mission District\": 16,\n            \"Embarcadero\": 8\n        },\n        \"Nob Hill\": {\n            \"Russian Hill\": 5,\n            \"Mission District\": 13,\n            \"Embarcadero\": 9\n        },\n        \"Mission District\": {\n            \"Russian Hill\": 15,\n            \"Nob Hill\": 12,\n            \"Embarcadero\": 19\n        },\n        \"Embarcadero\": {\n            \"Russian Hill\": 8,\n            \"Nob Hill\": 10,\n            \"Mission District\": 20\n        }\n    }\n\n    # Start at Russian Hill at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"Russian Hill\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Meet Timothy at Embarcadero\n    travel_duration = travel_times[current_location][\"Embarcadero\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Embarcadero\"})\n    current_location = \"Embarcadero\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": timothy[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=timothy[\"duration\"])\n\n    # Wait until 6:20PM\n    wait_until_time = datetime.strptime(\"6:20PM\", \"%I:%M%p\")\n    wait_duration = (wait_until_time - current_time).total_seconds() / 60\n    current_time = wait_until_time\n    schedule.append({\"action\": \"wait\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n\n    # Meet Patricia at Nob Hill\n    travel_duration = travel_times[current_location][\"Nob Hill\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Nob Hill\"})\n    current_location = \"Nob Hill\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": patricia[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=patricia[\"duration\"])\n\n    # Meet Ashley at Mission District\n    travel_duration = travel_times[current_location][\"Mission District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Mission District\"})\n    current_location = \"Mission District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": ashley[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=ashley[\"duration\"])\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_272"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Sandra",
            "start_time": "9:07AM",
            "end_time": "9:22AM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Unknown",
            "start_time": "9:29AM",
            "end_time": "11:29AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Mark",
            "start_time": "11:51AM",
            "end_time": "12:06PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Robert",
            "start_time": "12:29PM",
            "end_time": "1:59PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Unknown",
            "start_time": "2:17PM",
            "end_time": "2:32PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Unknown",
            "start_time": "2:48PM",
            "end_time": "4:48PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Jeffrey",
            "start_time": "9:30AM",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Robert",
            "start_time": "12:15PM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Mark",
            "start_time": "2:08PM",
            "end_time": "2:23PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Sandra",
            "start_time": "2:43PM",
            "end_time": "2:58PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Carol",
            "start_time": "6:15PM",
            "end_time": "6:30PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "James",
            "start_time": "8:00PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    james = {\"location\": \"Pacific Heights\", \"start\": \"8:00PM\", \"end\": \"10:00PM\", \"duration\": 120}\n    robert = {\"location\": \"Chinatown\", \"start\": \"12:15PM\", \"end\": \"4:45PM\", \"duration\": 90}\n    jeffrey = {\"location\": \"Union Square\", \"start\": \"9:30AM\", \"end\": \"3:30PM\", \"duration\": 120}\n    carol = {\"location\": \"Mission District\", \"start\": \"6:15PM\", \"end\": \"9:15PM\", \"duration\": 15}\n    mark = {\"location\": \"Golden Gate Park\", \"start\": \"11:30AM\", \"end\": \"5:45PM\", \"duration\": 15}\n    sandra = {\"location\": \"Nob Hill\", \"start\": \"8:00AM\", \"end\": \"3:30PM\", \"duration\": 15}\n\n    # Travel times\n    travel_times = {\n        \"North Beach\": {\n            \"Pacific Heights\": 8,\n            \"Chinatown\": 6,\n            \"Union Square\": 7,\n            \"Mission District\": 18,\n            \"Golden Gate Park\": 22,\n            \"Nob Hill\": 7\n        },\n        \"Pacific Heights\": {\n            \"North Beach\": 9,\n            \"Chinatown\": 11,\n            \"Union Square\": 12,\n            \"Mission District\": 15,\n            \"Golden Gate Park\": 15,\n            \"Nob Hill\": 8\n        },\n        \"Chinatown\": {\n            \"North Beach\": 3,\n            \"Pacific Heights\": 10,\n            \"Union Square\": 7,\n            \"Mission District\": 18,\n            \"Golden Gate Park\": 23,\n            \"Nob Hill\": 8\n        },\n        \"Union Square\": {\n            \"North Beach\": 10,\n            \"Pacific Heights\": 15,\n            \"Chinatown\": 7,\n            \"Mission District\": 14,\n            \"Golden Gate Park\": 22,\n            \"Nob Hill\": 9\n        },\n        \"Mission District\": {\n            \"North Beach\": 17,\n            \"Pacific Heights\": 16,\n            \"Chinatown\": 16,\n            \"Union Square\": 15,\n            \"Golden Gate Park\": 17,\n            \"Nob Hill\": 12\n        },\n        \"Golden Gate Park\": {\n            \"North Beach\": 24,\n            \"Pacific Heights\": 16,\n            \"Chinatown\": 23,\n            \"Union Square\": 22,\n            \"Mission District\": 17,\n            \"Nob Hill\": 20\n        },\n        \"Nob Hill\": {\n            \"North Beach\": 8,\n            \"Pacific Heights\": 8,\n            \"Chinatown\": 6,\n            \"Union Square\": 7,\n            \"Mission District\": 13,\n            \"Golden Gate Park\": 17\n        }\n    }\n\n    # Start at North Beach at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"North Beach\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Meet Sandra at Nob Hill\n    travel_duration = travel_times[current_location][\"Nob Hill\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Nob Hill\"})\n    current_location = \"Nob Hill\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": sandra[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=sandra[\"duration\"])\n\n    # Meet Jeffrey at Union Square\n    travel_duration = travel_times[current_location][\"Union Square\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Union Square\"})\n    current_location = \"Union Square\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": jeffrey[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=jeffrey[\"duration\"])\n\n    # Meet Mark at Golden Gate Park\n    travel_duration = travel_times[current_location][\"Golden Gate Park\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    current_location = \"Golden Gate Park\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": mark[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=mark[\"duration\"])\n\n    # Meet Robert at Chinatown\n    travel_duration = travel_times[current_location][\"Chinatown\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Chinatown\"})\n    current_location = \"Chinatown\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": robert[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=robert[\"duration\"])\n\n    # Meet Carol at Mission District\n    travel_duration = travel_times[current_location][\"Mission District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Mission District\"})\n    current_location = \"Mission District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": carol[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=carol[\"duration\"])\n\n    # Meet James at Pacific Heights\n    travel_duration = travel_times[current_location][\"Pacific Heights\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Pacific Heights\"})\n    current_location = \"Pacific Heights\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": james[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=james[\"duration\"])\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_592"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Laura",
            "start_time": "12:15PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Anthony",
            "start_time": "1:47PM",
            "end_time": "2:17PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Laura",
            "start_time": "12:15PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Anthony",
            "start_time": "1:47PM",
            "end_time": "2:17PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Meeting constraints\n    laura = {\"location\": \"Mission District\", \"start\": \"12:15PM\", \"end\": \"7:45PM\", \"duration\": 75}\n    anthony = {\"location\": \"Financial District\", \"start\": \"12:30PM\", \"end\": \"2:45PM\", \"duration\": 30}\n\n    # Travel times\n    travel_times = {\n        \"The Castro\": {\n            \"Mission District\": 7,\n            \"Financial District\": 20\n        },\n        \"Mission District\": {\n            \"The Castro\": 7,\n            \"Financial District\": 17\n        },\n        \"Financial District\": {\n            \"The Castro\": 23,\n            \"Mission District\": 17\n        }\n    }\n\n    # Start at The Castro at 9:00AM\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    current_location = \"The Castro\"\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")}]\n\n    # Wait until 12:08PM\n    wait_until_time = datetime.strptime(\"12:08PM\", \"%I:%M%p\")\n    wait_duration = (wait_until_time - current_time).total_seconds() / 60\n    current_time = wait_until_time\n    schedule.append({\"action\": \"wait\", \"location\": current_location, \"time\": current_time.strftime(\"%I:%M%p\")})\n\n    # Meet Laura at Mission District\n    travel_duration = travel_times[current_location][\"Mission District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Mission District\"})\n    current_location = \"Mission District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": laura[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=laura[\"duration\"])\n\n    # Meet Anthony at Financial District\n    travel_duration = travel_times[current_location][\"Financial District\"]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_duration, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Financial District\"})\n    current_location = \"Financial District\"\n    schedule.append({\"action\": \"meet\", \"location\": current_location, \"duration\": anthony[\"duration\"], \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=anthony[\"duration\"])\n\n    return {\"schedule\": schedule}\n\nprint(json.dumps(calculate_schedule(), indent=4))\n```",
      "count": "meeting_planning_example_144"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Emily",
            "start_time": "11:15",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Karen",
            "start_time": "11:45",
            "end_time": "12:15PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Stephanie",
            "start_time": "13:00",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Elizabeth",
            "start_time": "14:26",
            "end_time": "4:26PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Steven",
            "start_time": "16:39",
            "end_time": "5:09PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Brian",
            "start_time": "17:16",
            "end_time": "5:46PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "James",
            "start_time": "18:01",
            "end_time": "8:01PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Unknown",
            "start_time": "20:10",
            "end_time": "9:55PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Unknown",
            "start_time": "22:12",
            "end_time": "10:57PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Unknown",
            "start_time": "23:16",
            "end_time": "12:46PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Emily",
            "start_time": "11:15AM",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Karen",
            "start_time": "11:45AM",
            "end_time": "12:15PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Stephanie",
            "start_time": "1:00PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "James",
            "start_time": "2:31PM",
            "end_time": "4:31PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Steven",
            "start_time": "4:38PM",
            "end_time": "5:08PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Matthew",
            "start_time": "5:29PM",
            "end_time": "6:14PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "William",
            "start_time": "6:33PM",
            "end_time": "8:03PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Brian",
            "start_time": "8:30PM",
            "end_time": "9:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define travel times\ntravel_times = {\n    'Richmond District': {\n        'The Castro': 16,\n        'Nob Hill': 17,\n        'Marina District': 9,\n        'Pacific Heights': 10,\n        'Haight-Ashbury': 10,\n        'Mission District': 20,\n        'Chinatown': 20,\n        'Russian Hill': 13,\n        'Alamo Square': 13,\n        'Bayview': 27\n    },\n    'The Castro': {\n        'Richmond District': 16,\n        'Nob Hill': 16,\n        'Marina District': 21,\n        'Pacific Heights': 16,\n        'Haight-Ashbury': 6,\n        'Mission District': 7,\n        'Chinatown': 22,\n        'Russian Hill': 18,\n        'Alamo Square': 8,\n        'Bayview': 19\n    },\n    'Nob Hill': {\n        'Richmond District': 14,\n        'The Castro': 17,\n        'Marina District': 11,\n        'Pacific Heights': 8,\n        'Haight-Ashbury': 13,\n        'Mission District': 13,\n        'Chinatown': 6,\n        'Russian Hill': 5,\n        'Alamo Square': 11,\n        'Bayview': 19\n    },\n    'Marina District': {\n        'Richmond District': 11,\n        'The Castro': 22,\n        'Nob Hill': 12,\n        'Pacific Heights': 7,\n        'Haight-Ashbury': 16,\n        'Mission District': 20,\n        'Chinatown': 15,\n        'Russian Hill': 8,\n        'Alamo Square': 15,\n        'Bayview': 27\n    },\n    'Pacific Heights': {\n        'Richmond District': 12,\n        'The Castro': 16,\n        'Nob Hill': 8,\n        'Marina District': 6,\n        'Haight-Ashbury': 11,\n        'Mission District': 15,\n        'Chinatown': 11,\n        'Russian Hill': 7,\n        'Alamo Square': 10,\n        'Bayview': 22\n    },\n    'Haight-Ashbury': {\n        'Richmond District': 10,\n        'The Castro': 6,\n        'Nob Hill': 15,\n        'Marina District': 17,\n        'Pacific Heights': 12,\n        'Mission District': 11,\n        'Chinatown': 19,\n        'Russian Hill': 17,\n        'Alamo Square': 5,\n        'Bayview': 18\n    },\n    'Mission District': {\n        'Richmond District': 20,\n        'The Castro': 7,\n        'Nob Hill': 12,\n        'Marina District': 19,\n        'Pacific Heights': 16,\n        'Haight-Ashbury': 12,\n        'Chinatown': 16,\n        'Russian Hill': 15,\n        'Alamo Square': 11,\n        'Bayview': 14\n    },\n    'Chinatown': {\n        'Richmond District': 20,\n        'The Castro': 22,\n        'Nob Hill': 9,\n        'Marina District': 12,\n        'Pacific Heights': 10,\n        'Haight-Ashbury': 19,\n        'Mission District': 17,\n        'Russian Hill': 7,\n        'Alamo Square': 17,\n        'Bayview': 20\n    },\n    'Russian Hill': {\n        'Richmond District': 14,\n        'The Castro': 21,\n        'Nob Hill': 5,\n        'Marina District': 7,\n        'Pacific Heights': 7,\n        'Haight-Ashbury': 17,\n        'Mission District': 16,\n        'Chinatown': 9,\n        'Alamo Square': 15,\n        'Bayview': 23\n    },\n    'Alamo Square': {\n        'Richmond District': 11,\n        'The Castro': 8,\n        'Nob Hill': 11,\n        'Marina District': 15,\n        'Pacific Heights': 10,\n        'Haight-Ashbury': 5,\n        'Mission District': 10,\n        'Chinatown': 15,\n        'Russian Hill': 13,\n        'Bayview': 16\n    },\n    'Bayview': {\n        'Richmond District': 25,\n        'The Castro': 19,\n        'Nob Hill': 20,\n        'Marina District': 27,\n        'Pacific Heights': 23,\n        'Haight-Ashbury': 19,\n        'Mission District': 13,\n        'Chinatown': 19,\n        'Russian Hill': 23,\n        'Alamo Square': 16\n    }\n}\n\n# Define meeting constraints\nmeetings = {\n    'Matthew': {'location': 'The Castro','start': '4:30PM', 'end': '8:00PM', 'duration': 45},\n    'Rebecca': {'location': 'Nob Hill','start': '3:15PM', 'end': '7:15PM', 'duration': 105},\n    'Brian': {'location': 'Marina District','start': '2:15PM', 'end': '10:00PM', 'duration': 30},\n    'Emily': {'location': 'Pacific Heights','start': '11:15AM', 'end': '7:45PM', 'duration': 15},\n    'Karen': {'location': 'Haight-Ashbury','start': '11:45AM', 'end': '5:30PM', 'duration': 30},\n    'Stephanie': {'location': 'Mission District','start': '1:00PM', 'end': '3:45PM', 'duration': 75},\n    'James': {'location': 'Chinatown','start': '2:30PM', 'end': '7:00PM', 'duration': 120},\n    'Steven': {'location': 'Russian Hill','start': '2:00PM', 'end': '8:00PM', 'duration': 30},\n    'Elizabeth': {'location': 'Alamo Square','start': '1:00PM', 'end': '5:15PM', 'duration': 120},\n    'William': {'location': 'Bayview','start': '6:15PM', 'end': '8:15PM', 'duration': 90}\n}\n\n# Convert times to minutes\ndef convert_time(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0].replace('PM', '').replace('AM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace('PM', '').replace('AM', ''))\n    return hours * 60 + minutes\n\n# Calculate schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Richmond District'\n\n# Sort meetings by start time\nsorted_meetings = sorted(meetings.items(), key=lambda x: convert_time(x[1]['start']))\n\nfor name, meeting in sorted_meetings:\n    # Travel to meeting location\n    travel_time = travel_times[current_location][meeting['location']]\n    schedule.append({\n        'action': 'travel',\n        'location': meeting['location'],\n        'duration': travel_time,\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\",\n        'to': meeting['location']\n    })\n    current_time += travel_time\n\n    # Wait for meeting to start\n    meeting_start = convert_time(meeting['start'])\n    if current_time < meeting_start:\n        wait_time = meeting_start - current_time\n        schedule.append({\n            'action': 'wait',\n            'location': meeting['location'],\n            'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n        })\n        current_time += wait_time\n\n    # Attend meeting\n    schedule.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'duration': meeting['duration'],\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n    })\n    current_time += meeting['duration']\n\n    # Update current location\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint(json.dumps({\n   'schedule': schedule\n}, indent=4))\n```",
      "count": "meeting_planning_example_900"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Steven",
            "start_time": "9:23",
            "end_time": "10:23AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Jason",
            "start_time": "10:28",
            "end_time": "11:43AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Kenneth",
            "start_time": "11:46",
            "end_time": "12:16PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Kimberly",
            "start_time": "12:22",
            "end_time": "1:37PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Unknown",
            "start_time": "13:49",
            "end_time": "3:04PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Jessica",
            "start_time": "15:16",
            "end_time": "4:46PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Stephanie",
            "start_time": "16:53",
            "end_time": "6:38PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Brian",
            "start_time": "18:51",
            "end_time": "7:51PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Karen",
            "start_time": "21:00",
            "end_time": "9:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Jason",
            "start_time": "9:21AM",
            "end_time": "10:36AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Kenneth",
            "start_time": "10:39AM",
            "end_time": "11:09AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Mark",
            "start_time": "11:18AM",
            "end_time": "12:33PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Kimberly",
            "start_time": "12:47PM",
            "end_time": "2:02PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Jessica",
            "start_time": "2:12PM",
            "end_time": "3:42PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Brian",
            "start_time": "3:47PM",
            "end_time": "4:47PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Stephanie",
            "start_time": "4:57PM",
            "end_time": "6:42PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Steven",
            "start_time": "6:51PM",
            "end_time": "7:51PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Karen",
            "start_time": "9:00PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define travel times\ntravel_times = {\n    'Presidio': {\n        'Haight-Ashbury': 15,\n        'Nob Hill': 18,\n        'Russian Hill': 14,\n        'North Beach': 18,\n        'Chinatown': 21,\n        'Union Square': 22,\n        'Embarcadero': 20,\n        'Financial District': 23,\n        'Marina District': 11\n    },\n    'Haight-Ashbury': {\n        'Presidio': 15,\n        'Nob Hill': 15,\n        'Russian Hill': 17,\n        'North Beach': 19,\n        'Chinatown': 19,\n        'Union Square': 19,\n        'Embarcadero': 20,\n        'Financial District': 21,\n        'Marina District': 17\n    },\n    'Nob Hill': {\n        'Presidio': 17,\n        'Haight-Ashbury': 13,\n        'Russian Hill': 5,\n        'North Beach': 8,\n        'Chinatown': 6,\n        'Union Square': 7,\n        'Embarcadero': 9,\n        'Financial District': 9,\n        'Marina District': 11\n    },\n    'Russian Hill': {\n        'Presidio': 14,\n        'Haight-Ashbury': 17,\n        'Nob Hill': 5,\n        'North Beach': 5,\n        'Chinatown': 9,\n        'Union Square': 10,\n        'Embarcadero': 8,\n        'Financial District': 11,\n        'Marina District': 7\n    },\n    'North Beach': {\n        'Presidio': 17,\n        'Haight-Ashbury': 18,\n        'Nob Hill': 7,\n        'Russian Hill': 4,\n        'Chinatown': 6,\n        'Union Square': 7,\n        'Embarcadero': 6,\n        'Financial District': 8,\n        'Marina District': 9\n    },\n    'Chinatown': {\n        'Presidio': 19,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 9,\n        'Russian Hill': 7,\n        'North Beach': 3,\n        'Union Square': 7,\n        'Embarcadero': 5,\n        'Financial District': 5,\n        'Marina District': 12\n    },\n    'Union Square': {\n        'Presidio': 24,\n        'Haight-Ashbury': 18,\n        'Nob Hill': 9,\n        'Russian Hill': 13,\n        'North Beach': 10,\n        'Chinatown': 7,\n        'Embarcadero': 11,\n        'Financial District': 9,\n        'Marina District': 18\n    },\n    'Embarcadero': {\n        'Presidio': 20,\n        'Haight-Ashbury': 21,\n        'Nob Hill': 10,\n        'Russian Hill': 8,\n        'North Beach': 5,\n        'Chinatown': 7,\n        'Union Square': 10,\n        'Financial District': 5,\n        'Marina District': 12\n    },\n    'Financial District': {\n        'Presidio': 22,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 8,\n        'Russian Hill': 11,\n        'North Beach': 7,\n        'Chinatown': 5,\n        'Union Square': 9,\n        'Embarcadero': 4,\n        'Marina District': 15\n    },\n    'Marina District': {\n        'Presidio': 10,\n        'Haight-Ashbury': 16,\n        'Nob Hill': 12,\n        'Russian Hill': 8,\n        'North Beach': 11,\n        'Chinatown': 15,\n        'Union Square': 16,\n        'Embarcadero': 14,\n        'Financial District': 17\n    }\n}\n\n# Define meeting constraints\nmeetings = {\n    'Karen': {'location': 'Haight-Ashbury','start': '9:00PM', 'end': '9:45PM', 'duration': 45},\n    'Jessica': {'location': 'Nob Hill','start': '1:45PM', 'end': '9:00PM', 'duration': 90},\n    'Brian': {'location': 'Russian Hill','start': '3:30PM', 'end': '9:45PM', 'duration': 60},\n    'Kenneth': {'location': 'North Beach','start': '9:45AM', 'end': '9:00PM', 'duration': 30},\n    'Jason': {'location': 'Chinatown','start': '8:15AM', 'end': '11:45AM', 'duration': 75},\n    'Stephanie': {'location': 'Union Square','start': '2:45PM', 'end': '6:45PM', 'duration': 105},\n    'Kimberly': {'location': 'Embarcadero','start': '9:45AM', 'end': '7:30PM', 'duration': 75},\n    'Steven': {'location': 'Financial District','start': '7:15AM', 'end': '9:15PM', 'duration': 60},\n    'Mark': {'location': 'Marina District','start': '10:15AM', 'end': '1:00PM', 'duration': 75}\n}\n\n# Convert times to minutes\ndef convert_time(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0].replace('PM', '').replace('AM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace('PM', '').replace('AM', ''))\n    return hours * 60 + minutes\n\n# Calculate schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Presidio'\n\n# Sort meetings by start time\nsorted_meetings = sorted(meetings.items(), key=lambda x: convert_time(x[1]['start']))\n\nfor name, meeting in sorted_meetings:\n    # Travel to meeting location\n    travel_time = travel_times[current_location][meeting['location']]\n    schedule.append({\n        'action': 'travel',\n        'location': meeting['location'],\n        'duration': travel_time,\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\",\n        'to': meeting['location']\n    })\n    current_time += travel_time\n\n    # Wait for meeting to start\n    meeting_start = convert_time(meeting['start'])\n    if current_time < meeting_start:\n        wait_time = meeting_start - current_time\n        schedule.append({\n            'action': 'wait',\n            'location': meeting['location'],\n            'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n        })\n        current_time += wait_time\n\n    # Attend meeting\n    schedule.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'duration': meeting['duration'],\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n    })\n    current_time += meeting['duration']\n\n    # Update current location\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint(json.dumps({\n  'schedule': schedule\n}, indent=4))\n```",
      "count": "meeting_planning_example_872"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Nancy",
            "start_time": "11:45",
            "end_time": "12:15PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Matthew",
            "start_time": "15:45",
            "end_time": "5:00PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Paul",
            "start_time": "17:05",
            "end_time": "6:05PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Karen",
            "start_time": "18:22",
            "end_time": "7:07PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Carol",
            "start_time": "19:26",
            "end_time": "9:26PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Unknown",
            "start_time": "21:33",
            "end_time": "10:48PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Unknown",
            "start_time": "22:58",
            "end_time": "11:43PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Paul",
            "start_time": "4:15PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Karen",
            "start_time": "5:32PM",
            "end_time": "6:17PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Matthew",
            "start_time": "6:35PM",
            "end_time": "7:50PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Jeffrey",
            "start_time": "8:00PM",
            "end_time": "8:45PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Nancy",
            "start_time": "8:56PM",
            "end_time": "9:26PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define travel times\ntravel_times = {\n    'Bayview': {\n        'Nob Hill': 20,\n        'Union Square': 17,\n        'Chinatown': 18,\n        'The Castro': 20,\n        'Presidio': 31,\n        'Pacific Heights': 23,\n        'Russian Hill': 23\n    },\n    'Nob Hill': {\n        'Bayview': 19,\n        'Union Square': 7,\n        'Chinatown': 6,\n        'The Castro': 17,\n        'Presidio': 17,\n        'Pacific Heights': 8,\n        'Russian Hill': 5\n    },\n    'Union Square': {\n        'Bayview': 15,\n        'Nob Hill': 9,\n        'Chinatown': 7,\n        'The Castro': 19,\n        'Presidio': 24,\n        'Pacific Heights': 15,\n        'Russian Hill': 13\n    },\n    'Chinatown': {\n        'Bayview': 22,\n        'Nob Hill': 8,\n        'Union Square': 7,\n        'The Castro': 22,\n        'Presidio': 19,\n        'Pacific Heights': 10,\n        'Russian Hill': 7\n    },\n    'The Castro': {\n        'Bayview': 19,\n        'Nob Hill': 16,\n        'Union Square': 19,\n        'Chinatown': 20,\n        'Presidio': 20,\n        'Pacific Heights': 16,\n        'Russian Hill': 18\n    },\n    'Presidio': {\n        'Bayview': 31,\n        'Nob Hill': 18,\n        'Union Square': 22,\n        'Chinatown': 21,\n        'The Castro': 21,\n        'Pacific Heights': 11,\n        'Russian Hill': 14\n    },\n    'Pacific Heights': {\n        'Bayview': 22,\n        'Nob Hill': 8,\n        'Union Square': 12,\n        'Chinatown': 11,\n        'The Castro': 16,\n        'Presidio': 11,\n        'Russian Hill': 7\n    },\n    'Russian Hill': {\n        'Bayview': 23,\n        'Nob Hill': 5,\n        'Union Square': 11,\n        'Chinatown': 9,\n        'The Castro': 21,\n        'Presidio': 14,\n        'Pacific Heights': 7\n    }\n}\n\n# Define meeting constraints\nmeetings = {\n    'Paul': {'location': 'Nob Hill','start': '4:15PM', 'end': '9:15PM', 'duration': 60},\n    'Carol': {'location': 'Union Square','start': '6:00PM', 'end': '8:15PM', 'duration': 120},\n    'Patricia': {'location': 'Chinatown','start': '8:00PM', 'end': '9:30PM', 'duration': 75},\n    'Karen': {'location': 'The Castro','start': '5:00PM', 'end': '7:00PM', 'duration': 45},\n    'Nancy': {'location': 'Presidio','start': '11:45AM', 'end': '10:00PM', 'duration': 30},\n    'Jeffrey': {'location': 'Pacific Heights','start': '8:00PM', 'end': '8:45PM', 'duration': 45},\n    'Matthew': {'location': 'Russian Hill','start': '3:45PM', 'end': '9:45PM', 'duration': 75}\n}\n\n# Convert times to minutes\ndef convert_time(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0].replace('PM', '').replace('AM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace('PM', '').replace('AM', ''))\n    return hours * 60 + minutes\n\n# Calculate schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Bayview'\n\n# Sort meetings by start time\nsorted_meetings = sorted(meetings.items(), key=lambda x: convert_time(x[1]['start']))\n\nfor name, meeting in sorted_meetings:\n    # Travel to meeting location\n    travel_time = travel_times[current_location][meeting['location']]\n    schedule.append({\n        'action': 'travel',\n        'location': meeting['location'],\n        'duration': travel_time,\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\",\n        'to': meeting['location']\n    })\n    current_time += travel_time\n\n    # Wait for meeting to start\n    meeting_start = convert_time(meeting['start'])\n    if current_time < meeting_start:\n        wait_time = meeting_start - current_time\n        schedule.append({\n            'action': 'wait',\n            'location': meeting['location'],\n            'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n        })\n        current_time += wait_time\n\n    # Attend meeting\n    schedule.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'duration': meeting['duration'],\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n    })\n    current_time += meeting['duration']\n\n    # Update current location\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint(json.dumps({\n 'schedule': schedule\n}, indent=4))\n```",
      "count": "meeting_planning_example_695"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Timothy",
            "start_time": "12:00",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Joseph",
            "start_time": "16:45",
            "end_time": "5:45PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Mark",
            "start_time": "18:45",
            "end_time": "7:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Timothy",
            "start_time": "12:00PM",
            "end_time": "1:45PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Mark",
            "start_time": "6:45PM",
            "end_time": "7:45PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Joseph",
            "start_time": "7:59PM",
            "end_time": "8:59PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define travel times\ntravel_times = {\n    'Golden Gate Park': {\n        'Alamo Square': 10,\n        'Presidio': 11,\n        'Russian Hill': 19\n    },\n    'Alamo Square': {\n        'Golden Gate Park': 9,\n        'Presidio': 18,\n        'Russian Hill': 13\n    },\n    'Presidio': {\n        'Golden Gate Park': 12,\n        'Alamo Square': 18,\n        'Russian Hill': 14\n    },\n    'Russian Hill': {\n        'Golden Gate Park': 21,\n        'Alamo Square': 15,\n        'Presidio': 14\n    }\n}\n\n# Define meeting constraints\nmeetings = {\n    'Timothy': {'location': 'Alamo Square','start': '12:00PM', 'end': '4:15PM', 'duration': 105},\n    'Mark': {'location': 'Presidio','start': '6:45PM', 'end': '9:00PM', 'duration': 60},\n    'Joseph': {'location': 'Russian Hill','start': '4:45PM', 'end': '9:30PM', 'duration': 60}\n}\n\n# Convert times to minutes\ndef convert_time(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0].replace('PM', '').replace('AM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace('PM', '').replace('AM', ''))\n    return hours * 60 + minutes\n\n# Calculate schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Golden Gate Park'\n\n# Sort meetings by start time\nsorted_meetings = sorted(meetings.items(), key=lambda x: convert_time(x[1]['start']))\n\nfor name, meeting in sorted_meetings:\n    # Travel to meeting location\n    travel_time = travel_times[current_location][meeting['location']]\n    schedule.append({\n        'action': 'travel',\n        'location': meeting['location'],\n        'duration': travel_time,\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\",\n        'to': meeting['location']\n    })\n    current_time += travel_time\n\n    # Wait for meeting to start\n    meeting_start = convert_time(meeting['start'])\n    if current_time < meeting_start:\n        wait_time = meeting_start - current_time\n        schedule.append({\n            'action': 'wait',\n            'location': meeting['location'],\n            'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n        })\n        current_time += wait_time\n\n    # Attend meeting\n    schedule.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'duration': meeting['duration'],\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n    })\n    current_time += meeting['duration']\n\n    # Update current location\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint(json.dumps({\n 'schedule': schedule\n}, indent=4))\n```",
      "count": "meeting_planning_example_268"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Kenneth",
            "start_time": "14:15",
            "end_time": "3:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Kenneth",
            "start_time": "2:15PM",
            "end_time": "3:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define travel times\ntravel_times = {\n    'Fisherman\\'s Wharf': {\n        'Nob Hill': 11\n    },\n    'Nob Hill': {\n        'Fisherman\\'s Wharf': 11\n    }\n}\n\n# Define meeting constraints\nmeetings = {\n    'Kenneth': {'location': 'Nob Hill','start': '2:15PM', 'end': '7:45PM', 'duration': 90}\n}\n\n# Convert times to minutes\ndef convert_time(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0].replace('PM', '').replace('AM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace('PM', '').replace('AM', ''))\n    return hours * 60 + minutes\n\n# Calculate schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Fisherman\\'s Wharf'\n\n# Add start action\nschedule.append({\n    'action':'start',\n    'location': current_location,\n    'time': '9:00AM'\n})\n\n# Sort meetings by start time\nsorted_meetings = sorted(meetings.items(), key=lambda x: convert_time(x[1]['start']))\n\nfor name, meeting in sorted_meetings:\n    # Travel to meeting location\n    travel_time = travel_times[current_location][meeting['location']]\n    schedule.append({\n        'action': 'travel',\n        'location': meeting['location'],\n        'duration': travel_time,\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\",\n        'to': meeting['location']\n    })\n    current_time += travel_time\n\n    # Wait for meeting to start\n    meeting_start = convert_time(meeting['start'])\n    if current_time < meeting_start:\n        wait_time = meeting_start - current_time\n        schedule.append({\n            'action': 'wait',\n            'location': meeting['location'],\n            'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n        })\n        current_time += wait_time\n\n    # Attend meeting\n    schedule.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'duration': meeting['duration'],\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n    })\n    current_time += meeting['duration']\n\n    # Update current location\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint(json.dumps({\n'schedule': schedule\n}, indent=4))\n```",
      "count": "meeting_planning_example_6"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Jeffrey",
            "start_time": "9:17",
            "end_time": "11:02AM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "John",
            "start_time": "11:13",
            "end_time": "11:28AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Steven",
            "start_time": "13:30",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Barbara",
            "start_time": "18:00",
            "end_time": "6:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "John",
            "start_time": "9:08AM",
            "end_time": "9:23AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Steven",
            "start_time": "1:30PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Barbara",
            "start_time": "6:00PM",
            "end_time": "6:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define travel times\ntravel_times = {\n    'Nob Hill': {\n        'Presidio': 17,\n        'North Beach': 8,\n        'Fisherman\\'s Wharf': 11,\n        'Pacific Heights': 8\n    },\n    'Presidio': {\n        'Nob Hill': 18,\n        'North Beach': 18,\n        'Fisherman\\'s Wharf': 19,\n        'Pacific Heights': 11\n    },\n    'North Beach': {\n        'Nob Hill': 7,\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 5,\n        'Pacific Heights': 8\n    },\n    'Fisherman\\'s Wharf': {\n        'Nob Hill': 11,\n        'Presidio': 17,\n        'North Beach': 6,\n        'Pacific Heights': 12\n    },\n    'Pacific Heights': {\n        'Nob Hill': 8,\n        'Presidio': 11,\n        'North Beach': 9,\n        'Fisherman\\'s Wharf': 13\n    }\n}\n\n# Define meeting constraints\nmeetings = {\n    'Jeffrey': {'location': 'Presidio','start': '8:00AM', 'end': '10:00AM', 'duration': 105},\n    'Steven': {'location': 'North Beach','start': '1:30PM', 'end': '10:00PM', 'duration': 45},\n    'Barbara': {'location': 'Fisherman\\'s Wharf','start': '6:00PM', 'end': '9:30PM', 'duration': 30},\n    'John': {'location': 'Pacific Heights','start': '9:00AM', 'end': '1:30PM', 'duration': 15}\n}\n\n# Convert times to minutes\ndef convert_time(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0].replace('PM', '').replace('AM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace('PM', '').replace('AM', ''))\n    return hours * 60 + minutes\n\n# Calculate schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Nob Hill'\n\n# Add start action\nschedule.append({\n    'action':'start',\n    'location': current_location,\n    'time': '9:00AM'\n})\n\n# Sort meetings by start time\nsorted_meetings = sorted(meetings.items(), key=lambda x: convert_time(x[1]['start']))\n\nfor name, meeting in sorted_meetings:\n    # Travel to meeting location\n    travel_time = travel_times[current_location][meeting['location']]\n    schedule.append({\n        'action': 'travel',\n        'location': meeting['location'],\n        'duration': travel_time,\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\",\n        'to': meeting['location']\n    })\n    current_time += travel_time\n\n    # Wait for meeting to start\n    meeting_start = convert_time(meeting['start'])\n    if current_time < meeting_start:\n        wait_time = meeting_start - current_time\n        schedule.append({\n            'action': 'wait',\n            'location': meeting['location'],\n            'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n        })\n        current_time += wait_time\n\n    # Attend meeting\n    schedule.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'duration': meeting['duration'],\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n    })\n    current_time += meeting['duration']\n\n    # Update current location\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint(json.dumps({\n'schedule': schedule\n}, indent=4))\n```",
      "count": "meeting_planning_example_385"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Sandra",
            "start_time": "9:20",
            "end_time": "9:50AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Elizabeth",
            "start_time": "9:59",
            "end_time": "11:44AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Brian",
            "start_time": "11:54",
            "end_time": "12:24PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Stephanie",
            "start_time": "12:42",
            "end_time": "1:57PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Helen",
            "start_time": "14:19",
            "end_time": "4:19PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Unknown",
            "start_time": "16:28",
            "end_time": "5:43PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Mary",
            "start_time": "17:59",
            "end_time": "7:59PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "20:07",
            "end_time": "9:37PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Unknown",
            "start_time": "21:48",
            "end_time": "11:33PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Sandra",
            "start_time": "9:20AM",
            "end_time": "9:50AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Brian",
            "start_time": "10:15AM",
            "end_time": "10:45AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Stephanie",
            "start_time": "11:03AM",
            "end_time": "12:18PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Helen",
            "start_time": "12:40PM",
            "end_time": "2:40PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Laura",
            "start_time": "2:49PM",
            "end_time": "4:04PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Mary",
            "start_time": "4:45PM",
            "end_time": "6:45PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Deborah",
            "start_time": "7:00PM",
            "end_time": "8:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define travel times\ntravel_times = {\n    'Mission District': {\n        'Alamo Square': 11,\n        'Presidio': 25,\n        'Russian Hill': 15,\n        'North Beach': 17,\n        'Golden Gate Park': 17,\n        'Richmond District': 20,\n        'Embarcadero': 19,\n        'Financial District': 15,\n        'Marina District': 19\n    },\n    'Alamo Square': {\n        'Mission District': 10,\n        'Presidio': 17,\n        'Russian Hill': 13,\n        'North Beach': 15,\n        'Golden Gate Park': 9,\n        'Richmond District': 11,\n        'Embarcadero': 16,\n        'Financial District': 17,\n        'Marina District': 15\n    },\n    'Presidio': {\n        'Mission District': 26,\n        'Alamo Square': 19,\n        'Russian Hill': 14,\n        'North Beach': 18,\n        'Golden Gate Park': 12,\n        'Richmond District': 7,\n        'Embarcadero': 20,\n        'Financial District': 23,\n        'Marina District': 11\n    },\n    'Russian Hill': {\n        'Mission District': 16,\n        'Alamo Square': 15,\n        'Presidio': 14,\n        'North Beach': 5,\n        'Golden Gate Park': 21,\n        'Richmond District': 14,\n        'Embarcadero': 8,\n        'Financial District': 11,\n        'Marina District': 7\n    },\n    'North Beach': {\n        'Mission District': 18,\n        'Alamo Square': 16,\n        'Presidio': 17,\n        'Russian Hill': 4,\n        'Golden Gate Park': 22,\n        'Richmond District': 18,\n        'Embarcadero': 6,\n        'Financial District': 8,\n        'Marina District': 9\n    },\n    'Golden Gate Park': {\n        'Mission District': 17,\n        'Alamo Square': 9,\n        'Presidio': 11,\n        'Russian Hill': 19,\n        'North Beach': 23,\n        'Richmond District': 7,\n        'Embarcadero': 25,\n        'Financial District': 26,\n        'Marina District': 16\n    },\n    'Richmond District': {\n        'Mission District': 20,\n        'Alamo Square': 13,\n        'Presidio': 7,\n        'Russian Hill': 13,\n        'North Beach': 17,\n        'Golden Gate Park': 9,\n        'Embarcadero': 19,\n        'Financial District': 22,\n        'Marina District': 9\n    },\n    'Embarcadero': {\n        'Mission District': 20,\n        'Alamo Square': 19,\n        'Presidio': 20,\n        'Russian Hill': 8,\n        'North Beach': 5,\n        'Golden Gate Park': 25,\n        'Richmond District': 21,\n        'Financial District': 5,\n        'Marina District': 12\n    },\n    'Financial District': {\n        'Mission District': 17,\n        'Alamo Square': 17,\n        'Presidio': 22,\n        'Russian Hill': 11,\n        'North Beach': 7,\n        'Golden Gate Park': 23,\n        'Richmond District': 21,\n        'Embarcadero': 4,\n        'Marina District': 15\n    },\n    'Marina District': {\n        'Mission District': 20,\n        'Alamo Square': 15,\n        'Presidio': 10,\n        'Russian Hill': 8,\n        'North Beach': 11,\n        'Golden Gate Park': 18,\n        'Richmond District': 11,\n        'Embarcadero': 14,\n        'Financial District': 17\n    }\n}\n\n# Define meeting constraints\nmeetings = {\n    'Laura': {'location': 'Alamo Square','start': '2:30PM', 'end': '4:15PM', 'duration': 75},\n    'Brian': {'location': 'Presidio','start': '10:15AM', 'end': '5:00PM', 'duration': 30},\n    'Karen': {'location': 'Russian Hill','start': '6:00PM', 'end': '8:15PM', 'duration': 90},\n    'Stephanie': {'location': 'North Beach','start': '10:15AM', 'end': '4:00PM', 'duration': 75},\n    'Helen': {'location': 'Golden Gate Park','start': '11:30AM', 'end': '9:45PM', 'duration': 120},\n    'Sandra': {'location': 'Richmond District','start': '8:00AM', 'end': '3:15PM', 'duration': 30},\n    'Mary': {'location': 'Embarcadero','start': '4:45PM', 'end': '6:45PM', 'duration': 120},\n    'Deborah': {'location': 'Financial District','start': '7:00PM', 'end': '8:45PM', 'duration': 105},\n    'Elizabeth': {'location': 'Marina District','start': '8:30AM', 'end': '1:15PM', 'duration': 105}\n}\n\n# Convert times to minutes\ndef convert_time(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0].replace('PM', '').replace('AM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace('PM', '').replace('AM', ''))\n    return hours * 60 + minutes\n\n# Calculate schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Mission District'\n\n# Sort meetings by start time\nsorted_meetings = sorted(meetings.items(), key=lambda x: convert_time(x[1]['start']))\n\nfor name, meeting in sorted_meetings:\n    # Travel to meeting location\n    travel_time = travel_times[current_location][meeting['location']]\n    schedule.append({\n        'action': 'travel',\n        'location': meeting['location'],\n        'duration': travel_time,\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\",\n        'to': meeting['location']\n    })\n    current_time += travel_time\n\n    # Wait for meeting to start\n    meeting_start = convert_time(meeting['start'])\n    if current_time < meeting_start:\n        wait_time = meeting_start - current_time\n        schedule.append({\n            'action': 'wait',\n            'location': meeting['location'],\n            'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n        })\n        current_time += wait_time\n\n    # Attend meeting\n    schedule.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'duration': meeting['duration'],\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n    })\n    current_time += meeting['duration']\n\n    # Update current location\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint(json.dumps({\n'schedule': schedule\n}, indent=4))\n```",
      "count": "meeting_planning_example_862"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Nancy",
            "start_time": "9:11",
            "end_time": "10:41AM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Lisa",
            "start_time": "10:53",
            "end_time": "11:38AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Andrew",
            "start_time": "11:47",
            "end_time": "12:47PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Joshua",
            "start_time": "12:56",
            "end_time": "1:11PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "John",
            "start_time": "16:45",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Kenneth",
            "start_time": "21:15",
            "end_time": "9:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Nancy",
            "start_time": "9:11AM",
            "end_time": "10:41AM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Lisa",
            "start_time": "10:53AM",
            "end_time": "11:38AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Joshua",
            "start_time": "12:00PM",
            "end_time": "12:15PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Andrew",
            "start_time": "12:23PM",
            "end_time": "1:23PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "John",
            "start_time": "4:45PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Kenneth",
            "start_time": "9:15PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define travel times\ntravel_times = {\n    'Embarcadero': {\n        'Richmond District': 21,\n        'Union Square': 10,\n        'Financial District': 5,\n        'Pacific Heights': 11,\n        'Nob Hill': 10,\n        'Bayview': 21\n    },\n    'Richmond District': {\n        'Embarcadero': 19,\n        'Union Square': 21,\n        'Financial District': 22,\n        'Pacific Heights': 10,\n        'Nob Hill': 17,\n        'Bayview': 26\n    },\n    'Union Square': {\n        'Embarcadero': 11,\n        'Richmond District': 20,\n        'Financial District': 9,\n        'Pacific Heights': 15,\n        'Nob Hill': 9,\n        'Bayview': 15\n    },\n    'Financial District': {\n        'Embarcadero': 4,\n        'Richmond District': 21,\n        'Union Square': 9,\n        'Pacific Heights': 13,\n        'Nob Hill': 8,\n        'Bayview': 19\n    },\n    'Pacific Heights': {\n        'Embarcadero': 10,\n        'Richmond District': 12,\n        'Union Square': 12,\n        'Financial District': 13,\n        'Nob Hill': 8,\n        'Bayview': 22\n    },\n    'Nob Hill': {\n        'Embarcadero': 9,\n        'Richmond District': 14,\n        'Union Square': 7,\n        'Financial District': 9,\n        'Pacific Heights': 8,\n        'Bayview': 19\n    },\n    'Bayview': {\n        'Embarcadero': 19,\n        'Richmond District': 25,\n        'Union Square': 17,\n        'Financial District': 19,\n        'Pacific Heights': 23,\n        'Nob Hill': 20\n    }\n}\n\n# Define meeting constraints\nmeetings = {\n    'Kenneth': {'location': 'Richmond District','start': '9:15PM', 'end': '10:00PM', 'duration': 30},\n    'Lisa': {'location': 'Union Square','start': '9:00AM', 'end': '4:30PM', 'duration': 45},\n    'Joshua': {'location': 'Financial District','start': '12:00PM', 'end': '3:15PM', 'duration': 15},\n    'Nancy': {'location': 'Pacific Heights','start': '8:00AM', 'end': '11:30AM', 'duration': 90},\n    'Andrew': {'location': 'Nob Hill','start': '11:30AM', 'end': '8:15PM', 'duration': 60},\n    'John': {'location': 'Bayview','start': '4:45PM', 'end': '9:30PM', 'duration': 75}\n}\n\n# Convert times to minutes\ndef convert_time(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0].replace('PM', '').replace('AM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace('PM', '').replace('AM', ''))\n    return hours * 60 + minutes\n\n# Calculate schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Embarcadero'\n\n# Add start action\nschedule.append({\n    'action':'start',\n    'location': current_location,\n    'time': '9:00AM'\n})\n\n# Sort meetings by start time\nsorted_meetings = sorted(meetings.items(), key=lambda x: convert_time(x[1]['start']))\n\nfor name, meeting in sorted_meetings:\n    # Travel to meeting location\n    travel_time = travel_times[current_location][meeting['location']]\n    schedule.append({\n        'action': 'travel',\n        'location': meeting['location'],\n        'duration': travel_time,\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\",\n        'to': meeting['location']\n    })\n    current_time += travel_time\n\n    # Wait for meeting to start\n    meeting_start = convert_time(meeting['start'])\n    if current_time < meeting_start:\n        wait_time = meeting_start - current_time\n        schedule.append({\n            'action': 'wait',\n            'location': meeting['location'],\n            'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n        })\n        current_time += wait_time\n\n    # Attend meeting\n    schedule.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'duration': meeting['duration'],\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n    })\n    current_time += meeting['duration']\n\n    # Update current location\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint(json.dumps({\n'schedule': schedule\n}, indent=4))\n```",
      "count": "meeting_planning_example_546"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Daniel",
            "start_time": "19:00",
            "end_time": "8:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Daniel",
            "start_time": "7:00PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\n\n# Define travel times\ntravel_times = {\n    'Russian Hill': {\n        'Richmond District': 14\n    },\n    'Richmond District': {\n        'Russian Hill': 13\n    }\n}\n\n# Define meeting constraints\nmeetings = {\n    'Daniel': {'location': 'Richmond District','start': '7:00PM', 'end': '8:15PM', 'duration': 75}\n}\n\n# Convert times to minutes\ndef convert_time(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0].replace('PM', '').replace('AM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace('PM', '').replace('AM', ''))\n    return hours * 60 + minutes\n\n# Calculate schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Russian Hill'\n\n# Add start action\nschedule.append({\n    'action':'start',\n    'location': current_location,\n    'time': '9:00AM'\n})\n\n# Sort meetings by start time\nsorted_meetings = sorted(meetings.items(), key=lambda x: convert_time(x[1]['start']))\n\nfor name, meeting in sorted_meetings:\n    # Travel to meeting location\n    travel_time = travel_times[current_location][meeting['location']]\n    schedule.append({\n        'action': 'travel',\n        'location': meeting['location'],\n        'duration': travel_time,\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\",\n        'to': meeting['location']\n    })\n    current_time += travel_time\n\n    # Wait for meeting to start\n    meeting_start = convert_time(meeting['start'])\n    if current_time < meeting_start:\n        wait_time = meeting_start - current_time\n        schedule.append({\n            'action': 'wait',\n            'location': meeting['location'],\n            'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n        })\n        current_time += wait_time\n\n    # Attend meeting\n    schedule.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'duration': meeting['duration'],\n        'time': f\"{current_time // 60}:{current_time % 60:02d}\"\n    })\n    current_time += meeting['duration']\n\n    # Update current location\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint(json.dumps({\n'schedule': schedule\n}, indent=4))\n```",
      "count": "meeting_planning_example_91"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "David",
            "start_time": "9:18AM",
            "end_time": "10:03AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Kenneth",
            "start_time": "2:00PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Deborah",
            "start_time": "4:09PM",
            "end_time": "5:39PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "John",
            "start_time": "5:55PM",
            "end_time": "6:10PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Karen",
            "start_time": "6:31PM",
            "end_time": "6:46PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Charles",
            "start_time": "9:45PM",
            "end_time": "10:45PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    'Chinatown': {'Mission District': 18, 'Alamo Square': 17, 'Pacific Heights': 10, 'Union Square': 7, 'Golden Gate Park': 23, 'Sunset District': 29, 'Presidio': 19},\n    'Mission District': {'Chinatown': 16, 'Alamo Square': 11, 'Pacific Heights': 16, 'Union Square': 15, 'Golden Gate Park': 17, 'Sunset District': 24, 'Presidio': 25},\n    'Alamo Square': {'Chinatown': 16, 'Mission District': 10, 'Pacific Heights': 10, 'Union Square': 14, 'Golden Gate Park': 9, 'Sunset District': 16, 'Presidio': 18},\n    'Pacific Heights': {'Chinatown': 11, 'Mission District': 15, 'Alamo Square': 10, 'Union Square': 12, 'Golden Gate Park': 15, 'Sunset District': 21, 'Presidio': 11},\n    'Union Square': {'Chinatown': 7, 'Mission District': 14, 'Alamo Square': 15, 'Pacific Heights': 15, 'Golden Gate Park': 22, 'Sunset District': 26, 'Presidio': 24},\n    'Golden Gate Park': {'Chinatown': 23, 'Mission District': 17, 'Alamo Square': 10, 'Pacific Heights': 16, 'Union Square': 22, 'Sunset District': 10, 'Presidio': 11},\n    'Sunset District': {'Chinatown': 30, 'Mission District': 24, 'Alamo Square': 17, 'Pacific Heights': 21, 'Union Square': 30, 'Golden Gate Park': 11, 'Presidio': 16},\n    'Presidio': {'Chinatown': 21, 'Mission District': 26, 'Alamo Square': 18, 'Pacific Heights': 11, 'Union Square': 22, 'Golden Gate Park': 12, 'Sunset District': 15},\n}\n\n# Define meeting constraints\nmeetings = [\n    {'name': 'David', 'location': 'Mission District','start': '8:00AM', 'end': '7:45PM', 'duration': 45},\n    {'name': 'Kenneth', 'location': 'Alamo Square','start': '2:00PM', 'end': '7:45PM', 'duration': 120},\n    {'name': 'John', 'location': 'Pacific Heights','start': '5:00PM', 'end': '8:00PM', 'duration': 15},\n    {'name': 'Charles', 'location': 'Union Square','start': '9:45PM', 'end': '10:45PM', 'duration': 60},\n    {'name': 'Deborah', 'location': 'Golden Gate Park','start': '7:00AM', 'end': '6:15PM', 'duration': 90},\n    {'name': 'Karen', 'location': 'Sunset District','start': '5:45PM', 'end': '9:15PM', 'duration': 15},\n    {'name': 'Carol', 'location': 'Presidio','start': '8:15AM', 'end': '9:15AM', 'duration': 30},\n]\n\n# Convert times to datetime objects\ndef convert_time(time_str):\n    time_str = time_str.replace('AM', 'AM ').replace('PM', 'PM ')\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Create schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Chinatown'\nschedule.append({'action':'start', 'location': current_location, 'time': '9:00AM'})\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: convert_time(x['start']))\n\n# Iterate over meetings\nfor meeting in meetings:\n    # Travel to meeting location\n    travel_duration = travel_times[current_location][meeting['location']]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, 'time': current_time.strftime('%I:%M%p'), 'to': meeting['location']})\n    schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n    \n    # Wait until meeting start time\n    meeting_start_time = convert_time(meeting['start'])\n    if travel_end_time < meeting_start_time:\n        wait_duration = (meeting_start_time - travel_end_time).total_seconds() / 60\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n        current_time = meeting_start_time\n    else:\n        current_time = travel_end_time\n    \n    # Meet\n    meeting_end_time = current_time + timedelta(minutes=meeting['duration'])\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': current_time.strftime('%I:%M%p')})\n    current_time = meeting_end_time\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_609"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Mark",
            "start_time": "9:10AM",
            "end_time": "9:40AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Betty",
            "start_time": "10:06AM",
            "end_time": "10:21AM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Brian",
            "start_time": "10:40AM",
            "end_time": "11:10AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Joseph",
            "start_time": "11:31AM",
            "end_time": "1:01PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Stephanie",
            "start_time": "1:11PM",
            "end_time": "2:26PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Lisa",
            "start_time": "3:30PM",
            "end_time": "4:15PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Patricia",
            "start_time": "4:34PM",
            "end_time": "6:34PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "William",
            "start_time": "6:47PM",
            "end_time": "7:47PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Karen",
            "start_time": "8:10PM",
            "end_time": "9:55PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    'Financial District': {'Fisherman\\'s Wharf': 10, 'Presidio': 22, 'Bayview': 19, 'Haight-Ashbury': 19, 'Russian Hill': 11, 'The Castro': 20, 'Marina District': 15, 'Richmond District': 21, 'Union Square': 9, 'Sunset District': 30},\n    'Fisherman\\'s Wharf': {'Financial District': 11, 'Presidio': 17, 'Bayview': 26, 'Haight-Ashbury': 22, 'Russian Hill': 7, 'The Castro': 27, 'Marina District': 9, 'Richmond District': 18, 'Union Square': 13, 'Sunset District': 27},\n    'Presidio': {'Financial District': 23, 'Fisherman\\'s Wharf': 19, 'Bayview': 31, 'Haight-Ashbury': 15, 'Russian Hill': 14, 'The Castro': 21, 'Marina District': 11, 'Richmond District': 7, 'Union Square': 22, 'Sunset District': 15},\n    'Bayview': {'Financial District': 19, 'Fisherman\\'s Wharf': 25, 'Presidio': 32, 'Haight-Ashbury': 19, 'Russian Hill': 23, 'The Castro': 19, 'Marina District': 27, 'Richmond District': 25, 'Union Square': 18, 'Sunset District': 23},\n    'Haight-Ashbury': {'Financial District': 21, 'Fisherman\\'s Wharf': 23, 'Presidio': 15, 'Bayview': 18, 'Russian Hill': 17, 'The Castro': 6, 'Marina District': 17, 'Richmond District': 10, 'Union Square': 19, 'Sunset District': 15},\n    'Russian Hill': {'Financial District': 11, 'Fisherman\\'s Wharf': 7, 'Presidio': 14, 'Bayview': 23, 'Haight-Ashbury': 17, 'The Castro': 21, 'Marina District': 7, 'Richmond District': 14, 'Union Square': 10, 'Sunset District': 23},\n    'The Castro': {'Financial District': 21, 'Fisherman\\'s Wharf': 24, 'Presidio': 20, 'Bayview': 19, 'Haight-Ashbury': 6, 'Russian Hill': 18, 'Marina District': 21, 'Richmond District': 16, 'Union Square': 19, 'Sunset District': 17},\n    'Marina District': {'Financial District': 17, 'Fisherman\\'s Wharf': 10, 'Presidio': 10, 'Bayview': 27, 'Haight-Ashbury': 16, 'Russian Hill': 8, 'The Castro': 22, 'Richmond District': 11, 'Union Square': 16, 'Sunset District': 19},\n    'Richmond District': {'Financial District': 22, 'Fisherman\\'s Wharf': 18, 'Presidio': 7, 'Bayview': 27, 'Haight-Ashbury': 10, 'Russian Hill': 13, 'The Castro': 16, 'Marina District': 9, 'Union Square': 21, 'Sunset District': 11},\n    'Union Square': {'Financial District': 9, 'Fisherman\\'s Wharf': 15, 'Presidio': 24, 'Bayview': 15, 'Haight-Ashbury': 18, 'Russian Hill': 13, 'The Castro': 17, 'Marina District': 18, 'Richmond District': 20, 'Sunset District': 27},\n    'Sunset District': {'Financial District': 30, 'Fisherman\\'s Wharf': 29, 'Presidio': 16, 'Bayview': 22, 'Haight-Ashbury': 15, 'Russian Hill': 24, 'The Castro': 17, 'Marina District': 21, 'Richmond District': 12, 'Union Square': 30},\n}\n\n# Define meeting constraints\nmeetings = [\n    {'name': 'Mark', 'location': 'Fisherman\\'s Wharf','start': '8:15AM', 'end': '10:00AM', 'duration': 30},\n    {'name': 'Stephanie', 'location': 'Presidio','start': '12:15PM', 'end': '3:00PM', 'duration': 75},\n    {'name': 'Betty', 'location': 'Bayview','start': '7:15AM', 'end': '8:30PM', 'duration': 15},\n    {'name': 'Lisa', 'location': 'Haight-Ashbury','start': '3:30PM', 'end': '6:30PM', 'duration': 45},\n    {'name': 'William', 'location': 'Russian Hill','start': '6:45PM', 'end': '8:00PM', 'duration': 60},\n    {'name': 'Brian', 'location': 'The Castro','start': '9:15AM', 'end': '1:15PM', 'duration': 30},\n    {'name': 'Joseph', 'location': 'Marina District','start': '10:45AM', 'end': '3:00PM', 'duration': 90},\n    {'name': 'Ashley', 'location': 'Richmond District','start': '9:45AM', 'end': '11:15AM', 'duration': 45},\n    {'name': 'Patricia', 'location': 'Union Square','start': '4:30PM', 'end': '8:00PM', 'duration': 120},\n    {'name': 'Karen', 'location': 'Sunset District','start': '4:30PM', 'end': '10:00PM', 'duration': 105},\n]\n\n# Convert times to datetime objects\ndef convert_time(time_str):\n    time_str = time_str.replace('AM', 'AM ').replace('PM', 'PM ')\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Create schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Financial District'\nschedule.append({'action':'start', 'location': current_location, 'time': '9:00AM'})\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: convert_time(x['start']))\n\n# Iterate over meetings\nfor meeting in meetings:\n    # Travel to meeting location\n    travel_duration = travel_times[current_location][meeting['location']]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, 'time': current_time.strftime('%I:%M%p'), 'to': meeting['location']})\n    schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n    \n    # Wait until meeting start time\n    meeting_start_time = convert_time(meeting['start'])\n    if travel_end_time < meeting_start_time:\n        wait_duration = (meeting_start_time - travel_end_time).total_seconds() / 60\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n        current_time = meeting_start_time\n    else:\n        current_time = travel_end_time\n    \n    # Meet\n    meeting_end_time = current_time + timedelta(minutes=meeting['duration'])\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': current_time.strftime('%I:%M%p')})\n    current_time = meeting_end_time\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_908"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Helen",
            "start_time": "9:09AM",
            "end_time": "9:24AM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Kevin",
            "start_time": "10:45AM",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Betty",
            "start_time": "7:00PM",
            "end_time": "8:30PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    'Pacific Heights': {'North Beach': 9, 'Financial District': 13, 'Alamo Square': 10, 'Mission District': 15},\n    'North Beach': {'Pacific Heights': 8, 'Financial District': 8, 'Alamo Square': 16, 'Mission District': 18},\n    'Financial District': {'Pacific Heights': 13, 'North Beach': 7, 'Alamo Square': 17, 'Mission District': 17},\n    'Alamo Square': {'Pacific Heights': 10, 'North Beach': 15, 'Financial District': 17, 'Mission District': 10},\n    'Mission District': {'Pacific Heights': 16, 'North Beach': 17, 'Financial District': 17, 'Alamo Square': 11},\n}\n\n# Define meeting constraints\nmeetings = [\n    {'name': 'Helen', 'location': 'North Beach','start': '9:00AM', 'end': '5:00PM', 'duration': 15},\n    {'name': 'Betty', 'location': 'Financial District','start': '7:00PM', 'end': '9:45PM', 'duration': 90},\n    {'name': 'Amanda', 'location': 'Alamo Square','start': '7:45PM', 'end': '9:00PM', 'duration': 60},\n    {'name': 'Kevin', 'location': 'Mission District','start': '10:45AM', 'end': '2:45PM', 'duration': 45},\n]\n\n# Convert times to datetime objects\ndef convert_time(time_str):\n    time_str = time_str.replace('AM', 'AM ').replace('PM', 'PM ')\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Create schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Pacific Heights'\nschedule.append({'action':'start', 'location': current_location, 'time': '9:00AM'})\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: convert_time(x['start']))\n\n# Iterate over meetings\nfor meeting in meetings:\n    # Travel to meeting location\n    travel_duration = travel_times[current_location][meeting['location']]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, 'time': current_time.strftime('%I:%M%p'), 'to': meeting['location']})\n    schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n    \n    # Wait until meeting start time\n    meeting_start_time = convert_time(meeting['start'])\n    if travel_end_time < meeting_start_time:\n        wait_duration = (meeting_start_time - travel_end_time).total_seconds() / 60\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n        current_time = meeting_start_time\n    else:\n        current_time = travel_end_time\n    \n    # Meet\n    meeting_end_time = current_time + timedelta(minutes=meeting['duration'])\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': current_time.strftime('%I:%M%p')})\n    current_time = meeting_end_time\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_335"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Matthew",
            "start_time": "9:12AM",
            "end_time": "9:27AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Michelle",
            "start_time": "10:30AM",
            "end_time": "11:45AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Carol",
            "start_time": "12:00PM",
            "end_time": "1:30PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Stephanie",
            "start_time": "1:37PM",
            "end_time": "2:07PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Jessica",
            "start_time": "3:45PM",
            "end_time": "4:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Linda",
            "start_time": "4:56PM",
            "end_time": "6:26PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "8:45PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    'Sunset District': {'Russian Hill': 24, 'The Castro': 17, 'Richmond District': 12, 'Marina District': 21, 'North Beach': 29, 'Union Square': 30, 'Golden Gate Park': 11},\n    'Russian Hill': {'Sunset District': 23, 'The Castro': 21, 'Richmond District': 14, 'Marina District': 7, 'North Beach': 5, 'Union Square': 11, 'Golden Gate Park': 21},\n    'The Castro': {'Sunset District': 17, 'Russian Hill': 18, 'Richmond District': 16, 'Marina District': 21, 'North Beach': 20, 'Union Square': 19, 'Golden Gate Park': 11},\n    'Richmond District': {'Sunset District': 11, 'Russian Hill': 13, 'The Castro': 16, 'Marina District': 9, 'North Beach': 17, 'Union Square': 21, 'Golden Gate Park': 9},\n    'Marina District': {'Sunset District': 19, 'Russian Hill': 8, 'The Castro': 22, 'Richmond District': 11, 'North Beach': 11, 'Union Square': 16, 'Golden Gate Park': 18},\n    'North Beach': {'Sunset District': 27, 'Russian Hill': 4, 'The Castro': 22, 'Richmond District': 18, 'Marina District': 9, 'Union Square': 7, 'Golden Gate Park': 22},\n    'Union Square': {'Sunset District': 26, 'Russian Hill': 13, 'The Castro': 19, 'Richmond District': 20, 'Marina District': 18, 'North Beach': 10, 'Golden Gate Park': 22},\n    'Golden Gate Park': {'Sunset District': 10, 'Russian Hill': 19, 'The Castro': 13, 'Richmond District': 7, 'Marina District': 16, 'North Beach': 24, 'Union Square': 22},\n}\n\n# Define meeting constraints\nmeetings = [\n    {'name': 'Karen', 'location': 'Russian Hill','start': '8:45PM', 'end': '9:45PM', 'duration': 60},\n    {'name': 'Jessica', 'location': 'The Castro','start': '3:45PM', 'end': '7:30PM', 'duration': 60},\n    {'name': 'Matthew', 'location': 'Richmond District','start': '7:30AM', 'end': '3:15PM', 'duration': 15},\n    {'name': 'Michelle', 'location': 'Marina District','start': '10:30AM', 'end': '6:45PM', 'duration': 75},\n    {'name': 'Carol', 'location': 'North Beach','start': '12:00PM', 'end': '5:00PM', 'duration': 90},\n    {'name': 'Stephanie', 'location': 'Union Square','start': '10:45AM', 'end': '2:15PM', 'duration': 30},\n    {'name': 'Linda', 'location': 'Golden Gate Park','start': '10:45AM', 'end': '10:00PM', 'duration': 90},\n]\n\n# Convert times to datetime objects\ndef convert_time(time_str):\n    time_str = time_str.replace('AM', 'AM ').replace('PM', 'PM ')\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Create schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Sunset District'\nschedule.append({'action':'start', 'location': current_location, 'time': '9:00AM'})\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: convert_time(x['start']))\n\n# Iterate over meetings\nfor meeting in meetings:\n    # Travel to meeting location\n    travel_duration = travel_times[current_location][meeting['location']]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, 'time': current_time.strftime('%I:%M%p'), 'to': meeting['location']})\n    schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n    \n    # Wait until meeting start time\n    meeting_start_time = convert_time(meeting['start'])\n    if travel_end_time < meeting_start_time:\n        wait_duration = (meeting_start_time - travel_end_time).total_seconds() / 60\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n        current_time = meeting_start_time\n    else:\n        current_time = travel_end_time\n    \n    # Meet\n    meeting_end_time = current_time + timedelta(minutes=meeting['duration'])\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': current_time.strftime('%I:%M%p')})\n    current_time = meeting_end_time\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_607"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Joseph",
            "start_time": "9:24AM",
            "end_time": "10:54AM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Kevin",
            "start_time": "11:16AM",
            "end_time": "11:46AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Barbara",
            "start_time": "12:03PM",
            "end_time": "12:18PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Jeffrey",
            "start_time": "5:30PM",
            "end_time": "6:30PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    'Golden Gate Park': {'Fisherman\\'s Wharf': 24, 'Bayview': 23, 'Mission District': 17, 'Embarcadero': 25, 'Financial District': 26},\n    'Fisherman\\'s Wharf': {'Golden Gate Park': 25, 'Bayview': 26, 'Mission District': 22, 'Embarcadero': 8, 'Financial District': 11},\n    'Bayview': {'Golden Gate Park': 22, 'Fisherman\\'s Wharf': 25, 'Mission District': 13, 'Embarcadero': 19, 'Financial District': 19},\n    'Mission District': {'Golden Gate Park': 17, 'Fisherman\\'s Wharf': 22, 'Bayview': 15, 'Embarcadero': 19, 'Financial District': 17},\n    'Embarcadero': {'Golden Gate Park': 25, 'Fisherman\\'s Wharf': 6, 'Bayview': 21, 'Mission District': 20, 'Financial District': 5},\n    'Financial District': {'Golden Gate Park': 23, 'Fisherman\\'s Wharf': 10, 'Bayview': 19, 'Mission District': 17, 'Embarcadero': 4},\n}\n\n# Define meeting constraints\nmeetings = [\n    {'name': 'Joseph', 'location': 'Fisherman\\'s Wharf','start': '8:00AM', 'end': '5:30PM', 'duration': 90},\n    {'name': 'Jeffrey', 'location': 'Bayview','start': '5:30PM', 'end': '9:30PM', 'duration': 60},\n    {'name': 'Kevin', 'location': 'Mission District','start': '11:15AM', 'end': '3:15PM', 'duration': 30},\n    {'name': 'David', 'location': 'Embarcadero','start': '8:15AM', 'end': '9:00AM', 'duration': 30},\n    {'name': 'Barbara', 'location': 'Financial District','start': '10:30AM', 'end': '4:30PM', 'duration': 15},\n]\n\n# Convert times to datetime objects\ndef convert_time(time_str):\n    time_str = time_str.replace('AM', 'AM ').replace('PM', 'PM ')\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Create schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Golden Gate Park'\nschedule.append({'action':'start', 'location': current_location, 'time': '9:00AM'})\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: convert_time(x['start']))\n\n# Iterate over meetings\nfor meeting in meetings:\n    # Travel to meeting location\n    travel_duration = travel_times[current_location][meeting['location']]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, 'time': current_time.strftime('%I:%M%p'), 'to': meeting['location']})\n    schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n    \n    # Wait until meeting start time\n    meeting_start_time = convert_time(meeting['start'])\n    if travel_end_time < meeting_start_time:\n        wait_duration = (meeting_start_time - travel_end_time).total_seconds() / 60\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n        current_time = meeting_start_time\n    else:\n        current_time = travel_end_time\n    \n    # Meet\n    meeting_end_time = current_time + timedelta(minutes=meeting['duration'])\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': current_time.strftime('%I:%M%p')})\n    current_time = meeting_end_time\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_432"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Nancy",
            "start_time": "9:30AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Mary",
            "start_time": "11:17AM",
            "end_time": "12:32PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Jessica",
            "start_time": "12:48PM",
            "end_time": "1:33PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    'Financial District': {'Chinatown': 5, 'Alamo Square': 17, 'Bayview': 19, 'Fisherman\\'s Wharf': 10},\n    'Chinatown': {'Financial District': 5, 'Alamo Square': 17, 'Bayview': 22, 'Fisherman\\'s Wharf': 8},\n    'Alamo Square': {'Financial District': 17, 'Chinatown': 16, 'Bayview': 16, 'Fisherman\\'s Wharf': 19},\n    'Bayview': {'Financial District': 19, 'Chinatown': 18, 'Alamo Square': 16, 'Fisherman\\'s Wharf': 25},\n    'Fisherman\\'s Wharf': {'Financial District': 11, 'Chinatown': 12, 'Alamo Square': 20, 'Bayview': 26},\n}\n\n# Define meeting constraints\nmeetings = [\n    {'name': 'Nancy', 'location': 'Chinatown','start': '9:30AM', 'end': '1:30PM', 'duration': 90},\n    {'name': 'Mary', 'location': 'Alamo Square','start': '7:00AM', 'end': '9:00PM', 'duration': 75},\n    {'name': 'Jessica', 'location': 'Bayview','start': '11:15AM', 'end': '1:45PM', 'duration': 45},\n    {'name': 'Rebecca', 'location': 'Fisherman\\'s Wharf','start': '7:00AM', 'end': '8:30AM', 'duration': 45},\n]\n\n# Convert times to datetime objects\ndef convert_time(time_str):\n    time_str = time_str.replace('AM', 'AM ').replace('PM', 'PM ')\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Create schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Financial District'\nschedule.append({'action':'start', 'location': current_location, 'time': '9:00AM'})\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: convert_time(x['start']))\n\n# Iterate over meetings\nfor meeting in meetings:\n    # Travel to meeting location\n    travel_duration = travel_times[current_location][meeting['location']]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, 'time': current_time.strftime('%I:%M%p'), 'to': meeting['location']})\n    schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n    \n    # Wait until meeting start time\n    meeting_start_time = convert_time(meeting['start'])\n    if travel_end_time < meeting_start_time:\n        wait_duration = (meeting_start_time - travel_end_time).total_seconds() / 60\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n        current_time = meeting_start_time\n    else:\n        current_time = travel_end_time\n    \n    # Meet\n    meeting_end_time = current_time + timedelta(minutes=meeting['duration'])\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': current_time.strftime('%I:%M%p')})\n    current_time = meeting_end_time\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_309"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Michelle",
            "start_time": "9:30AM",
            "end_time": "9:45AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "George",
            "start_time": "10:30AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Robert",
            "start_time": "11:19AM",
            "end_time": "11:49AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "William",
            "start_time": "6:30PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    'Sunset District': {'Russian Hill': 24, 'Chinatown': 30, 'Presidio': 16, 'Fisherman\\'s Wharf': 29},\n    'Russian Hill': {'Sunset District': 23, 'Chinatown': 9, 'Presidio': 14, 'Fisherman\\'s Wharf': 7},\n    'Chinatown': {'Sunset District': 29, 'Russian Hill': 7, 'Presidio': 19, 'Fisherman\\'s Wharf': 8},\n    'Presidio': {'Sunset District': 15, 'Russian Hill': 14, 'Chinatown': 21, 'Fisherman\\'s Wharf': 19},\n    'Fisherman\\'s Wharf': {'Sunset District': 27, 'Russian Hill': 7, 'Chinatown': 12, 'Presidio': 17},\n}\n\n# Define meeting constraints\nmeetings = [\n    {'name': 'William', 'location': 'Russian Hill','start': '6:30PM', 'end': '8:45PM', 'duration': 105},\n    {'name': 'Michelle', 'location': 'Chinatown','start': '8:15AM', 'end': '2:00PM', 'duration': 15},\n    {'name': 'George', 'location': 'Presidio','start': '10:30AM', 'end': '6:45PM', 'duration': 30},\n    {'name': 'Robert', 'location': 'Fisherman\\'s Wharf','start': '9:00AM', 'end': '1:45PM', 'duration': 30},\n]\n\n# Convert times to datetime objects\ndef convert_time(time_str):\n    time_str = time_str.replace('AM', 'AM ').replace('PM', 'PM ')\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Create schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Sunset District'\nschedule.append({'action':'start', 'location': current_location, 'time': '9:00AM'})\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: convert_time(x['start']))\n\n# Iterate over meetings\nfor meeting in meetings:\n    # Travel to meeting location\n    travel_duration = travel_times[current_location][meeting['location']]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, 'time': current_time.strftime('%I:%M%p'), 'to': meeting['location']})\n    schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n    \n    # Wait until meeting start time\n    meeting_start_time = convert_time(meeting['start'])\n    if travel_end_time < meeting_start_time:\n        wait_duration = (meeting_start_time - travel_end_time).total_seconds() / 60\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n        current_time = meeting_start_time\n    else:\n        current_time = travel_end_time\n    \n    # Meet\n    meeting_end_time = current_time + timedelta(minutes=meeting['duration'])\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': current_time.strftime('%I:%M%p')})\n    current_time = meeting_end_time\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_322"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Mary",
            "start_time": "9:25AM",
            "end_time": "10:10AM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Kevin",
            "start_time": "10:17AM",
            "end_time": "11:47AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Stephanie",
            "start_time": "12:02PM",
            "end_time": "2:02PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Deborah",
            "start_time": "3:00PM",
            "end_time": "5:00PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Emily",
            "start_time": "5:19PM",
            "end_time": "7:04PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    'Embarcadero': {'Golden Gate Park': 25, 'Haight-Ashbury': 21, 'Bayview': 21, 'Presidio': 20, 'Financial District': 5},\n    'Golden Gate Park': {'Embarcadero': 25, 'Haight-Ashbury': 7, 'Bayview': 23, 'Presidio': 11, 'Financial District': 26},\n    'Haight-Ashbury': {'Embarcadero': 20, 'Golden Gate Park': 7, 'Bayview': 18, 'Presidio': 15, 'Financial District': 21},\n    'Bayview': {'Embarcadero': 19, 'Golden Gate Park': 22, 'Haight-Ashbury': 19, 'Presidio': 31, 'Financial District': 19},\n    'Presidio': {'Embarcadero': 20, 'Golden Gate Park': 12, 'Haight-Ashbury': 15, 'Bayview': 31, 'Financial District': 23},\n    'Financial District': {'Embarcadero': 4, 'Golden Gate Park': 23, 'Haight-Ashbury': 19, 'Bayview': 19, 'Presidio': 22},\n}\n\n# Define meeting constraints\nmeetings = [\n    {'name': 'Mary', 'location': 'Golden Gate Park','start': '8:45AM', 'end': '11:45AM', 'duration': 45},\n    {'name': 'Kevin', 'location': 'Haight-Ashbury','start': '10:15AM', 'end': '4:15PM', 'duration': 90},\n    {'name': 'Deborah', 'location': 'Bayview','start': '3:00PM', 'end': '7:15PM', 'duration': 120},\n    {'name': 'Stephanie', 'location': 'Presidio','start': '10:00AM', 'end': '5:15PM', 'duration': 120},\n    {'name': 'Emily', 'location': 'Financial District','start': '11:30AM', 'end': '9:45PM', 'duration': 105},\n]\n\n# Convert times to datetime objects\ndef convert_time(time_str):\n    time_str = time_str.replace('AM', 'AM ').replace('PM', 'PM ')\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Create schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Embarcadero'\nschedule.append({'action':'start', 'location': current_location, 'time': '9:00AM'})\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: convert_time(x['start']))\n\n# Iterate over meetings\nfor meeting in meetings:\n    # Travel to meeting location\n    travel_duration = travel_times[current_location][meeting['location']]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, 'time': current_time.strftime('%I:%M%p'), 'to': meeting['location']})\n    schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n    \n    # Wait until meeting start time\n    meeting_start_time = convert_time(meeting['start'])\n    if travel_end_time < meeting_start_time:\n        wait_duration = (meeting_start_time - travel_end_time).total_seconds() / 60\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n        current_time = meeting_start_time\n    else:\n        current_time = travel_end_time\n    \n    # Meet\n    meeting_end_time = current_time + timedelta(minutes=meeting['duration'])\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': current_time.strftime('%I:%M%p')})\n    current_time = meeting_end_time\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_479"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Timothy",
            "start_time": "8:45PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    'Alamo Square': {'Richmond District': 12},\n    'Richmond District': {'Alamo Square': 13},\n}\n\n# Define meeting constraints\nmeetings = [\n    {'name': 'Timothy', 'location': 'Richmond District','start': '8:45PM', 'end': '9:30PM', 'duration': 45},\n]\n\n# Convert times to datetime objects\ndef convert_time(time_str):\n    time_str = time_str.replace('AM', 'AM ').replace('PM', 'PM ')\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Create schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Alamo Square'\nschedule.append({'action':'start', 'location': current_location, 'time': '9:00AM'})\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: convert_time(x['start']))\n\n# Iterate over meetings\nfor meeting in meetings:\n    # Travel to meeting location\n    travel_duration = travel_times[current_location][meeting['location']]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, 'time': current_time.strftime('%I:%M%p'), 'to': meeting['location']})\n    schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n    \n    # Wait until meeting start time\n    meeting_start_time = convert_time(meeting['start'])\n    if travel_end_time < meeting_start_time:\n        wait_duration = (meeting_start_time - travel_end_time).total_seconds() / 60\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n        current_time = meeting_start_time\n    else:\n        current_time = travel_end_time\n    \n    # Meet\n    meeting_end_time = current_time + timedelta(minutes=meeting['duration'])\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': current_time.strftime('%I:%M%p')})\n    current_time = meeting_end_time\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_98"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Helen",
            "start_time": "9:08AM",
            "end_time": "11:08AM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Kimberly",
            "start_time": "4:30PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Patricia",
            "start_time": "6:00PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    'Nob Hill': {'North Beach': 8, 'Fisherman\\'s Wharf': 11, 'Bayview': 19},\n    'North Beach': {'Nob Hill': 7, 'Fisherman\\'s Wharf': 5, 'Bayview': 22},\n    'Fisherman\\'s Wharf': {'Nob Hill': 11, 'North Beach': 6, 'Bayview': 26},\n    'Bayview': {'Nob Hill': 20, 'North Beach': 21, 'Fisherman\\'s Wharf': 25},\n}\n\n# Define meeting constraints\nmeetings = [\n    {'name': 'Helen', 'location': 'North Beach','start': '7:00AM', 'end': '4:45PM', 'duration': 120},\n    {'name': 'Kimberly', 'location': 'Fisherman\\'s Wharf','start': '4:30PM', 'end': '9:00PM', 'duration': 45},\n    {'name': 'Patricia', 'location': 'Bayview','start': '6:00PM', 'end': '9:15PM', 'duration': 120},\n]\n\n# Convert times to datetime objects\ndef convert_time(time_str):\n    time_str = time_str.replace('AM', 'AM ').replace('PM', 'PM ')\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Create schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Nob Hill'\nschedule.append({'action':'start', 'location': current_location, 'time': '9:00AM'})\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: convert_time(x['start']))\n\n# Iterate over meetings\nfor meeting in meetings:\n    # Travel to meeting location\n    travel_duration = travel_times[current_location][meeting['location']]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, 'time': current_time.strftime('%I:%M%p'), 'to': meeting['location']})\n    schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n    \n    # Wait until meeting start time\n    meeting_start_time = convert_time(meeting['start'])\n    if travel_end_time < meeting_start_time:\n        wait_duration = (meeting_start_time - travel_end_time).total_seconds() / 60\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n        current_time = meeting_start_time\n    else:\n        current_time = travel_end_time\n    \n    # Meet\n    meeting_end_time = current_time + timedelta(minutes=meeting['duration'])\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': current_time.strftime('%I:%M%p')})\n    current_time = meeting_end_time\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_222"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Matthew",
            "start_time": "11:00AM",
            "end_time": "12:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Kimberly",
            "start_time": "1:00PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Nancy",
            "start_time": "3:16PM",
            "end_time": "3:31PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Kenneth",
            "start_time": "3:53PM",
            "end_time": "4:53PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Margaret",
            "start_time": "5:11PM",
            "end_time": "6:41PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Helen",
            "start_time": "7:45PM",
            "end_time": "8:45PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Rebecca",
            "start_time": "9:15PM",
            "end_time": "10:15PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    'Russian Hill': {'Presidio': 14, 'Chinatown': 9, 'Pacific Heights': 7, 'Richmond District': 14, 'Fisherman\\'s Wharf': 7, 'Golden Gate Park': 21, 'Bayview': 23},\n    'Presidio': {'Russian Hill': 14, 'Chinatown': 21, 'Pacific Heights': 11, 'Richmond District': 7, 'Fisherman\\'s Wharf': 19, 'Golden Gate Park': 12, 'Bayview': 31},\n    'Chinatown': {'Russian Hill': 7, 'Presidio': 19, 'Pacific Heights': 10, 'Richmond District': 20, 'Fisherman\\'s Wharf': 8, 'Golden Gate Park': 23, 'Bayview': 22},\n    'Pacific Heights': {'Russian Hill': 7, 'Presidio': 11, 'Chinatown': 11, 'Richmond District': 12, 'Fisherman\\'s Wharf': 13, 'Golden Gate Park': 15, 'Bayview': 22},\n    'Richmond District': {'Russian Hill': 13, 'Presidio': 7, 'Chinatown': 20, 'Pacific Heights': 10, 'Fisherman\\'s Wharf': 18, 'Golden Gate Park': 9, 'Bayview': 26},\n    'Fisherman\\'s Wharf': {'Russian Hill': 7, 'Presidio': 17, 'Chinatown': 12, 'Pacific Heights': 12, 'Richmond District': 18, 'Golden Gate Park': 25, 'Bayview': 26},\n    'Golden Gate Park': {'Russian Hill': 19, 'Presidio': 11, 'Chinatown': 23, 'Pacific Heights': 16, 'Richmond District': 7, 'Fisherman\\'s Wharf': 24, 'Bayview': 23},\n    'Bayview': {'Russian Hill': 23, 'Presidio': 31, 'Chinatown': 18, 'Pacific Heights': 23, 'Richmond District': 25, 'Fisherman\\'s Wharf': 25, 'Golden Gate Park': 22},\n}\n\n# Define meeting constraints\nmeetings = [\n    {'name': 'Matthew', 'location': 'Presidio','start': '11:00AM', 'end': '9:00PM', 'duration': 90},\n    {'name': 'Margaret', 'location': 'Chinatown','start': '9:15AM', 'end': '6:45PM', 'duration': 90},\n    {'name': 'Nancy', 'location': 'Pacific Heights','start': '2:15PM', 'end': '5:00PM', 'duration': 15},\n    {'name': 'Helen', 'location': 'Richmond District','start': '7:45PM', 'end': '10:00PM', 'duration': 60},\n    {'name': 'Rebecca', 'location': 'Fisherman\\'s Wharf','start': '9:15PM', 'end': '10:15PM', 'duration': 60},\n    {'name': 'Kimberly', 'location': 'Golden Gate Park','start': '1:00PM', 'end': '4:30PM', 'duration': 120},\n    {'name': 'Kenneth', 'location': 'Bayview','start': '2:30PM', 'end': '6:00PM', 'duration': 60},\n]\n\n# Convert times to datetime objects\ndef convert_time(time_str):\n    time_str = time_str.replace('AM', 'AM ').replace('PM', 'PM ')\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Create schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Russian Hill'\nschedule.append({'action':'start', 'location': current_location, 'time': '9:00AM'})\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: convert_time(x['start']))\n\n# Iterate over meetings\nfor meeting in meetings:\n    # Travel to meeting location\n    travel_duration = travel_times[current_location][meeting['location']]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, 'time': current_time.strftime('%I:%M%p'), 'to': meeting['location']})\n    schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n    \n    # Wait until meeting start time\n    meeting_start_time = convert_time(meeting['start'])\n    if travel_end_time < meeting_start_time:\n        wait_duration = (meeting_start_time - travel_end_time).total_seconds() / 60\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n        current_time = meeting_start_time\n    else:\n        current_time = travel_end_time\n    \n    # Meet\n    meeting_end_time = current_time + timedelta(minutes=meeting['duration'])\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': current_time.strftime('%I:%M%p')})\n    current_time = meeting_end_time\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_629"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Rebecca",
            "start_time": "9:19AM",
            "end_time": "10:49AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "James",
            "start_time": "11:05AM",
            "end_time": "12:35PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Sarah",
            "start_time": "12:54PM",
            "end_time": "2:24PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Melissa",
            "start_time": "2:49PM",
            "end_time": "4:19PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Amanda",
            "start_time": "6:30PM",
            "end_time": "8:00PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    'The Castro': {'Bayview': 19, 'Pacific Heights': 16, 'Alamo Square': 8, 'Fisherman\\'s Wharf': 24, 'Golden Gate Park': 11},\n    'Bayview': {'The Castro': 20, 'Pacific Heights': 23, 'Alamo Square': 16, 'Fisherman\\'s Wharf': 25, 'Golden Gate Park': 22},\n    'Pacific Heights': {'The Castro': 16, 'Bayview': 22, 'Alamo Square': 10, 'Fisherman\\'s Wharf': 13, 'Golden Gate Park': 15},\n    'Alamo Square': {'The Castro': 8, 'Bayview': 16, 'Pacific Heights': 10, 'Fisherman\\'s Wharf': 19, 'Golden Gate Park': 9},\n    'Fisherman\\'s Wharf': {'The Castro': 26, 'Bayview': 26, 'Pacific Heights': 12, 'Alamo Square': 20, 'Golden Gate Park': 25},\n    'Golden Gate Park': {'The Castro': 13, 'Bayview': 23, 'Pacific Heights': 16, 'Alamo Square': 10, 'Fisherman\\'s Wharf': 24},\n}\n\n# Define meeting constraints\nmeetings = [\n    {'name': 'Rebecca', 'location': 'Bayview','start': '9:00AM', 'end': '12:45PM', 'duration': 90},\n    {'name': 'Amanda', 'location': 'Pacific Heights','start': '6:30PM', 'end': '9:45PM', 'duration': 90},\n    {'name': 'James', 'location': 'Alamo Square','start': '9:45AM', 'end': '9:15PM', 'duration': 90},\n    {'name': 'Sarah', 'location': 'Fisherman\\'s Wharf','start': '8:00AM', 'end': '9:30PM', 'duration': 90},\n    {'name': 'Melissa', 'location': 'Golden Gate Park','start': '9:00AM', 'end': '6:45PM', 'duration': 90},\n]\n\n# Convert times to datetime objects\ndef convert_time(time_str):\n    time_str = time_str.replace('AM', 'AM ').replace('PM', 'PM ')\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Create schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'The Castro'\nschedule.append({'action':'start', 'location': current_location, 'time': '9:00AM'})\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: convert_time(x['start']))\n\n# Iterate over meetings\nfor meeting in meetings:\n    # Travel to meeting location\n    travel_duration = travel_times[current_location][meeting['location']]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, 'time': current_time.strftime('%I:%M%p'), 'to': meeting['location']})\n    schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n    \n    # Wait until meeting start time\n    meeting_start_time = convert_time(meeting['start'])\n    if travel_end_time < meeting_start_time:\n        wait_duration = (meeting_start_time - travel_end_time).total_seconds() / 60\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n        current_time = meeting_start_time\n    else:\n        current_time = travel_end_time\n    \n    # Meet\n    meeting_end_time = current_time + timedelta(minutes=meeting['duration'])\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': current_time.strftime('%I:%M%p')})\n    current_time = meeting_end_time\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_468"
    },
    {
      "final_program_time": {
        "itinerary": "None"
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Union Square",
            "person": "William",
            "start_time": "10:45AM",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Sandra",
            "start_time": "11:40AM",
            "end_time": "11:55AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Elizabeth",
            "start_time": "12:15PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Carol",
            "start_time": "2:09PM",
            "end_time": "3:09PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Anthony",
            "start_time": "3:32PM",
            "end_time": "4:47PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Stephanie",
            "start_time": "4:54PM",
            "end_time": "6:09PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Barbara",
            "start_time": "7:15PM",
            "end_time": "8:30PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Kenneth",
            "start_time": "9:15PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "has_error": true,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    'Marina District': {'Richmond District': 11, 'Union Square': 16, 'Nob Hill': 12, 'Fisherman\\'s Wharf': 10, 'Golden Gate Park': 18, 'Embarcadero': 14, 'Financial District': 17, 'North Beach': 11, 'Presidio': 10},\n    'Richmond District': {'Marina District': 9, 'Union Square': 21, 'Nob Hill': 17, 'Fisherman\\'s Wharf': 18, 'Golden Gate Park': 9, 'Embarcadero': 19, 'Financial District': 22, 'North Beach': 17, 'Presidio': 7},\n    'Union Square': {'Marina District': 18, 'Richmond District': 20, 'Nob Hill': 9, 'Fisherman\\'s Wharf': 15, 'Golden Gate Park': 22, 'Embarcadero': 11, 'Financial District': 9, 'North Beach': 10, 'Presidio': 24},\n    'Nob Hill': {'Marina District': 11, 'Richmond District': 14, 'Union Square': 7, 'Fisherman\\'s Wharf': 10, 'Golden Gate Park': 17, 'Embarcadero': 9, 'Financial District': 9, 'North Beach': 8, 'Presidio': 17},\n    'Fisherman\\'s Wharf': {'Marina District': 9, 'Richmond District': 18, 'Union Square': 13, 'Nob Hill': 11, 'Golden Gate Park': 25, 'Embarcadero': 8, 'Financial District': 11, 'North Beach': 6, 'Presidio': 17},\n    'Golden Gate Park': {'Marina District': 16, 'Richmond District': 7, 'Union Square': 22, 'Nob Hill': 20, 'Fisherman\\'s Wharf': 24, 'Embarcadero': 25, 'Financial District': 26, 'North Beach': 23, 'Presidio': 11},\n    'Embarcadero': {'Marina District': 12, 'Richmond District': 21, 'Union Square': 10, 'Nob Hill': 10, 'Fisherman\\'s Wharf': 6, 'Golden Gate Park': 25, 'Financial District': 5, 'North Beach': 5, 'Presidio': 20},\n    'Financial District': {'Marina District': 15, 'Richmond District': 21, 'Union Square': 9, 'Nob Hill': 8, 'Fisherman\\'s Wharf': 10, 'Golden Gate Park': 23, 'Embarcadero': 4, 'North Beach': 7, 'Presidio': 22},\n    'North Beach': {'Marina District': 9, 'Richmond District': 18, 'Union Square': 7, 'Nob Hill': 7, 'Fisherman\\'s Wharf': 5, 'Golden Gate Park': 22, 'Embarcadero': 6, 'Financial District': 8, 'Presidio': 17},\n    'Presidio': {'Marina District': 11, 'Richmond District': 7, 'Union Square': 22, 'Nob Hill': 18, 'Fisherman\\'s Wharf': 19, 'Golden Gate Park': 12, 'Embarcadero': 20, 'Financial District': 23, 'North Beach': 18},\n}\n\n# Define meeting constraints\nmeetings = [\n    {'name': 'Stephanie', 'location': 'Richmond District','start': '4:15PM', 'end': '9:30PM', 'duration': 75},\n    {'name': 'William', 'location': 'Union Square','start': '10:45AM', 'end': '5:30PM', 'duration': 45},\n    {'name': 'Elizabeth', 'location': 'Nob Hill','start': '12:15PM', 'end': '3:00PM', 'duration': 105},\n    {'name': 'Joseph', 'location': 'Fisherman\\'s Wharf','start': '12:45PM', 'end': '2:00PM', 'duration': 75},\n    {'name': 'Anthony', 'location': 'Golden Gate Park','start': '1:00PM', 'end': '8:30PM', 'duration': 75},\n    {'name': 'Barbara', 'location': 'Embarcadero','start': '7:15PM', 'end': '8:30PM', 'duration': 75},\n    {'name': 'Carol', 'location': 'Financial District','start': '11:45AM', 'end': '4:15PM', 'duration': 60},\n    {'name': 'Sandra', 'location': 'North Beach','start': '10:00AM', 'end': '12:30PM', 'duration': 15},\n    {'name': 'Kenneth', 'location': 'Presidio','start': '9:15PM', 'end': '10:15PM', 'duration': 45},\n]\n\n# Convert times to datetime objects\ndef convert_time(time_str):\n    time_str = time_str.replace('AM', 'AM ').replace('PM', 'PM ')\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Create schedule\nschedule = []\ncurrent_time = convert_time('9:00AM')\ncurrent_location = 'Marina District'\nschedule.append({'action':'start', 'location': current_location, 'time': '9:00AM'})\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: convert_time(x['start']))\n\n# Iterate over meetings\nfor meeting in meetings:\n    # Travel to meeting location\n    travel_duration = travel_times[current_location][meeting['location']]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({'action': 'travel', 'location': current_location, 'duration': travel_duration, 'time': current_time.strftime('%I:%M%p'), 'to': meeting['location']})\n    schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n    \n    # Wait until meeting start time\n    meeting_start_time = convert_time(meeting['start'])\n    if travel_end_time < meeting_start_time:\n        wait_duration = (meeting_start_time - travel_end_time).total_seconds() / 60\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': travel_end_time.strftime('%I:%M%p')})\n        current_time = meeting_start_time\n    else:\n        current_time = travel_end_time\n    \n    # Meet\n    meeting_end_time = current_time + timedelta(minutes=meeting['duration'])\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': current_time.strftime('%I:%M%p')})\n    current_time = meeting_end_time\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_828"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Melissa",
            "start_time": "8:15PM",
            "end_time": "8:45PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Barbara",
            "start_time": "8:53PM",
            "end_time": "9:08PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Kimberly",
            "start_time": "9:10AM",
            "end_time": "9:25AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Kenneth",
            "start_time": "12:15PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Brian",
            "start_time": "2:10PM",
            "end_time": "2:55PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Joseph",
            "start_time": "3:30PM",
            "end_time": "4:45PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Betty",
            "start_time": "7:00PM",
            "end_time": "8:30PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Melissa",
            "start_time": "8:36PM",
            "end_time": "9:06PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Barbara",
            "start_time": "9:14PM",
            "end_time": "9:29PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Union Square\": {\n        \"The Castro\": 17,\n        \"North Beach\": 10,\n        \"Embarcadero\": 11,\n        \"Alamo Square\": 15,\n        \"Nob Hill\": 9,\n        \"Presidio\": 24,\n        \"Fisherman's Wharf\": 15,\n        \"Mission District\": 14,\n        \"Haight-Ashbury\": 18\n    },\n    \"The Castro\": {\n        \"Union Square\": 19,\n        \"North Beach\": 20,\n        \"Embarcadero\": 22,\n        \"Alamo Square\": 8,\n        \"Nob Hill\": 16,\n        \"Presidio\": 20,\n        \"Fisherman's Wharf\": 24,\n        \"Mission District\": 7,\n        \"Haight-Ashbury\": 6\n    },\n    \"North Beach\": {\n        \"Union Square\": 7,\n        \"The Castro\": 23,\n        \"Embarcadero\": 6,\n        \"Alamo Square\": 16,\n        \"Nob Hill\": 7,\n        \"Presidio\": 17,\n        \"Fisherman's Wharf\": 5,\n        \"Mission District\": 18,\n        \"Haight-Ashbury\": 18\n    },\n    \"Embarcadero\": {\n        \"Union Square\": 10,\n        \"The Castro\": 25,\n        \"North Beach\": 5,\n        \"Alamo Square\": 19,\n        \"Nob Hill\": 10,\n        \"Presidio\": 20,\n        \"Fisherman's Wharf\": 6,\n        \"Mission District\": 20,\n        \"Haight-Ashbury\": 21\n    },\n    \"Alamo Square\": {\n        \"Union Square\": 14,\n        \"The Castro\": 8,\n        \"North Beach\": 15,\n        \"Embarcadero\": 16,\n        \"Nob Hill\": 11,\n        \"Presidio\": 17,\n        \"Fisherman's Wharf\": 19,\n        \"Mission District\": 10,\n        \"Haight-Ashbury\": 5\n    },\n    \"Nob Hill\": {\n        \"Union Square\": 7,\n        \"The Castro\": 17,\n        \"North Beach\": 8,\n        \"Embarcadero\": 9,\n        \"Alamo Square\": 11,\n        \"Presidio\": 17,\n        \"Fisherman's Wharf\": 10,\n        \"Mission District\": 13,\n        \"Haight-Ashbury\": 13\n    },\n    \"Presidio\": {\n        \"Union Square\": 22,\n        \"The Castro\": 21,\n        \"North Beach\": 18,\n        \"Embarcadero\": 20,\n        \"Alamo Square\": 19,\n        \"Nob Hill\": 18,\n        \"Fisherman's Wharf\": 19,\n        \"Mission District\": 26,\n        \"Haight-Ashbury\": 15\n    },\n    \"Fisherman's Wharf\": {\n        \"Union Square\": 13,\n        \"The Castro\": 27,\n        \"North Beach\": 6,\n        \"Embarcadero\": 8,\n        \"Alamo Square\": 21,\n        \"Nob Hill\": 11,\n        \"Presidio\": 17,\n        \"Mission District\": 22,\n        \"Haight-Ashbury\": 22\n    },\n    \"Mission District\": {\n        \"Union Square\": 15,\n        \"The Castro\": 7,\n        \"North Beach\": 17,\n        \"Embarcadero\": 19,\n        \"Alamo Square\": 11,\n        \"Nob Hill\": 12,\n        \"Presidio\": 25,\n        \"Fisherman's Wharf\": 22,\n        \"Haight-Ashbury\": 12\n    },\n    \"Haight-Ashbury\": {\n        \"Union Square\": 19,\n        \"The Castro\": 6,\n        \"North Beach\": 19,\n        \"Embarcadero\": 20,\n        \"Alamo Square\": 5,\n        \"Nob Hill\": 15,\n        \"Presidio\": 15,\n        \"Fisherman's Wharf\": 23,\n        \"Mission District\": 11\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Melissa\", \"location\": \"The Castro\", \"start_time\": \"8:15PM\", \"end_time\": \"9:15PM\", \"duration\": 30},\n    {\"name\": \"Kimberly\", \"location\": \"North Beach\", \"start_time\": \"7:00AM\", \"end_time\": \"10:30AM\", \"duration\": 15},\n    {\"name\": \"Joseph\", \"location\": \"Embarcadero\", \"start_time\": \"3:30PM\", \"end_time\": \"7:30PM\", \"duration\": 75},\n    {\"name\": \"Barbara\", \"location\": \"Alamo Square\", \"start_time\": \"8:45PM\", \"end_time\": \"9:45PM\", \"duration\": 15},\n    {\"name\": \"Kenneth\", \"location\": \"Nob Hill\", \"start_time\": \"12:15PM\", \"end_time\": \"5:15PM\", \"duration\": 105},\n    {\"name\": \"Joshua\", \"location\": \"Presidio\", \"start_time\": \"4:30PM\", \"end_time\": \"6:15PM\", \"duration\": 105},\n    {\"name\": \"Brian\", \"location\": \"Fisherman's Wharf\", \"start_time\": \"9:30AM\", \"end_time\": \"3:30PM\", \"duration\": 45},\n    {\"name\": \"Steven\", \"location\": \"Mission District\", \"start_time\": \"7:30PM\", \"end_time\": \"9:00PM\", \"duration\": 90},\n    {\"name\": \"Betty\", \"location\": \"Haight-Ashbury\", \"start_time\": \"7:00PM\", \"end_time\": \"8:30PM\", \"duration\": 90}\n]\n\n# Start time\nstart_time = \"9:00AM\"\n\n# Function to convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    if \"PM\" in time and hours!= 12:\n        hours += 12\n    elif \"AM\" in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    return hours * 60 + minutes\n\n# Function to convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    elif hours == 12:\n        suffix = \"PM\"\n    elif hours == 0:\n        hours = 12\n        suffix = \"AM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\n# Function to calculate schedule\ndef calculate_schedule(meetings, travel_distances, start_time):\n    schedule = []\n    current_time = time_to_minutes(start_time)\n    current_location = \"Union Square\"\n\n    for meeting in meetings:\n        meeting_start_time = time_to_minutes(meeting[\"start_time\"])\n        meeting_end_time = time_to_minutes(meeting[\"end_time\"])\n        travel_duration = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + travel_duration\n\n        if arrival_time > meeting_end_time:\n            continue\n\n        schedule.append({\"action\": \"travel\", \"location\": meeting[\"location\"], \"duration\": travel_duration, \"time\": minutes_to_time(current_time), \"to\": meeting[\"location\"]})\n        schedule.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"duration\": meeting[\"duration\"], \"time\": minutes_to_time(max(arrival_time, meeting_start_time))})\n        current_time = max(arrival_time, meeting_start_time) + meeting[\"duration\"]\n        current_location = meeting[\"location\"]\n\n    return schedule\n\n# Calculate schedule\nschedule = calculate_schedule(meetings, travel_distances, start_time)\n\n# Add start action to schedule\nschedule.insert(0, {\"action\": \"start\", \"location\": \"Union Square\", \"time\": start_time})\n\n# Print schedule as JSON\nprint(\"SOLUTION:\")\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_800"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Kevin",
            "start_time": "8:45PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Jessica",
            "start_time": "9:13AM",
            "end_time": "11:13AM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "John",
            "start_time": "11:18AM",
            "end_time": "11:33AM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Nancy",
            "start_time": "11:40AM",
            "end_time": "12:25PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Rebecca",
            "start_time": "12:49PM",
            "end_time": "2:04PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Jason",
            "start_time": "3:15PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Sarah",
            "start_time": "5:30PM",
            "end_time": "6:15PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Mark",
            "start_time": "6:28PM",
            "end_time": "7:58PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Kevin",
            "start_time": "8:45PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Union Square\": {\n        \"Mission District\": 14,\n        \"Fisherman's Wharf\": 15,\n        \"Russian Hill\": 13,\n        \"Marina District\": 18,\n        \"North Beach\": 10,\n        \"Chinatown\": 7,\n        \"Pacific Heights\": 15,\n        \"The Castro\": 17,\n        \"Nob Hill\": 9,\n        \"Sunset District\": 27\n    },\n    \"Mission District\": {\n        \"Union Square\": 15,\n        \"Fisherman's Wharf\": 22,\n        \"Russian Hill\": 15,\n        \"Marina District\": 19,\n        \"North Beach\": 17,\n        \"Chinatown\": 16,\n        \"Pacific Heights\": 16,\n        \"The Castro\": 7,\n        \"Nob Hill\": 12,\n        \"Sunset District\": 24\n    },\n    \"Fisherman's Wharf\": {\n        \"Union Square\": 13,\n        \"Mission District\": 22,\n        \"Russian Hill\": 7,\n        \"Marina District\": 9,\n        \"North Beach\": 6,\n        \"Chinatown\": 12,\n        \"Pacific Heights\": 12,\n        \"The Castro\": 27,\n        \"Nob Hill\": 11,\n        \"Sunset District\": 27\n    },\n    \"Russian Hill\": {\n        \"Union Square\": 10,\n        \"Mission District\": 16,\n        \"Fisherman's Wharf\": 7,\n        \"Marina District\": 7,\n        \"North Beach\": 5,\n        \"Chinatown\": 9,\n        \"Pacific Heights\": 7,\n        \"The Castro\": 21,\n        \"Nob Hill\": 5,\n        \"Sunset District\": 23\n    },\n    \"Marina District\": {\n        \"Union Square\": 16,\n        \"Mission District\": 20,\n        \"Fisherman's Wharf\": 10,\n        \"Russian Hill\": 8,\n        \"North Beach\": 11,\n        \"Chinatown\": 15,\n        \"Pacific Heights\": 7,\n        \"The Castro\": 22,\n        \"Nob Hill\": 12,\n        \"Sunset District\": 19\n    },\n    \"North Beach\": {\n        \"Union Square\": 7,\n        \"Mission District\": 18,\n        \"Fisherman's Wharf\": 5,\n        \"Russian Hill\": 4,\n        \"Marina District\": 9,\n        \"Chinatown\": 6,\n        \"Pacific Heights\": 8,\n        \"The Castro\": 23,\n        \"Nob Hill\": 7,\n        \"Sunset District\": 27\n    },\n    \"Chinatown\": {\n        \"Union Square\": 7,\n        \"Mission District\": 17,\n        \"Fisherman's Wharf\": 8,\n        \"Russian Hill\": 7,\n        \"Marina District\": 12,\n        \"North Beach\": 3,\n        \"Pacific Heights\": 10,\n        \"The Castro\": 22,\n        \"Nob Hill\": 9,\n        \"Sunset District\": 29\n    },\n    \"Pacific Heights\": {\n        \"Union Square\": 12,\n        \"Mission District\": 15,\n        \"Fisherman's Wharf\": 13,\n        \"Russian Hill\": 7,\n        \"Marina District\": 6,\n        \"North Beach\": 9,\n        \"Chinatown\": 11,\n        \"The Castro\": 16,\n        \"Nob Hill\": 8,\n        \"Sunset District\": 21\n    },\n    \"The Castro\": {\n        \"Union Square\": 19,\n        \"Mission District\": 7,\n        \"Fisherman's Wharf\": 24,\n        \"Russian Hill\": 18,\n        \"Marina District\": 21,\n        \"North Beach\": 20,\n        \"Chinatown\": 22,\n        \"Pacific Heights\": 16,\n        \"Nob Hill\": 16,\n        \"Sunset District\": 17\n    },\n    \"Nob Hill\": {\n        \"Union Square\": 7,\n        \"Mission District\": 13,\n        \"Fisherman's Wharf\": 10,\n        \"Russian Hill\": 5,\n        \"Marina District\": 11,\n        \"North Beach\": 8,\n        \"Chinatown\": 6,\n        \"Pacific Heights\": 8,\n        \"The Castro\": 17,\n        \"Sunset District\": 24\n    },\n    \"Sunset District\": {\n        \"Union Square\": 30,\n        \"Mission District\": 25,\n        \"Fisherman's Wharf\": 29,\n        \"Russian Hill\": 24,\n        \"Marina District\": 21,\n        \"North Beach\": 28,\n        \"Chinatown\": 30,\n        \"Pacific Heights\": 21,\n        \"The Castro\": 17,\n        \"Nob Hill\": 27\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Kevin\", \"location\": \"Mission District\", \"start_time\": \"8:45PM\", \"end_time\": \"9:45PM\", \"duration\": 60},\n    {\"name\": \"Mark\", \"location\": \"Fisherman's Wharf\", \"start_time\": \"5:15PM\", \"end_time\": \"8:00PM\", \"duration\": 90},\n    {\"name\": \"Jessica\", \"location\": \"Russian Hill\", \"start_time\": \"9:00AM\", \"end_time\": \"3:00PM\", \"duration\": 120},\n    {\"name\": \"Jason\", \"location\": \"Marina District\", \"start_time\": \"3:15PM\", \"end_time\": \"9:45PM\", \"duration\": 120},\n    {\"name\": \"John\", \"location\": \"North Beach\", \"start_time\": \"9:45AM\", \"end_time\": \"6:00PM\", \"duration\": 15},\n    {\"name\": \"Karen\", \"location\": \"Chinatown\", \"start_time\": \"4:45PM\", \"end_time\": \"7:00PM\", \"duration\": 75},\n    {\"name\": \"Sarah\", \"location\": \"Pacific Heights\", \"start_time\": \"5:30PM\", \"end_time\": \"6:15PM\", \"duration\": 45},\n    {\"name\": \"Amanda\", \"location\": \"The Castro\", \"start_time\": \"8:00PM\", \"end_time\": \"9:15PM\", \"duration\": 60},\n    {\"name\": \"Nancy\", \"location\": \"Nob Hill\", \"start_time\": \"9:45AM\", \"end_time\": \"1:00PM\", \"duration\": 45},\n    {\"name\": \"Rebecca\", \"location\": \"Sunset District\", \"start_time\": \"8:45AM\", \"end_time\": \"3:00PM\", \"duration\": 75}\n]\n\n# Start time\nstart_time = \"9:00AM\"\n\n# Function to convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    if \"PM\" in time and hours!= 12:\n        hours += 12\n    elif \"AM\" in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    return hours * 60 + minutes\n\n# Function to convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    elif hours == 12:\n        suffix = \"PM\"\n    elif hours == 0:\n        hours = 12\n        suffix = \"AM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\n# Function to calculate schedule\ndef calculate_schedule(meetings, travel_distances, start_time):\n    schedule = []\n    current_time = time_to_minutes(start_time)\n    current_location = \"Union Square\"\n\n    for meeting in meetings:\n        meeting_start_time = time_to_minutes(meeting[\"start_time\"])\n        meeting_end_time = time_to_minutes(meeting[\"end_time\"])\n        travel_duration = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + travel_duration\n\n        if arrival_time > meeting_end_time:\n            continue\n\n        schedule.append({\"action\": \"travel\", \"location\": meeting[\"location\"], \"duration\": travel_duration, \"time\": minutes_to_time(current_time), \"to\": meeting[\"location\"]})\n        schedule.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"duration\": meeting[\"duration\"], \"time\": minutes_to_time(max(arrival_time, meeting_start_time))})\n        current_time = max(arrival_time, meeting_start_time) + meeting[\"duration\"]\n        current_location = meeting[\"location\"]\n\n    return schedule\n\n# Calculate schedule\nschedule = calculate_schedule(meetings, travel_distances, start_time)\n\n# Add start action to schedule\nschedule.insert(0, {\"action\": \"start\", \"location\": \"Union Square\", \"time\": start_time})\n\n# Print schedule as JSON\nprint(\"SOLUTION:\")\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_940"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Kevin",
            "start_time": "9:17AM",
            "end_time": "10:32AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Kimberly",
            "start_time": "10:45AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Joseph",
            "start_time": "6:30PM",
            "end_time": "7:15PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Thomas",
            "start_time": "7:38PM",
            "end_time": "8:23PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Kevin",
            "start_time": "9:17AM",
            "end_time": "10:32AM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Kimberly",
            "start_time": "10:45AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Joseph",
            "start_time": "6:30PM",
            "end_time": "7:15PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Thomas",
            "start_time": "7:38PM",
            "end_time": "8:23PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Sunset District\": {\n        \"Alamo Square\": 17,\n        \"Russian Hill\": 24,\n        \"Presidio\": 16,\n        \"Financial District\": 30\n    },\n    \"Alamo Square\": {\n        \"Sunset District\": 16,\n        \"Russian Hill\": 13,\n        \"Presidio\": 18,\n        \"Financial District\": 17\n    },\n    \"Russian Hill\": {\n        \"Sunset District\": 23,\n        \"Alamo Square\": 15,\n        \"Presidio\": 14,\n        \"Financial District\": 11\n    },\n    \"Presidio\": {\n        \"Sunset District\": 15,\n        \"Alamo Square\": 18,\n        \"Russian Hill\": 14,\n        \"Financial District\": 23\n    },\n    \"Financial District\": {\n        \"Sunset District\": 31,\n        \"Alamo Square\": 17,\n        \"Russian Hill\": 10,\n        \"Presidio\": 22\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Kevin\", \"location\": \"Alamo Square\", \"start_time\": \"8:15AM\", \"end_time\": \"9:30PM\", \"duration\": 75},\n    {\"name\": \"Kimberly\", \"location\": \"Russian Hill\", \"start_time\": \"8:45AM\", \"end_time\": \"12:30PM\", \"duration\": 30},\n    {\"name\": \"Joseph\", \"location\": \"Presidio\", \"start_time\": \"6:30PM\", \"end_time\": \"7:15PM\", \"duration\": 45},\n    {\"name\": \"Thomas\", \"location\": \"Financial District\", \"start_time\": \"7:00PM\", \"end_time\": \"9:45PM\", \"duration\": 45}\n]\n\n# Start time\nstart_time = \"9:00AM\"\n\n# Function to convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    if \"PM\" in time and hours!= 12:\n        hours += 12\n    elif \"AM\" in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    return hours * 60 + minutes\n\n# Function to convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    elif hours == 12:\n        suffix = \"PM\"\n    elif hours == 0:\n        hours = 12\n        suffix = \"AM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\n# Function to calculate schedule\ndef calculate_schedule(meetings, travel_distances, start_time):\n    schedule = []\n    current_time = time_to_minutes(start_time)\n    current_location = \"Sunset District\"\n\n    for meeting in meetings:\n        meeting_start_time = time_to_minutes(meeting[\"start_time\"])\n        meeting_end_time = time_to_minutes(meeting[\"end_time\"])\n        travel_duration = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + travel_duration\n\n        if arrival_time > meeting_end_time:\n            continue\n\n        schedule.append({\"action\": \"travel\", \"location\": meeting[\"location\"], \"duration\": travel_duration, \"time\": minutes_to_time(current_time), \"to\": meeting[\"location\"]})\n        schedule.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"duration\": meeting[\"duration\"], \"time\": minutes_to_time(max(arrival_time, meeting_start_time))})\n        current_time = max(arrival_time, meeting_start_time) + meeting[\"duration\"]\n        current_location = meeting[\"location\"]\n\n    return schedule\n\n# Calculate schedule\nschedule = calculate_schedule(meetings, travel_distances, start_time)\n\n# Add start action to schedule\nschedule.insert(0, {\"action\": \"start\", \"location\": \"Sunset District\", \"time\": start_time})\n\n# Print schedule as JSON\nprint(\"SOLUTION:\")\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_391"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Karen",
            "start_time": "6:45PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Mark",
            "start_time": "1:00PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Karen",
            "start_time": "6:45PM",
            "end_time": "8:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"North Beach\": {\n        \"Pacific Heights\": 8,\n        \"Embarcadero\": 6\n    },\n    \"Pacific Heights\": {\n        \"North Beach\": 9,\n        \"Embarcadero\": 10\n    },\n    \"Embarcadero\": {\n        \"North Beach\": 5,\n        \"Pacific Heights\": 11\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Karen\", \"location\": \"Pacific Heights\", \"start_time\": \"6:45PM\", \"end_time\": \"8:15PM\", \"duration\": 90},\n    {\"name\": \"Mark\", \"location\": \"Embarcadero\", \"start_time\": \"1:00PM\", \"end_time\": \"5:45PM\", \"duration\": 120}\n]\n\n# Start time\nstart_time = \"9:00AM\"\n\n# Function to convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    if \"PM\" in time and hours!= 12:\n        hours += 12\n    elif \"AM\" in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    return hours * 60 + minutes\n\n# Function to convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    elif hours == 12:\n        suffix = \"PM\"\n    elif hours == 0:\n        hours = 12\n        suffix = \"AM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\n# Function to calculate schedule\ndef calculate_schedule(meetings, travel_distances, start_time):\n    schedule = []\n    current_time = time_to_minutes(start_time)\n    current_location = \"North Beach\"\n\n    for meeting in meetings:\n        meeting_start_time = time_to_minutes(meeting[\"start_time\"])\n        meeting_end_time = time_to_minutes(meeting[\"end_time\"])\n        travel_duration = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + travel_duration\n\n        if arrival_time > meeting_end_time:\n            continue\n\n        schedule.append({\"action\": \"travel\", \"location\": meeting[\"location\"], \"duration\": travel_duration, \"time\": minutes_to_time(current_time), \"to\": meeting[\"location\"]})\n        schedule.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"duration\": meeting[\"duration\"], \"time\": minutes_to_time(max(arrival_time, meeting_start_time))})\n        current_time = max(arrival_time, meeting_start_time) + meeting[\"duration\"]\n        current_location = meeting[\"location\"]\n\n    return schedule\n\n# Calculate schedule\nschedule = calculate_schedule(meetings, travel_distances, start_time)\n\n# Add start action to schedule\nschedule.insert(0, {\"action\": \"start\", \"location\": \"North Beach\", \"time\": start_time})\n\n# Print schedule as JSON\nprint(\"SOLUTION:\")\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_143"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Karen",
            "start_time": "9:15PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Joseph",
            "start_time": "12:30PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Sandra",
            "start_time": "2:19PM",
            "end_time": "3:34PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Nancy",
            "start_time": "3:46PM",
            "end_time": "5:31PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Karen",
            "start_time": "9:15PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Union Square\": {\n        \"Nob Hill\": 9,\n        \"Haight-Ashbury\": 18,\n        \"Chinatown\": 7,\n        \"Marina District\": 18\n    },\n    \"Nob Hill\": {\n        \"Union Square\": 7,\n        \"Haight-Ashbury\": 13,\n        \"Chinatown\": 6,\n        \"Marina District\": 11\n    },\n    \"Haight-Ashbury\": {\n        \"Union Square\": 17,\n        \"Nob Hill\": 15,\n        \"Chinatown\": 19,\n        \"Marina District\": 17\n    },\n    \"Chinatown\": {\n        \"Union Square\": 7,\n        \"Nob Hill\": 8,\n        \"Haight-Ashbury\": 19,\n        \"Marina District\": 12\n    },\n    \"Marina District\": {\n        \"Union Square\": 16,\n        \"Nob Hill\": 12,\n        \"Haight-Ashbury\": 16,\n        \"Chinatown\": 16\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Karen\", \"location\": \"Nob Hill\", \"start_time\": \"9:15PM\", \"end_time\": \"9:45PM\", \"duration\": 30},\n    {\"name\": \"Joseph\", \"location\": \"Haight-Ashbury\", \"start_time\": \"12:30PM\", \"end_time\": \"7:45PM\", \"duration\": 90},\n    {\"name\": \"Sandra\", \"location\": \"Chinatown\", \"start_time\": \"7:15AM\", \"end_time\": \"7:15PM\", \"duration\": 75},\n    {\"name\": \"Nancy\", \"location\": \"Marina District\", \"start_time\": \"11:00AM\", \"end_time\": \"8:15PM\", \"duration\": 105}\n]\n\n# Start time\nstart_time = \"9:00AM\"\n\n# Function to convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    if \"PM\" in time and hours!= 12:\n        hours += 12\n    elif \"AM\" in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    return hours * 60 + minutes\n\n# Function to convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    elif hours == 12:\n        suffix = \"PM\"\n    elif hours == 0:\n        hours = 12\n        suffix = \"AM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\n# Function to calculate schedule\ndef calculate_schedule(meetings, travel_distances, start_time):\n    schedule = []\n    current_time = time_to_minutes(start_time)\n    current_location = \"Union Square\"\n\n    for meeting in meetings:\n        meeting_start_time = time_to_minutes(meeting[\"start_time\"])\n        meeting_end_time = time_to_minutes(meeting[\"end_time\"])\n        travel_duration = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + travel_duration\n\n        if arrival_time > meeting_end_time:\n            continue\n\n        schedule.append({\"action\": \"travel\", \"location\": meeting[\"location\"], \"duration\": travel_duration, \"time\": minutes_to_time(current_time), \"to\": meeting[\"location\"]})\n        schedule.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"duration\": meeting[\"duration\"], \"time\": minutes_to_time(max(arrival_time, meeting_start_time))})\n        current_time = max(arrival_time, meeting_start_time) + meeting[\"duration\"]\n        current_location = meeting[\"location\"]\n\n    return schedule\n\n# Calculate schedule\nschedule = calculate_schedule(meetings, travel_distances, start_time)\n\n# Add start action to schedule\nschedule.insert(0, {\"action\": \"start\", \"location\": \"Union Square\", \"time\": start_time})\n\n# Print schedule as JSON\nprint(\"SOLUTION:\")\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_352"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Thomas",
            "start_time": "3:30PM",
            "end_time": "5:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Stephanie",
            "start_time": "6:30PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Betty",
            "start_time": "7:16PM",
            "end_time": "8:01PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Patricia",
            "start_time": "8:15PM",
            "end_time": "9:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Laura",
            "start_time": "9:11AM",
            "end_time": "9:41AM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Thomas",
            "start_time": "3:30PM",
            "end_time": "5:30PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Stephanie",
            "start_time": "6:30PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Betty",
            "start_time": "7:16PM",
            "end_time": "8:01PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Patricia",
            "start_time": "8:15PM",
            "end_time": "9:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Fisherman's Wharf\": {\n        \"Bayview\": 26,\n        \"Golden Gate Park\": 25,\n        \"Nob Hill\": 11,\n        \"Marina District\": 9,\n        \"Embarcadero\": 8\n    },\n    \"Bayview\": {\n        \"Fisherman's Wharf\": 25,\n        \"Golden Gate Park\": 22,\n        \"Nob Hill\": 20,\n        \"Marina District\": 25,\n        \"Embarcadero\": 19\n    },\n    \"Golden Gate Park\": {\n        \"Fisherman's Wharf\": 24,\n        \"Bayview\": 23,\n        \"Nob Hill\": 20,\n        \"Marina District\": 16,\n        \"Embarcadero\": 25\n    },\n    \"Nob Hill\": {\n        \"Fisherman's Wharf\": 11,\n        \"Bayview\": 19,\n        \"Golden Gate Park\": 17,\n        \"Marina District\": 11,\n        \"Embarcadero\": 9\n    },\n    \"Marina District\": {\n        \"Fisherman's Wharf\": 10,\n        \"Bayview\": 27,\n        \"Golden Gate Park\": 18,\n        \"Nob Hill\": 12,\n        \"Embarcadero\": 14\n    },\n    \"Embarcadero\": {\n        \"Fisherman's Wharf\": 6,\n        \"Bayview\": 21,\n        \"Golden Gate Park\": 25,\n        \"Nob Hill\": 10,\n        \"Marina District\": 12\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Thomas\", \"location\": \"Bayview\", \"start_time\": \"3:30PM\", \"end_time\": \"6:30PM\", \"duration\": 120},\n    {\"name\": \"Stephanie\", \"location\": \"Golden Gate Park\", \"start_time\": \"6:30PM\", \"end_time\": \"9:45PM\", \"duration\": 30},\n    {\"name\": \"Laura\", \"location\": \"Nob Hill\", \"start_time\": \"8:45AM\", \"end_time\": \"4:15PM\", \"duration\": 30},\n    {\"name\": \"Betty\", \"location\": \"Marina District\", \"start_time\": \"6:45PM\", \"end_time\": \"9:45PM\", \"duration\": 45},\n    {\"name\": \"Patricia\", \"location\": \"Embarcadero\", \"start_time\": \"5:30PM\", \"end_time\": \"10:00PM\", \"duration\": 45}\n]\n\n# Start time\nstart_time = \"9:00AM\"\n\n# Function to convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    if \"PM\" in time and hours!= 12:\n        hours += 12\n    elif \"AM\" in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    return hours * 60 + minutes\n\n# Function to convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    elif hours == 12:\n        suffix = \"PM\"\n    elif hours == 0:\n        hours = 12\n        suffix = \"AM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\n# Function to calculate schedule\ndef calculate_schedule(meetings, travel_distances, start_time):\n    schedule = []\n    current_time = time_to_minutes(start_time)\n    current_location = \"Fisherman's Wharf\"\n\n    for meeting in meetings:\n        meeting_start_time = time_to_minutes(meeting[\"start_time\"])\n        meeting_end_time = time_to_minutes(meeting[\"end_time\"])\n        travel_duration = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + travel_duration\n\n        if arrival_time > meeting_end_time:\n            continue\n\n        schedule.append({\"action\": \"travel\", \"location\": meeting[\"location\"], \"duration\": travel_duration, \"time\": minutes_to_time(current_time), \"to\": meeting[\"location\"]})\n        schedule.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"duration\": meeting[\"duration\"], \"time\": minutes_to_time(max(arrival_time, meeting_start_time))})\n        current_time = max(arrival_time, meeting_start_time) + meeting[\"duration\"]\n        current_location = meeting[\"location\"]\n\n    return schedule\n\n# Calculate schedule\nschedule = calculate_schedule(meetings, travel_distances, start_time)\n\n# Add start action to schedule\nschedule.insert(0, {\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": start_time})\n\n# Print schedule as JSON\nprint(\"SOLUTION:\")\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_409"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Brian",
            "start_time": "1:00PM",
            "end_time": "2:30PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Ashley",
            "start_time": "3:00PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Elizabeth",
            "start_time": "4:45PM",
            "end_time": "6:00PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Jessica",
            "start_time": "8:00PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Richard",
            "start_time": "11:00AM",
            "end_time": "12:00PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Elizabeth",
            "start_time": "12:11PM",
            "end_time": "1:26PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Brian",
            "start_time": "1:34PM",
            "end_time": "3:04PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Anthony",
            "start_time": "3:12PM",
            "end_time": "3:42PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Ashley",
            "start_time": "3:53PM",
            "end_time": "5:23PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Deborah",
            "start_time": "5:42PM",
            "end_time": "6:42PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Kimberly",
            "start_time": "6:57PM",
            "end_time": "7:42PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Jessica",
            "start_time": "8:00PM",
            "end_time": "9:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Bayview\": {\n        \"North Beach\": 22,\n        \"Fisherman's Wharf\": 25,\n        \"Haight-Ashbury\": 19,\n        \"Nob Hill\": 20,\n        \"Golden Gate Park\": 22,\n        \"Union Square\": 18,\n        \"Alamo Square\": 16,\n        \"Presidio\": 32,\n        \"Chinatown\": 19,\n        \"Pacific Heights\": 23\n    },\n    \"North Beach\": {\n        \"Bayview\": 25,\n        \"Fisherman's Wharf\": 5,\n        \"Haight-Ashbury\": 18,\n        \"Nob Hill\": 7,\n        \"Golden Gate Park\": 22,\n        \"Union Square\": 7,\n        \"Alamo Square\": 16,\n        \"Presidio\": 17,\n        \"Chinatown\": 6,\n        \"Pacific Heights\": 8\n    },\n    \"Fisherman's Wharf\": {\n        \"Bayview\": 26,\n        \"North Beach\": 6,\n        \"Haight-Ashbury\": 22,\n        \"Nob Hill\": 11,\n        \"Golden Gate Park\": 25,\n        \"Union Square\": 13,\n        \"Alamo Square\": 21,\n        \"Presidio\": 17,\n        \"Chinatown\": 12,\n        \"Pacific Heights\": 12\n    },\n    \"Haight-Ashbury\": {\n        \"Bayview\": 18,\n        \"North Beach\": 19,\n        \"Fisherman's Wharf\": 23,\n        \"Nob Hill\": 15,\n        \"Golden Gate Park\": 7,\n        \"Union Square\": 19,\n        \"Alamo Square\": 5,\n        \"Presidio\": 15,\n        \"Chinatown\": 19,\n        \"Pacific Heights\": 12\n    },\n    \"Nob Hill\": {\n        \"Bayview\": 19,\n        \"North Beach\": 8,\n        \"Fisherman's Wharf\": 10,\n        \"Haight-Ashbury\": 13,\n        \"Golden Gate Park\": 17,\n        \"Union Square\": 7,\n        \"Alamo Square\": 11,\n        \"Presidio\": 17,\n        \"Chinatown\": 6,\n        \"Pacific Heights\": 8\n    },\n    \"Golden Gate Park\": {\n        \"Bayview\": 23,\n        \"North Beach\": 23,\n        \"Fisherman's Wharf\": 24,\n        \"Haight-Ashbury\": 7,\n        \"Nob Hill\": 20,\n        \"Union Square\": 22,\n        \"Alamo Square\": 9,\n        \"Presidio\": 11,\n        \"Chinatown\": 23,\n        \"Pacific Heights\": 16\n    },\n    \"Union Square\": {\n        \"Bayview\": 15,\n        \"North Beach\": 10,\n        \"Fisherman's Wharf\": 15,\n        \"Haight-Ashbury\": 18,\n        \"Nob Hill\": 9,\n        \"Golden Gate Park\": 22,\n        \"Alamo Square\": 15,\n        \"Presidio\": 24,\n        \"Chinatown\": 7,\n        \"Pacific Heights\": 15\n    },\n    \"Alamo Square\": {\n        \"Bayview\": 16,\n        \"North Beach\": 15,\n        \"Fisherman's Wharf\": 19,\n        \"Haight-Ashbury\": 5,\n        \"Nob Hill\": 11,\n        \"Golden Gate Park\": 9,\n        \"Union Square\": 14,\n        \"Presidio\": 17,\n        \"Chinatown\": 15,\n        \"Pacific Heights\": 10\n    },\n    \"Presidio\": {\n        \"Bayview\": 31,\n        \"North Beach\": 18,\n        \"Fisherman's Wharf\": 19,\n        \"Haight-Ashbury\": 15,\n        \"Nob Hill\": 18,\n        \"Golden Gate Park\": 12,\n        \"Union Square\": 22,\n        \"Alamo Square\": 19,\n        \"Chinatown\": 21,\n        \"Pacific Heights\": 11\n    },\n    \"Chinatown\": {\n        \"Bayview\": 20,\n        \"North Beach\": 3,\n        \"Fisherman's Wharf\": 8,\n        \"Haight-Ashbury\": 19,\n        \"Nob Hill\": 9,\n        \"Golden Gate Park\": 23,\n        \"Union Square\": 7,\n        \"Alamo Square\": 17,\n        \"Presidio\": 19,\n        \"Pacific Heights\": 11\n    },\n    \"Pacific Heights\": {\n        \"Bayview\": 22,\n        \"North Beach\": 9,\n        \"Fisherman's Wharf\": 13,\n        \"Haight-Ashbury\": 11,\n        \"Nob Hill\": 8,\n        \"Golden Gate Park\": 15,\n        \"Union Square\": 12,\n        \"Alamo Square\": 10,\n        \"Presidio\": 11,\n        \"Chinatown\": 11\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Brian\", \"location\": \"North Beach\", \"start_time\": \"1:00PM\", \"end_time\": \"7:00PM\", \"duration\": 90},\n    {\"name\": \"Richard\", \"location\": \"Fisherman's Wharf\", \"start_time\": \"11:00AM\", \"end_time\": \"12:45PM\", \"duration\": 60},\n    {\"name\": \"Ashley\", \"location\": \"Haight-Ashbury\", \"start_time\": \"3:00PM\", \"end_time\": \"8:30PM\", \"duration\": 90},\n    {\"name\": \"Elizabeth\", \"location\": \"Nob Hill\", \"start_time\": \"11:45AM\", \"end_time\": \"6:30PM\", \"duration\": 75},\n    {\"name\": \"Jessica\", \"location\": \"Golden Gate Park\", \"start_time\": \"8:00PM\", \"end_time\": \"9:45PM\", \"duration\": 105},\n    {\"name\": \"Deborah\", \"location\": \"Union Square\", \"start_time\": \"5:30PM\", \"end_time\": \"10:00PM\", \"duration\": 60},\n    {\"name\": \"Kimberly\", \"location\": \"Alamo Square\", \"start_time\": \"5:30PM\", \"end_time\": \"9:15PM\", \"duration\": 45},\n    {\"name\": \"Matthew\", \"location\": \"Presidio\", \"start_time\": \"8:15AM\", \"end_time\": \"9:00AM\", \"duration\": 15},\n    {\"name\": \"Kenneth\", \"location\": \"Chinatown\", \"start_time\": \"1:45PM\", \"end_time\": \"7:30PM\", \"duration\": 105},\n    {\"name\": \"Anthony\", \"location\": \"Pacific Heights\", \"start_time\": \"2:15PM\", \"end_time\": \"4:00PM\", \"duration\": 30}\n]\n\n# Start time\nstart_time = \"9:00AM\"\n\n# Function to convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    if \"PM\" in time and hours!= 12:\n        hours += 12\n    elif \"AM\" in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    return hours * 60 + minutes\n\n# Function to convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    elif hours == 12:\n        suffix = \"PM\"\n    elif hours == 0:\n        hours = 12\n        suffix = \"AM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\n# Function to calculate schedule\ndef calculate_schedule(meetings, travel_distances, start_time):\n    schedule = []\n    current_time = time_to_minutes(start_time)\n    current_location = \"Bayview\"\n\n    for meeting in meetings:\n        meeting_start_time = time_to_minutes(meeting[\"start_time\"])\n        meeting_end_time = time_to_minutes(meeting[\"end_time\"])\n        travel_duration = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + travel_duration\n\n        if arrival_time > meeting_end_time:\n            continue\n\n        schedule.append({\"action\": \"travel\", \"location\": meeting[\"location\"], \"duration\": travel_duration, \"time\": minutes_to_time(current_time), \"to\": meeting[\"location\"]})\n        schedule.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"duration\": meeting[\"duration\"], \"time\": minutes_to_time(max(arrival_time, meeting_start_time))})\n        current_time = max(arrival_time, meeting_start_time) + meeting[\"duration\"]\n        current_location = meeting[\"location\"]\n\n    return schedule\n\n# Calculate schedule\nschedule = calculate_schedule(meetings, travel_distances, start_time)\n\n# Add start action to schedule\nschedule.insert(0, {\"action\": \"start\", \"location\": \"Bayview\", \"time\": start_time})\n\n# Print schedule as JSON\nprint(\"SOLUTION:\")\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_952"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Linda",
            "start_time": "6:00PM",
            "end_time": "6:30PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Kimberly",
            "start_time": "6:41PM",
            "end_time": "7:11PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Paul",
            "start_time": "9:00PM",
            "end_time": "9:15PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "9:28PM",
            "end_time": "10:43PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Carol",
            "start_time": "10:15AM",
            "end_time": "11:15AM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Kimberly",
            "start_time": "2:15PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Kenneth",
            "start_time": "3:01PM",
            "end_time": "3:31PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Brian",
            "start_time": "3:51PM",
            "end_time": "5:06PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Sandra",
            "start_time": "5:24PM",
            "end_time": "6:24PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Laura",
            "start_time": "6:37PM",
            "end_time": "7:07PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Karen",
            "start_time": "7:22PM",
            "end_time": "8:37PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Paul",
            "start_time": "9:00PM",
            "end_time": "9:15PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Linda",
            "start_time": "9:30PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    \"Pacific Heights\": {\n        \"Marina District\": 6,\n        \"The Castro\": 16,\n        \"Richmond District\": 12,\n        \"Alamo Square\": 10,\n        \"Financial District\": 13,\n        \"Presidio\": 11,\n        \"Mission District\": 15,\n        \"Nob Hill\": 8,\n        \"Russian Hill\": 7\n    },\n    \"Marina District\": {\n        \"Pacific Heights\": 7,\n        \"The Castro\": 22,\n        \"Richmond District\": 11,\n        \"Alamo Square\": 15,\n        \"Financial District\": 17,\n        \"Presidio\": 10,\n        \"Mission District\": 20,\n        \"Nob Hill\": 12,\n        \"Russian Hill\": 8\n    },\n    \"The Castro\": {\n        \"Pacific Heights\": 16,\n        \"Marina District\": 21,\n        \"Richmond District\": 16,\n        \"Alamo Square\": 8,\n        \"Financial District\": 21,\n        \"Presidio\": 20,\n        \"Mission District\": 7,\n        \"Nob Hill\": 16,\n        \"Russian Hill\": 18\n    },\n    \"Richmond District\": {\n        \"Pacific Heights\": 10,\n        \"Marina District\": 9,\n        \"The Castro\": 16,\n        \"Alamo Square\": 13,\n        \"Financial District\": 22,\n        \"Presidio\": 7,\n        \"Mission District\": 20,\n        \"Nob Hill\": 17,\n        \"Russian Hill\": 13\n    },\n    \"Alamo Square\": {\n        \"Pacific Heights\": 10,\n        \"Marina District\": 15,\n        \"The Castro\": 8,\n        \"Richmond District\": 11,\n        \"Financial District\": 17,\n        \"Presidio\": 17,\n        \"Mission District\": 10,\n        \"Nob Hill\": 11,\n        \"Russian Hill\": 13\n    },\n    \"Financial District\": {\n        \"Pacific Heights\": 13,\n        \"Marina District\": 15,\n        \"The Castro\": 20,\n        \"Richmond District\": 21,\n        \"Alamo Square\": 17,\n        \"Presidio\": 22,\n        \"Mission District\": 17,\n        \"Nob Hill\": 8,\n        \"Russian Hill\": 11\n    },\n    \"Presidio\": {\n        \"Pacific Heights\": 11,\n        \"Marina District\": 11,\n        \"The Castro\": 21,\n        \"Richmond District\": 7,\n        \"Alamo Square\": 19,\n        \"Financial District\": 23,\n        \"Mission District\": 26,\n        \"Nob Hill\": 18,\n        \"Russian Hill\": 14\n    },\n    \"Mission District\": {\n        \"Pacific Heights\": 16,\n        \"Marina District\": 19,\n        \"The Castro\": 7,\n        \"Richmond District\": 20,\n        \"Alamo Square\": 11,\n        \"Financial District\": 15,\n        \"Presidio\": 25,\n        \"Nob Hill\": 12,\n        \"Russian Hill\": 15\n    },\n    \"Nob Hill\": {\n        \"Pacific Heights\": 8,\n        \"Marina District\": 11,\n        \"The Castro\": 17,\n        \"Richmond District\": 14,\n        \"Alamo Square\": 11,\n        \"Financial District\": 9,\n        \"Presidio\": 17,\n        \"Mission District\": 13,\n        \"Russian Hill\": 5\n    },\n    \"Russian Hill\": {\n        \"Pacific Heights\": 7,\n        \"Marina District\": 7,\n        \"The Castro\": 21,\n        \"Richmond District\": 14,\n        \"Alamo Square\": 15,\n        \"Financial District\": 11,\n        \"Presidio\": 14,\n        \"Mission District\": 16,\n        \"Nob Hill\": 5\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Linda\", \"location\": \"Marina District\", \"start_time\": \"6:00PM\", \"end_time\": \"10:00PM\", \"duration\": 30},\n    {\"name\": \"Kenneth\", \"location\": \"The Castro\", \"start_time\": \"2:45PM\", \"end_time\": \"4:15PM\", \"duration\": 30},\n    {\"name\": \"Kimberly\", \"location\": \"Richmond District\", \"start_time\": \"2:15PM\", \"end_time\": \"10:00PM\", \"duration\": 30},\n    {\"name\": \"Paul\", \"location\": \"Alamo Square\", \"start_time\": \"9:00PM\", \"end_time\": \"9:30PM\", \"duration\": 15},\n    {\"name\": \"Carol\", \"location\": \"Financial District\", \"start_time\": \"10:15AM\", \"end_time\": \"12:00PM\", \"duration\": 60},\n    {\"name\": \"Brian\", \"location\": \"Presidio\", \"start_time\": \"10:00AM\", \"end_time\": \"9:30PM\", \"duration\": 75},\n    {\"name\": \"Laura\", \"location\": \"Mission District\", \"start_time\": \"4:15PM\", \"end_time\": \"8:30PM\", \"duration\": 30},\n    {\"name\": \"Sandra\", \"location\": \"Nob Hill\", \"start_time\": \"9:15AM\", \"end_time\": \"6:30PM\", \"duration\": 60},\n    {\"name\": \"Karen\", \"location\": \"Russian Hill\", \"start_time\": \"6:30PM\", \"end_time\": \"10:00PM\", \"duration\": 75}\n]\n\n# Start time\nstart_time = \"9:00AM\"\n\n# Function to convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(\":\")\n    hours = int(time_parts[0].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    if \"PM\" in time and hours!= 12:\n        hours += 12\n    elif \"AM\" in time and hours == 12:\n        hours = 0\n    minutes = int(time_parts[1].replace(\"PM\", \"\").replace(\"AM\", \"\"))\n    return hours * 60 + minutes\n\n# Function to convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = \"PM\"\n    elif hours == 12:\n        suffix = \"PM\"\n    elif hours == 0:\n        hours = 12\n        suffix = \"AM\"\n    else:\n        suffix = \"AM\"\n    return f\"{hours}:{minutes:02d}{suffix}\"\n\n# Function to calculate schedule\ndef calculate_schedule(meetings, travel_distances, start_time):\n    schedule = []\n    current_time = time_to_minutes(start_time)\n    current_location = \"Pacific Heights\"\n\n    for meeting in meetings:\n        meeting_start_time = time_to_minutes(meeting[\"start_time\"])\n        meeting_end_time = time_to_minutes(meeting[\"end_time\"])\n        travel_duration = travel_distances[current_location][meeting[\"location\"]]\n        arrival_time = current_time + travel_duration\n\n        if arrival_time > meeting_end_time:\n            continue\n\n        schedule.append({\"action\": \"travel\", \"location\": meeting[\"location\"], \"duration\": travel_duration, \"time\": minutes_to_time(current_time), \"to\": meeting[\"location\"]})\n        schedule.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"duration\": meeting[\"duration\"], \"time\": minutes_to_time(max(arrival_time, meeting_start_time))})\n        current_time = max(arrival_time, meeting_start_time) + meeting[\"duration\"]\n        current_location = meeting[\"location\"]\n\n    return schedule\n\n# Calculate schedule\nschedule = calculate_schedule(meetings, travel_distances, start_time)\n\n# Add start action to schedule\nschedule.insert(0, {\"action\": \"start\", \"location\": \"Pacific Heights\", \"time\": start_time})\n\n# Print schedule as JSON\nprint(\"SOLUTION:\")\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
      "count": "meeting_planning_example_870"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Robert",
            "start_time": "9:20AM",
            "end_time": "11:20AM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "David",
            "start_time": "12:30PM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Matthew",
            "start_time": "1:32PM",
            "end_time": "3:02PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Jessica",
            "start_time": "3:19PM",
            "end_time": "4:04PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Melissa",
            "start_time": "4:11PM",
            "end_time": "4:56PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Deborah",
            "start_time": "7:00PM",
            "end_time": "7:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Karen",
            "start_time": "7:57PM",
            "end_time": "9:57PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Robert",
            "start_time": "9:20AM",
            "end_time": "11:20AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Matthew",
            "start_time": "11:37AM",
            "end_time": "1:07PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "David",
            "start_time": "1:23PM",
            "end_time": "2:08PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Melissa",
            "start_time": "2:36PM",
            "end_time": "3:21PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Mark",
            "start_time": "3:27PM",
            "end_time": "4:12PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Jessica",
            "start_time": "4:17PM",
            "end_time": "5:02PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Deborah",
            "start_time": "7:00PM",
            "end_time": "7:45PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Karen",
            "start_time": "7:57PM",
            "end_time": "9:57PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'Robert': {'location': 'Chinatown','start': '7:45AM', 'end': '5:30PM', 'duration': 120},\n    'David': {'location': 'Sunset District','start': '12:30PM', 'end': '7:45PM', 'duration': 45},\n    'Matthew': {'location': 'Alamo Square','start': '8:45AM', 'end': '1:45PM', 'duration': 90},\n    'Jessica': {'location': 'Financial District','start': '9:30AM', 'end': '6:45PM', 'duration': 45},\n    'Melissa': {'location': 'North Beach','start': '7:15AM', 'end': '4:45PM', 'duration': 45},\n    'Mark': {'location': 'Embarcadero','start': '3:15PM', 'end': '5:00PM', 'duration': 45},\n    'Deborah': {'location': 'Presidio','start': '7:00PM', 'end': '7:45PM', 'duration': 45},\n    'Karen': {'location': 'Golden Gate Park','start': '7:30PM', 'end': '10:00PM', 'duration': 120},\n    'Laura': {'location': 'Bayview','start': '9:15PM', 'end': '10:15PM', 'duration': 15}\n}\n\n# Travel times\ntravel_times = {\n    'Richmond District': {\n        'Chinatown': 20, 'Sunset District': 11, 'Alamo Square': 13, 'Financial District': 22,\n        'North Beach': 17, 'Embarcadero': 19, 'Presidio': 7, 'Golden Gate Park': 9, 'Bayview': 27\n    },\n    'Chinatown': {\n        'Richmond District': 20, 'Sunset District': 29, 'Alamo Square': 17, 'Financial District': 5,\n        'North Beach': 3, 'Embarcadero': 5, 'Presidio': 19, 'Golden Gate Park': 23, 'Bayview': 20\n    },\n    'Sunset District': {\n        'Richmond District': 12, 'Chinatown': 30, 'Alamo Square': 17, 'Financial District': 30,\n        'North Beach': 28, 'Embarcadero': 30, 'Presidio': 16, 'Golden Gate Park': 11, 'Bayview': 22\n    },\n    'Alamo Square': {\n        'Richmond District': 11, 'Chinatown': 15, 'Sunset District': 16, 'Financial District': 17,\n        'North Beach': 15, 'Embarcadero': 16, 'Presidio': 17, 'Golden Gate Park': 9, 'Bayview': 16\n    },\n    'Financial District': {\n        'Richmond District': 21, 'Chinatown': 5, 'Sunset District': 30, 'Alamo Square': 17,\n        'North Beach': 7, 'Embarcadero': 4, 'Presidio': 22, 'Golden Gate Park': 23, 'Bayview': 19\n    },\n    'North Beach': {\n        'Richmond District': 18, 'Chinatown': 6, 'Sunset District': 27, 'Alamo Square': 16,\n        'Financial District': 8, 'Embarcadero': 6, 'Presidio': 17, 'Golden Gate Park': 22, 'Bayview': 25\n    },\n    'Embarcadero': {\n        'Richmond District': 21, 'Chinatown': 7, 'Sunset District': 30, 'Alamo Square': 19,\n        'Financial District': 5, 'North Beach': 5, 'Presidio': 20, 'Golden Gate Park': 25, 'Bayview': 21\n    },\n    'Presidio': {\n        'Richmond District': 7, 'Chinatown': 21, 'Sunset District': 15, 'Alamo Square': 19,\n        'Financial District': 23, 'North Beach': 18, 'Embarcadero': 20, 'Golden Gate Park': 12, 'Bayview': 31\n    },\n    'Golden Gate Park': {\n        'Richmond District': 7, 'Chinatown': 23, 'Sunset District': 10, 'Alamo Square': 9,\n        'Financial District': 26, 'North Beach': 23, 'Embarcadero': 25, 'Presidio': 11, 'Bayview': 23\n    },\n    'Bayview': {\n        'Richmond District': 25, 'Chinatown': 19, 'Sunset District': 23, 'Alamo Square': 16,\n        'Financial District': 19, 'North Beach': 22, 'Embarcadero': 19, 'Presidio': 32, 'Golden Gate Park': 22\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Richmond District'\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    meeting_end = time_to_minutes(meeting['end'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= meeting_end:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_884"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "James",
            "start_time": "12:45PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Robert",
            "start_time": "2:07PM",
            "end_time": "2:37PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "James",
            "start_time": "12:45PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Robert",
            "start_time": "2:07PM",
            "end_time": "2:37PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'James': {'location': 'Mission District','start': '12:45PM', 'end': '2:00PM', 'duration': 75},\n    'Robert': {'location': 'The Castro','start': '12:45PM', 'end': '3:15PM', 'duration': 30}\n}\n\n# Travel times\ntravel_times = {\n    'North Beach': {\n        'Mission District': 18,\n        'The Castro': 22\n    },\n    'Mission District': {\n        'North Beach': 17,\n        'The Castro': 7\n    },\n    'The Castro': {\n        'North Beach': 20,\n        'Mission District': 7\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'North Beach'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_180"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Kenneth",
            "start_time": "12:00PM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Thomas",
            "start_time": "3:30PM",
            "end_time": "4:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Kenneth",
            "start_time": "12:00PM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Thomas",
            "start_time": "3:30PM",
            "end_time": "4:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'Kenneth': {'location': 'Mission District','start': '12:00PM', 'end': '3:45PM', 'duration': 45},\n    'Thomas': {'location': 'Pacific Heights','start': '3:30PM', 'end': '7:15PM', 'duration': 75}\n}\n\n# Travel times\ntravel_times = {\n    'Nob Hill': {\n        'Pacific Heights': 8,\n        'Mission District': 13\n    },\n    'Pacific Heights': {\n        'Nob Hill': 8,\n        'Mission District': 15\n    },\n    'Mission District': {\n        'Nob Hill': 12,\n        'Pacific Heights': 16\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Nob Hill'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_174"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Stephanie",
            "start_time": "9:20AM",
            "end_time": "10:20AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Brian",
            "start_time": "12:15PM",
            "end_time": "1:15PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Thomas",
            "start_time": "1:30PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Nancy",
            "start_time": "2:45PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Jessica",
            "start_time": "4:30PM",
            "end_time": "6:30PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Charles",
            "start_time": "6:47PM",
            "end_time": "8:32PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Mary",
            "start_time": "8:51PM",
            "end_time": "9:51PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Thomas",
            "start_time": "1:30PM",
            "end_time": "2:00PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Nancy",
            "start_time": "2:45PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Brian",
            "start_time": "3:09PM",
            "end_time": "4:09PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Jessica",
            "start_time": "4:30PM",
            "end_time": "6:30PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Mary",
            "start_time": "6:37PM",
            "end_time": "7:37PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Matthew",
            "start_time": "7:52PM",
            "end_time": "9:52PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'Stephanie': {'location': 'Presidio','start': '7:30AM', 'end': '10:15AM', 'duration': 60},\n    'Brian': {'location': 'Marina District','start': '12:15PM', 'end': '6:00PM', 'duration': 60},\n    'Thomas': {'location': 'Fisherman\\'s Wharf','start': '1:30PM', 'end': '7:00PM', 'duration': 30},\n    'Nancy': {'location': 'North Beach','start': '2:45PM', 'end': '8:00PM', 'duration': 15},\n    'Jessica': {'location': 'Nob Hill','start': '4:30PM', 'end': '6:45PM', 'duration': 120},\n    'Charles': {'location': 'The Castro','start': '4:30PM', 'end': '10:00PM', 'duration': 105},\n    'Mary': {'location': 'Union Square','start': '4:45PM', 'end': '9:30PM', 'duration': 60},\n    'Sarah': {'location': 'Alamo Square','start': '8:00PM', 'end': '9:45PM', 'duration': 105},\n    'Karen': {'location': 'Chinatown','start': '7:15PM', 'end': '9:15PM', 'duration': 90},\n    'Matthew': {'location': 'Bayview','start': '7:15PM', 'end': '10:00PM', 'duration': 120}\n}\n\n# Travel times\ntravel_times = {\n    'Embarcadero': {\n        'Bayview': 21,\n        'Chinatown': 7,\n        'Alamo Square': 19,\n        'Nob Hill': 10,\n        'Presidio': 20,\n        'Union Square': 10,\n        'The Castro': 25,\n        'North Beach': 5,\n        'Fisherman\\'s Wharf': 6,\n        'Marina District': 12\n    },\n    'Bayview': {\n        'Embarcadero': 19,\n        'Chinatown': 19,\n        'Alamo Square': 16,\n        'Nob Hill': 20,\n        'Presidio': 32,\n        'Union Square': 18,\n        'The Castro': 19,\n        'North Beach': 22,\n        'Fisherman\\'s Wharf': 25,\n        'Marina District': 27\n    },\n    'Chinatown': {\n        'Embarcadero': 5,\n        'Bayview': 20,\n        'Alamo Square': 17,\n        'Nob Hill': 9,\n        'Presidio': 19,\n        'Union Square': 7,\n        'The Castro': 22,\n        'North Beach': 3,\n        'Fisherman\\'s Wharf': 8,\n        'Marina District': 12\n    },\n    'Alamo Square': {\n        'Embarcadero': 16,\n        'Bayview': 16,\n        'Chinatown': 15,\n        'Nob Hill': 11,\n        'Presidio': 17,\n        'Union Square': 14,\n        'The Castro': 8,\n        'North Beach': 15,\n        'Fisherman\\'s Wharf': 19,\n        'Marina District': 15\n    },\n    'Nob Hill': {\n        'Embarcadero': 9,\n        'Bayview': 19,\n        'Chinatown': 6,\n        'Alamo Square': 11,\n        'Presidio': 17,\n        'Union Square': 7,\n        'The Castro': 17,\n        'North Beach': 8,\n        'Fisherman\\'s Wharf': 10,\n        'Marina District': 11\n    },\n    'Presidio': {\n        'Embarcadero': 20,\n        'Bayview': 31,\n        'Chinatown': 21,\n        'Alamo Square': 19,\n        'Nob Hill': 18,\n        'Union Square': 22,\n        'The Castro': 21,\n        'North Beach': 18,\n        'Fisherman\\'s Wharf': 19,\n        'Marina District': 11\n    },\n    'Union Square': {\n        'Embarcadero': 11,\n        'Bayview': 15,\n        'Chinatown': 7,\n        'Alamo Square': 15,\n        'Nob Hill': 9,\n        'Presidio': 24,\n        'The Castro': 17,\n        'North Beach': 10,\n        'Fisherman\\'s Wharf': 15,\n        'Marina District': 18\n    },\n    'The Castro': {\n        'Embarcadero': 22,\n        'Bayview': 19,\n        'Chinatown': 22,\n        'Alamo Square': 8,\n        'Nob Hill': 16,\n        'Presidio': 20,\n        'Union Square': 19,\n        'North Beach': 20,\n        'Fisherman\\'s Wharf': 24,\n        'Marina District': 21\n    },\n    'North Beach': {\n        'Embarcadero': 6,\n        'Bayview': 25,\n        'Chinatown': 6,\n        'Alamo Square': 16,\n        'Nob Hill': 7,\n        'Presidio': 17,\n        'Union Square': 7,\n        'The Castro': 23,\n        'Fisherman\\'s Wharf': 5,\n        'Marina District': 9\n    },\n    'Fisherman\\'s Wharf': {\n        'Embarcadero': 8,\n        'Bayview': 26,\n        'Chinatown': 12,\n        'Alamo Square': 21,\n        'Nob Hill': 11,\n        'Presidio': 17,\n        'Union Square': 13,\n        'The Castro': 27,\n        'North Beach': 6,\n        'Marina District': 9\n    },\n    'Marina District': {\n        'Embarcadero': 14,\n        'Bayview': 27,\n        'Chinatown': 15,\n        'Alamo Square': 15,\n        'Nob Hill': 12,\n        'Presidio': 10,\n        'Union Square': 16,\n        'The Castro': 22,\n        'North Beach': 11,\n        'Fisherman\\'s Wharf': 10\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Embarcadero'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_976"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "The Castro",
            "person": "David",
            "start_time": "9:21AM",
            "end_time": "11:21AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Karen",
            "start_time": "11:42AM",
            "end_time": "1:12PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Barbara",
            "start_time": "1:29PM",
            "end_time": "2:59PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Kevin",
            "start_time": "3:15PM",
            "end_time": "5:15PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Nancy",
            "start_time": "5:26PM",
            "end_time": "7:11PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Linda",
            "start_time": "7:34PM",
            "end_time": "8:19PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Mark",
            "start_time": "8:46PM",
            "end_time": "10:16PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Karen",
            "start_time": "9:30AM",
            "end_time": "11:00AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Barbara",
            "start_time": "11:17AM",
            "end_time": "12:47PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Matthew",
            "start_time": "12:52PM",
            "end_time": "1:37PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Andrew",
            "start_time": "1:52PM",
            "end_time": "3:37PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "David",
            "start_time": "3:54PM",
            "end_time": "5:54PM"
          },
          {
            "action": "meet",
            "location": "Bayview",
            "person": "Linda",
            "start_time": "6:15PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Mark",
            "start_time": "7:27PM",
            "end_time": "8:57PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'David': {'location': 'The Castro','start': '9:00AM', 'end': '6:00PM', 'duration': 120},\n    'Karen': {'location': 'Financial District','start': '9:30AM', 'end': '12:45PM', 'duration': 90},\n    'Barbara': {'location': 'Alamo Square','start': '10:00AM', 'end': '7:30PM', 'duration': 90},\n    'Kevin': {'location': 'Sunset District','start': '10:00AM', 'end': '5:45PM', 'duration': 120},\n    'Matthew': {'location': 'Haight-Ashbury','start': '10:15AM', 'end': '3:30PM', 'duration': 45},\n    'Andrew': {'location': 'Nob Hill','start': '11:45AM', 'end': '4:45PM', 'duration': 105},\n    'Nancy': {'location': 'Golden Gate Park','start': '4:45PM', 'end': '8:00PM', 'duration': 105},\n    'Linda': {'location': 'Bayview','start': '6:15PM', 'end': '7:45PM', 'duration': 45},\n    'Mark': {'location': 'Marina District','start': '6:45PM', 'end': '9:00PM', 'duration': 90}\n}\n\n# Travel times\ntravel_times = {\n    'Russian Hill': {\n        'Marina District': 7,\n        'Financial District': 11,\n        'Alamo Square': 15,\n        'Golden Gate Park': 21,\n        'The Castro': 21,\n        'Bayview': 23,\n        'Sunset District': 23,\n        'Haight-Ashbury': 17,\n        'Nob Hill': 5\n    },\n    'Marina District': {\n        'Russian Hill': 8,\n        'Financial District': 17,\n        'Alamo Square': 15,\n        'Golden Gate Park': 18,\n        'The Castro': 22,\n        'Bayview': 27,\n        'Sunset District': 19,\n        'Haight-Ashbury': 16,\n        'Nob Hill': 12\n    },\n    'Financial District': {\n        'Russian Hill': 11,\n        'Marina District': 15,\n        'Alamo Square': 17,\n        'Golden Gate Park': 23,\n        'The Castro': 20,\n        'Bayview': 19,\n        'Sunset District': 30,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 8\n    },\n    'Alamo Square': {\n        'Russian Hill': 13,\n        'Marina District': 15,\n        'Financial District': 17,\n        'Golden Gate Park': 9,\n        'The Castro': 8,\n        'Bayview': 16,\n        'Sunset District': 16,\n        'Haight-Ashbury': 5,\n        'Nob Hill': 11\n    },\n    'Golden Gate Park': {\n        'Russian Hill': 19,\n        'Marina District': 16,\n        'Financial District': 26,\n        'Alamo Square': 9,\n        'The Castro': 13,\n        'Bayview': 23,\n        'Sunset District': 10,\n        'Haight-Ashbury': 7,\n        'Nob Hill': 20\n    },\n    'The Castro': {\n        'Russian Hill': 18,\n        'Marina District': 21,\n        'Financial District': 21,\n        'Alamo Square': 8,\n        'Golden Gate Park': 11,\n        'Bayview': 19,\n        'Sunset District': 17,\n        'Haight-Ashbury': 6,\n        'Nob Hill': 16\n    },\n    'Bayview': {\n        'Russian Hill': 23,\n        'Marina District': 27,\n        'Financial District': 19,\n        'Alamo Square': 16,\n        'Golden Gate Park': 22,\n        'The Castro': 19,\n        'Sunset District': 23,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 20\n    },\n    'Sunset District': {\n        'Russian Hill': 24,\n        'Marina District': 21,\n        'Financial District': 30,\n        'Alamo Square': 17,\n        'Golden Gate Park': 11,\n        'The Castro': 17,\n        'Bayview': 22,\n        'Haight-Ashbury': 15,\n        'Nob Hill': 27\n    },\n    'Haight-Ashbury': {\n        'Russian Hill': 17,\n        'Marina District': 17,\n        'Financial District': 21,\n        'Alamo Square': 5,\n        'Golden Gate Park': 7,\n        'The Castro': 6,\n        'Bayview': 18,\n        'Sunset District': 15,\n        'Nob Hill': 15\n    },\n    'Nob Hill': {\n        'Russian Hill': 5,\n        'Marina District': 11,\n        'Financial District': 9,\n        'Alamo Square': 11,\n        'Golden Gate Park': 17,\n        'The Castro': 17,\n        'Bayview': 19,\n        'Sunset District': 24,\n        'Haight-Ashbury': 13\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Russian Hill'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_885"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "William",
            "start_time": "9:14AM",
            "end_time": "10:14AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Kimberly",
            "start_time": "10:33AM",
            "end_time": "12:18PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "David",
            "start_time": "12:34PM",
            "end_time": "12:49PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "George",
            "start_time": "2:15PM",
            "end_time": "4:00PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Joshua",
            "start_time": "4:21PM",
            "end_time": "5:51PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Patricia",
            "start_time": "5:59PM",
            "end_time": "7:59PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Charles",
            "start_time": "8:13PM",
            "end_time": "8:28PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Kenneth",
            "start_time": "9:15PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "David",
            "start_time": "9:23AM",
            "end_time": "9:38AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "William",
            "start_time": "9:54AM",
            "end_time": "10:54AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Kimberly",
            "start_time": "11:13AM",
            "end_time": "12:58PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Mary",
            "start_time": "2:45PM",
            "end_time": "3:30PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Patricia",
            "start_time": "3:42PM",
            "end_time": "5:42PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Charles",
            "start_time": "5:56PM",
            "end_time": "6:11PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Ronald",
            "start_time": "6:30PM",
            "end_time": "7:00PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Kenneth",
            "start_time": "9:15PM",
            "end_time": "9:30PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'William': {'location': 'Presidio','start': '7:00AM', 'end': '12:45PM', 'duration': 60},\n    'Kimberly': {'location': 'Alamo Square','start': '9:00AM', 'end': '2:30PM', 'duration': 105},\n    'David': {'location': 'Sunset District','start': '9:15AM', 'end': '10:00PM', 'duration': 15},\n    'George': {'location': 'The Castro','start': '2:15PM', 'end': '7:00PM', 'duration': 105},\n    'Joshua': {'location': 'Financial District','start': '2:30PM', 'end': '5:15PM', 'duration': 90},\n    'Mary': {'location': 'Marina District','start': '2:45PM', 'end': '4:45PM', 'duration': 45},\n    'Patricia': {'location': 'Nob Hill','start': '3:00PM', 'end': '7:15PM', 'duration': 120},\n    'Charles': {'location': 'Richmond District','start': '5:15PM', 'end': '9:00PM', 'duration': 15},\n    'Ronald': {'location': 'Embarcadero','start': '6:15PM', 'end': '8:45PM', 'duration': 30},\n    'Kenneth': {'location': 'Union Square','start': '9:15PM', 'end': '9:45PM', 'duration': 15}\n}\n\n# Travel times\ntravel_times = {\n    'Russian Hill': {\n        'Sunset District': 23,\n        'Union Square': 10,\n        'Nob Hill': 5,\n        'Marina District': 7,\n        'Richmond District': 14,\n        'Financial District': 11,\n        'Embarcadero': 8,\n        'The Castro': 21,\n        'Alamo Square': 15,\n        'Presidio': 14\n    },\n    'Sunset District': {\n        'Russian Hill': 24,\n        'Union Square': 30,\n        'Nob Hill': 27,\n        'Marina District': 21,\n        'Richmond District': 12,\n        'Financial District': 30,\n        'Embarcadero': 30,\n        'The Castro': 17,\n        'Alamo Square': 17,\n        'Presidio': 16\n    },\n    'Union Square': {\n        'Russian Hill': 13,\n        'Sunset District': 27,\n        'Nob Hill': 9,\n        'Marina District': 18,\n        'Richmond District': 20,\n        'Financial District': 9,\n        'Embarcadero': 11,\n        'The Castro': 17,\n        'Alamo Square': 15,\n        'Presidio': 24\n    },\n    'Nob Hill': {\n        'Russian Hill': 5,\n        'Sunset District': 24,\n        'Union Square': 7,\n        'Marina District': 11,\n        'Richmond District': 14,\n        'Financial District': 9,\n        'Embarcadero': 9,\n        'The Castro': 17,\n        'Alamo Square': 11,\n        'Presidio': 17\n    },\n    'Marina District': {\n        'Russian Hill': 8,\n        'Sunset District': 19,\n        'Union Square': 16,\n        'Nob Hill': 12,\n        'Richmond District': 11,\n        'Financial District': 17,\n        'Embarcadero': 14,\n        'The Castro': 22,\n        'Alamo Square': 15,\n        'Presidio': 10\n    },\n    'Richmond District': {\n        'Russian Hill': 13,\n        'Sunset District': 11,\n        'Union Square': 21,\n        'Nob Hill': 17,\n        'Marina District': 9,\n        'Financial District': 22,\n        'Embarcadero': 19,\n        'The Castro': 16,\n        'Alamo Square': 13,\n        'Presidio': 7\n    },\n    'Financial District': {\n        'Russian Hill': 11,\n        'Sunset District': 30,\n        'Union Square': 9,\n        'Nob Hill': 8,\n        'Marina District': 15,\n        'Richmond District': 21,\n        'Embarcadero': 4,\n        'The Castro': 20,\n        'Alamo Square': 17,\n        'Presidio': 22\n    },\n    'Embarcadero': {\n        'Russian Hill': 8,\n        'Sunset District': 30,\n        'Union Square': 10,\n        'Nob Hill': 10,\n        'Marina District': 12,\n        'Richmond District': 21,\n        'Financial District': 5,\n        'The Castro': 25,\n        'Alamo Square': 19,\n        'Presidio': 20\n    },\n    'The Castro': {\n        'Russian Hill': 18,\n        'Sunset District': 17,\n        'Union Square': 19,\n        'Nob Hill': 16,\n        'Marina District': 21,\n        'Richmond District': 16,\n        'Financial District': 21,\n        'Embarcadero': 22,\n        'Alamo Square': 8,\n        'Presidio': 20\n    },\n    'Alamo Square': {\n        'Russian Hill': 13,\n        'Sunset District': 16,\n        'Union Square': 14,\n        'Nob Hill': 11,\n        'Marina District': 15,\n        'Richmond District': 11,\n        'Financial District': 17,\n        'Embarcadero': 16,\n        'The Castro': 8,\n        'Presidio': 17\n    },\n    'Presidio': {\n        'Russian Hill': 14,\n        'Sunset District': 15,\n        'Union Square': 22,\n        'Nob Hill': 18,\n        'Marina District': 11,\n        'Richmond District': 7,\n        'Financial District': 23,\n        'Embarcadero': 20,\n        'The Castro': 21,\n        'Alamo Square': 19\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Russian Hill'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_937"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Robert",
            "start_time": "9:19AM",
            "end_time": "9:49AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Rebecca",
            "start_time": "10:09AM",
            "end_time": "11:39AM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Andrew",
            "start_time": "12:02PM",
            "end_time": "1:17PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Sarah",
            "start_time": "4:15PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Nancy",
            "start_time": "5:30PM",
            "end_time": "6:30PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Andrew",
            "start_time": "11:45AM",
            "end_time": "1:00PM"
          },
          {
            "action": "meet",
            "location": "The Castro",
            "person": "Robert",
            "start_time": "1:13PM",
            "end_time": "1:43PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Sarah",
            "start_time": "4:15PM",
            "end_time": "4:30PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Nancy",
            "start_time": "5:30PM",
            "end_time": "6:30PM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Rebecca",
            "start_time": "6:51PM",
            "end_time": "8:21PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'Robert': {'location': 'The Castro','start': '8:30AM', 'end': '2:15PM', 'duration': 30},\n    'Rebecca': {'location': 'Chinatown','start': '9:45AM', 'end': '9:30PM', 'duration': 90},\n    'Andrew': {'location': 'Golden Gate Park','start': '11:45AM', 'end': '2:30PM', 'duration': 75},\n    'Sarah': {'location': 'Pacific Heights','start': '4:15PM', 'end': '6:45PM', 'duration': 15},\n    'Nancy': {'location': 'Presidio','start': '5:30PM', 'end': '7:15PM', 'duration': 60}\n}\n\n# Travel times\ntravel_times = {\n    'Union Square': {\n        'Golden Gate Park': 22,\n        'Pacific Heights': 15,\n        'Presidio': 24,\n        'Chinatown': 7,\n        'The Castro': 19\n    },\n    'Golden Gate Park': {\n        'Union Square': 22,\n        'Pacific Heights': 16,\n        'Presidio': 11,\n        'Chinatown': 23,\n        'The Castro': 13\n    },\n    'Pacific Heights': {\n        'Union Square': 12,\n        'Golden Gate Park': 15,\n        'Presidio': 11,\n        'Chinatown': 11,\n        'The Castro': 16\n    },\n    'Presidio': {\n        'Union Square': 22,\n        'Golden Gate Park': 12,\n        'Pacific Heights': 11,\n        'Chinatown': 21,\n        'The Castro': 21\n    },\n    'Chinatown': {\n        'Union Square': 7,\n        'Golden Gate Park': 23,\n        'Pacific Heights': 10,\n        'Presidio': 19,\n        'The Castro': 22\n    },\n    'The Castro': {\n        'Union Square': 19,\n        'Golden Gate Park': 11,\n        'Pacific Heights': 16,\n        'Presidio': 20,\n        'Chinatown': 20\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Union Square'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_403"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "David",
            "start_time": "4:00PM",
            "end_time": "5:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "David",
            "start_time": "4:00PM",
            "end_time": "5:45PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'David': {'location': 'Chinatown','start': '4:00PM', 'end': '9:45PM', 'duration': 105}\n}\n\n# Travel times\ntravel_times = {\n    'Golden Gate Park': {\n        'Chinatown': 23\n    },\n    'Chinatown': {\n        'Golden Gate Park': 23\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Golden Gate Park'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_25"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Richard",
            "start_time": "9:17AM",
            "end_time": "11:17AM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Charles",
            "start_time": "11:41AM",
            "end_time": "1:41PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Richard",
            "start_time": "9:17AM",
            "end_time": "11:17AM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'Richard': {'location': 'Union Square','start': '8:45AM', 'end': '1:00PM', 'duration': 120},\n    'Charles': {'location': 'Presidio','start': '9:45AM', 'end': '1:00PM', 'duration': 120}\n}\n\n# Travel times\ntravel_times = {\n    'Bayview': {\n        'Union Square': 17,\n        'Presidio': 31\n    },\n    'Union Square': {\n        'Bayview': 15,\n        'Presidio': 24\n    },\n    'Presidio': {\n        'Bayview': 31,\n        'Union Square': 22\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Bayview'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_118"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Matthew",
            "start_time": "9:16AM",
            "end_time": "9:31AM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Robert",
            "start_time": "10:15AM",
            "end_time": "10:30AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Joseph",
            "start_time": "2:15PM",
            "end_time": "2:45PM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Patricia",
            "start_time": "5:00PM",
            "end_time": "5:45PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Sarah",
            "start_time": "6:00PM",
            "end_time": "7:45PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Matthew",
            "start_time": "9:16AM",
            "end_time": "9:31AM"
          },
          {
            "action": "meet",
            "location": "Sunset District",
            "person": "Patricia",
            "start_time": "5:00PM",
            "end_time": "5:45PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Joseph",
            "start_time": "6:15PM",
            "end_time": "6:45PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Sarah",
            "start_time": "7:04PM",
            "end_time": "8:49PM"
          },
          {
            "action": "meet",
            "location": "Union Square",
            "person": "Robert",
            "start_time": "9:06PM",
            "end_time": "9:21PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'Matthew': {'location': 'Marina District','start': '9:15AM', 'end': '12:00PM', 'duration': 15},\n    'Robert': {'location': 'Union Square','start': '10:15AM', 'end': '9:45PM', 'duration': 15},\n    'Joseph': {'location': 'Financial District','start': '2:15PM', 'end': '6:45PM', 'duration': 30},\n    'Patricia': {'location': 'Sunset District','start': '5:00PM', 'end': '7:45PM', 'duration': 45},\n    'Sarah': {'location': 'Haight-Ashbury','start': '5:00PM', 'end': '9:30PM', 'duration': 105}\n}\n\n# Travel times\ntravel_times = {\n    'Golden Gate Park': {\n        'Haight-Ashbury': 7,\n        'Sunset District': 10,\n        'Marina District': 16,\n        'Financial District': 26,\n        'Union Square': 22\n    },\n    'Haight-Ashbury': {\n        'Golden Gate Park': 7,\n        'Sunset District': 15,\n        'Marina District': 17,\n        'Financial District': 21,\n        'Union Square': 17\n    },\n    'Sunset District': {\n        'Golden Gate Park': 11,\n        'Haight-Ashbury': 15,\n        'Marina District': 21,\n        'Financial District': 30,\n        'Union Square': 30\n    },\n    'Marina District': {\n        'Golden Gate Park': 18,\n        'Haight-Ashbury': 16,\n        'Sunset District': 19,\n        'Financial District': 17,\n        'Union Square': 16\n    },\n    'Financial District': {\n        'Golden Gate Park': 23,\n        'Haight-Ashbury': 19,\n        'Sunset District': 31,\n        'Marina District': 15,\n        'Union Square': 9\n    },\n    'Union Square': {\n        'Golden Gate Park': 22,\n        'Haight-Ashbury': 18,\n        'Sunset District': 26,\n        'Marina District': 18,\n        'Financial District': 9\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Golden Gate Park'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_402"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Joseph",
            "start_time": "9:23AM",
            "end_time": "10:23AM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Jeffrey",
            "start_time": "10:34AM",
            "end_time": "11:19AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Nancy",
            "start_time": "11:36AM",
            "end_time": "1:06PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Jason",
            "start_time": "4:45PM",
            "end_time": "5:00PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Joseph",
            "start_time": "9:23AM",
            "end_time": "10:23AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Nancy",
            "start_time": "11:00AM",
            "end_time": "12:30PM"
          },
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Jeffrey",
            "start_time": "12:47PM",
            "end_time": "1:32PM"
          },
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Jason",
            "start_time": "4:45PM",
            "end_time": "5:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'Joseph': {'location': 'Russian Hill','start': '8:30AM', 'end': '7:15PM', 'duration': 60},\n    'Jeffrey': {'location': 'Financial District','start': '10:30AM', 'end': '3:45PM', 'duration': 45},\n    'Nancy': {'location': 'Alamo Square','start': '11:00AM', 'end': '4:00PM', 'duration': 90},\n    'Jason': {'location': 'North Beach','start': '4:45PM', 'end': '9:45PM', 'duration': 15}\n}\n\n# Travel times\ntravel_times = {\n    'Bayview': {\n        'Russian Hill': 23,\n        'Alamo Square': 16,\n        'North Beach': 21,\n        'Financial District': 19\n    },\n    'Russian Hill': {\n        'Bayview': 23,\n        'Alamo Square': 15,\n        'North Beach': 5,\n        'Financial District': 11\n    },\n    'Alamo Square': {\n        'Bayview': 16,\n        'Russian Hill': 13,\n        'North Beach': 15,\n        'Financial District': 17\n    },\n    'North Beach': {\n        'Bayview': 22,\n        'Russian Hill': 4,\n        'Alamo Square': 16,\n        'Financial District': 8\n    },\n    'Financial District': {\n        'Bayview': 19,\n        'Russian Hill': 10,\n        'Alamo Square': 17,\n        'North Beach': 7\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Bayview'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_368"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Carol",
            "start_time": "11:30AM",
            "end_time": "12:30PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Jessica",
            "start_time": "3:30PM",
            "end_time": "4:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Carol",
            "start_time": "11:30AM",
            "end_time": "12:30PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Jessica",
            "start_time": "3:30PM",
            "end_time": "4:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'Carol': {'location': 'Marina District','start': '11:30AM', 'end': '3:00PM', 'duration': 60},\n    'Jessica': {'location': 'Pacific Heights','start': '3:30PM', 'end': '4:45PM', 'duration': 45}\n}\n\n# Travel times\ntravel_times = {\n    'Richmond District': {\n        'Pacific Heights': 10,\n        'Marina District': 9\n    },\n    'Pacific Heights': {\n        'Richmond District': 12,\n        'Marina District': 6\n    },\n    'Marina District': {\n        'Richmond District': 11,\n        'Pacific Heights': 7\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Richmond District'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_115"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Robert",
            "start_time": "11:15AM",
            "end_time": "1:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Robert",
            "start_time": "11:15AM",
            "end_time": "1:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'Robert': {'location': 'Presidio','start': '11:15AM', 'end': '5:45PM', 'duration': 120}\n}\n\n# Travel times\ntravel_times = {\n    'Nob Hill': {\n        'Presidio': 17\n    },\n    'Presidio': {\n        'Nob Hill': 18\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Nob Hill'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_66"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Stephanie",
            "start_time": "9:05AM",
            "end_time": "10:35AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "John",
            "start_time": "10:52AM",
            "end_time": "11:22AM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Financial District",
            "person": "Stephanie",
            "start_time": "9:05AM",
            "end_time": "10:35AM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "John",
            "start_time": "10:52AM",
            "end_time": "11:22AM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'Stephanie': {'location': 'Financial District','start': '8:15AM', 'end': '11:30AM', 'duration': 90},\n    'John': {'location': 'Alamo Square','start': '10:15AM', 'end': '8:45PM', 'duration': 30}\n}\n\n# Travel times\ntravel_times = {\n    'Embarcadero': {\n        'Financial District': 5,\n        'Alamo Square': 19\n    },\n    'Financial District': {\n        'Embarcadero': 4,\n        'Alamo Square': 17\n    },\n    'Alamo Square': {\n        'Embarcadero': 17,\n        'Financial District': 17\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Embarcadero'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_125"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Jason",
            "start_time": "10:00AM",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Kenneth",
            "start_time": "3:30PM",
            "end_time": "4:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Jason",
            "start_time": "10:00AM",
            "end_time": "11:30AM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Kenneth",
            "start_time": "3:30PM",
            "end_time": "4:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'Jason': {'location': 'Presidio','start': '10:00AM', 'end': '4:15PM', 'duration': 90},\n    'Kenneth': {'location': 'Marina District','start': '3:30PM', 'end': '4:45PM', 'duration': 45}\n}\n\n# Travel times\ntravel_times = {\n    'Pacific Heights': {\n        'Presidio': 11,\n        'Marina District': 6\n    },\n    'Presidio': {\n        'Pacific Heights': 11,\n        'Marina District': 10\n    },\n    'Marina District': {\n        'Pacific Heights': 7,\n        'Presidio': 10\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Pacific Heights'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_131"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "William",
            "start_time": "12:30PM",
            "end_time": "2:30PM"
          },
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Jeffrey",
            "start_time": "2:44PM",
            "end_time": "3:29PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Robert",
            "start_time": "3:46PM",
            "end_time": "5:16PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Nancy",
            "start_time": "5:24PM",
            "end_time": "7:09PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Brian",
            "start_time": "7:24PM",
            "end_time": "8:24PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Karen",
            "start_time": "8:43PM",
            "end_time": "9:43PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Richmond District",
            "person": "Jeffrey",
            "start_time": "12:00PM",
            "end_time": "12:45PM"
          },
          {
            "action": "meet",
            "location": "Presidio",
            "person": "Charles",
            "start_time": "1:15PM",
            "end_time": "3:00PM"
          },
          {
            "action": "meet",
            "location": "Nob Hill",
            "person": "Robert",
            "start_time": "3:18PM",
            "end_time": "4:48PM"
          },
          {
            "action": "meet",
            "location": "Marina District",
            "person": "Kimberly",
            "start_time": "5:00PM",
            "end_time": "6:15PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Karen",
            "start_time": "6:29PM",
            "end_time": "7:29PM"
          },
          {
            "action": "meet",
            "location": "Mission District",
            "person": "Brian",
            "start_time": "7:49PM",
            "end_time": "8:49PM"
          },
          {
            "action": "meet",
            "location": "Alamo Square",
            "person": "Joshua",
            "start_time": "9:00PM",
            "end_time": "10:00PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'William': {'location': 'Russian Hill','start': '12:30PM', 'end': '7:15PM', 'duration': 120},\n    'Jeffrey': {'location': 'Richmond District','start': '12:00PM', 'end': '7:15PM', 'duration': 45},\n    'Charles': {'location': 'Presidio','start': '1:15PM', 'end': '3:00PM', 'duration': 105},\n    'Robert': {'location': 'Nob Hill','start': '1:15PM', 'end': '5:30PM', 'duration': 90},\n    'Nancy': {'location': 'Pacific Heights','start': '2:45PM', 'end': '10:00PM', 'duration': 105},\n    'Brian': {'location': 'Mission District','start': '3:30PM', 'end': '10:00PM', 'duration': 60},\n    'David': {'location': 'North Beach','start': '2:45PM', 'end': '4:30PM', 'duration': 75},\n    'Kimberly': {'location': 'Marina District','start': '5:00PM', 'end': '7:45PM', 'duration': 75},\n    'Karen': {'location': 'Embarcadero','start': '2:15PM', 'end': '8:45PM', 'duration': 60},\n    'Joshua': {'location': 'Alamo Square','start': '6:45PM', 'end': '10:00PM', 'duration': 60}\n}\n\n# Travel times\ntravel_times = {\n    'Sunset District': {\n        'Presidio': 16,\n        'Nob Hill': 27,\n        'Pacific Heights': 21,\n        'Mission District': 25,\n        'Marina District': 21,\n        'North Beach': 28,\n        'Russian Hill': 24,\n        'Richmond District': 12,\n        'Embarcadero': 30,\n        'Alamo Square': 17\n    },\n    'Presidio': {\n        'Sunset District': 15,\n        'Nob Hill': 18,\n        'Pacific Heights': 11,\n        'Mission District': 26,\n        'Marina District': 11,\n        'North Beach': 18,\n        'Russian Hill': 14,\n        'Richmond District': 7,\n        'Embarcadero': 20,\n        'Alamo Square': 19\n    },\n    'Nob Hill': {\n        'Sunset District': 24,\n        'Presidio': 17,\n        'Pacific Heights': 8,\n        'Mission District': 13,\n        'Marina District': 11,\n        'North Beach': 8,\n        'Russian Hill': 5,\n        'Richmond District': 14,\n        'Embarcadero': 9,\n        'Alamo Square': 11\n    },\n    'Pacific Heights': {\n        'Sunset District': 21,\n        'Presidio': 11,\n        'Nob Hill': 8,\n        'Mission District': 15,\n        'Marina District': 6,\n        'North Beach': 9,\n        'Russian Hill': 7,\n        'Richmond District': 12,\n        'Embarcadero': 10,\n        'Alamo Square': 10\n    },\n    'Mission District': {\n        'Sunset District': 24,\n        'Presidio': 25,\n        'Nob Hill': 12,\n        'Pacific Heights': 16,\n        'Marina District': 19,\n        'North Beach': 17,\n        'Russian Hill': 15,\n        'Richmond District': 20,\n        'Embarcadero': 19,\n        'Alamo Square': 11\n    },\n    'Marina District': {\n        'Sunset District': 19,\n        'Presidio': 10,\n        'Nob Hill': 12,\n        'Pacific Heights': 7,\n        'Mission District': 20,\n        'North Beach': 11,\n        'Russian Hill': 8,\n        'Richmond District': 11,\n        'Embarcadero': 14,\n        'Alamo Square': 15\n    },\n    'North Beach': {\n        'Sunset District': 27,\n        'Presidio': 17,\n        'Nob Hill': 7,\n        'Pacific Heights': 8,\n        'Mission District': 18,\n        'Marina District': 9,\n        'Russian Hill': 4,\n        'Richmond District': 18,\n        'Embarcadero': 6,\n        'Alamo Square': 16\n    },\n    'Russian Hill': {\n        'Sunset District': 23,\n        'Presidio': 14,\n        'Nob Hill': 5,\n        'Pacific Heights': 7,\n        'Mission District': 16,\n        'Marina District': 7,\n        'North Beach': 5,\n        'Richmond District': 14,\n        'Embarcadero': 8,\n        'Alamo Square': 15\n    },\n    'Richmond District': {\n        'Sunset District': 11,\n        'Presidio': 7,\n        'Nob Hill': 17,\n        'Pacific Heights': 10,\n        'Mission District': 20,\n        'Marina District': 9,\n        'North Beach': 17,\n        'Russian Hill': 13,\n        'Embarcadero': 19,\n        'Alamo Square': 13\n    },\n    'Embarcadero': {\n        'Sunset District': 30,\n        'Presidio': 20,\n        'Nob Hill': 10,\n        'Pacific Heights': 11,\n        'Mission District': 20,\n        'Marina District': 12,\n        'North Beach': 5,\n        'Russian Hill': 8,\n        'Richmond District': 21,\n        'Alamo Square': 19\n    },\n    'Alamo Square': {\n        'Sunset District': 16,\n        'Presidio': 17,\n        'Nob Hill': 11,\n        'Pacific Heights': 10,\n        'Mission District': 10,\n        'Marina District': 15,\n        'North Beach': 15,\n        'Russian Hill': 13,\n        'Richmond District': 11,\n        'Embarcadero': 16\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Sunset District'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_974"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "The Castro",
            "person": "George",
            "start_time": "2:00PM",
            "end_time": "3:15PM"
          },
          {
            "action": "meet",
            "location": "Golden Gate Park",
            "person": "Melissa",
            "start_time": "3:26PM",
            "end_time": "4:56PM"
          },
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Rebecca",
            "start_time": "5:03PM",
            "end_time": "6:03PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Margaret",
            "start_time": "6:26PM",
            "end_time": "6:41PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Matthew",
            "start_time": "6:48PM",
            "end_time": "8:18PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "Haight-Ashbury",
            "person": "Rebecca",
            "start_time": "2:45PM",
            "end_time": "3:45PM"
          },
          {
            "action": "meet",
            "location": "Pacific Heights",
            "person": "Mark",
            "start_time": "3:57PM",
            "end_time": "4:42PM"
          },
          {
            "action": "meet",
            "location": "Embarcadero",
            "person": "Richard",
            "start_time": "4:52PM",
            "end_time": "6:22PM"
          },
          {
            "action": "meet",
            "location": "Fisherman's Wharf",
            "person": "Margaret",
            "start_time": "6:28PM",
            "end_time": "6:43PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Matthew",
            "start_time": "6:50PM",
            "end_time": "8:20PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'George': {'location': 'The Castro','start': '2:00PM', 'end': '4:15PM', 'duration': 75},\n    'Melissa': {'location': 'Golden Gate Park','start': '1:45PM', 'end': '5:30PM', 'duration': 90},\n    'Rebecca': {'location': 'Haight-Ashbury','start': '2:45PM', 'end': '6:00PM', 'duration': 60},\n    'Margaret': {'location': 'Fisherman\\'s Wharf','start': '2:45PM', 'end': '8:15PM', 'duration': 15},\n    'Mark': {'location': 'Pacific Heights','start': '3:00PM', 'end': '5:00PM', 'duration': 45},\n    'Richard': {'location': 'Embarcadero','start': '3:15PM', 'end': '6:45PM', 'duration': 90},\n    'Emily': {'location': 'Sunset District','start': '3:45PM', 'end': '5:00PM', 'duration': 45},\n    'Matthew': {'location': 'Russian Hill','start': '5:30PM', 'end': '9:00PM', 'duration': 90}\n}\n\n# Travel times\ntravel_times = {\n    'Chinatown': {\n        'Embarcadero': 5,\n        'Pacific Heights': 10,\n        'Russian Hill': 7,\n        'Haight-Ashbury': 19,\n        'Golden Gate Park': 23,\n        'Fisherman\\'s Wharf': 8,\n        'Sunset District': 29,\n        'The Castro': 22\n    },\n    'Embarcadero': {\n        'Chinatown': 7,\n        'Pacific Heights': 11,\n        'Russian Hill': 8,\n        'Haight-Ashbury': 21,\n        'Golden Gate Park': 25,\n        'Fisherman\\'s Wharf': 6,\n        'Sunset District': 30,\n        'The Castro': 25\n    },\n    'Pacific Heights': {\n        'Chinatown': 11,\n        'Embarcadero': 10,\n        'Russian Hill': 7,\n        'Haight-Ashbury': 11,\n        'Golden Gate Park': 15,\n        'Fisherman\\'s Wharf': 13,\n        'Sunset District': 21,\n        'The Castro': 16\n    },\n    'Russian Hill': {\n        'Chinatown': 9,\n        'Embarcadero': 8,\n        'Pacific Heights': 7,\n        'Haight-Ashbury': 17,\n        'Golden Gate Park': 21,\n        'Fisherman\\'s Wharf': 7,\n        'Sunset District': 23,\n        'The Castro': 21\n    },\n    'Haight-Ashbury': {\n        'Chinatown': 19,\n        'Embarcadero': 20,\n        'Pacific Heights': 12,\n        'Russian Hill': 17,\n        'Golden Gate Park': 7,\n        'Fisherman\\'s Wharf': 23,\n        'Sunset District': 15,\n        'The Castro': 6\n    },\n    'Golden Gate Park': {\n        'Chinatown': 23,\n        'Embarcadero': 25,\n        'Pacific Heights': 16,\n        'Russian Hill': 19,\n        'Haight-Ashbury': 7,\n        'Fisherman\\'s Wharf': 24,\n        'Sunset District': 10,\n        'The Castro': 13\n    },\n    'Fisherman\\'s Wharf': {\n        'Chinatown': 12,\n        'Embarcadero': 8,\n        'Pacific Heights': 12,\n        'Russian Hill': 7,\n        'Haight-Ashbury': 22,\n        'Golden Gate Park': 25,\n        'Sunset District': 27,\n        'The Castro': 27\n    },\n    'Sunset District': {\n        'Chinatown': 30,\n        'Embarcadero': 30,\n        'Pacific Heights': 21,\n        'Russian Hill': 24,\n        'Haight-Ashbury': 15,\n        'Golden Gate Park': 11,\n        'Fisherman\\'s Wharf': 29,\n        'The Castro': 17\n    },\n    'The Castro': {\n        'Chinatown': 22,\n        'Embarcadero': 22,\n        'Pacific Heights': 16,\n        'Russian Hill': 18,\n        'Haight-Ashbury': 6,\n        'Golden Gate Park': 11,\n        'Fisherman\\'s Wharf': 24,\n        'Sunset District': 17\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Chinatown'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_763"
    },
    {
      "final_program_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Melissa",
            "start_time": "9:29AM",
            "end_time": "11:14AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Anthony",
            "start_time": "1:15PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Rebecca",
            "start_time": "7:30PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "expected_time": {
        "itinerary": [
          {
            "action": "meet",
            "location": "North Beach",
            "person": "Melissa",
            "start_time": "9:29AM",
            "end_time": "11:14AM"
          },
          {
            "action": "meet",
            "location": "Chinatown",
            "person": "Anthony",
            "start_time": "1:15PM",
            "end_time": "2:15PM"
          },
          {
            "action": "meet",
            "location": "Russian Hill",
            "person": "Rebecca",
            "start_time": "7:30PM",
            "end_time": "9:15PM"
          }
        ]
      },
      "has_error": false,
      "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\nmeetings = {\n    'Melissa': {'location': 'North Beach','start': '8:15AM', 'end': '1:30PM', 'duration': 105},\n    'Anthony': {'location': 'Chinatown','start': '1:15PM', 'end': '2:30PM', 'duration': 60},\n    'Rebecca': {'location': 'Russian Hill','start': '7:30PM', 'end': '9:15PM', 'duration': 105}\n}\n\n# Travel times\ntravel_times = {\n    'Sunset District': {\n        'Chinatown': 30,\n        'Russian Hill': 24,\n        'North Beach': 29\n    },\n    'Chinatown': {\n        'Sunset District': 29,\n        'Russian Hill': 7,\n        'North Beach': 3\n    },\n    'Russian Hill': {\n        'Sunset District': 23,\n        'Chinatown': 9,\n        'North Beach': 5\n    },\n    'North Beach': {\n        'Sunset District': 27,\n        'Chinatown': 6,\n        'Russian Hill': 4\n    }\n}\n\n# Start time\nstart_time = '9:00AM'\n\n# Convert time to minutes\ndef time_to_minutes(time):\n    time_parts = time.split(':')\n    hours = int(time_parts[0])\n    minutes = int(time_parts[1].replace('AM', '').replace('PM', ''))\n    if 'PM' in time and hours!= 12:\n        hours += 12\n    elif 'AM' in time and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Convert minutes to time\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes %= 60\n    if hours > 12:\n        hours -= 12\n        suffix = 'PM'\n    elif hours == 12:\n        suffix = 'PM'\n    elif hours == 0:\n        hours = 12\n        suffix = 'AM'\n    else:\n        suffix = 'AM'\n    return f'{hours}:{minutes:02d}{suffix}'\n\n# Compute schedule\nschedule = []\ncurrent_time = time_to_minutes(start_time)\ncurrent_location = 'Sunset District'\nschedule.append({'action':'start', 'location': current_location, 'time': minutes_to_time(current_time)})\nfor name, meeting in meetings.items():\n    meeting_start = time_to_minutes(meeting['start'])\n    travel_duration = travel_times[current_location][meeting['location']]\n    if current_time + travel_duration <= meeting_start:\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n        schedule.append({'action': 'wait', 'location': meeting['location'], 'time': minutes_to_time(current_time)})\n        current_time = meeting_start\n    elif current_time + travel_duration <= time_to_minutes(meeting['end']):\n        schedule.append({'action': 'travel', 'location': meeting['location'], 'duration': travel_duration, 'time': minutes_to_time(current_time), 'to': meeting['location']})\n        current_time += travel_duration\n    else:\n        continue\n    schedule.append({'action':'meet', 'location': meeting['location'], 'duration': meeting['duration'], 'time': minutes_to_time(current_time)})\n    current_time += meeting['duration']\n    current_location = meeting['location']\n\n# Output schedule as JSON\nprint('SOLUTION:')\nprint(json.dumps({'schedule': schedule}, indent=4))\n```",
      "count": "meeting_planning_example_209"
    }
  ]
}