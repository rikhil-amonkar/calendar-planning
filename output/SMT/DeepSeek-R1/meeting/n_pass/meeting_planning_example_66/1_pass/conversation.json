[
    {
        "role": "user",
        "content": "Given the following scheduling problem:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nNob Hill to Presidio: 17.\nPresidio to Nob Hill: 18.\n\nCONSTRAINTS: You arrive at Nob Hill at 9:00AM. Robert will be at Presidio from 11:15AM to 5:45PM. You'd like to meet Robert for a minimum of 120 minutes.\n\nYour response should start with 'SOLUTION:'.\nWrite a Python program that solves it using the Z3 solver. Always surround your final code with ```python\nYOUR_CODE\n```.\n"
    },
    {
        "role": "assistant",
        "content": "SOLUTION:\nWe solve the scheduling problem by maximizing the time spent at the starting location (Nob Hill) while ensuring we meet Robert at Presidio for at least 120 minutes within his availability window (11:15 AM to 5:45 PM). The Z3 solver is used to find the latest possible departure time from Nob Hill that allows meeting Robert for exactly 120 minutes, ending at 5:45 PM. This schedule maximizes time at Nob Hill while fulfilling the meeting constraint.\n\n```python\nfrom z3 import *\n\ndef main():\n    s = Optimize()\n    # Departure time from Nob Hill (minutes after 9:00 AM)\n    depart_Nob = Int('depart_Nob')\n    s.add(depart_Nob >= 0)  # Cannot leave before 9:00 AM\n\n    # Travel to Presidio takes 17 minutes\n    arrival = depart_Nob + 17\n\n    # Robert's availability: 11:15 AM (135 minutes) to 5:45 PM (525 minutes)\n    # Meeting start is the later of arrival and 135\n    start_meeting = If(arrival >= 135, arrival, 135)\n    end_meeting = start_meeting + 120  # Must meet for exactly 120 minutes\n\n    # Meeting must end by 5:45 PM (525 minutes)\n    s.add(end_meeting <= 525)\n    \n    # Maximize departure time to stay at Nob Hill as long as possible\n    s.maximize(depart_Nob)\n\n    if s.check() == sat:\n        m = s.model()\n        depart_Nob_val = m.eval(depart_Nob).as_long()\n        arrival_val = depart_Nob_val + 17\n        start_meeting_val = max(arrival_val, 135)\n        end_meeting_val = start_meeting_val + 120\n\n        # Helper to convert minutes to time string (from 9:00 AM)\n        def min_to_time(minutes):\n            h = minutes // 60\n            mm = minutes % 60\n            total_h = 9 + h\n            if total_h < 12:\n                return f\"{total_h}:{mm:02d} AM\"\n            elif total_h == 12:\n                return f\"12:{mm:02d} PM\"\n            else:\n                return f\"{total_h - 12}:{mm:02d} PM\"\n\n        print(f\"Depart Nob Hill at {min_to_time(depart_Nob_val)}\")\n        print(f\"Arrive at Presidio at {min_to_time(arrival_val)}\")\n        print(f\"Meet Robert from {min_to_time(start_meeting_val)} to {min_to_time(end_meeting_val)}\")\n    else:\n        print(\"No valid schedule found\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]