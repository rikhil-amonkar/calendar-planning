**Explanation:**

1. **`find_meeting_time` Function:**
   - Takes two lists as input: `harold_availability` and `patrick_availability`, representing their available time slots.
   - Iterates through each time slot of Harold and Patrick.
   - Checks for overlap between the slots using `harold_start < patrick_end` and `patrick_start < harold_end`.
   - If there's overlap, it calculates the `meeting_start` and `meeting_end` as the maximum of the starting times and the minimum of the ending times, respectively.
   - Ensures the meeting duration is at least 30 minutes (`meeting_end - meeting_start >= 0.5`).
   - Returns the `meeting_start` and `meeting_end` if a suitable slot is found, otherwise returns `None`.

2. **Availability Lists:**
   - `harold_availability` is set to `[(9.0, 17.0)]` as Harold is available all day.
   - `patrick_availability` lists Patrick's free slots.

3. **Calling the Function:**
   - The `find_meeting_time` function is called with the availability lists.
   - The result is stored in `meeting_time`.

4. **Output:**
   - If a meeting time is found, it prints the start and end times.
   - If no suitable time is found, it prints a "No suitable meeting time found" message.

Let me know if you have any other scheduling scenarios you'd like to explore!
