{
    "0shot": [
        {
            "final_program_time": "{13:30:14:30}",
            "expected_time": "{13:30:14:30}",
            "type_error": null,
            "full_response": "'''python\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(\":\"))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hrs = minutes // 60\n    mins = minutes % 60\n    return f\"{hrs:02d}:{mins:02d}\"\n\n# Define workday boundaries.\nwork_start = time_to_minutes(\"09:00\")\nwork_end = time_to_minutes(\"17:00\")\n\n# Busy intervals for each participant (start, end) in minutes.\n# James' busy intervals: 11:30-12:00 and 14:30-15:00.\nbusy_james = [\n    (time_to_minutes(\"11:30\"), time_to_minutes(\"12:00\")),\n    (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\"))\n]\n\n# John's busy intervals: 09:30-11:00, 11:30-12:00, 12:30-13:30, and 14:30-16:30.\nbusy_john = [\n    (time_to_minutes(\"09:30\"), time_to_minutes(\"11:00\")),\n    (time_to_minutes(\"11:30\"), time_to_minutes(\"12:00\")),\n    (time_to_minutes(\"12:30\"), time_to_minutes(\"13:30\")),\n    (time_to_minutes(\"14:30\"), time_to_minutes(\"16:30\"))\n]\n\ndef get_free_intervals(busy, day_start, day_end):\n    free = []\n    current = day_start\n    for start, end in sorted(busy):\n        if current < start:\n            free.append((current, start))\n        current = max(current, end)\n    if current < day_end:\n        free.append((current, day_end))\n    return free\n\n# Get free intervals for both James and John.\nfree_james = get_free_intervals(busy_james, work_start, work_end)\nfree_john = get_free_intervals(busy_john, work_start, work_end)\n\nmeeting_duration = 60  # minutes\n\ndef find_common_slot(free1, free2, duration):\n    i, j = 0, 0\n    while i < len(free1) and j < len(free2):\n        # Find the intersection of free intervals.\n        start = max(free1[i][0], free2[j][0])\n        end = min(free1[i][1], free2[j][1])\n        if end - start >= duration:\n            return start, start + duration\n        if free1[i][1] < free2[j][1]:\n            i += 1\n        else:\n            j += 1\n    return None\n\nslot = find_common_slot(free_james, free_john, meeting_duration)\nif slot:\n    meeting_start, meeting_end = minutes_to_time(slot[0]), minutes_to_time(slot[1])\n    print(f\"{meeting_start}:{meeting_end}\")\nelse:\n    print(\"No available slot found\")\n'''",
            "count": "calendar_scheduling_example_543"
        }
    ]
}
