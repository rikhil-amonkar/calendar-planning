{
    "0shot": [
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' existing schedules\njames_schedule = [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n\njohn_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\ndate = \"Monday\"\n\n# Find available slot\ndef find_available_slot(james_schedule, john_schedule, work_start, work_end, meeting_duration):\n    # Create a list of all busy times\n    busy_times = james_schedule + john_schedule\n    # Add work hours as busy times if necessary\n    busy_times.append((work_start, work_end))\n    \n    # Sort busy times\n    busy_times.sort()\n\n    # Check for available time slots\n    last_end_time = work_start\n    for start, end in busy_times:\n        if last_end_time + meeting_duration <= start:  # Check if we have enough time before the next busy time\n            return last_end_time.strftime(\"%H:%M\"), (last_end_time + meeting_duration).strftime(\"%H:%M\")\n        last_end_time = max(last_end_time, end)\n\n    return None  # No available slot found\n\ntime_slot = find_available_slot(james_schedule, john_schedule, work_start, work_end, meeting_duration)\nif time_slot:\n    print(f\"{time_slot[0]}:{time_slot[1]} {date}\")\nelse:\n    print(\"No available time slot found.\")\n```",
            "count": "calendar_scheduling_example_543"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define working hours\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Deborah's availability (all day)\n    deborah_availability = [(start_time, end_time)]\n\n    # Albert's blocked times\n    albert_busy_times = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ]\n    \n    # Duration of the meeting\n    meeting_duration = timedelta(minutes=30)\n\n    # Check for available slots\n    for start, end in deborah_availability:\n        current_start = start\n        while current_start + meeting_duration <= end:\n            # Check if current time conflicts with Albert's busy times\n            conflict = False\n            for busy_start, busy_end in albert_busy_times:\n                if current_start < busy_end and (current_start + meeting_duration) > busy_start:\n                    conflict = True\n                    break\n            if not conflict:\n                # Proposed time found\n                proposed_start = current_start.strftime(\"%H:%M\")\n                proposed_end = (current_start + meeting_duration).strftime(\"%H:%M\")\n                return f\"{proposed_start}:{proposed_end} Monday\"\n            current_start += timedelta(minutes=1)\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_544"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "13:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration and the work hours\nMEETING_DURATION = timedelta(minutes=30)\nWORK_START = datetime.strptime(\"09:00\", \"%H:%M\")\nWORK_END = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the participants' schedules\nschedules = {\n    \"Doris\": [(WORK_START, WORK_START + timedelta(hours=2)), \n              (WORK_START + timedelta(hours=4), WORK_START + timedelta(hours=4, minutes=30))],\n    \"Theresa\": [(WORK_START + timedelta(hours=1), WORK_START + timedelta(hours=3))],\n    \"Christian\": [(WORK_START, WORK_END)],\n    \"Terry\": [(WORK_START + timedelta(minutes=30), WORK_START + timedelta(hours=1)),\n              (WORK_START + timedelta(hours=1, minutes=30), WORK_START + timedelta(hours=1, minutes=30)),\n              (WORK_START + timedelta(hours=2, minutes=30), WORK_END)],\n    \"Carolyn\": [(WORK_START, WORK_START + timedelta(hours=1, minutes=30)),\n                (WORK_START + timedelta(hours=1), WORK_START + timedelta(hours=2)),\n                (WORK_START + timedelta(hours=2, minutes=30), WORK_END)],\n    \"Kyle\": [(WORK_START, WORK_START + timedelta(minutes=30)),\n             (WORK_START + timedelta(hours=1, minutes=30), WORK_START + timedelta(hours=2)),\n             (WORK_START + timedelta(hours=5), WORK_END)],\n}\n\n# Find free slots for all participants\ndef find_free_slots(schedules):\n    all_free_slots = []\n    for name, slots in schedules.items():\n        free_slots = []\n        current_start = WORK_START\n        \n        for start, end in sorted(slots):\n            if current_start < start:\n                free_slots.append((current_start, start))\n            current_start = max(current_start, end)\n        \n        if current_start < WORK_END:\n            free_slots.append((current_start, WORK_END))\n        \n        all_free_slots.append(free_slots)\n    \n    return all_free_slots\n\ndef find_common_slot(all_free_slots):\n    common_slots = set(all_free_slots[0])  # Start with the first participant's slots\n    for free_slots in all_free_slots[1:]:\n        common_slots.intersection_update(set(free_slots))\n    \n    return list(common_slots)\n\nfree_slots = find_free_slots(schedules)\ncommon_slots = find_common_slot(free_slots)\n\n# Check for a suitable slot for the meeting\ndef get_meeting_time(common_slots):\n    for start, end in common_slots:\n        if end - start >= MEETING_DURATION:\n            meeting_start = start\n            meeting_end = meeting_start + MEETING_DURATION\n            return meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n    return None\n\nmeeting_time = get_meeting_time(common_slots)\n\n# Output the result\nif meeting_time:\n    print(f\"Time Range: {{{meeting_time[0]}:{meeting_time[1]}}}, Day: Monday\")\nelse:\n    print(\"No available time found for scheduling the meeting.\")\n\n```",
            "count": "calendar_scheduling_example_398"
        },
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "15:30",
                "end_time": "16:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the available slots for both days\nmonday_slots = [(9, 0, 10, 0), (10, 30, 17, 0)]\ntuesday_slots = [(9, 30, 10, 30), (11, 30, 12, 30), (13, 30, 14, 30), (16, 0, 17, 0)]\n\n# Function to check if there is enough time for a meeting in the given slots\ndef find_meeting_time(slots):\n    for start_hour, start_minute, end_hour, end_minute in slots:\n        start_time = datetime(2023, 10, 2, start_hour, start_minute)  # Example date only for time calculation\n        end_time = datetime(2023, 10, 2, end_hour, end_minute)\n        \n        if end_time - start_time >= meeting_duration:\n            meeting_start = start_time\n            meeting_end = meeting_start + meeting_duration\n            if meeting_end <= end_time:\n                return meeting_start, meeting_end\n    return None, None\n\n# Check Monday and Tuesday\nmonday_meeting_time = find_meeting_time(monday_slots)\ntuesday_meeting_time = find_meeting_time(tuesday_slots)\n\n# Select the preferred meeting time\nif tuesday_meeting_time[0]:\n    proposed_time = tuesday_meeting_time\n    day = \"Tuesday\"\nelse:\n    proposed_time = monday_meeting_time\n    day = \"Monday\"\n\n# Format the output\noutput_start = proposed_time[0].strftime(\"%H:%M\")\noutput_end = proposed_time[1].strftime(\"%H:%M\")\noutput = f\"{output_start}:{output_end} on {day}\"\n\nprint(output)\n```",
            "count": "calendar_scheduling_example_625"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "19:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules in minutes from the start of the day (09:00)\njack_busy = [\n    (30, 90),   # 09:30 to 10:30\n    (90, 120),  # 11:00 to 11:30\n    (150, 180), # 12:30 to 13:00\n    (240, 270), # 14:00 to 14:30\n    (300, 330)  # 16:00 to 16:30\n]\n\ncharlotte_busy = [\n    (30, 60),   # 09:30 to 10:00\n    (60, 120),  # 10:30 to 12:00\n    (150, 180), # 12:30 to 13:30\n    (240, 360)  # 14:00 to 16:00\n]\n\n# Meeting duration in minutes\nmeeting_duration = 30\n# Working hours\nwork_start = 9 * 60  # 09:00\nwork_end = 17 * 60    # 17:00\n\n# Find available slots\ndef find_meeting_slot(jack_busy, charlotte_busy, meeting_duration, work_start, work_end):\n    busy_times = sorted(jack_busy + charlotte_busy)\n    available_times = []\n    \n    # Check before work_start\n    if busy_times and busy_times[0][0] > work_start:\n        available_times.append((work_start, busy_times[0][0]))\n    \n    # Check between busy times\n    for i in range(len(busy_times) - 1):\n        end_current = busy_times[i][1]\n        start_next = busy_times[i+1][0]\n        if start_next - end_current >= meeting_duration:\n            available_times.append((end_current, start_next))\n    \n    # Check after last busy time\n    if busy_times and busy_times[-1][1] < work_end:\n        available_times.append((busy_times[-1][1], work_end))\n\n    # Filter the slots based on the meeting duration\n    for start, end in available_times:\n        if end - start >= meeting_duration:\n            return start, start + meeting_duration\n    \n    return None\n\n# Get the meeting slot\nmeeting_slot = find_meeting_slot(jack_busy, charlotte_busy, meeting_duration, work_start, work_end)\n\n# Convert to HH:MM\nif meeting_slot:\n    start_time = datetime.strptime(f\"{work_start // 60}:{work_start % 60}\", \"%H:%M\") + timedelta(minutes=meeting_slot[0])\n    end_time = datetime.strptime(f\"{work_end // 60}:{work_end % 60}\", \"%H:%M\") + timedelta(minutes=meeting_slot[1])\n    formatted_start = start_time.strftime(\"%H:%M\")\n    formatted_end = end_time.strftime(\"%H:%M\")\n    day_of_week = \"Monday\"\n    \n    print(f\"{formatted_start}:{formatted_end}\")\n    print(day_of_week)\n```",
            "count": "calendar_scheduling_example_502"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nimport datetime\n\n# Define participants' schedules\nnancy_schedule = {\n    \"Monday\": [\"10:00-10:30\", \"11:30-12:30\", \"13:30-14:00\", \"14:30-15:30\", \"16:00-17:00\"],\n    \"Tuesday\": [\"09:30-10:30\", \"11:00-11:30\", \"12:00-12:30\", \"13:00-13:30\", \"15:30-16:00\"],\n    \"Wednesday\": [\"10:00-11:30\", \"13:30-16:00\"]\n}\n\njose_schedule = {\n    \"Monday\": [\"09:00-17:00\"],\n    \"Tuesday\": [\"09:00-17:00\"],\n    \"Wednesday\": [\"09:00-09:30\", \"10:00-12:30\", \"13:30-14:30\", \"15:00-17:00\"]\n}\n\n# Define working hours and meeting duration\nworking_hours = {\n    \"Monday\": [\"09:00\", \"17:00\"],\n    \"Tuesday\": [\"09:00\", \"17:00\"],\n    \"Wednesday\": [\"09:00\", \"17:00\"]\n}\nmeeting_duration = datetime.timedelta(minutes=30)\n\ndef parse_schedule(schedule):\n    busy_times = []\n    for times in schedule.values():\n        for time in times:\n            start, end = time.split('-')\n            busy_times.append((datetime.datetime.strptime(start, \"%H:%M\"), datetime.datetime.strptime(end, \"%H:%M\")))\n    return busy_times\n\ndef find_time(participant1_schedule, participant2_schedule, working_hours):\n    participant1_busy = parse_schedule(participant1_schedule)\n    participant2_busy = parse_schedule(participant2_schedule)\n    \n    for day in working_hours:\n        start_work, end_work = [datetime.datetime.strptime(t, \"%H:%M\") for t in working_hours[day]]\n        available_slots = [(start_work, end_work)]\n        \n        # Mark busy slots\n        for busy in participant1_busy + participant2_busy:\n            new_available_slots = []\n            for available in available_slots:\n                if busy[0] > available[0]:\n                    new_available_slots.append((available[0], min(busy[0], available[1])))\n                if busy[1] < available[1]:\n                    new_available_slots.append((max(busy[1], available[0]), available[1]))\n            available_slots = new_available_slots\n        \n        # Find suitable meeting time\n        for start, end in available_slots:\n            if end - start >= meeting_duration:\n                proposed_start = start\n                proposed_end = start + meeting_duration\n                return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')} {day}\"\n    \n    return None\n\n# Find the meeting time\nmeeting_time = find_time(nancy_schedule, jose_schedule, working_hours)\n\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_798"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    \"Cheryl\": {\n        \"Monday\": [(0, 9, 0, 9, 30), (0, 11, 30, 13, 0), (0, 15, 30, 16, 0)],\n        \"Tuesday\": [(0, 15, 0, 15, 30)],\n        \"Wednesday\": []\n    },\n    \"Kyle\": {\n        \"Monday\": [(0, 9, 0, 17, 0)],\n        \"Tuesday\": [(0, 9, 30, 17, 0)],\n        \"Wednesday\": [(0, 9, 0, 9, 30), (0, 10, 0, 13, 0), (0, 13, 30, 14, 0), (0, 14, 30, 17, 0)]\n    }\n}\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Work hours\nwork_hours = {\n    \"Monday\": (9, 17),\n    \"Tuesday\": (9, 17),\n    \"Wednesday\": (9, 17)\n}\n\ndef find_available_time():\n    for day in [\"Monday\", \"Tuesday\"]:\n        # Get work hours\n        start_hour, end_hour = work_hours[day]\n\n        # Create a list of busy times\n        busy_times = []\n        for participant in schedules:\n            busy_times.extend(schedules[participant][day])\n        \n        # Sort and merge busy times\n        busy_times.sort()\n        merged_busy_times = []\n        \n        for busy in busy_times:\n            if merged_busy_times and merged_busy_times[-1][1] >= busy[1]:\n                merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], busy[1]))\n            else:\n                merged_busy_times.append(busy)\n\n        # Check for free time slots\n        last_end = start_hour * 60  # Convert to minutes\n        for busy in merged_busy_times:\n            busy_start = busy[1] * 60  # Convert to minutes\n            busy_end = busy[3] * 60    # Convert to minutes\n\n            if busy_start - last_end >= meeting_duration:\n                meeting_start = last_end\n                meeting_end = meeting_start + meeting_duration\n                if meeting_end <= busy_start:\n                    return f\"{day}: {meeting_start//60:02}:{meeting_start%60:02}:{meeting_end//60:02}:{meeting_end%60:02}\"\n            \n            last_end = busy_end\n        \n        # Check after the last busy slot until the end of work hours\n        if last_end < end_hour * 60 and (end_hour * 60) - last_end >= meeting_duration:\n            meeting_start = last_end\n            meeting_end = meeting_start + meeting_duration\n            if meeting_end <= end_hour * 60:\n                return f\"{day}: {meeting_start//60:02}:{meeting_start%60:02}:{meeting_end//60:02}:{meeting_end%60:02}\"\n\nresult = find_available_time()\nprint(result)\n```",
            "count": "calendar_scheduling_example_710"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define existing schedules\nanthony_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\npamela_busy = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\npamela_preference_end = datetime.strptime(\"14:30\", \"%H:%M\")\n\nzachary_busy = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine all busy times\nbusy_times = anthony_busy + pamela_busy + zachary_busy\n\n# Function to find a free slot\ndef find_free_time(start, end, duration, busy_times, pamela_pref_end):\n    current_time = start\n    while current_time + duration <= end:\n        is_free = True\n        for busy_start, busy_end in busy_times:\n            if busy_start < current_time + duration and current_time < busy_end:\n                is_free = False\n                break\n        if is_free and current_time + duration <= pamela_pref_end:\n            return (current_time, current_time + duration)\n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n    return None\n\n# Find a suitable time\nfree_time = find_free_time(work_start, work_end, meeting_duration, busy_times, pamela_preference_end)\n\nif free_time:\n    start_time, end_time = free_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')} Monday\")\n```\n",
            "count": "calendar_scheduling_example_25"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    \"Tyler\": [],\n    \"Kelly\": [],\n    \"Stephanie\": [(11, 0), (14, 30)],\n    \"Hannah\": [],\n    \"Joe\": [(9, 0), (10, 0), (12, 30), (14, 0)],\n    \"Diana\": [(9, 0), (11, 30), (13, 0), (14, 30), (16, 0)],\n    \"Deborah\": [(9, 0), (10, 30), (12, 30), (13, 30), (14, 30), (16, 0)]\n}\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Create a list of all busy times\nbusy_times = []\nfor participant, blocks in schedules.items():\n    for block in blocks:\n        busy_start = datetime.combine(work_start.date(), time(*block))\n        busy_end = busy_start + meeting_duration\n        busy_times.append((busy_start, busy_end))\n\n# Sort the busy times\nbusy_times.sort()\n\n# Find the gaps in the schedule\nfree_slots = []\ncurrent_time = work_start\n\nfor busy_start, busy_end in busy_times:\n    if current_time + meeting_duration <= busy_start:\n        free_slots.append((current_time, busy_start))\n    current_time = max(current_time, busy_end)\n\nif current_time + meeting_duration <= work_end:\n    free_slots.append((current_time, work_end))\n\n# Choose the first available time slot\nif free_slots:\n    proposed_start, proposed_end = free_slots[0]\n    proposed_time_range = f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n    day_of_week = proposed_start.strftime('%A')\n    print(f'Time range: {{{proposed_time_range}}}, Day: {day_of_week}')\nelse:\n    print(\"No available time slot found.\")\n```",
            "count": "calendar_scheduling_example_493"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start, end, duration, constraints):\n    day_of_week = start.strftime(\"%A\")\n    current_time = start\n\n    while current_time + duration <= end:\n        is_available = True\n        for constraint in constraints:\n            if current_time < constraint[1] and (current_time + duration) > constraint[0]:\n                is_available = False\n                break\n        \n        if is_available:\n            return current_time.strftime(\"%H:%M\") + \":\" + (current_time + duration).strftime(\"%H:%M\"), day_of_week\n        \n        current_time += timedelta(minutes=30)  # Check every half hour\n\n# Constraints for Judy and Nicole\njudy_constraints = []\nnicole_constraints = [(datetime.strptime(\"09:00\", \"%H:%M\").replace(year=2023, month=10, day=2), \n                      datetime.strptime(\"10:00\", \"%H:%M\").replace(year=2023, month=10, day=2)),\n                     (datetime.strptime(\"10:30\", \"%H:%M\").replace(year=2023, month=10, day=2), \n                      datetime.strptime(\"16:30\", \"%H:%M\").replace(year=2023, month=10, day=2))]\nconstraints = judy_constraints + nicole_constraints\n\n# Define working hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\").replace(year=2023, month=10, day=2)\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\").replace(year=2023, month=10, day=2)\nmeeting_duration = timedelta(minutes=30)\n\n# Find a suitable meeting time\nmeeting_time, day = find_meeting_time(work_start, work_end, meeting_duration, constraints)\nprint(f\"{meeting_time} on {day}\")\n```",
            "count": "calendar_scheduling_example_548"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check if a time slot is free for all participants\ndef is_time_free(start_time, end_time, schedules):\n    for schedule in schedules:\n        for busy_start, busy_end in schedule:\n            if (start_time < busy_end) and (end_time > busy_start):\n                return False\n    return True\n\n# Define the busy schedules of each participant as lists of tuples (start, end)\nschedules = [\n    [(9, 0), (9, 30)],   # Megan\n    [(9, 0), (9, 30)],   # Christine\n    [],                  # Gabriel\n    [(11, 30), (12, 0)], # Sara\n    [(9, 30), (10, 0)],  # Bruce\n    [(10, 0), (15, 30)], # Kathryn\n    [(9, 0), (9, 30)],   # Billy\n    [(11, 0), (11, 30)], # Billy\n    [(12, 0), (14, 0)],  # Billy\n    [(14, 30), (15, 30)] # Billy\n]\n\n# Meeting duration in minutes\nmeeting_duration = 30\nmeeting_start_time = 9  # 9 AM\nmeeting_end_time = 17   # 5 PM\n\n# Convert hour and minute into total minutes for easier calculation\ndef to_minutes(hour, minute):\n    return hour * 60 + minute\n\n# Generate available time slots\navailable_slots = []\nfor hour in range(meeting_start_time, meeting_end_time):\n    for minute in [0, 30]:  # Checking the start of each half hour\n        start_time = to_minutes(hour, minute)\n        end_time = start_time + meeting_duration\n        \n        if end_time <= to_minutes(meeting_end_time, 0):  # Make sure end time is within work hours\n            if is_time_free(start_time, end_time, schedules):\n                available_slots.append((hour, minute))\n\n# Choose the first available slot\nif available_slots:\n    proposed_time = available_slots[0]\n    proposed_start = f\"{proposed_time[0]:02}:{proposed_time[1]:02}\"\n    proposed_end = f\"{proposed_time[0]:02}:{(proposed_time[1] + meeting_duration) % 60:02}\"\n    day_of_week = \"Monday\"\n    print(f\"{proposed_start}:{proposed_end} - {day_of_week}\")\n```",
            "count": "calendar_scheduling_example_446"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the busy schedules\nschedules = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n}\n\n# Function to check available times\ndef find_meeting_time():\n    for day, busy_times in schedules.items():\n        current_time = working_hours_start\n        while current_time + meeting_duration <= working_hours_end:\n            # Check if current_time is within any busy time\n            if not any(start <= current_time < end for start, end in busy_times):\n                # Check if current_time + meeting_duration is also not in busy times\n                if not any(start <= current_time + meeting_duration <= end for start, end in busy_times):\n                    return f\"{day}: {current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            current_time += timedelta(minutes=15)  # Check every 15 minutes\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_786"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "15:00",
                "end_time": "15:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nschedules = {\n    \"Kimberly\": [(\"10:00\", \"10:30\"), (\"11:00\", \"12:00\"), (\"16:00\", \"16:30\")],\n    \"Megan\": [],\n    \"Marie\": [(\"10:00\", \"11:00\"), (\"11:30\", \"15:00\"), (\"16:00\", \"16:30\")],\n    \"Diana\": [(\"09:30\", \"10:00\"), (\"10:30\", \"14:30\"), (\"15:30\", \"17:00\")]\n}\n\n# Meeting parameters\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nday_of_week = \"Monday\"\n\n# Function to check availability\ndef is_available(start_time, end_time):\n    for busy_periods in schedules.values():\n        for start, end in busy_periods:\n            busy_start = datetime.strptime(start, \"%H:%M\")\n            busy_end = datetime.strptime(end, \"%H:%M\")\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n    return True\n\n# Loop through possible time slots\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    end_time = current_time + meeting_duration\n    if is_available(current_time, end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n        print(day_of_week)\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_185"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration and participants' work hours\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\ndays = ['Monday', 'Tuesday', 'Wednesday']\n\n# Define participants' schedules\ntyler_schedule = {\n    'Tuesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    'Wednesday': [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nruth_schedule = {\n    'Monday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Tuesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Wednesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Function to check if time slot is available\ndef is_time_available(schedule, start_time, end_time):\n    for busy_start, busy_end in schedule:\n        if (start_time < busy_end and end_time > busy_start):\n            return False\n    return True\n\n# Main logic to find a suitable time for the meeting\ndef find_meeting_time():\n    for day in days:\n        if day in tyler_schedule or day in ruth_schedule:\n            day_start = work_start\n            while day_start + meeting_duration <= work_end:\n                day_end = day_start + meeting_duration\n                \n                tyler_available = True\n                ruth_available = True\n                \n                if day in tyler_schedule:\n                    tyler_available = is_time_available(tyler_schedule[day], day_start, day_end)\n                if day in ruth_schedule:\n                    ruth_available = is_time_available(ruth_schedule[day], day_start, day_end)\n                \n                # Check if both are available at this time\n                if tyler_available and ruth_available:\n                    return f\"{day_start.strftime('%H:%M')}:{day_end.strftime('%H:%M')}:{day}\"\n                \n                day_start += timedelta(minutes=10)  # Check next slot\n\n# Output the result\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_724"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Thursday",
                "start_time": "14:30",
                "end_time": "15:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' availability\njulie_schedule = []\nruth_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),  # Monday\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),  # Tuesday\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),  # Wednesday\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),  # Thursday busy\n    (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),  # Thursday busy\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))   # Thursday busy\n]\n\n# Meeting constraints\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime('09:00', '%H:%M')\nwork_hours_end = datetime.strptime('17:00', '%H:%M')\ndays_of_week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    for day in days_of_week:\n        for start_hour in range(work_hours_start.hour, work_hours_end.hour):\n            proposed_start = datetime.strptime(f'{day} {start_hour:02}:00', '%A %H:%M')\n            proposed_end = proposed_start + meeting_duration\n            \n            if proposed_end.time() > work_hours_end.time():\n                continue\n            \n            if day == 'Thursday' and proposed_end <= datetime.strptime('11:30', '%H:%M'):\n                continue\n            \n            if proposed_start.time() < work_hours_start.time() or proposed_end.time() > work_hours_end.time():\n                continue\n            \n            # Check Ruth's schedule\n            slot_available = True\n            for busy_start, busy_end in ruth_schedule:\n                if not (proposed_end <= busy_start or proposed_start >= busy_end):\n                    slot_available = False\n                    break\n            \n            if slot_available:\n                return proposed_start.time(), proposed_end.time(), day\n    \n    return None\n\n# Get the meeting time\nmeeting_time = find_meeting_time()\nif meeting_time:\n    start_time, end_time, meeting_day = meeting_time\n    print(f'{start_time.strftime(\"%H:%M\")} : {end_time.strftime(\"%H:%M\")}, {meeting_day}')\n```\n",
            "count": "calendar_scheduling_example_819"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\ngregory_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                    (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M'))]\n\nnatalie_schedule = []  # Natalie is available all day\n\nchristine_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                      (datetime.strptime('13:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\nvincent_schedule = [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                    (datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                    (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                    (datetime.strptime('14:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n\n# Work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Find available slots\ndef find_available_slots(schedule):\n    available_slots = []\n    current_time = work_start\n\n    for start, end in sorted(schedule):\n        # Check for time slot before this blocked time\n        if current_time < start:\n            available_slots.append((current_time, start))\n        current_time = max(current_time, end)\n\n    # Check for any available time after the last meeting until end of work hours\n    if current_time < work_end:\n        available_slots.append((current_time, work_end))\n    \n    return available_slots\n\n# Get available slots for each participant\ngregory_slots = find_available_slots(gregory_schedule)\nnatalie_slots = [(work_start, work_end)]  # Natalie is available all day\nchristine_slots = find_available_slots(christine_schedule)\nvincent_slots = find_available_slots(vincent_schedule)\n\n# Function to find a common available meeting time\ndef find_meeting_time(slots_list):\n    for start, end in slots_list[0]:\n        # Check if this slot can fit all other schedules\n        meeting_time = start\n        if meeting_time + meeting_duration <= end:  # First person time slot\n            can_schedule = True\n            for slots in slots_list[1:]:\n                # Check for availability in other participants' slots\n                if not any(s_start <= meeting_time < s_end for s_start, s_end in slots):\n                    can_schedule = False\n                    break\n            if can_schedule:\n                return meeting_time\n    return None\n\n# Collecting all available slots\nall_slots = [gregory_slots, natalie_slots, christine_slots, vincent_slots]\n\n# Finding meeting time\nmeeting_start = find_meeting_time(all_slots)\nmeeting_end = meeting_start + meeting_duration\n\n# Output result\nif meeting_start:\n    day_of_week = \"Monday\"\n    print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')} - {day_of_week}\")\n```",
            "count": "calendar_scheduling_example_111"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "14:00",
                "end_time": "15:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "14:00",
                "end_time": "15:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and participants' schedules\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Existing schedules (start, end)\njulie_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nsean_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nlori_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Duration of the meeting\nmeeting_duration = timedelta(hours=1)\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = working_hours_start\n    \n    while current_time + meeting_duration <= working_hours_end:\n        next_time = current_time + meeting_duration\n        if is_time_available(current_time, next_time):\n            return current_time.strftime(\"%H:%M\") + \":\" + next_time.strftime(\"%H:%M\")\n        current_time += timedelta(minutes=1)\n    \n    return None\n\ndef is_time_available(start_time, end_time):\n    for busy_period in julie_schedule + sean_schedule + lori_schedule:\n        if (start_time < busy_period[1]) and (end_time > busy_period[0]):\n            return False\n    return True\n\n# Execute the function to get proposed meeting time\nproposed_time = find_meeting_time()\n\n# Output the proposed time along with the day of the week\nday_of_week = \"Monday\"\nif proposed_time:\n    print(f\"{proposed_time} {day_of_week}\")\n```\n",
            "count": "calendar_scheduling_example_42"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' busy times\nbusy_times = {\n    'Kathleen': [(datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    'Carolyn': [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))],\n    'Cheryl': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Virginia': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Angela': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n}\n\n# Meeting constraints\nmeeting_duration = timedelta(minutes=30)\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\nroger_pref_start_time = datetime.strptime(\"12:30\", \"%H:%M\")\n\n# Function to find free time slots\ndef find_free_time_slots(busy_times):\n    busy_slots = []\n\n    for times in busy_times.values():\n        busy_slots.extend(times)\n\n    busy_slots.sort()\n\n    free_slots = []\n    last_end_time = working_hours_start\n\n    for start, end in busy_slots:\n        if last_end_time < start:\n            free_slots.append((last_end_time, start))\n        last_end_time = max(last_end_time, end)\n\n    if last_end_time < working_hours_end:\n        free_slots.append((last_end_time, working_hours_end))\n\n    return free_slots\n\n# Find free time slots for the group\nfree_slots = find_free_time_slots(busy_times)\n\n# Find a suitable time slot for the meeting\nfor start, end in free_slots:\n    if start >= roger_pref_start_time and (end - start) >= meeting_duration:\n        meeting_start_time = start\n        meeting_end_time = start + meeting_duration\n        break\n\n# Output the meeting time and day\nday_of_week = \"Monday\"\nprint(f\"{meeting_start_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}, {day_of_week}\")\n```",
            "count": "calendar_scheduling_example_476"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nstart_of_day = datetime.strptime('09:00', '%H:%M')\nend_of_day = datetime.strptime('17:00', '%H:%M')\n\n# Define the busy schedules of each participant in terms of (start, end) tuples\nschedules = {\n    \"Melissa\": [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                 (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                 (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n    \"Gregory\": [(datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    \"Victoria\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                 (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                 (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                 (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                 (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    \"Thomas\": [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('14:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    \"Jennifer\": [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                 (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                 (datetime.strptime('11:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                 (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                 (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                 (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Free time slots within working hours\nfree_slots = []\ncurrent_time = start_of_day\n\nwhile current_time + meeting_duration <= end_of_day:\n    # Define the time slot to check\n    slot_end = current_time + meeting_duration\n    is_free = True\n    \n    # Check if anyone is busy during this slot\n    for busy_times in schedules.values():\n        for start, end in busy_times:\n            if start < slot_end and current_time < end:\n                is_free = False\n                break\n        if not is_free:\n            break\n    \n    # Check Wayne's preference\n    if is_free and current_time < datetime.strptime('14:00', '%H:%M'):\n        is_free = False\n        \n    if is_free:\n        free_slots.append((current_time, slot_end))\n    \n    current_time += timedelta(minutes=1)\n\n# Select the first available slot\nif free_slots:\n    proposed_time = free_slots[0]\n    print(f\"Meeting proposed from {proposed_time[0].strftime('%H:%M')} to {proposed_time[1].strftime('%H:%M')} on Monday\")\nelse:\n    print(\"No available slot found.\")\n\n# Output the result in HH:MM:HH:MM format along with the day of the week\nif free_slots:\n    print(f\"{proposed_time[0].strftime('%H:%M')}:{proposed_time[1].strftime('%H:%M')} Monday\")\n```",
            "count": "calendar_scheduling_example_458"
        },
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "11:00",
                "end_time": "12:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and duration\nwork_start = timedelta(hours=9)\nwork_end = timedelta(hours=17)\nmeeting_duration = timedelta(hours=1)\n\n# Define participants' busy schedules\nbetty_busy = {\n    \"Monday\": [(timedelta(hours=10), timedelta(hours=10, minutes=30)),\n               (timedelta(hours=11, minutes=30), timedelta(hours=12, minutes=30)),\n               (timedelta(hours=16), timedelta(hours=16, minutes=30))],\n    \"Tuesday\": [(timedelta(hours=9, minutes=30), timedelta(hours=10)),\n                (timedelta(hours=10, minutes=30), timedelta(hours=11)),\n                (timedelta(hours=12), timedelta(hours=12, minutes=30)),\n                (timedelta(hours=13, minutes=30), timedelta(hours=15)),\n                (timedelta(hours=16, minutes=30), timedelta(hours=17))],\n    \"Wednesday\": [(timedelta(hours=13, minutes=30), timedelta(hours=14)),\n                  (timedelta(hours=14, minutes=30), timedelta(hours=15))],\n    \"Friday\": [(timedelta(hours=9), timedelta(hours=10)),\n               (timedelta(hours=11, minutes=30), timedelta(hours=12)),\n               (timedelta(hours=12, minutes=30), timedelta(hours=13)),\n               (timedelta(hours=14, minutes=30), timedelta(hours=15))]\n}\n\nmegan_busy = {\n    \"Monday\": [(timedelta(hours=9), timedelta(hours=17))],\n    \"Tuesday\": [(timedelta(hours=9), timedelta(hours=9, minutes=30)),\n                (timedelta(hours=10), timedelta(hours=10, minutes=30)),\n                (timedelta(hours=12), timedelta(hours=14)),\n                (timedelta(hours=15), timedelta(hours=15, minutes=30)),\n                (timedelta(hours=16), timedelta(hours=16, minutes=30))],\n    \"Wednesday\": [(timedelta(hours=9, minutes=30), timedelta(hours=10, minutes=30)),\n                  (timedelta(hours=11), timedelta(hours=11, minutes=30)),\n                  (timedelta(hours=12, minutes=30), timedelta(hours=13)),\n                  (timedelta(hours=13, minutes=30), timedelta(hours=14, minutes=30)),\n                  (timedelta(hours=15, minutes=30), timedelta(hours=17))],\n    \"Thursday\": [(timedelta(hours=9), timedelta(hours=10, minutes=30)),\n                 (timedelta(hours=11, minutes=30), timedelta(hours=14)),\n                 (timedelta(hours=14, minutes=30), timedelta(hours=15)),\n                 (timedelta(hours=15, minutes=30), timedelta(hours=16, minutes=30))],\n    \"Friday\": [(timedelta(hours=9), timedelta(hours=17))]\n}\n\n# Exclude certain days for Betty \nexclude_days = [\"Wednesday\", \"Thursday\"]\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:\n        if day in exclude_days:\n            continue\n        \n        # Get the busy intervals for both Betty and Megan\n        busy_intervals = betty_busy.get(day, []) + megan_busy.get(day, [])\n        \n        # Create a timeline of busy intervals for the day\n        busy_intervals.append((work_start, work_start))  # start of work\n        busy_intervals.append((work_end, work_end))      # end of work\n        \n        # Sort intervals and merge them\n        busy_intervals = sorted(busy_intervals)\n        \n        merged_intervals = []\n        current_start, current_end = busy_intervals[0]\n        \n        for start, end in busy_intervals[1:]:\n            if start <= current_end:\n                current_end = max(current_end, end)  # extend the end\n            else:\n                merged_intervals.append((current_start, current_end))\n                current_start, current_end = start, end\n        \n        merged_intervals.append((current_start, current_end))\n        \n        # Find an available slot for the meeting\n        for i in range(len(merged_intervals) - 1):\n            end_of_current = merged_intervals[i][1]\n            start_of_next = merged_intervals[i + 1][0]\n            \n            # Calculate the gap\n            if start_of_next - end_of_current >= meeting_duration:\n                meeting_start = end_of_current\n                meeting_end = meeting_start + meeting_duration\n                \n                # Checking if the meeting fits in the work hours\n                if meeting_start >= work_start and meeting_end <= work_end:\n                    start_time = (datetime.combine(datetime.today(), datetime.min.time()) + meeting_start).time()\n                    end_time = (datetime.combine(datetime.today(), datetime.min.time()) + meeting_end).time()\n                    print(f\"Time: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\")\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')} {day}\"\n\n# Call the function\nfind_meeting_time()\n```",
            "count": "calendar_scheduling_example_964"
        },
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules\nmargaret_schedule = {\n    \"Monday\": [\n        (\"10:30\", \"11:00\"),\n        (\"11:30\", \"12:00\"),\n        (\"13:00\", \"13:30\"),\n        (\"15:00\", \"17:00\"),\n    ],\n    \"Tuesday\": [\n        (\"12:00\", \"12:30\"),\n    ]\n}\n\nalexis_schedule = {\n    \"Monday\": [\n        (\"09:30\", \"11:30\"),\n        (\"12:30\", \"13:00\"),\n        (\"14:00\", \"17:00\"),\n    ],\n    \"Tuesday\": [\n        (\"09:00\", \"09:30\"),\n        (\"10:00\", \"10:30\"),\n        (\"14:00\", \"16:30\"),\n    ]\n}\n\n# Meeting constraints\nmeeting_duration = timedelta(minutes=30)\nmargaret_preference_day = \"Tuesday\"\nmargaret_preference_time_start = \"14:30\"\n\n# Define work hours\nwork_hours_start = \"09:00\"\nwork_hours_end = \"17:00\"\n\n# Function to convert time strings to datetime objects\ndef convert_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Function to check availability\ndef is_time_available(schedule, day, meeting_start, meeting_end):\n    for start, end in schedule.get(day, []):\n        if not (meeting_end <= convert_time(start) or meeting_start >= convert_time(end)):\n            return False\n    return True\n\n# Check availability for Tuesday after 14:30\nday = margaret_preference_day\nstart_time = convert_time(margaret_preference_time_start)\nend_time = convert_time(work_hours_end)\n\n# Find suitable time slot\ncurrent_time = start_time\nwhile current_time + meeting_duration <= end_time:\n    meeting_start = current_time\n    meeting_end = meeting_start + meeting_duration\n\n    if is_time_available(margaret_schedule, day, meeting_start, meeting_end) and \\\n       is_time_available(alexis_schedule, day, meeting_start, meeting_end):\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        print(day)\n        break\n\n    current_time += timedelta(minutes=30)  # Increment to next half hour\n```",
            "count": "calendar_scheduling_example_629"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nrobert_schedule = {\n    'Monday': [\n        (\"11:00\", \"11:30\"),\n        (\"14:00\", \"14:30\"),\n        (\"15:30\", \"16:00\"),\n    ],\n    'Tuesday': [\n        (\"10:30\", \"11:00\"),\n        (\"15:00\", \"15:30\"),\n    ],\n    'Wednesday': [\n        (\"10:00\", \"11:00\"),\n        (\"11:30\", \"12:00\"),\n        (\"12:30\", \"13:00\"),\n        (\"13:30\", \"14:00\"),\n        (\"15:00\", \"15:30\"),\n        (\"16:00\", \"16:30\"),\n    ]\n}\n\nralph_schedule = {\n    'Monday': [\n        (\"10:00\", \"13:30\"),\n        (\"14:00\", \"14:30\"),\n        (\"15:00\", \"17:00\"),\n    ],\n    'Tuesday': [\n        (\"9:00\", \"9:30\"),\n        (\"10:00\", \"10:30\"),\n        (\"11:00\", \"11:30\"),\n        (\"12:00\", \"13:00\"),\n        (\"14:00\", \"15:30\"),\n        (\"16:00\", \"17:00\"),\n    ],\n    'Wednesday': [\n        (\"10:30\", \"11:00\"),\n        (\"11:30\", \"12:00\"),\n        (\"13:00\", \"14:30\"),\n        (\"16:30\", \"17:00\"),\n    ]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find available meeting time\ndef find_meeting_time():\n    for day in ['Tuesday', 'Wednesday']:  # Start with preferred days\n        robert_busy_times = robert_schedule[day]\n        ralph_busy_times = ralph_schedule[day]\n        \n        # Create a list of busy times merged for both participants\n        busy_times = robert_busy_times + ralph_busy_times\n        \n        # Convert times to datetime and sort\n        busy_times = sorted([(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in busy_times])\n        \n        # Find time slots for meeting within work hours (9:00 to 17:00)\n        current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n        end_of_work_day = datetime.strptime(\"17:00\", \"%H:%M\")\n        \n        for start, end in busy_times:\n            # Check for the gap before the busy time\n            if current_time + meeting_duration <= start:\n                return f'{day} {current_time.time()} {current_time + meeting_duration.time()}'\n            \n            # Move current time to the end of the busy period\n            if current_time < end:\n                current_time = end\n\n        # Final check after the last busy time until end of work day\n        if current_time + meeting_duration <= end_of_work_day:\n            return f'{day} {current_time.time()} {current_time + meeting_duration.time()}'\n\n# Run function and print the proposed time for the meeting\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_702"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define work hours and meeting duration\n    start_work_hour = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_work_hour = datetime.strptime(\"17:00\", \"%H:%M\")\n    meeting_duration = timedelta(hours=1)\n    \n    # Define existing schedules\n    ryan_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                     (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))]\n    \n    ruth_schedule = []  # No meetings\n    \n    denise_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                       (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                       (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n    # Define the available time slots\n    available_slots = []\n    \n    current_time = start_work_hour\n    \n    while current_time + meeting_duration <= end_work_hour:\n        next_time = current_time + meeting_duration\n        \n        # Check if the current time slot is busy for any participant\n        is_busy = False\n        for busy_start, busy_end in ryan_schedule + denise_schedule:\n            if busy_start <= current_time < busy_end or busy_start < next_time <= busy_end:\n                is_busy = True\n                break\n                \n        if not is_busy:\n            available_slots.append((current_time, next_time))\n        \n        current_time += timedelta(minutes=30)  # Check every 30 minutes\n        \n    # Select the first available time slot\n    if available_slots:\n        meeting_start, meeting_end = available_slots[0]\n        meeting_time_str = f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\n        day_of_week = \"Monday\"  # Given in the task\n        print(f\"{meeting_time_str} {day_of_week}\")\n\nfind_meeting_time()\n```",
            "count": "calendar_scheduling_example_36"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, duration, work_hours):\n    # Convert work hours to datetime objects\n    work_start = datetime.strptime(work_hours[0], \"%H:%M\")\n    work_end = datetime.strptime(work_hours[1], \"%H:%M\")\n    \n    # Generate all time slots within work hours\n    time_slots = []\n    current_time = work_start\n    while current_time + timedelta(minutes=duration) <= work_end:\n        time_slots.append(current_time)\n        current_time += timedelta(minutes=30)  # Check every half hour\n    \n    # Check each time slot against each participant's schedule\n    for meeting_time in time_slots:\n        meeting_end = meeting_time + timedelta(minutes=duration)\n        if all(not (meeting_time < busy_start < meeting_end or meeting_time < busy_end < meeting_end) \n               for busy_times in participants.values() \n               for busy_start, busy_end in busy_times):\n            return meeting_time.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n    \n    return None\n\n# Existing schedules\nparticipants = {\n    'Walter': [],\n    'Cynthia': [(datetime(2023, 10, 16, 9, 0), datetime(2023, 10, 16, 9, 30)),\n                (datetime(2023, 10, 16, 10, 0), datetime(2023, 10, 16, 10, 30)),\n                (datetime(2023, 10, 16, 13, 30), datetime(2023, 10, 16, 14, 30)),\n                (datetime(2023, 10, 16, 15, 0), datetime(2023, 10, 16, 16, 0))],\n    'Ann': [(datetime(2023, 10, 16, 10, 0), datetime(2023, 10, 16, 11, 0)),\n            (datetime(2023, 10, 16, 13, 0), datetime(2023, 10, 16, 13, 30)),\n            (datetime(2023, 10, 16, 14, 0), datetime(2023, 10, 16, 15, 0)),\n            (datetime(2023, 10, 16, 16, 0), datetime(2023, 10, 16, 16, 30))],\n    'Catherine': [(datetime(2023, 10, 16, 9, 0), datetime(2023, 10, 16, 11, 30)),\n                  (datetime(2023, 10, 16, 12, 30), datetime(2023, 10, 16, 13, 30)),\n                  (datetime(2023, 10, 16, 14, 30), datetime(2023, 10, 16, 17, 0))],\n    'Kyle': [(datetime(2023, 10, 16, 9, 0), datetime(2023, 10, 16, 9, 30)),\n             (datetime(2023, 10, 16, 10, 0), datetime(2023, 10, 16, 11, 30)),\n             (datetime(2023, 10, 16, 12, 0), datetime(2023, 10, 16, 12, 30)),\n             (datetime(2023, 10, 16, 13, 0), datetime(2023, 10, 16, 14, 30)),\n             (datetime(2023, 10, 16, 15, 0), datetime(2023, 10, 16, 16, 0))]\n}\n\nmeeting_duration = 30  # in minutes\nwork_hours = [\"09:00\", \"17:00\"]\nday_of_week = \"Monday\"\n\nmeeting_start, meeting_end = find_meeting_time(participants, meeting_duration, work_hours)\n\nprint(f\"{meeting_start}:{meeting_end}\")\nprint(day_of_week)\n```",
            "count": "calendar_scheduling_example_244"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Schedules for each participant\nschedules = {\n    \"Gregory\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Jonathan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Barbara\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    \"Jesse\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    \"Alan\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n             (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Nicole\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Catherine\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        busy_time_intervals = []\n        \n        for participant, busy_times in schedules.items():\n            for busy_start, busy_end in busy_times:\n                if busy_start < current_time + meeting_duration and busy_end > current_time:\n                    busy_time_intervals.append((busy_start, busy_end))\n        \n        # Check if the current time slot is free for all participants\n        if not busy_time_intervals:\n            return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\"), \"Monday\"\n        \n        # Move to the end of the earliest busy time\n        current_time = max(busy_end for busy_start, busy_end in busy_time_intervals)\n    \n    return None\n\n# Get the meeting time\nmeeting_time = find_meeting_time()\n\n# Output the result\nif meeting_time:\n    print(\"{0}:{1}:{2}:{3}\".format(meeting_time[0], meeting_time[1], meeting_time[2], meeting_time[2]))\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_473"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\nday_of_week = \"Monday\"\n\n# Define the busy slots for Lisa and Anthony\nlisa_busy_slots = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nanthony_busy_slots = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                      (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                      (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                      (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                      (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                      (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine busy slots\nall_busy_slots = lisa_busy_slots + anthony_busy_slots\n# Sort busy slots by start time\nall_busy_slots.sort(key=lambda x: x[0])\n\n# Find available slots\navailable_start = work_start\nfor busy_start, busy_end in all_busy_slots:\n    if available_start + meeting_duration <= busy_start:\n        available_end = available_start + meeting_duration\n        if available_end <= busy_start:\n            print(f\"{available_start.strftime('%H:%M')}:{available_end.strftime('%H:%M')}\")\n            print(day_of_week)\n            break\n    available_start = max(available_start, busy_end)\n\n# If the end of the work day is reached and no slot has been found\nif available_start + meeting_duration <= work_end:\n    print(f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\")\n    print(day_of_week)\n```",
            "count": "calendar_scheduling_example_583"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "15:00",
                "end_time": "15:30"
            },
            "has_error": false,
            "raw_model_response": "```python\n# Define the existing schedules\njesse_schedule = {\n    \"Monday\": [(9, 17)],\n    \"Tuesday\": [(9, 9.5), (13, 13.5), (14, 15)]\n}\n\nlawrence_schedule = {\n    \"Monday\": [(9, 17)],\n    \"Tuesday\": [(9.5, 10.5), (11.5, 12.5), (13, 13.5), (14.5, 15), (15.5, 16.5)]\n}\n\n# Meeting duration in hours\nmeeting_duration = 0.5\n\n# Function to find available time\ndef find_meeting_time(jesse_schedule, lawrence_schedule, meeting_duration):\n    for day in [\"Monday\", \"Tuesday\"]:\n        jesse_busy_times = jesse_schedule[day]\n        lawrence_busy_times = lawrence_schedule[day]\n\n        # Create a list of all busy times\n        busy_times = jesse_busy_times + lawrence_busy_times\n        \n        # Include work hours\n        if day == \"Monday\":\n            busy_times.append((9, 17))\n        elif day == \"Tuesday\":\n            busy_times.append((9, 16.5))\n\n        # Sort and merge busy times\n        busy_times.sort()\n        merged_busy_times = []\n        for start, end in busy_times:\n            if not merged_busy_times or merged_busy_times[-1][1] < start:\n                merged_busy_times.append((start, end))\n            else:\n                merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n        \n        # Find gaps in the merged busy times\n        last_end = 9  # Work hours start at 9\n        for start, end in merged_busy_times:\n            if last_end + meeting_duration <= start:\n                return f\"{day} {last_end:.2f} {last_end + meeting_duration:.2f}\"\n            last_end = end\n        \n        # Check after the last booked time until the end of the workday\n        if last_end + meeting_duration <= (17 if day == \"Monday\" else 16.5):\n            return f\"{day} {last_end:.2f} {last_end + meeting_duration:.2f}\"\n\n# Call the function and print the result\nmeeting_time = find_meeting_time(jesse_schedule, lawrence_schedule, meeting_duration)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_652"
        },
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Thursday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules\nbetty_busy_times = {\n    \"Monday\": [(10, 30), (13, 30), (15, 0), (16, 0)],\n    \"Tuesday\": [(9, 0), (11, 30), (12, 30), (13, 30), (16, 30)],\n    \"Wednesday\": [(9, 30), (13, 0), (14, 0)],\n    \"Thursday\": [(9, 30), (11, 30), (14, 0), (15, 0), (16, 30)]\n}\n\nscott_busy_times = {\n    \"Monday\": [(9, 30), (15, 0), (16, 0)],\n    \"Tuesday\": [(9, 0), (10, 0), (11, 30), (12, 30), (14, 0), (16, 0)],\n    \"Wednesday\": [(9, 30), (13, 0), (14, 0), (15, 0), (16, 0)],\n    \"Thursday\": [(9, 0), (10, 0), (11, 0), (12, 30), (15, 0), (16, 30)]\n}\n\n# Duration of the meeting in minutes\nmeeting_duration = 30\n\n# Define working days and constraints\nworking_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\nbetty_constraints = {\"Monday\": False, \"Tuesday\": \"15:00\", \"Thursday\": \"15:00\"}\nscott_constraints = {\"Wednesday\": \"avoid\"}\n\n# Function to check for available time slots\ndef is_time_available(day, start_hour, start_minute):\n    end_hour = start_hour + (start_minute + meeting_duration) // 60\n    end_minute = (start_minute + meeting_duration) % 60\n    if end_hour >= 17:  \n        return False\n    \n    for start, end in betty_busy_times.get(day, []):\n        if (start_hour < end) and (start < end_hour or (start == end_hour and start_minute < end_minute)):\n            return False\n            \n    for start, end in scott_busy_times.get(day, []):\n        if (start_hour < end) and (start < end_hour or (start == end_hour and start_minute < end_minute)):\n            return False\n    \n    return True\n\n# Find suitable time\nproposed_time = None\nfor day in working_days:\n    if not betty_constraints[day]:  # Betty isn't available on Monday\n        continue\n    for hour in range(9, 17):\n        for minute in [0, 30]:\n            if is_time_available(day, hour, minute):\n                proposed_time = f\"{day}, {hour:02}:{minute:02}:{hour:02}:{minute+meeting_duration:02}\"\n                break\n        if proposed_time:\n            break\n    if proposed_time:\n        break\n\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_867"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration in hours\nmeeting_duration = timedelta(hours=1)\n\n# Define the work hours and days\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define participant schedules\npatricia_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ]\n}\n\njesse_schedule = {\n    \"Monday\": [\n        (work_hours_start, work_hours_end)  # Blocked all day\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), work_hours_end)  # Blocked until the end of day\n    ]\n}\n\ndef find_open_time(schedules, work_start, work_end, duration):\n    for day in schedules.keys():\n        busy_times = schedules[day]\n        available_start = work_start\n\n        for busy_start, busy_end in busy_times:\n            if available_start + duration <= busy_start:\n                return day, available_start, available_start + duration\n            available_start = max(available_start, busy_end)\n\n        if available_start + duration <= work_end:\n            return day, available_start, available_start + duration\n\n    return None, None, None\n\n# Find available time slots\nday, start_time, end_time = find_open_time(patricia_schedule['Monday'], work_hours_start, work_hours_end, meeting_duration)\nif day is None:\n    day, start_time, end_time = find_open_time(patricia_schedule['Tuesday'], work_hours_start, work_hours_end, meeting_duration)\n\n# Output results\nif day:\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')} - {day}\")\n```",
            "count": "calendar_scheduling_example_626"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedules = {\n    'Evelyn': [(timedelta(hours=9), timedelta(hours=17))],\n    'Joshua': [(timedelta(hours=9), timedelta(hours=11)),\n               (timedelta(hours=12, minutes=30), timedelta(hours=13, minutes=30)),\n               (timedelta(hours=14, minutes=30), timedelta(hours=16, minutes=30)),\n               (timedelta(hours=17), timedelta(hours=17))],\n    'Kevin': [(timedelta(hours=9), timedelta(hours=17))],\n    'Gerald': [(timedelta(hours=9), timedelta(hours=17))],\n    'Jerry': [(timedelta(hours=9, minutes=30), timedelta(hours=10, minutes=30)),\n              (timedelta(hours=12), timedelta(hours=12, minutes=30)),\n              (timedelta(hours=13), timedelta(hours=13, minutes=30)),\n              (timedelta(hours=14), timedelta(hours=14, minutes=30)),\n              (timedelta(hours=15), timedelta(hours=15, minutes=30)),\n              (timedelta(hours=16), timedelta(hours=16, minutes=30)),\n              (timedelta(hours=17), timedelta(hours=17))],\n    'Jesse': [(timedelta(hours=9, minutes=30), timedelta(hours=10, minutes=30)),\n              (timedelta(hours=12), timedelta(hours=12, minutes=30)),\n              (timedelta(hours=13), timedelta(hours=14, minutes=30)),\n              (timedelta(hours=15), timedelta(hours=15, minutes=30)),\n              (timedelta(hours=16, minutes=30), timedelta(hours=17))],\n    'Kenneth': [(timedelta(hours=10, minutes=30), timedelta(hours=12, minutes=30)),\n                (timedelta(hours=13, minutes=30), timedelta(hours=14)),\n                (timedelta(hours=14, minutes=30), timedelta(hours=15)),\n                (timedelta(hours=15, minutes=30), timedelta(hours=16)),\n                (timedelta(hours=16, minutes=30), timedelta(hours=17))]\n}\n\ndef find_meeting_time(duration_hours, duration_minutes):\n    duration = timedelta(hours=duration_hours, minutes=duration_minutes)\n    day = \"Monday\"\n    \n    # Create a list of all free time slots for all participants\n    all_free_slots = []\n    for participant, busy_times in schedules.items():\n        free_slots = []\n        start_of_day = timedelta(hours=9)\n        end_of_day = timedelta(hours=17)\n\n        # Calculate free slots\n        if busy_times:\n            busy_times = sorted(busy_times, key=lambda x: x[0])  # Sort busy times\n            busy_times = [(start_of_day, busy_times[0][0])] + busy_times + [(busy_times[-1][1], end_of_day)]\n            \n            for i in range(len(busy_times) - 1):\n                free_slot_start = busy_times[i][1]\n                free_slot_end = busy_times[i + 1][0]\n                if free_slot_end - free_slot_start >= duration:\n                    free_slots.append((free_slot_start, free_slot_end))\n        else:\n            free_slots = [(start_of_day, end_of_day)]\n\n        all_free_slots.append(free_slots)\n\n    # Find common free slots\n    common_free_slots = all_free_slots[0]\n    for slots in all_free_slots[1:]:\n        new_common_slots = []\n        for start1, end1 in common_free_slots:\n            for start2, end2 in slots:\n                start = max(start1, start2)\n                end = min(end1, end2)\n                if end - start >= duration:\n                    new_common_slots.append((start, end))\n        common_free_slots = new_common_slots\n\n    # Select the first available time slot\n    if common_free_slots:\n        start_time = common_free_slots[0][0]\n        end_time = start_time + duration\n        return f\"{start_time.seconds//3600:02}:{(start_time.seconds//60)%60:02}:{end_time.seconds//3600:02}:{(end_time.seconds//60)%60:02} ({day})\"\n    \n    return \"No available time slots found.\"\n\n# Proposed meeting duration is 1 hour\nprint(find_meeting_time(1, 0))\n```",
            "count": "calendar_scheduling_example_479"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, time, timedelta\n\n# Define work hours and meeting duration\nwork_start = time(9, 0)\nwork_end = time(17, 0)\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules\nmary_schedule = {\n    'Tuesday': [(time(10, 0), time(10, 30)), (time(15, 30), time(16, 0))],\n    'Wednesday': [(time(9, 30), time(10, 0)), (time(15, 0), time(15, 30))],\n    'Thursday': [(time(9, 0), time(10, 0)), (time(10, 30), time(11, 30))],\n}\n\nalexis_schedule = {\n    'Monday': [(time(9, 0), time(10, 0)), (time(10, 30), time(12, 0)), (time(12, 30), time(16, 30))],\n    'Tuesday': [(time(9, 0), time(10, 0)), (time(10, 30), time(11, 30)), (time(12, 0), time(15, 30)), (time(16, 0), time(17, 0))],\n    'Wednesday': [(time(9, 0), time(11, 0)), (time(11, 30), time(17, 0))],\n    'Thursday': [(time(10, 0), time(12, 0)), (time(14, 0), time(14, 30)), (time(15, 30), time(16, 0)), (time(16, 30), time(17, 0))],\n}\n\n# Function to find time slot for meeting\ndef find_meeting_time(mary_schedule, alexis_schedule, meeting_duration):\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n    for day in days:\n        mary_busy_times = mary_schedule.get(day, [])\n        alexis_busy_times = alexis_schedule.get(day, [])\n        \n        # All busy times combined\n        busy_times = mary_busy_times + alexis_busy_times\n        \n        # Sorting busy times\n        busy_times.sort()\n        \n        # Find available time slots\n        last_end_time = work_start\n        for start, end in busy_times:\n            if last_end_time + meeting_duration <= start:\n                return f'{last_end_time.strftime(\"%H:%M\")}:{(last_end_time + meeting_duration).strftime(\"%H:%M\")} {day}'\n            last_end_time = max(last_end_time, end)\n        \n        # Check after last busy time until end of work hours\n        if last_end_time + meeting_duration <= work_end:\n            return f'{last_end_time.strftime(\"%H:%M\")}:{(last_end_time + meeting_duration).strftime(\"%H:%M\")} {day}'\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(mary_schedule, alexis_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_812"
        },
        {
            "final_program_time": {
                "day": "Friday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Friday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check availability of the participants\ndef is_available(start_time, end_time, busy_slots):\n    for start, end in busy_slots:\n        if start_time < end and start < end_time:\n            return False\n    return True\n\n# Define the schedules\neugene_busy = [(datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 0)),\n               (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 0)),\n               (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0)),\n               (datetime(2023, 10, 2, 16, 0), datetime(2023, 10, 2, 16, 30)),\n               (datetime(2023, 10, 4, 9, 0), datetime(2023, 10, 4, 9, 30)),\n               (datetime(2023, 10, 4, 11, 0), datetime(2023, 10, 4, 11, 30)),\n               (datetime(2023, 10, 4, 12, 0), datetime(2023, 10, 4, 12, 30)),\n               (datetime(2023, 10, 4, 13, 30), datetime(2023, 10, 4, 15, 0)),\n               (datetime(2023, 10, 5, 9, 30), datetime(2023, 10, 5, 10, 0)),\n               (datetime(2023, 10, 5, 11, 0), datetime(2023, 10, 5, 12, 30)),\n               (datetime(2023, 10, 6, 10, 30), datetime(2023, 10, 6, 11, 0)),\n               (datetime(2023, 10, 6, 12, 0), datetime(2023, 10, 6, 12, 30)),\n               (datetime(2023, 10, 6, 13, 0), datetime(2023, 10, 6, 13, 30))]\n\neric_busy = [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 17, 0)),\n              (datetime(2023, 10, 3, 9, 0), datetime(2023, 10, 3, 17, 0)),\n              (datetime(2023, 10, 4, 9, 0), datetime(2023, 10, 4, 11, 30)),\n              (datetime(2023, 10, 4, 12, 0), datetime(2023, 10, 4, 14, 0)),\n              (datetime(2023, 10, 4, 14, 30), datetime(2023, 10, 4, 16, 30)),\n              (datetime(2023, 10, 5, 9, 0), datetime(2023, 10, 5, 17, 0)),\n              (datetime(2023, 10, 6, 9, 0), datetime(2023, 10, 6, 11, 0)),\n              (datetime(2023, 10, 6, 11, 30), datetime(2023, 10, 6, 17, 0))]\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Check for availability\nfor day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']:\n    for hour in range(9, 17):\n        start_time = datetime(2023, 10, 2 if day == 'Monday' else 3 if day == 'Tuesday' else 4 if day == 'Wednesday' else 5 if day == 'Thursday' else 6, hour, 0)\n        end_time = start_time + meeting_duration\n        if is_available(start_time, end_time, eugene_busy) and is_available(start_time, end_time, eric_busy):\n            print(f\"{day}: {start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n            break\n```",
            "count": "calendar_scheduling_example_938"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "14:00",
                "end_time": "15:00"
            },
            "has_error": true,
            "raw_model_response": "```python\ndef find_meeting_time():\n    # Participant availability\n    russell_schedule = {\n        'Monday': [(9, 10, 30), (11, 0, 12, 0), (14, 30, 17, 0)],\n        'Tuesday': [(9, 13, 30), (14, 0, 17, 0)]\n    }\n    \n    alexander_schedule = {\n        'Monday': [(9, 11, 30), (12, 0, 14, 30), (15, 0, 17, 0)],\n        'Tuesday': [(9, 10, 0), (13, 14, 0), (15, 15, 30), (16, 16, 30)]\n    }\n    \n    # Meeting duration\n    meeting_duration = 1  # in hours\n    \n    # Function to find free time slots for each day\n    def get_free_slots(schedule):\n        free_slots = []\n        for day, busy_times in schedule.items():\n            busy_times.sort()  # Sort busy times\n            last_end = 9  # Work starts at 9:00\n            for start, end in busy_times:\n                if last_end < start:\n                    free_slots.append((day, last_end, start))  # Free time found\n                last_end = max(last_end, end)  # Update last end time\n            if last_end < 17:  # Work ends at 17:00\n                free_slots.append((day, last_end, 17))\n        return free_slots\n    \n    # Get free slots for both participants\n    russell_free_slots = get_free_slots(russell_schedule)\n    alexander_free_slots = get_free_slots(alexander_schedule)\n    \n    # Check for overlapping free slots that meet the conditions\n    for day in russell_schedule.keys():\n        russell_slots = [(day, start, end) for d, start, end in russell_free_slots if d == day]\n        alexander_slots = [(day, start, end) for d, start, end in alexander_free_slots if d == day]\n        \n        for r_start, r_end in russell_slots:\n            for a_start, a_end in alexander_slots:\n                # Check if there's a common slot at least 1 hour long\n                start_time = max(r_start, a_start)\n                end_time = min(r_end, a_end)\n                if end_time - start_time >= meeting_duration:\n                    # Check that it's within Russell's preferred times\n                    if not (day == 'Tuesday' and start_time < 13.5):\n                        # Return in the requested format\n                        start_hour = int(start_time)\n                        start_minute = int((start_time % 1) * 60)\n                        end_hour = int(end_time)\n                        end_minute = int((end_time % 1) * 60)\n                        return f\"{day} {start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}\"\n\n# Output the proposed meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_678"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules\nschedules = {\n    'Adam': [(datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    'John': [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Stephanie': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Anna': [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Anna prefers not to meet before 14:30\npreferred_start = datetime.strptime(\"14:30\", \"%H:%M\")\n\n# Function to check if a time range is available for all participants\ndef is_available(start_time, end_time):\n    for schedule in schedules.values():\n        for busy_start, busy_end in schedule:\n            if start_time < busy_end and end_time > busy_start:\n                return False\n    return True\n\n# Find a suitable time slot\ncurrent_time = max(work_start, preferred_start)\nwhile current_time + meeting_duration <= work_end:\n    if is_available(current_time, current_time + meeting_duration):\n        proposed_start = current_time.strftime(\"%H:%M\")\n        proposed_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n        day_of_week = \"Monday\"\n        print(f\"{proposed_start}:{proposed_end} - {day_of_week}\")\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_116"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find the first available meeting time\ndef find_meeting_time(available_times, meeting_duration):\n    for start, end in available_times:\n        if (end - start) >= meeting_duration:\n            return start, start + meeting_duration\n    return None\n\n# Define participants' schedules\nandrew_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\ngrace_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\nsamuel_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n]\n\n# Combine schedules to understand availability\ndef get_available_times(schedules):\n    combined_schedule = []\n    for schedule in schedules:\n        for start, end in schedule:\n            combined_schedule.append((start, end))\n    \n    # Create full day's schedule\n    full_day = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n    \n    # Calculate free times\n    free_times = []\n    for start, end in full_day:\n        current_start = start\n        for block_start, block_end in sorted(combined_schedule):\n            if current_start < block_start:\n                free_times.append((current_start, block_start))\n                current_start = block_end\n            elif current_start < block_end:\n                current_start = block_end\n        if current_start < end:\n            free_times.append((current_start, end))\n    \n    return free_times\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Get available times for all participants\navailable_times = get_available_times([andrew_schedule, grace_schedule, samuel_schedule])\n\n# Find meeting time\nmeeting_start, meeting_end = find_meeting_time(available_times, meeting_duration)\n\n# Output the result\nif meeting_start and meeting_end:\n    print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n    print(\"Monday\")\n```",
            "count": "calendar_scheduling_example_45"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define the participants' busy schedules\n    ryan_schedule = [\n        ('Monday', (9, 30), (10, 0)),\n        ('Monday', (11, 0), (12, 0)),\n        ('Monday', (13, 0), (13, 30)),\n        ('Monday', (15, 30), (16, 0)),\n        ('Tuesday', (11, 30), (12, 30)),\n        ('Tuesday', (15, 30), (16, 0)),\n        ('Wednesday', (12, 0), (13, 0)),\n        ('Wednesday', (15, 30), (16, 0)),\n        ('Wednesday', (16, 30), (17, 0)),\n    ]\n    \n    adam_schedule = [\n        ('Monday', (9, 0), (10, 30)),\n        ('Monday', (11, 0), (13, 30)),\n        ('Monday', (14, 0), (16, 0)),\n        ('Monday', (16, 30), (17, 0)),\n        ('Tuesday', (9, 0), (10, 0)),\n        ('Tuesday', (10, 30), (15, 30)),\n        ('Tuesday', (16, 0), (17, 0)),\n        ('Wednesday', (9, 0), (9, 30)),\n        ('Wednesday', (10, 0), (11, 0)),\n        ('Wednesday', (11, 30), (14, 30)),\n        ('Wednesday', (15, 0), (15, 30)),\n        ('Wednesday', (16, 0), (16, 30)),\n    ]\n    \n    # Define the preferred meeting duration\n    meeting_duration = timedelta(minutes=30)\n    \n    # Define the working hours and the days to check\n    work_days = [('Monday', (9, 0), (17, 0)), \n                 ('Tuesday', (9, 0), (17, 0)), \n                 ('Wednesday', (9, 0), (17, 0))]\n    \n    # Check each day for available meeting time\n    for day, start_hour, end_hour in work_days:\n        start_time = datetime.strptime(f\"{day} {start_hour[0]}:{start_hour[1]}\", \"%A %H:%M\")\n        end_time = datetime.strptime(f\"{day} {end_hour[0]}:{end_hour[1]}\", \"%A %H:%M\")\n        \n        # Create a busy time list\n        busy_times = [(datetime.strptime(f\"{d} {s[0]}:{s[1]}\", \"%A %H:%M\"),\n                       datetime.strptime(f\"{d} {e[0]}:{e[1]}\", \"%A %H:%M\")) \n                      for d, s, e in ryan_schedule + adam_schedule if d == day]\n        \n        # Check for free time slots\n        current_time = start_time\n        \n        while current_time + meeting_duration <= end_time:\n            meeting_end_time = current_time + meeting_duration\n            \n            # Check if the current time slot is busy\n            if not any(busy_start < meeting_end_time and current_time < busy_end for busy_start, busy_end in busy_times):\n                # Found a suitable time\n                return f\"{day}: {current_time.strftime('%H:%M')}:{meeting_end_time.strftime('%H:%M')}\"\n            \n            # Increment current_time by a minute\n            current_time += timedelta(minutes=1)\n\n# Call the function and print the proposed time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_707"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules: (start_time, end_time)\nschedules = {\n    \"Andrea\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 30)),\n                (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 30))],\n    \"Ruth\": [(datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 0)),\n             (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 15, 30))],\n    \"Steven\": [(datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 10, 30)),\n               (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 11, 30)),\n               (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 12, 30)),\n               (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 0)),\n               (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 16, 0))],\n    \"Grace\": [],\n    \"Kyle\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n             (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 12, 0)),\n             (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 13, 0)),\n             (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 15, 0)),\n             (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 0)),\n             (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))],\n    \"Elijah\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 11, 0)),\n               (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 13, 0)),\n               (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 0)),\n               (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 0)),\n               (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))],\n    \"Lori\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n             (datetime(2023, 10, 2, 10, 0), datetime(2023, 10, 2, 11, 30)),\n             (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 13, 30)),\n             (datetime(2023, 10, 2, 14, 0), datetime(2023, 10, 2, 16, 0)),\n             (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))]\n}\n\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime(2023, 10, 2, 9, 0)\nwork_end = datetime(2023, 10, 2, 17, 0)\n\ndef is_time_available(start, end):\n    for participant, busy_slots in schedules.items():\n        for busy_start, busy_end in busy_slots:\n            if busy_start < end and start < busy_end:\n                return False\n    return True\n\n# Check for available slots\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    if is_time_available(current_time, current_time + meeting_duration):\n        proposed_start = current_time\n        proposed_end = current_time + meeting_duration\n        print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}, Monday\")\n        break\n    current_time += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_457"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "11:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participant_schedules, meeting_duration, available_days):\n    work_hours = (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    \n    # Store availability for each day\n    availability = {}\n    \n    for day in available_days:\n        availability[day] = []\n        for start, end in participant_schedules[day]:\n            available_start = max(work_hours[0], start)\n            available_end = min(work_hours[1], end)\n            if available_start < available_end:\n                availability[day].append((available_start, available_end))\n    \n    # Check for times in each day\n    for day, times in availability.items():\n        merged_times = merge_intervals(times)\n\n        for start, end in merged_times:\n            if end - start >= meeting_duration:\n                meeting_start = start\n                meeting_end = start + meeting_duration\n                if meeting_end <= end:\n                    return day, meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\")\n    \n    return None\n\ndef merge_intervals(intervals):\n    if not intervals:\n        return []\n    \n    # Sort intervals based on the starting time\n    intervals.sort(key=lambda x: x[0])\n    \n    merged = []\n    current_start, current_end = intervals[0]\n    \n    for start, end in intervals[1:]:\n        if start <= current_end:  # Overlapping intervals\n            current_end = max(current_end, end)\n        else:\n            merged.append((current_start, current_end))\n            current_start, current_end = start, end\n            \n    merged.append((current_start, current_end))\n    return merged\n\n# Participant schedules\nschedules = {\n    \"Monday\": [\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ]\n}\n\nmeeting_time = find_meeting_time(schedules, timedelta(hours=1), [\"Monday\", \"Tuesday\", \"Wednesday\"])\nif meeting_time:\n    print(f\"{meeting_time[1]}:{meeting_time[2]}:{meeting_time[0]}\")\n```",
            "count": "calendar_scheduling_example_773"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and the meeting duration\nstart_hour = 9  # 9:00 AM\nend_hour = 17   # 5:00 PM\nmeeting_duration = timedelta(minutes=30)  # 30 minutes\n\n# Define the existing schedules\nmargaret_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n]\n\ndonna_schedule = [\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n]\n\nhelen_schedule = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n]\n\n# Define the day of the week\nday_of_week = \"Monday\"\n\ndef is_time_slot_available(start, end, schedule):\n    for busy_start, busy_end in schedule:\n        if busy_start < end and start < busy_end:\n            return False\n    return True\n\n# Iterate through each half-hour time slot during working hours to find an available slot\ncurrent_time = datetime.strptime(f\"{day_of_week} {start_hour:02}:00\", \"%A %H:%M\")\n\nwhile current_time + meeting_duration <= datetime.strptime(f\"{day_of_week} {end_hour:02}:00\", \"%A %H:%M\"):\n    meeting_start = current_time\n    meeting_end = current_time + meeting_duration\n    \n    if is_time_slot_available(meeting_start, meeting_end, margaret_schedule) and \\\n       is_time_slot_available(meeting_start, meeting_end, donna_schedule) and \\\n       is_time_slot_available(meeting_start, meeting_end, helen_schedule) and \\\n       meeting_end <= datetime.strptime(f\"{day_of_week} 13:30\", \"%A %H:%M\"):  # Helen's constraint\n        print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n        print(day_of_week)\n        break\n    \n    current_time += timedelta(minutes=30)  # Move to the next half-hour slot\n```",
            "count": "calendar_scheduling_example_17"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "15:30",
                "end_time": "16:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "15:30",
                "end_time": "16:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules as a list of tuples (start, end)\nschedules = {\n    'Shirley': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M'))],\n    'Jacob': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('9:30', '%H:%M')),\n              (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n              (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M'))],\n    'Stephen': [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n                (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M'))],\n    'Margaret': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('9:30', '%H:%M')),\n                 (datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                 (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                 (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Mason': [(datetime.strptime('9:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n              (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n              (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Available time slots on Monday\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Look for available time slots\ndef find_meeting_time():\n    # Creating a list of blocked times\n    blocked_times = []\n    for busy_slots in schedules.values():\n        blocked_times.extend(busy_slots)\n\n    # Finding free slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        slot_end = current_time + meeting_duration\n        if all(not (current_time < end and slot_end > start) for start, end in blocked_times):\n            # Additional constraint for Margaret\n            if not (current_time < datetime.strptime('14:30', '%H:%M')):\n                return current_time.strftime('%H:%M'), slot_end.strftime('%H:%M'), \"Monday\"\n        current_time += timedelta(minutes=30)  # Incrementing by half an hour\n    return None\n\nstart_time, end_time, day = find_meeting_time()\noutput = f\"{start_time}:{end_time} {day}\"\nprint(output)\n```",
            "count": "calendar_scheduling_example_206"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules for each participant\nschedules = {\n    'Stephanie': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                  (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Cheryl': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('16:30', '%H:%M'), work_end)],\n    'Bradley': [(datetime.strptime('9:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n                (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                (datetime.strptime('15:30', '%H:%M'), work_end)],\n    'Steven': [(work_start, datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n               (datetime.strptime('14:30', '%H:%M'), work_end)]\n}\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    free_times = []\n    current_start = work_start\n\n    while current_start + meeting_duration <= work_end:\n        current_end = current_start + meeting_duration\n        if all(not (current_start < end and current_end > start) for times in schedules.values() for start, end in times):\n            free_times.append((current_start, current_end))\n        current_start += timedelta(minutes=30)  # Check every 30 minutes\n\n    return free_times\n\n# Find free times and select the first available\navailable_times = find_meeting_time(schedules, meeting_duration, work_start, work_end)\n\nif available_times:\n    proposed_time = available_times[0]\n    start_time_str = proposed_time[0].strftime('%H:%M')\n    end_time_str = proposed_time[1].strftime('%H:%M')\n    day_of_week = 'Monday'\n    print(f\"{start_time_str}:{end_time_str}\")\n    print(day_of_week)\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_114"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants_schedules, meeting_duration, work_hours, day_of_week):\n    # Convert meeting duration to timedelta\n    meeting_duration = timedelta(minutes=meeting_duration)\n    \n    # Generate the available time slots based on work hours\n    start_work = datetime.strptime(work_hours[0], \"%H:%M\")\n    end_work = datetime.strptime(work_hours[1], \"%H:%M\")\n    \n    # Initialize available time slots\n    available_slots = [(start_work, end_work)]\n    \n    # Iterate through each participant's schedule\n    for schedule in participants_schedules:\n        new_available_slots = []\n        for start, end in available_slots:\n            slot_start = start\n            while slot_start < end:\n                slot_end = slot_start + meeting_duration\n                if slot_end > end:\n                    break\n                if not any(start < slot_end and slot_start < end for start, end in schedule):\n                    new_available_slots.append((slot_start, slot_end))\n                slot_start += timedelta(minutes=1)  # Increment slot start by 1 minute\n        available_slots = new_available_slots\n    \n    # Return the first available slot\n    if available_slots:\n        start_time, end_time = available_slots[0]\n        return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\", day_of_week\n    return None\n\n# Existing schedules\nmichael_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\neric_schedule = []  # Eric is available all day\n\narthur_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                   (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                   (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Participants' schedules\nparticipants_schedules = [michael_schedule, eric_schedule, arthur_schedule]\n\n# Meeting duration and work hours\nmeeting_duration = 30  # in minutes\nwork_hours = [\"09:00\", \"17:00\"]\nday_of_week = \"Monday\"\n\n# Find meeting time\nmeeting_time = find_meeting_time(participants_schedules, meeting_duration, work_hours, day_of_week)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_82"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' busy schedules\nbusy_times = {\n    \"Christine\": [(\"9:30\", \"10:30\"), (\"12:00\", \"12:30\"), (\"13:00\", \"13:30\"), (\"14:30\", \"15:00\"), (\"16:00\", \"16:30\")],\n    \"Janice\": [],\n    \"Bobby\": [(\"12:00\", \"12:30\"), (\"14:30\", \"15:00\")],\n    \"Elizabeth\": [(\"9:00\", \"9:30\"), (\"11:30\", \"13:00\"), (\"13:30\", \"14:00\"), (\"15:00\", \"15:30\"), (\"16:00\", \"17:00\")],\n    \"Tyler\": [(\"9:00\", \"11:00\"), (\"12:00\", \"12:30\"), (\"13:00\", \"13:30\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Edward\": [(\"9:00\", \"9:30\"), (\"10:00\", \"11:00\"), (\"11:30\", \"14:00\"), (\"14:30\", \"15:30\"), (\"16:00\", \"17:00\")]\n}\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"9:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Function to check if the time slot is free\ndef is_slot_free(start, end):\n    for busy in busy_times.values():\n        for busy_start, busy_end in busy:\n            busy_start_dt = datetime.strptime(busy_start, \"%H:%M\")\n            busy_end_dt = datetime.strptime(busy_end, \"%H:%M\")\n            if not (end <= busy_start_dt or start >= busy_end_dt):\n                return False\n    return True\n\n# Find a free time slot\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_slot_free(current_time, current_time + meeting_duration):\n            return current_time.strftime(\"%H:%M\"), (current_time + meeting_duration).strftime(\"%H:%M\"), \"Monday\"\n        current_time += timedelta(minutes=30)  # increment in half hour intervals\n    return None, None, None\n\nstart_time, end_time, day = find_meeting_time()\nif start_time and end_time:\n    print(f\"Suggested meeting time: {{{start_time}:{end_time}}} on {day}\")\nelse:\n    print(\"No available meeting time.\")\n```",
            "count": "calendar_scheduling_example_304"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedules = {\n    'Judy': [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    'Olivia': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))],\n    'Eric': [],\n    'Jacqueline': [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    'Laura': [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Tyler': [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n              (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Lisa': [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n             (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n             (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n             (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting parameters\nmeeting_duration = timedelta(minutes=30)\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Finding a suitable time\ndef is_time_free(start, end):\n    for busy_slots in schedules.values():\n        for busy_start, busy_end in busy_slots:\n            if not (end <= busy_start or start >= busy_end):\n                return False\n    return True\n\ndef find_meeting_time():\n    time_cursor = work_hours_start\n    while time_cursor + meeting_duration <= work_hours_end:\n        if is_time_free(time_cursor, time_cursor + meeting_duration):\n            return time_cursor, time_cursor + meeting_duration\n        time_cursor += timedelta(minutes=30)  # Increment by 30 minutes\n            \nmeeting_start, meeting_end = find_meeting_time()\nday_of_week = \"Monday\"\n\n# Output the format\nprint(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\nprint(day_of_week)\n```",
            "count": "calendar_scheduling_example_429"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "13:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing meetings for Jennifer\njennifer_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n}\n\n# Calculate available times\nfor day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n    current_time = start_time\n    # Check for meetings on this day\n    if day in jennifer_schedule:\n        busy_times = jennifer_schedule[day]\n        busy_times.sort(key=lambda x: x[0])  # Sort by start time\n\n        # Add end of busy time to find gaps\n        for start, end in busy_times:\n            # Check for free time before the next meeting\n            while current_time + meeting_duration <= start:\n                print(f\"Proposed meeting on {day} from {current_time.strftime('%H:%M')} to {(current_time + meeting_duration).strftime('%H:%M')}\")\n                current_time += meeting_duration\n            \n            # Move Current time to the end of the busy time if it overlaps\n            current_time = max(current_time, end)\n\n        # Check remaining time after the last meeting\n        if current_time + meeting_duration <= end_time:\n            print(f\"Proposed meeting on {day} from {current_time.strftime('%H:%M')} to {(current_time + meeting_duration).strftime('%H:%M')}\")\n```\n",
            "count": "calendar_scheduling_example_776"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find a suitable meeting time\ndef find_meeting_time(participants, duration, day_of_week):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of busy slots from participants\n    busy_slots = []\n    for schedule in participants.values():\n        for busy in schedule:\n            busy_slots.append((datetime.strptime(busy[0], \"%H:%M\"), datetime.strptime(busy[1], \"%H:%M\")))\n    \n    # Check for potential meeting slots\n    time_slot = work_start\n    while time_slot + duration <= work_end:\n        end_time_slot = time_slot + duration\n        if all(not (start < end_time_slot and end > time_slot) for start, end in busy_slots):\n            return f\"{time_slot.strftime('%H:%M')}:{end_time_slot.strftime('%H:%M')}\", day_of_week\n        time_slot += timedelta(minutes=1)\n    \n    return None\n\n# Participants' busy times\nparticipants = {\n    'Jacob': [('13:30', '14:00'), ('14:30', '15:00')],\n    'Diana': [('09:30', '10:00'), ('11:30', '12:00'), ('13:00', '13:30'), ('16:00', '16:30')],\n    'Adam': [('09:30', '10:30'), ('11:00', '12:30'), ('15:30', '16:00')],\n    'Angela': [('09:30', '10:00'), ('10:30', '12:00'), ('13:00', '15:30'), ('16:00', '16:30')],\n    'Dennis': [('09:00', '09:30'), ('10:30', '11:30'), ('13:00', '15:00'), ('16:30', '17:00')],\n}\n\n# Meeting duration\nduration = timedelta(minutes=30)\nday_of_week = \"Monday\"\n\n# Find and print the meeting time\nmeeting_time = find_meeting_time(participants, duration, day_of_week)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_246"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "14:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nimport datetime\n\n# Define participants' schedules\ndanielle_schedule = [(9, 0, 10, 0), (10, 30, 11, 0), (14, 30, 15, 0), (15, 30, 16, 0), (16, 30, 17, 0)]\nbruce_schedule = [(11, 0, 11, 30), (12, 30, 13, 0), (14, 0, 14, 30), (15, 30, 16, 0)]\neric_schedule = [(9, 0, 9, 30), (10, 0, 11, 0), (11, 30, 13, 0), (14, 30, 15, 30)]\n\n# Define work hours and meeting duration\nwork_start = (9, 0)\nwork_end = (17, 0)\nmeeting_duration = 1  # in hours\n\n# Function to convert schedule to a set of free time intervals\ndef get_free_time_slots(start, end, schedules):\n    free_slots = []\n    current_start = start\n\n    for meeting in sorted(schedules):\n        if current_start < meeting[:2]:\n            free_slots.append((current_start, meeting[:2]))\n        current_start = max(current_start, meeting[2:])\n\n    if current_start < end:\n        free_slots.append((current_start, end))\n\n    return free_slots\n\n# Get free time slots for each participant\ndanielle_free = get_free_time_slots(work_start, work_end, danielle_schedule)\nbruce_free = get_free_time_slots(work_start, work_end, bruce_schedule)\neric_free = get_free_time_slots(work_start, work_end, eric_schedule)\n\n# Find overlapping time slots that accommodate all participants\ndef find_meeting_time(danielle_free, bruce_free, eric_free, duration):\n    for d_start, d_end in danielle_free:\n        for b_start, b_end in bruce_free:\n            for e_start, e_end in eric_free:\n                start_time = max(d_start, b_start, e_start)\n                end_time = start_time + duration\n                \n                if end_time <= d_end and end_time <= b_end and end_time <= e_end:\n                    return start_time, end_time\n\n# Check for overlapping time and calculate\nmeeting_time = find_meeting_time(danielle_free, bruce_free, eric_free, meeting_duration)\n\nif meeting_time:\n    meeting_start = meeting_time[0]\n    meeting_end = meeting_time[1]\n    day_of_week = \"Monday\"\n    \n    # Format the output time\n    output = f\"{meeting_start[0]:02}:{meeting_start[1]:02}:{meeting_end[0]:02}:{meeting_end[1]:02} - {day_of_week}\"\n    print(output)\n```",
            "count": "calendar_scheduling_example_91"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find a suitable time for a meeting\ndef find_meeting_time():\n    # Participants' busy schedules\n    busy_times = {\n        'Jose': [(datetime(2023, 10, 23, 11, 0), datetime(2023, 10, 23, 11, 30)),\n                 (datetime(2023, 10, 23, 12, 30), datetime(2023, 10, 23, 13, 0))],\n        'Keith': [(datetime(2023, 10, 23, 14, 0), datetime(2023, 10, 23, 14, 30)),\n                  (datetime(2023, 10, 23, 15, 0), datetime(2023, 10, 23, 15, 30))],\n        'Logan': [(datetime(2023, 10, 23, 9, 0), datetime(2023, 10, 23, 10, 0)),\n                  (datetime(2023, 10, 23, 12, 0), datetime(2023, 10, 23, 12, 30)),\n                  (datetime(2023, 10, 23, 15, 0), datetime(2023, 10, 23, 15, 30))],\n        'Megan': [(datetime(2023, 10, 23, 9, 0), datetime(2023, 10, 23, 10, 30)),\n                  (datetime(2023, 10, 23, 11, 0), datetime(2023, 10, 23, 12, 0)),\n                  (datetime(2023, 10, 23, 13, 0), datetime(2023, 10, 23, 13, 30)),\n                  (datetime(2023, 10, 23, 14, 30), datetime(2023, 10, 23, 16, 30))],\n        'Gary': [(datetime(2023, 10, 23, 9, 0), datetime(2023, 10, 23, 9, 30)),\n                 (datetime(2023, 10, 23, 10, 0), datetime(2023, 10, 23, 10, 30)),\n                 (datetime(2023, 10, 23, 11, 30), datetime(2023, 10, 23, 13, 0)),\n                 (datetime(2023, 10, 23, 13, 30), datetime(2023, 10, 23, 14, 0)),\n                 (datetime(2023, 10, 23, 14, 30), datetime(2023, 10, 23, 16, 30))],\n        'Bobby': [(datetime(2023, 10, 23, 11, 0), datetime(2023, 10, 23, 11, 30)),\n                  (datetime(2023, 10, 23, 12, 0), datetime(2023, 10, 23, 12, 30)),\n                  (datetime(2023, 10, 23, 13, 0), datetime(2023, 10, 23, 16, 0))]\n    }\n    \n    # Available meeting time slots\n    meeting_duration = timedelta(minutes=30)\n    meeting_end_time = datetime(2023, 10, 23, 15, 30)\n    \n    # Define the work hours\n    start_time = datetime(2023, 10, 23, 9, 0)\n    end_time = datetime(2023, 10, 23, 17, 0)\n\n    for start in range(0, (end_time - start_time).seconds // 60, 30):\n        proposed_start = start_time + timedelta(minutes=start)\n        proposed_end = proposed_start + meeting_duration\n        \n        if proposed_end > end_time or proposed_start > meeting_end_time:\n            continue\n        \n        if all(not (proposed_start < end and proposed_end > start) for busy in busy_times.values() for start, end in busy):\n            return f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\", \"Monday\"\n\n# Output the proposed meeting time\nproposed_time, day = find_meeting_time()\nprint(proposed_time, day)\n```",
            "count": "calendar_scheduling_example_325"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "14:00",
                "end_time": "14:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Meeting duration\n    meeting_duration = timedelta(minutes=30)\n\n    # Participants' busy times\n    daniel_busy_times = [\n        (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n        (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n        (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n        (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    ]\n    \n    bradley_busy_times = [\n        (datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n        (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n    ]\n    \n    # Days of the week\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    \n    # Check for available slots\n    for day in days:\n        for hour in range(9, 17):  # Working hours from 9 to 17\n            start_time = datetime.strptime(f'{day} {hour}:00', '%A %H:%M')\n            end_time = start_time + meeting_duration\n            \n            # Check if this time slot is within busy schedules\n            if (end_time.hour < 17):  # Only consider time slots ending before 17:00\n                is_available = True\n                \n                # Check Daniel's availability\n                for start, end in daniel_busy_times:\n                    if (start_time < end and start < end_time):\n                        is_available = False\n                        break\n                \n                if is_available:\n                    # Check Bradley's availability\n                    for start, end in bradley_busy_times:\n                        if (start_time < end and start < end_time):\n                            is_available = False\n                            break\n                    \n                if is_available:\n                    return f'{start_time.strftime(\"%H:%M\")}:{end_time.strftime(\"%H:%M\")}', day\n\n# Call the function and print the output\nmeeting_time, meeting_day = find_meeting_time()\nprint(meeting_time, meeting_day)\n```",
            "count": "calendar_scheduling_example_904"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nimport datetime\n\n# Define participant schedules\nschedules = {\n    'Bradley': [(datetime.time(9, 30), datetime.time(10, 0)),\n                (datetime.time(12, 30), datetime.time(13, 0)),\n                (datetime.time(13, 30), datetime.time(14, 0)),\n                (datetime.time(15, 30), datetime.time(16, 0))],\n    'Teresa': [(datetime.time(10, 30), datetime.time(11, 0)),\n               (datetime.time(12, 0), datetime.time(12, 30)),\n               (datetime.time(13, 0), datetime.time(13, 30)),\n               (datetime.time(14, 30), datetime.time(15, 0))],\n    'Elizabeth': [(datetime.time(9, 0), datetime.time(9, 30)),\n                  (datetime.time(10, 30), datetime.time(11, 30)),\n                  (datetime.time(13, 0), datetime.time(13, 30)),\n                  (datetime.time(14, 30), datetime.time(15, 0)),\n                  (datetime.time(15, 30), datetime.time(17, 0))],\n    'Christian': [(datetime.time(9, 0), datetime.time(9, 30)),\n                  (datetime.time(10, 30), datetime.time(17, 0))]\n}\n\n# Define the meeting duration\nmeeting_duration = datetime.timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.time(9, 0)\nwork_end = datetime.time(17, 0)\n\n# Find available time slots\ndef find_meeting_time(schedules, duration):\n    # Create a full day schedule based on work hours\n    all_meeting_times = []\n\n    current_time = datetime.datetime.combine(datetime.date.today(), work_start)\n    end_of_day = datetime.datetime.combine(datetime.date.today(), work_end)\n\n    while current_time + duration <= end_of_day:\n        temp_time = current_time.time()\n        is_available = True\n        \n        for busy_times in schedules.values():\n            for start, end in busy_times:\n                if start <= temp_time < end or start < (current_time + duration).time() <= end:\n                    is_available = False\n                    break\n            if not is_available:\n                break\n        \n        if is_available:\n            all_meeting_times.append((temp_time, (current_time + duration).time()))\n        \n        current_time += datetime.timedelta(minutes=30)  # Increment by 30 minutes\n    \n    return all_meeting_times\n\n# Get available slots\navailable_slots = find_meeting_time(schedules, meeting_duration)\n\n# Assume first available slot is chosen\nif available_slots:\n    chosen_time = available_slots[0]\n    print(f'{{{chosen_time[0].strftime(\"%H:%M\")}:{chosen_time[1].strftime(\"%H:%M\")}}}')\n    print('Monday')\n```",
            "count": "calendar_scheduling_example_113"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nschedules = {\n    'Joe': [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 0)),\n            (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 0))],\n    'Keith': [(datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 12, 0)),\n              (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 15, 30))],\n    'Patricia': [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 9, 30)),\n                 (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 13, 30))],\n    'Nancy': [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 11, 0)),\n              (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 16, 30))],\n    'Pamela': [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 0)),\n               (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 0)),\n               (datetime(2023, 10, 2, 11, 30), datetime(2023, 10, 2, 12, 30)),\n               (datetime(2023, 10, 2, 13, 0), datetime(2023, 10, 2, 14, 0)),\n               (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0)),\n               (datetime(2023, 10, 2, 15, 30), datetime(2023, 10, 2, 16, 0)),\n               (datetime(2023, 10, 2, 16, 30), datetime(2023, 10, 2, 17, 0))]\n}\n\n# Define work hours\nwork_start = datetime(2023, 10, 2, 9, 0)\nwork_end = datetime(2023, 10, 2, 17, 0)\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time(schedules):\n    # Create a list of blocks from all schedules\n    busy_times = []\n    for participant, blocks in schedules.items():\n        busy_times.extend(blocks)\n    \n    # Sort the busy times\n    busy_times.sort()\n\n    # Check for free time slots within work hours\n    current_time = work_start\n    for start, end in busy_times:\n        if current_time + meeting_duration <= start:\n            return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')} on Monday\"\n        current_time = max(current_time, end)\n\n    # Final check for the remaining time slot after last busy time\n    if current_time + meeting_duration <= work_end:\n        return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')} on Monday\"\n\n# Get the proposed meeting time\nproposed_time = find_meeting_time(schedules)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_266"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and participants' schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Existing schedules\nemily_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nmelissa_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n\nfrank_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                  (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine all schedules\nall_schedules = emily_schedule + melissa_schedule + frank_schedule\n\n# Function to find a suitable meeting time\ndef find_meeting_time():\n    current_time = work_start\n    while current_time <= work_end - meeting_duration:\n        # Check if current time conflicts with any schedule\n        end_time = current_time + meeting_duration\n        conflict = False\n        for start, end in all_schedules:\n            if (current_time < end) and (end_time > start):\n                conflict = True\n                break\n        if not conflict:\n            return current_time.strftime(\"%H:%M\") + \":\" + end_time.strftime(\"%H:%M\"), \"Monday\"\n        current_time += timedelta(minutes=1)\n\n# Get the proposed time\nmeeting_time, day = find_meeting_time()\nprint(meeting_time, day)\n```",
            "count": "calendar_scheduling_example_32"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nimport datetime\n\n# Define participants' availability\navailability = {\n    'Jean': {\n        'Monday': [(9, 0, 17, 0)],\n        'Tuesday': [(9, 0, 11, 30), (16, 30, 17, 0)]\n    },\n    'Doris': {\n        'Monday': [(9, 0, 11, 30), (12, 30, 13, 30), (16, 0, 17, 0)],\n        'Tuesday': [(9, 0, 17, 0)]\n    }\n}\n\n# Meeting duration in hours and minutes\nmeeting_duration = 30  # in minutes\n\n# Function to find available time slot\ndef find_meeting_time(availability, meeting_duration, preferred_days):\n    for day in preferred_days:\n        # Create a list to store busy time slots for both participants\n        busy_times = []\n        \n        # Get busy slots from Jean\n        for start_hour, start_minute, end_hour, end_minute in availability['Jean'][day]:\n            busy_times.append((datetime.time(start_hour, start_minute),\n                               datetime.time(end_hour, end_minute)))\n        \n        # Get busy slots from Doris\n        for start_hour, start_minute, end_hour, end_minute in availability['Doris'][day]:\n            busy_times.append((datetime.time(start_hour, start_minute),\n                               datetime.time(end_hour, end_minute)))\n        \n        # Normalize busy times (merging overlapping times)\n        busy_times.sort()\n        merged_times = []\n        \n        for start, end in busy_times:\n            if not merged_times or merged_times[-1][1] < start:\n                merged_times.append((start, end))\n            else:\n                merged_times[-1] = (merged_times[-1][0], max(merged_times[-1][1], end))\n        \n        # Check for available time slots\n        start_of_day = datetime.time(9, 0)\n        end_of_day = datetime.time(17, 0)\n        \n        current_time = start_of_day\n        \n        for start, end in merged_times:\n            while current_time < start:\n                # Check if there's enough time for the meeting before the busy slot\n                if (datetime.datetime.combine(datetime.date.today(), start) - \n                    datetime.datetime.combine(datetime.date.today(), current_time)).seconds / 60 >= meeting_duration:\n                    meeting_start = current_time\n                    meeting_end = (datetime.datetime.combine(datetime.date.today(), current_time) + \n                                   datetime.timedelta(minutes=meeting_duration)).time()\n                    return day, meeting_start, meeting_end\n                current_time = (datetime.datetime.combine(datetime.date.today(), current_time) + \n                                datetime.timedelta(minutes=30)).time()  # Increment time by 30 minutes\n            current_time = max(current_time, end)  # Set current time to the end of the busy slot\n\n        # Check after the last busy slot to the end of the day\n        if (datetime.datetime.combine(datetime.date.today(), end_of_day) - \n            datetime.datetime.combine(datetime.date.today(), current_time)).seconds / 60 >= meeting_duration:\n            meeting_start = current_time\n            meeting_end = (datetime.datetime.combine(datetime.date.today(), current_time) + \n                           datetime.timedelta(minutes=meeting_duration)).time()\n            return day, meeting_start, meeting_end\n\n# Preferred days for the meeting\npreferred_days = ['Monday', 'Tuesday']\n\n# Finding meeting time\nday, meeting_start, meeting_end = find_meeting_time(availability, meeting_duration, preferred_days)\nprint(f'{meeting_start.strftime(\"%H:%M\")}:{meeting_end.strftime(\"%H:%M\")} {day}')\n```",
            "count": "calendar_scheduling_example_669"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:30"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "10:30",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedule_nicole = {\n    'Tuesday': [(16, 0, 16, 30)],\n    'Wednesday': [(15, 0, 15, 30)],\n    'Friday': [(12, 0, 12, 30), (15, 30, 16, 0)]\n}\n\nschedule_daniel = {\n    'Monday': [(9, 0, 12, 30), (13, 0, 13, 30), (14, 0, 16, 30)],\n    'Tuesday': [(9, 0, 10, 30), (11, 30, 12, 30), (13, 0, 13, 30), (15, 0, 16, 0), (16, 30, 17, 0)],\n    'Wednesday': [(9, 0, 10, 0), (11, 0, 12, 30), (13, 0, 13, 30), (14, 0, 14, 30), (16, 30, 17, 0)],\n    'Thursday': [(11, 0, 12, 0), (13, 0, 14, 0), (15, 0, 15, 30)],\n    'Friday': [(10, 0, 11, 0), (11, 30, 12, 0), (12, 30, 14, 30), (15, 0, 15, 30), (16, 0, 16, 30)]\n}\n\n# Calculate available slots\ndef get_available_slots(schedule, work_start, work_end):\n    available_slots = {}\n    for day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']:\n        busy_times = schedule.get(day, [])\n        busy_times.sort()  # Sort by start time\n        available_slots[day] = []\n        \n        # Assuming work hours\n        start_of_day = (work_start.hour, work_start.minute)\n        end_of_day = (work_end.hour, work_end.minute)\n\n        # Start looking for availability\n        last_end_time = start_of_day\n\n        for busy in busy_times:\n            busy_start = (busy[0], busy[1])\n            busy_end = (busy[2], busy[3])\n\n            # Check for free slot before the busy time\n            if last_end_time < busy_start:\n                available_slots[day].append((last_end_time[0], last_end_time[1], busy_start[0], busy_start[1]))\n            \n            last_end_time = busy_end\n        \n        # Check for free slot after all busy times until end of the day\n        if last_end_time < end_of_day:\n            available_slots[day].append((last_end_time[0], last_end_time[1], end_of_day[0], end_of_day[1]))\n\n    return available_slots\n\ndef find_meeting_time():\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    available_nicole = get_available_slots(schedule_nicole, work_start, work_end)\n    available_daniel = get_available_slots(schedule_daniel, work_start, work_end)\n\n    # Find overlapping slots of at least 1 hour\n    for day in available_nicole:\n        nicole_slots = available_nicole[day]\n        daniel_slots = available_daniel[day]\n\n        for n_slot in nicole_slots:\n            n_start = timedelta(hours=n_slot[0], minutes=n_slot[1])\n            n_end = timedelta(hours=n_slot[2], minutes=n_slot[3])\n            duration = n_end - n_start\n            \n            if duration >= timedelta(hours=1):  # Need at least 1 hour\n                for d_slot in daniel_slots:\n                    d_start = timedelta(hours=d_slot[0], minutes=d_slot[1])\n                    d_end = timedelta(hours=d_slot[2], minutes=d_slot[3])\n                    \n                    # Check if the slots overlap\n                    if d_start < n_end and n_start < d_end:\n                        # Determine the meeting time\n                        meeting_start_hours = max(n_slot[0], d_slot[0])\n                        meeting_start_minutes = max(n_slot[1], d_slot[1])\n                        \n                        meeting_end_hours = meeting_start_hours + 1\n                        meeting_end_minutes = meeting_start_minutes\n\n                        if meeting_end_minutes >= 60:\n                            meeting_end_minutes -= 60\n                            meeting_end_hours += 1\n\n                        if meeting_end_hours > 17:  # Ensure meeting does not exceed work time\n                            continue\n\n                        return f\"{day} {meeting_start_hours:02}:{meeting_start_minutes:02}:{meeting_end_hours:02}:{meeting_end_minutes:02}\"\n\n# Generate proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_975"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nimport datetime\n\ndef find_meeting_time():\n    # Define the working hours and meeting duration\n    working_hours = (datetime.time(9, 0), datetime.time(17, 0))\n    meeting_duration = datetime.timedelta(minutes=30)\n    \n    # Existing schedules (busy times)\n    arthur_schedule = {\n        'Monday': [(datetime.time(11, 0), datetime.time(11, 30)),\n                   (datetime.time(13, 30), datetime.time(14, 0)),\n                   (datetime.time(15, 0), datetime.time(15, 30))],\n        'Tuesday': [(datetime.time(13, 0), datetime.time(13, 30)),\n                    (datetime.time(16, 0), datetime.time(16, 30))],\n        'Wednesday': [(datetime.time(10, 0), datetime.time(10, 30)),\n                      (datetime.time(11, 0), datetime.time(11, 30)),\n                      (datetime.time(12, 0), datetime.time(12, 30)),\n                      (datetime.time(14, 0), datetime.time(14, 30)),\n                      (datetime.time(16, 0), datetime.time(16, 30))]\n    }\n\n    michael_schedule = {\n        'Monday': [(datetime.time(9, 0), datetime.time(12, 0)),\n                   (datetime.time(12, 30), datetime.time(13, 0)),\n                   (datetime.time(14, 0), datetime.time(14, 30)),\n                   (datetime.time(15, 0), datetime.time(17, 0))],\n        'Tuesday': [(datetime.time(9, 30), datetime.time(11, 30)),\n                    (datetime.time(12, 0), datetime.time(13, 30)),\n                    (datetime.time(14, 0), datetime.time(15, 30))],\n        'Wednesday': [(datetime.time(10, 0), datetime.time(12, 30)),\n                      (datetime.time(13, 0), datetime.time(13, 30))]\n    }\n\n    # Combine schedules\n    schedules = {'Monday': arthur_schedule['Monday'] + michael_schedule['Monday'],\n                 'Tuesday': arthur_schedule['Tuesday'] + michael_schedule['Tuesday'],\n                 'Wednesday': arthur_schedule['Wednesday'] + michael_schedule['Wednesday']}\n    \n    # Function to check if a time slot is free\n    def is_free(start, end, busy_times):\n        for (busy_start, busy_end) in busy_times:\n            if (start < busy_end and end > busy_start):  # Overlap check\n                return False\n        return True\n\n    # Check availability for Monday, Wednesday (Tuesday is excluded for Arthur)\n    days_to_check = ['Monday', 'Wednesday']\n\n    for day in days_to_check:\n        busy_times = schedules[day]\n        \n        # Check for available time slots in the working hours\n        start_time = working_hours[0]\n        while start_time + meeting_duration <= working_hours[1]:\n            end_time = start_time + meeting_duration\n            if is_free(start_time, end_time, busy_times):\n                return f\"{day} {start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n            start_time = (datetime.datetime.combine(datetime.date.today(), start_time) + \n                           datetime.timedelta(minutes=1)).time()  # Increment by 1 minute\n\n# Get the meeting time\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_723"
        },
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define the schedule constraints\n    shirley_schedule = {\n        \"Monday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n        \"Tuesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"))]\n    }\n    \n    albert_schedule = {\n        \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))], \n        \"Tuesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                    (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n    }\n\n    meeting_duration = timedelta(minutes=30)\n\n    # Check for possible meeting times on Monday\n    for start_hour in range(9, 17):  # from 9 AM to 5 PM\n        start_time = datetime.strptime(f\"{start_hour}:00\", \"%H:%M\")\n        end_time = start_time + meeting_duration\n        \n        if end_time.time() <= datetime.strptime(\"17:00\", \"%H:%M\").time():\n            if not is_time_conflicted(start_time, end_time, shirley_schedule[\"Monday\"], albert_schedule[\"Monday\"]):\n                return f\"Monday {start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    \n    # Check for possible meeting times on Tuesday (up to 10:30 preference for Shirley)\n    for start_hour in range(9, 11):  # from 9 AM to 10 AM (ending before 10:30)\n        start_time = datetime.strptime(f\"{start_hour}:00\", \"%H:%M\")\n        end_time = start_time + meeting_duration\n        \n        if end_time.time() <= datetime.strptime(\"10:30\", \"%H:%M\").time():\n            if not is_time_conflicted(start_time, end_time, shirley_schedule[\"Tuesday\"], albert_schedule[\"Tuesday\"]):\n                return f\"Tuesday {start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\"\n    \n    return \"No available time found\"\n\ndef is_time_conflicted(start_time, end_time, shirley_slots, albert_slots):\n    for slot in shirley_slots + albert_slots:\n        if (start_time < slot[1] and end_time > slot[0]):\n            return True\n    return False\n\nif __name__ == '__main__':\n    meeting_time = find_meeting_time()\n    print(meeting_time)\n```",
            "count": "calendar_scheduling_example_658"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the schedules and constraints\nparticipants = {\n    'Katherine': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                  (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    'Rebecca': [],\n    'Julie': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n              (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n              (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n    'Angela': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n               (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n               (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n               (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Nicholas': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                 (datetime.strptime('11:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n                 (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Carl': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n             (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n             (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n             (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n             (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Working hours\nstart_of_work = datetime.strptime('09:00', '%H:%M')\nend_of_work = datetime.strptime('17:00', '%H:%M')\n\n# Generate a list of busy times\nbusy_times = []\nfor person, times in participants.items():\n    busy_times.extend(times)\n\n# Sort busy times\nbusy_times.sort()\n\n# Identify free time slots\nfree_slots = []\nlast_end = start_of_work\n\nfor start, end in busy_times:\n    if last_end < start:\n        free_slots.append((last_end, start))\n    last_end = max(last_end, end)\n\nif last_end < end_of_work:\n    free_slots.append((last_end, end_of_work))\n\n# Find a suitable time slot for the meeting\nfor start, end in free_slots:\n    if end - start >= meeting_duration:\n        meeting_start = start\n        meeting_end = meeting_start + meeting_duration\n        if meeting_start.time() >= datetime.strptime('15:00', '%H:%M').time():\n            print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n            print(\"Monday\")\n            break\n```",
            "count": "calendar_scheduling_example_356"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and meeting duration\nworking_hours_start = datetime.strptime('09:00', '%H:%M')\nworking_hours_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\n\n# Define the participants' schedules as busy time intervals\nschedules = {\n    \"Steven\": [(working_hours_start, working_hours_end)],\n    \"Roy\": [(working_hours_start, working_hours_end)],\n    \"Cynthia\": [\n        (datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n        (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n        (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    ],\n    \"Lauren\": [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n        (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n        (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n        (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), working_hours_end),\n    ],\n    \"Robert\": [\n        (datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n        (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n    ],\n}\n\ndef find_meeting_time(schedules, duration):\n    # Get the free time slots of all participants\n    free_time_slots = []\n    for participant, busy_slots in schedules.items():\n        last_end = working_hours_start\n        for busy_start, busy_end in busy_slots:\n            if last_end < busy_start:\n                free_time_slots.append((last_end, busy_start))\n            last_end = max(last_end, busy_end)\n        if last_end < working_hours_end:\n            free_time_slots.append((last_end, working_hours_end))\n\n    # Check for overlaps in free slots\n    available_time_slots = []\n    for start, end in free_time_slots:\n        if end - start >= duration:\n            available_time_slots.append((start, end))\n\n    # Find the earliest available time slot for the meeting\n    if available_time_slots:\n        earliest_start, earliest_end = available_time_slots[0]\n        if earliest_start + duration <= earliest_end:\n            meeting_start = earliest_start\n            meeting_end = earliest_start + duration\n            return meeting_start.strftime('%H:%M'), meeting_end.strftime('%H:%M')\n    return None\n\n# Find the meeting time\nmeeting_time = find_meeting_time(schedules, meeting_duration)\nday_of_week = \"Monday\"\nif meeting_time:\n    print(f\"{meeting_time[0]}:{meeting_time[1]} {day_of_week}\")\nelse:\n    print(\"No available time found.\")\n```\n",
            "count": "calendar_scheduling_example_215"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedule = {\n    \"Eric\": [],\n    \"Ashley\": [(10, 0, 10, 30), (11, 0, 12, 0), (12, 30, 13, 0), (15, 0, 16, 0)],\n    \"Ronald\": [(9, 0, 9, 30), (10, 0, 11, 30), (12, 30, 14, 0), (14, 30, 17, 0)],\n    \"Larry\": [(9, 0, 12, 0), (13, 0, 17, 0)]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to check if a time slot is free\ndef is_free(start, end):\n    for times in schedule.values():\n        for t in times:\n            booked_start = datetime(*t[:2])\n            booked_end = datetime(*t[2:])\n            if (start < booked_end and end > booked_start):\n                return False\n    return True\n\n# Finding a suitable time\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    next_time = current_time + meeting_duration\n    if is_free(current_time, next_time):\n        print(f\"Suggested meeting time: {current_time.strftime('%H:%M')} to {next_time.strftime('%H:%M')} on Monday\")\n        break\n    current_time += timedelta(minutes=30)\n```\n",
            "count": "calendar_scheduling_example_135"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "14:30",
                "end_time": "15:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules and preferences\nschedules = {\n    'Raymond': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n        (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n        (datetime.strptime('13:00', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n        (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n    ],\n    'Billy': [\n        (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    ],\n    'Donald': [\n        (datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n        (datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n        (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n        (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n        (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')),\n    ]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Calculate free time slots\ndef get_free_slots(schedules, work_start, work_end):\n    busy_times = []\n    for participant in schedules.values():\n        busy_times.extend(participant)\n    \n    busy_times.sort(key=lambda x: x[0])  # Sort by start time\n    \n    free_slots = []\n    current_start = work_start\n    \n    for start, end in busy_times:\n        if current_start < start:\n            free_slots.append((current_start, start))\n        current_start = max(current_start, end)\n\n    if current_start < work_end:\n        free_slots.append((current_start, work_end))\n    \n    return free_slots\n\nfree_slots = get_free_slots(schedules, work_start, work_end)\n\n# Find the first suitable time slot for the meeting\nfor start, end in free_slots:\n    if end - start >= meeting_duration:\n        proposed_start = start\n        proposed_end = start + meeting_duration\n        if proposed_end <= end:\n            day_of_week = proposed_start.strftime('%A')\n            print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}: {day_of_week}\")\n            break\n```",
            "count": "calendar_scheduling_example_1"
        },
        {
            "final_program_time": {
                "day": "Wednesday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "15:00",
                "end_time": "15:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nsusan_schedule = {\n    \"Monday\": [(9, 0, 12, 30), (13, 30, 14, 0)],\n    \"Tuesday\": [(11, 30, 12, 0)],\n    \"Wednesday\": [(9, 30, 10, 30), (14, 0, 14, 30), (15, 30, 16, 30)]\n}\n\nsandra_schedule = {\n    \"Monday\": [(9, 0, 13, 0), (14, 0, 15, 0), (16, 0, 16, 30)],\n    \"Tuesday\": [(9, 0, 9, 30), (10, 30, 12, 0), (12, 30, 13, 30), (14, 0, 14, 30), (16, 0, 17, 0)],\n    \"Wednesday\": [(9, 0, 11, 30), (12, 0, 12, 30), (13, 0, 17, 0)]\n}\n\n# Function to find possible meeting times\ndef find_meeting_time(susan_schedule, sandra_schedule, duration_minutes, preferred_days):\n    duration = timedelta(minutes=duration_minutes)\n    \n    for day in preferred_days:\n        susan_busy_times = susan_schedule.get(day, [])\n        sandra_busy_times = sandra_schedule.get(day, [])\n\n        # Create list of busy times with tuples of start and end times\n        busy_times = []\n\n        # Convert busy times to datetime objects for ease of comparison\n        for start_hour, start_minute, end_hour, end_minute in susan_busy_times + sandra_busy_times:\n            busy_times.append((datetime(2000, 1, 1, start_hour, start_minute),\n                                datetime(2000, 1, 1, end_hour, end_minute)))\n        \n        # Sort busy times by start time\n        busy_times.sort()\n\n        # Availability starts at 9:00\n        available_start = datetime(2000, 1, 1, 9, 0)\n        # Availability ends at 17:00\n        available_end = datetime(2000, 1, 1, 17, 0)\n\n        for start, end in busy_times:\n            if available_start + duration <= start:\n                # If there is a gap between available time and busy time\n                if available_start + duration <= available_end:\n                    return f\"{day} {available_start.strftime('%H:%M')}:{(available_start + duration).strftime('%H:%M')}\"\n\n            # Shift available start time to the end of the current busy time\n            available_start = max(available_start, end)\n\n        # Check if there's remaining time after the last busy slot\n        if available_start + duration <= available_end:\n            return f\"{day} {available_start.strftime('%H:%M')}:{(available_start + duration).strftime('%H:%M')}\"\n\n# Define meeting duration and preferred days\nmeeting_duration = 30  # in minutes\npreferred_days = [\"Wednesday\"]\n\n# Find and print the meeting time\nmeeting_time = find_meeting_time(susan_schedule, sandra_schedule, meeting_duration, preferred_days)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_778"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and the meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\nday_of_week = \"Monday\"\n\n# Define the schedules of each participant as busy time slots\nschedules = {\n    \"Lisa\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Bobby\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Randy\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Find a suitable time for the meeting\ndef find_meeting_time(schedules, work_start, work_end, meeting_duration):\n    free_slots = []\n\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        is_free = True\n\n        for busy_times in schedules.values():\n            for start, end in busy_times:\n                if not (end_time <= start or current_time >= end):\n                    is_free = False\n                    break\n            if not is_free:\n                break\n        \n        if is_free:\n            free_slots.append((current_time, end_time))\n        \n        current_time += timedelta(minutes=15)  # check every 15 minutes\n\n    # Select a free slot that satisfies Bobby's preference\n    for start, end in free_slots:\n        if start.time() >= datetime.strptime(\"15:00\", \"%H:%M\").time():\n            continue\n        return f\"{start.strftime('%H:%M')}:{end.strftime('%H:%M')}\"\n\n# Call function to get the meeting time\nmeeting_time = find_meeting_time(schedules, work_start, work_end, meeting_duration)\n\nprint(f\"Proposed Meeting Time: {meeting_time}, Day: {day_of_week}\")\n```",
            "count": "calendar_scheduling_example_33"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to find common available slots for a meeting\ndef find_meeting_time(ronald_schedule, amber_schedule, duration):\n    # Define work hours\n    work_days = ['Monday', 'Tuesday', 'Wednesday']\n    work_start = 9 * 60  # 9:00 AM in minutes\n    work_end = 17 * 60    # 5:00 PM in minutes\n\n    # Prepare a list to check available slots\n    available_slots = []\n    \n    for day in work_days:\n        ronald_free_times = get_free_times(ronald_schedule[day], work_start, work_end)\n        amber_free_times = get_free_times(amber_schedule[day], work_start, work_end)\n\n        # Find common free time slots\n        common_free_times = find_common_availability(ronald_free_times, amber_free_times, duration)\n\n        if common_free_times:\n            available_slots.extend((day, slot) for slot in common_free_times)\n\n    return available_slots[0] if available_slots else None\n\ndef get_free_times(schedule, work_start, work_end):\n    # Convert blocked times into available times\n    free_times = []\n    last_end = work_start\n    \n    for start, end in sorted(schedule):\n        if start > last_end:\n            free_times.append((last_end, start))\n        last_end = max(last_end, end)\n    \n    if last_end < work_end:\n        free_times.append((last_end, work_end))\n    \n    return free_times\n\ndef find_common_availability(free_times1, free_times2, duration):\n    common_times = []\n    \n    for start1, end1 in free_times1:\n        for start2, end2 in free_times2:\n            common_start = max(start1, start2)\n            common_end = min(end1, end2)\n            \n            if (common_end - common_start) >= duration:\n                common_times.append((common_start, common_start + duration))\n\n    return common_times\n\n# Ronald and Amber's schedules\nronald_schedule = {\n    'Monday': [(630, 630 + 30), (720, 720 + 30), (930, 930 + 30)],\n    'Tuesday': [(540, 540 + 30), (720, 720 + 30), (930, 930 + 60)],\n    'Wednesday': [(570, 630), (660, 780)],\n}\n\namber_schedule = {\n    'Monday': [(540, 550), (600, 630), (750, 780), (840, 870)],\n    'Tuesday': [(540, 550), (600, 690), (720, 750)],\n    'Wednesday': [(540, 550), (600, 630), (660, 810)],\n}\n\n# Duration of the meeting in minutes\nmeeting_duration = 30\n\nmeeting_time = find_meeting_time(ronald_schedule, amber_schedule, meeting_duration)\n\nif meeting_time:\n    day, time_slot = meeting_time\n    start_time = (time_slot[0] // 60, time_slot[0] % 60)\n    print(f\"{day}: {start_time[0]:02}:{start_time[1]:02} - {start_time[0]:02}:{start_time[1] + meeting_duration:02}\")\n```\n",
            "count": "calendar_scheduling_example_735"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nschedules = {\n    \"Patrick\": [(datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Shirley\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Jeffrey\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Gloria\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Nathan\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Angela\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"David\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Define meeting time and work hours\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Finding a suitable time slot\ndef find_meeting_time():\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if all participants are available\n        meeting_end = current_time + meeting_duration\n        if all(not any(start < meeting_end and current_time < end for start, end in schedules[participant]) for participant in schedules):\n            return current_time, meeting_end\n        current_time += timedelta(minutes=30)  # Increment time by 30 minutes\n\n# Get proposed meeting time\nproposed_start, proposed_end = find_meeting_time()\n\n# Output the result\nprint(f\"Proposed meeting time: {{{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}}}\")\nprint(\"Day: Monday\")\n```",
            "count": "calendar_scheduling_example_436"
        },
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": "9:30",
                "end_time": "10:30"
            },
            "expected_time": {
                "day": "Friday",
                "start_time": "14:30",
                "end_time": "15:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules\nbryan_schedule = {\n    \"Thursday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))]\n}\n\nnicholas_schedule = {\n    \"Monday\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Available slots check\ndef check_availability(day):\n    # All work hours\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Schedule blocks\n    bryan_busy = bryan_schedule.get(day, [])\n    nicholas_busy = nicholas_schedule.get(day, [])\n    \n    busy_times = bryan_busy + nicholas_busy\n    busy_times.sort()  # Sort by start time\n    \n    current_time = work_start\n    \n    while current_time + meeting_duration <= work_end:\n        # Check if the current time is busy\n        is_busy = any(start <= current_time < end for start, end in busy_times)\n        \n        if not is_busy:\n            # Check if the meeting duration fits in this slot\n            if not any(start < current_time + meeting_duration <= end for start, end in busy_times):\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')} - {day}\"\n        \n        # Move to the next minute\n        current_time += timedelta(minutes=1)\n\n# Checking available days\nfor day in [\"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:\n    proposed_time = check_availability(day)\n    if proposed_time:\n        print(proposed_time)\n        break\n```",
            "count": "calendar_scheduling_example_910"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "has_error": true,
            "raw_model_response": "```python\n# Define participants' schedules\nmegan_schedule = {\n    'Monday': [(9, 0, 13, 0), (13, 30, 14, 0), (14, 0, 15, 30), (15, 30, 17, 0)],\n    'Tuesday': [(9, 0, 9, 30), (9, 30, 12, 0), (12, 30, 16, 0), (16, 0, 17, 0)],\n    'Wednesday': [(9, 0, 9, 30), (9, 30, 10, 0), (10, 0, 10, 30), (10, 30, 11, 30), \n                  (11, 30, 12, 30), (12, 30, 14, 0), (14, 0, 16, 0), (16, 0, 16, 30)],\n    'Thursday': [(9, 0, 13, 30), (13, 30, 15, 0), (15, 0, 15, 30), (15, 30, 17, 0)]\n}\n\ndaniel_schedule = {\n    'Monday': [(9, 0, 10, 0), (10, 0, 11, 30), (11, 30, 12, 30), (12, 30, 15, 0)],\n    'Tuesday': [(9, 0, 10, 0), (10, 0, 10, 30), (10, 30, 17, 0)],\n    'Wednesday': [(9, 0, 9, 0), (9, 0, 10, 0), (10, 0, 10, 30), (10, 30, 11, 30), \n                  (11, 30, 12, 0), (12, 0, 17, 0)],\n    'Thursday': [(9, 0, 12, 0), (12, 0, 12, 30), (12, 30, 14, 30), (14, 30, 15, 0),\n                 (15, 0, 15, 30), (15, 30, 17, 0)]\n}\n\n# Function to convert time to minutes\ndef time_to_minutes(hour, minute):\n    return hour * 60 + minute\n\n# Find available meeting slots\ndef find_meeting_time(schedule_a, schedule_b, duration=60):\n    for day in schedule_a.keys():\n        busy_times = schedule_a[day] + schedule_b[day]\n        busy_times.sort()\n        \n        # Flatten the busy times into a free time schedule\n        free_times = []\n        last_end = 9 * 60  # Start at 9:00\n        \n        for start, end in busy_times:\n            if last_end < time_to_minutes(start, 0):\n                free_times.append((last_end, time_to_minutes(start, 0)))\n            last_end = max(last_end, time_to_minutes(end, 0))\n        \n        # End at 17:00\n        if last_end < 17 * 60:\n            free_times.append((last_end, 17 * 60)) \n        \n        # Check for a time slot that fits the meeting duration\n        for start, end in free_times:\n            if end - start >= duration:\n                return day, start, start + duration\n            \n    return None\n\n# Find the earliest available time slot for Megan and Daniel\nday, start_time, end_time = find_meeting_time(megan_schedule, daniel_schedule)\n\n# Convert back to hours and minutes\nstart_hour = start_time // 60\nstart_minute = start_time % 60\nend_hour = end_time // 60\nend_minute = end_time % 60\n\n# Output the proposed time\nprint(f\"{start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}\")\nprint(day)\n```",
            "count": "calendar_scheduling_example_865"
        },
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import timedelta, datetime\n\n# Participants' busy schedules\namanda_busy = {\n    'Monday': [\n        (timedelta(hours=9, minutes=0), timedelta(hours=10, minutes=30)),\n        (timedelta(hours=11, minutes=0), timedelta(hours=11, minutes=30)),\n        (timedelta(hours=12, minutes=30), timedelta(hours=13, minutes=0)),\n        (timedelta(hours=13, minutes=30), timedelta(hours=14, minutes=0)),\n        (timedelta(hours=14, minutes=30), timedelta(hours=15, minutes=0)),\n    ],\n    'Tuesday': [\n        (timedelta(hours=9, minutes=0), timedelta(hours=9, minutes=30)),\n        (timedelta(hours=10, minutes=0), timedelta(hours=10, minutes=30)),\n        (timedelta(hours=11, minutes=30), timedelta(hours=12, minutes=0)),\n        (timedelta(hours=13, minutes=30), timedelta(hours=14, minutes=30)),\n        (timedelta(hours=15, minutes=30), timedelta(hours=16, minutes=0)),\n        (timedelta(hours=16, minutes=30), timedelta(hours=17, minutes=0)),\n    ]\n}\n\nnathan_busy = {\n    'Monday': [\n        (timedelta(hours=10, minutes=0), timedelta(hours=10, minutes=30)),\n        (timedelta(hours=11, minutes=0), timedelta(hours=11, minutes=30)),\n        (timedelta(hours=13, minutes=30), timedelta(hours=14, minutes=30)),\n        (timedelta(hours=16, minutes=0), timedelta(hours=16, minutes=30)),\n    ],\n    'Tuesday': [\n        (timedelta(hours=9, minutes=0), timedelta(hours=10, minutes=30)),\n        (timedelta(hours=11, minutes=0), timedelta(hours=13, minutes=0)),\n        (timedelta(hours=13, minutes=30), timedelta(hours=14, minutes=0)),\n        (timedelta(hours=14, minutes=30), timedelta(hours=15, minutes=30)),\n        (timedelta(hours=16, minutes=0), timedelta(hours=16, minutes=30)),\n    ]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\ndef find_meeting_time(amanda_busy, nathan_busy, duration):\n    for day in amanda_busy.keys():\n        # Skipping Nathan's busy slots for Monday\n        if day == 'Monday':\n            continue\n        \n        amanda_slots = amanda_busy[day]\n        nathan_slots = nathan_busy[day]\n        \n        # Find available slots for both\n        for a_start, a_end in amanda_slots:\n            for n_start, n_end in nathan_slots:\n                # Calculate start and end for the meeting\n                start_time = max(a_start, n_start)\n                end_time = start_time + duration\n                \n                if end_time <= min(a_end, n_end):\n                    return f\"{start_time.seconds//3600}:{(start_time.seconds//60)%60:02d}:{end_time.seconds//3600}:{(end_time.seconds//60)%60:02d}\", day\n\nmeeting_time, day_of_week = find_meeting_time(amanda_busy, nathan_busy, meeting_duration)\nprint(meeting_time)\nprint(day_of_week)\n```",
            "count": "calendar_scheduling_example_682"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' busy schedules\nschedules = {\n    \"Jacqueline\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Harold\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Arthur\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kelly\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Harold prefers not to meet after 13:00\nharold_preference_end = datetime.strptime(\"13:00\", \"%H:%M\")\n\n# Finding the time slot\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end, harold_preference_end):\n    # Create a list of free time slots based on the busy schedules\n    free_slots = []\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        is_busy = False\n        for participant, busy_times in schedules.items():\n            for busy_start, busy_end in busy_times:\n                if busy_start <= current_time < busy_end or busy_start < current_time + meeting_duration <= busy_end:\n                    is_busy = True\n                    break\n            if is_busy:\n                break\n        \n        if not is_busy:\n            if current_time <= harold_preference_end:\n                free_slots.append(current_time)\n        \n        current_time += timedelta(minutes=30)\n\n    if free_slots:\n        return free_slots[0]\n\nmeeting_time = find_meeting_time(schedules, meeting_duration, work_start, work_end, harold_preference_end)\nif meeting_time:\n    meeting_start = meeting_time.strftime(\"%H:%M\")\n    meeting_end = (meeting_time + meeting_duration).strftime(\"%H:%M\")\n    day_of_week = \"Monday\"\n    \n    print(f\"{meeting_start}:{meeting_end} {day_of_week}\")\n```\n",
            "count": "calendar_scheduling_example_173"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and participants\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\nmeeting_duration = timedelta(minutes=30)\nparticipants_schedule = {\n    'Emily': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Mason': [],\n    'Maria': [(datetime.strptime('10:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    'Carl': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:00', '%H:%M')),\n             (datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n             (datetime.strptime('13:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n             (datetime.strptime('14:30', '%H:%M'), datetime.strptime('15:30', '%H:%M')),\n             (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'David': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n              (datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n              (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n              (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Frank': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n              (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n              (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:30', '%H:%M')),\n              (datetime.strptime('14:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n}\n\n# Find common free slots for all participants\ndef find_meeting_time(participants_schedule, work_start, work_end, meeting_duration):\n    # Create a list of all busy times\n    busy_times = []\n    for schedule in participants_schedule.values():\n        for start, end in schedule:\n            busy_times.append((start, end))\n\n    # Create a list of free time slots\n    free_times = []\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        # Check if current_time is free for all participants\n        is_free = True\n        for start, end in busy_times:\n            if start <= current_time < end or start < current_time + meeting_duration <= end:\n                is_free = False\n                break\n        \n        if is_free:\n            free_times.append(current_time)\n        \n        current_time += timedelta(minutes=1)  # Check next minute\n        \n    if free_times:\n        return free_times[0], free_times[0] + meeting_duration\n    return None, None\n\n# Get proposed meeting time\nproposed_start, proposed_end = find_meeting_time(participants_schedule, work_start, work_end, meeting_duration)\n\n# Output result\nif proposed_start and proposed_end:\n    print(f\"Proposed meeting time: {proposed_start.strftime('%H:%M')} - {proposed_end.strftime('%H:%M')} on Monday\")\nelse:\n    print(\"No available time found\")\n```",
            "count": "calendar_scheduling_example_360"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Participants' schedules\njeffrey_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                    (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\"))]\n\nvirginia_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                     (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                     (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                     (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\nmelissa_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                    (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                    (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                    (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Day of the week\nday_of_week = \"Monday\"\n\n# Function to check if the time slot is available\ndef is_time_slot_available(start_time, end_time, schedules):\n    for schedule in schedules:\n        if (start_time < schedule[1] and end_time > schedule[0]):\n            return False\n    return True\n\n# Finding a suitable time\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    end_time = current_time + meeting_duration\n    if is_time_slot_available(current_time, end_time, jeffrey_schedule) and \\\n       is_time_slot_available(current_time, end_time, virginia_schedule) and \\\n       is_time_slot_available(current_time, end_time, melissa_schedule):\n       \n        # Check Melissa's preference not to meet after 14:00\n        if current_time >= datetime.strptime(\"14:00\", \"%H:%M\"):\n            break\n        \n        print(f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n        print(day_of_week)\n        break\n    \n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_30"
        },
        {
            "final_program_time": {
                "day": "Wednesday",
                "start_time": "14:30",
                "end_time": "15:30"
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "14:30",
                "end_time": "15:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the availability of Natalie and William\nnatalie_schedule = {\n    'Monday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n               (datetime.strptime('10:00', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n               (datetime.strptime('12:30', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n               (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n               (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                (datetime.strptime('12:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                (datetime.strptime('16:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                  (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))],\n    'Thursday': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n                 (datetime.strptime('11:30', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n                 (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n}\n\nwilliam_schedule = {\n    'Monday': [(datetime.strptime('09:30', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n               (datetime.strptime('11:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Tuesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n                (datetime.strptime('13:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Wednesday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                  (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                  (datetime.strptime('15:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Thursday': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                 (datetime.strptime('11:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n                 (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n                 (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n                 (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find a free time slot\ndef find_meeting_time(natalie_schedule, william_schedule, meeting_duration):\n    for day in natalie_schedule.keys():\n        natalie_busy_times = natalie_schedule[day]\n        william_busy_times = william_schedule[day]\n\n        combined_busy_times = natalie_busy_times + william_busy_times\n        combined_busy_times.sort(key=lambda x: x[0])  # Sort by start time\n\n        free_times = []\n        last_end_time = datetime.strptime('09:00', '%H:%M')\n\n        for start, end in combined_busy_times:\n            if last_end_time + meeting_duration <= start:\n                free_times.append((last_end_time, start))\n            last_end_time = max(last_end_time, end)\n\n        # Check for free time slot after last busy period before 17:00\n        if last_end_time + meeting_duration <= datetime.strptime('17:00', '%H:%M'):\n            free_times.append((last_end_time, datetime.strptime('17:00', '%H:%M')))\n\n        for free_start, free_end in free_times:\n            if free_end - free_start >= meeting_duration:\n                return day, free_start, free_start + meeting_duration\n\n# Find a suitable meeting time\nday, start_time, end_time = find_meeting_time(natalie_schedule, william_schedule, meeting_duration)\n\n# Output the proposed time\nprint(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}, {day}\")\n```",
            "count": "calendar_scheduling_example_875"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "11:00"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "9:30",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define busy schedules\nbrian_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\njulia_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\nwork_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find available slot\ndef find_available_slot():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:\n        busy_times = brian_schedule[day] + julia_schedule[day]\n        busy_times.sort()\n        \n        last_end_time = work_hours_start\n        \n        for busy_start, busy_end in busy_times:\n            if last_end_time + meeting_duration <= busy_start:\n                return f\"{last_end_time.strftime('%H:%M')}:{(last_end_time + meeting_duration).strftime('%H:%M')} on {day}\"\n            last_end_time = max(last_end_time, busy_end)\n        \n        # Check after the last busy time\n        if last_end_time + meeting_duration <= work_hours_end:\n            return f\"{last_end_time.strftime('%H:%M')}:{(last_end_time + meeting_duration).strftime('%H:%M')} on {day}\"\n\n# Get the proposed time\nproposed_time = find_available_slot()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_978"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and participants' busy schedules\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\nparticipants_busy_times = {\n    \"Stephen\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))],\n    \"Brittany\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), work_end)],\n    \"Dorothy\": [(work_start, datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), work_end)],\n    \"Rebecca\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), work_end)],\n    \"Jordan\": [(work_start, datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find available meeting time\ndef find_available_time(busy_times):\n    # Create a list of all busy time intervals\n    busy_intervals = []\n    for times in busy_times.values():\n        busy_intervals.extend(times)\n\n    # Sort busy intervals\n    busy_intervals.sort(key=lambda x: x[0])\n\n    # Check for available slots\n    current_start = work_start\n    for start, end in busy_intervals:\n        if current_start + meeting_duration <= start:\n            return current_start\n        current_start = max(current_start, end)\n\n    if current_start + meeting_duration <= work_end:\n        return current_start\n\n    return None\n\n# Find suitable time\nmeeting_start = find_available_time(participants_busy_times)\n\n# Output the result\nif meeting_start:\n    meeting_end = meeting_start + meeting_duration\n    print(f\"{{{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}}}\")\n    print(\"Monday\")\n```",
            "count": "calendar_scheduling_example_307"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "17:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nkayla_schedule = [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n                  \nrebecca_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                    (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                    (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Define working hours\nstart_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\nend_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_day = \"Monday\"\n\n# Create a list of all busy times\nbusy_times = kayla_schedule + rebecca_schedule\n\n# Initialize free time slots\nfree_time_slots = []\ncurrent_time = start_of_day\n\n# Find free time slots\nfor busy_start, busy_end in sorted(busy_times):\n    if current_time < busy_start:\n        free_time_slots.append((current_time, busy_start))\n    current_time = max(current_time, busy_end)\n\n# Account for end of day free time\nif current_time < end_of_day:\n    free_time_slots.append((current_time, end_of_day))\n\n# Find a suitable time slot for the meeting\nfor start, end in free_time_slots:\n    if end - start >= meeting_duration:\n        proposed_time_start = start\n        proposed_time_end = start + meeting_duration\n        print(f\"{proposed_time_start.strftime('%H:%M')}:{proposed_time_end.strftime('%H:%M')}\")\n        print(meeting_day)\n        break\n```",
            "count": "calendar_scheduling_example_541"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of available time slots\n    available_slots = [(work_start, work_end)]\n    \n    # Update the available slots based on each participant's schedule\n    for participant in participants:\n        busy_times = participant['busy_times']\n        new_available_slots = []\n        \n        for start, end in available_slots:\n            current_start = start\n            \n            for busy_start, busy_end in busy_times:\n                if current_start < busy_start:\n                    new_available_slots.append((current_start, busy_start))\n                current_start = max(current_start, busy_end)\n            \n            if current_start < end:\n                new_available_slots.append((current_start, end))\n        \n        available_slots = new_available_slots\n    \n    # Find a suitable time slot that fits the meeting duration\n    for start, end in available_slots:\n        if end - start >= meeting_duration:\n            meeting_start = start\n            meeting_end = start + meeting_duration\n            return meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\"), meeting_start.strftime(\"%A\")\n    \n    return None\n\n# Define participant schedules\nparticipants = [\n    {'name': 'Andrea', 'busy_times': []},\n    {'name': 'Jack', 'busy_times': [(datetime.strptime(\"09:00\", \"%H:%M\"), \n                                       datetime.strptime(\"09:30\", \"%H:%M\")),\n                                      (datetime.strptime(\"14:00\", \"%H:%M\"), \n                                       datetime.strptime(\"14:30\", \"%H:%M\"))]},\n    {'name': 'Madison', 'busy_times': [(datetime.strptime(\"09:30\", \"%H:%M\"), \n                                          datetime.strptime(\"10:30\", \"%H:%M\")),\n                                         (datetime.strptime(\"13:00\", \"%H:%M\"), \n                                          datetime.strptime(\"14:00\", \"%H:%M\")),\n                                         (datetime.strptime(\"15:00\", \"%H:%M\"), \n                                          datetime.strptime(\"15:30\", \"%H:%M\")),\n                                         (datetime.strptime(\"16:30\", \"%H:%M\"), \n                                          datetime.strptime(\"17:00\", \"%H:%M\"))]},\n    {'name': 'Rachel', 'busy_times': [(datetime.strptime(\"09:30\", \"%H:%M\"), \n                                         datetime.strptime(\"10:30\", \"%H:%M\")),\n                                        (datetime.strptime(\"11:00\", \"%H:%M\"), \n                                         datetime.strptime(\"11:30\", \"%H:%M\")),\n                                        (datetime.strptime(\"12:00\", \"%H:%M\"), \n                                         datetime.strptime(\"13:30\", \"%H:%M\")),\n                                        (datetime.strptime(\"14:30\", \"%H:%M\"), \n                                         datetime.strptime(\"15:30\", \"%H:%M\")),\n                                        (datetime.strptime(\"16:00\", \"%H:%M\"), \n                                         datetime.strptime(\"17:00\", \"%H:%M\"))]},\n    {'name': 'Douglas', 'busy_times': [(datetime.strptime(\"09:00\", \"%H:%M\"), \n                                          datetime.strptime(\"11:30\", \"%H:%M\")),\n                                         (datetime.strptime(\"12:00\", \"%H:%M\"), \n                                          datetime.strptime(\"16:30\", \"%H:%M\"))]},\n    {'name': 'Ryan', 'busy_times': [(datetime.strptime(\"09:00\", \"%H:%M\"), \n                                       datetime.strptime(\"09:30\", \"%H:%M\")),\n                                      (datetime.strptime(\"13:00\", \"%H:%M\"), \n                                       datetime.strptime(\"14:00\", \"%H:%M\")),\n                                      (datetime.strptime(\"14:30\", \"%H:%M\"), \n                                       datetime.strptime(\"17:00\", \"%H:%M\"))]},\n]\n\n# Meeting duration of 30 minutes\nmeeting_duration = timedelta(minutes=30)\n\n# Find and print the meeting time\nstart_time, end_time, day = find_meeting_time(participants, meeting_duration)\nprint(f\"{start_time}:{end_time}:{day}\")\n```",
            "count": "calendar_scheduling_example_396"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to convert time in string format to datetime\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Function to find meeting time\ndef find_meeting_time(participant1_schedule, participant2_schedule, meeting_duration, work_hours):\n    work_start = str_to_time(work_hours[0])\n    work_end = str_to_time(work_hours[1])\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n\n        # Check if the meeting conflicts with participant 1's schedule\n        conflict1 = any(start < meeting_end and end > meeting_start for start, end in participant1_schedule)\n        # Check if the meeting conflicts with participant 2's schedule\n        conflict2 = any(start < meeting_end and end > meeting_start for start, end in participant2_schedule)\n\n        if not conflict1 and not conflict2:\n            return f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')} on Monday\"\n\n        current_time += timedelta(minutes=30)  # Increment time by 30 min\n\n    return \"No available time found\"\n\n# Existing schedules for both participants\nchristine_schedule = [(str_to_time(\"11:00\"), str_to_time(\"11:30\")),\n                      (str_to_time(\"15:00\"), str_to_time(\"15:30\"))]\n\nhelen_schedule = [(str_to_time(\"9:30\"), str_to_time(\"10:30\")),\n                  (str_to_time(\"11:00\"), str_to_time(\"11:30\")),\n                  (str_to_time(\"12:00\"), str_to_time(\"12:30\")),\n                  (str_to_time(\"13:30\"), str_to_time(\"16:00\")),\n                  (str_to_time(\"16:30\"), str_to_time(\"17:00\"))]\n\n# Define meeting duration and work hours\nmeeting_duration = 30  # in minutes\nwork_hours = (\"09:00\", \"17:00\")\n\n# Find suitable meeting time\nmeeting_time = find_meeting_time(christine_schedule, helen_schedule, meeting_duration, work_hours)\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_579"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "14:00"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define working hours and meeting duration\nworking_hours = (9, 17)\nmeeting_duration = timedelta(hours=1)\n\n# Define schedules\ncarl_schedule = {\n    \"Monday\": [(11, 30)],\n    \"Tuesday\": [(14, 30)],\n    \"Wednesday\": [(10, 30), (13, 30)],\n    \"Thursday\": [(13, 30), (16, 30)],\n}\n\nmargaret_schedule = {\n    \"Monday\": [(9, 30), (11, 0), (17, 0)],\n    \"Tuesday\": [(9, 30), (12, 0), (13, 30), (15, 30)],\n    \"Wednesday\": [(9, 30), (12, 0), (12, 30), (14, 30), (15, 0)],\n    \"Thursday\": [(10, 0), (12, 0), (12, 30), (14, 30)],\n}\n\n# Function to check if time is free\ndef is_free(start_time, end_time, schedule):\n    for busy_time in schedule:\n        busy_start = timedelta(hours=busy_time[0], minutes=busy_time[1])\n        busy_end = busy_start + meeting_duration\n        if not (end_time <= busy_start or start_time >= busy_end):\n            return False\n    return True\n\n# Generate possible meeting times\npossible_times = []\n\nfor day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]:\n    # Check time slots within working hours\n    for hour in range(working_hours[0], working_hours[1]):\n        # Define start and end time\n        start_time = timedelta(hours=hour)\n        end_time = start_time + meeting_duration\n        \n        # Check if the time slot is free for both participants\n        if is_free(start_time, end_time, carl_schedule.get(day, [])) and \\\n           is_free(start_time, end_time, margaret_schedule.get(day, [])):\n            possible_times.append((day, start_time))\n\n# Filter out Thursday's options if needed\nfinal_times = [(day, time) for day, time in possible_times if day != \"Thursday\"]\n\n# Select the first suitable time\nif final_times:\n    day, time = final_times[0]\n    proposed_time = (f\"{time.seconds // 3600:02}:{(time.seconds // 60) % 60:02}\", \n                     f\"{(time + meeting_duration).seconds // 3600:02}:{((time + meeting_duration).seconds // 60) % 60:02}\")\n    print(f\"{day}: {proposed_time[0]}:{proposed_time[1]}\")\n```\n",
            "count": "calendar_scheduling_example_858"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "15:00",
                "end_time": "15:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "15:00",
                "end_time": "15:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Scheduling constraints\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Participants' availability\ndavid_busy = [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n\ndouglas_busy = [(datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n\nralph_busy = [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"9:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\njordan_busy = [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nparticipants_busy = [david_busy, douglas_busy, ralph_busy, jordan_busy]\n\ndef is_time_available(start_time, duration):\n    end_time = start_time + duration\n    for busy_slots in participants_busy:\n        for busy_start, busy_end in busy_slots:\n            if (start_time < busy_end and end_time > busy_start):\n                return False\n    return True\n\n# Searching for a suitable time slot starting from 14:00\nproposed_start = datetime.strptime(\"14:00\", \"%H:%M\")\n\nwhile proposed_start + meeting_duration <= work_end:\n    if is_time_available(proposed_start, meeting_duration):\n        proposed_end = proposed_start + meeting_duration\n        print(f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\\nMonday\")\n        break\n    proposed_start += timedelta(minutes=1)\n```",
            "count": "calendar_scheduling_example_227"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import time, timedelta\nimport pandas as pd\n\n# Define the working hours\nwork_hours_start = time(9, 0)\nwork_hours_end = time(17, 0)\n\n# Define the busy schedules\nschedule_nicole = {\n    'Monday': [(time(9, 0), time(9, 30)), (time(13, 0), time(13, 30)), (time(14, 30), time(15, 30))],\n    'Tuesday': [(time(9, 0), time(9, 30)), (time(11, 30), time(13, 30)), (time(14, 30), time(15, 30))],\n    'Wednesday': [(time(10, 0), time(11, 0)), (time(12, 30), time(15, 0)), (time(16, 0), time(17, 0))]\n}\n\nschedule_ruth = {\n    'Monday': [(time(9, 0), time(17, 0))],\n    'Tuesday': [(time(9, 0), time(17, 0))],\n    'Wednesday': [(time(9, 0), time(10, 30)), (time(11, 0), time(11, 30)), \n                  (time(12, 0), time(12, 30)), (time(13, 30), time(15, 30)), (time(16, 0), time(16, 30))]\n}\n\n# Define meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find available time\ndef find_available_time():\n    for day in ['Monday', 'Tuesday', 'Wednesday']:\n        # Get busy times of both participants\n        busy_times_nicole = schedule_nicole[day]\n        busy_times_ruth = schedule_ruth[day]\n        \n        # Merge the busy schedules\n        busy_times = busy_times_nicole + busy_times_ruth\n        \n        # Sort and combine overlapping schedules\n        busy_times.sort()\n        merged_busy_times = []\n        for start, end in busy_times:\n            if not merged_busy_times or merged_busy_times[-1][1] < start:\n                merged_busy_times.append((start, end))\n            else:\n                merged_busy_times[-1] = (merged_busy_times[-1][0], max(merged_busy_times[-1][1], end))\n\n        # Check for available slots within working hours\n        available_starts = [work_hours_start]\n        for start, end in merged_busy_times:\n            # Check if there's time before this busy slot\n            if available_starts[-1] < start:\n                available_starts.append(end)\n            # Update latest available start time\n            available_starts[-1] = max(available_starts[-1], end)\n\n        available_starts.append(work_hours_end)\n\n        # Now check for meeting time slots\n        for i in range(len(available_starts) - 1):\n            if available_starts[i + 1] - available_starts[i] >= meeting_duration:\n                meeting_start = available_starts[i]\n                meeting_end = (datetime.combine(datetime.today(), meeting_start) + meeting_duration).time()\n                if day == 'Wednesday' and meeting_end > time(13, 30):\n                    continue\n                return f\"{day}: {meeting_start.strftime('%H:%M')} - {meeting_end.strftime('%H:%M')}\"\n\n# Output the available time\nprint(find_available_time())\n```",
            "count": "calendar_scheduling_example_791"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:30",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules in the time range for Monday\ndenise_schedule = [\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n    (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))\n]\n\nangela_schedule = []  # No meetings for Angela\n\nnatalie_schedule = [\n    (datetime.strptime('09:00', '%H:%M'), datetime.strptime('11:30', '%H:%M')),\n    (datetime.strptime('12:00', '%H:%M'), datetime.strptime('13:00', '%H:%M')),\n    (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n    (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M'))\n]\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define work hours\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Function to find the earliest meeting time\ndef find_meeting_time(denise_schedule, angela_schedule, natalie_schedule, work_start, work_end, meeting_duration):\n    all_schedules = denise_schedule + angela_schedule + natalie_schedule\n    all_schedules.sort()  # Sort all schedules by start time\n\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if all(not (start < current_time + meeting_duration and end > current_time) for start, end in all_schedules):\n            return current_time.strftime('%H:%M:%H:%M'), 'Monday'\n        current_time += timedelta(minutes=30)  # Increment time by 30 minutes\n\n    return None, None\n\n# Get the proposed meeting time\nproposed_time, day_of_week = find_meeting_time(denise_schedule, angela_schedule, natalie_schedule, work_start, work_end, meeting_duration)\n\n# Final output\nif proposed_time:\n    print(f\"{proposed_time} {day_of_week}\")\n```\n",
            "count": "calendar_scheduling_example_70"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "11:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "11:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration and participants' schedules\nmeeting_duration = timedelta(hours=1)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Participant schedules (start and end times of blocked periods)\nolivia_schedule = [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                   (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                   (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\nvirginia_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                     (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                     (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\npaul_schedule = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine all blocked schedules\nblocked_times = olivia_schedule + virginia_schedule + paul_schedule\n\n# Find a suitable time for the meeting\ndef find_meeting_time(start, end, duration, blocked):\n    current_time = start\n\n    while current_time + duration <= end:\n        is_blocked = False\n        for period in blocked:\n            if current_time < period[1] and (current_time + duration) > period[0]:\n                is_blocked = True\n                break\n        \n        if not is_blocked:\n            return current_time\n        \n        current_time += timedelta(minutes=1)\n    \n    return None\n\n# Look for a suitable time\nmeeting_time_start = find_meeting_time(work_start, work_end, meeting_duration, blocked_times)\n\nif meeting_time_start:\n    meeting_time_end = meeting_time_start + meeting_duration\n    meeting_day = \"Monday\"\n    print(f\"{meeting_time_start.strftime('%H:%M')}:{meeting_time_end.strftime('%H:%M')} - {meeting_day}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_106"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "14:00",
                "end_time": "14:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "14:00",
                "end_time": "14:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedules = {\n    \"Patrick\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Kayla\": [\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n    \"Carl\": [\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    \"Christian\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find available time\ndef find_meeting_time(schedules, duration):\n    # Create a list of busy times\n    busy_times = []\n    for times in schedules.values():\n        busy_times.extend(times)\n\n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n\n    # Find free slots\n    last_end_time = work_start\n\n    for start, end in busy_times:\n        if last_end_time + duration <= start:\n            return last_end_time.strftime(\"%H:%M\"), (last_end_time + duration).strftime(\"%H:%M\")\n        \n        last_end_time = max(last_end_time, end)\n\n    if last_end_time + duration <= work_end:\n        return last_end_time.strftime(\"%H:%M\"), (last_end_time + duration).strftime(\"%H:%M\")\n\n    return None\n\n# Find the meeting time\nresult = find_meeting_time(schedules, meeting_duration)\n\n# Output the result\nif result:\n    start_time, end_time = result\n    print(f\"Meeting Time: {{{start_time}:{end_time}}}, Day: Monday\")\n```\n",
            "count": "calendar_scheduling_example_172"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants_availability, meeting_duration, work_hours):\n    start_of_day = datetime.strptime(work_hours[0], \"%H:%M\")\n    end_of_day = datetime.strptime(work_hours[1], \"%H:%M\")\n\n    # Convert participants' busy times to datetime format\n    busy_slots = []\n    for availability in participants_availability:\n        for busy_time in availability:\n            busy_start = datetime.strptime(busy_time[0], \"%H:%M\")\n            busy_end = datetime.strptime(busy_time[1], \"%H:%M\")\n            busy_slots.append((busy_start, busy_end))\n\n    # Sort the busy slots\n    busy_slots.sort()\n\n    # Check for available time\n    last_end = start_of_day\n    for busy_start, busy_end in busy_slots:\n        # Check for a gap before the busy time\n        if last_end + timedelta(minutes=meeting_duration) <= busy_start:\n            return f\"{last_end.strftime('%H:%M')}:{(last_end + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\"\n\n        # Update last_end to the end of the busy slot if it's more recent\n        last_end = max(last_end, busy_end)\n\n    # After the last busy slot, check if there's time until end of day\n    if last_end + timedelta(minutes=meeting_duration) <= end_of_day:\n        return f\"{last_end.strftime('%H:%M')}:{(last_end + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\"\n\n    return None\n\n# Participants' availability\nparticipants_availability = [\n    [(\"09:30\", \"10:00\"), (\"12:30\", \"13:00\"), (\"14:30\", \"15:00\"), (\"16:30\", \"17:00\")],  # Adam\n    [(\"10:00\", \"11:00\"), (\"11:30\", \"13:00\"), (\"13:30\", \"14:30\"), (\"16:30\", \"17:00\")]   # Roy\n]\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Work hours\nwork_hours = [\"09:00\", \"17:00\"]\n\n# Find the meeting time\nmeeting_time = find_meeting_time(participants_availability, meeting_duration, work_hours)\n\nif meeting_time:\n    day_of_week = \"Monday\"\n    print(f\"{meeting_time}:{day_of_week}\")\n```",
            "count": "calendar_scheduling_example_594"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules as tuples of start and end times\neric_schedule = [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n\nhenry_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Henry prefers not to meet after 10:00\nhenry_preference_cutoff = datetime.strptime(\"10:00\", \"%H:%M\")\n\n# Function to find a suitable meeting time\ndef find_meeting_time(schedule1, schedule2, work_start, work_end, meeting_duration):\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n\n        if all(not (meeting_start < end and meeting_end > start) for start, end in schedule1) and \\\n           all(not (meeting_start < end and meeting_end > start) for start, end in schedule2) and \\\n           meeting_start <= henry_preference_cutoff:\n            return meeting_start, meeting_end\n        \n        current_time += timedelta(minutes=1)  # Check the next minute\n        \n    return None, None\n\n# Finding the meeting time\nmeeting_start, meeting_end = find_meeting_time(eric_schedule, henry_schedule, work_start, work_end, meeting_duration)\n\n# Output the meeting time and day of the week if found\nif meeting_start and meeting_end:\n    print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')} Monday\")\nelse:\n    print(\"No available time found\")\n```",
            "count": "calendar_scheduling_example_553"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": true,
            "raw_model_response": "```python\n# Define participants' schedules\nterry_schedule = {\n    \"Monday\": [(10, 30), (12, 30), (15, 0)],\n    \"Tuesday\": [(9, 30), (10, 30), (14, 0), (16, 0)],\n    \"Wednesday\": [(9, 30), (11, 0), (13, 0), (15, 0), (16, 30)],\n    \"Thursday\": [(9, 30), (12, 0), (13, 0), (16, 0)],\n    \"Friday\": [(9, 0), (12, 0), (13, 30), (16, 30)],\n}\n\nfrances_schedule = {\n    \"Monday\": [(9, 30), (11, 0), (14, 0), (15, 0)],\n    \"Tuesday\": [(9, 0), (10, 0), (11, 0), (13, 0), (15, 30)],\n    \"Wednesday\": [(9, 30), (10, 30), (11, 30), (16, 30)],\n    \"Thursday\": [(11, 0), (14, 30)],\n    \"Friday\": [(9, 30), (11, 0), (13, 0), (16, 30)],\n}\n\n# Convert booked times to a more usable format\ndef convert_schedule(schedule):\n    available_times = []\n    for day, busy_slots in schedule.items():\n        available_times.append((day, get_available_times(busy_slots)))\n    return available_times\n\n# Find available time slots based on busy schedule\ndef get_available_times(busy_slots):\n    busy_slots = sorted(busy_slots)\n    available_times = []\n    day_start = (9, 0)  # work hours start\n    day_end = (17, 0)   # work hours end\n    \n    last_end = day_start\n    for start, end in busy_slots:\n        if last_end < (start, 0):\n            available_times.append((last_end, (start, 0)))\n        last_end = (end, 0)\n    \n    if last_end < day_end:\n        available_times.append((last_end, day_end))\n    \n    return available_times\n\n# Combine available times for meeting\ndef find_meeting_time(terry_times, frances_times):\n    potential_days = set(terry_times.keys()).intersection(frances_times.keys())\n    \n    for day in potential_days:\n        terry_slots = terry_times[day]\n        frances_slots = frances_times[day]\n        \n        for terry_start, terry_end in terry_slots:\n            for frances_start, frances_end in frances_slots:\n                start_time = max((terry_start, 0), (frances_start, 0))\n                end_time = min((terry_end, 0), (frances_end, 0))\n                \n                if (end_time[0] - start_time[0] >= 0 and (end_time[1] - start_time[1]) >= 30):\n                    return f\"{day} {start_time[0]:02}:{start_time[1]:02}:{start_time[0]:02}:{start_time[1] + 30:02}\"\n\n# Calculate availability\nterry_availability = convert_schedule(terry_schedule)\nfrances_availability = convert_schedule(frances_schedule)\n\n# Find the meeting time\nmeeting_time = find_meeting_time(dict(terry_availability), dict(frances_availability))\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_935"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and constraints for Bobby and Michael\nwork_hours = {\n    'Monday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    'Tuesday': [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nbobby_busy = {\n    'Monday': [(datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    'Tuesday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n        (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n}\n\nmichael_busy = {\n    'Monday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n        (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    'Tuesday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n        (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n}\n\nmeeting_duration = timedelta(minutes=30)\n\n# Function to find the first available time slot\ndef find_meeting_time():\n    for day, hours in work_hours.items():\n        for work_start, work_end in hours:\n            available_start = work_start\n            while available_start + meeting_duration <= work_end:\n                is_conflict = False\n                for b_start, b_end in bobby_busy.get(day, []):\n                    if not (available_start + meeting_duration <= b_start or available_start >= b_end):\n                        is_conflict = True\n                        break\n                for m_start, m_end in michael_busy.get(day, []):\n                    if not (available_start + meeting_duration <= m_start or available_start >= m_end):\n                        is_conflict = True\n                        break\n                if not is_conflict:\n                    return (available_start, available_start + meeting_duration, day)\n                available_start += timedelta(minutes=1)\n    return None\n\nmeeting_time = find_meeting_time()\nif meeting_time:\n    start_time, end_time, day = meeting_time\n    print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')} {day}\")\n```",
            "count": "calendar_scheduling_example_640"
        },
        {
            "final_program_time": {
                "day": "Wednesday",
                "start_time": "11:00",
                "end_time": "12:00"
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "15:00",
                "end_time": "16:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the time slots for each day\nwork_hours = {\n    'Monday': [(9, 17)],\n    'Tuesday': [(9, 17)],\n    'Wednesday': [(9, 17)],\n    'Thursday': [(9, 17)],\n    'Friday': [(9, 17)]\n}\n\n# Define the busy schedules for Diane and Matthew\ndiane_busy = {\n    'Monday': [(12, 12.5), (15, 15.5)],\n    'Tuesday': [(10, 11), (11.5, 12.5), (16, 17)],\n    'Wednesday': [(9, 9.5), (14.5, 15), (16.5, 17)],\n    'Thursday': [(15.5, 16.5)],\n    'Friday': [(9.5, 11.5), (14.5, 15), (16, 17)]\n}\n\nmatthew_busy = {\n    'Monday': [(9, 10), (10.5, 17)],\n    'Tuesday': [(9, 17)],\n    'Wednesday': [(9, 11), (12, 14.5), (16, 17)],\n    'Thursday': [(9, 16)],\n    'Friday': [(9, 17)]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\ndef find_meeting_time():\n    for day in work_hours.keys():\n        # Calculate free time slots for the day\n        free_slots = []\n        start_time = work_hours[day][0][0]\n        end_time = work_hours[day][0][1]\n\n        # Create a full day's schedule\n        full_schedule = [(start_time, end_time)]\n        \n        # Add busy slots into the schedule\n        for busy_slot in diane_busy.get(day, []) + matthew_busy.get(day, []):\n            busy_start, busy_end = busy_slot\n            new_schedule = []\n            \n            for (fs, fe) in full_schedule:\n                # If there's free time before the busy slot\n                if fs < busy_start:\n                    new_schedule.append((fs, min(fe, busy_start)))\n                # If there's free time after the busy slot\n                if fe > busy_end:\n                    new_schedule.append((max(fs, busy_end), fe))\n\n            full_schedule = new_schedule\n\n        # Check for a suitable free slot for the meeting\n        for (fs, fe) in full_schedule:\n            if fe - fs >= meeting_duration.total_seconds() / 3600.0:\n                # convert float time back to hh:mm format\n                start_hour = int(fs)\n                start_minute = int((fs - start_hour) * 60)\n                end_hour = start_hour + 1\n                end_minute = start_minute\n                \n                # Return the proposed time\n                return f\"{day}: {start_hour:02}:{start_minute:02}:{end_hour:02}:{end_minute:02}\"\n\n# Call the function to find the meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_985"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Constants\nparticipants = {\n    'John': [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    'Megan': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Brandon': [],\n    'Kimberly': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                 (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                 (datetime.strptime('11:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                 (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Sean': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n             (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n             (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n    'Lori': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n             (datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n             (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n             (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Calculate available time slots\ndef available_time_slots(participants_schedules, work_start, work_end):\n    time_slots = []\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if all(not (current_time < end and end_time > start) for schedule in participants_schedules.values() for start, end in schedule):\n            time_slots.append((current_time, end_time))\n        current_time += timedelta(minutes=1)  # Check each minute for availability\n    \n    return time_slots\n\n# Work hours on Monday\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Get available time slots\navailable_slots = available_time_slots(participants, work_start, work_end)\n\n# Choose the first available slot\nif available_slots:\n    proposed_slot = available_slots[0]\n    proposed_time_range = f\"{proposed_slot[0].strftime('%H:%M')}:{proposed_slot[1].strftime('%H:%M')}\"\n    day_of_week = 'Monday'\n    print(f\"{proposed_time_range} {day_of_week}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_337"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours\nworking_hours_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworking_hours_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Existing schedules (busy times)\njuan_busy_times = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nmarilyn_busy_times = [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                      (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))]\n\nronald_busy_times = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                     (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                     (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                     (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n\n# Merge all busy times into a single list\nbusy_times = juan_busy_times + marilyn_busy_times + ronald_busy_times\n\n# Function to find a suitable time slot\ndef find_meeting_time(busy_times, duration, start, end):\n    # Sort busy times\n    busy_times.sort()\n    \n    # Check available time slots\n    current_time = start\n\n    for busy_start, busy_end in busy_times:\n        # Check if there's enough time before the next busy time\n        if current_time + timedelta(minutes=duration) <= busy_start:\n            return current_time, current_time + timedelta(minutes=duration)\n        \n        # Move the current time to the end of the busy time\n        current_time = max(current_time, busy_end)\n    \n    # Check if there's time after all busy schedules until the end of the workday\n    if current_time + timedelta(minutes=duration) <= end:\n        return current_time, current_time + timedelta(minutes=duration)\n\n# Find a meeting time\nmeeting_start, meeting_end = find_meeting_time(busy_times, meeting_duration, working_hours_start, working_hours_end)\n\n# Output the result in specified format\nmeeting_time_range = f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\"\nday_of_week = \"Monday\"\n\nprint(meeting_time_range)\nprint(day_of_week)\n```",
            "count": "calendar_scheduling_example_98"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting():\n    # Define the meeting duration and timeframe\n    meeting_duration = timedelta(minutes=30)\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Define the participants' schedules\n    randy_schedule = [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n        (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ]\n    \n    # Evelyn's preference\n    evlyn_preference_end = datetime.strptime(\"13:00\", \"%H:%M\")\n    \n    # Define the available slots\n    available_slots = []\n    \n    # Check each hour in the work schedule to find an open slot\n    current_time = work_start\n    while current_time < work_end:\n        slot_start = current_time\n        slot_end = current_time + meeting_duration\n        \n        # Check if the current slot is available\n        if slot_end > work_end:\n            break\n        \n        # Check Randy's schedule for conflicts\n        available = True\n        for start, end in randy_schedule:\n            if slot_start < end and slot_end > start:\n                available = False\n                break\n        \n        # Check Evelyn's constraint\n        if available and slot_end <= evlyn_preference_end:\n            available_slots.append((slot_start, slot_end))\n        \n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n    \n    # Assuming there is at least one available slot, we take the first one\n    if available_slots:\n        start_time, end_time = available_slots[0]\n        print(f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')} Monday\")\n    else:\n        print(\"No available time slots found.\")\n\nschedule_meeting()\n```",
            "count": "calendar_scheduling_example_555"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "14:00",
                "end_time": "15:00"
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(hours=1)\n\n# Define existing schedules\njudith_schedule = {\n    'Monday': [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))],\n    'Wednesday': [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n}\n\ntimothy_schedule = {\n    'Monday': [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    'Tuesday': [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\")),\n    ],\n    'Wednesday': [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\")),\n    ],\n}\n\n# Combine schedules and propose a meeting time\ndef find_meeting_time():\n    # Check possible days\n    possible_days = ['Monday', 'Tuesday', 'Wednesday']\n    for day in possible_days:\n        # Get busy times\n        busy_times = judith_schedule.get(day, []) + timothy_schedule.get(day, [])\n        busy_times.sort()  # Sort busy times by start time\n\n        # Find available slot\n        current_time = work_start\n        for start, end in busy_times:\n            # Check for available time before the busy slot\n            if current_time + meeting_duration <= start:\n                return f\"{day}: {current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n            current_time = max(current_time, end)\n\n        # Check for availability after the last busy slot until work end\n        if current_time + meeting_duration <= work_end:\n            return f\"{day}: {current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\"\n\n    return \"No available time found\"\n\n# Call function to get proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_784"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define work hours and days\n    work_hours = {\n        'Monday': [(9, 17)],\n        'Tuesday': [(9, 17)],\n        'Wednesday': [(9, 17)],\n        'Thursday': [(9, 17)]\n    }\n\n    # Existing schedules for Laura\n    laura_busy = {\n        'Monday': [(10, 30, 11, 0), (12, 30, 13, 0), (14, 30, 15, 30), (16, 0, 17, 0)],\n        'Tuesday': [(9, 30, 10, 0), (11, 0, 11, 30), (13, 0, 13, 30), (14, 30, 15, 0), (16, 0, 17, 0)],\n        'Wednesday': [(11, 30, 12, 0), (12, 30, 13, 0), (15, 30, 16, 30)],\n        'Thursday': [(10, 30, 11, 0), (12, 0, 13, 30), (15, 0, 15, 30), (16, 0, 16, 30)]\n    }\n\n    # Existing schedules for Philip\n    philip_busy = {\n        'Monday': [(9, 0, 17, 0)],\n        'Tuesday': [(9, 0, 11, 0), (11, 30, 12, 0), (13, 0, 13, 30), (14, 0, 14, 30), (15, 0, 16, 30)],\n        'Wednesday': [(9, 0, 10, 0), (11, 0, 12, 0), (12, 30, 16, 0), (16, 30, 17, 0)],\n        'Thursday': [(9, 0, 10, 30), (11, 0, 12, 30), (13, 0, 17, 0)]\n    }\n\n    # Define meeting duration\n    meeting_duration = 1  # in hours\n\n    # Function to check if a time slot is available\n    def is_time_slot_available(day, start_hour, end_hour):\n        for start, end in laura_busy.get(day, []):\n            if not (end_hour <= start or end <= start_hour):\n                return False\n        for start, end in philip_busy.get(day, []):\n            if not (end_hour <= start or end <= start_hour):\n                return False\n        return True\n\n    # Find suitable time\n    for day, hours in work_hours.items():\n        for start_hour, end_hour in hours:\n            for hour in range(start_hour, end_hour - meeting_duration + 1):\n                if is_time_slot_available(day, hour, hour + meeting_duration):\n                    start_time = f\"{hour:02}:00\"\n                    end_time = f\"{hour + meeting_duration:02}:00\"\n                    return f\"{start_time}:{end_time} on {day}\"\n\n# Execute the function to get the meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_825"
        },
        {
            "final_program_time": {
                "day": "Wednesday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participants' schedules\nschedules = {\n    \"Joshua\": {\n        \"Monday\": [(15, 0, 15, 30)],\n        \"Tuesday\": [(11, 30, 12, 0), (13, 0, 13, 30), (14, 30, 15, 0)],\n        \"Wednesday\": []\n    },\n    \"Joyce\": {\n        \"Monday\": [(9, 0, 9, 30), (10, 0, 11, 0), (11, 30, 12, 30), \n                   (13, 0, 15, 0), (15, 30, 17, 0)],\n        \"Tuesday\": [(9, 0, 17, 0)],\n        \"Wednesday\": [(9, 0, 9, 30), (10, 0, 11, 0), (12, 30, 15, 30), \n                      (16, 0, 16, 30)]\n    }\n}\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Convert schedule times to a list of unavailable time ranges\ndef create_unavailable_times(schedule):\n    unavailable_times = []\n    for times in schedule.values():\n        for start_h, start_m, end_h, end_m in times:\n            start = datetime(2023, 1, 1, start_h, start_m)\n            end = datetime(2023, 1, 1, end_h, end_m)\n            unavailable_times.append((start, end))\n    return unavailable_times\n\n# Check for available time slots\ndef find_available_time(day):\n    start_time = datetime(2023, 1, 1, 9, 0)  # Work starts at 9:00\n    end_time = datetime(2023, 1, 1, 17, 0)    # Work ends at 17:00\n\n    # Get unavailable times for both participants\n    joshua_unavailable = create_unavailable_times({day: schedules[\"Joshua\"].get(day, [])})\n    joyce_unavailable = create_unavailable_times({day: schedules[\"Joyce\"].get(day, [])})\n\n    # Merge unavailable times\n    all_unavailable = sorted(joshua_unavailable + joyce_unavailable)\n\n    # Check for gaps in unavailable times\n    last_end = start_time\n    for start, end in all_unavailable:\n        if last_end + timedelta(minutes=meeting_duration) <= start:\n            return last_end.strftime(\"%H:%M\"), (last_end + timedelta(minutes=meeting_duration)).strftime(\"%H:%M\")\n        last_end = max(last_end, end)\n\n    # Check after the last unavailable time\n    if last_end + timedelta(minutes=meeting_duration) <= end_time:\n        return last_end.strftime(\"%H:%M\"), (last_end + timedelta(minutes=meeting_duration)).strftime(\"%H:%M\")\n\n    return None\n\n# Attempt to find a time on preferred days\npreferred_days = [\"Tuesday\", \"Wednesday\"]\n\nfor preferred_day in preferred_days:\n    available_time = find_available_time(preferred_day)\n    if available_time:\n        start_time, end_time = available_time\n        print(f\"{start_time}:{end_time}, {preferred_day}\")\n        break\n```",
            "count": "calendar_scheduling_example_765"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedules = {\n    \"Diane\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 0)),\n              (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0))],\n    \"Jack\": [(datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 0)),\n             (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0))],\n    \"Eugene\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 0)),\n               (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 30)),\n               (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 14, 30)),\n               (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 16, 30))],\n    \"Patricia\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 30)),\n                 (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 0)),\n                 (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 14, 0)),\n                 (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 16, 30))]\n}\n\n# Meeting parameters\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime(2023, 10, 2, 9, 0)\nwork_end = datetime(2023, 10, 2, 17, 0)\n\n# Find available slot\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    # Create a list of busy times\n    busy_times = []\n    for busy_slots in schedules.values():\n        busy_times.extend(busy_slots)\n\n    # Sort busy times\n    busy_times.sort()\n\n    # Check for available slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if this time is busy\n        time_slot_end = current_time + meeting_duration\n        is_busy = any(start < time_slot_end and current_time < end for start, end in busy_times)\n        \n        if not is_busy:\n            return current_time, time_slot_end\n        \n        current_time += timedelta(minutes=1)\n    \n    return None, None\n\nmeeting_start, meeting_end = find_meeting_time(schedules, meeting_duration, work_start, work_end)\n\n# Format output\nif meeting_start and meeting_end:\n    print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n    print(\"Monday\")\n```",
            "count": "calendar_scheduling_example_103"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "15:30",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\").time()\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\").time()\n\n# Define existing schedules\nmartha_schedule = {\n    \"Monday\": [(datetime.strptime(\"16:00\", \"%H:%M\").time(), datetime.strptime(\"17:00\", \"%H:%M\").time())],\n    \"Tuesday\": [(datetime.strptime(\"15:00\", \"%H:%M\").time(), datetime.strptime(\"15:30\", \"%H:%M\").time())],\n    \"Wednesday\": [(datetime.strptime(\"10:00\", \"%H:%M\").time(), datetime.strptime(\"11:00\", \"%H:%M\").time()),\n                   (datetime.strptime(\"14:00\", \"%H:%M\").time(), datetime.strptime(\"14:30\", \"%H:%M\").time())]\n}\n\nbeverly_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\").time(), datetime.strptime(\"13:30\", \"%H:%M\").time()),\n                (datetime.strptime(\"14:00\", \"%H:%M\").time(), datetime.strptime(\"17:00\", \"%H:%M\").time())],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\").time(), datetime.strptime(\"17:00\", \"%H:%M\").time())],\n    \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\").time(), datetime.strptime(\"15:30\", \"%H:%M\").time()),\n                   (datetime.strptime(\"16:30\", \"%H:%M\").time(), datetime.strptime(\"17:00\", \"%H:%M\").time())]\n}\n\ndef is_time_available(schedule, day, start_time, duration):\n    end_time = (datetime.combine(datetime.today(), start_time) + duration).time()\n    for (start, end) in schedule.get(day, []):\n        if start_time < end and end_time > start:\n            return False\n    return True\n\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        for hour in range(work_start.hour, work_end.hour):\n            start_time = datetime.strptime(f\"{hour}:00\", \"%H:%M\").time()\n            if is_time_available(martha_schedule, day, start_time, meeting_duration) and \\\n               is_time_available(beverly_schedule, day, start_time, meeting_duration):\n                return f\"{day}: {start_time.strftime('%H:%M')} to {(datetime.combine(datetime.today(), start_time) + meeting_duration).time().strftime('%H:%M')}\"\n\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n```",
            "count": "calendar_scheduling_example_767"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules (occupied time slots)\nschedules = {\n    \"Joan\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n             (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Megan\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Austin\": [],\n    \"Betty\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Judith\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Terry\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kathryn\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n}\n\n# Meeting constraints\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Function to find an available time slot\ndef find_meeting_time():\n    # Get all occupied time slots\n    occupied_slots = []\n    for slots in schedules.values():\n        occupied_slots.extend(slots)\n    \n    occupied_slots.sort()  # Sort all occupied time slots\n\n    # Check for available slots within working hours\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        next_time = current_time + meeting_duration\n        # Check if the current time slot conflicts with any occupied slots\n        conflict = any(start < next_time and current_time < end for start, end in occupied_slots)\n        \n        if not conflict:\n            return current_time.strftime(\"%H:%M\"), next_time.strftime(\"%H:%M\")\n        \n        # Move to the next available time slot\n        current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n    return None, None\n\n# Proposed meeting time\nstart_time, end_time = find_meeting_time()\nday_of_week = \"Monday\"\n\n# Output in the required format\nif start_time and end_time:\n    print(f\"{start_time}:{end_time}:{day_of_week}\")\nelse:\n    print(\"No available time found.\")\n```",
            "count": "calendar_scheduling_example_441"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "14:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participant schedules\ngary_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\ndavid_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to find available time slot\ndef find_meeting_time(gary_schedule, david_schedule, duration):\n    days = [\"Monday\", \"Tuesday\"]\n    \n    for day in days:\n        gary_times = gary_schedule[day]\n        david_times = david_schedule[day]\n        \n        # Combine schedules and get free slots\n        blocked_times = gary_times + david_times\n        blocked_times.sort(key=lambda x: x[0]) # Sort by start time\n        \n        start_of_day = datetime.strptime(\"09:00\", \"%H:%M\")\n        end_of_day = datetime.strptime(\"17:00\", \"%H:%M\")\n        \n        # Check for free slots in between blocked times\n        last_end_time = start_of_day\n        \n        for start, end in blocked_times:\n            # If there is time between last_end_time and current start, consider it\n            if last_end_time + duration <= start:\n                return f\"{last_end_time.strftime('%H:%M')}:{(last_end_time + duration).strftime('%H:%M')} {day}\"\n            # Update last_end_time to be the end of the current blocked time\n            if end > last_end_time:\n                last_end_time = end\n                \n        # Check for time after the last blocked time until end of the day\n        if last_end_time + duration <= end_of_day:\n            return f\"{last_end_time.strftime('%H:%M')}:{(last_end_time + duration).strftime('%H:%M')} {day}\"\n    \n    return \"No available time slot found.\"\n\n# Get proposed meeting time\nproposed_time = find_meeting_time(gary_schedule, david_schedule, meeting_duration)\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_662"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "9:30",
                "end_time": "10:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the working hours and the durations\nworking_hours = {\n    \"Monday\": (9, 17),\n    \"Tuesday\": (9, 17),\n    \"Wednesday\": (9, 17)\n}\nmeeting_duration = timedelta(hours=1)\n\n# Existing schedules\nschedules = {\n    \"Stephanie\": {\n        \"Monday\": [(9, 30), (10, 30), (11, 30), (14, 0)],  # end times derived\n        \"Tuesday\": [(12, 0)],\n        \"Wednesday\": [(9, 0), (13, 0)]  \n    },\n    \"Betty\": {\n        \"Monday\": [(9, 0), (11, 0), (14, 30), (15, 30)],\n        \"Tuesday\": [(9, 0), (11, 30), (12, 30), (15, 30)],\n        \"Wednesday\": [(10, 0), (12, 0), (14, 30)]\n    }\n}\n\n# Block out times on their schedules\ndef get_unavailable_times(schedule):\n    unavailable_times = []\n    for day, times in schedule.items():\n        for time in times:\n            start_time = datetime.strptime(f\"{day} {time[0]}:{time[1]}\", \"%A %H:%M\")\n            end_time = start_time + timedelta(minutes=30)\n            unavailable_times.append((start_time, end_time))\n    return unavailable_times\n\n# Calculate the available time slots for a given day\ndef find_available_slots(day):\n    start_hour, end_hour = working_hours[day]\n    day_start = datetime.strptime(f\"{day} {start_hour}:00\", \"%A %H:%M\")\n    day_end = datetime.strptime(f\"{day} {end_hour}:00\", \"%A %H:%M\")\n    \n    # Get unavailable times for both participants\n    unavailable_times = []\n    unavailable_times += get_unavailable_times(schedules[\"Stephanie\"].get(day, []))\n    unavailable_times += get_unavailable_times(schedules[\"Betty\"].get(day, []))\n    \n    # Sort by start time\n    unavailable_times.sort()\n\n    # Find available slots\n    available_slots = []\n    current_time = day_start\n\n    for start, end in unavailable_times:\n        # Check if there's a gap before the next meeting\n        if current_time < start:\n            while current_time + meeting_duration <= start:\n                available_slots.append((current_time, current_time + meeting_duration))\n                current_time += timedelta(minutes=30)  # Increment by 30 minutes\n\n        # Move current time to the end of the unavailable block\n        current_time = max(current_time, end)\n\n    # Check for any remaining time after the last unavailable block\n    if current_time + meeting_duration <= day_end:\n        available_slots.append((current_time, current_time + meeting_duration))\n\n    return available_slots\n\n# Main logic to find meeting time\ndef schedule_meeting():\n    for day in working_hours.keys():\n        available_slots = find_available_slots(day)\n        if available_slots:\n            meeting_time = available_slots[0]  # Take the first available slot\n            return f\"{meeting_time[0].strftime('%H:%M')}:{meeting_time[1].strftime('%H:%M')} {day}\"\n    \n    return \"No available times found\"\n\n# Execute the scheduling function\nscheduled_time = schedule_meeting()\nprint(scheduled_time)\n```",
            "count": "calendar_scheduling_example_703"
        },
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define participants' availability\n    cheryl_availability = {\n        \"Monday\": [(9, 0), (17, 0)],\n        \"Tuesday\": [(9, 0), (17, 0)],\n        \"Wednesday\": [(9, 0), (17, 0)],\n        \"Thursday\": [(9, 0), (17, 0)],\n    }\n    \n    james_availability = {\n        \"Monday\": [(9, 30), (10, 30), (11, 0), (12, 30), (13, 0), (14, 30), (15, 30), (16, 30), (17, 0)],\n        \"Tuesday\": [(9, 0), (11, 0), (11, 30), (12, 30), (15, 30), (16, 0), (17, 0)],\n        \"Wednesday\": [(10, 0), (11, 0), (12, 0), (13, 0), (16, 0), (16, 30), (17, 0)],\n        \"Thursday\": [(9, 30), (11, 30), (12, 0), (12, 30), (13, 0), (13, 30), (14, 0), (14, 30), (16, 30), (17, 0)],\n    }\n\n    meeting_duration = timedelta(minutes=30)\n\n    for day in [\"Monday\", \"Tuesday\", \"Thursday\"]:  # Excluding Wednesday\n        available_slots = []\n        \n        # Cheryl's available time\n        cheryl_start, cheryl_end = cheryl_availability[day][0]\n        cheryl_start_time = datetime.now().replace(hour=cheryl_start, minute=cheryl_end, second=0)\n\n        # Generate free slots for James on that day\n        james_intervals = []\n        last_end_time = cheryl_start_time\n\n        for start_hour, start_minute in james_availability[day]:\n            current_start_time = datetime.now().replace(hour=start_hour, minute=start_minute, second=0)\n            if current_start_time >= last_end_time + meeting_duration:\n                available_slots.append((last_end_time, current_start_time))\n            last_end_time = current_start_time\n\n        # End of day (Cheryl's available time)\n        end_of_day = datetime.now().replace(hour=17, minute=0, second=0)\n        if end_of_day >= last_end_time + meeting_duration:\n            available_slots.append((last_end_time, end_of_day))\n\n        # Look for a suitable slot of at least 30 mins for both\n        for start, end in available_slots:\n            if end - start >= meeting_duration:\n                proposed_start_time = start\n                proposed_end_time = proposed_start_time + meeting_duration\n                return f\"{proposed_start_time.strftime('%H:%M')}:{proposed_end_time.strftime('%H:%M')} {day}\"\n\n# Call the function to find a meeting time\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_826"
        },
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' schedules\nlarry_schedule = [(9, 0, 17, 0)]  # Open entire week\nsamuel_schedule = {\n    'Monday': [(10, 30, 11, 0), (12, 0, 12, 30), (13, 0, 15, 0), (15, 30, 16, 30)],\n    'Tuesday': [(9, 0, 12, 0), (14, 0, 15, 30), (16, 30, 17, 0)],\n    'Wednesday': [(10, 30, 11, 0), (11, 30, 12, 0), (12, 30, 13, 0), (14, 0, 14, 30), (15, 0, 16, 0)]\n}\n\n# Meeting constraints\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\npreferred_days = ['Monday', 'Tuesday', 'Wednesday']\nlarry_avoids = ['Wednesday']\nsamuel_avoids = ['Tuesday']\n\ndef find_available_time(schedules):\n    for day in preferred_days:\n        # Skip if Larry wants to avoid this day\n        if day in larry_avoids:\n            continue\n\n        # Get the working hours of the day\n        work_hours = (work_start.hour, work_start.minute, work_end.hour, work_end.minute)\n        free_slots = []\n\n        # Generate free slots for the whole day\n        current_time = work_start\n        while current_time < work_end:\n            slot_start = current_time\n            slot_end = slot_start + meeting_duration\n            \n            # Check if the slot is available\n            is_free = True\n            # Check Samuel's schedule for the day\n            for scheduled_start, scheduled_end in samuel_schedule[day]:\n                scheduled_start_time = datetime.strptime(f\"{scheduled_start}:00\", \"%H:%M:%S\")\n                scheduled_end_time = datetime.strptime(f\"{scheduled_end}:00\", \"%H:%M:%S\")\n                if slot_start < scheduled_end_time and slot_end > scheduled_start_time:\n                    is_free = False\n                    break\n            \n            if is_free and slot_end <= work_end:\n                free_slots.append((slot_start, slot_end))\n            \n            # Move to the next time slot\n            current_time += timedelta(minutes=30)  # Check every 30 minutes\n\n        # Find the earliest available slot\n        if free_slots:\n            earliest_slot = free_slots[0]\n            return earliest_slot[0].strftime(\"%H:%M\") + \":\" + earliest_slot[1].strftime(\"%H:%M\"), day \n\n# Calculate the proposed time\ntime_range, day_of_week = find_available_time(samuel_schedule)\n\nprint(f\"{time_range} {day_of_week}\")\n```",
            "count": "calendar_scheduling_example_704"
        }
    ]
}