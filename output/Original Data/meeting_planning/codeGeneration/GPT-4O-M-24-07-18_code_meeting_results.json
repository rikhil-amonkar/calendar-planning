{
    "0shot": [
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:19AM",
                    "duration": 20,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:20AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "10:30AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 120,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = \"9:00AM\"\ntravel_time_to_mission = 20  # minutes\ntravel_time_to_marina = 19  # minutes\nstephanie_start = \"10:30AM\"\nstephanie_end = \"1:30PM\"\nmeeting_duration = 120  # minutes\n\n# Parse time strings to datetime objects\narrival_time_dt = datetime.strptime(arrival_time, \"%I:%M%p\")\nstephanie_start_dt = datetime.strptime(stephanie_start, \"%I:%M%p\")\nstephanie_end_dt = datetime.strptime(stephanie_end, \"%I:%M%p\")\n\n# Calculate available meeting time\navailable_meeting_start = max(arrival_time_dt + timedelta(minutes=travel_time_to_mission), stephanie_start_dt)\navailable_meeting_end = min(available_meeting_start + timedelta(minutes=meeting_duration), stephanie_end_dt)\n\n# Initialize the schedule\nschedule = []\nschedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time})\n\n# Travel to Mission District\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Mission District\",\n    \"duration\": travel_time_to_mission,\n    \"time\": (arrival_time_dt + timedelta(minutes=travel_time_to_marina)).strftime(\"%I:%M%p\"),\n    \"to\": \"Mission District\"\n})\n\n# Initialize the wait time if necessary\nif arrival_time_dt + timedelta(minutes=travel_time_to_mission) < stephanie_start_dt:\n    wait_time = (stephanie_start_dt - (arrival_time_dt + timedelta(minutes=travel_time_to_mission))).total_seconds() / 60\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Mission District\",\n        \"time\": (arrival_time_dt + timedelta(minutes=travel_time_to_mission)).strftime(\"%I:%M%p\")\n    })\n\n# Schedule meeting\nmeeting_start = max(available_meeting_start, arrival_time_dt + timedelta(minutes=travel_time_to_mission))\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": \"Mission District\",\n    \"duration\": meeting_duration,\n    \"time\": meeting_start.strftime(\"%I:%M%p\")\n})\n\n# Output the schedule in JSON format\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_0",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "5:15PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 60,
                    "time": "5:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = \"9:00AM\"\ntravel_time_to_fd = 22  # Richmond District to Financial District\ntravel_time_to_rd = 21   # Financial District to Richmond District\nbetty_start_time = \"5:15PM\"\nbetty_end_time = \"9:45PM\"\nminimum_meeting_duration = 60  # in minutes\n\n# Convert string time to datetime\ndef convert_to_datetime(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Convert datetime to string in required format\ndef convert_to_time_str(dt):\n    return dt.strftime('%I:%M%p')\n\n# Compute schedule\narrival_dt = convert_to_datetime(arrival_time)\nbetty_start_dt = convert_to_datetime(betty_start_time)\nbetty_end_dt = convert_to_datetime(betty_end_time)\n\n# Travel to Financial District\ntravel_to_fd_dt = arrival_dt + timedelta(minutes=travel_time_to_fd)\nif travel_to_fd_dt > betty_end_dt:\n    print(\"No time to meet Betty.\")\n    schedule = {\"schedule\": []}\nelse:\n    # Determine the earliest meeting start time\n    earliest_meeting_start = max(travel_to_fd_dt, betty_start_dt)\n    \n    # Calculate latest possible meeting end time\n    latest_meeting_end = betty_end_dt\n\n    # Meeting duration calculation\n    latest_meeting_start = latest_meeting_end - timedelta(minutes=minimum_meeting_duration)\n\n    if earliest_meeting_start > latest_meeting_start:\n        print(\"Cannot meet Betty for the required duration.\")\n        schedule = {\"schedule\": []}\n    else:\n        meeting_start_time = earliest_meeting_start\n        meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n\n        # Create schedule\n        schedule = {\n            \"schedule\": [\n                {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": convert_to_time_str(arrival_dt)},\n                {\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_time_to_fd,\n                 \"time\": convert_to_time_str(travel_to_fd_dt), \"to\": \"Financial District\"},\n                {\"action\": \"wait\", \"location\": \"Financial District\", \"time\": convert_to_time_str(travel_to_fd_dt)},\n                {\"action\": \"meet\", \"location\": \"Financial District\", \"duration\": minimum_meeting_duration,\n                 \"time\": convert_to_time_str(meeting_start_time)}\n            ]\n        }\n\n# Output result as JSON\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_1",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 15,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "3:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 90,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants\nTRAVEL_TIME_HAIGHT_TO_SUNSET = 15  # travel time in minutes\nTRAVEL_TIME_SUNSET_TO_HAIGHT = 15   # travel time in minutes\nMEETING_DURATION_REQUIRED = 90       # minimum meeting time in minutes\nJESSICA_START = datetime.strptime(\"15:15\", \"%H:%M\")  # 3:15PM\nJESSICA_END = datetime.strptime(\"20:15\", \"%H:%M\")    # 8:15PM\nARRIVAL_TIME = datetime.strptime(\"09:00\", \"%H:%M\")    # 9:00AM\n\n# Calculate the schedule\ndef compute_schedule():\n    schedule = []\n    \n    # Start at Haight-Ashbury\n    start_location = \"Haight-Ashbury\"\n    start_time = ARRIVAL_TIME\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)})\n    \n    # Travel to Sunset District\n    travel_to_sunset_time = start_time + timedelta(minutes=0)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": TRAVEL_TIME_HAIGHT_TO_SUNSET,\n        \"time\": format_time(travel_to_sunset_time),\n        \"to\": \"Sunset District\"\n    })\n\n    # Arrive at Sunset District\n    arrival_at_sunset_time = travel_to_sunset_time + timedelta(minutes=TRAVEL_TIME_HAIGHT_TO_SUNSET)\n    \n    # Wait until Jessica is available\n    wait_until_jessica_time = max(arrival_at_sunset_time, JESSICA_START)\n    schedule.append({\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": format_time(wait_until_jessica_time)})\n\n    # Meeting with Jessica\n    meeting_start_time = wait_until_jessica_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=MEETING_DURATION_REQUIRED)\n\n    # Ensure we finish meeting before Jessica leaves\n    if meeting_end_time > JESSICA_END:\n        meeting_end_time = JESSICA_END\n        meeting_start_time = meeting_end_time - timedelta(minutes=MEETING_DURATION_REQUIRED)\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": int((meeting_end_time - meeting_start_time).total_seconds() // 60),\n        \"time\": format_time(meeting_start_time)\n    })\n\n    return schedule\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\n# Generate the complete schedule\nfinal_schedule = {\n    \"schedule\": compute_schedule()\n}\n\n# Output the result as JSON\nprint(json.dumps(final_schedule, indent=2))\n```",
            "count": "meeting_planning_example_2",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:22AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define input parameters\narrival_time_bayview = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_bayview_to_golden_gate = 22  # in minutes\ngolden_gate_start_time = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\ngolden_gate_end_time = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\nmeeting_duration = 90  # in minutes\n\n# Compute the latest possible time to meet Barbara\nlatest_meeting_start_time = golden_gate_end_time - timedelta(minutes=meeting_duration)\n\n# Departure from Bayview time\ndeparture_from_bayview_time = arrival_time_bayview + timedelta(minutes=travel_time_bayview_to_golden_gate)\n\n# Determine if meeting is possible\nif departure_from_bayview_time <= latest_meeting_start_time:\n    # Calculate the actual meeting start time\n    meeting_start_time = max(departure_from_bayview_time, golden_gate_start_time)\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Construct the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time_bayview.strftime(\"%I:%M%p\")},\n        {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time_bayview_to_golden_gate, \n         \"time\": departure_from_bayview_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"},\n        {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": meeting_start_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": meeting_duration, \n         \"time\": meeting_start_time.strftime(\"%I:%M%p\")}\n    ]\n    \n    # Convert the schedule to JSON\n    result = {\"schedule\": schedule}\nelse:\n    result = {\"schedule\": []}  # No valid schedule\n\n# Output result in JSON format\nprint(json.dumps(result, indent=4))\n```",
            "count": "meeting_planning_example_3",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:15AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 60,
                    "time": "9:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef schedule_meeting():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    jessica_start = datetime.strptime(\"9:15AM\", \"%I:%M%p\")\n    jessica_end = datetime.strptime(\"5:45PM\", \"%I:%M%p\")\n    meeting_duration = 60  # minutes\n    travel_time = 10  # minutes\n\n    # Calculate the latest possible start time for the meeting\n    latest_meeting_start = jessica_end - timedelta(minutes=meeting_duration)\n\n    # Optimal meeting schedule\n    schedule = []\n\n    # 1. Start at Presidio\n    schedule.append({\"action\": \"start\", \"location\": \"Presidio\", \"time\": format_time(arrival_time)})\n\n    # 2. Travel to Marina District\n    travel_to_jessica_time = arrival_time + timedelta(minutes=travel_time)\n    if travel_to_jessica_time < jessica_start:\n        wait_until = jessica_start\n    else:\n        wait_until = travel_to_jessica_time\n\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time,\n        \"time\": format_time(travel_to_jessica_time),\n        \"to\": \"Marina District\"\n    })\n\n    # 3. Wait if necessary\n    if wait_until > travel_to_jessica_time:\n        wait_duration = (wait_until - travel_to_jessica_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Marina District\",\n            \"time\": format_time(wait_until)\n        })\n        current_time = wait_until\n    else:\n        current_time = travel_to_jessica_time\n\n    # 4. Meeting with Jessica\n    meeting_start = current_time\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n    if meeting_end <= jessica_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Marina District\",\n            \"duration\": meeting_duration,\n            \"time\": format_time(meeting_start)\n        })\n    \n    # Output schedule as JSON\n    schedule_json = {\n        \"schedule\": schedule\n    }\n    \n    return json.dumps(schedule_json, indent=2)\n\nif __name__ == \"__main__\":\n    result = schedule_meeting()\n    print(result)\n```",
            "count": "meeting_planning_example_4",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "12:15PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "1:46PM",
                    "duration": 16,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 75,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time_nob_hill = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_nob_hill_to_castro = 17\ntravel_time_castro_to_nob_hill = 16\nwill_meet_start = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\nwill_meet_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\nminimum_meeting_duration = 75  # in minutes\n\n# Schedule calculations\nschedule = []\n\n# Start at Nob Hill\nschedule.append({\n    \"action\": \"start\", \n    \"location\": \"Nob Hill\", \n    \"time\": arrival_time_nob_hill.strftime(\"%I:%M%p\")\n})\n\n# Travel to The Castro\ntravel_to_castro_time = arrival_time_nob_hill + timedelta(minutes=travel_time_nob_hill_to_castro)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"The Castro\",\n    \"duration\": travel_time_nob_hill_to_castro,\n    \"time\": travel_to_castro_time.strftime(\"%I:%M%p\"),\n    \"to\": \"The Castro\"\n})\n\n# Wait until William is available\nwait_until_time = max(travel_to_castro_time, will_meet_start)\nif wait_until_time < will_meet_start:\n    wait_duration = (will_meet_start - travel_to_castro_time).total_seconds() // 60\n    schedule.append({\n        \"action\": \"wait\", \n        \"location\": \"The Castro\", \n        \"time\": wait_until_time.strftime(\"%I:%M%p\")\n    })\nelse:\n    wait_duration = 0\n\n# Meeting duration calculation\npossible_meeting_start = max(wait_until_time, will_meet_start)\npossible_meeting_duration = min((will_meet_end - possible_meeting_start).total_seconds() // 60, minimum_meeting_duration)\n\n# Meeting if possible\nif possible_meeting_duration >= minimum_meeting_duration:\n    meeting_end_time = possible_meeting_start + timedelta(minutes=possible_meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": int(possible_meeting_duration),\n        \"time\": possible_meeting_start.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Nob Hill after the meeting\n    travel_back_time = meeting_end_time + timedelta(minutes=travel_time_castro_to_nob_hill)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time_castro_to_nob_hill,\n        \"time\": travel_back_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n# Preparing output\noutput = {\n    \"schedule\": schedule\n}\n\n# Print JSON output\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_5",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:11AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 90,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = \"9:00AM\"\ntravel_time_wharf_to_nobhill = 11  # in minutes\ntravel_time_nobhill_to_wharf = 11  # in minutes\nkenneth_availability_start = \"2:15PM\"\nkenneth_availability_end = \"7:45PM\"\nminimum_meeting_duration = 90  # in minutes\n\n# Helper function to convert time string to datetime object\ndef convert_to_datetime(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Helper function to convert datetime object back to desired string format\ndef convert_to_time_str(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\n# Compute schedule\ndef compute_schedule():\n    arrival_dt = convert_to_datetime(arrival_time)\n    kenneth_start_dt = convert_to_datetime(kenneth_availability_start)\n    kenneth_end_dt = convert_to_datetime(kenneth_availability_end)\n\n    # Calculate the end time for the meeting\n    latest_meeting_start = kenneth_end_dt - timedelta(minutes=minimum_meeting_duration)\n\n    # Find the latest possible meeting start time\n    travel_to_nobhill = arrival_dt + timedelta(minutes=travel_time_wharf_to_nobhill)\n    \n    if travel_to_nobhill > latest_meeting_start:\n        return None  # No valid meeting time\n\n    # Schedule details\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": convert_to_time_str(arrival_dt)},\n        {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time_wharf_to_nobhill,\n         \"time\": convert_to_time_str(travel_to_nobhill), \"to\": \"Nob Hill\"},\n        {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": convert_to_time_str(travel_to_nobhill)},\n        {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": minimum_meeting_duration,\n         \"time\": convert_to_time_str(travel_to_nobhill)}\n    ]\n    \n    return {\"schedule\": schedule}\n\n# Main execution\nschedule_info = compute_schedule()\nif schedule_info:\n    print(json.dumps(schedule_info, indent=2))\nelse:\n    print(json.dumps({\"error\": \"No valid meeting schedule could be computed.\"}, indent=2))\n```",
            "count": "meeting_planning_example_6",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "3:15PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "4:48PM",
                    "duration": 18,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants\nTRAVEL_TIME_RICHMOND_TO_NORTH_BEACH = 17  # in minutes\nTRAVEL_TIME_NORTH_BEACH_TO_RICHMOND = 18  # in minutes\nMEETING_TIME_MINUTES = 75  # Minimum meeting time with John\nJOHN_START_TIME = \"3:15PM\"\nJOHN_END_TIME = \"5:15PM\"\nARRIVAL_TIME = \"9:00AM\"\n\ndef time_str_to_datetime(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef datetime_to_time_str(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Parse time inputs\n    arrival_time = time_str_to_datetime(ARRIVAL_TIME)\n    john_start_time = time_str_to_datetime(JOHN_START_TIME)\n    john_end_time = time_str_to_datetime(JOHN_END_TIME)\n\n    # Calculate possible meeting start times\n    possible_meeting_start = john_start_time - timedelta(minutes=MEETING_TIME_MINUTES)\n    latest_start_for_meeting = john_end_time - timedelta(minutes=MEETING_TIME_MINUTES)\n\n    schedule = []\n\n    # Travel to North Beach\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": datetime_to_time_str(arrival_time)})\n    \n    # We will travel to North Beach after arriving\n    travel_to_north_beach_time = arrival_time + timedelta(minutes=TRAVEL_TIME_RICHMOND_TO_NORTH_BEACH)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": TRAVEL_TIME_RICHMOND_TO_NORTH_BEACH,\n        \"time\": datetime_to_time_str(travel_to_north_beach_time),\n        \"to\": \"North Beach\"\n    })\n\n    # We can start waiting for John immediately if we arrive before him\n    waiting_time_start = max(travel_to_north_beach_time, john_start_time)\n    schedule.append({\"action\": \"wait\", \"location\": \"North Beach\", \"time\": datetime_to_time_str(waiting_time_start)})\n\n    # Schedule the meeting\n    meeting_start_time = waiting_time_start\n    if meeting_start_time < possible_meeting_start:\n        meeting_start_time = possible_meeting_start\n\n    meeting_end_time = meeting_start_time + timedelta(minutes=MEETING_TIME_MINUTES)\n    \n    if meeting_end_time > john_end_time:\n        # Cannot meet because the time exceeds John's availability\n        return json.dumps({\"schedule\": []})\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": MEETING_TIME_MINUTES,\n        \"time\": datetime_to_time_str(meeting_start_time)\n    })\n\n    # After meeting, travel back to Richmond\n    travel_back_time = meeting_end_time + timedelta(minutes=TRAVEL_TIME_NORTH_BEACH_TO_RICHMOND)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": TRAVEL_TIME_NORTH_BEACH_TO_RICHMOND,\n        \"time\": datetime_to_time_str(travel_back_time),\n        \"to\": \"Richmond District\"\n    })\n\n    # Create the final output dictionary\n    output = {\n        \"schedule\": schedule\n    }\n\n    # Print the output in JSON format\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_7",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:12AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:12AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 105,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define constants\nTRAVEL_TIME_CHINATOWN_TO_MARINA = 12  # minutes\nTRAVEL_TIME_MARINA_TO_CHINATOWN = 16   # minutes\nMEETING_DURATION_MINUTES = 105          # minutes\nSTEPHANIE_AVAILABILITY_START = \"8:00AM\"\nSTEPHANIE_AVAILABILITY_END = \"3:00PM\"\n\n# Helper function to convert time format\ndef convert_time_to_datetime(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef convert_datetime_to_time_str(dt):\n    return dt.strftime(\"%I:%M%p\")\n\n# Calculate available time window for meeting\ndef calculate_meeting_schedule():\n    # Arrival at Chinatown\n    arrival_time_chinatown = convert_time_to_datetime(\"9:00AM\")\n    stephanie_start = convert_time_to_datetime(STEPHANIE_AVAILABILITY_START)\n    stephanie_end = convert_time_to_datetime(STEPHANIE_AVAILABILITY_END)\n\n    # The time we can start the meeting after getting to Marina\n    start_rendezvous_time = arrival_time_chinatown + timedelta(minutes=TRAVEL_TIME_CHINATOWN_TO_MARINA)\n\n    # Calculate the latest possible meeting time before Stephanie leaves\n    latest_meeting_start_time = stephanie_end - timedelta(minutes=MEETING_DURATION_MINUTES)\n\n    # Check if the meeting can be scheduled\n    if start_rendezvous_time > latest_meeting_start_time:\n        return None  # Cannot schedule a meeting that meets constraints\n\n    # Calculate meeting end time\n    meeting_start_time = max(start_rendezvous_time, stephanie_start)\n    meeting_end_time = meeting_start_time + timedelta(minutes=MEETING_DURATION_MINUTES)\n\n    if meeting_end_time > stephanie_end:\n        return None  # Meeting cannot extend past Stephanie's availability\n\n    # Build the schedule\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Chinatown\", \"time\": convert_datetime_to_time_str(arrival_time_chinatown)})\n    schedule.append({\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": TRAVEL_TIME_CHINATOWN_TO_MARINA, \n                     \"time\": convert_datetime_to_time_str(start_rendezvous_time), \"to\": \"Marina District\"})\n    schedule.append({\"action\": \"wait\", \"location\": \"Marina District\", \"time\": convert_datetime_to_time_str(start_rendezvous_time)})\n    schedule.append({\"action\": \"meet\", \"location\": \"Marina District\", \"duration\": MEETING_DURATION_MINUTES, \n                     \"time\": convert_datetime_to_time_str(meeting_start_time)})\n\n    return {\"schedule\": schedule}\n\n# Generate the schedule\noptimal_schedule = calculate_meeting_schedule()\n\n# Output the result as a JSON-formatted dictionary\nif optimal_schedule:\n    print(json.dumps(optimal_schedule, indent=2))\nelse:\n    print(json.dumps({\"error\": \"Cannot schedule meeting with current constraints.\"}, indent=2))\n```",
            "count": "meeting_planning_example_8",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "12:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "1:22PM",
                    "duration": 7,
                    "to": "Union Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "12:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule():\n    # Constants\n    travel_time_to_nob_hill = 9\n    travel_time_to_union_square = 7\n\n    # Start time at Union Square\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n\n    # Mary is available at Nob Hill from 12:00PM to 4:15PM\n    mary_start = datetime.strptime(\"12:00PM\", \"%I:%M%p\")\n    mary_end = datetime.strptime(\"4:15PM\", \"%I:%M%p\")\n\n    # Minimum meeting duration\n    minimum_meeting_duration = 75\n\n    # Schedule list\n    schedule = []\n\n    # 1. Start at Union Square\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Union Square\",\n        \"time\": format_time(start_time)\n    })\n\n    # 2. Travel to Nob Hill\n    travel_to_nob_hill_time = start_time + timedelta(minutes=travel_time_to_nob_hill)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time_to_nob_hill,\n        \"time\": format_time(travel_to_nob_hill_time),\n        \"to\": \"Nob Hill\"\n    })\n\n    # 3. Wait until Mary is available\n    wait_start_time = max(travel_to_nob_hill_time, mary_start)\n    wait_duration = (mary_start - wait_start_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": format_time(wait_start_time)\n        })\n\n    # 4. Meet Mary\n    meet_start_time = max(wait_start_time, mary_start)\n    meet_duration = minimum_meeting_duration\n    meet_end_time = meet_start_time + timedelta(minutes=meet_duration)\n\n    if meet_end_time <= mary_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"duration\": meet_duration,\n            \"time\": format_time(meet_start_time)\n        })\n        \n        # 5. Travel back to Union Square\n        travel_back_time = meet_end_time + timedelta(minutes=travel_time_to_union_square)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Union Square\",\n            \"duration\": travel_time_to_union_square,\n            \"time\": format_time(travel_back_time),\n            \"to\": \"Union Square\"\n        })\n\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\nif __name__ == \"__main__\":\n    meeting_schedule = compute_schedule()\n    print(meeting_schedule)\n```",
            "count": "meeting_planning_example_9",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 15,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_to_marina = 16  # minutes\ntravel_to_park = 18    # minutes\njames_start = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\njames_end = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\nmeeting_duration = 15   # minutes\n\n# Function to compute the optimal meeting schedule\ndef compute_schedule():\n    schedule = []\n    \n    # Start at Golden Gate Park\n    park_arrival_time = arrival_time\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": park_arrival_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to Marina District\n    travel_time_to_marina = travel_to_marina\n    travel_end_time = park_arrival_time + timedelta(minutes=travel_time_to_marina)\n\n    # Check possible meeting time with James\n    if travel_end_time >= james_start and travel_end_time + timedelta(minutes=meeting_duration) <= james_end:\n        # We can meet James\n        meeting_start_time = travel_end_time\n        meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": travel_time_to_marina,\n            \"time\": travel_end_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Marina District\"\n        })\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Marina District\",\n            \"duration\": meeting_duration,\n            \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Return the schedule in JSON format\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\n# Execute the function and print the result\nif __name__ == \"__main__\":\n    schedule_output = compute_schedule()\n    print(schedule_output)\n```",
            "count": "meeting_planning_example_10",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:25AM",
                    "duration": 25,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "3:42PM",
                    "duration": 27,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time_nob_hill = \"9:00AM\"\ncarol_start_time = \"2:00PM\"\ncarol_end_time = \"8:30PM\"\nmin_meeting_time = 75  # minutes\ntravel_time_nob_to_sunset = 25  # minutes\ntravel_time_sunset_to_nob = 27  # minutes\n\n# Convert time strings to datetime objects for easier calculations\narrival_time = datetime.strptime(arrival_time_nob_hill, \"%I:%M%p\")\ncarol_start = datetime.strptime(carol_start_time, \"%I:%M%p\")\ncarol_end = datetime.strptime(carol_end_time, \"%I:%M%p\")\n\n# Calculate potential meeting schedule\nschedule = []\ncurrent_time = arrival_time\n\n# Start at Nob Hill\nschedule.append({\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n# First travel to Sunset District\ncurrent_time += timedelta(minutes=travel_time_nob_to_sunset)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Sunset District\",\n    \"duration\": travel_time_nob_to_sunset,\n    \"time\": current_time.strftime(\"%I:%M%p\"),\n    \"to\": \"Sunset District\"\n})\n\n# Wait for Carol to arrive if necessary\nif current_time < carol_start:\n    wait_duration = (carol_start - current_time).seconds // 60\n    current_time += timedelta(minutes=wait_duration)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Sunset District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n# Meet Carol for the required minimum time\nmeeting_end_time = current_time + timedelta(minutes=min_meeting_time)\n\n# Check if the meeting can fit in the available window\nif meeting_end_time <= carol_end:\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": min_meeting_time,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n    # After meeting, travel back to Nob Hill\n    current_time += timedelta(minutes=min_meeting_time)\n    current_time += timedelta(minutes=travel_time_sunset_to_nob)\n\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time_sunset_to_nob,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n# Creating the final output dictionary\noutput_schedule = {\n    \"schedule\": schedule\n}\n\n# Printing the output as a JSON-formatted string\nprint(json.dumps(output_schedule, indent=2))\n```",
            "count": "meeting_planning_example_11",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:30PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants for travel time\nTRAVEL_TIME = {\n    (\"North Beach\", \"Alamo Square\"): 16,\n    (\"Alamo Square\", \"North Beach\"): 15\n}\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nbarbara_start_time = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\nbarbara_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\nminimum_meeting_duration = 90  # in minutes\n\n# Schedule initialization\nschedule = []\n\n# Start at North Beach\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"North Beach\",\n    \"time\": arrival_time.strftime(\"%I:%M%p\")\n})\n\n# Calculate the latest time to leave North Beach to meet Barbara\nlatest_departure_time = barbara_start_time - timedelta(minutes=minimum_meeting_duration)\n\n# Try to find the optimal schedule\n# Starting by attempting to meet Barbara as late as possible\ncurrent_time = arrival_time\n\n# Check if we can go to Alamo Square directly and meet Barbara\nif current_time + timedelta(minutes=TRAVEL_TIME[(\"North Beach\", \"Alamo Square\")]) <= latest_departure_time:\n    # Travel to Alamo Square\n    travel_time = TRAVEL_TIME[(\"North Beach\", \"Alamo Square\")]\n    current_time += timedelta(minutes=travel_time)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n    \n    # Now wait for Barbara\n    wait_time = (barbara_start_time - current_time).total_seconds() / 60\n    if wait_time > 0:\n        current_time += timedelta(minutes=wait_time)\n        \n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": current_time.strftime(\"%I:%M%p\"),\n        })\n    \n        # Meet Barbara\n        current_time += timedelta(minutes=minimum_meeting_duration)\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Alamo Square\",\n            \"duration\": minimum_meeting_duration,\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n\n# Output the result as a JSON-formatted dictionary\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_12",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:18AM",
                    "duration": 18,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "8:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "8:17PM",
                    "duration": 17,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "6:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants\nTRAVEL_TIME_PRESIDIO_TO_NORTH_BEACH = 18\nTRAVEL_TIME_NORTH_BEACH_TO_PRESIDIO = 17\n\n# Constraints\nARRIVAL_TIME = \"9:00AM\"\nBETTY_START = \"6:45PM\"\nBETTY_END = \"10:00PM\"\nMIN_MEETING_DURATION = 75  # in minutes\n\n# Helper function to convert time string to datetime object\ndef time_str_to_dt(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\n# Helper function to convert datetime object to required time string format\ndef dt_to_time_str(dt):\n    return dt.strftime(\"%I:%M%p\")\n\n# Schedule calculation\ndef calculate_schedule():\n    arrival_dt = time_str_to_dt(ARRIVAL_TIME)\n    betty_start_dt = time_str_to_dt(BETTY_START)\n    betty_end_dt = time_str_to_dt(BETTY_END)\n    \n    # Calculate the potential meeting time and ensure we meet Betty for at least 75 minutes\n    latest_meeting_start = betty_end_dt - timedelta(minutes=MIN_MEETING_DURATION)\n    \n    # Start forming the schedule\n    schedule = []\n    \n    # Starting at Presidio\n    current_time = arrival_dt\n    schedule.append({\"action\": \"start\", \"location\": \"Presidio\", \"time\": dt_to_time_str(current_time)})\n    \n    # Travel to North Beach\n    travel_time_to_north_beach = TRAVEL_TIME_PRESIDIO_TO_NORTH_BEACH\n    current_time += timedelta(minutes=travel_time_to_north_beach)\n    schedule.append({\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time_to_north_beach,\n                     \"time\": dt_to_time_str(current_time), \"to\": \"North Beach\"})\n    \n    # Wait until 6:45 PM to meet Betty\n    if current_time < betty_start_dt:\n        wait_time = (betty_start_dt - current_time).total_seconds() / 60\n        current_time += timedelta(minutes=wait_time)\n        schedule.append({\"action\": \"wait\", \"location\": \"North Beach\", \"time\": dt_to_time_str(current_time)})\n    \n    # Meeting Betty\n    meet_time = MIN_MEETING_DURATION\n    current_time += timedelta(minutes=meet_time)\n    schedule.append({\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meet_time,\n                     \"time\": dt_to_time_str(current_time)})\n\n    # Return to Presidio\n    travel_time_back = TRAVEL_TIME_NORTH_BEACH_TO_PRESIDIO\n    current_time += timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time_back,\n                     \"time\": dt_to_time_str(current_time), \"to\": \"Presidio\"})\n    \n    return {\"schedule\": schedule}\n\n# Execute the function and output the result in JSON format\noptimal_schedule = calculate_schedule()\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_13",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "8:00PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "10:12PM",
                    "duration": 12,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 120,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip('0')\n\ndef calculate_schedule():\n    # Constants\n    TRAVEL_NOB_HILL_TO_MARINA = 11  # minutes\n    TRAVEL_MARINA_TO_NOB_HILL = 12   # minutes\n    ARRIVAL_TIME = datetime.strptime(\"09:00AM\", \"%I:%M%p\")\n    MARY_START_TIME = datetime.strptime(\"08:00PM\", \"%I:%M%p\")\n    MARY_END_TIME = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    MEETING_DURATION = 120  # minutes\n    \n    # Meeting time constraints\n    possible_meeting_start_time = MARY_START_TIME - timedelta(minutes=MEETING_DURATION)\n    possible_meeting_end_time = MARY_END_TIME\n\n    # Start the schedule at Nob Hill\n    time = ARRIVAL_TIME\n    schedule = []\n    \n    # Step 1: Start at Nob Hill\n    schedule.append({\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": format_time(time)})\n    \n    # Step 2: Travel to Marina District\n    time += timedelta(minutes=TRAVEL_NOB_HILL_TO_MARINA)\n    schedule.append({\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": TRAVEL_NOB_HILL_TO_MARINA, \"time\": format_time(time), \"to\": \"Marina District\"})\n    \n    # Step 3: Wait until Mary is available\n    if time < MARY_START_TIME:\n        wait_time = (MARY_START_TIME - time).total_seconds() / 60\n        time += timedelta(minutes=wait_time)\n        schedule.append({\"action\": \"wait\", \"location\": \"Marina District\", \"time\": format_time(time)})\n    \n    # Step 4: Meet Mary\n    meeting_start_time = time\n    meeting_end_time = meeting_start_time + timedelta(minutes=MEETING_DURATION)\n    \n    # Ensure meeting ends by 10:00PM\n    if meeting_end_time > MARY_END_TIME:\n        return {\"schedule\": []}  # Not possible to meet the required duration.\n\n    schedule.append({\"action\": \"meet\", \"location\": \"Marina District\", \"duration\": MEETING_DURATION, \"time\": format_time(meeting_start_time)})\n\n    # Step 5: Travel back to Nob Hill after meeting\n    time += timedelta(minutes=MEETING_DURATION)\n    time += timedelta(minutes=TRAVEL_MARINA_TO_NOB_HILL)\n    schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": TRAVEL_MARINA_TO_NOB_HILL, \"time\": format_time(time), \"to\": \"Nob Hill\"})\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    meeting_schedule = calculate_schedule()\n    print(json.dumps(meeting_schedule, indent=2))\n```",
            "count": "meeting_planning_example_14",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 21,
                    "time": "9:21AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "1:00PM"
                }
            ],
            "type_error": "NameError",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_to_golden_gate_park = 21\ntravel_back_to_russian_hill = 19\njohn_start_time = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\njohn_end_time = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\nminimum_meeting_duration = 90  # in minutes\n\n# Function to create a meeting schedule\ndef create_meeting_schedule():\n    # Calculate when we can leave Russian Hill to meet John\n    start_meeting_time = john_start_time - timedelta(minutes=travel_back_to_russian_hill)\n    end_meeting_time = john_end_time - timedelta(minutes=travel_back_to_golden_gate_park)\n    \n    # Calculate the latest time we can leave to meet the minimum duration\n    latest_start_meeting = end_meeting_time - timedelta(minutes=minimum_meeting_duration)\n\n    # Scheduling logic\n    if start_meeting_time > latest_start_meeting:\n        return {\"error\": \"Cannot meet John for the minimum required duration\"}\n    \n    # Calculate the optimal schedule\n    leave_time = max(start_meeting_time, arrival_time + timedelta(minutes=travel_to_golden_gate_park))\n    \n    if leave_time < john_start_time:\n        wait_time = (john_start_time - leave_time).seconds // 60  # wait in minutes\n        meet_start_time = john_start_time\n    else:\n        wait_time = 0\n        meet_start_time = leave_time\n\n    meet_end_time = meet_start_time + timedelta(minutes=minimum_meeting_duration)\n\n    # Prepare the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": arrival_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_to_golden_gate_park, \"time\": leave_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"},\n        {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": (leave_time + timedelta(minutes=wait_time)).strftime(\"%I:%M%p\") if wait_time > 0 else meet_start_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": minimum_meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")}\n    ]\n\n    return {\"schedule\": schedule}\n\n# Generate the meeting schedule\nschedule_output = create_meeting_schedule()\n\n# Output as JSON\nprint(json.dumps(schedule_output, indent=2))\n```",
            "count": "meeting_planning_example_15",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "3:15PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "5:00PM",
                    "duration": 9,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input Parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_chinatown_to_russian_hill = 7  # minutes\ntravel_time_russian_hill_to_chinatown = 9  # minutes\nronald_start_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\nronald_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\nminimum_meeting_duration = 105  # minutes\n\n# Helper function to format time\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\")\n\n# Calculate the latest time to start traveling to meet Ronald\nlatest_start_time_for_meeting = ronald_end_time - timedelta(minutes=minimum_meeting_duration)\n\n# Schedule List\nschedule = []\n\n# Start at Chinatown\nschedule.append({\"action\": \"start\", \"location\": \"Chinatown\", \"time\": format_time(arrival_time)})\n\n# Calculate travel to Russian Hill\ntravel_to_russian_hill_time = arrival_time + timedelta(minutes=travel_time_chinatown_to_russian_hill)\nschedule.append({\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_time_chinatown_to_russian_hill,\n                 \"time\": format_time(travel_to_russian_hill_time), \"to\": \"Russian Hill\"})\n\n# Iterate from Ronald's available time frames to maximize meeting time\nmeeting_time = None\nif travel_to_russian_hill_time < ronald_start_time:\n    # Wait if we arrive before Ronald's start time\n    wait_time = ronald_start_time - travel_to_russian_hill_time\n    travel_to_russian_hill_time += wait_time\n    schedule.append({\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": format_time(travel_to_russian_hill_time)})\n\n# Set meeting time duration\nmeeting_start_time = travel_to_russian_hill_time\nif meeting_start_time <= latest_start_time_for_meeting:\n    meeting_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": minimum_meeting_duration,\n                     \"time\": format_time(meeting_start_time)})\n\n    # Travel back to Chinatown after meeting\n    travel_back_time = meeting_time + timedelta(minutes=travel_time_russian_hill_to_chinatown)\n    schedule.append({\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time_russian_hill_to_chinatown,\n                     \"time\": format_time(meeting_time), \"to\": \"Chinatown\"})\n\n# Output the schedule in JSON format\noutput_schedule = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output_schedule, indent=2))\n```",
            "count": "meeting_planning_example_16",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "12:59PM",
                    "duration": 16,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "1:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Alamo_Square_to_Sunset\": 16,\n    \"Sunset_to_Alamo_Square\": 17\n}\n\n# Meeting constraints\narrival_time_str = '9:00AM'\nmatthew_start_time_str = '1:30PM'\nmatthew_end_time_str = '2:30PM'\nminimum_meeting_duration = 15  # in minutes\n\n# Convert time strings to datetime objects\narrival_time = datetime.strptime(arrival_time_str, '%I:%M%p')\nmatthew_start_time = datetime.strptime(matthew_start_time_str, '%I:%M%p')\nmatthew_end_time = datetime.strptime(matthew_end_time_str, '%I:%M%p')\n\n# Initialize the schedule\nschedule = []\n\n# Start the day at Alamo Square\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Alamo Square\",\n    \"time\": arrival_time.strftime('%I:%M%p')\n})\n\n# Calculate the latest time we can leave Alamo Square to meet Matthew\nlatest_departure_time = matthew_start_time - timedelta(minutes=minimum_meeting_duration)\n\n# If we leave Alamo Square at this latest time, what time do we get to Sunset?\ntime_to_travel = travel_times[\"Alamo_Square_to_Sunset\"]\ndeparture_time = latest_departure_time - timedelta(minutes=time_to_travel)\n\n# Check if departure time is after arrival time at Alamo Square\nif departure_time >= arrival_time:\n    # Provide an initial travel detail to Sunset\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_times[\"Alamo_Square_to_Sunset\"],\n        \"time\": departure_time.strftime('%I:%M%p'),\n        \"to\": \"Sunset District\"\n    })\n    \n    # Arrive at Sunset District\n    sunset_arrival_time = departure_time + timedelta(minutes=time_to_travel)\n    \n    # Planning to meet Matthew\n    meeting_start_time = sunset_arrival_time\n    \n    if meeting_start_time < matthew_start_time:\n        # Need to wait until Matthew arrives\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Sunset District\",\n            \"time\": matthew_start_time.strftime('%I:%M%p')\n        })\n        # Meeting with Matthew\n        meeting_start_time = matthew_start_time\n    \n    # Meeting duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": minimum_meeting_duration,\n        \"time\": meeting_start_time.strftime('%I:%M%p')\n    })\n\n# Convert schedule to JSON\noutput_json = json.dumps({\"schedule\": schedule}, indent=2)\n\n# Print the result\nprint(output_json)\n```",
            "count": "meeting_planning_example_17",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:30PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:54PM",
                    "duration": 9,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "8:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_to_richmond = 11  # minutes\ntravel_time_to_marina = 9      # minutes\nmeeting_start_time = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\nmeeting_end_time = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\nrequired_meeting_duration = 75  # minutes\n\n# Calculate the latest possible meeting start time\nlatest_meeting_start_time = meeting_end_time - timedelta(minutes=required_meeting_duration)\n\n# Compute possible schedule\nschedule = []\ncurrent_time = arrival_time\n\n# 1. Start at Marina District\nschedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n# 2. Travel to Richmond District\ncurrent_time += timedelta(minutes=travel_time_to_richmond)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Richmond District\",\n    \"duration\": travel_time_to_richmond,\n    \"time\": current_time.strftime(\"%I:%M%p\"),\n    \"to\": \"Richmond District\"\n})\n\n# 3. Wait until Betty is available for meeting\nif current_time < meeting_start_time:\n    wait_time = (meeting_start_time - current_time).total_seconds() // 60\n    current_time = meeting_start_time\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Richmond District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n# 4. Meet Betty\nif current_time <= latest_meeting_start_time:\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": required_meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n    # Update current time after meeting\n    current_time += timedelta(minutes=required_meeting_duration)\n\n# 5. Return to Marina District (if required)\nif current_time < meeting_end_time:\n    current_time += timedelta(minutes=travel_time_to_marina)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time_to_marina,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n\n# Output the schedule as a JSON-formatted dictionary\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_18",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00 AM\", \"%I:%M %p\")\ntravel_time_to_pacific_heights = 16  # minutes\ntravel_time_to_golden_gate_park = 15  # minutes\njohn_start_time = datetime.strptime(\"7:45 PM\", \"%I:%M %p\")\njohn_end_time = datetime.strptime(\"8:45 PM\", \"%I:%M %p\")\nmeeting_duration = 45  # minutes\n\n# Calculate the optimal meeting schedule\nschedule = []\n\n# Start at Golden Gate Park\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Golden Gate Park\",\n    \"time\": arrival_time.strftime(\"%I:%M%p\")\n})\n\n# Travel to Pacific Heights\narrival_at_pacific_heights = arrival_time + timedelta(minutes=travel_time_to_pacific_heights)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Pacific Heights\",\n    \"duration\": travel_time_to_pacific_heights,\n    \"time\": arrival_at_pacific_heights.strftime(\"%I:%M%p\"),\n    \"to\": \"Pacific Heights\"\n})\n\n# Determine the latest meeting start time with John\nlatest_meeting_start_time = john_end_time - timedelta(minutes=meeting_duration)\n\n# Check if we can meet John\nif arrival_at_pacific_heights <= john_end_time - timedelta(minutes=meeting_duration):\n    # Meeting is possible\n    meeting_start_time = max(arrival_at_pacific_heights, john_start_time)\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Wait until the meeting starts if necessary\n    if meeting_start_time > arrival_at_pacific_heights:\n        wait_time_duration = int((meeting_start_time - arrival_at_pacific_heights).total_seconds() // 60)\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": arrival_at_pacific_heights.strftime(\"%I:%M%p\")\n        })\n        \n        # Update actual arrival time after waiting\n        arrival_at_pacific_heights += timedelta(minutes=wait_time_duration)\n\n    # Meeting with John\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n    })\n\n# Output the schedule as a JSON-formatted dictionary\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_19",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "12:51PM",
                    "duration": 6,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Function to format time\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\n# Function to add minutes to a given time\ndef add_minutes(start_time, minutes):\n    return start_time + timedelta(minutes=minutes)\n\n# Initial parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_chinatown_to_nobhill = 8\ntravel_time_nobhill_to_chinatown = 6\njoseph_start_time = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\njoseph_end_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\nminimum_meet_duration = 75  # in minutes\n\n# Compute optimal schedule\nschedule = []\n\n# Start at Chinatown\ncurrent_time = arrival_time\nschedule.append({\"action\": \"start\", \"location\": \"Chinatown\", \"time\": format_time(current_time)})\n\n# Travel to Nob Hill\ncurrent_time = add_minutes(current_time, travel_time_chinatown_to_nobhill)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Nob Hill\",\n    \"duration\": travel_time_chinatown_to_nobhill,\n    \"time\": format_time(current_time),\n    \"to\": \"Nob Hill\"\n})\n\n# Wait until Joseph is available\nif current_time < joseph_start_time:\n    wait_time = (joseph_start_time - current_time).seconds // 60\n    current_time = add_minutes(current_time, wait_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Nob Hill\",\n        \"time\": format_time(current_time)\n    })\n\n# Meeting Joseph\nmeet_start_time = current_time\nmeet_end_time = add_minutes(meet_start_time, minimum_meet_duration)\n\nif meet_end_time <= joseph_end_time:\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": minimum_meet_duration,\n        \"time\": format_time(meet_start_time)\n    })\n    \n    # Travel back to Chinatown\n    current_time = add_minutes(meet_end_time, travel_time_nobhill_to_chinatown)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time_nobhill_to_chinatown,\n        \"time\": format_time(current_time),\n        \"to\": \"Chinatown\"\n    })\n\n# Output the result as JSON\nresult = {\"schedule\": schedule}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_20",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule():\n    # Constants\n    travel_time_mission_to_haight = 12  # minutes\n    travel_time_haight_to_mission = 11   # minutes\n    start_time_mission = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    margaret_start_time = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\n    margaret_end_time = datetime.strptime(\"3:45PM\", \"%I:%M%p\")\n    min_meeting_duration = 30  # minutes\n\n    # Calculate the latest possible time we can start traveling to meet Margaret\n    latest_meeting_start_time = margaret_end_time - timedelta(minutes=min_meeting_duration)\n    if latest_meeting_start_time < start_time_mission + timedelta(minutes=travel_time_mission_to_haight):\n        return None  # Not enough time to meet\n\n    # Possible meeting schedule\n    schedule = []\n\n    # Step 1: Start at Mission District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Mission District\",\n        \"time\": start_time_mission.strftime(\"%I:%M%p\")\n    })\n\n    # Step 2: Travel to Haight-Ashbury\n    travel_to_haight_time = start_time_mission + timedelta(minutes=travel_time_mission_to_haight)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time_mission_to_haight,\n        \"time\": travel_to_haight_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # Step 3: Wait until Margaret is available\n    wait_until_time = max(travel_to_haight_time, margaret_start_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Haight-Ashbury\",\n        \"time\": wait_until_time.strftime(\"%I:%M%p\")\n    })\n\n    # Step 4: Meet Margaret\n    meeting_start_time = wait_until_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": min_meeting_duration,\n        \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # Output the result as JSON\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\n# Running the function and printing the result\nif __name__ == \"__main__\":\n    result = compute_meeting_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_21",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "11:15AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "1:00PM",
                    "duration": 24,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 105,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants\nTRAVEL_TIME_PRESIDIO_TO_UNION_SQUARE = 22\nTRAVEL_TIME_UNION_SQUARE_TO_PRESIDIO = 24\nANDREW_START_TIME = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\nANDREW_END_TIME = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\nMEETING_DURATION = 105  # in minutes\n\n# Function to compute the optimal meeting schedule\ndef compute_schedule():\n    schedule = []\n    \n    # Start at Presidio\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    schedule.append({\"action\": \"start\", \"location\": \"Presidio\", \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to Union Square\n    travel_time = TRAVEL_TIME_PRESIDIO_TO_UNION_SQUARE\n    travel_start_time = start_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\", \n        \"location\": \"Union Square\", \n        \"duration\": travel_time, \n        \"time\": travel_start_time.strftime(\"%I:%M%p\"), \n        \"to\": \"Union Square\"\n    })\n    \n    # Wait until Andrew is available\n    wait_time = (ANDREW_START_TIME - travel_start_time).total_seconds() // 60\n    if wait_time > 0:\n        schedule.append({\n            \"action\": \"wait\", \n            \"location\": \"Union Square\", \n            \"time\": travel_start_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Meeting time\n    meeting_start_time = max(ANDREW_START_TIME, travel_start_time + timedelta(minutes=wait_time))\n    if meeting_start_time + timedelta(minutes=MEETING_DURATION) <= ANDREW_END_TIME:\n        schedule.append({\n            \"action\": \"meet\", \n            \"location\": \"Union Square\", \n            \"duration\": MEETING_DURATION, \n            \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n        })\n        \n        # Travel back to Presidio\n        return_travel_time = TRAVEL_TIME_UNION_SQUARE_TO_PRESIDIO\n        return_travel_start_time = meeting_start_time + timedelta(minutes=MEETING_DURATION)\n        schedule.append({\n            \"action\": \"travel\", \n            \"location\": \"Presidio\", \n            \"duration\": return_travel_time, \n            \"time\": return_travel_start_time.strftime(\"%I:%M%p\"), \n            \"to\": \"Presidio\"\n        })\n\n    return {\"schedule\": schedule}\n\n# Main execution\nif __name__ == \"__main__\":\n    optimal_schedule = compute_schedule()\n    print(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_22",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "5:30PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "7:08PM",
                    "duration": 23,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 75,
                    "time": "5:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\nstart_time_bayview = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_bayview_to_russian_hill = 23  # minutes\ntravel_time_russian_hill_to_bayview = 23  # minutes\njohn_start_time = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\njohn_end_time = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\nminimum_meet_duration = 75  # minutes\n\n# Calculate the possible schedule\ndef calculate_schedule():\n    schedule = []\n    current_time = start_time_bayview\n\n    # Travel to Russian Hill\n    travel_to_russian_hill_time = current_time + timedelta(minutes=travel_time_bayview_to_russian_hill)\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Bayview\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time_bayview_to_russian_hill,\n        \"time\": travel_to_russian_hill_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n    \n    # Check if can wait at Russian Hill until John arrives\n    wait_time = (john_start_time - travel_to_russian_hill_time).total_seconds() / 60\n    if wait_time > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": travel_to_russian_hill_time.strftime(\"%I:%M%p\")\n        })\n        \n        # Time when John arrives\n        current_time = john_start_time\n        \n        # Meeting duration calculation\n        meeting_end_time = current_time + timedelta(minutes=minimum_meet_duration)\n        \n        # Check if meeting can be finished before John leaves\n        if meeting_end_time <= john_end_time:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Russian Hill\",\n                \"duration\": minimum_meet_duration,\n                \"time\": current_time.strftime(\"%I:%M%p\")\n            })\n        \n            # After meeting, travel back to Bayview\n            travel_back_time = meeting_end_time + timedelta(minutes=travel_time_russian_hill_to_bayview)\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": \"Bayview\",\n                \"duration\": travel_time_russian_hill_to_bayview,\n                \"time\": travel_back_time.strftime(\"%I:%M%p\"),\n                \"to\": \"Bayview\"\n            })\n            current_time = travel_back_time\n    \n    return {\"schedule\": schedule}\n\n# Get the computed schedule\nresult = calculate_schedule()\n\n# Print the result as JSON\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_23",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:00AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants\nTRAVEL_TIME_NOB_HILL_TO_PRESIDIO = 17\nTRAVEL_TIME_PRESIDIO_TO_NOB_HILL = 18\n\n# Meeting Constraints\narrival_time = datetime.strptime(\"9:00AM\", '%I:%M%p')\nmatthew_start_time = datetime.strptime(\"11:00AM\", '%I:%M%p')\nmatthew_end_time = datetime.strptime(\"3:15PM\", '%I:%M%p')\nmeeting_duration = 30  # in minutes\n\n# Function to create the schedule\ndef compute_schedule():\n    schedule = []\n    \n    # Start at Nob Hill\n    current_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": current_time.strftime('%I:%M%p')})\n    \n    # Travel to Presidio\n    current_time += timedelta(minutes=TRAVEL_TIME_NOB_HILL_TO_PRESIDIO)\n    schedule.append({\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": TRAVEL_TIME_NOB_HILL_TO_PRESIDIO, \n                     \"time\": current_time.strftime('%I:%M%p'), \"to\": \"Presidio\"})\n    \n    # Wait until Matthew is available (if we arrive early)\n    if current_time < matthew_start_time:\n        wait_time = (matthew_start_time - current_time).total_seconds() / 60\n        current_time = matthew_start_time\n        schedule.append({\"action\": \"wait\", \"location\": \"Presidio\", \"time\": current_time.strftime('%I:%M%p')})\n    \n    # Schedule the meeting\n    meeting_start_time = current_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n    # Ensure we can finish meeting before Matthew leaves\n    if meeting_end_time <= matthew_end_time:\n        schedule.append({\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration, \n                         \"time\": meeting_start_time.strftime('%I:%M%p')})\n        \n        # Travel back to Nob Hill\n        current_time = meeting_end_time\n        schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": TRAVEL_TIME_PRESIDIO_TO_NOB_HILL, \n                         \"time\": current_time.strftime('%I:%M%p'), \"to\": \"Nob Hill\"})\n    else:\n        # If there's no valid meeting time\n        schedule.append({\"action\": \"error\", \"message\": \"Cannot schedule a meeting with Matthew.\"})\n\n    return {\"schedule\": schedule}\n\n# Compute and print the JSON schedule\nif __name__ == \"__main__\":\n    optimal_schedule = compute_schedule()\n    print(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_24",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "5:45PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 105,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\ntravel_time = 23  # travel time in minutes from Golden Gate Park to Chinatown\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ndavid_start_time = datetime.strptime(\"4:00PM\", \"%I:%M%p\")\ndavid_end_time = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\nminimum_meeting_time = 105  # minimum meeting time with David in minutes\n\n# Calculate the time when you can leave Golden Gate Park to meet David\nlatest_departure_time = david_start_time - timedelta(minutes=travel_time)\n# Calculate the earliest you need to arrive to meet David\nearliest_arrival_time = david_end_time - timedelta(minutes=minimum_meeting_time)\n\n# Initialize the schedule\nschedule = []\n\n# Start at Golden Gate Park\nschedule.append({\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n# Travel preparations\ncurrent_time = arrival_time\n\n# Plan to meet David\nif current_time < latest_departure_time:\n    # You can meet other friends before David\n    # Need to leave from Golden Gate Park to Chinatown\n    travel_to_chinatown_time = current_time + timedelta(minutes=travel_time)\n    \n    # Create an action to travel to Chinatown\n    schedule.append({\n        \"action\": \"travel\", \n        \"location\": \"Chinatown\", \n        \"duration\": travel_time, \n        \"time\": current_time.strftime(\"%I:%M%p\"), \n        \"to\": \"Chinatown\"\n    })\n    \n    current_time = travel_to_chinatown_time\n    \n    # Wait until David is available at Chinatown\n    if current_time < david_start_time:\n        wait_duration = (david_start_time - current_time).seconds // 60\n        current_time += timedelta(minutes=wait_duration)\n        \n        # Create an action to wait\n        schedule.append({\n            \"action\": \"wait\", \n            \"location\": \"Chinatown\", \n            \"time\": (travel_to_chinatown_time.strftime(\"%I:%M%p\"))\n        })\n        \n        # After waiting, it's time to meet David\n        meet_duration = minimum_meeting_time\n        meet_end_time = current_time + timedelta(minutes=meet_duration)\n\n        # Ensure we don't exceed David's available time\n        if meet_end_time <= david_end_time:\n            current_time += timedelta(minutes=meet_duration)\n            schedule.append({\n                \"action\": \"meet\", \n                \"location\": \"Chinatown\", \n                \"duration\": meet_duration, \n                \"time\": current_time.strftime(\"%I:%M%p\")\n            })\n\n# Output the schedule in JSON format\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_25",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:15PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "3:07PM",
                    "duration": 7,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 105,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = \"9:00AM\"\ntravel_time_richmond_presidio = 7\ntravel_time_presidio_richmond = 7\nsarah_start_time = \"1:15PM\"\nsarah_end_time = \"3:15PM\"\nminimum_meeting_time = 105  # in minutes\n\n# Calculate arrival datetime\narrival_dt = datetime.strptime(arrival_time, \"%I:%M%p\")\n\n# Calculate Sarah's available time\nsarah_start_dt = datetime.strptime(sarah_start_time, \"%I:%M%p\")\nsarah_end_dt = datetime.strptime(sarah_end_time, \"%I:%M%p\")\n\n# Scheduling logic\ndef compute_schedule():\n    schedule = []\n    current_time = arrival_dt\n\n    # Travel to Presidio\n    travel_to_presidio = travel_time_richmond_presidio\n    travel_arrival_time = current_time + timedelta(minutes=travel_to_presidio)\n    travel_arrival_str = travel_arrival_time.strftime(\"%I:%M%p\")\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Richmond District\",\n        \"time\": arrival_time\n    })\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_to_presidio,\n        \"time\": travel_arrival_str,\n        \"to\": \"Presidio\"\n    })\n\n    # Update current time to the time of arrival at Presidio\n    current_time = travel_arrival_time\n\n    # Wait until Sarah arrives (if necessary)\n    if current_time < sarah_start_dt:\n        wait_duration = (sarah_start_dt - current_time).total_seconds() // 60\n        wait_time_str = sarah_start_dt.strftime(\"%I:%M%p\")\n\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": wait_time_str\n        })\n\n        # Update current time to Sarah's arrival\n        current_time = sarah_start_dt\n\n    # Calculate meeting duration\n    available_meeting_time = (sarah_end_dt - current_time).total_seconds() // 60\n    \n    if available_meeting_time >= minimum_meeting_time:\n        meeting_duration = minimum_meeting_time\n        end_meeting_time = current_time + timedelta(minutes=meeting_duration)\n        end_meeting_str = end_meeting_time.strftime(\"%I:%M%p\")\n\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"duration\": meeting_duration,\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n\n        # Travel back to Richmond\n        travel_back_duration = travel_time_presidio_richmond\n        back_travel_str = end_meeting_time + timedelta(minutes=travel_back_duration)\n\n        # Append the return travel to the schedule\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_back_duration,\n            \"time\": back_travel_str.strftime(\"%I:%M%p\"),\n            \"to\": \"Richmond District\"\n        })\n\n    return {\n        \"schedule\": schedule\n    }\n\n# Computed schedule\nresult = compute_schedule()\n\n# Output JSON formatted result\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_26",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:00PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "7:21PM",
                    "duration": 6,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 15,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nmargaret_start = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\nmargaret_end = margaret_start + timedelta(minutes=45)\nmeeting_duration = 15  # minimum meeting duration with Margaret in minutes\n\n# Travel times (in minutes)\ntravel_marina_to_pacific = 7\ntravel_pacific_to_marina = 6\n\n# Function to compute the schedule\ndef compute_schedule():\n    schedule = []\n    \n    # Start at Marina District\n    current_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to Pacific Heights\n    current_time += timedelta(minutes=travel_marina_to_pacific)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_marina_to_pacific,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n    \n    # Wait until Margaret is available\n    if current_time < margaret_start:\n        wait_time = (margaret_start - current_time).total_seconds() / 60  # wait until 7:00PM\n        current_time += timedelta(minutes=wait_time)\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet Margaret for the required duration\n    meet_start_time = current_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    \n    if meet_end_time <= margaret_end:\n        current_time += timedelta(minutes=meeting_duration)\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": meeting_duration,\n            \"time\": meet_start_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Travel back to Marina District\n    current_time += timedelta(minutes=travel_pacific_to_marina)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_pacific_to_marina,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n    \n    return {\"schedule\": schedule}\n\n# Generate the schedule\noptimal_schedule = compute_schedule()\n\n# Print the result in JSON format\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_27",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "5:53PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "5:53PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "7:08PM",
                    "duration": 7,
                    "to": "Union Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times in minutes\ntravel_times = {\n    \"Union Square to Chinatown\": 7,\n    \"Chinatown to Union Square\": 7\n}\n\n# Meeting constraints\narrival_time = \"9:00AM\"\njoshua_start_time = \"6:00PM\"\njoshua_end_time = \"9:30PM\"\nminimum_meeting_time = 75  # minutes\n\n# Convert time strings to datetime objects\narrival_dt = datetime.strptime(arrival_time, \"%I:%M%p\")\njoshua_start_dt = datetime.strptime(joshua_start_time, \"%I:%M%p\")\njoshua_end_dt = datetime.strptime(joshua_end_time, \"%I:%M%p\")\n\n# Calculate when we can leave Union Square to meet Joshua\nlatest_leave_time = joshua_start_dt - timedelta(minutes=travel_times[\"Union Square to Chinatown\"])\n# Ensure we have enough time for the meeting\nlatest_meeting_end_time = joshua_end_dt - timedelta(minutes=travel_times[\"Chinatown to Union Square\"] + minimum_meeting_time)\n\n# Initialize schedule\nschedule = []\n\n# Start at Union Square\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Union Square\",\n    \"time\": arrival_time\n})\n\n# Travel to Chinatown\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Chinatown\",\n    \"duration\": travel_times[\"Union Square to Chinatown\"],\n    \"time\": (arrival_dt + timedelta(minutes=0)).strftime(\"%I:%M%p\"),\n    \"to\": \"Chinatown\"\n})\n\n# Meeting time calculations\nmeeting_start_time = joshua_start_dt - timedelta(minutes=minimum_meeting_time)\n\n# Check if we can meet Joshua\nif meeting_start_time < latest_leave_time:\n    meeting_start_time = latest_leave_time\n\n# Wait until Joshua is available\nif meeting_start_time > arrival_dt:\n    wait_duration = (meeting_start_time - arrival_dt).total_seconds() / 60\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Chinatown\",\n        \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n    })\n\n# Schedule the meeting\nmeeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_time)\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": \"Chinatown\",\n    \"duration\": minimum_meeting_time,\n    \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n})\n\n# Travel back to Union Square\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Union Square\",\n    \"duration\": travel_times[\"Chinatown to Union Square\"],\n    \"time\": meeting_end_time.strftime(\"%I:%M%p\"),\n    \"to\": \"Union Square\"\n})\n\n# Output the result as a JSON-formatted dictionary\nresult = {\"schedule\": schedule}\nprint(json.dumps(result, indent=4))\n```",
            "count": "meeting_planning_example_28",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = \"9:00AM\"\nnancy_start_time = \"7:30PM\"\nnancy_end_time = \"9:45PM\"\nminimum_meeting_duration = 75  # in minutes\ntravel_time = 15  # travel time in minutes\n\n# Convert time strings to datetime objects\narrival = datetime.strptime(arrival_time, \"%I:%M%p\")\nnancy_start = datetime.strptime(nancy_start_time, \"%I:%M%p\")\nnancy_end = datetime.strptime(nancy_end_time, \"%I:%M%p\")\n\n# Calculate the latest possible start time for the meeting with Nancy\nlatest_meeting_start = nancy_end - timedelta(minutes=minimum_meeting_duration)\n\n# Only schedule the meeting if it falls within Nancy's availability\nif latest_meeting_start >= nancy_start:\n    # Calculate time for traveling to Haight-Ashbury\n    travel_to_nancy_time = arrival + timedelta(minutes=travel_time)\n    \n    # Check if arrival time at Haight-Ashbury is before Nancy's available time\n    if travel_to_nancy_time < nancy_start:\n        # Wait until Nancy is available\n        wait_time = nancy_start - travel_to_nancy_time\n        \n        # Meeting time starts after waiting\n        meeting_start_time = nancy_start\n    else:\n        meeting_start_time = travel_to_nancy_time\n    \n    # Schedule the meeting\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n\n    # Final check for meeting overlap\n    if meeting_end_time <= nancy_end:\n        # Create the meeting schedule\n        schedule = [\n            {\n                \"action\": \"start\",\n                \"location\": \"Sunset District\",\n                \"time\": arrival.strftime(\"%I:%M%p\")\n            },\n            {\n                \"action\": \"travel\",\n                \"location\": \"Haight-Ashbury\",\n                \"duration\": travel_time,\n                \"time\": travel_to_nancy_time.strftime(\"%I:%M%p\"),\n                \"to\": \"Haight-Ashbury\"\n            },\n            {\n                \"action\": \"wait\",\n                \"location\": \"Haight-Ashbury\",\n                \"time\": nancy_start.strftime(\"%I:%M%p\")\n            },\n            {\n                \"action\": \"meet\",\n                \"location\": \"Haight-Ashbury\",\n                \"duration\": minimum_meeting_duration,\n                \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n            }\n        ]\n        \n        # Output the schedule as a JSON-formatted dictionary\n        output = {\"schedule\": schedule}\n        print(json.dumps(output, indent=2))\n    else:\n        print(json.dumps({\"error\": \"No valid meeting time can be established.\"}, indent=2))\nelse:\n    print(json.dumps({\"error\": \"Nancy is unavailable for the required meeting duration.\"}, indent=2))\n```",
            "count": "meeting_planning_example_29",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "11:48AM",
                    "duration": 18,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 120,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_time_richmond_to_north_beach = 17\ntravel_time_north_beach_to_richmond = 18\n\n# Meeting constraints\narrival_time_richmond = datetime.strptime(\"09:00 AM\", \"%I:%M %p\")\nmeeting_start_time_stephanie = datetime.strptime(\"09:30 AM\", \"%I:%M %p\")\nmeeting_end_time_stephanie = datetime.strptime(\"04:15 PM\", \"%I:%M %p\")\nminimum_meeting_duration = 120  # in minutes\n\n# Calculate the optimal schedule\nevents = []\n\n# Start at Richmond District\nstart_event = {\n    \"action\": \"start\",\n    \"location\": \"Richmond District\",\n    \"time\": arrival_time_richmond.strftime(\"%I:%M%p\")\n}\nevents.append(start_event)\n\n# Travel to North Beach\ntravel_to_north_beach_time = arrival_time_richmond + timedelta(minutes=travel_time_richmond_to_north_beach)\ntravel_event = {\n    \"action\": \"travel\",\n    \"location\": \"North Beach\",\n    \"duration\": travel_time_richmond_to_north_beach,\n    \"time\": travel_to_north_beach_time.strftime(\"%I:%M%p\"),\n    \"to\": \"North Beach\"\n}\nevents.append(travel_event)\n\n# Wait until Stephanie is available\nwait_time_start = travel_to_north_beach_time\nif wait_time_start < meeting_start_time_stephanie:\n    wait_event = {\n        \"action\": \"wait\",\n        \"location\": \"North Beach\",\n        \"time\": wait_time_start.strftime(\"%I:%M%p\")\n    }\n    events.append(wait_event)\n\n# Meeting with Stephanie\nif wait_time_start < meeting_start_time_stephanie:\n    meeting_start_time = meeting_start_time_stephanie\nelse:\n    meeting_start_time = wait_time_start\n\nmeeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n\nif meeting_end_time <= meeting_end_time_stephanie:\n    meet_event = {\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": minimum_meeting_duration,\n        \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n    }\n    events.append(meet_event)\n\n# Travel back to Richmond District\ntravel_back_time = meeting_end_time + timedelta(minutes=travel_time_north_beach_to_richmond)\ntravel_back_event = {\n    \"action\": \"travel\",\n    \"location\": \"Richmond District\",\n    \"duration\": travel_time_north_beach_to_richmond,\n    \"time\": travel_back_time.strftime(\"%I:%M%p\"),\n    \"to\": \"Richmond District\"\n}\nevents.append(travel_back_event)\n\n# Create the final schedule\nschedule = {\"schedule\": events}\n\n# Output the result as a JSON-formatted dictionary\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_30",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:11AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time_nob_hill = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_nob_to_alamo = 11\nmeeting_start_time_anthony = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\nmeeting_end_time_anthony = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\nminimum_meeting_duration = 15  # in minutes\n\n# Compute when you can start traveling to meet Anthony\n# You need to travel to Alamo Square from Nob Hill\nstart_travel_time = arrival_time_nob_hill + timedelta(minutes=0)  # Based on arrival at Nob Hill\narrival_at_alamo = start_travel_time + timedelta(minutes=travel_time_nob_to_alamo)\n\n# You can only meet Anthony if you arrive before he leaves and have enough time to meet\nif arrival_at_alamo < meeting_end_time_anthony:\n    # Determine the end time of meeting to ensure it is at least the minimum duration\n    latest_meeting_end_time = meeting_end_time_anthony\n    earliest_meeting_start_time = max(arrival_at_alamo, meeting_start_time_anthony)\n    \n    # Calculate when you can finish meeting Anthony\n    meeting_end_time = earliest_meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n    \n    if meeting_end_time <= latest_meeting_end_time:\n        # Create the schedule\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": \"9:00AM\"},\n            {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time_nob_to_alamo, \"time\": arrival_at_alamo.strftime(\"%I:%M%p\"), \"to\": \"Alamo Square\"},\n            {\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": earliest_meeting_start_time.strftime(\"%I:%M%p\")},\n            {\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": minimum_meeting_duration, \"time\": earliest_meeting_start_time.strftime(\"%I:%M%p\")}\n        ]\n        \n        # Output the JSON format of the schedule\n        output = {\"schedule\": schedule}\n        print(json.dumps(output, indent=2))\n    else:\n        print(json.dumps({\"error\": \"Cannot meet Anthony within the available time frame.\"}, indent=2))\nelse:\n    print(json.dumps({\"error\": \"Cannot meet Anthony because you arrive too late.\"}, indent=2))\n```",
            "count": "meeting_planning_example_31",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "9:11AM"
                }
            ],
            "type_error": "Other",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\narrival_time = \"9:00AM\"\njeffrey_start = \"7:00AM\"\njeffrey_end = \"5:30PM\"\nmeeting_duration = 105  # minutes\ntravel_time_to_golden_gate = 11  # minutes\ntravel_time_back_to_castro = 13  # minutes\n\ndef convert_to_datetime(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef convert_to_string(time_dt):\n    return time_dt.strftime('%I:%M%p')\n\ndef calculate_schedule():\n    # Convert string times to datetime objects\n    arrival_dt = convert_to_datetime(arrival_time)\n    jeffrey_start_dt = convert_to_datetime(jeffrey_start)\n    jeffrey_end_dt = convert_to_datetime(jeffrey_end)\n\n    # Compute when we can start meeting Jeffrey\n    time_after_travel = arrival_dt + timedelta(minutes=travel_time_to_golden_gate)\n    \n    # Initialize schedule\n    schedule = []\n\n    # Starting actions\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"The Castro\",\n        \"time\": convert_to_string(arrival_dt)\n    })\n\n    # Travel to Golden Gate Park\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time_to_golden_gate,\n        \"time\": convert_to_string(time_after_travel),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Wait if necessary before meeting Jeffrey\n    if time_after_travel < jeffrey_start_dt:\n        wait_time = (jeffrey_start_dt - time_after_travel).total_seconds() // 60\n        wait_time = int(wait_time)\n        wait_end_time = time_after_travel + timedelta(minutes=wait_time)\n\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Golden Gate Park\",\n            \"time\": convert_to_string(wait_end_time - timedelta(minutes=wait_time))\n        })\n\n        # Update time after waiting\n        current_time = wait_end_time\n    else:\n        current_time = time_after_travel\n\n    # Check if there is enough time to meet Jeffrey\n    latest_meeting_start = current_time\n    latest_meeting_end = jeffrey_end_dt\n\n    if latest_meeting_start + timedelta(minutes=meeting_duration) > latest_meeting_end:\n        # Adjust meeting time if necessary\n        meeting_duration = (latest_meeting_end - latest_meeting_start).total_seconds() // 60\n\n    # Meeting with Jeffrey\n    meeting_end_time = latest_meeting_start + timedelta(minutes=meeting_duration)\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": convert_to_string(latest_meeting_start)\n    })\n\n    # Travel back to The Castro\n    current_time = meeting_end_time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time_back_to_castro,\n        \"time\": convert_to_string(current_time + timedelta(minutes=travel_time_back_to_castro)),\n        \"to\": \"The Castro\"\n    })\n\n    return {\"schedule\": schedule}\n\n# Calculate and print the optimal meeting schedule\noptimal_schedule = calculate_schedule()\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_32",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:30AM",
                    "duration": 30,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "12:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 30,
                    "time": "9:30AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\ntravel_time_to_union_square = 30  # minutes\ntravel_time_to_sunset_district = 26  # minutes\narrival_time = datetime.strptime('9:00AM', '%I:%M%p')\nsarah_start_time = datetime.strptime('12:30PM', '%I:%M%p')\nsarah_end_time = datetime.strptime('9:30PM', '%I:%M%p')\nmeeting_duration = 15  # minutes\n\n# Calculate the latest possible time to start traveling\nlatest_travel_time = sarah_end_time - timedelta(minutes=meeting_duration)\n\n# Now compute the best time to meet\n# Start with the arrival time and iterate through possible meeting times\nschedule = []\ncurrent_time = arrival_time\n\nif current_time >= sarah_start_time:\n    # If we arrive after Sarah starts, we cannot meet her.\n    print(json.dumps({\"error\": \"Cannot meet Sarah as arrival is after the starting time.\"}))\nelse:\n    # Travel to Union Square\n    travel_start_time = current_time + timedelta(minutes=travel_time_to_union_square)\n    if travel_start_time >= sarah_start_time:\n        print(json.dumps({\"error\": \"Cannot meet Sarah, will arrive after her availability.\"}))\n    else:\n        # We can meet Sarah; check the meeting time\n        meet_start_time = max(travel_start_time, sarah_start_time)\n        \n        if meet_start_time + timedelta(minutes=meeting_duration) > latest_travel_time:\n            print(json.dumps({\"error\": \"Cannot meet Sarah within the available timeframe.\"}))\n        else:\n            # Build the schedule\n            schedule.append({\n                \"action\": \"start\",\n                \"location\": \"Sunset District\",\n                \"time\": arrival_time.strftime('%I:%M%p')\n            })\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": \"Union Square\",\n                \"duration\": travel_time_to_union_square,\n                \"time\": travel_start_time.strftime('%I:%M%p'),\n                \"to\": \"Union Square\"\n            })\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": \"Union Square\",\n                \"time\": meet_start_time.strftime('%I:%M%p')\n            })\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Union Square\",\n                \"duration\": meeting_duration,\n                \"time\": meet_start_time.strftime('%I:%M%p')\n            })\n\n# Output the schedule in JSON format\noutput = {\"schedule\": schedule}\nprint(json.dumps(output))\n```",
            "count": "meeting_planning_example_33",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "2:00PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "2:22PM",
                    "duration": 22,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 105,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time_bayview = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_bayview_to_pacific_heights = 23\ntravel_pacific_heights_to_bayview = 22\nthomas_start_time = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\nthomas_end_time = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\nminimum_meeting_time = 105  # in minutes\n\n# Calculate when to start traveling to meet Thomas\ndef calculate_meeting_schedule():\n    # Schedule starts at Bayview\n    schedule = []\n    current_time = arrival_time_bayview\n\n    # First action: Start at Bayview\n    schedule.append({\"action\": \"start\", \"location\": \"Bayview\", \"time\": current_time.strftime(\"%I:%M%p\")})\n\n    # Travel to Pacific Heights\n    current_time += timedelta(minutes=travel_bayview_to_pacific_heights)\n    schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_bayview_to_pacific_heights, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Pacific Heights\"})\n\n    # Check if current time is already beyond Thomas' availability\n    if current_time >= thomas_end_time:\n        return {\"schedule\": schedule}\n\n    # Wait if we arrive before Thomas is available\n    if current_time < thomas_start_time:\n        wait_time = (thomas_start_time - current_time).seconds // 60\n        current_time += timedelta(minutes=wait_time)\n        schedule.append({\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": current_time.strftime(\"%I:%M%p\")})\n\n    # Calculate available time for meeting Thomas\n    available_time = (thomas_end_time - current_time).seconds // 60\n\n    # Determine meeting duration\n    meeting_duration = min(available_time, minimum_meeting_time)\n\n    # Meet Thomas\n    current_time += timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration, \"time\": current_time.strftime(\"%I:%M%p\")})\n\n    # Return to Bayview after meeting\n    current_time += timedelta(minutes=travel_pacific_heights_to_bayview)\n    schedule.append({\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_pacific_heights_to_bayview, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Bayview\"})\n\n    return {\"schedule\": schedule}\n\n# Calculate the schedule\noptimal_schedule = calculate_meeting_schedule()\n\n# Output in JSON format\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_34",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:18AM",
                    "duration": 18,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:18AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "11:10AM",
                    "duration": 22,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 90,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time_bayview = datetime.strptime('9:00 AM', '%I:%M %p')\ntravel_time_bayview_chinatown = 18\ntravel_time_chinatown_bayview = 22\njason_availability_start = datetime.strptime('8:30 AM', '%I:%M %p')\njason_availability_end = datetime.strptime('12:30 PM', '%I:%M %p')\nminimum_meeting_duration = 90  # in minutes\n\n# Calculate the schedule\ndef compute_schedule():\n    schedule = []\n    \n    # Plan to meet Jason\n    arrive_at_chinatown = arrival_time_bayview + timedelta(minutes=travel_time_bayview_chinatown)\n    \n    # Check if arriving at Chinatown is within Jason's availability\n    if arrive_at_chinatown < jason_availability_start:\n        # Wait until Jason is available\n        wait_until_jason = jason_availability_start - arrive_at_chinatown\n        schedule.append({\n            \"action\": \"start\",\n            \"location\": \"Bayview\",\n            \"time\": arrival_time_bayview.strftime('%I:%M %p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time_bayview_chinatown,\n            \"time\": arrive_at_chinatown.strftime('%I:%M %p'),\n            \"to\": \"Chinatown\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": jason_availability_start.strftime('%I:%M %p')\n        })\n        meet_start_time = jason_availability_start\n    else:\n        # No wait needed\n        schedule.append({\n            \"action\": \"start\",\n            \"location\": \"Bayview\",\n            \"time\": arrival_time_bayview.strftime('%I:%M %p')\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_time_bayview_chinatown,\n            \"time\": arrive_at_chinatown.strftime('%I:%M %p'),\n            \"to\": \"Chinatown\"\n        })\n        meet_start_time = arrive_at_chinatown\n\n    # Calculate end time of the meeting\n    meet_end_time = meet_start_time + timedelta(minutes=minimum_meeting_duration)\n\n    # Check if the meeting can occur within Jason's availability\n    if meet_end_time <= jason_availability_end:\n        # Schedule the meeting\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"duration\": minimum_meeting_duration,\n            \"time\": meet_start_time.strftime('%I:%M %p')\n        })\n        # Travel back to Bayview\n        travel_back_time = meet_end_time + timedelta(minutes=travel_time_chinatown_bayview)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time_chinatown_bayview,\n            \"time\": travel_back_time.strftime('%I:%M %p'),\n            \"to\": \"Bayview\"\n        })\n\n    return {\"schedule\": schedule}\n\n# Get the optimal meeting schedule\noptimal_schedule = compute_schedule()\n\n# Output as JSON\nprint(json.dumps(optimal_schedule, indent=4))\n```",
            "count": "meeting_planning_example_35",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:14AM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "1:30PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "2:30PM",
                    "duration": 12,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 60,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input constraints\ntravel_time_marina_to_embarcadero = 14\ntravel_time_embarcadero_to_marina = 12\narrival_time_marina = \"9:00AM\"\nbarbara_start_time = \"1:30PM\"\nbarbara_end_time = \"8:45PM\"\nminimum_meeting_duration = 60\n\n# Convert string time to datetime\ndef convert_to_datetime(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\n# Function to compute the optimal schedule\ndef compute_schedule():\n    # Arrival time at Marina District\n    marina_arrival = convert_to_datetime(arrival_time_marina)\n\n    # Barbara's available time\n    barbara_start = convert_to_datetime(barbara_start_time)\n    barbara_end = convert_to_datetime(barbara_end_time)\n\n    # Start building the schedule\n    schedule = []\n\n    # 1. Start at Marina District\n    schedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time_marina})\n\n    # 2. Travel to Embarcadero\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time_marina_to_embarcadero,\n        \"time\": (marina_arrival + timedelta(minutes=0)).strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Update current time after traveling\n    current_time = marina_arrival + timedelta(minutes=travel_time_marina_to_embarcadero)\n\n    # 3. Wait if we arrive before Barbara is available\n    if current_time < barbara_start:\n        wait_duration = (barbara_start - current_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Embarcadero\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        current_time = barbara_start\n\n    # 4. Meet Barbara for the required duration\n    if current_time + timedelta(minutes=minimum_meeting_duration) <= barbara_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Embarcadero\",\n            \"duration\": minimum_meeting_duration,\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        current_time += timedelta(minutes=minimum_meeting_duration)\n\n    # 5. Travel back to Marina District\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time_embarcadero_to_marina,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Marina District\"\n    })\n\n    # Output the result as JSON\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\n# Running the computation\nif __name__ == \"__main__\":\n    optimal_schedule = compute_schedule()\n    print(optimal_schedule)\n```",
            "count": "meeting_planning_example_36",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "12:15PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "1:45PM",
                    "duration": 19,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 90,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define input parameters\narrival_time_bayview = datetime.strptime('9:00AM', '%I:%M%p')\ntravel_time_bayview_to_financial = 19  # in minutes\nstart_meeting_jeffrey = datetime.strptime('12:15PM', '%I:%M%p')\nend_meeting_jeffrey = datetime.strptime('2:00PM', '%I:%M%p')\nminimum_meeting_duration = 90  # in minutes\n\n# Calculate the latest start time for a meeting with Jeffrey\nlatest_start_meeting_time = end_meeting_jeffrey - timedelta(minutes=minimum_meeting_duration)\n\n# Define the schedule list\nschedule = []\n\n# Starting the day in Bayview\nschedule.append({\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time_bayview.strftime('%-I:%M%p')})\n\n# Check if we can meet Jeffrey\nif arrival_time_bayview + timedelta(minutes=travel_time_bayview_to_financial) <= latest_start_meeting_time:\n    travel_to_financial_departure = arrival_time_bayview + timedelta(minutes=travel_time_bayview_to_financial)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time_bayview_to_financial,\n        \"time\": travel_to_financial_departure.strftime('%-I:%M%p'),\n        \"to\": \"Financial District\"\n    })\n    \n    # Arriving at Financial District\n    arrival_time_financial = travel_to_financial_departure\n    \n    # Meeting Jeffrey for the minimum required duration\n    meeting_start_time = max(arrival_time_financial, start_meeting_jeffrey)\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n    \n    if meeting_end_time <= end_meeting_jeffrey:\n        # If we can meet Jeffrey\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Financial District\",\n            \"duration\": minimum_meeting_duration,\n            \"time\": meeting_start_time.strftime('%-I:%M%p')\n        })\n        \n        # Plan travel back to Bayview after meeting\n        travel_back_departure_time = meeting_end_time\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time_bayview_to_financial,\n            \"time\": travel_back_departure_time.strftime('%-I:%M%p'),\n            \"to\": \"Bayview\"\n        })\n    else:\n        # If we cannot meet Jeffrey within the constraints\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Financial District\",\n            \"time\": arrival_time_financial.strftime('%-I:%M%p')\n        })\n\n# Output the result as JSON\nresult = {\"schedule\": schedule}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_37",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:45PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "10:30PM",
                    "duration": 7,
                    "to": "Union Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef calculate_meeting_schedule():\n    # Input parameters\n    arrival_time_Union_Square = datetime.strptime(\"9:00AM\", '%I:%M%p')\n    travel_time_Union_to_North = 10  # minutes\n    travel_time_North_to_Union = 7    # minutes\n    margaret_start_time = datetime.strptime(\"9:45PM\", '%I:%M%p')\n    margaret_end_time = datetime.strptime(\"10:30PM\", '%I:%M%p')\n    min_meeting_duration = 45  # minutes\n\n    # Possible schedule initialization\n    schedule = []\n\n    # Calculate when to travel to North Beach\n    travel_start_time = arrival_time_Union_Square + timedelta(minutes=travel_time_Union_to_North)\n    if travel_start_time <= margaret_end_time - timedelta(minutes=min_meeting_duration):\n        # Travel to North Beach\n        schedule.append({\n            \"action\": \"start\",\n            \"location\": \"Union Square\",\n            \"time\": format_time(arrival_time_Union_Square)\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_time_Union_to_North,\n            \"time\": format_time(travel_start_time),\n            \"to\": \"North Beach\"\n        })\n\n        # Arrival time at North Beach\n        arrival_time_North_Beach = travel_start_time\n        wait_time = margaret_start_time - arrival_time_North_Beach\n\n        # Wait until Margaret arrives if necessary\n        if wait_time.total_seconds() > 0:\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": \"North Beach\",\n                \"time\": format_time(arrival_time_North_Beach + wait_time)\n            })\n        \n        # Meeting time with Margaret\n        meeting_start_time = max(arrival_time_North_Beach + wait_time, margaret_start_time)\n        meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n\n        # Meeting condition check\n        if meeting_end_time <= margaret_end_time:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"North Beach\",\n                \"duration\": min_meeting_duration,\n                \"time\": format_time(meeting_start_time)\n            })\n\n            # If there's time and you want to return to Union Square\n            if meeting_end_time + timedelta(minutes=travel_time_North_to_Union) <= datetime.strptime(\"11:00PM\", '%I:%M%p'):\n                schedule.append({\n                    \"action\": \"travel\",\n                    \"location\": \"Union Square\",\n                    \"duration\": travel_time_North_to_Union,\n                    \"time\": format_time(meeting_end_time),\n                    \"to\": \"Union Square\"\n                })\n\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\n# Program execution\nif __name__ == \"__main__\":\n    optimal_schedule = calculate_meeting_schedule()\n    print(optimal_schedule)\n```",
            "count": "meeting_planning_example_38",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:45PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "6:56PM",
                    "duration": 11,
                    "to": "Fisherman's Wharf"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 120,
                    "time": "4:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_fisherman_to_nobhill = 11  # in minutes\nstephanie_start_time = datetime.strptime(\"4:45PM\", \"%I:%M%p\")\nstephanie_end_time = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\nmin_meet_duration = 120  # in minutes\n\n# Calculate when we can leave and when we need to return\ndef calculate_schedule():\n    schedule = []\n\n    # Start at Fisherman's Wharf\n    schedule.append({\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Check for earliest we can visit Stephanie\n    first_travel_time = arrival_time + timedelta(minutes=travel_time_fisherman_to_nobhill)\n    \n    # If we leave Fisherman's Wharf at this time, we would get to Nob Hill:\n    arrive_at_nobhill_time = first_travel_time\n    if arrive_at_nobhill_time < stephanie_start_time:\n        # Wait until Stephanie starts\n        schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time_fisherman_to_nobhill,\n                         \"time\": arrive_at_nobhill_time.strftime(\"%I:%M%p\"), \"to\": \"Nob Hill\"})\n        wait_time = (stephanie_start_time - arrive_at_nobhill_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": stephanie_start_time.strftime(\"%I:%M%p\")})\n\n        # Meet Stephanie for the minimum required duration\n        meet_start_time = stephanie_start_time\n        meet_end_time = meet_start_time + timedelta(minutes=min_meet_duration)\n        \n        # Check if we can finish before she leaves\n        if meet_end_time <= stephanie_end_time:\n            schedule.append({\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": min_meet_duration,\n                             \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n            # Travel back to Fisherman's Wharf after meeting\n            travel_back_time = meet_end_time + timedelta(minutes=travel_time_fisherman_to_nobhill)\n            schedule.append({\"action\": \"travel\", \"location\": \"Fisherman's Wharf\", \"duration\": travel_time_fisherman_to_nobhill,\n                             \"time\": travel_back_time.strftime(\"%I:%M%p\"), \"to\": \"Fisherman's Wharf\"})\n    \n    return schedule\n\noptimal_schedule = calculate_schedule()\n\n# Create a JSON output\noutput = {\"schedule\": optimal_schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_39",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef calculate_meeting_schedule():\n    # Constants\n    travel_time_castro_to_sunset = 17  # in minutes\n    travel_time_sunset_to_castro = 17   # in minutes\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    deborah_start_time = datetime.strptime('2:15PM', '%I:%M%p')\n    deborah_end_time = datetime.strptime('8:00PM', '%I:%M%p')\n    required_meeting_duration = 75  # in minutes\n\n    # Start point\n    schedule = []\n    current_time = arrival_time\n\n    # Start at The Castro\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"The Castro\",\n        \"time\": format_time(current_time)\n    })\n\n    # Plan to meet Deborah\n    # Need to leave for Sunset District before 2:15PM\n    latest_departure_time = deborah_start_time - timedelta(minutes=travel_time_castro_to_sunset)\n\n    # We can travel after arriving until just before the latest departure time\n    if current_time < latest_departure_time:\n        # Decide the arrival time at Sunset\n        travel_time = latest_departure_time - current_time\n        if travel_time.total_seconds() / 60 >= travel_time_castro_to_sunset:\n            # Travel to Sunset District\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": \"Sunset District\",\n                \"duration\": travel_time_castro_to_sunset,\n                \"time\": format_time(current_time + timedelta(minutes=travel_time_castro_to_sunset)),\n                \"to\": \"Sunset District\"\n            })\n            current_time += timedelta(minutes=travel_time_castro_to_sunset)\n\n            # Wait until Deborah is free\n            if current_time < deborah_start_time:\n                wait_duration = (deborah_start_time - current_time).total_seconds() / 60\n                schedule.append({\n                    \"action\": \"wait\",\n                    \"location\": \"Sunset District\",\n                    \"time\": format_time(current_time)\n                })\n                current_time += timedelta(minutes=wait_duration)\n            \n            # Now meet Deborah\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Sunset District\",\n                \"duration\": required_meeting_duration,\n                \"time\": format_time(current_time)\n            })\n            current_time += timedelta(minutes=required_meeting_duration)\n        \n    # Return the JSON formatted schedule\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\nif __name__ == \"__main__\":\n    result = calculate_meeting_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_40",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:18AM",
                    "duration": 18.0,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:18AM",
                    "duration": 45.0
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "10:03AM",
                    "duration": 19.0,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 45,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time_north_beach = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ngeorge_availability_start = datetime.strptime(\"7:30AM\", \"%I:%M%p\")\ngeorge_availability_end = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\nminimum_meeting_duration = timedelta(minutes=45)\ntravel_time_north_beach_to_haight = timedelta(minutes=18)\ntravel_time_haight_to_north_beach = timedelta(minutes=19)\n\n# Calculate the potential meeting start and end times\nstart_meeting_time = max(arrival_time_north_beach + travel_time_north_beach_to_haight, george_availability_start)\nend_meeting_time = min(start_meeting_time + minimum_meeting_duration, george_availability_end)\n\n# Check if a valid meeting time is available\nif end_meeting_time - start_meeting_time < minimum_meeting_duration:\n    schedule = {\n        \"schedule\": [\n            {\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time_north_beach.strftime(\"%I:%M%p\")},\n            {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": arrival_time_north_beach.strftime(\"%I:%M%p\")}\n        ]\n    }\nelse:\n    # Create the schedule\n    travel_time_string = travel_time_north_beach_to_haight.total_seconds() / 60\n    meet_duration_string = minimum_meeting_duration.total_seconds() / 60\n\n    schedule = {\n        \"schedule\": [\n            {\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time_north_beach.strftime(\"%I:%M%p\")},\n            {\n                \"action\": \"travel\",\n                \"location\": \"Haight-Ashbury\",\n                \"duration\": travel_time_string,\n                \"time\": (arrival_time_north_beach + travel_time_north_beach_to_haight).strftime(\"%I:%M%p\"),\n                \"to\": \"Haight-Ashbury\"\n            },\n            {\n                \"action\": \"meet\",\n                \"location\": \"Haight-Ashbury\",\n                \"duration\": meet_duration_string,\n                \"time\": start_meeting_time.strftime(\"%I:%M%p\")\n            },\n            {\n                \"action\": \"travel\",\n                \"location\": \"North Beach\",\n                \"duration\": travel_time_haight_to_north_beach.total_seconds() / 60,\n                \"time\": (start_meeting_time + minimum_meeting_duration).strftime(\"%I:%M%p\"),\n                \"to\": \"North Beach\"\n            }\n        ]\n    }\n\n# Output the result as JSON\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_41",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:00PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "1:48PM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_nobhill_to_presidio = 17\ntravel_time_presidio_to_nobhill = 18\ntimothy_start_time = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\ntimothy_end_time = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\nminimum_meeting_duration = 30  # in minutes\n\n# Schedule calculation\ndef compute_schedule():\n    schedule = []\n    \n    # Start at Nob Hill\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to Presidio\n    travel_to_presidio_time = start_time + timedelta(minutes=travel_time_nobhill_to_presidio)\n    schedule.append({\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time_nobhill_to_presidio, \"time\": travel_to_presidio_time.strftime(\"%I:%M%p\"), \"to\": \"Presidio\"})\n    \n    # Wait at Presidio until Timothy arrives (if we get there before him)\n    if travel_to_presidio_time < timothy_start_time:\n        wait_time = (timothy_start_time - travel_to_presidio_time).total_seconds() / 60\n        this_wait_time = int(wait_time)\n        schedule.append({\"action\": \"wait\", \"location\": \"Presidio\", \"time\": timothy_start_time.strftime(\"%I:%M%p\")})\n\n    # Meet Timothy\n    meeting_start_time = max(timothy_start_time, travel_to_presidio_time)\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n\n    if meeting_end_time <= timothy_end_time:\n        schedule.append({\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": minimum_meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n        \n        # Travel back to Nob Hill\n        travel_back_time = meeting_end_time + timedelta(minutes=travel_time_presidio_to_nobhill)\n        schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time_presidio_to_nobhill, \"time\": travel_back_time.strftime(\"%I:%M%p\"), \"to\": \"Nob Hill\"})\n\n    return {\"schedule\": schedule}\n\n# Generate the schedule\noptimal_schedule = compute_schedule()\n\n# Output in JSON format\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_42",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:43AM",
                    "duration": 12,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define meeting constraints and travel times\narrival_time = datetime.strptime('9:00AM', '%I:%M%p')\ntravel_to_chinatown = 16  # minutes\ntravel_to_marina = 12     # minutes\nsandra_start = datetime.strptime('9:00AM', '%I:%M%p')\nsandra_end = datetime.strptime('11:45AM', '%I:%M%p')\nminimum_meeting_duration = 15  # minutes\n\n# Calculate optimal meeting time\ndef calculate_optimal_schedule():\n    schedule = []\n\n    # Start at Marina District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Marina District\",\n        \"time\": arrival_time.strftime('%I:%M%p')\n    })\n\n    # Travel to Chinatown\n    time_to_chinatown = arrival_time + timedelta(minutes=travel_to_chinatown)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_to_chinatown,\n        \"time\": time_to_chinatown.strftime('%I:%M%p'),\n        \"to\": \"Chinatown\"\n    })\n\n    # Check available meeting time with Sandra\n    meeting_start = max(time_to_chinatown, sandra_start)\n    meeting_end = min(meeting_start + timedelta(minutes=minimum_meeting_duration), sandra_end)\n\n    if meeting_start < meeting_end:\n        meeting_duration = (meeting_end - meeting_start).seconds // 60\n        # Meet Sandra for the computed duration\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"duration\": meeting_duration,\n            \"time\": meeting_start.strftime('%I:%M%p')\n        })\n    else:\n        # No valid meeting time\n        return {\"error\": \"No valid meeting time with Sandra.\"}\n\n    # After meeting, travel back to Marina District\n    time_to_marina_after_meeting = meeting_start + timedelta(minutes=meeting_duration) + timedelta(minutes=travel_to_marina)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_to_marina,\n        \"time\": time_to_marina_after_meeting.strftime('%I:%M%p'),\n        \"to\": \"Marina District\"\n    })\n\n    # Finalize schedule in JSON format\n    return {\"schedule\": schedule}\n\n# Generate the schedule\noptimal_schedule = calculate_optimal_schedule()\n\n# Output the schedule as JSON\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_43",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 105,
                    "time": "9:13AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime('9:00AM', '%I:%M%p')\ntravel_time_to_fishermans_wharf = 13  # in minutes\ntravel_time_to_pacific_heights = 12    # in minutes\nbetty_start = datetime.strptime('8:45AM', '%I:%M%p')\nbetty_end = datetime.strptime('6:00PM', '%I:%M%p')\nminimum_meeting_duration = 105  # in minutes\n\n# Calculate the time you can meet Betty\ntime_to_travel = arrival_time + timedelta(minutes=travel_time_to_fishermans_wharf)\nif time_to_travel < betty_start:\n    time_to_travel = betty_start\n\nend_time = time_to_travel + timedelta(minutes=minimum_meeting_duration)\n\n# Ensure you finish meeting before Betty leaves\nif end_time > betty_end:\n    end_time = betty_end\n    minimum_meeting_duration = (end_time - time_to_travel).total_seconds() / 60\n\n# Calculate the meeting schedule\nschedule = []\n\n# Starting point\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Pacific Heights\",\n    \"time\": arrival_time.strftime('%I:%M%p')\n})\n\n# Travel to Fisherman's Wharf\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Fisherman's Wharf\",\n    \"duration\": travel_time_to_fishermans_wharf,\n    \"time\": time_to_travel.strftime('%I:%M%p'),\n    \"to\": \"Fisherman's Wharf\"\n})\n\n# Time to wait for Betty\nwait_time = time_to_travel.strftime('%I:%M%p')\nschedule.append({\n    \"action\": \"wait\",\n    \"location\": \"Fisherman's Wharf\",\n    \"time\": wait_time\n})\n\n# Meeting Betty\nmeet_time = time_to_travel.strftime('%I:%M%p')\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": \"Fisherman's Wharf\",\n    \"duration\": minimum_meeting_duration,\n    \"time\": meet_time\n})\n\n# Output the schedule as a JSON formatted dictionary\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_44",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances and constraints\ntravel_time_to_alamo = 16  # minutes\ntravel_time_to_north_beach = 15  # minutes\narrival_time_north_beach = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nemily_start_time = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\nemily_end_time = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\nmin_meeting_time = 15  # minutes\n\n# Initialize schedule\nschedule = []\ncurrent_time = arrival_time_north_beach\n\n# Step 1: Start at North Beach\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"North Beach\",\n    \"time\": current_time.strftime(\"%I:%M%p\")\n})\n\n# Step 2: Travel to Alamo Square\ncurrent_time += timedelta(minutes=travel_time_to_alamo)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Alamo Square\",\n    \"duration\": travel_time_to_alamo,\n    \"time\": current_time.strftime(\"%I:%M%p\"),\n    \"to\": \"Alamo Square\"\n})\n\n# Step 3: Wait for Emily\nif current_time < emily_start_time:\n    if emily_start_time - current_time >= timedelta(minutes=0):\n        wait_time = (emily_start_time - current_time).seconds / 60\n        current_time += timedelta(minutes=wait_time)\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n\n# Step 4: Meet Emily\n# Ensure there's enough time to meet Emily\nif current_time < emily_start_time:\n    current_time = emily_start_time  # at 7:30 PM, she arrives\nif current_time + timedelta(minutes=min_meeting_time) <= emily_end_time:\n    meet_duration = min_meeting_time  # meet for minimum required time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meet_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    current_time += timedelta(minutes=meet_duration)\n\n# Complete the schedule in the JSON format\nschedule_json = {\n    \"schedule\": schedule\n}\n\n# Output the JSON data\nprint(json.dumps(schedule_json, indent=2))\n```",
            "count": "meeting_planning_example_45",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:18AM",
                    "duration": 19,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:18AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "4:30PM",
                    "duration": 90.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 90,
                    "time": "4:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nnorth_beach_start = datetime.strptime(\"4:30PM\", \"%I:%M%p\")\nnorth_beach_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\nrequired_meeting_duration = timedelta(minutes=90)\ntravel_time_to_north_beach = 19\ntravel_time_to_haight_ashbury = 18\n\n# Initialize the schedule\nschedule = []\n\n# Start at Haight-Ashbury\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Haight-Ashbury\",\n    \"time\": arrival_time.strftime(\"%I:%M%p\")\n})\n\n# Function to compute new time after travel\ndef add_travel_time(start_time, travel_time):\n    return start_time + timedelta(minutes=travel_time)\n\n# Meet as many friends as possible\ncurrent_time = arrival_time\n\n# Time left to meet Robert\navailable_time = north_beach_start - current_time - required_meeting_duration\n\n# Meeting schedule\nif available_time.total_seconds() > 0:  # There is time to meet Robert\n    # Plan to head to North Beach\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time_to_north_beach,\n        \"time\": add_travel_time(current_time, travel_time_to_haight_ashbury).strftime(\"%I:%M%p\"),\n        \"to\": \"North Beach\"\n    })\n    \n    current_time = add_travel_time(current_time, travel_time_to_haight_ashbury)\n    \n    # Wait until it's time to meet Robert (4:30PM)\n    if current_time < north_beach_start:\n        wait_duration = (north_beach_start - current_time).total_seconds() // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        current_time = north_beach_start  # Update current time to when Robert is available\n    \n    # Meet Robert\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": required_meeting_duration.total_seconds() // 60,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Update current time after meeting\n    current_time += required_meeting_duration\n\n# Return schedule in JSON format\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_46",
            "is_correct": false
        },
        {
            "final_program_plan": [],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = \"9:00AM\"\ntravel_to_nob_hill = 17  # minutes\ntravel_to_richmond = 14  # minutes\npaul_start_time = \"9:30AM\"\npaul_end_time = \"11:15AM\"\nminimum_meeting_duration = 15  # minutes\n\n# Function to convert string time to datetime object\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\n# Function to convert datetime object back to formatted string\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\n# Initialize schedule list\nschedule = []\n\n# Convert times to datetime objects\narrival_dt = parse_time(arrival_time)\npaul_start_dt = parse_time(paul_start_time)\npaul_end_dt = parse_time(paul_end_time)\n\n# Calculate departure time from Richmond District to Nob Hill\ndeparture_to_nob_hill = arrival_dt + timedelta(minutes=travel_to_nob_hill)\n# Calculate the maximum possible meeting start time\nmax_meeting_start_time = min(paul_end_dt - timedelta(minutes=minimum_meeting_duration), departure_to_nob_hill)\n\n# Check if meeting is possible\nif max_meeting_start_time >= paul_start_dt:\n    # Adjust for waiting at Nob Hill\n    wait_time = max(paul_start_dt - departure_to_nob_hill, 0)\n    meeting_time = max_meeting_start_time\n    meeting_end_time = meeting_time + timedelta(minutes=minimum_meeting_duration)\n\n    # Create the schedule\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": format_time(arrival_dt)})\n    schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_to_nob_hill,\n                     \"time\": format_time(departure_to_nob_hill), \"to\": \"Nob Hill\"})\n    if wait_time > 0:\n        wait_at_nob_hill = departure_to_nob_hill + timedelta(minutes=wait_time)\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": format_time(wait_at_nob_hill)})\n    schedule.append({\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": minimum_meeting_duration,\n                     \"time\": format_time(meeting_time)})\n\n# Output the schedule as JSON\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_47",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "9:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_fd_to_us = 9  # in minutes\ntravel_time_us_to_fd = 9  # in minutes\njoseph_start_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\njoseph_end_time = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\nminimum_meet_duration = 15  # in minutes\n\n# Calculation for meeting schedule\nschedule = []\n\n# Step 1: Starting at Financial District\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Financial District\",\n    \"time\": arrival_time.strftime(\"%I:%M%p\")\n})\n\n# Step 2: Travel to Union Square\ndeparture_time_to_us = arrival_time + timedelta(minutes=0)  # No wait\narrival_time_us = departure_time_to_us + timedelta(minutes=travel_time_fd_to_us)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Union Square\",\n    \"duration\": travel_time_fd_to_us,\n    \"time\": arrival_time_us.strftime(\"%I:%M%p\"),\n    \"to\": \"Union Square\"\n})\n\n# Step 3: Wait if needed until Joseph is available\nif arrival_time_us < joseph_start_time:\n    wait_time = (joseph_start_time - arrival_time_us).total_seconds() / 60\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Union Square\",\n        \"time\": joseph_start_time.strftime(\"%I:%M%p\")\n    })\n    arrival_time_us = joseph_start_time  # Updating arrival time to start meeting with Joseph\n\n# Step 4: Meet Joseph\nmeet_duration = min(minimum_meet_duration, (joseph_end_time - arrival_time_us).total_seconds() / 60)  # Only meet if we have time\nif meet_duration > 0:\n    meeting_end_time = arrival_time_us + timedelta(minutes=meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": meet_duration,\n        \"time\": arrival_time_us.strftime(\"%I:%M%p\")\n    })\n\n# Output the final schedule in JSON format\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_48",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:26AM",
                    "duration": 26,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "2:15PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "3:25PM",
                    "duration": 25,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_to_bayview = 26\ntravel_time_to_richmond = 25\nsarah_start_time = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\nsarah_end_time = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\nminimum_meeting_duration = 45\n\n# Compute the latest possible meeting start time\nlatest_meeting_start = sarah_end_time - timedelta(minutes=minimum_meeting_duration)\n\n# Initialize schedule\nschedule = []\n\n# Starting at Richmond District\ncurrent_time = arrival_time\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Richmond District\",\n    \"time\": current_time.strftime(\"%I:%M%p\")\n})\n\n# Travel to Bayview\ncurrent_time += timedelta(minutes=travel_time_to_bayview)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Bayview\",\n    \"duration\": travel_time_to_bayview,\n    \"time\": current_time.strftime(\"%I:%M%p\"),\n    \"to\": \"Bayview\"\n})\n\n# Check if we arrive before Sarah's availability\nif current_time < sarah_start_time:\n    # If we arrive before Sarah, we need to wait\n    wait_duration = (sarah_start_time - current_time).seconds // 60\n    current_time = sarah_start_time\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Bayview\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\nelse:\n    wait_duration = 0\n\n# Calculate remaining time to meet Sarah\nremaining_time_to_meet = (latest_meeting_start - current_time).seconds // 60\n\n# Adjust for minimum meeting time and check for feasibility\nif remaining_time_to_meet >= minimum_meeting_duration:\n    meeting_duration = minimum_meeting_duration\nelse:\n    meeting_duration = remaining_time_to_meet\n\n# Meeting with Sarah\ncurrent_time += timedelta(minutes=meeting_duration)\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": \"Bayview\",\n    \"duration\": meeting_duration,\n    \"time\": (current_time - timedelta(minutes=meeting_duration)).strftime(\"%I:%M%p\")\n})\n\n# Travel back to Richmond District\ncurrent_time += timedelta(minutes=travel_time_to_richmond)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Richmond District\",\n    \"duration\": travel_time_to_richmond,\n    \"time\": current_time.strftime(\"%I:%M%p\"),\n    \"to\": \"Richmond District\"\n})\n\n# Create the JSON output\noutput = {\n    \"schedule\": schedule\n}\n\n# Print JSON output\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_49",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef calculate_schedule(arrival_time, travel_time, meeting_start, meeting_end, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # 1. Start at North Beach\n    schedule.append({\"action\": \"start\", \"location\": \"North Beach\", \"time\": format_time(current_time)})\n\n    # 2. Travel to Nob Hill\n    travel_to_nob_hill_time = current_time + timedelta(minutes=travel_time['to_nob_hill'])\n    schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time['to_nob_hill'], \"time\": format_time(travel_to_nob_hill_time), \"to\": \"Nob Hill\"})\n\n    # 3. Wait until Melissa is available\n    wait_time = max(meeting_start - travel_to_nob_hill_time, timedelta(0))\n    current_time = travel_to_nob_hill_time + wait_time\n    if wait_time.total_seconds() > 0:\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": format_time(current_time)})\n\n    # 4. Meet Melissa\n    meeting_end_time = meeting_start + timedelta(minutes=meeting_duration)\n    \n    if current_time + timedelta(minutes=meeting_duration) <= meeting_end:\n        schedule.append({\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration, \"time\": format_time(current_time)})\n        current_time += timedelta(minutes=meeting_duration)\n\n    # Final output\n    return {\"schedule\": schedule}\n\n# Define input variables\narrival_at_north_beach = datetime.strptime(\"09:00AM\", \"%I:%M%p\")\ntravel_time = {'to_nob_hill': 7, 'to_north_beach': 8}\nmeeting_start_time = datetime.strptime(\"09:30AM\", \"%I:%M%p\")\nmeeting_end_time = datetime.strptime(\"08:30PM\", \"%I:%M%p\")\nmeeting_duration_minutes = 75\n\n# Calculate and generate the schedule\noptimal_schedule = calculate_schedule(arrival_at_north_beach, travel_time, meeting_start_time, meeting_end_time, meeting_duration_minutes)\n\n# Output result as JSON\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_50",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "9:22AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 15,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrive_location = \"The Castro\"\narrive_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_castro_to_embarcadero = 22\ntravel_time_embarcadero_to_castro = 25\n\n# Laura's availability\nlaura_available_start = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\nlaura_available_end = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\nminimum_meeting_duration = 15\n\n# Function to format time\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\n# Calculate meeting schedule\nschedule = []\n\n# Step 1: Start at The Castro\nschedule.append({\n    \"action\": \"start\",\n    \"location\": arrive_location,\n    \"time\": format_time(arrive_time)\n})\n\n# Step 2: Travel to Embarcadero\ndeparture_time = arrive_time + timedelta(minutes=0)\narrival_time_at_embarcadero = departure_time + timedelta(minutes=travel_time_castro_to_embarcadero)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Embarcadero\",\n    \"duration\": travel_time_castro_to_embarcadero,\n    \"time\": format_time(arrival_time_at_embarcadero),\n    \"to\": \"Embarcadero\"\n})\n\n# Step 3: Wait for Laura (if needed)\nif arrival_time_at_embarcadero < laura_available_start:\n    wait_time = (laura_available_start - arrival_time_at_embarcadero).seconds // 60\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Embarcadero\",\n        \"time\": format_time(laura_available_start)\n    })\n    # Update time after waiting\n    arrival_time_at_embarcadero = laura_available_start\n\n# Step 4: Meet Laura (if there's enough time)\nif arrival_time_at_embarcadero + timedelta(minutes=minimum_meeting_duration) <= laura_available_end:\n    meeting_start_time = arrival_time_at_embarcadero\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": minimum_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n\n# Output schedule as JSON\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_51",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:14AM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_meeting_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    travel_time_richmond_to_russian = 13  # minutes\n    travel_time_russian_to_richmond = 14  # minutes\n    barbara_start_time = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    barbara_end_time = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    minimum_meeting_duration = 45  # minutes\n\n    # Possible travel to Richmond District\n    travel_to_richmond = arrival_time + timedelta(minutes=travel_time_russian_to_richmond)\n    \n    if travel_to_richmond < barbara_start_time:\n        # If we arrive before Barbara\n        leave_russian = travel_to_richmond\n        wait_time = (barbara_start_time - leave_russian).total_seconds() / 60\n        leave_russian += timedelta(minutes=wait_time)  # wait until we meet Barbara\n    else:\n        leave_russian = travel_to_richmond\n    \n    meet_start_time = max(leave_russian, barbara_start_time)\n    meet_end_time = meet_start_time + timedelta(minutes=minimum_meeting_duration)\n\n    # Check if we can meet until 6:15PM\n    if meet_end_time > barbara_end_time:\n        meet_end_time = barbara_end_time\n\n    # Schedule construction\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": arrival_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_time_russian_to_richmond,\n         \"time\": travel_to_richmond.strftime(\"%I:%M%p\"), \"to\": \"Richmond District\"},\n        {\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": leave_russian.strftime(\"%I:%M%p\")},\n        {\"action\": \"meet\", \"location\": \"Richmond District\", \"duration\": (meet_end_time - meet_start_time).seconds // 60,\n         \"time\": meet_start_time.strftime(\"%I:%M%p\")}\n    ]\n    \n    # Return result as JSON\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\nif __name__ == \"__main__\":\n    result = calculate_meeting_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_52",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:02AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "10:02AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 120,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_to_alamo_square = 13  # minutes\ntravel_to_richmond = 12  # minutes\nashley_availability_start = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\nashley_availability_end = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\nminimum_meeting_duration = 120  # minutes\n\n# Helper function to format time\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\n# Function to compute the optimal meeting schedule\ndef compute_schedule():\n    # Calculate when we can leave Richmond to meet Ashley\n    time_to_leave = ashley_availability_start - timedelta(minutes=travel_to_alamo_square)\n\n    # Initialize schedule\n    schedule = []\n\n    # Step 1: Start at Richmond District\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": format_time(arrival_time)})\n\n    # Step 2: Travel to Alamo Square\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_to_alamo_square,\n        \"time\": format_time(arrival_time + timedelta(minutes=travel_to_alamo_square)),\n        \"to\": \"Alamo Square\"\n    })\n\n    # Step 3: Wait until Ashley is available\n    wait_time = max((time_to_leave - (arrival_time + timedelta(minutes=travel_to_alamo_square))).total_seconds() / 60, 0)\n    if wait_time > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": format_time(time_to_leave)\n        })\n\n    # Step 4: Meeting with Ashley\n    meeting_start_time = time_to_leave\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n\n    # Check if we can meet the required duration\n    if meeting_end_time <= ashley_availability_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Alamo Square\",\n            \"duration\": minimum_meeting_duration,\n            \"time\": format_time(meeting_start_time)\n        })\n    \n    # Return final schedule\n    return {\"schedule\": schedule}\n\n# Execute the function and print the output as JSON\noptimal_schedule = compute_schedule()\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_53",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": "SyntaxError",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = \"9:00AM\"\ntravel_time_financial_to_mission = 17  # minutes\nmeeting_start_time = \"1:15PM\"\nmeeting_end_time = \"2:15PM\"\nminimum_meeting_duration = 45  # minutes\n\n# Convert string time to datetime object for calculations\narrival_dt = datetime.strptime(arrival_time, \"%I:%M%p\")\nmeeting_start_dt = datetime.strptime(meeting_start_time, \"%I:%M%p\")\nmeeting_end_dt = datetime.strptime(meeting_end_time, \"%I:%M%p\")\n\n# Calculate the latest possible time to leave for the meeting to meet William\nlatest_departure_to_meeting = meeting_start_dt - timedelta(minutes=travel_time_financial_to_mission)\n\n# Calculate the possible meeting start and end times\npossible_meeting_start = max(arrival_dt + timedelta(minutes=travel_time_financial_to_mission), meeting_start_dt)\npossible_meeting_end = min(possible_meeting_start + timedelta(minutes=minimum_meeting_duration), meeting_end_dt)\n\n# Check if the meeting can fit in the constraints\nif possible_meeting_end <= meeting_start_dt:\n    meeting_duration = possible_meeting_end - possible_meeting_start\nelse:\n    meeting_duration = min(meeting_end_dt - possible_meeting_start, timedelta(minutes=minimum_meeting_duration))\n\nif meeting_duration < timedelta(0):\n    meeting_duration = timedelta(0)\n\noptimal_meeting_start = possible_meeting_start\noptimal_meeting_end = optimal_meeting_start + meeting_duration\n\n# Construct the schedule dictionary\nschedule = [\n    {\"action\": \"start\", \"location\": \"Financial District\", \"time\": arrival_time},\n    {\"action\": \"travel\", \"location\": \"Mission District\", \"duration\": travel_time_financial_to_mission, \"time\": (arrival_dt + timedelta(minutes=travel_time_financial_to_mission)).strftime(\"%I:%M%p\"), \"to\": \"Mission District\")},\n    {\"action\": \"wait\", \"location\": \"Mission District\", \"time\": optimal_meeting_start.strftime(\"%I:%M%p\")},\n    {\"action\": \"meet\", \"location\": \"Mission District\", \"duration\": int(meeting_duration.total_seconds() // 60), \"time\": optimal_meeting_start.strftime(\"%I:%M%p\")}\n]\n\n# Prepare final output\noutput = {\"schedule\": schedule}\n\n# Output result as JSON\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_54",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "12:15PM",
                    "duration": 9,
                    "to": "Financial District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef calculate_meeting_schedule():\n    # Constants\n    travel_to_nob_hill = 8  # travel time from Financial District to Nob Hill\n    travel_to_financial_district = 9  # travel time from Nob Hill to Financial District\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    \n    # Meeting constraints\n    helen_start_time = datetime.strptime('11:30AM', '%I:%M%p')\n    helen_end_time = datetime.strptime('12:15PM', '%I:%M%p')\n    min_meeting_duration = 45   # minutes\n\n    # Calculate the latest time we can start meeting Helen\n    latest_meeting_start_time = helen_end_time - timedelta(minutes=min_meeting_duration)\n\n    # Schedule list\n    schedule = []\n\n    # Start at Financial District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Financial District\",\n        \"time\": format_time(arrival_time)\n    })\n\n    # Travel to Nob Hill\n    leave_time = arrival_time + timedelta(minutes=travel_to_nob_hill)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_to_nob_hill,\n        \"time\": format_time(leave_time),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Waiting time if arrived early\n    if leave_time < helen_start_time:\n        wait_time_minutes = (helen_start_time - leave_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": format_time(leave_time + timedelta(minutes=wait_time_minutes))\n        })\n    \n    # Meeting Helen\n    meeting_start_time = max(helen_start_time, leave_time)  # we can only meet after we arrive\n    if meeting_start_time <= latest_meeting_start_time:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(meeting_start_time)\n        })\n\n        # Add travel back to Financial District after meeting\n        travel_back_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Financial District\",\n            \"duration\": travel_to_financial_district,\n            \"time\": format_time(travel_back_time),\n            \"to\": \"Financial District\"\n        })\n    \n    return json.dumps({\"schedule\": schedule}, indent=2)\n\n# Output the calculated schedule\nif __name__ == \"__main__\":\n    result = calculate_meeting_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_55",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "10:15AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:15AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input variables\narrival_time_chinatown = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_times = {\n    \"Chinatown to Nob Hill\": 8,\n    \"Nob Hill to Chinatown\": 6\n}\njoshua_availability_start = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\njoshua_availability_end = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\nminimum_meeting_duration = timedelta(minutes=45)\n\n# Function to calculate the optimal meeting schedule\ndef calculate_schedule():\n    # Leaving Chinatown towards Nob Hill\n    leaving_time = arrival_time_chinatown + timedelta(minutes=travel_times[\"Chinatown to Nob Hill\"])\n    if leaving_time < joshua_availability_start:\n        # Need to wait until Joshua is available\n        wait_time = joshua_availability_start - leaving_time\n        leaving_time = joshua_availability_start\n    \n    # Calculate meeting start and end times\n    meeting_start_time = leaving_time\n    meeting_end_time = meeting_start_time + minimum_meeting_duration\n    \n    # Check if the meeting can end before Joshua leaves\n    if meeting_end_time > joshua_availability_end:\n        meeting_end_time = joshua_availability_end\n        meeting_start_time = meeting_end_time - minimum_meeting_duration\n        if meeting_start_time < joshua_availability_start:\n            meeting_start_time = None  # Cannot meet\n\n    # If we can meet, construct the schedule\n    if meeting_start_time:\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival_time_chinatown.strftime(\"%I:%M%p\")},\n            {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_times[\"Chinatown to Nob Hill\"],\n             \"time\": leaving_time.strftime(\"%I:%M%p\"), \"to\": \"Nob Hill\"},\n            {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": leaving_time.strftime(\"%I:%M%p\")},\n            {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": minimum_meeting_duration.seconds // 60,\n             \"time\": meeting_start_time.strftime(\"%I:%M%p\")},\n        ]\n        return {\"schedule\": schedule}\n    \n    # If cannot meet, return empty schedule\n    return {\"schedule\": []}\n\n# Run the schedule calculation\noptimal_schedule = calculate_schedule()\n\n# Output the result in JSON format\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_56",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "10:30AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "11:30AM",
                    "duration": 22,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef calculate_meeting_schedule():\n    # Constants\n    travel_time_to_sunset = 23  # minutes\n    travel_time_to_bayview = 22   # minutes\n    arrival_time = datetime.strptime(\"09:00AM\", \"%I:%M%p\")\n    \n    # Jessica's availability\n    jessica_start = datetime.strptime(\"10:30AM\", \"%I:%M%p\")\n    jessica_end = datetime.strptime(\"5:45PM\", \"%I:%M%p\")\n    \n    # Meeting duration requirement\n    min_meeting_duration = timedelta(minutes=60)\n\n    # Initialize the schedule\n    schedule = []\n    \n    # Step 1: Arrive in Bayview\n    schedule.append({\"action\": \"start\", \"location\": \"Bayview\", \"time\": format_time(arrival_time)})\n    \n    # Step 2: Travel to Sunset District\n    travel_to_sunset_start = arrival_time + timedelta(minutes=0)\n    travel_to_sunset_end = travel_to_sunset_start + timedelta(minutes=travel_time_to_sunset)\n    \n    schedule.append({\"action\": \"travel\", \"location\": \"Sunset District\", \n                     \"duration\": travel_time_to_sunset, \n                     \"time\": format_time(travel_to_sunset_start), \"to\": \"Sunset District\"})\n    \n    # Step 3: Wait for Jessica if necessary\n    if travel_to_sunset_end < jessica_start:\n        wait_start = travel_to_sunset_end\n        wait_end = jessica_start\n        wait_duration = (wait_end - wait_start).total_seconds() // 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": format_time(wait_start)})\n    \n    # Step 4: Meet Jessica\n    meet_start = max(travel_to_sunset_end, jessica_start)\n    meet_end = meet_start + min_meeting_duration\n    \n    if meet_end > jessica_end:\n        meet_end = jessica_end\n    \n    meeting_duration = (meet_end - meet_start).total_seconds() // 60\n    schedule.append({\"action\": \"meet\", \"location\": \"Sunset District\", \n                     \"duration\": int(meeting_duration), \n                     \"time\": format_time(meet_start)})\n\n    # Step 5: Travel back to Bayview (if there is time remaining after the meeting)\n    travel_back_start = meet_end\n    if travel_back_start < jessica_end:\n        travel_back_end = travel_back_start + timedelta(minutes=travel_time_to_bayview)\n        schedule.append({\"action\": \"travel\", \"location\": \"Bayview\", \n                         \"duration\": travel_time_to_bayview, \n                         \"time\": format_time(travel_back_start), \"to\": \"Bayview\"})\n    \n    return json.dumps({\"schedule\": schedule}, indent=2)\n\nif __name__ == \"__main__\":\n    result = calculate_meeting_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_57",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "9:20AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "10:13AM",
                    "duration": 23,
                    "to": "The Castro"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 30,
                    "time": "9:20AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(t):\n    return t.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Constants\n    TRAVEL_TO_FD = 20  # Travel from Castro to Financial District\n    TRAVEL_TO_CASTRO = 23  # Travel from Financial District to Castro\n    MEETING_DURATION = 30  # Minimum meeting time with Nancy\n\n    # Constraints\n    arrival_castro = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    nancy_start = datetime.strptime(\"9:15AM\", \"%I:%M%p\")\n    nancy_end = datetime.strptime(\"4:45PM\", \"%I:%M%p\")\n\n    # Initialize the schedule\n    schedule = []\n\n    # Start at The Castro\n    schedule.append({\"action\": \"start\", \"location\": \"The Castro\", \"time\": format_time(arrival_castro)})\n\n    # Check if we can meet Nancy after arriving\n    # Travel to Financial District\n    travel_time_to_fd = arrival_castro + timedelta(minutes=TRAVEL_TO_FD)\n    if travel_time_to_fd < nancy_start:\n        # Wait until Nancy is available\n        wait_until = nancy_start\n    else:\n        wait_until = travel_time_to_fd\n\n    # Travel to Financial District\n    schedule.append({\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": TRAVEL_TO_FD, \"time\": format_time(travel_time_to_fd), \"to\": \"Financial District\"})\n\n    # Wait if necessary\n    if wait_until > travel_time_to_fd:\n        schedule.append({\"action\": \"wait\", \"location\": \"Financial District\", \"time\": format_time(wait_until)})\n        current_time = wait_until\n    else:\n        current_time = travel_time_to_fd\n\n    # Meeting with Nancy\n    meeting_start = current_time\n    meeting_end = meeting_start + timedelta(minutes=MEETING_DURATION)\n\n    # Check if we can meet Nancy\n    if meeting_end <= nancy_end:\n        schedule.append({\"action\": \"meet\", \"location\": \"Financial District\", \"duration\": MEETING_DURATION, \"time\": format_time(meeting_start)})\n        current_time = meeting_end\n    else:\n        raise ValueError(\"Cannot meet Nancy within the available time.\")\n\n    # Travel back to The Castro\n    travel_time_back = current_time + timedelta(minutes=TRAVEL_TO_CASTRO)\n    schedule.append({\"action\": \"travel\", \"location\": \"The Castro\", \"duration\": TRAVEL_TO_CASTRO, \"time\": format_time(travel_time_back), \"to\": \"The Castro\"})\n    \n    return json.dumps({\"schedule\": schedule}, indent=2)\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_58",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "11:04AM",
                    "duration": 18,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 105,
                    "time": "9:19AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = \"9:00AM\"\ntravel_time_bayview_to_haight = 19  # minutes\ntravel_time_haight_to_bayview = 18  # minutes\nmeeting_start_time = \"7:00AM\"\nmeeting_end_time = \"3:45PM\"\nminimum_meeting_duration = 105  # minutes\n\n# Convert strings to datetime objects\narrival_dt = datetime.strptime(arrival_time, \"%I:%M%p\")\nmeeting_start_dt = datetime.strptime(meeting_start_time, \"%I:%M%p\")\nmeeting_end_dt = datetime.strptime(meeting_end_time, \"%I:%M%p\")\n\n# Calculate the maximum possible start time for the meeting\nlatest_possible_meeting_end = meeting_end_dt - timedelta(minutes=travel_time_haight_to_bayview)\nlatest_possible_meeting_start = latest_possible_meeting_end - timedelta(minutes=minimum_meeting_duration)\n\n# Start building the schedule\nschedule = []\n\n# Start\nschedule.append({\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time})\n\n# Travel to Haight-Ashbury\nschedule.append({\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time_bayview_to_haight, \n                 \"time\": (arrival_dt + timedelta(minutes=travel_time_bayview_to_haight)).strftime(\"%I:%M%p\"), \n                 \"to\": \"Haight-Ashbury\"})\n\n# Calculate when the meeting can start\nmeeting_start = max(arrival_dt + timedelta(minutes=travel_time_bayview_to_haight), meeting_start_dt)\nif meeting_start > latest_possible_meeting_start:\n    meeting_start = latest_possible_meeting_start\n\n# Wait until the meeting starts\nif meeting_start > arrival_dt + timedelta(minutes=travel_time_bayview_to_haight):\n    wait_duration = (meeting_start - (arrival_dt + timedelta(minutes=travel_time_bayview_to_haight))).seconds // 60\n    wait_time = (arrival_dt + timedelta(minutes=travel_time_bayview_to_haight)).strftime(\"%I:%M%p\")\n    schedule.append({\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": wait_time})\n\n# Meet Richard\nif meeting_start <= latest_possible_meeting_start:\n    meeting_end = meeting_start + timedelta(minutes=minimum_meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": minimum_meeting_duration, \n                     \"time\": meeting_start.strftime(\"%I:%M%p\")})\n\n    # Travel back to Bayview\n    schedule.append({\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_time_haight_to_bayview, \n                     \"time\": meeting_end.strftime(\"%I:%M%p\"), \"to\": \"Bayview\"})\n\n# Prepare output data\noutput = {\"schedule\": schedule}\n\n# Print the result as JSON\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_59",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:30PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "7:22PM",
                    "duration": 7,
                    "to": "Union Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 45,
                    "time": "6:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define constants\nTRAVEL_TIME_UNION_TO_CHINATOWN = 7\nTRAVEL_TIME_CHINATOWN_TO_UNION = 7\nMIN_MEETING_DURATION = 45  # in minutes\nCAROL_START_TIME = datetime.strptime(\"6:30PM\", \"%I:%M%p\")\nCAROL_END_TIME = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\nARRIVAL_TIME = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n\ndef compute_schedule():\n    # Calculate the earliest possible time to meet Carol\n    earliest_meeting_time = CAROL_START_TIME - timedelta(minutes=MIN_MEETING_DURATION)\n    \n    # Initialize the schedule\n    schedule = []\n    current_time = ARRIVAL_TIME\n\n    # Start at Union Square\n    schedule.append({\"action\": \"start\", \"location\": \"Union Square\", \"time\": current_time.strftime(\"%I:%M%p\")})\n\n    # Travel to Chinatown\n    current_time += timedelta(minutes=TRAVEL_TIME_UNION_TO_CHINATOWN)\n    schedule.append({\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": TRAVEL_TIME_UNION_TO_CHINATOWN,\n                     \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Chinatown\"})\n\n    # Wait for Carol (if we arrive before she does)\n    if current_time < CAROL_START_TIME:\n        wait_duration = (CAROL_START_TIME - current_time).seconds // 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": current_time.strftime(\"%I:%M%p\")})\n        current_time = CAROL_START_TIME\n        \n    # Meet Carol\n    schedule.append({\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": MIN_MEETING_DURATION,\n                     \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=MIN_MEETING_DURATION)\n\n    # Travel back to Union Square\n    current_time += timedelta(minutes=TRAVEL_TIME_CHINATOWN_TO_UNION)\n    schedule.append({\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": TRAVEL_TIME_CHINATOWN_TO_UNION,\n                     \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Union Square\"})\n\n    return {\"schedule\": schedule}\n\n# Compute the schedule\noptimal_schedule = compute_schedule()\n\n# Output the result in JSON format\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_60",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:11AM",
                    "duration": 11.0,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "7:15PM",
                    "duration": 90.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 90,
                    "time": "7:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nstephanie_arrival = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\nstephanie_departure = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\nminimum_meeting_duration = timedelta(minutes=90)\n\n# Travel durations\ntravel_to_presidio = timedelta(minutes=11)\ntravel_to_golden_gate = timedelta(minutes=12)\n\n# Calculate when to leave Golden Gate Park to meet Stephanie\nlatest_meeting_start = stephanie_departure - minimum_meeting_duration\n\n# Check if it is possible to meet Stephanie\nif latest_meeting_start < stephanie_arrival:\n    raise ValueError(\"Cannot meet Stephanie as arrival time and departure constraints conflict.\")\n\n# Calculate the latest time to leave Golden Gate Park\nlatest_departure_time = latest_meeting_start - travel_to_golden_gate\n\n# Check possible meeting times\nif latest_departure_time < arrival_time + travel_to_presidio:\n    raise ValueError(\"Not enough time to travel to Presidio to meet Stephanie.\")\n\n# Schedule logic\nschedule = []\n\n# Start at Golden Gate Park\nschedule.append({\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n# Travel to Presidio\ntravel_time_to_presidio = arrival_time + travel_to_presidio\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Presidio\",\n    \"duration\": travel_to_presidio.total_seconds() // 60,\n    \"time\": travel_time_to_presidio.strftime(\"%I:%M%p\"),\n    \"to\": \"Presidio\"\n})\n\n# Wait until Stephanie arrives\nwait_time_until_stephanie = stephanie_arrival - travel_time_to_presidio\nif wait_time_until_stephanie.total_seconds() > 0:\n    wait_time = travel_time_to_presidio + wait_time_until_stephanie\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Presidio\",\n        \"time\": wait_time.strftime(\"%I:%M%p\")\n    })\n\n# Meet Stephanie\nmeet_start_time = stephanie_arrival\nmeet_end_time = meet_start_time + minimum_meeting_duration\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": \"Presidio\",\n    \"duration\": minimum_meeting_duration.total_seconds() // 60,\n    \"time\": meet_start_time.strftime(\"%I:%M%p\")\n})\n\n# JSON output\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_61",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:14AM",
                    "duration": 14,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:14AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:30AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "11:45AM",
                    "duration": 14,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\npresidio_to_russian_hill = 14  # travel time in minutes\namanda_arrival = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\namanda_departure = datetime.strptime(\"9:15PM\", \"%I:%M%p\")\nminimum_meeting_duration = 15  # in minutes\n\n# Initialize schedule\nschedule = []\n\n# Start at Presidio\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Presidio\",\n    \"time\": arrival_time.strftime(\"%I:%M%p\")\n})\n\n# Plan to meet Amanda\n# We need to arrive at Russian Hill by or before 11:30AM-15 min (for the meeting)\nlatest_arrival = amanda_arrival - timedelta(minutes=minimum_meeting_duration)\n\n# Travel to Russian Hill before meeting\nif arrival_time + timedelta(minutes=presidio_to_russian_hill) <= latest_arrival:\n    travel_time = presidio_to_russian_hill\n    travel_arrival_time = arrival_time + timedelta(minutes=travel_time)\n    # Travel to Russian Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": travel_arrival_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n    \n    # Wait until Amanda arrives if we arrive early\n    if travel_arrival_time < amanda_arrival:\n        wait_time = (amanda_arrival - travel_arrival_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": travel_arrival_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Meet Amanda\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": minimum_meeting_duration,\n        \"time\": amanda_arrival.strftime(\"%I:%M%p\")\n    })\n    \n    # After meeting, we can leave Russian Hill\n    end_meeting_time = amanda_arrival + timedelta(minutes=minimum_meeting_duration)\n    # After the meeting, we can go to Presidio or other destinations\n    \n    if end_meeting_time <= amanda_departure:\n        # Travel back to Presidio\n        travel_back_time = presidio_to_russian_hill\n        travel_departure_time = end_meeting_time.strftime(\"%I:%M%p\")\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Presidio\",\n            \"duration\": travel_back_time,\n            \"time\": travel_departure_time,\n            \"to\": \"Presidio\"\n        })\n\n# Output the schedule in JSON format\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_62",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:31AM",
                    "duration": 31,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "9:31AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "10:32AM",
                    "duration": 31,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 31,
                    "time": "9:31AM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "9:31AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define input parameters\narrival_time_presidio = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_presidio_to_bayview = 31  # minutes\ntravel_time_bayview_to_presidio = 31   # minutes\nnancy_available_start = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\nnancy_available_end = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\nminimum_meeting_duration = 30  # minutes\n\n# Calculate potential meeting times\navailable_meeting_start = max(arrival_time_presidio, nancy_available_start)\navailable_meeting_end = nancy_available_end\n\n# Check if a valid meeting window exists\nif available_meeting_start + timedelta(minutes=minimum_meeting_duration) > available_meeting_end:\n    print(\"No valid meeting window available.\")\nelse:\n    # Calculate the latest possible start time for the meeting\n    latest_meeting_start = available_meeting_end - timedelta(minutes=minimum_meeting_duration)\n\n    # Create a schedule\n    schedule = []\n\n    # Start at Presidio\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Presidio\",\n        \"time\": arrival_time_presidio.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to Bayview\n    travel_time_to_bayview = travel_time_presidio_to_bayview\n    travel_arrival_time = arrival_time_presidio + timedelta(minutes=travel_time_to_bayview)\n\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time_to_bayview,\n        \"time\": travel_arrival_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n\n    # Wait until the meeting time\n    meeting_time = max(travel_arrival_time, available_meeting_start)\n    if meeting_time > travel_arrival_time:\n        wait_duration = (meeting_time - travel_arrival_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": meeting_time.strftime(\"%I:%M%p\")\n        })\n\n    # Meet Nancy\n    meeting_end_time = meeting_time + timedelta(minutes=minimum_meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": minimum_meeting_duration,\n        \"time\": meeting_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel back to Presidio\n    travel_time_back = travel_time_bayview_to_presidio\n    travel_arrival_time_back = meeting_end_time + timedelta(minutes=travel_time_back)\n\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_time_back,\n        \"time\": travel_arrival_time_back.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n\n    # Create a JSON output\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_63",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "3:45PM"
                }
            ],
            "type_error": "TypeError",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef compute_schedule():\n    # Input parameters\n    meeting_start_time = datetime.strptime('09:00AM', '%I:%M%p')\n    margaret_available_start = datetime.strptime('03:45PM', '%I:%M%p')\n    margaret_available_end = datetime.strptime('07:15PM', '%I:%M%p')\n    meeting_duration = 45  # minutes\n    travel_time = 8  # minutes\n    \n    # Calculate the window when we can meet Margaret\n    margaret_meeting_start = max(margaret_available_start, meeting_start_time + travel_time)\n    margaret_meeting_end = margaret_available_end\n    \n    if margaret_meeting_start + timedelta(minutes=meeting_duration) > margaret_meeting_end:\n        return None  # Cannot meet Margaret within the available timeframe\n    \n    # Schedule\n    schedule = []\n\n    # Start from Nob Hill\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Nob Hill\",\n        \"time\": format_time(meeting_start_time)\n    })\n\n    # Travel to Pacific Heights\n    travel_to_pacific_heights_time = meeting_start_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time,\n        \"time\": format_time(travel_to_pacific_heights_time),\n        \"to\": \"Pacific Heights\"\n    })\n\n    # Adjust meeting time based on Margaret's availability\n    meeting_time = margaret_meeting_start\n    meeting_end_time = meeting_time + timedelta(minutes=meeting_duration)\n\n    # Wait at Pacific Heights until meeting time if necessary\n    if travel_to_pacific_heights_time < meeting_time:\n        wait_duration = (meeting_time - travel_to_pacific_heights_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": format_time(travel_to_pacific_heights_time + timedelta(minutes=wait_duration))\n        })\n\n    # Meet Margaret\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_time)\n    })\n\n    return {\"schedule\": schedule}\n\n# Compute the schedule\nresult = compute_schedule()\n\n# Output the result as JSON\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_64",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:00AM",
                    "duration": 25,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "7:00PM",
                    "duration": 45
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:25AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 45,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime('9:00AM', '%I:%M%p')\nsandra_start_time = datetime.strptime('7:00PM', '%I:%M%p')\nsandra_end_time = datetime.strptime('9:00PM', '%I:%M%p')\nmin_meeting_duration = 45\ntravel_time_to_embarcadero = 25\ntravel_time_to_golden_gate_park = 25\n\ndef compute_schedule():\n    schedule = []\n    \n    # Start at Golden Gate Park\n    schedule.append({\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time.strftime('%I:%M%p')})\n    \n    # Calculate the latest possible start time for the meeting with Sandra\n    latest_meeting_start = sandra_end_time - timedelta(minutes=min_meeting_duration)\n    latest_departure_time = latest_meeting_start - timedelta(minutes=travel_time_to_embarcadero)\n    \n    # Travel to Embarcadero to meet Sandra\n    travel_start_time = arrival_time\n    if travel_start_time > latest_departure_time:\n        return \"It's not possible to meet Sandra within the constraints.\"\n    \n    # Travel to Embarcadero\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_embarcadero)\n    schedule.append({\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_time_to_embarcadero, \"time\": travel_start_time.strftime('%I:%M%p'), \"to\": \"Embarcadero\"})\n    \n    # Meet Sandra\n    meeting_start_time = max(travel_end_time, sandra_start_time)\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end_time > sandra_end_time:\n        return \"It's not possible to meet Sandra within the constraints.\"\n    \n    schedule.append({\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": min_meeting_duration, \"time\": meeting_start_time.strftime('%I:%M%p')})\n    \n    # Wait action can be added if we get there too early\n    if travel_end_time < sandra_start_time:\n        wait_start_time = travel_end_time\n        wait_duration = (sandra_start_time - wait_start_time).seconds // 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": wait_start_time.strftime('%I:%M%p')})\n    \n    # Output JSON formatted schedule\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\n# Execute the function and print the schedule\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_65",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:15AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "1:33PM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 120,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\n\ndef calculate_meeting_schedule():\n    # Input parameters\n    nob_hill_arrival = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    travel_to_presidio = 17  # Nob Hill to Presidio\n    travel_to_nob_hill = 18  # Presidio to Nob Hill\n    robert_start = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    robert_end = datetime.strptime(\"5:45PM\", \"%I:%M%p\")\n    required_meeting_time = 120  # 120 minutes\n\n    # Calculate meeting windows\n    presido_arrival_time = nob_hill_arrival + timedelta(minutes=travel_to_presidio)\n    earliest_possible_meeting_start = max(robert_start, presido_arrival_time)\n    latest_possible_meeting_end = robert_end\n\n    # Calculate max meeting duration\n    available_meeting_duration = (latest_possible_meeting_end - earliest_possible_meeting_start).total_seconds() / 60\n\n    if available_meeting_duration < required_meeting_time:\n        return {\"error\": \"Not enough available time to meet Robert for the required duration.\"}\n\n    # Schedule plan\n    schedule = []\n\n    # Start at Nob Hill\n    schedule.append({\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": format_time(nob_hill_arrival)})\n\n    # Travel to Presidio\n    travel_time = travel_to_presidio\n    travel_start_time = nob_hill_arrival\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time,\n                     \"time\": format_time(travel_end_time), \"to\": \"Presidio\"})\n\n    # Wait until Robert is available\n    wait_time_duration = (earliest_possible_meeting_start - travel_end_time).total_seconds() / 60\n    if wait_time_duration > 0:\n        wait_end_time = travel_end_time + timedelta(minutes=wait_time_duration)\n        schedule.append({\"action\": \"wait\", \"location\": \"Presidio\", \"time\": format_time(wait_end_time)})\n\n    # Meet Robert\n    meet_start_time = max(earliest_possible_meeting_start, wait_end_time)\n    meet_end_time = meet_start_time + timedelta(minutes=required_meeting_time)\n    schedule.append({\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": required_meeting_time,\n                     \"time\": format_time(meet_start_time)})\n\n    # Return to Nob Hill\n    travel_time_back = travel_to_nob_hill\n    return_start_time = meet_end_time\n    return_end_time = return_start_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time_back,\n                     \"time\": format_time(return_end_time), \"to\": \"Nob Hill\"})\n\n    # Return the full schedule as JSON\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\nif __name__ == \"__main__\":\n    result = calculate_meeting_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_66",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:26AM",
                    "duration": 26,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "8:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 105,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_to_fd = 26  # travel time from Golden Gate Park to Financial District\ntravel_to_gp = 23  # travel time from Financial District to Golden Gate Park\nkenneth_start = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\nkenneth_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\nmeeting_duration = 105  # Minimum meeting duration in minutes\n\n# Initialize the schedule\nschedule = []\n\n# Step 1: Starting point at Golden Gate Park\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Golden Gate Park\",\n    \"time\": arrival_time.strftime(\"%I:%M%p\")\n})\n\n# Step 2: Travel to Financial District\ntravel_time_to_fd = arrival_time + timedelta(minutes=travel_to_fd)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Financial District\",\n    \"duration\": travel_to_fd,\n    \"time\": travel_time_to_fd.strftime(\"%I:%M%p\"),\n    \"to\": \"Financial District\"\n})\n\n# Step 3: Calculate waiting time to meet Kenneth\nwaiting_time = max(0, (kenneth_start - travel_time_to_fd).total_seconds() / 60)\nif waiting_time > 0:\n    wait_time_end = travel_time_to_fd + timedelta(minutes=waiting_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Financial District\",\n        \"time\": wait_time_end.strftime(\"%I:%M%p\")\n    })\n\n# Step 4: Meet Kenneth\nmeeting_time_start = max(kenneth_start, wait_time_end)  # Make sure to start meeting after Kenneth arrives\nmeeting_time_end = meeting_time_start + timedelta(minutes=meeting_duration)\n\nif meeting_time_end <= kenneth_end:\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meeting_duration,\n        \"time\": meeting_time_start.strftime(\"%I:%M%p\")\n    })\n\n# Output the result in JSON format\nresult = {\"schedule\": schedule}\nprint(json.dumps(result, indent=4))\n```",
            "count": "meeting_planning_example_67",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 30,
                    "time": "9:17AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    travel_time_haight_to_russian = 17  # minutes\n    travel_time_russian_to_haight = 17  # minutes\n    patricia_availability_start = datetime.strptime(\"7:45AM\", \"%I:%M%p\")\n    patricia_availability_end = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    meeting_duration = 30  # minutes\n    \n    # Calculate the latest start time to meet Patricia\n    latest_meeting_start = patricia_availability_end - timedelta(minutes=meeting_duration)\n    \n    # Calculate when we can leave Haight-Ashbury to get to Russian Hill on time\n    return_time = arrival_time + timedelta(minutes=travel_time_haight_to_russian)\n    \n    # Check if we can meet Patricia\n    if return_time < patricia_availability_start or arrival_time > latest_meeting_start:\n        return {\"error\": \"No valid meeting schedule possible.\"}\n    \n    # Schedule the meeting\n    meeting_start_time = max(arrival_time, patricia_availability_start)\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Adjust meeting time if it extends the latest meeting start time\n    if meeting_end_time > latest_meeting_start:\n        meeting_end_time = latest_meeting_start\n        meeting_start_time = meeting_end_time - timedelta(minutes=meeting_duration)\n    \n    # Construct the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_time_haight_to_russian,\n         \"time\": (arrival_time + timedelta(minutes=0)).strftime(\"%I:%M%p\"), \"to\": \"Russian Hill\"},\n        {\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": meeting_start_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": meeting_duration,\n         \"time\": meeting_start_time.strftime(\"%I:%M%p\")}\n    ]\n    \n    return {\"schedule\": schedule}\n\n# Execute the function and print the output in JSON format\nif __name__ == \"__main__\":\n    meeting_schedule = compute_meeting_schedule()\n    print(json.dumps(meeting_schedule, indent=2))\n```",
            "count": "meeting_planning_example_68",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:07AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "10:44AM",
                    "duration": 7,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 90,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nmark_start_time = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\nmark_end_time = datetime.strptime(\"12:45PM\", \"%I:%M%p\")\nmeeting_duration = 90  # in minutes\ntravel_time_chinatown_to_union = 7  # in minutes\ntravel_time_union_to_chinatown = 7  # in minutes\n\n# Initialize the schedule\nschedule = []\n\n# 1. Start at Chinatown\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Chinatown\",\n    \"time\": arrival_time.strftime(\"%I:%M%p\")\n})\n\n# 2. Travel to Union Square\ntravel_time = travel_time_chinatown_to_union\ntravel_arrival_time = arrival_time + timedelta(minutes=travel_time)\n\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Union Square\",\n    \"duration\": travel_time,\n    \"time\": travel_arrival_time.strftime(\"%I:%M%p\"),\n    \"to\": \"Union Square\"\n})\n\n# Check if we can meet Mark after arrival\nif travel_arrival_time >= mark_start_time and travel_arrival_time <= mark_end_time:\n    # Meeting can start right after arrival\n    meet_start_time = travel_arrival_time\n\n    # Calculate end of meeting time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n\n    # Check if meeting ends before Mark leaves\n    if meet_end_time <= mark_end_time:\n        # 3. Meet Mark\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Union Square\",\n            \"duration\": meeting_duration,\n            \"time\": meet_start_time.strftime(\"%I:%M%p\")\n        })\n\n        # 4. Travel back to Chinatown\n        travel_back_time = travel_time_union_to_chinatown\n        return_time = meet_end_time + timedelta(minutes=travel_back_time)\n\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": travel_back_time,\n            \"time\": return_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Chinatown\"\n        })\n\n# Output the schedule as JSON\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_69",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:06AM",
                    "duration": 24,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 24,
                    "time": "9:24AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 30,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\ntravel_times = {\n    \"Golden Gate Park to North Beach\": 24,\n    \"North Beach to Golden Gate Park\": 22,\n}\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nronald_start = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\nronald_end = datetime.strptime(\"6:30PM\", \"%I:%M%p\")\nmin_meeting_duration = timedelta(minutes=30)\n\n# Calculate meeting time\nstart_meeting_time = max(arrival_time + timedelta(minutes=travel_times[\"Golden Gate Park to North Beach\"]), ronald_start)\nend_meeting_time = ronald_end - min_meeting_duration\n\nif start_meeting_time + min_meeting_duration <= end_meeting_time:\n    meet_start = start_meeting_time\n    meet_end = meet_start + min_meeting_duration\nelse:\n    meet_start = None\n    meet_end = None\n\n# Build the schedule\nschedule = []\n\nif meet_start and meet_end:\n    # Start at Golden Gate Park\n    schedule.append({\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to North Beach\n    travel_duration = travel_times[\"Golden Gate Park to North Beach\"]\n    travel_time = meet_start - timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_duration, \"time\": travel_time.strftime(\"%I:%M%p\"), \"to\": \"North Beach\"})\n    \n    # Wait for Ronald if necessary (we assume arrival at North Beach is just in time)\n    wait_time = meet_start\n    schedule.append({\"action\": \"wait\", \"location\": \"North Beach\", \"time\": wait_time.strftime(\"%I:%M%p\")})\n    \n    # Meet Ronald\n    schedule.append({\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": min_meeting_duration.seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n# Output the result as a JSON-formatted dictionary\nresult = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_70",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:18AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "11:00AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_haight_to_bayview = 18\ntravel_time_bayview_to_haight = 19\npaul_start_time = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\npaul_end_time = datetime.strptime(\"4:30PM\", \"%I:%M%p\")\nminimum_meeting_duration = 90  # in minutes\n\n# Function to create a meeting schedule\ndef create_schedule():\n    # Create a schedule list\n    schedule = []\n    \n    # Start at Haight-Ashbury\n    schedule.append({\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Travel from Haight-Ashbury to Bayview\n    start_travel_time = arrival_time + timedelta(minutes=0)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time_haight_to_bayview,\n        \"time\": start_travel_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n    \n    # Arrival time at Bayview\n    arrival_at_bayview = start_travel_time + timedelta(minutes=travel_time_haight_to_bayview)\n\n    # Wait until Paul is available\n    if arrival_at_bayview < paul_start_time:\n        wait_time = (paul_start_time - arrival_at_bayview).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": arrival_at_bayview.strftime(\"%I:%M%p\")\n        })\n        arrival_at_bayview = paul_start_time\n\n    # Calculate meeting end time\n    meeting_end_time = arrival_at_bayview + timedelta(minutes=minimum_meeting_duration)\n\n    # Check if the meeting can take place within Paul's availability\n    if meeting_end_time > paul_end_time:\n        # Adjust meeting duration to fit within Paul's availability\n        meeting_duration = (paul_end_time - arrival_at_bayview).total_seconds() / 60\n    else:\n        meeting_duration = minimum_meeting_duration\n\n    # Meet Paul\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": int(meeting_duration),\n        \"time\": arrival_at_bayview.strftime(\"%I:%M%p\")\n    })\n    \n    # Return schedule\n    return {\"schedule\": schedule}\n\n# Generate the schedule\nmeeting_schedule = create_schedule()\n\n# Output the schedule in JSON format\nprint(json.dumps(meeting_schedule, indent=2))\n```",
            "count": "meeting_planning_example_71",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:45AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "9:45AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_to_alamo = 10  # minutes\njohn_start_time = datetime.strptime(\"9:45AM\", \"%I:%M%p\")\njohn_end_time = datetime.strptime(\"2:30PM\", \"%I:%M%p\")\nminimum_meeting_duration = 90  # minutes\n\n# Calculate meeting start and end range\npossible_meeting_start = max(john_start_time, arrival_time + timedelta(minutes=travel_time_to_alamo))\npossible_meeting_end = min(john_end_time, possible_meeting_start + timedelta(minutes=minimum_meeting_duration))\n\n# If it is feasible to meet John\nif possible_meeting_start < possible_meeting_end:\n    meeting_start = possible_meeting_start\n    meeting_end = meeting_start + timedelta(minutes=minimum_meeting_duration)\n    \n    # Create schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Pacific Heights\", \"time\": arrival_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time_to_alamo, \"time\": (arrival_time + timedelta(minutes=travel_time_to_alamo)).strftime(\"%I:%M%p\"), \"to\": \"Alamo Square\"},\n        {\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": meeting_start.strftime(\"%I:%M%p\")},\n        {\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": minimum_meeting_duration, \"time\": meeting_start.strftime(\"%I:%M%p\")}\n    ]\nelse:\n    schedule = []\n\n# Output result as JSON\nresult = {\"schedule\": schedule}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_72",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "9:07AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 60,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef calculate_meeting_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"09:00AM\", \"%I:%M%p\")\n    travel_time = 7  # travel time in minutes\n    barbara_start_time = datetime.strptime(\"07:15AM\", \"%I:%M%p\")\n    barbara_end_time = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    minimum_meeting_duration = timedelta(minutes=60)\n\n    # Initializing the schedule list\n    schedule = []\n\n    # Start at Russian Hill at 9:00AM\n    current_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": format_time(current_time)})\n\n    # Travel to Pacific Heights\n    current_time += timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time,\n        \"time\": format_time(current_time),\n        \"to\": \"Pacific Heights\"\n    })\n\n    # Wait until Barbara is there to meet\n    if current_time < barbara_start_time:\n        current_time = barbara_start_time  # wait until Barbara arrives\n        schedule.append({\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": format_time(current_time)})\n\n    # Start meeting\n    meeting_start_time = current_time\n    meeting_end_time = meeting_start_time + minimum_meeting_duration\n\n    # Check if we can meet for the minimum meeting duration\n    if meeting_end_time <= barbara_end_time:\n        current_time = meeting_start_time + minimum_meeting_duration\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": 60,\n            \"time\": format_time(meeting_start_time)\n        })\n    else:\n        # If we can't meet for the minimum duration, schedule nothing\n        return {\"schedule\": []}\n\n    # Format the final output\n    return {\"schedule\": schedule}\n\n# Generate the meeting schedule\noptimal_schedule = calculate_meeting_schedule()\n\n# Output the result as JSON\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_73",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:00PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "4:59PM",
                    "duration": 14,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Initial settings\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nrichmond_to_nobhill_duration = 17  # in minutes\nnobhill_to_richmond_duration = 14   # in minutes\nrichard_start_time = datetime.strptime(\"4:00PM\", \"%I:%M%p\")\nrichard_end_time = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\nminimum_meeting_duration = 45  # in minutes\n\n# Calculate the feasible meeting time window with travel time considered\navailable_meeting_start = richard_start_time - timedelta(minutes=minimum_meeting_duration)\navailable_meeting_end = richard_end_time\n\n# Calculate the arrival time at Nob Hill\nlatest_arrival_time_at_nobhill = available_meeting_start - timedelta(minutes=richmond_to_nobhill_duration)\n\n# Generate schedule\nschedule = []\n\n# Start from Richmond District\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Richmond District\",\n    \"time\": arrival_time.strftime(\"%I:%M%p\")\n})\n\n# Calculate travel time to Nob Hill\ntravel_time_to_nobhill = (latest_arrival_time_at_nobhill - arrival_time).total_seconds() / 60\nif travel_time_to_nobhill > 0:\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": richmond_to_nobhill_duration,\n        \"time\": (arrival_time + timedelta(minutes=richmond_to_nobhill_duration)).strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n\n    # Calculate meeting time\n    meeting_start_time = latest_arrival_time_at_nobhill\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n\n    # Ensure we are within the available window\n    if meeting_start_time < richard_start_time:\n        meeting_start_time = richard_start_time\n        meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n\n    if meeting_end_time <= richard_end_time:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"duration\": minimum_meeting_duration,\n            \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # Travel back to Richmond District\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": nobhill_to_richmond_duration,\n        \"time\": (meeting_end_time + timedelta(minutes=nobhill_to_richmond_duration)).strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n\n# Output result as JSON\nresult = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_74",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input constants\ndeparture_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_to_fishermans_wharf = 13  # minutes\ntravel_time_to_pacific_heights = 12  # minutes\ndavid_start_time = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\ndavid_end_time = datetime.strptime(\"2:45PM\", \"%I:%M%p\")\nminimum_meeting_duration = 15  # minutes\n\n# Calculate the optimal schedule\ndef compute_schedule():\n    schedule = []\n\n    # Start at Pacific Heights\n    schedule.append({\"action\": \"start\", \"location\": \"Pacific Heights\", \"time\": departure_time.strftime(\"%I:%M%p\")})\n\n    # Travel to Fisherman's Wharf\n    arrival_time_at_fishermans_wharf = departure_time + timedelta(minutes=travel_time_to_fishermans_wharf)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time_to_fishermans_wharf,\n        \"time\": arrival_time_at_fishermans_wharf.strftime(\"%I:%M%p\"),\n        \"to\": \"Fisherman's Wharf\"\n    })\n\n    # Wait for David's availability\n    wait_start_time = arrival_time_at_fishermans_wharf\n    if wait_start_time < david_start_time:\n        wait_end_time = david_start_time\n    else:\n        wait_end_time = wait_start_time\n\n    if wait_end_time > david_end_time:\n        return {\"error\": \"No time available to meet David\"}\n\n    # Adjust the wait time until David is available\n    schedule.append({\"action\": \"wait\", \"location\": \"Fisherman's Wharf\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    # Schedule meeting with David\n    meeting_start_time = max(wait_end_time, david_start_time)\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n\n    if meeting_end_time > david_end_time:\n        return {\"error\": \"Not enough time to meet David\"}\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": minimum_meeting_duration,\n        \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n    })\n\n    return {\"schedule\": schedule}\n\n# Get the computed schedule\noptimal_schedule = compute_schedule()\n\n# Format the output as JSON\noutput_json = json.dumps(optimal_schedule, indent=2)\nprint(output_json)\n```",
            "count": "meeting_planning_example_75",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM",
                    "duration": 60.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 60,
                    "time": "5:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = \"9:00AM\"\ntravel_time_to_haight = 16  # minutes\ntravel_time_to_marina = 17   # minutes\ntimothy_start_time = \"5:00PM\"\ntimothy_end_time = \"8:15PM\"\nmin_meet_duration = 60  # minutes\n\n# Convert the times to datetime objects for easier calculations\narrival_time_dt = datetime.strptime(arrival_time, \"%I:%M%p\")\ntimothy_start_time_dt = datetime.strptime(timothy_start_time, \"%I:%M%p\")\ntimothy_end_time_dt = datetime.strptime(timothy_end_time, \"%I:%M%p\")\n\n# Calculate the latest time to start traveling to meet Timothy\nlatest_travel_start_time = timothy_end_time_dt - timedelta(minutes=travel_time_to_haight + min_meet_duration)\n\n# Initialize the schedule\nschedule = []\n\n# Step 1: Start at Marina District\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Marina District\",\n    \"time\": arrival_time\n})\n\n# Step 2: Travel to Haight-Ashbury\ntravel_time_to_haight_dt = arrival_time_dt + timedelta(minutes=travel_time_to_haight)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Haight-Ashbury\",\n    \"duration\": travel_time_to_haight,\n    \"time\": travel_time_to_haight_dt.strftime(\"%I:%M%p\"),\n    \"to\": \"Haight-Ashbury\"\n})\n\n# Step 3: Wait until Timothy's available time\nif travel_time_to_haight_dt < timothy_start_time_dt:\n    wait_time_until_timothy = (timothy_start_time_dt - travel_time_to_haight_dt).total_seconds() / 60\n    waiting_time_dt = travel_time_to_haight_dt + timedelta(minutes=wait_time_until_timothy)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Haight-Ashbury\",\n        \"time\": waiting_time_dt.strftime(\"%I:%M%p\")\n    })\n\n# Step 4: Meet Timothy for the required time\nmeeting_start_time = max(timothy_start_time_dt, waiting_time_dt if 'waiting_time_dt' in locals() else travel_time_to_haight_dt)\nmeeting_end_time = meeting_start_time + timedelta(minutes=min_meet_duration)\n\n# If meeting end time exceeds Timothy's available time, adjust the meeting duration\nif meeting_end_time > timothy_end_time_dt:\n    meeting_end_time = timothy_end_time_dt\n\nmeeting_duration = (meeting_end_time - meeting_start_time).total_seconds() / 60\n\n# Append meeting details to schedule\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": \"Haight-Ashbury\",\n    \"duration\": meeting_duration,\n    \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n})\n\n# Finalize output\noutput = {\n    \"schedule\": schedule\n}\n\n# Print the resulting schedule in JSON format\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_76",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:09AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:46AM",
                    "duration": 7,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 30,
                    "time": "9:09AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define constants\nTRAVEL_TIME_TO_GGP = 9  # minutes from Richmond District to Golden Gate Park\nTRAVEL_TIME_FROM_GGP = 7  # minutes from Golden Gate Park to Richmond District\nARRIVAL_TIME = datetime.strptime(\"9:00 AM\", \"%I:%M %p\")\nMEETING_DURATION = 30  # minimum meeting duration in minutes\n\n# Constraints for Robert's availability\nROBERT_ARRIVAL = datetime.strptime(\"8:15 AM\", \"%I:%M %p\")\nROBERT_DEPARTURE = datetime.strptime(\"8:30 PM\", \"%I:%M %p\")\n\n# Calculate the time when we can start meeting Robert\ndeparture_time = ARRIVAL_TIME + timedelta(minutes=TRAVEL_TIME_TO_GGP)\nend_meeting_time = ROBERT_DEPARTURE\n\n# Initialize the schedule\nschedule = []\n\n# 1. Start at Richmond District\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Richmond District\",\n    \"time\": ARRIVAL_TIME.strftime(\"%I:%M%p\")\n})\n\n# 2. Travel to Golden Gate Park\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Golden Gate Park\",\n    \"duration\": TRAVEL_TIME_TO_GGP,\n    \"time\": departure_time.strftime(\"%I:%M%p\"),\n    \"to\": \"Golden Gate Park\"\n})\n\n# 3. Calculate the latest start time for the meeting\nlatest_meeting_start = ROBERT_DEPARTURE - timedelta(minutes=MEETING_DURATION)\n\n# 4. Check if we can meet Robert and meet the constraints\nif departure_time <= ROBERT_DEPARTURE and latest_meeting_start >= departure_time:\n    # Wait for Robert if we arrive early\n    wait_time = max(0, (ROBERT_ARRIVAL - departure_time).total_seconds() / 60)\n    \n    if wait_time > 0:\n        wait_start_time = departure_time + timedelta(minutes=wait_time)\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Golden Gate Park\",\n            \"time\": wait_start_time.strftime(\"%I:%M%p\")\n        })\n\n    # 5. Meet Robert\n    meet_start_time = wait_start_time if wait_time > 0 else departure_time\n    meet_end_time = meet_start_time + timedelta(minutes=MEETING_DURATION)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": MEETING_DURATION,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n\n    # 6. Travel back to Richmond District after meeting\n    travel_back_time = meet_end_time + timedelta(minutes=TRAVEL_TIME_FROM_GGP)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": TRAVEL_TIME_FROM_GGP,\n        \"time\": travel_back_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n\n# Output the result as a JSON-formatted dictionary\nresult = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_77",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "6:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 105,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef create_schedule():\n    # Input parameters\n    travel_time = 19  # travel time between locations in minutes\n    meeting_duration = 105  # duration needed to meet Michelle in minutes\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    michelle_start = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    michelle_end = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    \n    # Schedule\n    schedule = []\n    current_time = arrival_time\n\n    # Action 1: Start at Union Square\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Union Square\",\n        \"time\": format_time(current_time)\n    })\n\n    # Travel to The Castro\n    travel_start_time = current_time + timedelta(minutes=travel_time)\n    \n    # Action 2: Travel to The Castro\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time,\n        \"time\": format_time(travel_start_time),\n        \"to\": \"The Castro\"\n    })\n    \n    current_time = travel_start_time\n\n    # Wait until Michelle is available\n    if current_time < michelle_start:\n        wait_duration = (michelle_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"The Castro\",\n            \"time\": format_time(michelle_start)\n        })\n        current_time = michelle_start\n\n    # Meet Michelle\n    if current_time + timedelta(minutes=meeting_duration) <= michelle_end:\n        meet_end_time = current_time + timedelta(minutes=meeting_duration)\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"The Castro\",\n            \"duration\": meeting_duration,\n            \"time\": format_time(current_time)\n        })\n\n        current_time = meet_end_time\n\n    # Return the final schedule formatted as JSON\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\nif __name__ == \"__main__\":\n    solution = create_schedule()\n    print(\"SOLUTION:\", solution)\n```",
            "count": "meeting_planning_example_78",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "1:30PM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "1:30PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "2:15PM",
                    "duration": 21,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\ntravel_time_north_beach_to_bayview = 22  # minutes\ntravel_time_bayview_to_north_beach = 21  # minutes\npaul_start_time = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\npaul_end_time = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\nminimum_meeting_duration = 45  # minutes\n\n# Arrival time at North Beach\narrival_time_north_beach = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n\n# Function to add minutes to a time\ndef add_minutes(start_time, minutes):\n    return start_time + timedelta(minutes=minutes)\n\n# Meeting schedule list\nschedule = []\n\n# Start at North Beach\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"North Beach\",\n    \"time\": arrival_time_north_beach.strftime(\"%I:%M%p\")\n})\n\n# Check if it's possible to meet Paul and calculate optimal schedule\ndef calculate_optimal_meeting():\n    current_time = arrival_time_north_beach\n\n    while current_time <= paul_end_time:\n        # Check if we can travel to Bayview and meet Paul\n        time_to_bayview = add_minutes(current_time, travel_time_north_beach_to_bayview)\n\n        # Check if we arrive before or during Paul's availability\n        if paul_start_time <= time_to_bayview <= paul_end_time:\n            # Calculate the meeting end time based on the minimum meeting duration\n            meeting_start_time = time_to_bayview\n            meeting_end_time = add_minutes(meeting_start_time, minimum_meeting_duration)\n\n            # Check if the meeting ends before Paul leaves\n            if meeting_end_time <= paul_end_time:\n                # Update current time after the meeting\n                post_meeting_time = meeting_end_time\n\n                # Travel back to North Beach\n                schedule.extend([\n                    {\n                        \"action\": \"travel\",\n                        \"location\": \"Bayview\",\n                        \"duration\": travel_time_north_beach_to_bayview,\n                        \"time\": time_to_bayview.strftime(\"%I:%M%p\"),\n                        \"to\": \"Bayview\"\n                    },\n                    {\n                        \"action\": \"meet\",\n                        \"location\": \"Bayview\",\n                        \"duration\": minimum_meeting_duration,\n                        \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n                    },\n                    {\n                        \"action\": \"travel\",\n                        \"location\": \"North Beach\",\n                        \"duration\": travel_time_bayview_to_north_beach,\n                        \"time\": post_meeting_time.strftime(\"%I:%M%p\"),\n                        \"to\": \"North Beach\"\n                    }\n                ])\n                break  # Found a valid meeting time\n        # Increment current_time by 1 minute for the next possibility\n        current_time = add_minutes(current_time, 1)\n\n# Calculate the optimal meeting schedule\ncalculate_optimal_meeting()\n\n# Output the result in JSON format\noutput = json.dumps({\"schedule\": schedule}, indent=2)\nprint(output)\n```",
            "count": "meeting_planning_example_79",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "12:56PM",
                    "duration": 11,
                    "to": "Mission District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_to_haight = 12  # minutes\ntravel_time_to_mission = 11  # minutes\njoshua_start_time = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\njoshua_end_time = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\nmin_meeting_duration = 75  # minutes\n\n# Calculate times\ntime_to_haight = arrival_time + timedelta(minutes=travel_time_to_haight)\ntime_to_mission_back = time_to_haight + timedelta(minutes=travel_time_to_mission)\n\n# Schedule dictionary\nschedule = []\n\n# Start at Mission District\nschedule.append({\"action\": \"start\", \"location\": \"Mission District\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n# Travel to Haight-Ashbury\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Haight-Ashbury\",\n    \"duration\": travel_time_to_haight,\n    \"time\": time_to_haight.strftime(\"%I:%M%p\"),\n    \"to\": \"Haight-Ashbury\"\n})\n\n# Check if we can meet Joshua\nif time_to_haight <= joshua_start_time:\n    wait_time = (joshua_start_time - time_to_haight).total_seconds() // 60\n    if wait_time > 0:\n        # Wait until Joshua is available\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Haight-Ashbury\",\n            \"time\": joshua_start_time.strftime(\"%I:%M%p\")\n        })\n        time_meet_start = joshua_start_time\n    else:\n        time_meet_start = time_to_haight\n    \n    # Calculate end meeting time\n    time_meet_end = time_meet_start + timedelta(minutes=min_meeting_duration)\n\n    # Check if meeting can fit before Joshua's end time\n    if time_meet_end <= joshua_end_time:\n        # Meet Joshua\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": min_meeting_duration,\n            \"time\": time_meet_start.strftime(\"%I:%M%p\")\n        })\n        \n        # Travel back to Mission District\n        time_back_start = time_meet_end + timedelta(minutes=travel_time_to_mission)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time_to_mission,\n            \"time\": time_back_start.strftime(\"%I:%M%p\"),\n            \"to\": \"Mission District\"\n        })\n\n# Convert the schedule to JSON format\nschedule_json = json.dumps({\"schedule\": schedule}, indent=2)\nprint(schedule_json)\n```",
            "count": "meeting_planning_example_80",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "12:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(time):\n    return time.strftime('%I:%M%p')\n\ndef compute_meeting_schedule():\n    # Constants\n    travel_time_to_alamo = 13  # minutes\n    travel_time_to_richmond = 12  # minutes\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    betty_start_time = datetime.strptime(\"12:30PM\", \"%I:%M%p\")\n    betty_end_time = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    minimum_meeting_duration = 75  # minutes\n\n    # Calculate time when we can start traveling to Alamo Square\n    travel_to_alamo_start_time = arrival_time + timedelta(minutes=travel_time_to_alamo)\n\n    # Calculate when we can start meeting Betty\n    if travel_to_alamo_start_time < betty_start_time:\n        wait_time = betty_start_time - travel_to_alamo_start_time\n        meeting_start_time = betty_start_time\n    else:\n        wait_time = timedelta(0)\n        meeting_start_time = travel_to_alamo_start_time\n\n    # Calculate the end time for the meeting\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n\n    if meeting_end_time > betty_end_time:\n        # Unable to meet Betty, since the meeting would end after she leaves\n        return None\n\n    # Calculate travel back time\n    travel_back_start_time = meeting_end_time + timedelta(minutes=travel_time_to_richmond)\n\n    # Build the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time_to_alamo, \"time\": format_time(travel_to_alamo_start_time), \"to\": \"Alamo Square\"},\n        {\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": format_time(meeting_start_time)},\n        {\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": minimum_meeting_duration, \"time\": format_time(meeting_start_time)}\n    ]\n\n    return {\n        \"schedule\": schedule\n    }\n\nif __name__ == \"__main__\":\n    schedule = compute_meeting_schedule()\n    if schedule:\n        print(json.dumps(schedule, indent=2))\n    else:\n        print(json.dumps({\"error\": \"Unable to meet Betty within the given constraints.\"}, indent=2))\n```",
            "count": "meeting_planning_example_81",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "5:45PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "7:09PM",
                    "duration": 9,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "5:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nashley_start_time = datetime.strptime(\"5:45PM\", \"%I:%M%p\")\nashley_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\nminimum_meeting_duration = 75  # in minutes\ntravel_time_golden_gate_to_alamo = 10  # in minutes\ntravel_time_alamo_to_golden_gate = 9  # in minutes\n\n# Function to find the optimal meeting schedule\ndef compute_meeting_schedule():\n    # Initial state\n    current_time = arrival_time\n    schedule = []\n    \n    # First action\n    schedule.append({\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to Alamo Square\n    current_time += timedelta(minutes=travel_time_golden_gate_to_alamo)\n    schedule.append({\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time_golden_gate_to_alamo, \n                     \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Alamo Square\"})\n    \n    # Wait until Ashley is available\n    if current_time < ashley_start_time:\n        wait_duration = (ashley_start_time - current_time).total_seconds() / 60\n        current_time = ashley_start_time\n        schedule.append({\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": current_time.strftime(\"%I:%M%p\")})\n\n    # Meeting with Ashley\n    if current_time + timedelta(minutes=minimum_meeting_duration) <= ashley_end_time:\n        current_time += timedelta(minutes=minimum_meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": minimum_meeting_duration, \n                         \"time\": (current_time - timedelta(minutes=minimum_meeting_duration)).strftime(\"%I:%M%p\")})\n        \n        # Return to Golden Gate Park\n        current_time += timedelta(minutes=travel_time_alamo_to_golden_gate)\n        schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time_alamo_to_golden_gate, \n                         \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    \n    return {\"schedule\": schedule}\n\n# Get the optimal meeting schedule\noptimal_schedule = compute_meeting_schedule()\n\n# Print the result as a JSON formatted dictionary\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_82",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "10:30AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n}\n\n# Meeting constraints\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ncarol_start_time = datetime.strptime(\"9:45AM\", \"%I:%M%p\")\ncarol_end_time = datetime.strptime(\"10:30AM\", \"%I:%M%p\")\nminimum_meeting_duration = 45  # in minutes\n\n# Calculate optimal schedule\ndef compute_schedule():\n    schedule = []\n    \n    # Start at Presidio\n    current_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": \"Presidio\", \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to Golden Gate Park\n    travel_time_to_golden_gate = travel_times[(\"Presidio\", \"Golden Gate Park\")]\n    current_time += timedelta(minutes=travel_time_to_golden_gate)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \n                     \"duration\": travel_time_to_golden_gate, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    \n    # Wait until Carol is available\n    if current_time < carol_start_time:\n        wait_time = (carol_start_time - current_time).total_seconds() / 60  # in minutes\n        current_time = carol_start_time\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Meeting with Carol\n    meeting_duration = min(carol_end_time - current_time, timedelta(minutes=minimum_meeting_duration)).total_seconds() / 60\n    if meeting_duration >= minimum_meeting_duration:\n        current_time += timedelta(minutes=minimum_meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Golden Gate Park\", \n                         \"duration\": minimum_meeting_duration, \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    return {\"schedule\": schedule}\n\noptimal_schedule = compute_schedule()\n\n# Output the result in JSON format\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_83",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:05AM",
                    "duration": 5,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 5,
                    "time": "9:05AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nthomas_start_time = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\nthomas_end_time = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\ntravel_time = 5  # travel time in minutes\nmeeting_duration = 30  # minimum meeting duration in minutes\n\n# Function to create the schedule\ndef create_schedule():\n    schedule = []\n    \n    # Start at Alamo Square\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Alamo Square\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel to Haight-Ashbury\n    travel_to_haight_time = arrival_time + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time,\n        \"time\": travel_to_haight_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n    \n    # Wait until Thomas is available\n    wait_time = max(thomas_start_time, travel_to_haight_time)\n    if wait_time > travel_to_haight_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Haight-Ashbury\",\n            \"time\": wait_time.strftime(\"%I:%M%p\")\n        })\n    \n        # Compute the time after waiting\n        waiting_duration = (wait_time - travel_to_haight_time).total_seconds() / 60\n        wait_end_time = wait_time + timedelta(minutes=waiting_duration)\n\n    # Meet Thomas if the schedule allows\n    meet_start_time = max(thomas_start_time, wait_end_time if 'wait' in locals() else travel_to_haight_time)\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    \n    # Ensure the meeting ends before Thomas leaves\n    if meet_end_time <= thomas_end_time:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": meeting_duration,\n            \"time\": meet_start_time.strftime(\"%I:%M%p\")\n        })\n    \n    return {\"schedule\": schedule}\n\n# Create the schedule\noptimal_schedule = create_schedule()\n\n# Output the result as JSON\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_84",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:04AM",
                    "duration": 4,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "1:15PM",
                    "duration": 15.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 4,
                    "time": "9:04AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define input parameters\ntravel_times = {\n    (\"North Beach\", \"Russian Hill\"): 4,\n    (\"Russian Hill\", \"North Beach\"): 5,\n}\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nwilliam_avail_start = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\nwilliam_avail_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\nmin_meeting_duration = timedelta(minutes=15)\n\n# Initialize the schedule\nschedule = []\ncurrent_time = arrival_time\ncurrent_location = \"North Beach\"\n\n# Attempt to meet William\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\n# Travel to Russian Hill to try and meet William\ndef travel(to_location):\n    global current_time, current_location\n    duration = travel_times[(current_location, to_location)]\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": to_location,\n        \"duration\": duration,\n        \"time\": format_time(current_time + timedelta(minutes=duration)),\n        \"to\": to_location\n    })\n    current_time += timedelta(minutes=duration)\n    current_location = to_location\n\n# Check for the possibility of meeting William\ntravel(\"Russian Hill\")\n\n# Determine valid meeting start time\nif current_time < william_avail_start:\n    wait_time = william_avail_start - current_time\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Russian Hill\",\n        \"time\": format_time(current_time + wait_time),\n    })\n    current_time += wait_time\n\n# Now check if there's time to meet William\nmeeting_can_start = current_time\nmeeting_can_end = william_avail_end\n\nif meeting_can_start + min_meeting_duration <= meeting_can_end:\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": min_meeting_duration.total_seconds() // 60,\n        \"time\": format_time(current_time),\n    })\n    current_time += min_meeting_duration\n\n# Complete the schedule in JSON formatted output\noutput_schedule = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output_schedule, indent=2))\n```",
            "count": "meeting_planning_example_85",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "7:45PM"
                }
            ],
            "type_error": "SyntaxError",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants\nTRAVEL_TIME_MARINA_TO_NOB_HILL = 12  # in minutes\nTRAVEL_TIME_NOB_HILL_TO_MARINA = 11   # in minutes\nMEETING_DURATION_MIN = 15              # in minutes\nARRIVAL_TIME_MARINA = \"9:00AM\"         # arrival at Marina District\nDANIEL_AVAILABLE_START = \"7:45PM\"      # Daniel's availability start\nDANIEL_AVAILABLE_END = \"9:00PM\"        # Daniel's availability end\n\ndef convert_to_datetime(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef convert_to_time_str(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef calculate_schedule():\n    arrival_time = convert_to_datetime(ARRIVAL_TIME_MARINA)\n    available_start = convert_to_datetime(DANIEL_AVAILABLE_START)\n    available_end = convert_to_datetime(DANIEL_AVAILABLE_END)\n\n    # Best schedule initialized as empty\n    best_schedule = None\n    best_meeting_time = None\n\n    # Check if we can meet Daniel within his available time\n    # We can consider different possible meeting times, ensuring we get there in time \n    for meeting_time in range(available_start.minute, available_end.minute + 1):\n        # Meeting time as datetime\n        meeting_datetime = available_start.replace(minute=meeting_time)\n\n        # Calculate the time when we need to leave to meet him\n        leave_time = meeting_datetime - timedelta(minutes=MEETING_DURATION_MIN) - timedelta(minutes=TRAVEL_TIME_MARINA_TO_NOB_HILL)\n        \n        # Check if we can leave at this time after arriving at Marina\n        if leave_time >= arrival_time:\n            meeting_start_time = leave_time + timedelta(minutes=TRAVEL_TIME_MARINA_TO_NOB_HILL)\n            current_schedule = [\n                {\"action\": \"start\", \"location\": \"Marina District\", \"time\": convert_to_time_str(arrival_time)},\n                {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": TRAVEL_TIME_MARINA_TO_NOB_HILL, \"time\": convert_to_time_str(meeting_start_time), \"to\": \"Nob Hill\"},\n                {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": convert_to_time_str(meeting_start_time)},\n                {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": MEETING_DURATION_MIN, \"time\": convert_to_time_str(meeting_datetime)}\n            }\n\n            # Update the best schedule\n            if best_schedule is None or meeting_datetime < best_meeting_time:\n                best_schedule = current_schedule\n                best_meeting_time = meeting_datetime\n\n    return {\"schedule\": best_schedule}\n\n# Calculate the optimal schedule\noptimal_schedule = calculate_schedule()\n\n# Output the result as a JSON-formatted dictionary\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_86",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "9:11AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "10:26AM",
                    "duration": 10,
                    "to": "Embarcadero"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 75,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants\ntravel_time_embarcadero_to_pacific_heights = 11\ntravel_time_pacific_heights_to_embarcadero = 10\narrival_time_embarcadero = datetime.strptime(\"9:00 AM\", \"%I:%M %p\")\njames_availability_start = datetime.strptime(\"8:30 AM\", \"%I:%M %p\")\njames_availability_end = datetime.strptime(\"3:00 PM\", \"%I:%M %p\")\nminimum_meeting_duration = 75  # in minutes\n\n# Function to calculate schedule\ndef compute_schedule():\n    schedule = []\n\n    # Step 1: Start at Embarcadero\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Embarcadero\",\n        \"time\": arrival_time_embarcadero.strftime(\"%I:%M%p\")\n    })\n\n    # Step 2: Travel to Pacific Heights\n    departure_time = arrival_time_embarcadero\n    arrival_time_ph = departure_time + timedelta(minutes=travel_time_embarcadero_to_pacific_heights)\n    if arrival_time_ph < james_availability_start:\n        # Wait if we arrive before James is available\n        wait_duration = (james_availability_start - arrival_time_ph).seconds // 60\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time_embarcadero_to_pacific_heights,\n            \"time\": departure_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Pacific Heights\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": james_availability_start.strftime(\"%I:%M%p\")\n        })\n        # Update the arrival time to when James is available\n        arrival_time_ph = james_availability_start\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Pacific Heights\",\n            \"duration\": travel_time_embarcadero_to_pacific_heights,\n            \"time\": departure_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Pacific Heights\"\n        })\n\n    # Step 3: Meet James\n    meeting_end_time = arrival_time_ph + timedelta(minutes=minimum_meeting_duration)\n    if meeting_end_time > james_availability_end:\n        # Adjust meeting duration if it goes past James's availability\n        meeting_duration = (james_availability_end - arrival_time_ph).seconds // 60\n    else:\n        meeting_duration = minimum_meeting_duration\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": arrival_time_ph.strftime(\"%I:%M%p\")\n    })\n\n    # Step 4: Travel back to Embarcadero\n    meeting_end_time = arrival_time_ph + timedelta(minutes=meeting_duration)\n    departure_time_ph = meeting_end_time\n    arrival_time_embarcadero_return = departure_time_ph + timedelta(minutes=travel_time_pacific_heights_to_embarcadero)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_time_pacific_heights_to_embarcadero,\n        \"time\": departure_time_ph.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n\n    # Convert schedule to JSON format\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\n# Output the computed schedule\nif __name__ == \"__main__\":\n    optimal_schedule = compute_schedule()\n    print(optimal_schedule)\n```",
            "count": "meeting_planning_example_87",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "8:45PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 15,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p')\n\n# Travel times in minutes\ntravel_time_to_ggp = 11\ntravel_time_from_ggp = 10\n\n# Define arrival time in Sunset District\narrival_time_sunset = datetime.strptime('9:00AM', '%I:%M%p')\n\n# Joshua's availability\njoshua_start_time = datetime.strptime('8:45PM', '%I:%M%p')\njoshua_end_time = datetime.strptime('9:45PM', '%I:%M%p')\n\n# Meeting duration required\nmeeting_duration = 15\n\n# Calculate possible meeting time window\noptimal_meeting_start = max(arrival_time_sunset + timedelta(minutes=travel_time_to_ggp), joshua_start_time)\noptimal_meeting_end = min(optimal_meeting_start + timedelta(minutes=meeting_duration), joshua_end_time)\n\n# If the meeting is possible, create the schedule\nif optimal_meeting_start + timedelta(minutes=meeting_duration) <= joshua_end_time:\n    meeting_start_time = optimal_meeting_start\n    meeting_end_time = optimal_meeting_start + timedelta(minutes=meeting_duration)\n\n    # Create the schedule steps\n    schedule = [\n        {\n            \"action\": \"start\",\n            \"location\": \"Sunset District\",\n            \"time\": format_time(arrival_time_sunset)\n        },\n        {\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": travel_time_to_ggp,\n            \"time\": format_time(arrival_time_sunset + timedelta(minutes=travel_time_to_ggp)),\n            \"to\": \"Golden Gate Park\"\n        },\n        {\n            \"action\": \"wait\",\n            \"location\": \"Golden Gate Park\",\n            \"time\": format_time(meeting_start_time)\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": meeting_duration,\n            \"time\": format_time(meeting_start_time)\n        }\n    ]\n\n    # Prepare the final output\n    result = {\"schedule\": schedule}\nelse:\n    result = {\"schedule\": []}  # No possible schedule\n\n# Convert the result to JSON and print\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_88",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "6:00PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "7:13PM",
                    "duration": 13,
                    "to": "Mission District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 60,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input Variables\ntravel_time_mission_to_bayview = 15  # travel time from Mission District to Bayview in minutes\ntravel_time_bayview_to_mission = 13   # travel time from Bayview to Mission District in minutes\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\npatricia_start_time = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\npatricia_end_time = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\nrequired_meeting_duration = 60  # required meeting duration in minutes\n\n# Calculate possible schedule\ndef calculate_schedule():\n    schedule = []\n    \n    # Start in Mission District\n    current_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": \"Mission District\", \"time\": current_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to Bayview\n    travel_to_bayview_time = current_time + timedelta(minutes=travel_time_mission_to_bayview)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time_mission_to_bayview,\n        \"time\": travel_to_bayview_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n    \n    # Arrive at Bayview\n    current_time = travel_to_bayview_time\n    \n    # Wait until Patricia is available or if early, wait until 6:00 PM\n    if current_time < patricia_start_time:\n        wait_duration = (patricia_start_time - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": patricia_start_time.strftime(\"%I:%M%p\")\n        })\n        current_time = patricia_start_time\n    \n    # Calculate end time for the meeting\n    meeting_end_time = current_time + timedelta(minutes=required_meeting_duration)\n    \n    # Check if the meeting can be completed within Patricia's available time\n    if meeting_end_time <= patricia_end_time:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Bayview\",\n            \"duration\": required_meeting_duration,\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        \n        # Update current time after meeting\n        current_time = meeting_end_time\n        \n        # Travel back to Mission District\n        travel_back_time = current_time + timedelta(minutes=travel_time_bayview_to_mission)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Mission District\",\n            \"duration\": travel_time_bayview_to_mission,\n            \"time\": travel_back_time.strftime(\"%I:%M%p\"),\n            \"to\": \"Mission District\"\n        })\n        \n    else:\n        print(\"It is not possible to meet Patricia for the required duration.\")\n\n    return schedule\n\n# Generate the schedule\nschedule = calculate_schedule()\n\n# Format output as JSON\noutput = {\n    \"schedule\": schedule\n}\n\n# Output the JSON\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_89",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef main():\n    # Setup constants\n    travel_time_to_chinatown = 16\n    travel_time_to_alamo_square = 17\n    duration_meet = 15  # minimum meeting duration in minutes\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    laura_start = datetime.strptime('8:15AM', '%I:%M%p')\n    laura_end = datetime.strptime('6:45PM', '%I:%M%p')\n\n    # Calculate the earliest time you can arrive in Chinatown\n    arrival_at_chinatown = arrival_time + timedelta(minutes=travel_time_to_chinatown)\n\n    # If you reach Chinatown after Laura has left, no meeting can occur\n    if arrival_at_chinatown >= laura_end:\n        print(json.dumps({\"schedule\": []}))\n        return\n\n    # Determine the possible meeting time\n    meeting_start = max(arrival_at_chinatown, laura_start)\n    meeting_end = laura_end\n\n    # Ensure that you can meet for the required duration\n    if meeting_start + timedelta(minutes=duration_meet) > meeting_end:\n        print(json.dumps({\"schedule\": []}))\n        return\n\n    meeting_time = meeting_start\n    meeting_time_end = meeting_time + timedelta(minutes=duration_meet)\n\n    # Construct the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time_to_chinatown, \"time\": format_time(arrival_at_chinatown), \"to\": \"Chinatown\"},\n        {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": format_time(meeting_start)},\n        {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": duration_meet, \"time\": format_time(meeting_time)},\n    ]\n\n    # Output the schedule as JSON\n    output_json = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(output_json))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_90",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "5:31PM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "7:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "8:28PM",
                    "duration": 13,
                    "to": "Russian Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constraints and travel times\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_to_richmond = 14  # minutes\ntravel_to_russian_hill = 13  # minutes\ndaniel_start_time = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\ndaniel_end_time = datetime.strptime(\"8:15PM\", \"%I:%M%p\")\nmeet_duration = 75  # minutes\n\n# Calculate the feasible meeting time range with Daniel\nlatest_departure_time = daniel_start_time - timedelta(minutes=travel_to_richmond)  # Must leave Richmond by this time\nearliest_arrival_time = latest_departure_time - timedelta(minutes=meet_duration)  # Must arrive by this latest departure time\n\n# Calculate schedule\nschedule = []\ncurrent_time = arrival_time\n\n# Start at Russian Hill\nschedule.append({\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": current_time.strftime(\"%I:%M%p\")})\n\n# Determine when to travel to Richmond\nif current_time < earliest_arrival_time:\n    travel_start_time = earliest_arrival_time  # We want to get there as soon as we can\nelse:\n    travel_start_time = current_time  \n\n# Travel to Richmond\ncurrent_time = travel_start_time + timedelta(minutes=travel_to_richmond)\nschedule.append({\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_to_richmond, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Richmond District\"})\n\n# Wait until Daniel arrives\nwait_duration = (daniel_start_time - current_time).total_seconds() / 60\nif wait_duration > 0:\n    schedule.append({\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": current_time.strftime(\"%I:%M%p\")})\n    current_time += timedelta(minutes=wait_duration)\n\n# Meet Daniel\nschedule.append({\"action\": \"meet\", \"location\": \"Richmond District\", \"duration\": meet_duration, \"time\": current_time.strftime(\"%I:%M%p\")})\ncurrent_time += timedelta(minutes=meet_duration)\n\n# Travel back to Russian Hill\ncurrent_time = current_time + timedelta(minutes=travel_to_russian_hill)\nschedule.append({\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_to_russian_hill, \"time\": current_time.strftime(\"%I:%M%p\"), \"to\": \"Russian Hill\"})\n\n# Output result as a JSON-formatted dictionary\nresult = {\"schedule\": schedule}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_91",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "2:00PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 45,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define the constants for the meeting planner\nTRAVEL_TIME_FD_TO_CASTRO = 23  # Financial District to The Castro\nTRAVEL_TIME_CASTRO_TO_FD = 20  # The Castro to Financial District\nCAROL_ARRIVAL = datetime.strptime(\"14:00\", \"%H:%M\")\nCAROL_DEPARTURE = datetime.strptime(\"17:45\", \"%H:%M\")\nMEETING_DURATION = timedelta(minutes=45)\n\n# Starting time when arriving at Financial District\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nschedule = []\n\n# Schedule the day\ncurrent_time = start_time\n\n# Step 1: Start at Financial District\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Financial District\",\n    \"time\": current_time.strftime(\"%I:%M%p\")\n})\n\n# Step 2: Travel to The Castro (meeting Carol)\ncurrent_time += timedelta(minutes=TRAVEL_TIME_FD_TO_CASTRO)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"The Castro\",\n    \"duration\": TRAVEL_TIME_FD_TO_CASTRO,\n    \"time\": current_time.strftime(\"%I:%M%p\"),\n    \"to\": \"The Castro\"\n})\n\n# Step 3: Wait until Carol is available\nif current_time < CAROL_ARRIVAL:\n    wait_time = (CAROL_ARRIVAL - current_time).total_seconds() / 60\n    current_time += timedelta(minutes=wait_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"The Castro\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n# Step 4: Meet Carol\nmeeting_start = current_time\nmeeting_end = meeting_start + MEETING_DURATION\n\n# Check if the meeting can happen within Carol's availability\nif meeting_start >= CAROL_ARRIVAL and meeting_end <= CAROL_DEPARTURE:\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": 45,\n        \"time\": meeting_start.strftime(\"%I:%M%p\")\n    })\n\n# Convert schedule to JSON format\nschedule_output = {\"schedule\": schedule}\nprint(json.dumps(schedule_output, indent=2))\n```",
            "count": "meeting_planning_example_92",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:06AM",
                    "duration": 6,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "7:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 6,
                    "time": "9:06AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input variables\narrival_time_str = \"9:00AM\"\nnorth_beach_to_chinatown = 6  # minutes\nchinatown_to_north_beach = 3   # minutes\nemily_start_time_str = \"7:00PM\"\nemily_end_time_str = \"9:00PM\"\nminimum_meeting_duration = 75  # minutes\n\n# Parse input times\narrival_time = datetime.strptime(arrival_time_str, \"%I:%M%p\")\nemily_start_time = datetime.strptime(emily_start_time_str, \"%I:%M%p\")\nemily_end_time = datetime.strptime(emily_end_time_str, \"%I:%M%p\")\n\n# Calculate the time Emily is available for meeting\navailable_meeting_start = max(arrival_time + timedelta(minutes=north_beach_to_chinatown), emily_start_time)\navailable_meeting_end = min(emily_end_time, available_meeting_start + timedelta(minutes=minimum_meeting_duration))\n\n# Prepare schedule structure\nschedule = []\ncurrent_time = arrival_time\n\n# Start at North Beach\nschedule.append({\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n# Travel to Chinatown\ncurrent_time += timedelta(minutes=north_beach_to_chinatown)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Chinatown\",\n    \"duration\": north_beach_to_chinatown,\n    \"time\": current_time.strftime(\"%I:%M%p\"),\n    \"to\": \"Chinatown\"\n})\n\n# Wait until Emily is available\nif current_time < available_meeting_start:\n    wait_time = (available_meeting_start - current_time).total_seconds() / 60\n    current_time = available_meeting_start\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Chinatown\",\n        \"time\": available_meeting_start.strftime(\"%I:%M%p\")\n    })\n\n# Meet Emily\nmeeting_duration = min((emily_end_time - current_time).total_seconds() / 60, minimum_meeting_duration)\ncurrent_time += timedelta(minutes=meeting_duration)\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": \"Chinatown\",\n    \"duration\": meeting_duration,\n    \"time\": (current_time - timedelta(minutes=meeting_duration)).strftime(\"%I:%M%p\")\n})\n\n# Complete schedule\nschedule_json = {\n    \"schedule\": schedule\n}\n\n# Output the result in JSON format\nprint(json.dumps(schedule_json, indent=2))\n```",
            "count": "meeting_planning_example_93",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:15AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define input parameters\narrival_time = '9:00AM'\ntravel_time_to_russian_hill = 13  # minutes\njames_meeting_start = '11:15AM'\njames_meeting_end = '12:00PM'\nminimum_meeting_duration = 15  # minutes\n\n# Convert time to datetime objects for easier manipulation\narrival_time_dt = datetime.strptime(arrival_time, '%I:%M%p')\njames_meeting_start_dt = datetime.strptime(james_meeting_start, '%I:%M%p')\njames_meeting_end_dt = datetime.strptime(james_meeting_end, '%I:%M%p')\n\n# Compute the schedule\ndef compute_schedule():\n    schedule = []\n    \n    # Start at Alamo Square\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Alamo Square\",\n        \"time\": arrival_time\n    })\n    \n    # Travel to Russian Hill\n    travel_time_dt = arrival_time_dt + timedelta(minutes=travel_time_to_russian_hill)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time_to_russian_hill,\n        \"time\": travel_time_dt.strftime('%I:%M%p'),\n        \"to\": \"Russian Hill\"\n    })\n    \n    # Arrive at Russian Hill\n    arrival_russian_hill_dt = travel_time_dt\n    \n    # Wait until James is available\n    if arrival_russian_hill_dt < james_meeting_start_dt:\n        wait_time_dt = james_meeting_start_dt\n        wait_duration = (wait_time_dt - arrival_russian_hill_dt).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": wait_time_dt.strftime('%I:%M%p')\n        })\n\n        # After waiting, start meeting if there is enough time\n        meeting_start_dt = wait_time_dt\n    else:\n        meeting_start_dt = arrival_russian_hill_dt\n    \n    # Check if there's enough time to meet James\n    end_time_for_meeting = meeting_start_dt + timedelta(minutes=minimum_meeting_duration)\n    \n    if end_time_for_meeting <= james_meeting_end_dt:\n        meeting_duration = minimum_meeting_duration\n        meeting_end_dt = meeting_start_dt + timedelta(minutes=meeting_duration)\n\n        # Schedule the meeting\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Russian Hill\",\n            \"duration\": meeting_duration,\n            \"time\": meeting_start_dt.strftime('%I:%M%p')\n        })\n\n    return {\"schedule\": schedule}\n\n# Generate the schedule\noptimal_schedule = compute_schedule()\n\n# Output the resulting schedule as JSON\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_94",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "11:00AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "12:30PM",
                    "duration": 21,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_to_bayview = timedelta(minutes=22)\ntravel_to_north_beach = timedelta(minutes=21)\nsteven_start = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\nsteven_end = datetime.strptime(\"12:45PM\", \"%I:%M%p\")\nrequired_meeting_duration = timedelta(minutes=90)\n\n# Options for scheduling the meeting\nschedule = []\n\n# You start at North Beach\ncurrent_time = arrival_time\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"North Beach\",\n    \"time\": current_time.strftime(\"%I:%M%p\")\n})\n\n# Travel to Bayview\ncurrent_time += travel_to_bayview\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Bayview\",\n    \"duration\": 22,\n    \"time\": current_time.strftime(\"%I:%M%p\"),\n    \"to\": \"Bayview\"\n})\n\n# You arrive in Bayview\narrival_at_bayview = current_time\n\n# Check if you can meet Steven\nmeeting_start_time = max(arrival_at_bayview, steven_start)\nmeeting_end_time = meeting_start_time + required_meeting_duration\n\nif meeting_end_time <= steven_end:\n    # The meeting can be arranged\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": 90,\n        \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n    })\n    \n    # After the meeting, you can travel back to North Beach\n    current_time = meeting_end_time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": 21,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"North Beach\"\n    })\nelse:\n    # If you can't meet Steven, create a null meeting record\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Bayview\",\n        \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n    })\n\n# Final output\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_95",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:27AM",
                    "duration": 27,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:27AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 27,
                    "time": "9:27AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 30,
                    "time": "9:27AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_to_nob_hill = 27  # in minutes\ntravel_time_to_sunset_district = 25  # in minutes\nmeeting_duration = 30  # minimum meeting time in minutes\nrebecca_availability_start = arrival_time  # 9:00AM\nrebecca_availability_end = datetime.strptime(\"6:15PM\", \"%I:%M%p\")  # 6:15PM\n\n# Calculate optimal meeting schedule\ndef compute_schedule():\n    # Calculate the travel time to Nob Hill\n    travel_arrival_time = arrival_time + timedelta(minutes=travel_time_to_nob_hill)\n    \n    # If we reach Nob Hill before Rebecca is available, we wait\n    if travel_arrival_time < rebecca_availability_start:\n        wait_time = (rebecca_availability_start - travel_arrival_time).total_seconds() / 60\n        travel_arrival_time = rebecca_availability_start\n    else:\n        wait_time = 0\n    \n    # Calculate when we can start the meeting\n    meeting_start_time = travel_arrival_time\n    \n    # Calculate when the meeting can end\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n    # Check if the meeting ends before Rebecca leaves\n    if meeting_end_time > rebecca_availability_end:\n        # Adjust meeting end time to the end of Rebecca's availability\n        meeting_end_time = rebecca_availability_end\n        meeting_duration_adjusted = (meeting_end_time - meeting_start_time).total_seconds() / 60\n    else:\n        meeting_duration_adjusted = meeting_duration\n\n    # Create the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Sunset District\", \"time\": arrival_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time_to_nob_hill, \"time\": travel_arrival_time.strftime(\"%I:%M%p\"), \"to\": \"Nob Hill\"},\n        {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": (meeting_start_time.strftime(\"%I:%M%p\") if wait_time > 0 else \"\")},\n        {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration_adjusted, \"time\": meeting_start_time.strftime(\"%I:%M%p\")}\n    ]\n\n    return {\"schedule\": schedule}\n\n# Run the function and print the JSON output\noptimal_schedule = compute_schedule()\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_96",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "6:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "7:35PM",
                    "duration": 20,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define constants\nTRAVEL_TIME_CHINATOWN_TO_RICHMOND = 20  # in minutes\nTRAVEL_TIME_RICHMOND_TO_CHINATOWN = 20  # in minutes\nCHARLES_START_TIME = datetime.strptime(\"18:00\", \"%H:%M\")\nCHARLES_END_TIME = datetime.strptime(\"21:00\", \"%H:%M\")\nMIN_MEETING_DURATION = 75  # in minutes\n\n# Function to create the schedule\ndef create_schedule():\n    # Starting time: arrival at Chinatown\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    current_time = start_time\n    \n    schedule = []\n    \n    # Plan initial travel to Richmond District after some time in Chinatown\n    # We will consider waiting and meeting throughout the day\n    # 1. Travel to Richmond District\n    travel_to_richmond_time = current_time + timedelta(minutes=TRAVEL_TIME_CHINATOWN_TO_RICHMOND)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": TRAVEL_TIME_CHINATOWN_TO_RICHMOND,\n        \"time\": travel_to_richmond_time.strftime('%I:%M%p'),\n        \"to\": \"Richmond District\"\n    })\n    \n    # 2. Arrive at Richmond District\n    current_time = travel_to_richmond_time\n    \n    # 3. Wait until Charles arrives\n    wait_until_charles_time = CHARLES_START_TIME\n    if current_time < wait_until_charles_time:\n        waiting_duration = (wait_until_charles_time - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Richmond District\",\n            \"time\": wait_until_charles_time.strftime('%I:%M%p')\n        })\n        current_time = wait_until_charles_time\n\n    # 4. Meet Charles for the minimum required time\n    meeting_end_time = current_time + timedelta(minutes=MIN_MEETING_DURATION)\n    \n    if meeting_end_time <= CHARLES_END_TIME:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Richmond District\",\n            \"duration\": MIN_MEETING_DURATION,\n            \"time\": current_time.strftime('%I:%M%p')\n        })\n        current_time = meeting_end_time\n        \n        # 5. Travel back to Chinatown\n        travel_back_time = current_time + timedelta(minutes=TRAVEL_TIME_RICHMOND_TO_CHINATOWN)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Chinatown\",\n            \"duration\": TRAVEL_TIME_RICHMOND_TO_CHINATOWN,\n            \"time\": travel_back_time.strftime('%I:%M%p'),\n            \"to\": \"Chinatown\"\n        })\n    \n    # Convert to JSON\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\n# Run the scheduling function and print the result\nif __name__ == \"__main__\":\n    result = create_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_97",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:13AM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = \"9:00AM\"\ntimothy_availability_start = \"8:45PM\"\ntimothy_availability_end = \"9:30PM\"\nminimum_meeting_duration = 45\ntravel_time_to_richmond = 12  # minutes\ntravel_time_to_alamo = 13      # minutes\n\n# Convert strings to datetime objects\narrival_datetime = datetime.strptime(arrival_time, \"%I:%M%p\")\ntimothy_start_datetime = datetime.strptime(timothy_availability_start, \"%I:%M%p\")\ntimothy_end_datetime = datetime.strptime(timothy_availability_end, \"%I:%M%p\")\n\n# Calculate the end time based on minimum meeting duration\nmeeting_start_time = timothy_start_datetime\nmeeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n\n# Check for availability\nif meeting_end_time > timothy_end_datetime or arrival_datetime >= timothy_end_datetime:\n    schedule = {\n        \"schedule\": []\n    }\nelse:\n    travel_start_time = arrival_datetime + timedelta(minutes=travel_time_to_alamo)\n    \n    if travel_start_time < timothy_start_datetime:\n        # We can wait at Alamo Square until Timothy's meeting window opens\n        wait_time = (timothy_start_datetime - travel_start_time).total_seconds() / 60\n        travel_to_timothy_time = travel_start_time + timedelta(minutes=wait_time)\n        \n        # Start meeting\n        meet_start_time = max(travel_to_timothy_time, timothy_start_datetime)\n        \n        # Final decisions\n        if meet_start_time + timedelta(minutes=minimum_meeting_duration) <= timothy_end_datetime:\n            travel_to_richmond_duration = travel_time_to_richmond\n            \n            schedule = {\n                \"schedule\": [\n                    {\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time},\n                    {\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_time_to_alamo, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Richmond District\"},\n                    {\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": travel_start_time.strftime(\"%I:%M%p\")},\n                    {\"action\": \"meet\", \"location\": \"Richmond District\", \"duration\": minimum_meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")}\n                ]\n            }\n        else:\n            schedule = {\n                \"schedule\": []\n            }\n    else:\n        # Directly go to Timothy's location if time permits\n        if arrival_datetime + timedelta(minutes=travel_time_to_richmond) <= timothy_end_datetime:\n            meet_start_time = max(arrival_datetime + timedelta(minutes=travel_time_to_richmond), timothy_start_datetime)\n            \n            schedule = {\n                \"schedule\": [\n                    {\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time},\n                    {\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_time_to_richmond, \"time\": (arrival_datetime + timedelta(minutes=travel_time_to_richmond)).strftime(\"%I:%M%p\"), \"to\": \"Richmond District\"},\n                    {\"action\": \"meet\", \"location\": \"Richmond District\", \"duration\": minimum_meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")}\n                ]\n            }\n        else:\n            schedule = {\n                \"schedule\": []\n            }\n\n# Output result as JSON\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_98",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:13AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "1:15PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define input parameters\nstart_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_time_to_union_square = 13\ntravel_time_to_fisherman_wharf = 15\nkevin_start_time = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\nkevin_end_time = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\nminimum_meeting_duration = 15  # in minutes\n\n# Calculate potential times to meet Kevin\narrival_at_union_square = start_time + timedelta(minutes=travel_time_to_union_square)\n\n# Initialize the schedule\nschedule = []\n\n# Starting at Fisherman's Wharf\nschedule.append({\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": start_time.strftime(\"%I:%M%p\")})\n\n# Travel to Union Square\nschedule.append({\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time_to_union_square,\n                 \"time\": arrival_at_union_square.strftime(\"%I:%M%p\"), \"to\": \"Union Square\"})\n\n# If we arrive at Union Square before Kevin, we wait\nif arrival_at_union_square < kevin_start_time:\n    wait_time_start = arrival_at_union_square\n    wait_time_end = kevin_start_time\n    wait_duration = (wait_time_end - wait_time_start).total_seconds() / 60\n\n    # Waiting at Union Square\n    schedule.append({\"action\": \"wait\", \"location\": \"Union Square\", \"time\": wait_time_start.strftime(\"%I:%M%p\")})\n\n    # Now we can meet Kevin\n    meeting_start_time = kevin_start_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n\n    if meeting_end_time <= kevin_end_time:  # Check if we can meet within Kevin's availability\n        schedule.append({\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": minimum_meeting_duration,\n                         \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n# Return the schedule as a JSON formatted dictionary\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_99",
            "is_correct": false
        }
    ],
    "5shot": [
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "3:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 120,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0').replace('AM', 'AM').replace('PM', 'PM')\n\ndef calculate_meeting_schedule():\n    # Input parameters\n    travel_time_marina_to_alamo = 15\n    travel_time_alamo_to_marina = 15\n    arrival_at_marina = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    james_start = datetime.strptime(\"3:45PM\", \"%I:%M%p\")\n    james_end = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    james_meeting_duration = 75  # minutes\n\n    # Calculating schedule\n    schedule = []\n    \n    # Start at Marina District\n    current_time = arrival_at_marina\n    schedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": format_time(current_time)})\n\n    # Travel to Alamo Square\n    current_time += timedelta(minutes=travel_time_marina_to_alamo)\n    schedule.append({\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time_marina_to_alamo, \"time\": format_time(current_time), \"to\": \"Alamo Square\"})\n    \n    # Wait until James is available\n    wait_time = (james_start - current_time).total_seconds() / 60\n    current_time += timedelta(minutes=wait_time)\n    schedule.append({\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": format_time(current_time)})\n    \n    # Meet James\n    current_time += timedelta(minutes=james_meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": james_meeting_duration, \"time\": format_time(current_time - timedelta(minutes=james_meeting_duration))})\n\n    # Output the result as JSON\n    result = {\"schedule\": schedule}\n    return json.dumps(result, indent=4)\n\nprint(calculate_meeting_schedule())\n```",
            "count": "meeting_planning_example_0",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "5:15PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 60,
                    "time": "5:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting():\n    # Define constants\n    start_location = \"Richmond District\"\n    travel_to_financial_duration = 22\n    financial_location = \"Financial District\"\n    wait_start_time = \"5:15PM\"\n    wait_end_time = \"9:45PM\"\n    meeting_duration = 60  # minutes\n\n    # Start time\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n\n    # Travel to Financial District\n    travel_time = timedelta(minutes=travel_to_financial_duration)\n    arrival_time = start_time + travel_time\n\n    # Define wait time\n    wait_time_start = datetime.strptime(wait_start_time, \"%I:%M%p\")\n    wait_time_end = datetime.strptime(wait_end_time, \"%I:%M%p\")\n\n    # Waiting until the meeting time\n    if arrival_time < wait_time_start:\n        wait_time = wait_time_start\n    else:\n        wait_time = arrival_time\n\n    # Meeting time\n    meeting_start_time = wait_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n    # Check if meeting ends before allowed wait time\n    if meeting_end_time > wait_time_end:\n        return \"No valid schedule found within constraints\"\n\n    # Construct the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"travel\", \"location\": financial_location, \"duration\": travel_to_financial_duration, \"time\": arrival_time.strftime(\"%I:%M%p\"), \"to\": financial_location},\n        {\"action\": \"wait\", \"location\": financial_location, \"time\": wait_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"meet\", \"location\": financial_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")}\n    ]\n\n    # Output as JSON\n    result = {\"schedule\": schedule}\n    return json.dumps(result, indent=4)\n\n# Running the function and printing the output\nif __name__ == \"__main__\":\n    print(schedule_meeting())\n```",
            "count": "meeting_planning_example_1",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "3:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 90,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule():\n    # Input parameters\n    start_location = \"Haight-Ashbury\"\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    destination_location = \"Sunset District\"\n    travel_time_to_destination = 15\n    travel_time_back = 15\n    meeting_start_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    meeting_end_time = datetime.strptime(\"8:15PM\", \"%I:%M%p\")\n    min_meeting_duration = 90  # in minutes\n\n    # Compute arrival time at destination\n    arrival_time = start_time + timedelta(minutes=travel_time_to_destination)\n\n    # Compute waiting time until meeting\n    wait_time = (meeting_start_time - arrival_time).total_seconds() / 60\n\n    # Compute possible meeting start and end times\n    meeting_start = meeting_start_time\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n\n    # Check if the end of meeting is within available time\n    if meeting_end > meeting_end_time:\n        meeting_end = meeting_end_time\n        meeting_start = meeting_end - timedelta(minutes=min_meeting_duration)\n\n    # Build the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": destination_location, \"duration\": travel_time_to_destination, \"time\": format_time(arrival_time), \"to\": destination_location},\n        {\"action\": \"wait\", \"location\": destination_location, \"time\": format_time(meeting_start)},\n        {\"action\": \"meet\", \"location\": destination_location, \"duration\": min_meeting_duration, \"time\": format_time(meeting_start)}\n    ]\n\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\nif __name__ == \"__main__\":\n    schedule_json = calculate_schedule()\n    print(schedule_json)\n```",
            "count": "meeting_planning_example_2",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "11:30AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Function to format time in H:MMAM/PM format\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\n# Function to compute the optimal meeting schedule\ndef compute_meeting_schedule():\n    # Input parameters\n    travel_time_to_golden_gate = 22\n    travel_time_from_golden_gate = 23\n    \n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_name = \"Barbara\"\n    meeting_start = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    min_meeting_duration = 90  # minutes\n    \n    # Calculate the sequential schedule\n    travel_arrival = arrival_time + timedelta(minutes=travel_time_to_golden_gate)\n    \n    # Adjust the meeting end time for the minimum meeting duration\n    earliest_meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if we can fit the meeting within the available time\n    if travel_arrival < earliest_meeting_end:\n        synchronized_start = earliest_meeting_end\n    else:\n        synchronized_start = travel_arrival\n\n    if synchronized_start < meeting_end:\n        meeting_duration = (meeting_end - synchronized_start).seconds // 60\n        if meeting_duration >= min_meeting_duration:\n            meeting_duration = min(meeting_duration, (meeting_end - synchronized_start).seconds // 60)\n        else:\n            # Not enough time for the minimum duration\n            return {\"error\": \"Not enough time to meet for the minimum required duration.\"}\n        \n        meeting_end_time = synchronized_start + timedelta(minutes=meeting_duration)\n\n        # Create the schedule\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Bayview\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time_to_golden_gate, \"time\": format_time(travel_arrival), \"to\": \"Golden Gate Park\"},\n            {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": format_time(synchronized_start)},\n            {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": meeting_duration, \"time\": format_time(meeting_end_time)}\n        ]\n        \n        return {\"schedule\": schedule}\n    else:\n        return {\"error\": \"No valid meeting time available.\"}\n\n# Output the result as JSON\nresult = compute_meeting_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_3",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:15AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 60,
                    "time": "9:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(time):\n    return time.strftime('%I:%M%p').lstrip('0')\n\ndef compute_schedule():\n    # Define the parameters\n    arrival_time_location = \"Presidio\"\n    arrival_time = datetime.strptime('9:00 AM', '%I:%M %p')\n    travel_to_destination_minutes = 10\n    meeting_location = \"Marina District\"\n    meeting_start = datetime.strptime('9:15 AM', '%I:%M %p')\n    meeting_end = datetime.strptime('5:45 PM', '%I:%M %p')\n    desired_meeting_duration = 60\n\n    # Compute the arrival time at the destination\n    travel_time = timedelta(minutes=travel_to_destination_minutes)\n    arrival_at_destination = arrival_time + travel_time\n\n    # Plan the waiting period\n    wait_start = max(arrival_at_destination, meeting_start)\n    wait_end = meeting_end\n    \n    # Calculate the actual meeting timeline\n    # We can only meet if the meeting can be fit into the available window\n    duration_to_meet = min((wait_end - wait_start).seconds // 60, desired_meeting_duration)\n\n    if duration_to_meet < desired_meeting_duration:\n        raise ValueError(\"Can't meet the desired duration within the time limits.\")\n    \n    meeting_start_time = wait_start\n    meeting_end_time = meeting_start_time + timedelta(minutes=duration_to_meet)\n\n    # Build the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": arrival_time_location, \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_to_destination_minutes, \n         \"time\": format_time(arrival_at_destination), \"to\": meeting_location},\n        {\"action\": \"wait\", \"location\": meeting_location, \"time\": format_time(wait_start)},\n        {\"action\": \"meet\", \"location\": meeting_location, \"duration\": duration_to_meet, \n         \"time\": format_time(meeting_start_time)}\n    ]\n\n    # Return as JSON\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\n# Execute the function and print the output\nif __name__ == \"__main__\":\n    print(compute_schedule())\n```",
            "count": "meeting_planning_example_4",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:17AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 75,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_meeting_schedule():\n    # Input parameters\n    arrival_time_richmond = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    travel_time_to_north_beach = 17  # in minutes\n    john_start_time = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\n    john_end_time = datetime.strptime(\"2:45PM\", \"%I:%M%p\")\n    meeting_duration = 60  # in minutes\n\n    # Calculate arrival time at North Beach\n    travel_time = timedelta(minutes=travel_time_to_north_beach)\n    arrival_time_north_beach = arrival_time_richmond + travel_time\n\n    # Meeting feasibility check\n    meet_start_time = max(arrival_time_north_beach, john_start_time)\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n\n    if meet_end_time > john_end_time:\n        return {\"error\": \"Unable to schedule the meeting; constraints cannot be satisfied.\"}\n\n    # Constructing the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time_richmond.strftime(\"%I:%M%p\")},\n        {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time_to_north_beach, \"time\": arrival_time_north_beach.strftime(\"%I:%M%p\"), \"to\": \"North Beach\"},\n        {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": meet_start_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")}\n    ]\n\n    return {\n        \"schedule\": schedule\n    }\n\n# Generate the schedule and print the JSON output\nif __name__ == \"__main__\":\n    schedule = calculate_meeting_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_5",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "2:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 90,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef compute_schedule():\n    # Constants\n    travel_time_fw_to_nh = 11\n    travel_time_nh_to_fw = 11\n    travel_start_time_fw = datetime.strptime('9:00AM', '%I:%M%p')\n    \n    # Kenneth's availability\n    kenneth_start_time = datetime.strptime('2:15PM', '%I:%M%p')\n    kenneth_end_time = datetime.strptime('7:45PM', '%I:%M%p')\n    minimum_meeting_duration = 90  # in minutes\n    \n    # Calculating travel and waiting time\n    travel_arrival_time_nh = travel_start_time_fw + timedelta(minutes=travel_time_fw_to_nh)\n    \n    # Wait until Kenneth is available\n    wait_time = (kenneth_start_time - travel_arrival_time_nh).total_seconds() / 60\n    if wait_time < 0:\n        return None  # Not enough time to wait\n\n    # After waiting, scheduled meeting time\n    meeting_start_time = kenneth_start_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n    \n    # Check if meeting ends within Kenneth's available time\n    if meeting_end_time > kenneth_end_time:\n        return None  # Not enough time to meet\n\n    # Create schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": format_time(travel_start_time_fw)},\n        {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time_fw_to_nh, \"time\": format_time(travel_arrival_time_nh), \"to\": \"Nob Hill\"},\n        {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": format_time(travel_arrival_time_nh + timedelta(minutes=wait_time))},\n        {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": minimum_meeting_duration, \"time\": format_time(meeting_start_time)}\n    ]\n    \n    return {\"schedule\": schedule}\n\n# Generate the schedule\noptimal_schedule = compute_schedule()\n\n# Output result as JSON\nif optimal_schedule:\n    print(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_6",
            "is_correct": true
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_meeting_schedule():\n    # Input parameters\n    start_location = \"Richmond District\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    travel_time_to_north_beach = 17\n    travel_time_from_north_beach = 18\n    john_availability_start = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    john_availability_end = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\n    minimum_meeting_time = 75  # in minutes\n\n    # Calculate arrival at North Beach\n    travel_start_time = arrival_time + timedelta(minutes=travel_time_to_north_beach)\n    \n    # Check waiting time and meeting time\n    if travel_start_time < john_availability_start:\n        wait_time = (john_availability_start - travel_start_time).total_seconds() / 60\n    else:\n        wait_time = 0\n\n    meeting_start_time = john_availability_start + timedelta(minutes=0 if wait_time == 0 else wait_time)\n\n    if (john_availability_end - meeting_start_time).total_seconds() / 60 >= minimum_meeting_time:\n        meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_time)\n    else:\n        return None  # No valid meeting schedule\n\n    # Building the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time_to_north_beach, \"time\": format_time(travel_start_time), \"to\": \"North Beach\"},\n        {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": format_time(meeting_start_time)},\n        {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": minimum_meeting_time, \"time\": format_time(meeting_start_time)}\n    ]\n\n    return {\"schedule\": schedule}\n\n# Compute the schedule\noptimal_schedule = compute_meeting_schedule()\n\n# Output the result in JSON format\nif optimal_schedule:\n    print(json.dumps(optimal_schedule, indent=2))\nelse:\n    print(json.dumps({\"error\": \"No valid meeting schedule found\"}, indent=2))\n```",
            "count": "meeting_planning_example_7",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:12AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:12AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 105,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times and meeting constraints\ntravel_times = {\n    \"Chinatown to Marina District\": 12,\n    \"Marina District to Chinatown\": 16,\n}\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nStephanie_availability_start = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\nStephanie_availability_end = datetime.strptime(\"3:00PM\", \"%I:%M%p\")\nmeeting_duration = 105  # in minutes\n\n# Initialize the schedule\nschedule = []\n\n# Calculate travel time and arrival time at Marina District\ntravel_time_to_marina = travel_times[\"Chinatown to Marina District\"]\narrival_at_marina = arrival_time + timedelta(minutes=travel_time_to_marina)\n\n# Check if we can wait until Stephanie is available\nif arrival_at_marina < Stephanie_availability_start:\n    # Wait until Stephanie is available\n    wait_time = Stephanie_availability_start\nelse:\n    wait_time = arrival_at_marina\n\n# Calculate the end time of the meeting\nmeeting_start_time = wait_time\nmeeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n# Check if meeting ends before Stephanie is unavailable\nif meeting_end_time <= Stephanie_availability_end:\n    schedule.append({\"action\": \"start\", \"location\": \"Chinatown\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    schedule.append({\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": travel_time_to_marina,\n                     \"time\": arrival_at_marina.strftime(\"%I:%M%p\"), \"to\": \"Marina District\"})\n    schedule.append({\"action\": \"wait\", \"location\": \"Marina District\", \"time\": wait_time.strftime(\"%I:%M%p\")})\n    schedule.append({\"action\": \"meet\", \"location\": \"Marina District\", \"duration\": meeting_duration,\n                     \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n# Create the JSON output\noutput = {\n    \"schedule\": schedule\n}\n\n# Print the JSON output\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_8",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "12:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "12:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip(\"0\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef compute_meeting_schedule():\n    # Parameters\n    start_location = \"Union Square\"\n    travel_time_to_nob_hill = 9\n    travel_time_back_to_union_square = 7\n    mary_arrival = datetime.strptime(\"12:00PM\", \"%I:%M%p\")\n    mary_departure = datetime.strptime(\"4:15PM\", \"%I:%M%p\")\n    minimum_meeting_duration = 75  # in minutes\n\n    # Start time\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    # Start computing the schedule\n    schedule = []\n\n    # Step 1: Start at Union Square\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)})\n\n    # Step 2: Travel to Nob Hill\n    travel_arrival_time = start_time + timedelta(minutes=travel_time_to_nob_hill)\n    schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time_to_nob_hill,\n                     \"time\": format_time(travel_arrival_time), \"to\": \"Nob Hill\"})\n\n    # Step 3: Wait until Mary arrives\n    wait_until_time = max(travel_arrival_time, mary_arrival)\n    if travel_arrival_time < mary_arrival:\n        wait_duration = (mary_arrival - travel_arrival_time).total_seconds() / 60\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": format_time(mary_arrival)})\n\n    # Step 4: Meet Mary\n    meeting_start_time = wait_until_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n    \n    # Check if meeting can happen\n    if meeting_end_time <= mary_departure:\n        schedule.append({\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": minimum_meeting_duration,\n                         \"time\": format_time(meeting_start_time)})\n\n    return {\"schedule\": schedule}\n\n# Compute the schedule and print it in JSON format\nschedule_output = compute_meeting_schedule()\nprint(json.dumps(schedule_output, indent=2))\n```",
            "count": "meeting_planning_example_9",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:15AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 15,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(start_location, start_time, travel_time, friend_location, friend_time_window, meeting_duration):\n    meeting_start_time = datetime.strptime(friend_time_window[0], '%I:%M%p')\n    meeting_end_time = datetime.strptime(friend_time_window[1], '%I:%M%p')\n    \n    # Calculate arrival time\n    arrival_time = start_time + timedelta(minutes=travel_time)\n    \n    # If we arrive before friend is available, we need to wait\n    if arrival_time < meeting_start_time:\n        wait_time = (meeting_start_time - arrival_time).total_seconds() / 60\n    else:\n        wait_time = 0\n    \n    # Calculate actual meeting start time\n    actual_meeting_start = max(arrival_time + timedelta(minutes=wait_time), meeting_start_time)\n    \n    # If the meeting can be scheduled within the friend's availability\n    if (actual_meeting_start + timedelta(minutes=meeting_duration)) <= meeting_end_time:\n        return {\n            \"schedule\": [\n                {\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime('%I:%M%p')},\n                {\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time, \"time\": arrival_time.strftime('%I:%M%p'), \"to\": friend_location},\n                {\"action\": \"wait\", \"location\": friend_location, \"time\": actual_meeting_start.strftime('%I:%M%p')},\n                {\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": actual_meeting_start.strftime('%I:%M%p')}\n            ]\n        }\n    else:\n        return None  # Not able to schedule the meeting\n\nif __name__ == \"__main__\":\n    # Input parameters for the meeting with James\n    start_location = \"Golden Gate Park\"\n    start_time = datetime.strptime('9:00AM', '%I:%M%p')\n    travel_time = 16\n    friend_location = \"Marina District\"\n    friend_time_window = ('10:15AM', '1:30PM')\n    meeting_duration = 15\n    \n    schedule = calculate_schedule(start_location, start_time, travel_time, friend_location, friend_time_window, meeting_duration)\n    \n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_10",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:25AM",
                    "duration": 25,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:25AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef compute_schedule():\n    # Input parameters\n    start_location = \"Nob Hill\"\n    meeting_location = \"Sunset District\"\n    travel_time_to_meeting = 25\n    travel_time_from_meeting = 27\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"2:00PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    minimum_meeting_duration = 75\n\n    # Calculate travel time\n    travel_arrival_time = arrival_time + timedelta(minutes=travel_time_to_meeting)\n    \n    # Wait until meeting starts\n    if travel_arrival_time < meeting_start:\n        wait_time_start = travel_arrival_time\n        waiting_until = meeting_start\n    else:\n        wait_time_start = meeting_start\n        waiting_until = meeting_start\n\n    # Calculate end time for meeting\n    meeting_duration = minimum_meeting_duration\n    meeting_end_time = waiting_until + timedelta(minutes=meeting_duration)\n\n    # Check if the meeting end time is within the allowed window\n    if meeting_end_time <= meeting_end:\n        schedule = {\n            \"schedule\": [\n                {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)},\n                {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_time_to_meeting, \"time\": format_time(travel_arrival_time), \"to\": meeting_location},\n                {\"action\": \"wait\", \"location\": meeting_location, \"time\": format_time(wait_time_start)},\n                {\"action\": \"meet\", \"location\": meeting_location, \"duration\": meeting_duration, \"time\": format_time(waiting_until)}\n            ]\n        }\n        return json.dumps(schedule, indent=4)\n    else:\n        return json.dumps({\"error\": \"Unable to meet the constraints.\"}, indent=4)\n\nif __name__ == \"__main__\":\n    print(compute_schedule())\n```",
            "count": "meeting_planning_example_11",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "6:00PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef compute_schedule(start_location, arrival_time, travel_time, meet_location, meet_time_start, meet_time_end, meet_duration):\n    # Convert times to datetime objects\n    arrival_dt = datetime.strptime(arrival_time, \"%I:%M%p\")\n    meet_start_dt = datetime.strptime(meet_time_start, \"%I:%M%p\")\n    meet_end_dt = datetime.strptime(meet_time_end, \"%I:%M%p\")\n\n    # Travel to meeting location\n    travel_dt = arrival_dt + timedelta(minutes=travel_time)\n    \n    # Wait until the meeting time\n    wait_time = max(meet_start_dt, travel_dt)\n    \n    # Meeting time\n    meet_start_time = wait_time\n    meet_end_time = meet_start_time + timedelta(minutes=meet_duration)\n\n    # Create schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_dt)},\n        {\"action\": \"travel\", \"location\": meet_location, \"duration\": travel_time, \"time\": format_time(travel_dt), \"to\": meet_location},\n        {\"action\": \"wait\", \"location\": meet_location, \"time\": format_time(wait_time)},\n        {\"action\": \"meet\", \"location\": meet_location, \"duration\": meet_duration, \"time\": format_time(meet_start_time)}\n    ]\n    \n    return {\n        \"schedule\": schedule\n    }\n\n# Input parameters for the meeting with Barbara\nstart_location = \"North Beach\"\narrival_time = \"9:00AM\"\ntravel_time = 16  # minutes to Alamo Square\nmeet_location = \"Alamo Square\"\nmeet_time_start = \"6:00PM\"\nmeet_time_end = \"9:30PM\"\nmeet_duration = 90  # minutes\n\n# Calculate the optimal meeting schedule\noptimal_schedule = compute_schedule(start_location, arrival_time, travel_time, meet_location, meet_time_start, meet_time_end, meet_duration)\n\n# Output the result as a JSON-formatted dictionary\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_12",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:18AM",
                    "duration": 18,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "6:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "6:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define meeting parameters\ntravel_times = {\n    \"Presidio to North Beach\": 18,\n    \"North Beach to Presidio\": 17\n}\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_name = \"Betty\"\nfriend_availability_start = datetime.strptime(\"6:45PM\", \"%I:%M%p\")\nfriend_availability_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\nminimum_meeting_duration = 75  # in minutes\n\n# Calculate necessary times\ntravel_time_to_friend = travel_times[\"Presidio to North Beach\"]\narrival_at_friend_location = arrival_time + timedelta(minutes=travel_time_to_friend)\n\n# Wait until friend's availability start time\nwait_duration = (friend_availability_start - arrival_at_friend_location).total_seconds() / 60  # in minutes\n\n# Ensure waiting until friend is available\nif wait_duration < 0:\n    print(\"Not enough time to wait for meeting.\")\nelse:\n    # Calculate end time for meeting\n    meeting_start_time = friend_availability_start\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n    \n    # Check if the meeting can fit in the friend's available time\n    if meeting_end_time <= friend_availability_end:\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Presidio\", \"time\": arrival_time.strftime(\"%I:%M%p\")},\n            {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time_to_friend,\n             \"time\": arrival_at_friend_location.strftime(\"%I:%M%p\"), \"to\": \"North Beach\"},\n            {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": friend_availability_start.strftime(\"%I:%M%p\")},\n            {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": minimum_meeting_duration,\n             \"time\": meeting_start_time.strftime(\"%I:%M%p\")}\n        ]\n        \n        # Output as JSON\n        output = json.dumps({\"schedule\": schedule}, indent=4)\n        print(output)\n    else:\n        print(\"Meeting time exceeds friend's availability.\")\n```",
            "count": "meeting_planning_example_13",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "8:00PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 120,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Function to format time in hh:mmAM/PM\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\n# Function to compute the meeting schedule\ndef create_meeting_schedule():\n    # Input parameters\n    start_location = \"Nob Hill\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Travel distances (in minutes)\n    travel_time_to_marina = 11\n    travel_time_back = 12\n    \n    # Constraints\n    mary_start = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    mary_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    min_meeting_duration = 120  # in minutes\n\n    # Calculate the travel and meeting schedule\n    schedule = []\n\n    # Step 1: Start at Nob Hill\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)})\n\n    # Step 2: Travel to Marina District\n    travel_time = travel_time_to_marina\n    travel_arrival_time = arrival_time + timedelta(minutes=travel_time)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_time,\n        \"time\": format_time(travel_arrival_time),\n        \"to\": \"Marina District\"\n    })\n\n    # Step 3: Wait until Mary is available\n    wait_time_start = max(mary_start, travel_arrival_time)\n    wait_duration = (mary_start - travel_arrival_time).total_seconds() / 60  # in minutes\n    \n    if wait_duration < 0:\n        wait_duration = 0\n\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Marina District\",\n        \"time\": format_time(wait_time_start)\n    })\n\n    # Step 4: Meet Mary\n    meeting_start_time = wait_time_start\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n\n    # Check if meeting can be finished before mary_end\n    if meeting_end_time > mary_end:\n        meeting_end_time = mary_end\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n\n    # Build the final output\n    result = {\"schedule\": schedule}\n    \n    # Output the result as JSON\n    print(json.dumps(result, indent=2))\n\n# Execute the function to create the meeting schedule\ncreate_meeting_schedule()\n```",
            "count": "meeting_planning_example_14",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:19AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "1:00PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 21,
                    "time": "9:21AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef calculate_schedule():\n    # Travel times in minutes\n    travel_times = {\n        \"Russian Hill\": {\n            \"Golden Gate Park\": 21,\n            \"Golden Gate Park\": 19\n        }\n    }\n\n    # Arrival time and constraints\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    john_start_time = datetime.strptime('1:00PM', '%I:%M%p')\n    john_end_time = datetime.strptime('6:15PM', '%I:%M%p')\n    minimum_meeting_duration = 90\n\n    # Travel to Golden Gate Park\n    travel_duration = travel_times[\"Russian Hill\"][\"Golden Gate Park\"]\n    travel_start_time = arrival_time + timedelta(minutes=0)\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    \n    # Calculate wait and meeting times\n    wait_time = max((john_start_time - travel_end_time).total_seconds() // 60, 0)\n    wait_end_time = travel_end_time + timedelta(minutes=wait_time)\n    \n    # Calculate meeting time\n    meeting_start_time = wait_end_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n\n    # Check if meeting end time is within John's availability\n    if meeting_start_time < john_start_time:\n        meeting_start_time = john_start_time\n        meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n\n    if meeting_end_time > john_end_time:\n        meeting_end_time = john_end_time\n        meeting_start_time = meeting_end_time - timedelta(minutes=minimum_meeting_duration)\n\n    # Prepare schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_duration, \"time\": format_time(travel_start_time), \"to\": \"Golden Gate Park\"},\n        {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": format_time(travel_end_time)},\n        {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": minimum_meeting_duration, \"time\": format_time(meeting_start_time)}\n    ]\n\n    # Construct final output\n    result = {\n        \"schedule\": schedule\n    }\n\n    return json.dumps(result, indent=2)\n\nif __name__ == \"__main__\":\n    schedule_json = calculate_schedule()\n    print(schedule_json)\n```",
            "count": "meeting_planning_example_15",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "3:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_meeting_schedule():\n    # Input parameters\n    start_location = \"Chinatown\"\n    start_time = \"9:00AM\"\n    travel_time_to_russian_hill = 7\n    travel_time_from_russian_hill = 9\n    ronald_available_start = \"3:15PM\"\n    ronald_available_end = \"9:30PM\"\n    meeting_duration = 105  # minutes\n\n    # Convert times to datetime objects\n    start_time_dt = datetime.strptime(start_time, \"%I:%M%p\")\n    travel_to_russian_hill_dt = start_time_dt + timedelta(minutes=travel_time_to_russian_hill)\n    ronald_start_dt = datetime.strptime(ronald_available_start, \"%I:%M%p\")\n    ronald_end_dt = datetime.strptime(ronald_available_end, \"%I:%M%p\")\n\n    # Calculate the wait time at Russian Hill\n    wait_time_at_russian_hill = ronald_start_dt - travel_to_russian_hill_dt\n\n    # Ideal meeting start time after waiting\n    meeting_start_time = ronald_start_dt\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n    # Generate schedule dictionary\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": start_time},\n        {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_time_to_russian_hill,\n         \"time\": travel_to_russian_hill_dt.strftime(\"%I:%M%p\"), \"to\": \"Russian Hill\"},\n        {\"action\": \"wait\", \"location\": \"Russian Hill\",\n         \"time\": travel_to_russian_hill_dt.strftime(\"%I:%M%p\")},\n        {\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": meeting_duration,\n         \"time\": meeting_start_time.strftime(\"%I:%M%p\")}\n    ]\n\n    # Output the result as a JSON-formatted dictionary\n    result = {\"schedule\": schedule}\n    return json.dumps(result, indent=2)\n\n# Execute the function and print the result\nif __name__ == \"__main__\":\n    print(calculate_meeting_schedule())\n```",
            "count": "meeting_planning_example_16",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "11:15AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip('0').replace(' 0', ' ')\n\ndef compute_schedule():\n    # Travel times\n    travel_time_to_sunset = 16  # Sunset District to Alamo Square\n    travel_time_to_alamo = 17    # Alamo Square to Sunset District\n\n    # Constraints\n    arrive_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    deborah_start = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    deborah_end = datetime.strptime(\"9:15PM\", \"%I:%M%p\")\n    meeting_duration_deborah = 90  # in minutes\n\n    # Compute travel and waiting times\n    departure_to_alamo = arrive_time + timedelta(minutes=travel_time_to_sunset)\n    wait_until_deborah = deborah_start\n    meeting_start_deborah = wait_until_deborah\n    meeting_end_deborah = meeting_start_deborah + timedelta(minutes=meeting_duration_deborah)\n\n    # Define the schedule steps\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Sunset District\", \"time\": format_time(arrive_time)},\n        {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time_to_sunset, \n         \"time\": format_time(departure_to_alamo), \"to\": \"Alamo Square\"},\n        {\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": format_time(wait_until_deborah)},\n        {\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": meeting_duration_deborah, \n         \"time\": format_time(meeting_start_deborah)}\n    ]\n\n    # Build the output dictionary\n    result = {\n        \"schedule\": schedule\n    }\n\n    return result\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_17",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "8:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef calculate_meeting_schedule(start_location, arrival_time, travel_time, friend_location, friend_availability, meeting_duration):\n    # Starting time\n    start_time = datetime.strptime(arrival_time, '%I:%M%p')\n    \n    # Travel to friend's location\n    travel_to_friend = timedelta(minutes=travel_time)\n    arrival_at_friend = start_time + travel_to_friend\n    \n    # Wait until friend's availability starts\n    friend_start_time = datetime.strptime(friend_availability[0], '%I:%M%p')\n    \n    # If we arrive before our friend, we need to wait\n    if arrival_at_friend < friend_start_time:\n        wait_time = friend_start_time - arrival_at_friend\n        wait_end_time = friend_start_time\n    else:\n        # If we arrive after friend's availability starts\n        wait_time = timedelta(0)\n        wait_end_time = arrival_at_friend\n    \n    # Calculate the meeting end time\n    meeting_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    \n    # Create the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time, \"time\": format_time(arrival_at_friend), \"to\": friend_location},\n        {\"action\": \"wait\", \"location\": friend_location, \"time\": format_time(wait_end_time)},\n        {\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": format_time(wait_end_time)},\n    ]\n    \n    return {\"schedule\": schedule}\n\n# Input parameters\nstart_location = \"Marina District\"\narrival_time = \"9:00AM\"\ntravel_time = 11  # Travel time to Richmond District\nfriend_location = \"Richmond District\"\nfriend_availability = (\"8:30PM\", \"10:00PM\")  # Friend's available time\nmeeting_duration = 75  # Minimum meeting duration in minutes\n\n# Calculate the optimal meeting schedule\nschedule = calculate_meeting_schedule(start_location, arrival_time, travel_time, friend_location, friend_availability, meeting_duration)\n\n# Output the result as JSON\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_18",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Location Name",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Destination",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Destination"
                },
                {
                    "action": "wait",
                    "location": "Location Name",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Location Name",
                    "time": "7:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip('0')\n\ndef calculate_schedule(travel_time, arrival_time, available_time, meeting_duration):\n    # Start the meeting planning\n    start_time = arrival_time  # Initial arrival time\n    travel_to_meeting = start_time + travel_time  # Travel time to destination\n    \n    # Wait until the meeting availability starts\n    wait_until = max(travel_to_meeting, available_time[0])\n    \n    # Check if meeting can take place within available time\n    meeting_start = wait_until\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    \n    if meeting_end <= available_time[1]:\n        return {\n            \"schedule\": [\n                {\"action\": \"start\", \"location\": \"Location Name\", \"time\": format_time(start_time)},\n                {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time.seconds // 60, \"time\": format_time(travel_to_meeting), \"to\": \"Destination\"},\n                {\"action\": \"wait\", \"location\": \"Location Name\", \"time\": format_time(wait_until)},\n                {\"action\": \"meet\", \"location\": \"Location Name\", \"duration\": meeting_duration, \"time\": format_time(meeting_start)}\n            ]\n        }\n    else:\n        return None  # Not possible to meet\n\nif __name__ == \"__main__\":\n    # Define input variables\n    travel_time = timedelta(minutes=16)  # Golden Gate Park to Pacific Heights\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    available_time = (datetime.strptime('7:45PM', '%I:%M%p'), datetime.strptime('8:45PM', '%I:%M%p'))\n    meeting_duration = 45  # minutes\n\n    # Calculate the optimal meeting schedule\n    schedule = calculate_schedule(travel_time, arrival_time, available_time, meeting_duration)\n\n    # Output as JSON\n    if schedule:\n        print(json.dumps(schedule, indent=2))\n    else:\n        print(\"No valid schedule could be created.\")\n```",
            "count": "meeting_planning_example_19",
            "is_correct": false
        },
        {
            "final_program_plan": [],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p')\n\ndef main():\n    # Meeting constraints\n    constraints = {\n        \"locations\": [\n            {\n                \"name\": \"Chinatown\",\n                \"arrival_time\": \"9:00AM\",\n                \"friends\": [\n                    {\n                        \"name\": \"John\",\n                        \"available_time\": (\"7:15AM\", \"9:45AM\"),\n                        \"meeting_duration\": 60\n                    },\n                    {\n                        \"name\": \"Joseph\",\n                        \"available_time\": (\"11:30AM\", \"3:15PM\"),\n                        \"meeting_duration\": 75\n                    }\n                ]\n            },\n            {\n                \"name\": \"Nob Hill\",\n                \"travel_time\": 8\n            }\n        ]\n    }\n\n    # Extracting information\n    start_location = constraints[\"locations\"][0][\"name\"]\n    arrival_time = datetime.strptime(constraints[\"locations\"][0][\"arrival_time\"], '%I:%M%p')\n    travel_time = constraints[\"locations\"][1][\"travel_time\"]\n\n    schedules = []\n    \n    # Check each friend's schedule\n    for friend in constraints[\"locations\"][0][\"friends\"]:\n        friend_name = friend[\"name\"]\n        start_available = datetime.strptime(friend[\"available_time\"][0], '%I:%M%p')\n        end_available = datetime.strptime(friend[\"available_time\"][1], '%I:%M%p')\n        meeting_duration = friend[\"meeting_duration\"]\n\n        # Travel to Nob Hill\n        travel_start_time = arrival_time + timedelta(minutes=travel_time)\n        \n        if travel_start_time >= start_available and travel_start_time + timedelta(minutes=meeting_duration) <= end_available:\n            meeting_start_time = travel_start_time\n            meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n            schedules.append({\n                \"action\": \"start\",\n                \"location\": start_location,\n                \"time\": format_time(arrival_time)\n            })\n            schedules.append({\n                \"action\": \"travel\",\n                \"location\": constraints[\"locations\"][1][\"name\"],\n                \"duration\": travel_time,\n                \"time\": format_time(travel_start_time),\n                \"to\": constraints[\"locations\"][1][\"name\"]\n            })\n            schedules.append({\n                \"action\": \"meet\",\n                \"location\": constraints[\"locations\"][1][\"name\"],\n                \"duration\": meeting_duration,\n                \"time\": format_time(meeting_start_time)\n            })\n\n    output = {\n        \"schedule\": schedules\n    }\n\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_20",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Function to format time in 'H:MMAM/PM'\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\n# Function to compute the meeting schedule\ndef compute_meeting_schedule():\n    # Initialize parameters\n    meeting_location = \"Mission District\"\n    arrival_time = datetime.strptime(\"9:00 AM\", \"%I:%M %p\")\n    travel_time_to_destination = timedelta(minutes=12)\n    destination_location = \"Haight-Ashbury\"\n    person_name = \"Margaret\"\n    person_available_start = datetime.strptime(\"8:00 AM\", \"%I:%M %p\")\n    person_available_end = datetime.strptime(\"3:45 PM\", \"%I:%M %p\")\n    minimum_meeting_duration = timedelta(minutes=30)\n\n    # Travel to the destination\n    arrival_at_destination = arrival_time + travel_time_to_destination\n    if arrival_at_destination < person_available_start:\n        waiting_time = person_available_start - arrival_at_destination\n        wait_until = person_available_start\n    else:\n        wait_until = arrival_at_destination\n\n    # Meeting time computation\n    end_meeting_time = wait_until + minimum_meeting_duration\n    if end_meeting_time > person_available_end:\n        return None  # Not enough time to meet\n\n    # Build the final schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": meeting_location, \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": destination_location, \"duration\": 12, \"time\": format_time(arrival_at_destination), \"to\": destination_location},\n        {\"action\": \"wait\", \"location\": destination_location, \"time\": format_time(wait_until)},\n        {\"action\": \"meet\", \"location\": destination_location, \"duration\": 30, \"time\": format_time(wait_until)},\n    ]\n\n    return {\"schedule\": schedule}\n\n# Execute the function and print the output in JSON format\nif __name__ == \"__main__\":\n    result = compute_meeting_schedule()\n    if result:\n        print(json.dumps(result, indent=2))\n    else:\n        print(\"No valid meeting schedule could be created.\")\n```",
            "count": "meeting_planning_example_21",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "11:15AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 105,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef compute_schedule():\n    # Input parameters\n    start_location = \"Presidio\"\n    arrival_time = datetime(2023, 10, 1, 9, 0)  # Starting at 9:00 AM\n    travel_time_to_union_square = 22  # Travel time in minutes\n    union_square_availability_start = datetime(2023, 10, 1, 11, 15)  # from 11:15 AM\n    union_square_availability_end = datetime(2023, 10, 1, 17, 15)  # to 5:15 PM\n    meeting_duration = 105  # minimum meeting time in minutes\n    \n    # Step 1: Travel to Union Square\n    travel_departure_time = arrival_time + timedelta(minutes=travel_time_to_union_square)\n    \n    # Step 2: Determine wait time (if any)\n    if travel_departure_time < union_square_availability_start:\n        wait_time = (union_square_availability_start - travel_departure_time).total_seconds() / 60\n        wait_time_minutes = int(wait_time)  # Convert to minutes\n    else:\n        wait_time_minutes = 0  # No waiting needed\n    \n    # Step 3: Schedule meeting time\n    meeting_start_time = max(travel_departure_time + timedelta(minutes=wait_time_minutes), union_square_availability_start)\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Check if meeting exceeds availability\n    if meeting_end_time > union_square_availability_end:\n        return None  # Not possible to meet\n    \n    # Build the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time_to_union_square, \n         \"time\": format_time(travel_departure_time), \"to\": \"Union Square\"},\n    ]\n    \n    if wait_time_minutes > 0:\n        wait_time_end = travel_departure_time + timedelta(minutes=wait_time_minutes)\n        schedule.append({\"action\": \"wait\", \"location\": \"Union Square\", \"time\": format_time(wait_time_end)})\n    \n    schedule.append({\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration,\n                     \"time\": format_time(meeting_start_time)})\n    \n    # Prepare the final output\n    output = {\"schedule\": schedule}\n    return output\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_22",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "5:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 75,
                    "time": "5:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Input parameters\n    arrival_time_str = \"9:00AM\"\n    travel_time_to_meeting_location = 23  # minutes to get to Russian Hill\n    meeting_window_start_str = \"5:30PM\"\n    meeting_window_end_str = \"9:00PM\"\n    minimum_meeting_duration = 75  # minutes\n    \n    # Convert strings to datetime objects\n    arrival_time = datetime.strptime(arrival_time_str, '%I:%M%p')\n    meeting_window_start = datetime.strptime(meeting_window_start_str, '%I:%M%p')\n    meeting_window_end = datetime.strptime(meeting_window_end_str, '%I:%M%p')\n    \n    # Calculate arrival at Russian Hill\n    travel_time = timedelta(minutes=travel_time_to_meeting_location)\n    time_arrival_at_russian_hill = arrival_time + travel_time\n    \n    # Waiting time until meeting can start\n    waiting_time = (meeting_window_start - time_arrival_at_russian_hill).total_seconds() / 60.0\n    if waiting_time < 0:\n        # If we arrive after meeting window starts, return none as no meeting can happen\n        return None\n    \n    # Calculate the end of the wait period and the meeting time\n    meeting_start = meeting_window_start\n    meeting_end = meeting_start + timedelta(minutes=minimum_meeting_duration)\n    \n    # Check if we can finish the meeting before the end of the window\n    if meeting_end > meeting_window_end:\n        # We cannot meet due to the end time constraints\n        return None\n    \n    # Construct the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time.strftime('%-I:%M%p')},\n        {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_time_to_meeting_location, \n         \"time\": time_arrival_at_russian_hill.strftime('%-I:%M%p'), \"to\": \"Russian Hill\"},\n        {\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": meeting_window_start.strftime('%-I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": minimum_meeting_duration, \n         \"time\": meeting_start.strftime('%-I:%M%p')}\n    ]\n    \n    # Return the schedule as a JSON-formatted dictionary\n    return json.dumps({\"schedule\": schedule}, indent=4)\n\n# Calling the function and printing the result\nif __name__ == \"__main__\":\n    result = calculate_schedule()\n    if result:\n        print(result)\n    else:\n        print(\"No valid meeting schedule can be created.\")\n```",
            "count": "meeting_planning_example_23",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:00AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\").replace(\" 0\", \" \")\n\ndef calculate_schedule():\n    # Input Parameters\n    start_location = \"Nob Hill\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    travel_time_to_presidio = 17\n    meeting_window_start = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    meeting_window_end = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    meeting_duration = 30\n    \n    # Calculate travel time and waiting\n    travel_start_time = arrival_time + timedelta(minutes=travel_time_to_presidio)\n    \n    # If we arrive at Presidio before the meeting window opens, we have to wait\n    wait_until = meeting_window_start if travel_start_time < meeting_window_start else travel_start_time\n    \n    meeting_start_time = wait_until\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Ensure the meeting time fits within the allowed window\n    if meeting_end_time > meeting_window_end:\n        return None   # Cannot meet if it exceeds the end of the meeting window\n    \n    # Creating the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time_to_presidio, \"time\": format_time(travel_start_time), \"to\": \"Presidio\"},\n        {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": format_time(wait_until)},\n        {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration, \"time\": format_time(meeting_start_time)}\n    ]\n    \n    return {\"schedule\": schedule}\n\n# Calculate and print the optimal schedule as JSON\nschedule_output = calculate_schedule()\nprint(json.dumps(schedule_output, indent=2))\n```",
            "count": "meeting_planning_example_24",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "16:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "16:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 105,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting parameters\nmeeting_info = {\n    \"start_location\": \"Golden Gate Park\",\n    \"start_time\": \"9:00AM\",\n    \"destination\": \"Chinatown\",\n    \"travel_time\": 23,\n    \"end_time\": \"9:45PM\",\n    \"meet_start\": \"4:00PM\",\n    \"meet_duration\": 105\n}\n\ndef convert_time_to_minutes(time_str):\n    time_obj = datetime.strptime(time_str, '%I:%M%p')\n    return time_obj.hour * 60 + time_obj.minute\n\ndef convert_minutes_to_time(minutes):\n    hour = minutes // 60\n    minute = minutes % 60\n    period = 'AM' if hour < 12 else 'PM'\n    hour = hour if hour % 12 != 0 else 12\n    return f\"{hour}:{minute:02d}{period}\"\n\ndef compute_schedule(meeting_info):\n    start_time_minutes = convert_time_to_minutes(meeting_info[\"start_time\"])\n    travel_time = meeting_info[\"travel_time\"]\n    \n    # Compute arrival time at Chinatown\n    arrival_time_minutes = start_time_minutes + travel_time\n    \n    # Wait until meet_start\n    meet_start_minutes = convert_time_to_minutes(meeting_info[\"meet_start\"])\n    \n    # Waiting adjustment\n    if arrival_time_minutes < meet_start_minutes:\n        wait_time = meet_start_minutes - arrival_time_minutes\n        wait_action_time = convert_minutes_to_time(arrival_time_minutes + wait_time)\n    else:\n        wait_time = 0\n        wait_action_time = convert_minutes_to_time(arrival_time_minutes)\n    \n    # Meeting time adjustments\n    meet_end_minutes = meet_start_minutes + meeting_info[\"meet_duration\"]\n    \n    # Creating the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": meeting_info[\"start_location\"], \"time\": meeting_info[\"start_time\"]},\n        {\"action\": \"travel\", \"location\": meeting_info[\"destination\"], \"duration\": travel_time, \"time\": convert_minutes_to_time(arrival_time_minutes), \"to\": meeting_info[\"destination\"]},\n        {\"action\": \"wait\", \"location\": meeting_info[\"destination\"], \"time\": wait_action_time},\n        {\"action\": \"meet\", \"location\": meeting_info[\"destination\"], \"duration\": meeting_info[\"meet_duration\"], \"time\": convert_minutes_to_time(meet_start_minutes)}\n    ]\n    \n    return {\"schedule\": schedule}\n\n# Generate and print the schedule\nschedule = compute_schedule(meeting_info)\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_25",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 105,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef calculate_meeting_schedule():\n    # Input parameters\n    start_location = \"Richmond District\"\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    travel_time_to_presidio = 7\n    presidio_start_time = datetime.strptime('1:15PM', '%I:%M%p')\n    presidio_end_time = datetime.strptime('3:15PM', '%I:%M%p')\n    meeting_duration = 105  # in minutes\n\n    # Calculate arrival time at Presidio\n    travel_duration = timedelta(minutes=travel_time_to_presidio)\n    travel_end_time = arrival_time + travel_duration\n\n    # Wait until the meeting can start\n    wait_time = max((presidio_start_time - travel_end_time), timedelta(0))\n    wait_duration_in_minutes = wait_time.total_seconds() // 60\n\n    # Meeting starting time\n    meeting_start_time = presidio_start_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n    # Check if the meeting can be accommodated\n    if meeting_end_time > presidio_end_time:\n        return {\"error\": \"Not enough time for the meeting\"}\n\n    # Build the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time_to_presidio, \"time\": format_time(travel_end_time), \"to\": \"Presidio\"},\n        {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": format_time(travel_end_time + wait_time)},\n        {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": meeting_duration, \"time\": format_time(meeting_start_time)}\n    ]\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    meeting_schedule = calculate_meeting_schedule()\n    print(json.dumps(meeting_schedule, indent=2))\n```",
            "count": "meeting_planning_example_26",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:00PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 15,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants for travel times\ntravel_times = {\n    \"Marina to Pacific Heights\": 7,\n    \"Pacific Heights to Marina\": 6,\n}\n\n# Constraints\narrival_time_marina = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nmargaret_start = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\nmargaret_end = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\nmeeting_duration = 15  # in minutes\n\n# Function to compute the optimal meeting schedule\ndef compute_schedule():\n    # Start at Marina District\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Marina District\",\n        \"time\": arrival_time_marina.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to Pacific Heights\n    travel_duration = travel_times[\"Marina to Pacific Heights\"]\n    arrival_time_pacific = arrival_time_marina + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_duration,\n        \"time\": arrival_time_pacific.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n\n    # Wait until Margaret's availability starts\n    if arrival_time_pacific < margaret_start:\n        wait_duration = (margaret_start - arrival_time_pacific).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": margaret_start.strftime(\"%I:%M%p\"),\n        })\n    else:\n        wait_duration = 0  # No waiting needed\n\n    # Meeting time\n    meeting_start = max(arrival_time_pacific + timedelta(minutes=wait_duration), margaret_start)\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n    if meeting_end > margaret_end:\n        return {\"error\": \"Could not schedule meeting, available time not sufficient.\"}\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": meeting_start.strftime(\"%I:%M%p\")\n    })\n\n    # Return the schedule as a JSON-formatted dictionary\n    return {\"schedule\": schedule}\n\n# Generate the schedule\noptimal_schedule = compute_schedule()\n\n# Output the result as a JSON string\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_27",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule(start_location, arrival_time, travel_time, wait_until, meet_duration, meet_timeframe):\n    # Calculate arrival at destination\n    travel_start_time = arrival_time + timedelta(minutes=travel_time)\n    \n    # Wait until the meeting time\n    wait_time = max(wait_until, travel_start_time)\n    \n    # Calculate meet start and end times\n    meet_start_time = wait_time\n    meet_end_time = meet_start_time + timedelta(minutes=meet_duration)\n\n    # Format times\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": meet_timeframe['location'], \"duration\": travel_time, \n         \"time\": format_time(travel_start_time), \"to\": meet_timeframe['location']},\n        {\"action\": \"wait\", \"location\": meet_timeframe['location'], \"time\": format_time(wait_time)},\n        {\"action\": \"meet\", \"location\": meet_timeframe['location'], \"duration\": meet_duration, \n         \"time\": format_time(meet_start_time)}\n    ]\n\n    return {\"schedule\": schedule}\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip(\"0\").replace(' 0', ' ')\n\n# Meeting parameters\nstart_location = \"Union Square\"\narrival_time = datetime.strptime('9:00AM', '%I:%M%p')\ntravel_time = 7  # travel time in minutes\nwait_until = datetime.strptime('6:00PM', '%I:%M%p')  # Joshua's start time\nmeet_duration = 75  # duration in minutes\nmeet_timeframe = {'location': \"Chinatown\"}\n\n# Compute the optimal meeting schedule\nschedule = compute_schedule(start_location, arrival_time, travel_time, wait_until, meet_duration, meet_timeframe)\n\n# Output the result in JSON format\nprint(json.dumps(schedule, indent=4))\n```",
            "count": "meeting_planning_example_28",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef compute_schedule():\n    # Initialization\n    start_location = \"Sunset District\"\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    destination = \"Haight-Ashbury\"\n    travel_duration = 15  # minutes\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Nancy's availability\n    nancy_start = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    nancy_end = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    minimum_meeting_duration = 75  # minutes\n    \n    # Wait until Nancy is available\n    if arrival_time < nancy_start:\n        wait_time = nancy_start - arrival_time\n        wait_duration = wait_time.total_seconds() / 60  # convert to minutes\n        available_meeting_start = nancy_start\n    else:\n        wait_duration = 0\n        available_meeting_start = arrival_time\n    \n    # Meeting schedule\n    meeting_end_time = available_meeting_start + timedelta(minutes=minimum_meeting_duration)\n    \n    # Check if the meeting can fit in Nancy's availability window\n    if meeting_end_time <= nancy_end:\n        # Schedule the actions\n        schedule = [\n            {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n            {\"action\": \"travel\", \"location\": destination, \"duration\": travel_duration, \"time\": format_time(arrival_time), \"to\": destination},\n            {\"action\": \"wait\", \"location\": destination, \"time\": format_time(available_meeting_start)},\n            {\"action\": \"meet\", \"location\": destination, \"duration\": minimum_meeting_duration, \"time\": format_time(available_meeting_start)}\n        ]\n        \n        # Output the result as JSON\n        return json.dumps({\"schedule\": schedule}, indent=2)\n\n# Execute the computation and print the result\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_29",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 120,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    start_location = \"Richmond District\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    travel_time_to_north_beach = 17  # minutes\n    stephanie_availability_start = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    stephanie_availability_end = datetime.strptime(\"4:15PM\", \"%I:%M%p\")\n    minimum_meet_time = 120  # minutes\n\n    # Travel to North Beach\n    travel_time_delta = timedelta(minutes=travel_time_to_north_beach)\n    travel_arrival_time = arrival_time + travel_time_delta\n\n    # Check if we can meet\n    meet_start_time = max(travel_arrival_time, stephanie_availability_start)\n    meet_end_time = meet_start_time + timedelta(minutes=minimum_meet_time)\n\n    if meet_end_time <= stephanie_availability_end:\n        # Create the schedule\n        schedule = [\n            {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time_to_north_beach,\n             \"time\": format_time(travel_arrival_time), \"to\": \"North Beach\"},\n            {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": format_time(meet_start_time)},\n            {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": minimum_meet_time,\n             \"time\": format_time(meet_start_time)},\n        ]\n    else:\n        schedule = []  # If no valid schedule can be created\n\n    return json.dumps({\"schedule\": schedule}, indent=4)\n\nif __name__ == \"__main__\":\n    print(compute_schedule())\n```",
            "count": "meeting_planning_example_30",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:11AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef create_schedule():\n    # Input parameters\n    start_location = \"Nob Hill\"\n    arrival_time = \"9:00AM\"\n    travel_time_to_alamo_square = 11  # minutes\n    travel_time_back = 11  # minutes\n    anthony_start_time = \"7:15AM\"\n    anthony_end_time = \"1:00PM\"\n    minimum_meeting_duration = 15  # minutes\n\n    # Convert times to datetime objects for calculation\n    start_time = datetime.strptime(arrival_time, \"%I:%M%p\")\n    anthony_start = datetime.strptime(anthony_start_time, \"%I:%M%p\")\n    anthony_end = datetime.strptime(anthony_end_time, \"%I:%M%p\")\n\n    # Calculating schedule\n    # Travel to Alamo Square\n    travel_time = timedelta(minutes=travel_time_to_alamo_square)\n    arrival_at_alamo_square = start_time + travel_time\n    wait_time = timedelta(seconds=0)\n\n    # Check if arrival time at Alamo Square before Anthony is available\n    if arrival_at_alamo_square < anthony_start:\n        # Wait until Anthony is available\n        wait_time = anthony_start - arrival_at_alamo_square\n        actual_meeting_start = anthony_start\n    else:\n        actual_meeting_start = arrival_at_alamo_square\n\n    # Meeting duration\n    meeting_end_time = actual_meeting_start + timedelta(minutes=minimum_meeting_duration)\n\n    # Check if meeting time exceeds Anthony's available time\n    if meeting_end_time > anthony_end:\n        meeting_end_time = anthony_end  # Adjust to finish when Anthony is no longer available\n\n    # Prepare the schedule\n    schedule = [\n        {\n            \"action\": \"start\",\n            \"location\": start_location,\n            \"time\": start_time.strftime(\"%I:%M%p\")\n        },\n        {\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": travel_time_to_alamo_square,\n            \"time\": arrival_at_alamo_square.strftime(\"%I:%M%p\"),\n            \"to\": \"Alamo Square\"\n        },\n        {\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": (arrival_at_alamo_square + wait_time).strftime(\"%I:%M%p\")\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": \"Alamo Square\",\n            \"duration\": minimum_meeting_duration,\n            \"time\": actual_meeting_start.strftime(\"%I:%M%p\")\n        }\n    ]\n\n    # Create output JSON\n    output = {\n        \"schedule\": schedule\n    }\n\n    return json.dumps(output, indent=2)\n\n# Run the function and print the output\nif __name__ == \"__main__\":\n    result = create_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_31",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:11AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef create_schedule(start_location, start_time, travel_time, friend_location, friend_time_range, min_meet_duration):\n    # Parse the start_time into a datetime object\n    start_time_dt = datetime.strptime(start_time, \"%I:%M%p\")\n    \n    # Calculate arrival time\n    travel_duration = timedelta(minutes=travel_time)\n    arrival_time = start_time_dt + travel_duration\n    \n    # Parse friend's time range\n    friend_start_time = datetime.strptime(friend_time_range[0], \"%I:%M%p\")\n    friend_end_time = datetime.strptime(friend_time_range[1], \"%I:%M%p\")\n    \n    # Calculate the wait time until the friend is available\n    wait_time = max(0, (friend_start_time - arrival_time).total_seconds() / 60)\n    wait_duration = timedelta(minutes=wait_time)\n    wait_time_dt = arrival_time + wait_duration\n    \n    # Calculate actual meeting time\n    meeting_start_time = wait_time_dt\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meet_duration)\n    \n    # If meeting exceeds friend's availability, adjust\n    if meeting_end_time > friend_end_time:\n        meeting_end_time = friend_end_time\n        meeting_start_time = meeting_end_time - timedelta(minutes=min_meet_duration)\n    \n    # Generate schedule output\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": start_time},\n        {\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time, \"time\": arrival_time.strftime(\"%I:%M%p\"), \"to\": friend_location},\n        {\"action\": \"wait\", \"location\": friend_location, \"time\": wait_time_dt.strftime(\"%I:%M%p\")},\n        {\"action\": \"meet\", \"location\": friend_location, \"duration\": min_meet_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")}\n    ]\n    \n    return {\"schedule\": schedule}\n\n# Input parameters\nschedule_data = {\n    \"start_location\": \"The Castro\",\n    \"start_time\": \"9:00AM\",\n    \"travel_time\": 11,  # travel from The Castro to Golden Gate Park\n    \"friend_location\": \"Golden Gate Park\",\n    \"friend_time_range\": [\"7:00AM\", \"5:30PM\"],  # Jeffrey's availability\n    \"min_meet_duration\": 105  # minimum meeting time\n}\n\n# Create schedule\nmeeting_schedule = create_schedule(\n    schedule_data[\"start_location\"],\n    schedule_data[\"start_time\"],\n    schedule_data[\"travel_time\"],\n    schedule_data[\"friend_location\"],\n    schedule_data[\"friend_time_range\"],\n    schedule_data[\"min_meet_duration\"]\n)\n\n# Output the result as JSON\nprint(json.dumps(meeting_schedule, indent=2))\n```",
            "count": "meeting_planning_example_32",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:30AM",
                    "duration": 30,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "12:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 30,
                    "time": "9:30AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef calculate_schedule():\n    # Input parameters\n    start_location = \"Sunset District\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    travel_time_to_union = 30\n    travel_time_back = 26\n    available_start = datetime.strptime(\"12:30PM\", \"%I:%M%p\")\n    available_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    desired_meeting_duration = 15  # in minutes\n\n    # Calculate travel time\n    travel_start_time = arrival_time + timedelta(minutes=travel_time_to_union)\n    \n    # Waiting time until the meeting start\n    if travel_start_time < available_start:\n        wait_time = available_start - travel_start_time\n        wait_start_time = travel_start_time + wait_time\n    else:\n        wait_start_time = travel_start_time\n\n    # Check if meeting can happen within the available time\n    meet_start_time = wait_start_time\n    meet_end_time = meet_start_time + timedelta(minutes=desired_meeting_duration)\n\n    if available_start <= meet_start_time < available_end and meet_end_time <= available_end:\n        # Build the meeting schedule\n        schedule = {\n            \"schedule\": [\n                {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)},\n                {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time_to_union, \"time\": format_time(travel_start_time), \"to\": \"Union Square\"},\n                {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": format_time(wait_start_time)},\n                {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": desired_meeting_duration, \"time\": format_time(meet_start_time)}\n            ]\n        }\n        return json.dumps(schedule, indent=2)\n    else:\n        return json.dumps({\"error\": \"Unable to schedule meeting within available time.\"}, indent=2)\n\nif __name__ == \"__main__\":\n    result = calculate_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_33",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "12:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 105,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input variables\nstart_location = \"Bayview\"\narrival_time = \"9:00AM\"\ntravel_time_to_destination = 23  # minutes to Pacific Heights\nfriend_name = \"Thomas\"\nmeeting_location = \"Pacific Heights\"\nfriend_availability_start = \"12:15PM\"\nfriend_availability_end = \"5:15PM\"\nminimum_meeting_duration = 105  # minutes\n\n# Function to convert time from string to datetime\ndef convert_to_datetime(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Function to convert datetime to desired string format\ndef convert_to_string(dt):\n    return dt.strftime('%I:%M%p').lstrip('0').replace(' 0', ' ')\n\n# Calculate the timeline\narrival_time_dt = convert_to_datetime(arrival_time)\ntravel_time_dt = timedelta(minutes=travel_time_to_destination)\narrived_at_destination = arrival_time_dt + travel_time_dt\n\n# Wait until friend's availability\nfriend_availability_start_dt = convert_to_datetime(friend_availability_start)\nwait_time = max((friend_availability_start_dt - arrived_at_destination).total_seconds(), 0)\nwait_time_dt = timedelta(seconds=wait_time)\n\n# Meeting time\nif wait_time > 0:\n    meeting_start_time = friend_availability_start_dt\nelse:\n    meeting_start_time = arrived_at_destination\n\nmeeting_duration_dt = timedelta(minutes=minimum_meeting_duration)\nmeeting_end_time = meeting_start_time + meeting_duration_dt\n\n# Constructing the schedule\nschedule = [\n    {\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": convert_to_string(arrival_time_dt)\n    },\n    {\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_to_destination,\n        \"time\": convert_to_string(arrived_at_destination),\n        \"to\": meeting_location\n    },\n    {\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": convert_to_string(arrived_at_destination + wait_time_dt)\n    },\n    {\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": minimum_meeting_duration,\n        \"time\": convert_to_string(meeting_start_time)\n    }\n]\n\n# Output the result as JSON\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_34",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:18AM",
                    "duration": 18,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:18AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:18AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 90,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef calculate_schedule():\n    # Travel distances (in minutes)\n    travel_time_bayview_to_chinatown = 18\n    travel_time_chinatown_to_bayview = 22\n\n    # Meeting constraints\n    arrival_time_bayview = datetime.strptime('9:00AM', '%I:%M%p')\n    jason_availability_start = datetime.strptime('8:30AM', '%I:%M%p')\n    jason_availability_end = datetime.strptime('12:30PM', '%I:%M%p')\n    min_meeting_duration = 90  # minutes\n\n    # Travel to Chinatown\n    travel_start_time = arrival_time_bayview + timedelta(minutes=travel_time_bayview_to_chinatown)\n    \n    # Wait until Jason is available\n    wait_until = max(travel_start_time, jason_availability_start)\n\n    # Calculate the best meeting time\n    meeting_start_time = wait_until\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n\n    if meeting_end_time > jason_availability_end:\n        # If there's not enough time to meet Jason\n        return None\n\n    # Create the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Bayview\", \"time\": format_time(arrival_time_bayview)},\n        {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time_bayview_to_chinatown,\n         \"time\": format_time(travel_start_time), \"to\": \"Chinatown\"},\n        {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": format_time(wait_until)},\n        {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": min_meeting_duration, \n         \"time\": format_time(meeting_start_time)}\n    ]\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    optimal_schedule = calculate_schedule()\n    print(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_35",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 60,
                    "time": "1:30PM"
                }
            ],
            "type_error": "TypeError",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances and constraints\ntravel_times = {\n    \"Marina District to Embarcadero\": 14,\n    \"Embarcadero to Marina District\": 12\n}\n\narrival_time = \"9:00AM\"\nmeeting_time_frame = {\n    \"start\": \"1:30PM\",\n    \"end\": \"8:45PM\"\n}\nminimum_meeting_duration = 60\n\ndef time_in_minutes(time_str):\n    dt = datetime.strptime(time_str, \"%I:%M%p\")\n    return dt.hour * 60 + dt.minute\n\ndef minutes_to_time(minutes):\n    dt = datetime.strptime(\"00:00\", \"%H:%M\") + timedelta(minutes=minutes)\n    return dt.strftime(\"%I:%M%p\")\n\ndef compute_schedule():\n    # Calculate arrival time at Embarcadero\n    start_time = time_in_minutes(arrival_time)\n    travel_duration = travel_times[\"Marina District to Embarcadero\"]\n    arrival_at_embarcadero = start_time + travel_duration\n    \n    # Convert to meeting time\n    start_meeting_time = time_in_minutes(meeting_time_frame[\"start\"])\n    end_meeting_time = time_in_minutes(meeting_time_frame[\"end\"])\n    \n    # Determine the meeting start time\n    meeting_start_time = max(arrival_at_embarcadero, start_meeting_time)\n\n    # Calculate the possible meeting end time\n    meeting_end_time = meeting_start_time + minimum_meeting_duration\n    \n    if meeting_end_time <= end_meeting_time:\n        # Create the schedule\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time},\n            {\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_duration, \"time\": minutes_to_time(arrival_at_embarcadero), \"to\": \"Embarcadero\"},\n            {\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": minutes_to_time(meeting_time_frame[\"start\"])},\n            {\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": minimum_meeting_duration, \"time\": minutes_to_time(meeting_start_time)}\n        ]\n        \n        return {\"schedule\": schedule}\n    else:\n        return {\"schedule\": []}  # No valid meeting can be scheduled\n\n# Execute the function and print the result as JSON\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_36",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "12:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 90,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip(\"0\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef optimal_meeting_schedule():\n    # Constants\n    start_location = \"Bayview\"\n    start_time = datetime.strptime(\"9:00AM\", '%I:%M%p')\n    travel_to_financial_district = 19\n    financial_district_available_start = datetime.strptime(\"12:15PM\", '%I:%M%p')\n    financial_district_available_end = datetime.strptime(\"2:00PM\", '%I:%M%p')\n    min_meeting_time = 90\n    \n    # Travel time calculation\n    travel_time = timedelta(minutes=travel_to_financial_district)\n    travel_arrival_time = start_time + travel_time\n    \n    # Wait time calculation\n    arrival_time = format_time(travel_arrival_time)\n    \n    # Meeting time calculation\n    meeting_start_time = max(financial_district_available_start, travel_arrival_time)\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_time)\n    \n    # Ensure the meeting ends by the availability time\n    if meeting_end_time > financial_district_available_end:\n        return None  # Meeting cannot be accommodated\n\n    # Constructing the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_to_financial_district,\n         \"time\": arrival_time, \"to\": \"Financial District\"},\n        {\"action\": \"wait\", \"location\": \"Financial District\", \"time\": format_time(meeting_start_time)},\n        {\"action\": \"meet\", \"location\": \"Financial District\", \"duration\": min_meeting_time, \n         \"time\": format_time(meeting_start_time)}\n    ]\n    \n    return {\"schedule\": schedule}\n\n# Execute the function and print the result as JSON\nmeeting_schedule = optimal_meeting_schedule()\nprint(json.dumps(meeting_schedule, indent=2))\n```",
            "count": "meeting_planning_example_37",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(t):\n    return t.strftime('%I:%M%p').lstrip('0')\n\ndef compute_schedule():\n    # Constants\n    start_time_union_square = datetime.strptime('9:00AM', '%I:%M%p')\n    travel_time_union_to_north_beach = 10\n    north_beach_meeting_start = datetime.strptime('9:45PM', '%I:%M%p')\n    meeting_duration = 45\n\n    # Calculate the time arriving at North Beach\n    travel_arrival_time = start_time_union_square + timedelta(minutes=travel_time_union_to_north_beach)\n    \n    # Check waiting time until Margaret is available\n    wait_time = north_beach_meeting_start - travel_arrival_time\n\n    # If we need to wait, calculate the meeting start and end times\n    if wait_time.total_seconds() > 0:\n        wait_start_time = format_time(travel_arrival_time)\n    else:\n        return {\"error\": \"Unable to meet due to scheduling constraints.\"}\n\n    # Meeting times\n    meeting_start_time = north_beach_meeting_start\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n    # Create the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Union Square\", \"time\": format_time(start_time_union_square)},\n        {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time_union_to_north_beach, \"time\": wait_start_time, \"to\": \"North Beach\"},\n        {\"action\": \"wait\", \"location\": \"North Beach\", \"time\": format_time(north_beach_meeting_start)},\n        {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration, \"time\": format_time(meeting_start_time)}\n    ]\n    \n    return {\"schedule\": schedule}\n\n# Create the schedule and print it as a JSON formatted string\nschedule = compute_schedule()\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_38",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:45PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 120,
                    "time": "4:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule():\n    # Travel times in minutes\n    travel_time = {\n        \"Fisherman's Wharf to Nob Hill\": 11,\n        \"Nob Hill to Fisherman's Wharf\": 11\n    }\n\n    # Constants for the meeting\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start_time = datetime.strptime(\"4:45PM\", \"%I:%M%p\")\n    meeting_end_time = datetime.strptime(\"6:45PM\", \"%I:%M%p\")\n    meeting_duration = 120  # minutes\n\n    # Calculate when we can start and end meeting\n    # Travel from Fisherman's Wharf to Nob Hill\n    travel_duration = travel_time[\"Fisherman's Wharf to Nob Hill\"]\n    arrival_at_nob_hill = arrival_time + timedelta(minutes=travel_duration)\n\n    # Wait until meeting starts\n    wait_until = meeting_start_time\n    wait_duration = (wait_until - arrival_at_nob_hill).total_seconds() / 60\n\n    # Start meeting after waiting\n    meeting_start = wait_until\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n    # Creating the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_duration, \"time\": format_time(arrival_at_nob_hill), \"to\": \"Nob Hill\"},\n        {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": format_time(wait_until)},\n        {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration, \"time\": format_time(meeting_start)}\n    ]\n\n    # Returning the schedule as JSON\n    return json.dumps({\"schedule\": schedule}, indent=4)\n\nif __name__ == \"__main__\":\n    output = compute_schedule()\n    print(output)\n```",
            "count": "meeting_planning_example_39",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule():\n    # Constants\n    travel_time_to_sunset = 17  # minutes\n    travel_time_to_castro = 17  # minutes\n    \n    # Input parameters\n    arrival_time_castro = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    deborah_start_time = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    deborah_end_time = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    meeting_duration = 75  # minutes\n    \n    # Determine when we can start our meeting\n    travel_arrival_time = arrival_time_castro + timedelta(minutes=travel_time_to_sunset)\n    \n    # We have to wait until Deborah is available\n    wait_time = deborah_start_time - travel_arrival_time\n    if wait_time.total_seconds() < 0:\n        return None  # Cannot meet Deborah since time is not available\n    \n    # We can meet Deborah if we wait until she is available\n    meeting_start_time = deborah_start_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # If we need more time than Deborah can meet:\n    if meeting_end_time > deborah_end_time:\n        return None  # Not enough time to meet for the duration required\n    \n    # Creating the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"The Castro\", \"time\": format_time(arrival_time_castro)},\n        {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time_to_sunset, \n         \"time\": format_time(travel_arrival_time), \"to\": \"Sunset District\"},\n        {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": format_time(travel_arrival_time + wait_time)},\n        {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration, \n         \"time\": format_time(meeting_start_time)}\n    ]\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_40",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:18AM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:18AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 45,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef create_schedule():\n    # Setting input parameters\n    travel_time = 18  # minutes (North Beach to Haight-Ashbury)\n    arrival_time = \"9:00AM\"\n    meeting_start = \"7:30AM\"\n    meeting_end = \"1:15PM\"\n    minimum_meeting_duration = 45  # minutes\n    \n    # Convert strings to datetime objects\n    arrival_dt = datetime.strptime(arrival_time, \"%I:%M%p\")\n    meeting_start_dt = datetime.strptime(meeting_start, \"%I:%M%p\")\n    meeting_end_dt = datetime.strptime(meeting_end, \"%I:%M%p\")\n\n    # Calculate the travel time and arrival at Haight-Ashbury\n    travel_start_dt = arrival_dt + timedelta(minutes=travel_time)\n    \n    # If the current time is before the meeting start time, wait until the meeting starts\n    if travel_start_dt < meeting_start_dt:\n        wait_time = meeting_start_dt - travel_start_dt\n        wait_end_dt = meeting_start_dt\n        meet_start_dt = wait_end_dt\n    else:\n        wait_time = timedelta(0)\n        meet_start_dt = travel_start_dt\n\n    # Calculate the meeting end time based on the minimum meeting duration\n    meet_end_dt = meet_start_dt + timedelta(minutes=minimum_meeting_duration)\n\n    # Ensure the meeting ends before the participant leaves\n    if meet_end_dt > meeting_end_dt:\n        meet_end_dt = meeting_end_dt\n\n    # Starting action\n    schedule = [\n        {\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time},\n        {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time, \n         \"time\": travel_start_dt.strftime(\"%I:%M%p\"), \"to\": \"Haight-Ashbury\"}\n    ]\n\n    # Adding wait action if applicable\n    if wait_time > timedelta(0):\n        schedule.append({\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": wait_end_dt.strftime(\"%I:%M%p\")})\n    \n    # Meeting action\n    schedule.append({\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \n                     \"duration\": minimum_meeting_duration, \n                     \"time\": meet_start_dt.strftime(\"%I:%M%p\")})\n\n    # Creating the final output structure\n    result = {\n        \"schedule\": schedule\n    }\n    \n    return json.dumps(result, indent=4)\n\n# Run the function and print the JSON result\nif __name__ == \"__main__\":\n    print(create_schedule())\n```",
            "count": "meeting_planning_example_41",
            "is_correct": true
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "1:00PM"
                }
            ],
            "type_error": "AttributeError",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef calculate_schedule(start_location, arrival_time, travel_time, waiting_slot, meeting_duration):\n    # Calculate arrival time at destination\n    travel_duration = timedelta(minutes=travel_time)\n    arrival_at_destination = arrival_time + travel_duration\n    \n    # Wait until waiting_slot time\n    wait_until = waiting_slot\n    if arrival_at_destination < wait_until:\n        wait_time = wait_until - arrival_at_destination\n    else:\n        return None  # Cannot wait if the waiting time is already over\n\n    # Calculate meeting time\n    meeting_start = wait_until\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    \n    return {\n        \"schedule\": [\n            {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": waiting_slot.location, \"duration\": travel_time, \"time\": format_time(arrival_at_destination), \"to\": waiting_slot.location},\n            {\"action\": \"wait\", \"location\": waiting_slot.location, \"time\": format_time(wait_until)},\n            {\"action\": \"meet\", \"location\": waiting_slot.location, \"duration\": meeting_duration, \"time\": format_time(meeting_start)}\n        ]\n    }\n\ndef main():\n    # Meeting Constraints\n    start_location = \"Nob Hill\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Meeting with Timothy in Presidio\n    travel_time = 17\n    waiting_slot = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    meeting_duration = 30\n    \n    schedule = calculate_schedule(start_location, arrival_time, travel_time, waiting_slot, meeting_duration)\n    \n    if schedule:\n        print(json.dumps(schedule, indent=2))\n    else:\n        print(\"No valid schedule could be created.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_42",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "9:00AM",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "9:00AM"
                },
                {
                    "action": "meet",
                    "location": "9:00AM",
                    "time": "9:00AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_time_to_meet, wait_time_start, wait_time_end, meet_duration):\n    schedule = []\n    \n    # Initial time\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    \n    # Travel to the meeting location\n    travel_time = timedelta(minutes=travel_time_to_meet)\n    travel_arrival_time = arrival_time + travel_time\n    \n    # Initial actions\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)})\n    schedule.append({\"action\": \"travel\", \"location\": wait_time_start, \"duration\": travel_time_to_meet,\n                     \"time\": format_time(travel_arrival_time), \"to\": wait_time_start})\n    \n    # Wait until the friend is available\n    wait_until = datetime.strptime(wait_time_start, '%I:%M%p')\n    if travel_arrival_time < wait_until:\n        schedule.append({\"action\": \"wait\", \"location\": wait_time_start, \"time\": format_time(wait_until)})\n    \n    # Meeting time\n    meet_start_time = wait_until\n    meet_end_time = meet_start_time + timedelta(minutes=meet_duration)\n    \n    schedule.append({\"action\": \"meet\", \"location\": wait_time_start, \"duration\": meet_duration,\n                     \"time\": format_time(meet_start_time)})\n    \n    return schedule\n\ndef main():\n    # Define variables\n    start_location = \"Marina District\"\n    travel_time_to_meet = 16\n    wait_time_start = \"9:00AM\"\n    wait_time_end = \"11:45AM\"\n    meet_duration = 15\n    \n    # Compute the schedule\n    schedule = compute_schedule(start_location, travel_time_to_meet, wait_time_start, wait_time_end, meet_duration)\n    \n    # Create final output dictionary\n    output = {\"schedule\": schedule}\n    \n    # Print the output as a JSON formatted string\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_43",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "8:45AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 105,
                    "time": "9:13AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_meeting_schedule():\n    # Input parameters\n    start_location = \"Pacific Heights\"\n    destination_location = \"Fisherman's Wharf\"\n    \n    travel_time_to_destination = 13  # in minutes\n    travel_time_to_start = 12  # in minutes\n    \n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    betty_start = datetime.strptime('8:45AM', '%I:%M%p')\n    betty_end = datetime.strptime('6:00PM', '%I:%M%p')\n    minimum_meeting_duration = 105  # in minutes\n    \n    # Calculate time of arrival at Fisherman's Wharf\n    travel_duration = timedelta(minutes=travel_time_to_destination)\n    arrival_at_destination = arrival_time + travel_duration\n    \n    # Wait time until Betty is available\n    wait_time = betty_start - arrival_at_destination\n    \n    if wait_time.total_seconds() < 0:\n        wait_time = timedelta(0)  # No waiting if you arrive after Betty's start time\n    \n    # Schedule meeting time\n    meeting_start = betty_start + timedelta(minutes=0)  # Start meeting right when Betty is available\n    meeting_end = meeting_start + timedelta(minutes=minimum_meeting_duration)\n    \n    # Adjust if the meeting exceeds Betty's availability\n    if meeting_end > betty_end:\n        meeting_end = betty_end\n        meeting_start = meeting_end - timedelta(minutes=minimum_meeting_duration)\n\n    # Build the schedule dictionary\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": arrival_time.strftime('%-I:%M%p')},\n        {\"action\": \"travel\", \"location\": destination_location, \"duration\": travel_time_to_destination, \"time\": arrival_at_destination.strftime('%-I:%M%p'), \"to\": destination_location},\n        {\"action\": \"wait\", \"location\": destination_location, \"time\": (arrival_at_destination + wait_time).strftime('%-I:%M%p')},\n        {\"action\": \"meet\", \"location\": destination_location, \"duration\": minimum_meeting_duration, \"time\": meeting_start.strftime('%-I:%M%p')}\n    ]\n    \n    # Prepare JSON output\n    json_output = {\n        \"schedule\": schedule\n    }\n    \n    return json.dumps(json_output, indent=2)\n\nif __name__ == \"__main__\":\n    print(calculate_meeting_schedule())\n```",
            "count": "meeting_planning_example_44",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule():\n    # Input parameters\n    start_location = \"North Beach\"\n    arrival_time = datetime.strptime(\"9:00AM\", '%I:%M%p')\n    \n    travel_time_to_alamo_square = 16\n    meet_start_time = datetime.strptime(\"7:30PM\", '%I:%M%p')\n    meet_end_time = datetime.strptime(\"9:00PM\", '%I:%M%p')\n    desired_meeting_duration = 15\n\n    # Calculate travel to Alamo Square\n    travel_duration_to_alamo = timedelta(minutes=travel_time_to_alamo_square)\n    travel_arrival_time = arrival_time + travel_duration_to_alamo\n\n    # Determine if we need to wait\n    if travel_arrival_time < meet_start_time:\n        wait_duration = (meet_start_time - travel_arrival_time)\n        wait_time = travel_arrival_time + wait_duration\n    else:\n        wait_duration = timedelta(0)\n        wait_time = travel_arrival_time\n\n    # Calculate the end time of the meeting\n    meeting_start_time = wait_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=desired_meeting_duration)\n\n    # Prepare the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time_to_alamo_square, \"time\": format_time(travel_arrival_time), \"to\": \"Alamo Square\"},\n        {\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": format_time(wait_time)},\n        {\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": desired_meeting_duration, \"time\": format_time(meeting_start_time)}\n    ]\n\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\nif __name__ == \"__main__\":\n    print(compute_schedule())\n```",
            "count": "meeting_planning_example_45",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "4:30PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 90,
                    "time": "4:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef schedule_meeting(start_location, travel_time_to_meet, meeting_location, meeting_start, meeting_end, min_meeting_duration):\n    # Arrival time is the starting time plus travel time to the meeting location\n    travel_duration = timedelta(minutes=travel_time_to_meet)\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_time = start_time + travel_duration\n    \n    # Wait until meeting starts\n    meeting_start_time = datetime.strptime(meeting_start, \"%I:%M%p\")\n    wait_duration = meeting_start_time - arrival_time\n    \n    # Calculate meeting duration\n    meeting_duration = timedelta(minutes=min_meeting_duration)\n    meeting_time_end = meeting_start_time + meeting_duration\n    \n    # Schedule construction\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_time_to_meet, \"time\": format_time(arrival_time), \"to\": meeting_location},\n        {\"action\": \"wait\", \"location\": meeting_location, \"time\": format_time(meeting_start_time)},\n        {\"action\": \"meet\", \"location\": meeting_location, \"duration\": min_meeting_duration, \"time\": format_time(meeting_start_time)}\n    ]\n    \n    return schedule\n\nmeeting_constraints = {\n    \"start_location\": \"Haight-Ashbury\",\n    \"travel_time_to_meet\": 19,\n    \"meeting_location\": \"North Beach\",\n    \"meeting_start\": \"4:30PM\",\n    \"meeting_end\": \"9:30PM\",\n    \"min_meeting_duration\": 90\n}\n\n# Compute the schedule\nschedule = schedule_meeting(\n    meeting_constraints[\"start_location\"],\n    meeting_constraints[\"travel_time_to_meet\"],\n    meeting_constraints[\"meeting_location\"],\n    meeting_constraints[\"meeting_start\"],\n    meeting_constraints[\"meeting_end\"],\n    meeting_constraints[\"min_meeting_duration\"]\n)\n\n# Construct the final output dictionary\noutput = {\"schedule\": schedule}\n\n# Print the output in JSON format\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_46",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n\ndef compute_meeting_schedule():\n    # Input parameters\n    travel_times = {\n        \"Richmond_District_to_Nob_Hill\": 17,\n        \"Nob_Hill_to_Richmond_District\": 14\n    }\n\n    arrival_time = \"9:00AM\"\n    meeting_window_start = \"9:30AM\"\n    meeting_window_end = \"11:15AM\"\n    minimum_meeting_duration = 15  # in minutes\n\n    # Convert times to datetime objects\n    arrival_time_dt = datetime.strptime(arrival_time, \"%I:%M%p\")\n    meeting_window_start_dt = datetime.strptime(meeting_window_start, \"%I:%M%p\")\n    meeting_window_end_dt = datetime.strptime(meeting_window_end, \"%I:%M%p\")\n    \n    # Calculate travel time to Nob Hill\n    travel_time_to_nob_hill = travel_times[\"Richmond_District_to_Nob_Hill\"]\n    arrival_at_nob_hill_dt = arrival_time_dt + timedelta(minutes=travel_time_to_nob_hill)\n\n    # Plan the schedule\n    schedule = []\n\n    # Start at Richmond District\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time})\n\n    # Travel to Nob Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time_to_nob_hill,\n        \"time\": arrival_at_nob_hill_dt.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Wait until meeting window starts while being in Nob Hill\n    wait_time_start_dt = max(arrival_at_nob_hill_dt, meeting_window_start_dt)\n\n    # Add waiting action\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Nob Hill\",\n        \"time\": wait_time_start_dt.strftime(\"%I:%M%p\")\n    })\n\n    # Meeting time\n    meeting_start_dt = wait_time_start_dt\n    meeting_end_dt = meeting_start_dt + timedelta(minutes=minimum_meeting_duration)\n\n    # Verify if meeting can happen within the available window\n    if meeting_end_dt <= meeting_window_end_dt:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"duration\": minimum_meeting_duration,\n            \"time\": meeting_start_dt.strftime(\"%I:%M%p\")\n        })\n\n    # Output the schedule as JSON\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\n\n# Run the meeting scheduler and print the result\nif __name__ == \"__main__\":\n    meeting_schedule = compute_meeting_schedule()\n    print(meeting_schedule)\n```",
            "count": "meeting_planning_example_47",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "9:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Function to format time for output\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\n# Function to compute the meeting schedule\ndef compute_meeting_schedule():\n    # Input parameters\n    arrival_location = \"Financial District\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    travel_times = {\n        \"Financial District\": {\"Union Square\": 9},\n        \"Union Square\": {\"Financial District\": 9}\n    }\n    friend = \"Joseph\"\n    friend_availability_start = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    friend_availability_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    min_meeting_duration = 15  # in minutes\n\n    # Calculate travel details\n    travel_duration = travel_times[arrival_location][\"Union Square\"]\n    arrival_at_friend_location = arrival_time + timedelta(minutes=travel_duration)\n\n    # Wait until friend is available\n    wait_time_start = max(arrival_at_friend_location, friend_availability_start)\n\n    # Calculate meeting time\n    meeting_start = wait_time_start\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n\n    # Check if we can meet within the availability window\n    if meeting_end <= friend_availability_end:\n        # Create the schedule\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_duration, \"time\": format_time(arrival_at_friend_location), \"to\": \"Union Square\"},\n            {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": format_time(wait_time_start)},\n            {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": min_meeting_duration, \"time\": format_time(meeting_start)}\n        ]\n\n        # Return the result as JSON\n        return json.dumps({\"schedule\": schedule}, indent=2)\n\n# Output the computed schedule\nif __name__ == \"__main__\":\n    result = compute_meeting_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_48",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:26AM",
                    "duration": 26,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "2:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef calculate_schedule():\n    start_location = \"Richmond District\"\n    arrive_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    friend_location = \"Bayview\"\n    travel_to_friend = 26\n    travel_from_friend = 25\n    friend_start = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\n    meeting_duration = 45  # minutes\n\n    # Travel to Bayview\n    travel_arrival_time = arrive_time + timedelta(minutes=travel_to_friend)\n    wait_until_time = friend_start\n\n    # Calculate wait time\n    wait_duration = (wait_until_time - travel_arrival_time).total_seconds() / 60\n\n    # Check if we can meet Friend Sarah\n    if wait_duration >= 0 and (friend_end - wait_until_time).total_seconds() / 60 >= meeting_duration:\n        meet_start_time = wait_until_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n\n        schedule = [\n            {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrive_time)},\n            {\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_to_friend, \"time\": format_time(travel_arrival_time), \"to\": friend_location},\n            {\"action\": \"wait\", \"location\": friend_location, \"time\": format_time(wait_until_time)},\n            {\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": format_time(meet_start_time)}\n        ]\n\n        return json.dumps({\"schedule\": schedule}, indent=4)\n\nif __name__ == \"__main__\":\n    result = calculate_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_49",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')  # Formatting time\n\ndef compute_schedule():\n    # Given data\n    initial_location = \"North Beach\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    travel_time_to_nob_hill = 7\n    travel_time_from_nob_hill = 8\n    melissa_start_time = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    melissa_end_time = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    meeting_duration = 75  # in minutes\n\n    # Calculate travel and wait times\n    travel_start_time = arrival_time + timedelta(minutes=travel_time_to_nob_hill)\n    wait_until_time = melissa_start_time  # Wait until Melissa is available\n    meeting_end_time = wait_until_time + timedelta(minutes=meeting_duration)\n\n    # Validate if meeting can occur\n    if wait_until_time >= melissa_end_time or meeting_end_time > melissa_end_time:\n        return None  # Cannot meet Melissa within the available time\n\n    # Construct the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": initial_location, \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time_to_nob_hill, \"time\": format_time(travel_start_time), \"to\": \"Nob Hill\"},\n        {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": format_time(wait_until_time)},\n        {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration, \"time\": format_time(wait_until_time)}\n    ]\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    optimal_schedule = compute_schedule()\n    print(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_50",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "8:00AM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "8:00AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 15,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef schedule_meeting(start_location, arrival_time_str, destination, travel_time, wait_until_str, meet_duration):\n    # Parse the input time strings\n    arrival_time = datetime.strptime(arrival_time_str, '%I:%M%p')\n    wait_until = datetime.strptime(wait_until_str, '%I:%M%p')\n\n    # Calculate arrival time at destination\n    travel_duration = timedelta(minutes=travel_time)\n    arrive_at_destination = arrival_time + travel_duration\n\n    # Wait until needed time\n    wait_time = max(wait_until - arrive_at_destination, timedelta(0))\n\n    # Calculate meeting start and end times\n    meet_start = wait_until\n    meet_end = meet_start + timedelta(minutes=meet_duration)\n\n    # Construct the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": arrival_time.strftime('%-I:%M%p')},\n        {\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": arrive_at_destination.strftime('%-I:%M%p'), \"to\": destination},\n        {\"action\": \"wait\", \"location\": destination, \"time\": wait_until.strftime('%-I:%M%p')},\n        {\"action\": \"meet\", \"location\": destination, \"duration\": meet_duration, \"time\": meet_start.strftime('%-I:%M%p')}\n    ]\n\n    return {\"schedule\": schedule}\n\n# Meeting constraints\nstart_location = \"The Castro\"\narrival_time_str = \"9:00AM\"\ndestination = \"Embarcadero\"\ntravel_time = 22\nwait_until_str = \"8:00AM\"\nmeet_duration = 15\n\n# Get the meeting schedule\nmeeting_schedule = schedule_meeting(start_location, arrival_time_str, destination, travel_time, wait_until_str, meet_duration)\n\n# Output the result as a JSON-formatted dictionary\nprint(json.dumps(meeting_schedule, indent=4))\n```",
            "count": "meeting_planning_example_51",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:00AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:00AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule():\n    # Input variables\n    start_time = datetime.strptime('9:00AM', '%I:%M%p')\n    travel_to_marina = 9\n    meeting_start_marina = datetime.strptime('10:00AM', '%I:%M%p')\n    meeting_end_marina = datetime.strptime('12:45PM', '%I:%M%p')\n    meeting_duration_marina = 15\n    \n    # Calculate travel and wait time\n    travel_time_marina = start_time + timedelta(minutes=travel_to_marina)\n    \n    # Determine when we can meet Melissa\n    if travel_time_marina < meeting_start_marina:\n        wait_time_marina = meeting_start_marina\n    else:\n        wait_time_marina = travel_time_marina\n    \n    meet_start_time = wait_time_marina\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration_marina)\n\n    # Prepare the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": start_time.strftime('%I:%M%p')},\n        {\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": travel_to_marina, \n         \"time\": travel_time_marina.strftime('%I:%M%p'), \"to\": \"Marina District\"},\n        {\"action\": \"wait\", \"location\": \"Marina District\", \n         \"time\": wait_time_marina.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Marina District\", \"duration\": meeting_duration_marina, \n         \"time\": meet_start_time.strftime('%I:%M%p')}\n    ]\n\n    # Output the result as a JSON-formatted dictionary\n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n\ncompute_meeting_schedule()\n```",
            "count": "meeting_planning_example_52",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "10:15AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 120,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule(start_location, start_time, travel_time, friend_location, friend_availability, meeting_duration):\n    # Convert start time to a datetime object\n    start_time_dt = datetime.strptime(start_time, '%I:%M%p')\n    \n    # Calculate arrival time at friend's location\n    travel_duration = timedelta(minutes=travel_time)\n    arrival_time = start_time_dt + travel_duration\n    \n    # Wait until friend's availability starts\n    wait_until = datetime.strptime(friend_availability[0], '%I:%M%p')\n    time_to_wait = max((wait_until - arrival_time).total_seconds(), 0)\n    wait_duration = timedelta(seconds=time_to_wait)\n    \n    wait_time = arrival_time + wait_duration\n    \n    # Calculate meeting end time\n    meeting_end_time = wait_time + timedelta(minutes=meeting_duration)\n    \n    # Prepare the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": start_time},\n        {\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time, \"time\": arrival_time.strftime('%I:%M%p'), \"to\": friend_location},\n        {\"action\": \"wait\", \"location\": friend_location, \"time\": wait_time.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": wait_time.strftime('%I:%M%p')}\n    ]\n\n    return {\n        \"schedule\": schedule\n    }\n\n# Define the input parameters for Ashley's meeting\nstart_location = \"Richmond District\"\nstart_time = \"9:00AM\"\ntravel_time = 13\nfriend_location = \"Alamo Square\"\nfriend_availability = [\"10:15AM\", \"1:00PM\"]\nmeeting_duration = 120\n\n# Compute the schedule\nmeeting_schedule = compute_meeting_schedule(start_location, start_time, travel_time, friend_location, friend_availability, meeting_duration)\n\n# Output the result as JSON\nprint(json.dumps(meeting_schedule, indent=2))\n```",
            "count": "meeting_planning_example_53",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef compute_meeting_schedule(start_location, arrival_time, travel_time, meet_time_window, meeting_duration):\n    # Calculate the arrival time at the meeting location\n    travel_dt = arrival_time + timedelta(minutes=travel_time)\n    \n    # Wait until the start of the meeting window\n    wait_start = meet_time_window[0]\n    \n    # Adjust the wait time to account for travel time\n    wait_duration = max(0, (wait_start - travel_dt).total_seconds() / 60)\n    \n    # Calculate when the meeting can start\n    meeting_start = wait_start\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    \n    # Schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time, \"time\": format_time(travel_dt), \"to\": \"Golden Gate Park\"},\n        {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": format_time(wait_start)},\n        {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": meeting_duration, \"time\": format_time(meeting_start)}\n    ]\n    \n    return {\"schedule\": schedule}\n\ndef main():\n    start_location = \"Financial District\"\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    \n    travel_time_to_meeting = 17  # Financial District to Mission District in minutes\n    meet_time_window = (datetime.strptime('1:15PM', '%I:%M%p'), datetime.strptime('2:15PM', '%I:%M%p'))\n    meeting_duration = 45  # minimum meeting time in minutes\n    \n    schedule = compute_meeting_schedule(start_location, arrival_time, travel_time_to_meeting, meet_time_window, meeting_duration)\n    \n    print(json.dumps(schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_54",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")  # format as 'H:MMAM/PM'\n\ndef compute_meeting_schedule():\n    # Travel Distances\n    travel_times = {\n        \"Financial District to Nob Hill\": 8,\n        \"Nob Hill to Financial District\": 9,\n    }\n\n    # Constraints\n    arrival_time_fd = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    helen_available_start = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    helen_available_end = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\n    minimum_meeting_duration = 45  # in minutes\n\n    # Calculate travel time to Nob Hill\n    travel_time_to_nob_hill = travel_times[\"Financial District to Nob Hill\"]\n    arrival_time_nob_hill = arrival_time_fd + timedelta(minutes=travel_time_to_nob_hill)\n\n    # Wait until Helen is available\n    waiting_time_until_helen = (helen_available_start - arrival_time_nob_hill).total_seconds() / 60\n\n    # Determine when we can start to meet Helen and the meeting end time\n    start_meeting_time = helen_available_start\n    end_meeting_time = start_meeting_time + timedelta(minutes=minimum_meeting_duration)\n\n    # Check if we can meet Helen within her availability\n    if end_meeting_time > helen_available_end:\n        # Adjust meeting time if we can't meet Helen for the required duration\n        return None  # Meeting can't be scheduled within the constraints\n\n    # Schedule creation\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Financial District\", \"time\": format_time(arrival_time_fd)},\n        {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time_to_nob_hill, \"time\": format_time(arrival_time_nob_hill), \"to\": \"Nob Hill\"},\n        {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": format_time(start_meeting_time)},\n        {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": minimum_meeting_duration, \"time\": format_time(start_meeting_time)}\n    ]\n\n    return {\"schedule\": schedule}\n\n# Main execution\nif __name__ == \"__main__\":\n    result = compute_meeting_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_55",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:15AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Function to format time for output\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef calculate_schedule(start_location, arrival_time, travel_time, friend_location, friend_time_range, min_meeting_time):\n    # Parse arrival time\n    arrival_dt = datetime.strptime(arrival_time, \"%I:%M%p\")\n    \n    # Travel to friend's location\n    travel_duration = timedelta(minutes=travel_time)\n    start_travel_dt = arrival_dt + timedelta(minutes=0)  # Start travel at arrival time\n    reach_friend_dt = start_travel_dt + travel_duration\n\n    # Waiting till friend's availability\n    friend_start_dt = datetime.strptime(friend_time_range[0], \"%I:%M%p\")\n    friend_end_dt = datetime.strptime(friend_time_range[1], \"%I:%M%p\")\n    \n    # If we reach before the friend is available, we wait\n    if reach_friend_dt < friend_start_dt:\n        wait_time = friend_start_dt - reach_friend_dt\n        wait_end_dt = reach_friend_dt + wait_time\n    else:\n        wait_time = timedelta(0)\n        wait_end_dt = reach_friend_dt\n\n    # Meeting time\n    meeting_start_dt = wait_end_dt\n    meeting_end_dt = meeting_start_dt + timedelta(minutes=min_meeting_time)\n\n    # Check if meeting can fit in friend's availability\n    if meeting_end_dt > friend_end_dt:\n        return None  # Not possible to meet\n\n    # Create the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_dt)},\n        {\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time, \"time\": format_time(reach_friend_dt), \"to\": friend_location},\n        {\"action\": \"wait\", \"location\": friend_location, \"time\": format_time(wait_end_dt)},\n        {\"action\": \"meet\", \"location\": friend_location, \"duration\": min_meeting_time, \"time\": format_time(meeting_start_dt)},\n    ]\n    \n    return {\"schedule\": schedule}\n\n# Input parameters\nstart_location = \"Chinatown\"\narrival_time = \"9:00AM\"\ntravel_time = 8\nfriend_location = \"Nob Hill\"\nfriend_time_range = [\"10:15AM\", \"1:00PM\"]\nmin_meeting_time = 45\n\n# Calculate the optimal meeting schedule\nresult = calculate_schedule(start_location, arrival_time, travel_time, friend_location, friend_time_range, min_meeting_time)\n\n# Output result as JSON\nprint(json.dumps(result, indent=4))\n```",
            "count": "meeting_planning_example_56",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "10:30AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define the input parameters\ndeparture_time = \"9:00AM\"\narrival_location = \"Bayview\"\ntravel_times = {\n    \"Bayview\": {\"Sunset District\": 23},\n    \"Sunset District\": {\"Bayview\": 22}\n}\n\nfriend_constraints = {\n    \"Jessica\": {\n        \"location\": \"Sunset District\",\n        \"available_start\": \"10:30AM\",\n        \"available_end\": \"5:45PM\",\n        \"min_meet_duration\": 60\n    }\n}\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\")\n\ndef compute_schedule():\n    # Parse the departure time\n    start_time = parse_time(departure_time)\n    \n    # Travel to Sunset District\n    travel_duration = travel_times[arrival_location][\"Sunset District\"]\n    travel_end_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Wait until Jessica is available\n    jessica_start = parse_time(friend_constraints[\"Jessica\"][\"available_start\"])\n    \n    # Wait if we arrive before Jessica's available start time\n    if travel_end_time < jessica_start:\n        wait_time = jessica_start - travel_end_time\n        wait_end_time = travel_end_time + wait_time\n    else:\n        wait_time = timedelta(0)\n        wait_end_time = travel_end_time\n\n    # Meeting duration\n    meet_duration = timedelta(minutes=friend_constraints[\"Jessica\"][\"min_meet_duration\"])\n    meeting_end_time = wait_end_time + meet_duration\n\n    # Ensure meeting ends before Jessica's available end time\n    jessica_end = parse_time(friend_constraints[\"Jessica\"][\"available_end\"])\n    if meeting_end_time > jessica_end:\n        # Adjust meeting to fit within available time\n        meeting_end_time = jessica_end\n        wait_end_time = jessica_end - meet_duration\n    \n    # Construct the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_duration, \"time\": format_time(travel_end_time), \"to\": \"Sunset District\"},\n        {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": format_time(wait_end_time)},\n        {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": friend_constraints[\"Jessica\"][\"min_meet_duration\"], \"time\": format_time(wait_end_time)}\n    ]\n\n    return {\"schedule\": schedule}\n\n# Compute the schedule and output as JSON\noptimal_schedule = compute_schedule()\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_57",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:20AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "9:20AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 30,
                    "time": "9:20AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule():\n    # Input parameters\n    start_location = \"The Castro\"\n    arrival_time = \"9:00AM\"\n    travel_time_to_meeting = 20  # Castro to Financial District\n    meeting_location = \"Financial District\"\n    meeting_start_time = \"9:15AM\"\n    meeting_end_time = \"4:45PM\"\n    meeting_duration = 30  # Minimum required meeting duration\n    \n    # Calculate arrival time\n    arrival_time_dt = datetime.strptime(arrival_time, \"%I:%M%p\")\n    travel_time_dt = arrival_time_dt + timedelta(minutes=travel_time_to_meeting)\n    \n    # Meeting time slots\n    meeting_start_dt = datetime.strptime(meeting_start_time, \"%I:%M%p\")\n    meeting_end_dt = datetime.strptime(meeting_end_time, \"%I:%M%p\")\n    \n    # Check if we can meet Nancy\n    meeting_possible_start = max(travel_time_dt, meeting_start_dt)\n    meeting_possible_end = meeting_possible_start + timedelta(minutes=meeting_duration)\n    \n    if meeting_possible_end <= meeting_end_dt:\n        # Create the schedule\n        schedule = [\n            {\"action\": \"start\", \"location\": start_location, \"time\": arrival_time},\n            {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_time_to_meeting,\n             \"time\": travel_time_dt.strftime(\"%I:%M%p\"), \"to\": meeting_location},\n            {\"action\": \"wait\", \"location\": meeting_location, \"time\": meeting_possible_start.strftime(\"%I:%M%p\")},\n            {\"action\": \"meet\", \"location\": meeting_location, \"duration\": meeting_duration,\n             \"time\": meeting_possible_start.strftime(\"%I:%M%p\")}\n        ]\n        \n        # Return as JSON formatted dictionary\n        return json.dumps({\"schedule\": schedule}, indent=2)\n\n# Execute the function and print the result\nif __name__ == \"__main__\":\n    print(\"SOLUTION:\", compute_meeting_schedule())\n```",
            "count": "meeting_planning_example_58",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 105,
                    "time": "9:19AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule():\n    # Input parameters\n    travel_time = {\n        \"Bayview_to_Haight_Ashbury\": 19,\n        \"Haight_Ashbury_to_Bayview\": 18\n    }\n    \n    # Constraints\n    arrive_time_bayview = \"9:00AM\"\n    richard_availability_start = \"7:00AM\"\n    richard_availability_end = \"3:45PM\"\n    desired_meeting_duration = 105  # in minutes\n\n    # Convert times to datetime objects\n    arrive_time = datetime.strptime(arrive_time_bayview, '%I:%M%p')\n    available_start_time = datetime.strptime(richard_availability_start, '%I:%M%p')\n    available_end_time = datetime.strptime(richard_availability_end, '%I:%M%p')\n\n    # Travel to Haight-Ashbury\n    travel_duration_to_haight = travel_time[\"Bayview_to_Haight_Ashbury\"]\n    arrival_time_haight = arrive_time + timedelta(minutes=travel_duration_to_haight)\n\n    # If we arrive at Haight-Ashbury after Richard is available\n    if arrival_time_haight > available_end_time:\n        return None  # Cannot meet\n\n    # We must wait until Richard is available\n    wait_until_time = max(available_start_time, arrival_time_haight)\n    \n    # Calculate meeting start and end time\n    meeting_start_time = wait_until_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=desired_meeting_duration)\n    \n    # Check if the meeting end time is within Richard's availability\n    if meeting_start_time < available_start_time:\n        meeting_start_time = available_start_time\n        meeting_end_time = meeting_start_time + timedelta(minutes=desired_meeting_duration)\n\n    if meeting_end_time > available_end_time:\n        return None  # Cannot meet for the full desired duration\n\n    # Preparing the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrive_time_bayview},\n        {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_duration_to_haight, \"time\": arrival_time_haight.strftime('%I:%M%p'), \"to\": \"Haight-Ashbury\"},\n        {\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": wait_until_time.strftime('%I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": desired_meeting_duration, \"time\": meeting_start_time.strftime('%I:%M%p')}\n    ]\n\n    return {\"schedule\": schedule}\n\n# Run the computation\noptimal_schedule = compute_schedule()\n\n# Output result as JSON\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_59",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:30PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 45,
                    "time": "6:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Travel distances (in minutes)\n    travel_time = {\n        \"Union Square to Chinatown\": 7,\n        \"Chinatown to Union Square\": 7,\n    }\n\n    # Constraints\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    carol_availability_start = datetime.strptime(\"6:30PM\", \"%I:%M%p\")\n    carol_availability_end = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    meeting_duration = 45  # minutes\n\n    # Calculate the travel to Chinatown\n    travel_duration = travel_time[\"Union Square to Chinatown\"]\n    time_of_arrival = arrival_time + timedelta(minutes=travel_duration)\n\n    # Wait until Carol is available\n    wait_duration = (carol_availability_start - time_of_arrival).total_seconds() / 60\n    if wait_duration < 0:\n        return None  # Not enough time to wait for Carol\n\n    # Checking if the meeting can occur within her availability\n    meeting_start_time = carol_availability_start\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n    if meeting_end_time > carol_availability_end:\n        return None  # Not enough time to meet\n\n    # Constructing the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_duration, \"time\": time_of_arrival.strftime(\"%I:%M%p\"), \"to\": \"Chinatown\"},\n        {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": carol_availability_start.strftime(\"%I:%M%p\")},\n        {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")},\n    ]\n    \n    return {\"schedule\": schedule}\n\nschedule = calculate_schedule()\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_60",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Starting Location",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Destination",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Destination"
                },
                {
                    "action": "wait",
                    "location": "Destination",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Destination",
                    "time": "7:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 90,
                    "time": "7:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef compute_schedule(travel_time_to, travel_time_back, arrival_time_str, meeting_start_str, meeting_end_str, meeting_duration):\n    # Parse the input times\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M%p\")\n    meeting_start_time = datetime.strptime(meeting_start_str, \"%I:%M%p\")\n    meeting_end_time = datetime.strptime(meeting_end_str, \"%I:%M%p\")\n    \n    # Calculate travel time to destination\n    travel_time_to_delta = timedelta(minutes=travel_time_to)\n    travel_time_back_delta = timedelta(minutes=travel_time_back)\n    \n    # Compute arrival time at the destination\n    arrival_at_destination = arrival_time + travel_time_to_delta\n    \n    # Wait until the meeting can start\n    wait_until = max(arrival_at_destination, meeting_start_time)\n    \n    # Meeting end time\n    meeting_end = wait_until + timedelta(minutes=meeting_duration)\n    \n    # Check if the meeting can fit into the available time\n    if wait_until >= meeting_start_time and meeting_end <= meeting_end_time:\n        # Build the schedule\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Starting Location\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time_to, \"time\": format_time(arrival_at_destination), \"to\": \"Destination\"},\n            {\"action\": \"wait\", \"location\": \"Destination\", \"time\": format_time(wait_until)},\n            {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meeting_duration, \"time\": format_time(wait_until)}\n        ]\n        \n        return {\"schedule\": schedule}\n    else:\n        return None\n\n# Input Parameters for Stephanie\ntravel_time_to = 11  # Golden Gate Park to Presidio\ntravel_time_back = 12  # Presidio to Golden Gate Park\narrival_time_str = \"9:00AM\"\nmeeting_start_str = \"7:15PM\"\nmeeting_end_str = \"10:00PM\"\nmeeting_duration = 90  # in minutes\n\n# Compute the schedule\nschedule = compute_schedule(travel_time_to, travel_time_back, arrival_time_str, meeting_start_str, meeting_end_str, meeting_duration)\n\n# Print the result as JSON\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_61",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:14AM",
                    "duration": 14,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define the input parameters for the scheduling\nstart_location = \"Presidio\"\narrival_time = \"9:00AM\"\namanda_availability_start = \"11:30AM\"\namanda_availability_end = \"9:15PM\"\nminimum_meeting_duration = 15  # in minutes\n\n# Define travel times\ntravel_times = {\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Russian Hill\", \"Presidio\"): 14\n}\n\n# Function to convert time string to datetime object\ndef convert_to_datetime(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\n# Function to convert datetime object to required string format\ndef convert_to_time_str(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip('0')  # Remove leading zero\n\n# Calculate optimal meeting schedule\ndef calculate_schedule():\n    schedule = []\n    \n    # Start time\n    current_time = convert_to_datetime(arrival_time)\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": convert_to_time_str(current_time)\n    })\n\n    # Travel to Russian Hill\n    travel_time = travel_times[(start_location, \"Russian Hill\")]\n    current_time += timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time,\n        \"time\": convert_to_time_str(current_time),\n        \"to\": \"Russian Hill\"\n    })\n\n    # Wait until Amanda is available\n    amanda_start_time = convert_to_datetime(amanda_availability_start)\n    if current_time < amanda_start_time:\n        wait_time = (amanda_start_time - current_time).total_seconds() / 60\n        current_time = amanda_start_time\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": convert_to_time_str(current_time)\n        })\n\n    # Meet Amanda\n    meeting_start_time = current_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n    if meeting_end_time <= convert_to_datetime(amanda_availability_end):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Russian Hill\",\n            \"duration\": minimum_meeting_duration,\n            \"time\": convert_to_time_str(meeting_start_time)\n        })\n\n    return {\n        \"schedule\": schedule\n    }\n\n# Calculate the schedule and output the JSON\noptimal_schedule = calculate_schedule()\nprint(json.dumps(optimal_schedule, indent=4))\n```",
            "count": "meeting_planning_example_62",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:31AM",
                    "duration": 31,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "5:30PM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 31,
                    "time": "9:31AM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "9:31AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef compute_meeting_schedule(start_location, meeting_location, travel_time, waiting_until, meeting_duration):\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Travel to meeting location\n    travel_start_time = start_time + timedelta(minutes=travel_time)\n    \n    # Wait until the available meeting time\n    if travel_start_time < waiting_until:\n        wait_time = waiting_until\n    else:\n        wait_time = travel_start_time\n    \n    # Meet for the required duration\n    meeting_end_time = wait_time + timedelta(minutes=meeting_duration)\n\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_time, \n         \"time\": format_time(travel_start_time), \"to\": meeting_location},\n        {\"action\": \"wait\", \"location\": meeting_location, \"time\": format_time(wait_time)},\n        {\"action\": \"meet\", \"location\": meeting_location, \"duration\": meeting_duration, \n         \"time\": format_time(wait_time)}\n    ]\n    \n    return {\"schedule\": schedule}\n\n# Constraints for the meeting with Nancy\nstart_location = \"Presidio\"\nmeeting_location = \"Bayview\"\ntravel_time = 31\nwaiting_until = datetime.strptime(\"5:30PM\", \"%I:%M%p\")  # Nancy is available until 5:30PM\nmeeting_duration = 30  # Minimum meet duration is 30 minutes\n\n# Compute the meeting schedule\nschedule = compute_meeting_schedule(start_location, meeting_location, travel_time, waiting_until, meeting_duration)\n\n# Output the result as a JSON-formatted dictionary\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_63",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "3:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "3:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef compute_meeting_schedule():\n    # Define travel times and constraints\n    travel_times = {\n        \"Nob Hill\": {\"Pacific Heights\": 8, \"Nob Hill\": 8}\n    }\n    \n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    maragaret_availability_start = datetime.strptime('3:45PM', '%I:%M%p')\n    maragaret_availability_end = datetime.strptime('7:15PM', '%I:%M%p')\n    meeting_duration = 45\n\n    # Compute arrival at Nob Hill\n    travel_time_to_nob_hill = 0  # We start there at 9:00 AM\n    arrival_nob_hill_time = arrival_time + timedelta(minutes=travel_time_to_nob_hill)\n\n    # Wait until Margaret is available\n    wait_time_start = maragaret_availability_start\n    wait_time_end = wait_time_start if wait_time_start >= arrival_nob_hill_time else arrival_nob_hill_time\n\n    # Compute meeting start and end times\n    meeting_start_time = wait_time_end\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Check if the meeting can happen within the available times\n    if meeting_end_time <= maragaret_availability_end:\n        # Create schedule\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_times[\"Nob Hill\"][\"Pacific Heights\"], \"time\": format_time(arrival_nob_hill_time), \"to\": \"Pacific Heights\"},\n            {\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": format_time(wait_time_start)},\n            {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration, \"time\": format_time(meeting_start_time)}\n        ]\n        \n        return json.dumps({\"schedule\": schedule}, indent=2)\n    else:\n        return json.dumps({\"error\": \"Meeting cannot be scheduled within available time.\"}, indent=2)\n\nif __name__ == \"__main__\":\n    print(compute_meeting_schedule())\n```",
            "count": "meeting_planning_example_64",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:25AM",
                    "duration": 25,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "7:00PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 45,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Meeting constraints\n    travel_times = {\n        \"Golden Gate Park\": {\"Embarcadero\": 25},\n        \"Embarcadero\": {\"Golden Gate Park\": 25}\n    }\n    \n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    meeting_start = datetime.strptime('7:00PM', '%I:%M%p')\n    meeting_end = datetime.strptime('9:00PM', '%I:%M%p')\n    meeting_duration = 45  # Minimum duration in minutes\n\n    # Compute travel to Embarcadero\n    travel_time_to_embarcadero = travel_times[\"Golden Gate Park\"][\"Embarcadero\"]\n    arrival_at_embarcadero = arrival_time + timedelta(minutes=travel_time_to_embarcadero)\n    \n    # Check for wait and meeting time\n    if arrival_at_embarcadero < meeting_start:\n        wait_time = meeting_start - arrival_at_embarcadero\n        meeting_start_time = meeting_start\n    else:\n        wait_time = 0\n        meeting_start_time = arrival_at_embarcadero\n\n    # Calculate total meeting time\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Creating the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_time_to_embarcadero, \"time\": format_time(arrival_at_embarcadero), \"to\": \"Embarcadero\"},\n        {\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": format_time(meeting_start_time)},\n        {\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": meeting_duration, \"time\": format_time(meeting_start_time)}\n    ]\n\n    # Prepare JSON output\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_65",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:15AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 120,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_meeting_schedule():\n    # Input parameters\n    start_location = \"Nob Hill\"\n    arrival_time = \"9:00AM\"\n    travel_to_presidio = 17  # minutes\n    presidio_availability_start = \"11:15AM\"\n    presidio_availability_end = \"5:45PM\"\n    required_meeting_duration = 120  # minutes\n    destination = \"Presidio\"\n\n    # Calculate departure and arrival times\n    arrival_time_dt = datetime.strptime(arrival_time, \"%I:%M%p\")\n    departure_time_dt = arrival_time_dt + timedelta(minutes=travel_to_presidio)\n\n    # Convert Timothy's availability to datetime\n    presidio_availability_start_dt = datetime.strptime(presidio_availability_start, \"%I:%M%p\")\n    presidio_availability_end_dt = datetime.strptime(presidio_availability_end, \"%I:%M%p\")\n\n    # Calculate when we can start the meeting\n    if departure_time_dt < presidio_availability_start_dt:\n        wait_time = presidio_availability_start_dt - departure_time_dt\n        wait_time_minutes = wait_time.total_seconds() / 60\n        meeting_start_time_dt = presidio_availability_start_dt\n    else:\n        wait_time_minutes = 0\n        meeting_start_time_dt = departure_time_dt\n\n    # Calculate the ending time of the meeting\n    meeting_end_time_dt = meeting_start_time_dt + timedelta(minutes=required_meeting_duration)\n\n    # Ensure the meeting ends within the availability window\n    if meeting_end_time_dt > presidio_availability_end_dt:\n        raise ValueError(\"Not enough time to meet within the available window.\")\n\n    # Construct the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": arrival_time},\n        {\n            \"action\": \"travel\",\n            \"location\": destination,\n            \"duration\": travel_to_presidio,\n            \"time\": departure_time_dt.strftime(\"%I:%M%p\"),\n            \"to\": destination\n        },\n        {\n            \"action\": \"wait\",\n            \"location\": destination,\n            \"time\": meeting_start_time_dt.strftime(\"%I:%M%p\")\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": destination,\n            \"duration\": required_meeting_duration,\n            \"time\": meeting_start_time_dt.strftime(\"%I:%M%p\")\n        }\n    ]\n\n    # Prepare the final output structure\n    output = {\n        \"schedule\": schedule\n    }\n\n    return json.dumps(output, indent=2)\n\nif __name__ == \"__main__\":\n    result = calculate_meeting_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_66",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:26AM",
                    "duration": 26,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "8:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 105,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input Constraints\nstart_location = \"Golden Gate Park\"\nstart_time = \"9:00AM\"\ntravel_time_to_financial_district = 26\nfinancial_district_start_time = \"8:00PM\"\nfinancial_district_end_time = \"10:00PM\"\nminimum_meeting_duration = 105\n\ndef convert_time_to_minutes(t):\n    dt = datetime.strptime(t, '%I:%M%p')\n    return dt.hour * 60 + dt.minute\n\ndef convert_minutes_to_time(m):\n    hours = m // 60\n    minutes = m % 60\n    return f\"{hours % 12 if hours % 12 != 0 else 12}:{minutes:02}{'AM' if hours < 12 else 'PM'}\"\n\n# Compute start time in minutes\narrival_time = convert_time_to_minutes(start_time)\ntravel_arrival_time = arrival_time + travel_time_to_financial_district\n\n# Wait until financial district time\nfd_start_time = convert_time_to_minutes(financial_district_start_time)\n\n# Wait duration if arriving before meeting time\nif travel_arrival_time < fd_start_time:\n    wait_time = fd_start_time - travel_arrival_time\nelse:\n    wait_time = 0  # If we arrive after the meeting start time\n\n# Calculate when the meeting can start and end\nmeeting_start_time = fd_start_time\nmeeting_end_time = meeting_start_time + minimum_meeting_duration\n\n# Make sure the meeting ends before the end time of the availability\nfd_end_time = convert_time_to_minutes(financial_district_end_time)\nif meeting_end_time > fd_end_time:\n    meeting_end_time = fd_end_time\n    meeting_start_time = meeting_end_time - minimum_meeting_duration\n\n# Build the schedule\nschedule = [\n    {\"action\": \"start\", \"location\": start_location, \"time\": start_time},\n    {\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_time_to_financial_district, \"time\": convert_minutes_to_time(travel_arrival_time), \"to\": \"Financial District\"},\n    {\"action\": \"wait\", \"location\": \"Financial District\", \"time\": convert_minutes_to_time(travel_arrival_time + wait_time)},\n    {\"action\": \"meet\", \"location\": \"Financial District\", \"duration\": minimum_meeting_duration, \"time\": convert_minutes_to_time(meeting_start_time)}\n]\n\n# Output the result as JSON\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_67",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "9:17AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 30,
                    "time": "9:17AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip('0').replace('AM', 'AM').replace('PM', 'PM')\n\ndef compute_schedule(start_location, travel_time_to_friend, friend_location, friend_time_start, friend_time_end, meeting_duration):\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    travel_time_delta = timedelta(minutes=travel_time_to_friend)\n    arrival_time = start_time + travel_time_delta\n\n    if arrival_time < friend_time_start:\n        wait_time = friend_time_start - arrival_time\n        wait_time_delta = timedelta(seconds=wait_time.total_seconds())\n        arrival_time += wait_time_delta\n    \n    meeting_start_time = max(arrival_time, friend_time_start)\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n    if meeting_end_time > friend_time_end:\n        return None  # Not possible to meet within the given constraints\n\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \"time\": format_time(arrival_time), \"to\": friend_location},\n        {\"action\": \"wait\", \"location\": friend_location, \"time\": format_time(meeting_start_time)},\n        {\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": format_time(meeting_start_time)}\n    ]\n\n    return {\"schedule\": schedule}\n\ndef main():\n    # Meeting specifications\n    start_location = \"Haight-Ashbury\"\n    travel_time_to_friend = 17  # minutes\n    friend_location = \"Russian Hill\"\n    friend_time_start = datetime.strptime(\"7:45AM\", \"%I:%M%p\")\n    friend_time_end = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    meeting_duration = 30  # minutes\n\n    # Compute the schedule\n    schedule = compute_schedule(start_location, travel_time_to_friend, friend_location, friend_time_start, friend_time_end, meeting_duration)\n\n    # Output the result as JSON\n    print(json.dumps(schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_68",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 90,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M %p\").lstrip(\"0\")\n\ndef compute_schedule(start_location, arrival_time, travel_time, meeting_time, meeting_window_start, meeting_window_end, min_meeting_duration):\n    # Calculate travel to meeting location\n    travel_duration = timedelta(minutes=travel_time)\n    current_time = arrival_time + travel_duration\n    wait_until = meeting_window_start\n    wait_time = wait_until - current_time\n\n    # If current time is less than wait_until, we can wait\n    if wait_time.total_seconds() < 0:\n        return None  # No valid schedule\n\n    # Calculate meeting time\n    meeting_start = max(wait_until, current_time)\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n\n    if meeting_end > meeting_window_end:\n        return None  # Not enough time to meet\n\n    # Construct schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Meeting Location\", \"duration\": travel_time, \"time\": format_time(current_time), \"to\": \"Meeting Location\"},\n        {\"action\": \"wait\", \"location\": \"Meeting Location\", \"time\": format_time(meeting_start)},\n        {\"action\": \"meet\", \"location\": \"Meeting Location\", \"duration\": min_meeting_duration, \"time\": format_time(meeting_start)},\n    ]\n\n    return {\"schedule\": schedule}\n\ndef main():\n    # Inputs for meeting constraints regarding Mark\n    start_location = \"Chinatown\"\n    arrival_time = datetime.strptime(\"09:00 AM\", \"%I:%M %p\")\n    travel_time = 7  # Travel to Union Square\n    meeting_time = 90  # Minimum meeting duration in minutes\n    meeting_window_start = datetime.strptime(\"08:00 AM\", \"%I:%M %p\")\n    meeting_window_end = datetime.strptime(\"12:45 PM\", \"%I:%M %p\")\n    min_meeting_duration = 90  # Minimum meeting time required\n\n    schedule = compute_schedule(start_location, arrival_time, travel_time, meeting_time, meeting_window_start, meeting_window_end, min_meeting_duration)\n\n    if schedule:\n        print(json.dumps(schedule, indent=2))\n    else:\n        print(json.dumps({\"error\": \"No valid meeting schedule can be computed.\"}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_69",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:24AM",
                    "duration": 24,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 24,
                    "time": "9:24AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 30,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints and travel times\nconstraints = {\n    \"start_location\": \"Golden Gate Park\",\n    \"start_time\": \"9:00AM\",\n    \"friend_name\": \"Ronald\",\n    \"friend_location\": \"North Beach\",\n    \"friend_availability_start\": \"9:30AM\",\n    \"friend_availability_end\": \"6:30PM\",\n    \"minimum_meeting_duration\": 30,\n    \"travel_time_to_friend\": 24,\n    \"travel_time_from_friend\": 22\n}\n\ndef time_to_minutes(time_str):\n    time_format = '%I:%M%p'\n    dt = datetime.strptime(time_str, time_format)\n    return dt.hour * 60 + dt.minute\n\ndef minutes_to_time(minutes):\n    hour = minutes // 60\n    minute = minutes % 60\n    return f\"{hour % 12 if hour % 12 else 12}:{minute:02d}{'AM' if hour < 12 else 'PM'}\"\n\ndef calculate_schedule(constraints):\n    # Parse start time\n    start_time = time_to_minutes(constraints[\"start_time\"])\n    travel_time_to_friend = constraints[\"travel_time_to_friend\"]\n    friend_availability_start = time_to_minutes(constraints[\"friend_availability_start\"])\n    friend_availability_end = time_to_minutes(constraints[\"friend_availability_end\"])\n    minimum_meeting_duration = constraints[\"minimum_meeting_duration\"]\n\n    # Calculate arriving time at friend's location after travel\n    arrive_time = start_time + travel_time_to_friend\n\n    # Wait until friend is available or meet immediately\n    wait_time = max(0, friend_availability_start - arrive_time)\n    wait_arrive_time = arrive_time + wait_time\n\n    # Calculate meeting start time and end time\n    meeting_start_time = max(wait_arrive_time, friend_availability_start)\n    meeting_end_time = meeting_start_time + minimum_meeting_duration\n\n    # Check if need to wait till availability and within available time slot\n    if meeting_end_time > friend_availability_end:\n        return None  # Cannot meet within the time constraints\n\n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": constraints[\"start_location\"], \"time\": constraints[\"start_time\"]},\n        {\"action\": \"travel\", \"location\": constraints[\"friend_location\"], \"duration\": travel_time_to_friend,\n         \"time\": minutes_to_time(arrive_time), \"to\": constraints[\"friend_location\"]},\n        {\"action\": \"wait\", \"location\": constraints[\"friend_location\"], \"time\": minutes_to_time(wait_arrive_time)},\n        {\"action\": \"meet\", \"location\": constraints[\"friend_location\"], \"duration\": minimum_meeting_duration,\n         \"time\": minutes_to_time(meeting_start_time)}\n    ]\n\n    return {\"schedule\": schedule}\n\n# Calculate the schedule\noptimal_schedule = calculate_schedule(constraints)\n\n# Output the result as JSON\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_70",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:18AM",
                    "duration": 18,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "11:00AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef compute_schedule():\n    # Constants\n    travel_time_to_bayview = 18\n    travel_time_to_haight_ashbury = 19\n\n    # Meeting constraints\n    arrival_time_haight = datetime.strptime(\"09:00AM\", \"%I:%M%p\")\n    paul_start_time = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    paul_end_time = datetime.strptime(\"04:30PM\", \"%I:%M%p\")\n    meeting_duration = 90  # in minutes\n\n    # Calculate arrival at Bayview\n    travel_to_bayview_time = arrival_time_haight + timedelta(minutes=travel_time_to_bayview)\n    wait_until = max(travel_to_bayview_time, paul_start_time)\n\n    # Determine meeting time\n    latest_start_time = paul_end_time - timedelta(minutes=meeting_duration)\n    if wait_until < latest_start_time:\n        meeting_start = max(wait_until, paul_start_time)\n        meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n        # Create the schedule\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": format_time(arrival_time_haight)},\n            {\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_time_to_bayview, \"time\": format_time(travel_to_bayview_time), \"to\": \"Bayview\"},\n            {\"action\": \"wait\", \"location\": \"Bayview\", \"time\": format_time(wait_until)},\n            {\"action\": \"meet\", \"location\": \"Bayview\", \"duration\": meeting_duration, \"time\": format_time(meeting_start)}\n        ]\n\n        return json.dumps({\"schedule\": schedule}, indent=2)\n    else:\n        return json.dumps({\"error\": \"It is not possible to meet Paul for the desired duration.\"})\n\nif __name__ == \"__main__\":\n    print(compute_schedule())\n```",
            "count": "meeting_planning_example_71",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Destination",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Destination"
                },
                {
                    "action": "wait",
                    "location": "Destination",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Destination",
                    "time": "9:45AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "9:45AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef calculate_schedule(start_location, arrive_time, travel_time, wait_until, meet_duration):\n    # Convert arrive_time and wait_until to datetime objects\n    arrive_dt = datetime.strptime(arrive_time, \"%I:%M%p\")\n    \n    # Travel to the destination\n    travel_dt = arrive_dt + timedelta(minutes=travel_time)\n    \n    # Wait until the meeting time\n    wait_until_dt = datetime.strptime(wait_until, \"%I:%M%p\")\n    if travel_dt < wait_until_dt:\n        wait_time = wait_until_dt - travel_dt\n        wait_duration = wait_time.total_seconds() // 60\n        wait_action_time = wait_until_dt\n        \n        # Schedule the meeting\n        meet_start = wait_until_dt\n        meet_end = meet_start + timedelta(minutes=meet_duration)\n        \n        schedule = [\n            {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrive_dt)},\n            {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": travel_time, \"time\": format_time(travel_dt), \"to\": \"Destination\"},\n            {\"action\": \"wait\", \"location\": \"Destination\", \"time\": format_time(wait_action_time)},\n            {\"action\": \"meet\", \"location\": \"Destination\", \"duration\": meet_duration, \"time\": format_time(meet_start)},\n        ]\n        \n        return {\"schedule\": schedule}\n    else:\n        return {\"error\": \"Unable to meet within available time.\"}\n\n# Define constraints\nstart_location = \"Pacific Heights\"\narrive_time = \"9:00AM\"\ntravel_time = 10\nwait_until = \"9:45AM\"\nmeet_duration = 90\n\n# Calculate the optimal schedule\noptimal_schedule = calculate_schedule(start_location, arrive_time, travel_time, wait_until, meet_duration)\n\n# Output the schedule as a JSON formatted string\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_72",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "9:07AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 60,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_times = {\n    \"Russian Hill to Pacific Heights\": 7,\n    \"Pacific Heights to Russian Hill\": 7\n}\nbarbara_avail_start = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\nbarbara_avail_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\nmeeting_duration = 60\n\ndef compute_schedule():\n    # Start at Russian Hill\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Travel to Pacific Heights\n    travel_duration = travel_times[\"Russian Hill to Pacific Heights\"]\n    arrival_at_pacific_heights = arrival_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_duration,\n        \"time\": arrival_at_pacific_heights.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n\n    # Wait until Barbara is available\n    wait_until = max(arrival_at_pacific_heights, barbara_avail_start)\n    wait_duration = (wait_until - arrival_at_pacific_heights).seconds // 60\n    schedule.append({\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": wait_until.strftime(\"%I:%M%p\")})\n\n    # Meet Barbara\n    meeting_start = wait_until\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    if meeting_end > barbara_avail_end:\n        meeting_end = barbara_avail_end\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": (meeting_end - meeting_start).seconds // 60,\n        \"time\": meeting_start.strftime(\"%I:%M%p\")\n    })\n\n    return {\"schedule\": schedule}\n\n# Execute the program and print the result as JSON\nif __name__ == \"__main__\":\n    optimal_schedule = compute_schedule()\n    print(json.dumps(optimal_schedule, indent=4))\n```",
            "count": "meeting_planning_example_73",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:00PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef create_meeting_schedule(start_location, travel_time, arrival_time, meet_time, meet_duration, end_time):\n    # Parse the arrival and end times\n    arrival = datetime.strptime(arrival_time, \"%I:%M%p\")\n    end = datetime.strptime(end_time, \"%I:%M%p\")\n    \n    # Calculate travel\n    travel_duration = timedelta(minutes=travel_time)\n    travel_arrival_time = arrival + travel_duration\n\n    # Update schedule\n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": arrival_time})\n    schedule.append({\"action\": \"travel\", \"location\": meet_time[0], \"duration\": travel_time, \"time\": travel_arrival_time.strftime(\"%I:%M%p\"), \"to\": meet_time[0]})\n    \n    # Wait until the meeting time\n    waiting_time = (datetime.strptime(meet_time[1], \"%I:%M%p\") - travel_arrival_time).total_seconds() / 60\n    if waiting_time > 0:\n        waiting_duration = timedelta(minutes=waiting_time)\n        waiting_end_time = travel_arrival_time + waiting_duration\n        schedule.append({\"action\": \"wait\", \"location\": meet_time[0], \"time\": waiting_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet for the required duration\n    meet_start_time = datetime.strptime(meet_time[1], \"%I:%M%p\")\n    meet_end_time = meet_start_time + timedelta(minutes=meet_duration)\n    schedule.append({\"action\": \"meet\", \"location\": meet_time[0], \"duration\": meet_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\n# Input parameters\nstart_location = \"Richmond District\"\ntravel_time = 17\narrival_time = \"9:00AM\"\nmeet_time = (\"Nob Hill\", \"4:00PM\")\nmeet_duration = 45\nend_time = \"6:15PM\"\n\n# Generate schedule\nschedule = create_meeting_schedule(start_location, travel_time, arrival_time, meet_time, meet_duration, end_time)\n\n# Output in JSON format\nprint(json.dumps(schedule, indent=4))\n```",
            "count": "meeting_planning_example_74",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "PacificHeighTS"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef create_schedule():\n    # Input variables\n    start_location = \"Pacific Heights\"\n    arrival_time = \"9:00AM\"\n    travel_time_to_destination = 13\n    destination = \"Fisherman's Wharf\"\n    waiting_time_start = \"11:30AM\"\n    waiting_time_end = \"2:45PM\"\n    meeting_duration = 15\n\n    # Parse times\n    start_dt = datetime.strptime(arrival_time, \"%I:%M%p\")\n    travel_to_dest_dt = start_dt + timedelta(minutes=travel_time_to_destination)\n    \n    # Wait until first possible meeting time\n    wait_start_dt = datetime.strptime(waiting_time_start, \"%I:%M%p\")\n    wait_end_dt = datetime.strptime(waiting_time_end, \"%I:%M%p\")\n    \n    # Time after arrival and travel\n    wait_until = max(travel_to_dest_dt, wait_start_dt)\n\n    # This calculates the meeting start time\n    meeting_start_time = wait_until\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n    # Adjust meeting end time if it exceeds the end of the wait period\n    if meeting_end_time > wait_end_dt:\n        meeting_end_time = wait_end_dt\n\n    # Prepare the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": start_location},\n        {\n            \"action\": \"travel\",\n            \"location\": destination,\n            \"duration\": travel_time_to_destination,\n            \"time\": travel_to_dest_dt.strftime(\"%I:%M%p\"),\n            \"to\": destination\n        },\n        {\"action\": \"wait\", \"location\": destination, \"time\": wait_until.strftime(\"%I:%M%p\")},\n        {\n            \"action\": \"meet\",\n            \"location\": destination,\n            \"duration\": meeting_duration,\n            \"time\": meeting_start_time.strftime(\"%I:%M%p\")\n        }\n    ]\n\n    # Create final output dictionary\n    output = {\"schedule\": schedule}\n\n    # Output as JSON\n    return json.dumps(output, indent=2)\n\nif __name__ == \"__main__\":\n    print(create_schedule())\n```",
            "count": "meeting_planning_example_75",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 60,
                    "time": "5:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(t):\n    return t.strftime(\"%I:%M%p\").lstrip('0')\n\ndef compute_schedule():\n    # Initial constraints\n    location = \"Marina District\"\n    destination = \"Haight-Ashbury\"\n    travel_time = 16  # Travel time from Marina District to Haight-Ashbury\n    wait_start = datetime.strptime(\"5:00PM\", \"%I:%M%p\")\n    wait_end = datetime.strptime(\"8:15PM\", \"%I:%M%p\")\n    meeting_duration = 60  # Minimum meeting duration in minutes\n\n    # Start time at Marina District\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    travel_arrival_time = start_time + timedelta(minutes=travel_time)\n\n    # Compute waiting and meeting times\n    wait_until_time = wait_start\n    wait_duration = (wait_until_time - travel_arrival_time).total_seconds() // 60\n    \n    if wait_duration < 0:\n        return {\"error\": \"Cannot wait, not enough time to meet.\"}\n\n    meeting_end_time = wait_until_time + timedelta(minutes=meeting_duration)\n\n    # Check if meeting ends before the last possible time\n    if meeting_end_time > wait_end:\n        return {\"error\": \"Cannot meet, not enough time available.\"}\n\n    # Schedule creation\n    schedule = [\n        {\"action\": \"start\", \"location\": location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": format_time(travel_arrival_time), \"to\": destination},\n        {\"action\": \"wait\", \"location\": destination, \"time\": format_time(wait_until_time)},\n        {\"action\": \"meet\", \"location\": destination, \"duration\": meeting_duration, \"time\": format_time(wait_until_time)}\n    ]\n\n    return {\"schedule\": schedule}\n\n# Compute the schedule\noptimal_schedule = compute_schedule()\n\n# Output JSON result\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_76",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:09AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:09AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 30,
                    "time": "9:09AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule():\n    # Define the parameters\n    start_location = \"Richmond District\"\n    start_time = \"9:00AM\"\n    travel_time_to_destination = 9  # minutes\n    destination = \"Golden Gate Park\"\n    start_time_destination = datetime.strptime(\"8:15AM\", \"%I:%M%p\")\n    end_time_destination = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    minimum_meeting_duration = 30  # minutes\n\n    # Convert start_time to datetime\n    start_time_dt = datetime.strptime(start_time, \"%I:%M%p\")\n\n    # Travel to destination\n    travel_arrival_time = start_time_dt + timedelta(minutes=travel_time_to_destination)\n\n    # Check if arrival time is before meeting time\n    if travel_arrival_time < start_time_dt:\n        wait_time = start_time_dt - travel_arrival_time\n        wait_arrival_time = start_time_dt\n    else:\n        wait_time = timedelta(0)\n        wait_arrival_time = travel_arrival_time\n\n    # Meeting time must be within the available window\n    meeting_start_time = max(wait_arrival_time, start_time_destination)\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n\n    # If the meeting ends after the available window, adjust meeting start time\n    if meeting_end_time > end_time_destination:\n        return None  # Cannot meet as the time does not align\n\n    # Prepare the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": start_time},\n        {\"action\": \"travel\", \"location\": destination, \"duration\": travel_time_to_destination, \"time\": travel_arrival_time.strftime(\"%I:%M%p\"), \"to\": destination},\n        {\"action\": \"wait\", \"location\": start_location, \"time\": wait_arrival_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"meet\", \"location\": destination, \"duration\": minimum_meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")}\n    ]\n\n    return {\"schedule\": schedule}\n\n# Compute and print the meeting schedule in JSON format\nmeeting_schedule = compute_meeting_schedule()\nprint(json.dumps(meeting_schedule, indent=2))\n```",
            "count": "meeting_planning_example_77",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "6:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 105,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_meeting_schedule():\n    # Input parameters\n    start_location = \"Union Square\"\n    travel_time_to_castro = 19\n    castro_start = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    castro_end = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    meeting_duration = 105  # minutes\n\n    # Arrival time at start location\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n\n    # Calculate travel to Castro\n    travel_arrival_time = start_time + timedelta(minutes=travel_time_to_castro)\n\n    # Waiting until meeting time if necessary\n    wait_start_time = castro_start\n    \n    # Compute meeting time\n    meet_start_time = max(travel_arrival_time, wait_start_time)\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n\n    # If the meeting end time exceeds the end time allowed, adjust\n    if meet_end_time > castro_end:\n        meet_end_time = castro_end\n        meet_start_time = meet_end_time - timedelta(minutes=meeting_duration)\n        \n    # Constructing the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time_to_castro,\n            \"time\": format_time(travel_arrival_time),\n            \"to\": \"The Castro\"\n        },\n        {\n            \"action\": \"wait\",\n            \"location\": \"The Castro\",\n            \"time\": format_time(wait_start_time)\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": \"The Castro\",\n            \"duration\": meeting_duration,\n            \"time\": format_time(meet_start_time)\n        }\n    ]\n\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\nif __name__ == \"__main__\":\n    meeting_schedule = compute_meeting_schedule()\n    print(meeting_schedule)\n```",
            "count": "meeting_planning_example_78",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "1:30PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef compute_meeting_schedule():\n    # Given parameters\n    start_location = \"North Beach\"\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    destination = \"Bayview\"\n    travel_time_to_destination = 22\n    travel_time_from_destination = 21\n    \n    paul_availability_start = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\n    paul_availability_end = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    desired_meeting_duration = 45\n    \n    # Travel to Bayview\n    travel_arrival_time = start_time + timedelta(minutes=travel_time_to_destination)\n    \n    # Wait until Paul is available\n    wait_time = max((paul_availability_start - travel_arrival_time).total_seconds() / 60, 0)\n    wait_arrival_time = travel_arrival_time + timedelta(minutes=wait_time)\n    \n    # Set the meeting start and end time\n    meeting_start_time = wait_arrival_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=desired_meeting_duration)\n    \n    # Validate the meeting can take place within Paul's availability\n    if meeting_start_time >= paul_availability_start and meeting_end_time <= paul_availability_end:\n        # Create the schedule\n        schedule = [\n            {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n            {\"action\": \"travel\", \"location\": destination, \"duration\": travel_time_to_destination, \"time\": format_time(travel_arrival_time), \"to\": destination},\n            {\"action\": \"wait\", \"location\": destination, \"time\": format_time(wait_arrival_time)},\n            {\"action\": \"meet\", \"location\": destination, \"duration\": desired_meeting_duration, \"time\": format_time(meeting_start_time)}\n        ]\n        \n        # Output the result as a JSON-formatted dictionary\n        return json.dumps({\"schedule\": schedule}, indent=2)\n    else:\n        return json.dumps({\"error\": \"Unable to schedule meeting within constraints\"}, indent=2)\n\nprint(compute_meeting_schedule())\n```",
            "count": "meeting_planning_example_79",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:18AM",
                    "duration": 18,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "2:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip(\"0\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef compute_schedule(location_start, travel_time_to_meet, wait_until, meet_time, meet_duration):\n    # Convert times to datetime objects\n    arrival_time = datetime.strptime(\"9:00AM\", '%I:%M%p')\n    travel_to_meet_time = arrival_time + timedelta(minutes=travel_time_to_meet)\n    \n    schedule = [\n        {\"action\": \"start\", \"location\": location_start, \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": travel_time_to_meet, \n         \"time\": format_time(travel_to_meet_time), \"to\": \"Marina District\"},\n        {\"action\": \"wait\", \"location\": \"Marina District\", \"time\": format_time(wait_until)},\n        {\"action\": \"meet\", \"location\": \"Marina District\", \"duration\": meet_duration, \n         \"time\": format_time(meet_time)}\n    ]\n    \n    return schedule\n\n# Meeting constraints\ntravel_time_to_meet = 18  # Minutes from Union Square to Marina District\nwait_start_time = datetime.strptime(\"12:30PM\", '%I:%M%p')\nmeet_time = wait_start_time + timedelta(minutes=105)  # Meeting duration of 105 minutes\nwait_until = wait_start_time\n\n# Compute optimal schedule\nschedule = compute_schedule(\"Union Square\", travel_time_to_meet, wait_until, meet_time, 105)\n\n# Output as JSON\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_80",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "12:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef calculate_meeting_schedule(start_location, travel_time_to_meet, meet_time_range, min_meeting_duration):\n    # Arrival time at start_location\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Travel to meeting location\n    travel_time = timedelta(minutes=travel_time_to_meet)\n    arrival_meet_location = arrival_time + travel_time\n    \n    # Waiting until the start of meeting time slot\n    wait_until = max(arrival_meet_location, meet_time_range[0])\n    \n    # Calculate meeting times\n    meeting_start = wait_until\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end > meet_time_range[1]:\n        return None  # Not enough time for the meeting within the constraints\n    \n    # Preparing the schedule dictionary\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time_to_meet, \n         \"time\": format_time(arrival_meet_location), \"to\": \"Golden Gate Park\"},\n        {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": format_time(wait_until)},\n        {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": min_meeting_duration, \n         \"time\": format_time(meeting_start)}\n    ]\n    \n    return {\"schedule\": schedule}\n\ndef main():\n    start_location = \"Richmond District\"\n    travel_time_to_meet = 13\n    meet_time_range = [\n        datetime.strptime(\"12:30PM\", \"%I:%M%p\"),\n        datetime.strptime(\"7:15PM\", \"%I:%M%p\"),\n    ]\n    min_meeting_duration = 75\n    \n    meeting_schedule = calculate_meeting_schedule(start_location, travel_time_to_meet, meet_time_range, min_meeting_duration)\n\n    if meeting_schedule:\n        print(json.dumps(meeting_schedule, indent=2))\n    else:\n        print(\"Cannot schedule the meeting within the constraints.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_81",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "5:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "5:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define the meeting constraints\nconstraints = {\n    \"arrival_location\": \"Golden Gate Park\",\n    \"arrival_time\": \"9:00AM\",\n    \"appointment_location\": \"Alamo Square\",\n    \"appointment_start\": \"5:45PM\",\n    \"appointment_end\": \"9:30PM\",\n    \"minimum_meeting_duration\": 75,  # in minutes\n    \"travel_time_to_appointment\": 10,  # in minutes\n    \"travel_time_to_return\": 9  # in minutes\n}\n\n# Helper function to convert time string to datetime object\ndef convert_time_to_datetime(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\n# Helper function to convert datetime object to desired string format\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0').replace(' 0', ' ')\n\ndef compute_schedule(constraints):\n    # Arrival time at the starting location\n    arrival_time = convert_time_to_datetime(constraints[\"arrival_time\"])\n    \n    # Travel to appointment location\n    travel_to_appointment = timedelta(minutes=constraints[\"travel_time_to_appointment\"])\n    arrival_at_appointment = arrival_time + travel_to_appointment\n    \n    # Convert appointment times to datetime\n    appointment_start = convert_time_to_datetime(constraints[\"appointment_start\"])\n    appointment_end = convert_time_to_datetime(constraints[\"appointment_end\"])\n    \n    # Calculate the actual meeting time window\n    meeting_start = max(arrival_at_appointment, appointment_start)\n    meeting_duration = timedelta(minutes=constraints[\"minimum_meeting_duration\"])\n    meeting_end = meeting_start + meeting_duration\n\n    # Adjust meeting end time if it exceeds the available time\n    if meeting_end > appointment_end:\n        meeting_end = appointment_end\n\n    # Check if the meeting can happen\n    if meeting_start < appointment_end and meeting_end > meeting_start:\n        schedule = [\n            {\"action\": \"start\", \"location\": constraints[\"arrival_location\"], \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": constraints[\"appointment_location\"], \"duration\": constraints[\"travel_time_to_appointment\"], \"time\": format_time(arrival_at_appointment), \"to\": constraints[\"appointment_location\"]},\n            {\"action\": \"wait\", \"location\": constraints[\"appointment_location\"], \"time\": format_time(meeting_start)},\n            {\"action\": \"meet\", \"location\": constraints[\"appointment_location\"], \"duration\": constraints[\"minimum_meeting_duration\"], \"time\": format_time(meeting_start)}\n        ]\n        return {\"schedule\": schedule}\n    else:\n        return {\"error\": \"Meeting cannot be scheduled within the available time.\"}\n\n# Compute the schedule\nschedule_result = compute_schedule(constraints)\n\n# Output the result as JSON\nprint(json.dumps(schedule_result, indent=2))\n```",
            "count": "meeting_planning_example_82",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef calculate_schedule():\n    # Input parameters\n    arrival_location = \"Presidio\"\n    arrival_time = datetime.strptime(\"9:00AM\", '%I:%M%p')\n    travel_time_to_gg_park = 12\n    travel_time_to_presidio = 11\n    carol_availability_start = datetime.strptime(\"9:45PM\", '%I:%M%p')\n    carol_availability_end = datetime.strptime(\"10:30PM\", '%I:%M%p')\n    meeting_duration = 45\n\n    # Determine travel to Golden Gate Park\n    travel_to_gg_park = arrival_time + timedelta(minutes=travel_time_to_gg_park)\n    \n    # Check waiting time until Carol is available\n    if travel_to_gg_park < carol_availability_start:\n        wait_time_start = travel_to_gg_park\n        wait_time_end = carol_availability_start\n        wait_duration = (wait_time_end - wait_time_start).seconds // 60\n        \n        if wait_duration >= 0:  # Valid waiting time\n            # Calculate meeting time\n            meeting_start = carol_availability_start\n            meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n            \n            if meeting_end <= carol_availability_end:\n                # Create the schedule\n                schedule = [\n                    {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n                    {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time_to_gg_park, \"time\": format_time(travel_to_gg_park), \"to\": \"Golden Gate Park\"},\n                    {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": format_time(wait_time_end)},\n                    {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": meeting_duration, \"time\": format_time(meeting_start)},\n                ]\n                \n                return json.dumps({\"schedule\": schedule}, indent=4)\n\n    return json.dumps({\"schedule\": []}, indent=4)\n\nif __name__ == \"__main__\":\n    print(calculate_schedule())\n```",
            "count": "meeting_planning_example_83",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:05AM",
                    "duration": 5,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 5,
                    "time": "9:05AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')  # Remove leading zero\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    \n    # Travel distances (in minutes)\n    travel_time = {\n        \"Alamo Square\": {\n            \"Haight-Ashbury\": 5,\n        }\n    }\n\n    # Constraints for the meeting\n    meeting_start = datetime.strptime('11:00AM', '%I:%M%p')\n    meeting_end = datetime.strptime('1:00PM', '%I:%M%p')\n    min_meeting_duration = 30  # in minutes\n\n    # Calculate travel time to Haight-Ashbury\n    travel_duration = travel_time[\"Alamo Square\"][\"Haight-Ashbury\"]\n    travel_arrival_time = arrival_time + timedelta(minutes=travel_duration)\n    \n    # Wait until the meeting start time\n    wait_time_start = travel_arrival_time\n    \n    if wait_time_start < meeting_start:\n        wait_time_end = meeting_start  # Wait until meeting starts\n\n        # Meeting time from start\n        meeting_duration = min_meeting_duration\n        meeting_end_time = meeting_start + timedelta(minutes=meeting_duration)\n        \n        if meeting_end_time <= meeting_end:  # Check if there's enough time for the meeting\n            schedule = [\n                {\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": format_time(arrival_time)},\n                {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_duration, \"time\": format_time(travel_arrival_time), \"to\": \"Haight-Ashbury\"},\n                {\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": format_time(wait_time_end)},\n                {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration, \"time\": format_time(meeting_start)},\n            ]\n            \n            # Return schedule as JSON\n            return json.dumps({\"schedule\": schedule}, indent=2)\n    \n    return json.dumps({\"schedule\": []}, indent=2)\n\n# Executing the function to get the meeting schedule\nprint(compute_schedule())\n```",
            "count": "meeting_planning_example_84",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:04AM",
                    "duration": 4,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "1:15PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 4,
                    "time": "9:04AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule():\n    # Parameters\n    start_time_str = '9:00AM'\n    arrival_time = datetime.strptime(start_time_str, '%I:%M%p')\n    \n    travel_times = {\n        'North Beach': 4,\n        'Russian Hill': 5,\n    }\n    \n    william_availability_start = datetime.strptime('1:15PM', '%I:%M%p')\n    william_availability_end = datetime.strptime('9:30PM', '%I:%M%p')\n    meeting_duration = 15  # in minutes\n    \n    # Travel to Russian Hill\n    travel_to_russian_hill_duration = travel_times['North Beach']\n    travel_time_to_russian_hill = arrival_time + timedelta(minutes=travel_to_russian_hill_duration)\n    \n    # Wait until William is available\n    wait_until = max(william_availability_start, travel_time_to_russian_hill)\n    \n    # Meeting time\n    meeting_start_time = wait_until\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n    # Build the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time.strftime('%-I:%M%p')},\n        {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_to_russian_hill_duration, \n         \"time\": travel_time_to_russian_hill.strftime('%-I:%M%p'), \"to\": \"Russian Hill\"},\n        {\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": wait_until.strftime('%-I:%M%p')},\n        {\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": meeting_duration, \n         \"time\": meeting_start_time.strftime('%-I:%M%p')}\n    ]\n    \n    # Form the output dictionary\n    output = {\"schedule\": schedule}\n    \n    # Print output as JSON\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    compute_schedule()\n```",
            "count": "meeting_planning_example_85",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "7:45PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip('0')\n\ndef calculate_schedule():\n    # Input parameters\n    start_location = \"Marina District\"\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    travel_time_to_nob_hill = 12\n    travel_time_from_nob_hill = 11\n    meeting_start_time = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    meeting_end_time = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    min_meeting_duration = 15  # In minutes\n\n    # Calculate arrival time at Nob Hill\n    travel_duration = timedelta(minutes=travel_time_to_nob_hill)\n    arrival_time = start_time + travel_duration\n\n    # Calculate waiting time for the meeting\n    if arrival_time < meeting_start_time:\n        wait_time = meeting_start_time - arrival_time  # Time to wait until meeting starts\n    else:\n        return None  # No valid meeting time\n\n    # Calculate meeting duration\n    meeting_duration = timedelta(minutes=min_meeting_duration)\n\n    # Check if the meeting fits within the available time\n    if meeting_start_time + meeting_duration > meeting_end_time:\n        return None  # Not enough time for a meeting\n\n    # Create the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time_to_nob_hill, \"time\": format_time(arrival_time), \"to\": \"Nob Hill\"},\n        {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": format_time(meeting_start_time)},\n        {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": min_meeting_duration, \"time\": format_time(meeting_start_time)},\n    ]\n\n    return {\"schedule\": schedule}\n\n# Calculate the schedule and output it as JSON\nschedule = calculate_schedule()\nif schedule:\n    print(json.dumps(schedule, indent=2))\nelse:\n    print(\"No valid schedule found.\")\n```",
            "count": "meeting_planning_example_86",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "9:11AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 75,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').lstrip('0')\n\ndef compute_meeting_schedule():\n    # Input parameters\n    travel_time_to_pacific_heights = 11\n    travel_time_from_pacific_heights = 10\n\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    james_start_time = datetime.strptime('8:30AM', '%I:%M%p')\n    james_end_time = datetime.strptime('3:00PM', '%I:%M%p')\n    min_meet_duration = 75  # in minutes\n\n    # Calculate travel arrival time\n    travel_arrival_time = arrival_time + timedelta(minutes=travel_time_to_pacific_heights)\n\n    # Calculate waiting time for James if arriving too early\n    if travel_arrival_time < james_start_time:\n        wait_time_start = travel_arrival_time\n        wait_time_end = james_start_time\n    else:\n        wait_time_start = travel_arrival_time\n        wait_time_end = travel_arrival_time\n\n    # Calculate meeting time range\n    meeting_start_time = max(wait_time_end, james_start_time)\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meet_duration)\n\n    if meeting_end_time > james_end_time:\n        return None  # Cannot meet James within his time constraints\n\n    # Constructing the schedule\n    schedule = []\n    \n    # Starting point\n    schedule.append({\"action\": \"start\", \"location\": \"Embarcadero\", \"time\": format_time(arrival_time)})\n    \n    # Travel to Pacific Heights\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_time_to_pacific_heights,\n        \"time\": format_time(travel_arrival_time),\n        \"to\": \"Pacific Heights\"\n    })\n\n    # Wait until James is available\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Pacific Heights\",\n        \"time\": format_time(wait_time_end)\n    })\n\n    # Meet James\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n\n    return {\"schedule\": schedule}\n\n# Generate the schedule\noptimal_schedule = compute_meeting_schedule()\n\n# Output the result as JSON\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_87",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "8:45PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 15,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef calculate_meeting_schedule():\n    # Input parameters\n    start_location = \"Sunset District\"\n    arrive_time = datetime.strptime('9:00AM', '%I:%M%p')\n    travel_time_to_golden_gate = 11  # minutes\n    golden_gate_location = \"Golden Gate Park\"\n    joshua_availability_start = datetime.strptime('8:45PM', '%I:%M%p')\n    joshua_availability_end = datetime.strptime('9:45PM', '%I:%M%p')\n    minimum_meeting_duration = 15  # minutes\n\n    # Travel from Sunset District to Golden Gate Park\n    travel_start_time = arrive_time + timedelta(minutes=travel_time_to_golden_gate)\n    \n    # Check when we can meet Joshua\n    meeting_start_time = max(travel_start_time, joshua_availability_start)\n\n    # Calculate how long we can meet\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n    \n    if meeting_end_time > joshua_availability_end:\n        return None  # Cannot meet if the meeting time exceeds availability\n\n    # Construct the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrive_time)},\n        {\"action\": \"travel\", \"location\": golden_gate_location, \"duration\": travel_time_to_golden_gate, \"time\": format_time(travel_start_time), \"to\": golden_gate_location},\n        {\"action\": \"wait\", \"location\": golden_gate_location, \"time\": format_time(meeting_start_time)},\n        {\"action\": \"meet\", \"location\": golden_gate_location, \"duration\": minimum_meeting_duration, \"time\": format_time(meeting_start_time)}\n    ]\n\n    return {\"schedule\": schedule}\n\noptimal_schedule = calculate_meeting_schedule()\nprint(json.dumps(optimal_schedule, indent=4))\n```",
            "count": "meeting_planning_example_88",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "6:00PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 60,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule(start_location, arrival_time, travel_time, friend_location, friend_availability, minimum_meeting_time):\n    # Convert strings to datetime objects\n    start_time = datetime.strptime(arrival_time, \"%I:%M%p\")\n    travel_duration = timedelta(minutes=travel_time)\n    minimum_meeting_duration = timedelta(minutes=minimum_meeting_time)\n\n    # Travel to friend's location\n    travel_time_to_friend = start_time + travel_duration\n    # Wait until friend is available\n    wait_until = max(travel_time_to_friend, friend_availability[0])\n    \n    # Meeting time\n    meeting_start = wait_until\n    meeting_end = meeting_start + minimum_meeting_duration\n    \n    # Ensure meeting doesn't exceed friend's availability\n    if meeting_end > friend_availability[1]:\n        meeting_end = friend_availability[1]\n    \n    # If meeting time is sufficient\n    if meeting_end - meeting_start >= minimum_meeting_duration:\n        schedule = [\n            {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n            {\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time, \"time\": format_time(travel_time_to_friend), \"to\": friend_location},\n            {\"action\": \"wait\", \"location\": friend_location, \"time\": format_time(wait_until)},\n            {\"action\": \"meet\", \"location\": friend_location, \"duration\": minimum_meeting_time, \"time\": format_time(meeting_start)}\n        ]\n        \n        return {\"schedule\": schedule}\n    else:\n        return None\n\n# Input parameters for the case provided\nstart_location = \"Mission District\"\narrival_time = \"9:00AM\"\ntravel_time = 15\nfriend_location = \"Bayview\"\nfriend_availability = (datetime.strptime(\"6:00PM\", \"%I:%M%p\"), datetime.strptime(\"7:30PM\", \"%I:%M%p\"))\nminimum_meeting_time = 60\n\nresult = compute_schedule(start_location, arrival_time, travel_time, friend_location, friend_availability, minimum_meeting_time)\n\n# Printing the JSON output\nprint(json.dumps(result, indent=4))\n```",
            "count": "meeting_planning_example_89",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule():\n    # Travel distances in minutes\n    travel_times = {\n        \"Alamo Square to Chinatown\": 16,\n        \"Chinatown to Alamo Square\": 17,\n    }\n\n    # Constraints\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    laura_start = datetime.strptime(\"8:15AM\", \"%I:%M%p\")\n    laura_end = datetime.strptime(\"6:45PM\", \"%I:%M%p\")\n    min_meet_duration = 15  # in minutes\n\n    # Calculate travel time from Alamo Square to Chinatown\n    travel_duration = travel_times[\"Alamo Square to Chinatown\"]\n    arrival_chinatown = arrival_time + timedelta(minutes=travel_duration)\n\n    # Wait time until Laura is available\n    if arrival_chinatown < laura_start:\n        wait_time = (laura_start - arrival_chinatown).total_seconds() // 60\n        wait_end_time = laura_start\n    else:\n        wait_time = 0\n        wait_end_time = arrival_chinatown\n\n    # Meeting end time\n    meeting_start_time = wait_end_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meet_duration)\n\n    # Create the schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": arrival_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_duration, \"time\": arrival_chinatown.strftime(\"%I:%M%p\"), \"to\": \"Chinatown\"},\n        {\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": wait_end_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": min_meet_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")},\n    ]\n\n    # Create a formatted result dictionary\n    result = {\n        \"schedule\": schedule\n    }\n\n    return json.dumps(result, indent=2)\n\nif __name__ == \"__main__\":\n    output = compute_schedule()\n    print(output)\n```",
            "count": "meeting_planning_example_90",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:14AM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "7:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef calculate_schedule():\n    # Input parameters\n    start_location = \"Russian Hill\"\n    travel_time_to_richmond = 14\n    arrival_time_richmond = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    daniel_available_start = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    daniel_available_end = datetime.strptime(\"8:15PM\", \"%I:%M%p\")\n    minimum_meeting_time = 75  # in minutes\n\n    # Calculate travel time\n    travel_start_time = arrival_time_richmond + timedelta(minutes=travel_time_to_richmond)\n    \n    # Calculate waiting time until Daniel is available\n    if travel_start_time < daniel_available_start:\n        wait_time = (daniel_available_start - travel_start_time).total_seconds() // 60\n        wait_end_time = daniel_available_start\n    else:\n        wait_time = 0\n        wait_end_time = travel_start_time\n    \n    # Meeting time calculation\n    meeting_start_time = wait_end_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_time)\n    \n    # Check if meeting can be scheduled within Daniel's availability\n    if meeting_end_time <= daniel_available_end:\n        schedule = [\n            {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time_richmond)},\n            {\n                \"action\": \"travel\",\n                \"location\": \"Richmond District\",\n                \"duration\": travel_time_to_richmond,\n                \"time\": format_time(travel_start_time),\n                \"to\": \"Richmond District\"\n            },\n            {\n                \"action\": \"wait\",\n                \"location\": \"Richmond District\",\n                \"time\": format_time(wait_end_time)\n            },\n            {\n                \"action\": \"meet\",\n                \"location\": \"Richmond District\",\n                \"duration\": minimum_meeting_time,\n                \"time\": format_time(meeting_start_time)\n            }\n        ]\n    else:\n        schedule = []  # Meeting cannot be scheduled\n\n    return json.dumps({\"schedule\": schedule}, indent=2)\n\nif __name__ == \"__main__\":\n    result = calculate_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_91",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:23AM",
                    "duration": 23.0,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "10:20AM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "10:20AM",
                    "duration": 45.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 45,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip('0')\n\ndef create_schedule(start_location, arrival_time, travel_time, waiting_time, meet_time, meet_duration, meet_location):\n    schedule = []\n\n    # Start at the location\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)})\n\n    # Travel to the destination\n    travel_end_time = arrival_time + travel_time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meet_location,\n        \"duration\": travel_time.total_seconds() // 60,\n        \"time\": format_time(travel_end_time),\n        \"to\": meet_location\n    })\n\n    # Wait until the meeting time\n    wait_end_time = travel_end_time + waiting_time\n    schedule.append({\"action\": \"wait\", \"location\": meet_location, \"time\": format_time(wait_end_time)})\n\n    # Meeting\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + meet_duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meet_location,\n        \"duration\": meet_duration.total_seconds() // 60,\n        \"time\": format_time(meet_start_time)\n    })\n\n    return schedule\n\ndef main():\n    # Input configuration\n    start_location = \"Financial District\"\n    arrival_time = datetime.strptime(\"09:00AM\", \"%I:%M%p\")\n    travel_time = timedelta(minutes=23)  # to The Castro\n    wait_time = timedelta(minutes=57)  # until 2:00PM\n    meet_duration = timedelta(minutes=45)  # meeting length\n    meet_location = \"The Castro\"\n\n    # Create schedule\n    schedule = create_schedule(start_location, arrival_time, travel_time, wait_time, datetime.strptime(\"02:00PM\", \"%I:%M%p\"), meet_duration, meet_location)\n\n    # Output the result as JSON\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_92",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:06AM",
                    "duration": 6,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "7:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 6,
                    "time": "9:06AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define the meeting constraints and travel distances\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\ntravel_times = {\n    \"North Beach to Chinatown\": 6,\n    \"Chinatown to North Beach\": 3\n}\nemily_availability = (datetime.strptime(\"7:00PM\", \"%I:%M%p\"), datetime.strptime(\"9:00PM\", \"%I:%M%p\"))\nminimum_meeting_duration = 75\n\n# Function to compute the optimal schedule\ndef compute_schedule():\n    # Arrive at North Beach\n    schedule = []\n    current_time = arrival_time\n\n    # Log starting action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"North Beach\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to Chinatown\n    travel_time_to_chinatown = travel_times[\"North Beach to Chinatown\"]\n    current_time += timedelta(minutes=travel_time_to_chinatown)\n\n    # Log travel action\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time_to_chinatown,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Chinatown\"\n    })\n\n    # Wait until Emily is available at 7:00PM\n    wait_until = emily_availability[0]\n    if current_time < wait_until:\n        wait_duration = (wait_until - current_time).total_seconds() / 60\n        current_time = wait_until\n\n        # Log wait action\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n\n    # Calculate meeting time\n    meeting_start = current_time\n    meeting_end = meeting_start + timedelta(minutes=minimum_meeting_duration)\n\n    # Check if the meeting fits in the availability\n    if meeting_start >= emily_availability[0] and meeting_end <= emily_availability[1]:\n        # Log meeting action\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"duration\": minimum_meeting_duration,\n            \"time\": meeting_start.strftime(\"%I:%M%p\")\n        })\n\n        return {\"schedule\": schedule}\n\n    # If we can't meet for the required time, indicate failure\n    return {\"schedule\": \"Cannot schedule meeting within available time\"}\n\n# Get the computed schedule\nschedule = compute_schedule()\n\n# Print the JSON output\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_93",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:15AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\nstart_location = \"Alamo Square\"\narrival_time = \"9:00AM\"\ntravel_to_russian_hill = 13\nrussian_hill_availability_start = \"11:15AM\"\nrussian_hill_availability_end = \"12:00PM\"\nminimum_meeting_duration = 15\n\ndef convert_to_datetime(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef convert_to_strftime(dt):\n    return dt.strftime(\"%I:%M%p\")\n\n# Schedule Calculation\narrival_time_dt = convert_to_datetime(arrival_time)\n\n# Compute travel time\ntravel_time_dt = arrival_time_dt + timedelta(minutes=travel_to_russian_hill)\ntravel_time_str = convert_to_strftime(travel_time_dt)\n\n# Compute wait time\navailability_start_dt = convert_to_datetime(russian_hill_availability_start)\nwait_time_dt = availability_start_dt\nwait_time_str = convert_to_strftime(wait_time_dt)\n\n# Compute meeting time\nmeeting_duration = timedelta(minutes=minimum_meeting_duration)\nmeeting_end_dt = wait_time_dt + meeting_duration\nmeeting_end_str = convert_to_strftime(meeting_end_dt)\n\n# Schedule\nschedule = {\n    \"schedule\": [\n        {\"action\": \"start\", \"location\": start_location, \"time\": convert_to_strftime(arrival_time_dt)},\n        {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_to_russian_hill, \"time\": travel_time_str, \"to\": \"Russian Hill\"},\n        {\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": wait_time_str},\n        {\"action\": \"meet\", \"location\": \"Russian Hill\", \"duration\": minimum_meeting_duration, \"time\": convert_to_strftime(wait_time_dt)}\n    ]\n}\n\n# Output the result as a JSON-formatted string\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_94",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "12:30PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef calculate_meeting_schedule():\n    # Input parameters\n    start_location = \"North Beach\"\n    arrive_time = datetime.strptime(\"09:00AM\", \"%I:%M%p\")\n    destination = \"Bayview\"\n    travel_time_to_destination = 22  # North Beach to Bayview\n    meeting_start_time = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    meeting_end_time = datetime.strptime(\"12:45PM\", \"%I:%M%p\")\n    minimum_meeting_duration = 90  # minutes\n\n    # Calculate schedule\n    schedule = []\n    \n    # Start at North Beach\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrive_time)})\n    \n    # Travel to Bayview\n    travel_time_dt = arrive_time + timedelta(minutes=travel_time_to_destination)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_time_to_destination,\n        \"time\": format_time(travel_time_dt),\n        \"to\": destination\n    })\n    \n    # Wait until meeting time\n    wait_time_dt = meeting_start_time  # wait until 11:00AM\n    schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": format_time(wait_time_dt)})\n    \n    # Meet Steven\n    meeting_duration = minimum_meeting_duration\n    meeting_start = meeting_start_time\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_end)\n    })\n    \n    return json.dumps({\"schedule\": schedule})\n\n# Execute the function and print the result\nprint(calculate_meeting_schedule())\n```",
            "count": "meeting_planning_example_95",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:27AM",
                    "duration": 27,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:27AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 27,
                    "time": "9:27AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 30,
                    "time": "9:27AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Function to compute the meeting schedule\ndef compute_meeting_schedule():\n    # Define travel times and other constraints\n    travel_time = {\n        \"Sunset District to Nob Hill\": 27,\n        \"Nob Hill to Sunset District\": 25\n    }\n    \n    # Meeting constraints\n    constraints = {\n        \"arrival_time\": \"9:00AM\",\n        \"friend_name\": \"Rebecca\",\n        \"friend_location\": \"Nob Hill\",\n        \"friend_availability\": (datetime.strptime(\"9:00AM\", \"%I:%M%p\"), datetime.strptime(\"6:15PM\", \"%I:%M%p\")),\n        \"min_meeting_time\": 30  # in minutes\n    }\n\n    # Convert arrival time to datetime\n    arrival_time = datetime.strptime(constraints[\"arrival_time\"], \"%I:%M%p\")\n\n    # Calculate travel to Nob Hill\n    travel_duration = travel_time[\"Sunset District to Nob Hill\"]\n    travel_start_time = arrival_time + timedelta(minutes=travel_duration)\n    \n    # Determine when we can meet Rebecca\n    meeting_start_time = max(travel_start_time, constraints[\"friend_availability\"][0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=constraints[\"min_meeting_time\"])\n\n    # Check if the meeting can be scheduled\n    if meeting_end_time <= constraints[\"friend_availability\"][1]:\n        # Create schedule output\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Sunset District\", \"time\": arrival_time.strftime(\"%I:%M%p\")},\n            {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Nob Hill\"},\n            {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": constraints[\"min_meeting_time\"], \"time\": meeting_start_time.strftime(\"%I:%M%p\")}\n        ]\n        \n        # Output the schedule as a JSON-formatted dictionary\n        return json.dumps({\"schedule\": schedule}, indent=4)\n\n# Execute the function and print the JSON output\nif __name__ == \"__main__\":\n    result = compute_meeting_schedule()\n    print(result)\n```",
            "count": "meeting_planning_example_96",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "6:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef create_schedule(start_location, arrival_time, travel_time, meet_location, meet_start, meet_end, meet_duration):\n    schedule = []\n    \n    # Convert times to datetime objects for easier calculation\n    arrival_dt = datetime.strptime(arrival_time, '%I:%M%p')\n    meet_start_dt = datetime.strptime(meet_start, '%I:%M%p')\n    meet_end_dt = datetime.strptime(meet_end, '%I:%M%p')\n    \n    # Travel to the meet location\n    travel_to_meet_dt = arrival_dt + timedelta(minutes=travel_time)\n    \n    # Wait until the meeting start\n    wait_time = max(meet_start_dt - travel_to_meet_dt, timedelta(0))\n    \n    # Meeting time after waiting\n    meeting_start_dt = meet_start_dt\n    meeting_end_dt = meeting_start_dt + timedelta(minutes=meet_duration)\n    \n    # Create the schedule dict\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time\n    })\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meet_location,\n        \"duration\": travel_time,\n        \"time\": travel_to_meet_dt.strftime('%I:%M%p'),\n        \"to\": meet_location\n    })\n    \n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meet_location,\n            \"time\": (travel_to_meet_dt + wait_time).strftime('%I:%M%p')\n        })\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meet_location,\n        \"duration\": meet_duration,\n        \"time\": meeting_start_dt.strftime('%I:%M%p')\n    })\n    \n    return json.dumps({\"schedule\": schedule}, indent=2)\n\n# Input parameters for the final problem\nstart_location = \"Chinatown\"\narrival_time = \"9:00AM\"\ntravel_time = 20\nmeet_location = \"Richmond District\"\nmeet_start = \"6:00PM\"\nmeet_end = \"9:00PM\"\nmeet_duration = 75\n\n# Generate and print the meeting schedule\nprint(create_schedule(start_location, arrival_time, travel_time, meet_location, meet_start, meet_end, meet_duration))\n```",
            "count": "meeting_planning_example_97",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule():\n    # Input parameters\n    arrival_location = \"Alamo Square\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    meeting_location = \"Richmond District\"\n    meeting_start_time = datetime.strptime(\"8:45PM\", \"%I:%M%p\")\n    meeting_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    minimum_meeting_duration = 45  # in minutes\n\n    travel_time_to_meeting = 12  # from Alamo Square to Richmond District\n    travel_time_back = 13  # from Richmond District to Alamo Square\n\n    # Calculate arrival time to meeting location\n    travel_arrival_time = arrival_time + timedelta(minutes=travel_time_to_meeting)\n    \n    # Calculate the wait time till the meeting can happen\n    if travel_arrival_time < meeting_start_time:\n        wait_time = (meeting_start_time - travel_arrival_time).total_seconds() // 60\n    else:\n        wait_time = 0\n\n    # Calculate when the meeting can start\n    meeting_start_actual = max(travel_arrival_time, meeting_start_time)\n    \n    # Calculate meeting end time\n    meeting_end_actual = meeting_start_actual + timedelta(minutes=minimum_meeting_duration)\n\n    # Schedule output\n    schedule = [\n        {\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")},\n        {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_time_to_meeting, \"time\": travel_arrival_time.strftime(\"%I:%M%p\"), \"to\": meeting_location},\n        {\"action\": \"wait\", \"location\": meeting_location, \"time\": meeting_start_actual.strftime(\"%I:%M%p\")},\n        {\"action\": \"meet\", \"location\": meeting_location, \"duration\": minimum_meeting_duration, \"time\": meeting_start_actual.strftime(\"%I:%M%p\")}\n    ]\n    \n    # Prepare output\n    output = {\n        \"schedule\": schedule\n    }\n    \n    return json.dumps(output, indent=2)\n\n# Run the computation and print the schedule in JSON format\nif __name__ == \"__main__\":\n    print(compute_schedule())\n```",
            "count": "meeting_planning_example_98",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Meeting Location",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Meeting Location"
                },
                {
                    "action": "wait",
                    "location": "Meeting Location",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Meeting Location",
                    "time": "1:15PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule(start_location, travel_time_to_meeting, arrival_time, meeting_start, meeting_end, min_meeting_duration):\n    # Calculate arrival time at the meeting location\n    travel_duration = timedelta(minutes=travel_time_to_meeting)\n    arrival_at_meeting = arrival_time + travel_duration\n    \n    # Wait until the meeting can start\n    wait_until = meeting_start if arrival_at_meeting < meeting_start else arrival_at_meeting\n    \n    # Calculate the meeting end time by adding the minimum meeting duration\n    meeting_start_time = max(wait_until, meeting_start)\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n    \n    # Schedule output\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Meeting Location\", \"duration\": travel_time_to_meeting, \"time\": format_time(arrival_at_meeting), \"to\": \"Meeting Location\"},\n        {\"action\": \"wait\", \"location\": \"Meeting Location\", \"time\": format_time(wait_until)},\n        {\"action\": \"meet\", \"location\": \"Meeting Location\", \"duration\": min_meeting_duration, \"time\": format_time(meeting_start_time)}\n    ]\n    \n    return {\"schedule\": schedule}\n\ndef main():\n    # Input parameters\n    start_location = \"Fisherman's Wharf\"\n    travel_time_to_meeting = 13\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    min_meeting_duration = 15\n    \n    # Computing the schedule\n    schedule = compute_schedule(\n        start_location,\n        travel_time_to_meeting,\n        arrival_time,\n        meeting_start,\n        meeting_end,\n        min_meeting_duration\n    )\n    \n    # Output the schedule as a JSON-formatted string\n    print(json.dumps(schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_99",
            "is_correct": false
        }
    ]
}