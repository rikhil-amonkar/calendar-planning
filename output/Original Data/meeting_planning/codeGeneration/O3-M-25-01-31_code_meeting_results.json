{
    "0shot": [
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:10AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "10:10AM",
                    "duration": 20,
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "10:30AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "12:30PM",
                    "duration": 19,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 120,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\nimport json\n\ndef minutes_to_time_str(minutes):\n    \"\"\"\n    Convert minutes since midnight to a time string in the format 'H:MMAM/PM'\n    \"\"\"\n    hour = minutes // 60\n    minute = minutes % 60\n    period = \"AM\"\n    if hour >= 12:\n        period = \"PM\"\n        if hour > 12:\n            hour -= 12\n    if hour == 0:\n        hour = 12\n    return f\"{hour}:{minute:02d}{period}\"\n\ndef main():\n    # Input Parameters (in minutes from midnight)\n    # You arrive at Marina District at 9:00AM => 9*60 = 540 minutes.\n    arrival_marina = 9 * 60  # 540 minutes\n    \n    # Stephanie is available at Mission District from 10:30AM to 1:30PM.\n    stephanie_start = 10 * 60 + 30  # 630 minutes\n    stephanie_end = 13 * 60 + 30    # 810 minutes\n    min_meeting_duration = 120      # in minutes\n    \n    # Travel times (in minutes)\n    travel_marina_to_mission = 20\n    travel_mission_to_marina = 19\n    \n    # Compute the departure time from Marina so as to arrive at Mission by 10:30AM.\n    # Departure time = Stephanie's available start time - travel time from Marina.\n    departure_from_marina = stephanie_start - travel_marina_to_mission  # 630 - 20 = 610 minutes -> 10:10AM\n    \n    # Meeting schedule: start meeting when Stephanie is available.\n    meeting_start_time = stephanie_start  # 10:30AM (630 minutes)\n    meeting_end_time = meeting_start_time + min_meeting_duration  # 630 + 120 = 750 minutes -> 12:30PM\n    \n    # Compute time to travel back from Mission District to Marina District after meeting.\n    departure_from_mission = meeting_end_time  # leaving right after meeting at 12:30PM\n    arrival_back_marina = departure_from_mission + travel_mission_to_marina  # 750 + 19 = 769 minutes\n    \n    schedule = []\n    \n    # Start at Marina District at arrival time\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Marina District\",\n        \"time\": minutes_to_time_str(arrival_marina)\n    })\n    \n    # Wait at Marina District until departure time if needed.\n    if departure_from_marina > arrival_marina:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Marina District\",\n            \"time\": minutes_to_time_str(departure_from_marina)\n        })\n    \n    # Travel from Marina District to Mission District\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_marina_to_mission,\n        \"time\": minutes_to_time_str(departure_from_marina),\n        \"to\": \"Mission District\"\n    })\n    \n    # Meet Stephanie at Mission District for at least 120 minutes\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": min_meeting_duration,\n        \"time\": minutes_to_time_str(meeting_start_time)\n    })\n    \n    # Travel back to Marina District after the meeting\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_mission_to_marina,\n        \"time\": minutes_to_time_str(meeting_end_time),\n        \"to\": \"Marina District\"\n    })\n    \n    # Output the schedule as a JSON-formatted dictionary.\n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_0",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "4:53PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "4:53PM",
                    "duration": 22,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "5:15PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "6:15PM",
                    "duration": 21,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 60,
                    "time": "5:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time without a leading zero for the hour.\n    # Using %-I for Unix-like systems; if on Windows, we can lstrip the zero.\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters\n    # Arrival at Richmond District at 9:00AM\n    start_location = \"Richmond District\"\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Travel times in minutes\n    travel_richmond_to_financial = 22\n    travel_financial_to_richmond = 21\n    \n    # Betty's availability and meeting requirement\n    betty_location = \"Financial District\"\n    betty_start_str = \"5:15PM\"\n    betty_end_str = \"9:45PM\"\n    betty_start = datetime.strptime(betty_start_str, \"%I:%M%p\")\n    betty_end = datetime.strptime(betty_end_str, \"%I:%M%p\")\n    meeting_min_duration = 60  # in minutes\n    \n    # Calculate departure time from Richmond District to arrive exactly at Betty's start time\n    depart_from_richmond = betty_start - timedelta(minutes=travel_richmond_to_financial)\n    \n    # Meeting details: we meet Betty starting at her available start time\n    meeting_start = betty_start\n    meeting_duration = meeting_min_duration\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    \n    # After meeting, travel back to Richmond District\n    depart_from_financial = meeting_end\n    arrive_back_richmond = depart_from_financial + timedelta(minutes=travel_financial_to_richmond)\n    \n    # Build schedule based on the steps computed:\n    schedule = []\n    \n    # Step 1: Start at Richmond District at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Step 2: Wait in Richmond District until departure time for travel.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": start_location,\n        \"time\": format_time(depart_from_richmond)\n    })\n    \n    # Step 3: Travel from Richmond District to Financial District.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_richmond_to_financial,\n        \"time\": format_time(depart_from_richmond),\n        \"to\": betty_location\n    })\n    \n    # Step 4: Meet Betty at the Financial District.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": betty_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Step 5: Travel back from Financial District to Richmond District.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": betty_location,\n        \"duration\": travel_financial_to_richmond,\n        \"time\": format_time(depart_from_financial),\n        \"to\": start_location\n    })\n    \n    # Create result dictionary\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Output the result as JSON\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_1",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "3:00PM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "3:00PM",
                    "duration": 15,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "3:15PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "4:45PM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 90,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse time from format like \"9:00AM\" (which might be missing a leading zero)\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime to string like \"9:00AM\" (no leading zero for hour)\n    hour = dt.hour\n    minute = dt.minute\n    am_pm = \"AM\" if hour < 12 else \"PM\"\n    # Convert hour to 12-hour format, note that 0 becomes 12.\n    hour = hour % 12\n    if hour == 0:\n        hour = 12\n    # Minute should always be two digits.\n    minute_str = f\"{minute:02d}\"\n    return f\"{hour}:{minute_str}{am_pm}\"\n\ndef main():\n    # Input parameters\n    start_location = \"Haight-Ashbury\"\n    meeting_location = \"Sunset District\"\n    \n    start_time_str = \"9:00AM\"\n    jessica_available_start_str = \"3:15PM\"\n    jessica_available_end_str = \"8:15PM\"\n    min_meeting_duration = 90  # in minutes\n    \n    travel_time_haight_to_sunset = 15  # minutes\n    travel_time_sunset_to_haight = 15  # minutes\n    \n    # Parse times\n    start_time = parse_time(start_time_str)\n    jessica_start = parse_time(jessica_available_start_str)\n    jessica_end = parse_time(jessica_available_end_str)\n    \n    # Compute departure time from Haight-Ashbury so that we arrive at Jessica's location at her available start time.\n    # We need to depart travel_time_haight_to_sunset minutes before Jessica's available start.\n    departure_time = jessica_start - timedelta(minutes=travel_time_haight_to_sunset)\n    \n    # Meeting start at Sunset District is Jessica's available start.\n    meeting_start = jessica_start\n    \n    # Meeting duration is the minimum required, ending at meeting_end.\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    # Compute travel back time from Sunset District to Haight-Ashbury.\n    travel_back_departure = meeting_end  # leave immediately after meeting\n    arrival_back = travel_back_departure + timedelta(minutes=travel_time_sunset_to_haight)\n    \n    # Build schedule steps as a list of actions.\n    schedule = []\n    \n    # Step 1: Start at Haight-Ashbury at arrival time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Step 2: Wait at Haight-Ashbury until departure time.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": start_location,\n        \"time\": format_time(departure_time)\n    })\n    \n    # Step 3: Travel from Haight-Ashbury to Sunset District.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_haight_to_sunset,\n        \"time\": format_time(departure_time),\n        \"to\": meeting_location\n    })\n    \n    # Step 4: Meet Jessica at Sunset District.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Step 5: Travel back from Sunset District to Haight-Ashbury.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_sunset_to_haight,\n        \"time\": format_time(meeting_end),\n        \"to\": start_location\n    })\n    \n    # Prepare the final dictionary.\n    final_schedule = {\"schedule\": schedule}\n    \n    # Output the result as a JSON-formatted dictionary.\n    print(json.dumps(final_schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_2",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:22AM",
                    "duration": 128
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time to H:MMAM/PM without a leading zero in hour.\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, \"strftime\") else dt.strftime(\"%#I:%M%p\")\n\ndef main():\n    # Input parameters and constraints\n    # Arrival at Bayview at 9:00AM\n    bayview_start_str = \"9:00AM\"\n    bayview_start = datetime.strptime(bayview_start_str, \"%I:%M%p\")\n    \n    # Barbara's availability at Golden Gate Park from 8:00AM to 11:30AM\n    barbara_start = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\n    barbara_end = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    \n    # Minimum meeting duration with Barbara (in minutes)\n    min_meet_duration = 90\n\n    # Travel times (in minutes)\n    travel_bayview_to_ggp = 22\n    travel_ggp_to_bayview = 23  # Not used in the optimal schedule below\n    \n    # Compute the optimal schedule:\n    # Start at Bayview at 9:00AM.\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Bayview\",\n        \"time\": format_time(bayview_start)\n    })\n    \n    # Travel from Bayview to Golden Gate Park.\n    # We'll depart immediately at 9:00AM.\n    departure_time = bayview_start\n    travel_duration = travel_bayview_to_ggp\n    arrival_time = departure_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_duration,\n        \"time\": format_time(departure_time),\n        \"to\": \"Golden Gate Park\"\n    })\n    \n    # At arrival, we can start the meeting if Barbara is already available.\n    # Barbara is available from 8:00AM so meeting can start immediately.\n    # If there was any gap, we would have a wait event. Here, wait time is zero,\n    # but we include a wait step to reflect arrival at Golden Gate Park.\n    wait_start_time = arrival_time\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": format_time(wait_start_time)\n    })\n    \n    # Meeting with Barbara:\n    # The meeting can start immediately upon arrival.\n    meet_start_time = arrival_time\n    # Maximum possible meeting duration is until Barbara leaves (11:30AM)\n    available_meeting_duration = int((barbara_end - meet_start_time).total_seconds() // 60)\n    # Ensure the meeting lasts at least the minimum required amount.\n    meeting_duration = available_meeting_duration if available_meeting_duration >= min_meet_duration else min_meet_duration\n    # Note: In our case, meet_start_time is 9:22AM and available_meeting_duration is 128 minutes.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meet_start_time)\n    })\n    \n    # Build the output dictionary structure and output as JSON.\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n    \nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_3",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 10,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:10AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:15AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 60,
                    "time": "9:15AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\nimport json\n\ndef minutes_to_time_str(total_minutes):\n    # Convert minutes since midnight to 'H:MMAM/PM' format.\n    hour = total_minutes // 60\n    minute = total_minutes % 60\n    meridiem = \"AM\" if hour < 12 else \"PM\"\n    if hour == 0:\n        display_hour = 12\n    elif hour > 12:\n        display_hour = hour - 12\n    else:\n        display_hour = hour\n    return f\"{display_hour}:{minute:02}{meridiem}\"\n\ndef compute_schedule():\n    # Input parameters based on constraints:\n    # You arrive at Presidio at 9:00AM.\n    start_time = 9 * 60  # in minutes from midnight => 540 minutes\n    start_location = \"Presidio\"\n    \n    # Jessica's availability at Marina District: 9:15AM to 5:45PM.\n    jessica_available_start = 9 * 60 + 15  # 555 minutes => 9:15AM\n    jessica_available_end = 17 * 60 + 45     # 1065 minutes => 5:45PM\n    \n    # Meeting requirement: minimum of 60 minutes with Jessica.\n    meeting_duration = 60  # minutes\n    \n    # Travel times:\n    travel_time_presidio_to_marina = 10  # minutes\n    travel_time_marina_to_presidio = 10   # minutes (unused in our final schedule)\n    \n    # Compute travel action:\n    # Leave Presidio at the start time\n    departure_time = start_time  # 9:00AM\n    arrival_at_marina = departure_time + travel_time_presidio_to_marina  # 9:10AM\n    \n    # Wait until Jessica becomes available (if arriving early)\n    wait_start_time = arrival_at_marina  # Arrived at Marina District at 9:10AM\n    # If arrival is before Jessica start time, wait until 9:15.\n    meeting_start_time = max(arrival_at_marina, jessica_available_start)  # should be 9:15AM\n    \n    # Meeting event is planned for the minimum duration of 60 minutes.\n    meeting_event_duration = meeting_duration  # 60 minutes\n    meeting_end_time = meeting_start_time + meeting_event_duration  # 9:15AM + 60 = 10:15AM\n    \n    # Build schedule events in chronological order\n    schedule = []\n    \n    # 1. Start event at Presidio at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": minutes_to_time_str(start_time)\n    })\n    \n    # 2. Travel event from Presidio to Marina District starting at 9:00AM.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_presidio_to_marina,\n        \"time\": minutes_to_time_str(departure_time),\n        \"to\": \"Marina District\"\n    })\n    \n    # 3. Wait event at Marina District until Jessica is available.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Marina District\",\n        \"time\": minutes_to_time_str(wait_start_time)\n    })\n    \n    # 4. Meet event with Jessica starting at 9:15AM for minimum 60 minutes.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": meeting_event_duration,\n        \"time\": minutes_to_time_str(meeting_start_time)\n    })\n    \n    # Prepare the final output dictionary.\n    output = {\"schedule\": schedule}\n    return output\n\nif __name__ == \"__main__\":\n    schedule_plan = compute_schedule()\n    print(json.dumps(schedule_plan, indent=2))",
            "count": "meeting_planning_example_4",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:58AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "11:58AM",
                    "duration": 17,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "12:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 75,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM with no leading zero in hour.\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%#I:%M%p\")\n\ndef main():\n    # Input parameters\n    start_location = \"Nob Hill\"\n    meeting_location = \"The Castro\"\n    arrival_time_str = \"9:00AM\"\n    william_meet_start_str = \"12:15PM\"\n    william_meet_end_str = \"10:00PM\"\n    travel_nobhill_to_castro = 17  # minutes\n    travel_castro_to_nobhill = 16  # minutes\n    minimum_meeting_duration = 75  # minutes\n\n    # Use an arbitrary date to calculate times, date chosen as today.\n    base_date = datetime.today().date()\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    william_meet_start = datetime.strptime(william_meet_start_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    william_meet_end = datetime.strptime(william_meet_end_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    \n    # Calculate the optimal departure time from Nob Hill such that arrival at The Castro is exactly at William's available meeting start.\n    # Departure time plus travel time = meeting start => departure = meeting_start - travel_time.\n    departure_from_nobhill = william_meet_start - timedelta(minutes=travel_nobhill_to_castro)\n    \n    # Ensure that departure time is not before arrival time.\n    if departure_from_nobhill < arrival_time:\n        departure_from_nobhill = arrival_time  # if arrived later than required departure, leave immediately\n    \n    # Calculate arrival time at The Castro based on departure time.\n    arrival_at_castro = departure_from_nobhill + timedelta(minutes=travel_nobhill_to_castro)\n    \n    # Ensure that meeting start is not before William is available.\n    meeting_start_time = max(arrival_at_castro, william_meet_start)\n    \n    # Meeting event: meeting for the minimum required duration.\n    meeting_duration_td = timedelta(minutes=minimum_meeting_duration)\n    meeting_end_time = meeting_start_time + meeting_duration_td\n\n    # Construct schedule JSON dictionary.\n    schedule = []\n    \n    # Start event: Starting at Nob Hill at arrival time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Wait event if there's a gap between arrival at Nob Hill and departure to The Castro.\n    if departure_from_nobhill > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(departure_from_nobhill)\n        })\n    \n    # Travel event from Nob Hill to The Castro.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_nobhill_to_castro,\n        \"time\": format_time(departure_from_nobhill),\n        \"to\": meeting_location\n    })\n    \n    # Meet event with William at The Castro.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": minimum_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Prepare final result dictionary.\n    result = {\"schedule\": schedule}\n    \n    # Output the result as a JSON-formatted dictionary.\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_5",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "2:04PM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "2:04PM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "2:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 90,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\n# Helper function: parse time string in format H:MMAM/PM to datetime object (using an arbitrary date)\ndef parse_time(timestr):\n    # Use a fixed date, e.g., January 1, 1900\n    return datetime.strptime(timestr, \"%I:%M%p\")\n\n# Helper function: format a datetime object into a time string without leading zero in the hour.\ndef format_time(dt):\n    # \"%I\" gives zero-padded hour; remove leading zero if present.\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\n# Input parameters\narrival_time_str = \"9:00AM\"\nkenneth_start_str = \"2:15PM\"\nkenneth_end_str = \"7:45PM\"\nmeeting_min_duration = 90  # in minutes\ntravel_FW_to_NH = 11  # in minutes\n\n# Convert input times to datetime objects\narrival_time = parse_time(arrival_time_str)\nkenneth_start = parse_time(kenneth_start_str)\nkenneth_end = parse_time(kenneth_end_str)\n\n# To ensure meeting occurs when Kenneth is available, we plan to begin the meeting exactly at his availability start time.\nmeeting_start = kenneth_start\n\n# Compute departure time from Fisherman's Wharf so that after travel time we reach Nob Hill by meeting_start\ndeparture_time = meeting_start - timedelta(minutes=travel_FW_to_NH)\n# Also compute meeting end time (if needed out of schedule, here we only require meeting start and duration)\nmeeting_end = meeting_start + timedelta(minutes=meeting_min_duration)\n\n# Create schedule list following specified dictionary structure.\nschedule = []\n\n# Start event at Fisherman's Wharf when you arrive.\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Fisherman's Wharf\",\n    \"time\": format_time(arrival_time)\n})\n\n# Wait event at Fisherman's Wharf until departure time.\nschedule.append({\n    \"action\": \"wait\",\n    \"location\": \"Fisherman's Wharf\",\n    \"time\": format_time(departure_time)\n})\n\n# Travel event from Fisherman's Wharf to Nob Hill.\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Nob Hill\",\n    \"duration\": travel_FW_to_NH,\n    \"time\": format_time(departure_time),\n    \"to\": \"Nob Hill\"\n})\n\n# Meet event with Kenneth at Nob Hill, ensuring minimum 90 minutes meeting.\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": \"Nob Hill\",\n    \"duration\": meeting_min_duration,\n    \"time\": format_time(meeting_start)\n})\n\n# Output the result as a JSON-formatted dictionary.\nresult = {\"schedule\": schedule}\nprint(json.dumps(result, indent=2))",
            "count": "meeting_planning_example_6",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "2:58PM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "2:58PM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "3:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime object to \"H:MMAM/PM\" (remove leading zero from hour)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters (times and durations)\n    # Starting location is Richmond District at 9:00AM.\n    start_location = \"Richmond District\"\n    start_time_str = \"9:00AM\"\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\")\n    \n    # John's meeting availability at North Beach (available from 3:15PM to 5:15PM)\n    john_available_start_str = \"3:15PM\"\n    john_available_end_str = \"5:15PM\"\n    john_available_start = datetime.strptime(john_available_start_str, \"%I:%M%p\")\n    john_available_end = datetime.strptime(john_available_end_str, \"%I:%M%p\")\n    \n    # Required meeting duration with John in minutes\n    meeting_duration = 75\n    \n    # Travel times in minutes:\n    travel_time_Richmond_to_NB = 17  # minutes from Richmond District to North Beach\n    travel_time_NB_to_Richmond = 18  # not used in schedule because we only meet John at North Beach\n    \n    # Determine travel departure time from Richmond so that arrival at North Beach is at the start of John's availability.\n    # We want to arrive exactly at John's available start (or slightly before if waiting is needed).\n    arrival_time = john_available_start\n    departure_time = arrival_time - timedelta(minutes=travel_time_Richmond_to_NB)\n    \n    # Verify that the meeting duration can be accommodated.\n    meeting_end_time = arrival_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > john_available_end:\n        # If meeting end time is after John's departure, adjust the meeting start time.\n        # Latest possible meeting start is John's available end time minus required duration.\n        latest_meeting_start = john_available_end - timedelta(minutes=meeting_duration)\n        arrival_time = latest_meeting_start\n        departure_time = arrival_time - timedelta(minutes=travel_time_Richmond_to_NB)\n        meeting_end_time = arrival_time + timedelta(minutes=meeting_duration)\n    \n    # Build the schedule list according to the required JSON format\n    schedule = []\n    \n    # Step 1: Start at Richmond District at arrival.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Step 2: Wait at Richmond until departure time.\n    # Only add a waiting action if departure time is later than start time.\n    if departure_time > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(departure_time)\n        })\n        \n    # Step 3: Travel from Richmond District to North Beach.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_time_Richmond_to_NB,\n        \"time\": format_time(departure_time),\n        \"to\": \"North Beach\"\n    })\n    \n    # Step 4: Meet John at North Beach.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Optionally, if one would travel back to Richmond District after meeting John, one could add:\n    # departure_after_meet = meeting_end_time\n    # schedule.append({\n    #     \"action\": \"travel\",\n    #     \"location\": \"Richmond District\",\n    #     \"duration\": travel_time_NB_to_Richmond,\n    #     \"time\": format_time(departure_after_meet),\n    #     \"to\": \"Richmond District\"\n    # })\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_7",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:12AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 105,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_str_to_datetime(time_str):\n    # Parse time strings like '9:00AM' (we use an arbitrary date, here 1900-01-01)\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef datetime_to_time_str(dt):\n    # Format datetime to time string like '9:00AM' (remove any leading zero in hour)\n    return dt.strftime(\"%-I:%M%p\") if dt.strftime(\"%-I\") else dt.strftime(\"%I:%M%p\")\n\ndef add_minutes(time_str, minutes):\n    dt = time_str_to_datetime(time_str)\n    dt_new = dt + timedelta(minutes=minutes)\n    # Some systems (like Windows) might not support %-I so we adjust manually:\n    hour = dt_new.strftime(\"%I\").lstrip(\"0\")\n    minute = dt_new.strftime(\"%M\")\n    ampm = dt_new.strftime(\"%p\")\n    return f\"{hour}:{minute}{ampm}\"\n\ndef main():\n    # Input parameters\n    arrival_location = \"Chinatown\"\n    arrival_time = \"9:00AM\"  # Arrival in Chinatown\n    \n    # Travel times (in minutes)\n    travel_time_chinatown_to_marina = 12\n    travel_time_marina_to_chinatown = 16  # If needed later.\n    \n    # Meeting constraints for Stephanie at Marina District\n    meeting_location = \"Marina District\"\n    stephanie_available_start = \"8:00AM\"\n    stephanie_available_end = \"3:00PM\"\n    min_meeting_duration = 105  # minutes\n\n    # Compute departure from Chinatown to Marina District.\n    # We assume immediate departure at arrival time.\n    departure_time = arrival_time\n    arrival_marina_time = add_minutes(departure_time, travel_time_chinatown_to_marina)\n    \n    # Calculate meeting end time\n    meeting_end_time = add_minutes(arrival_marina_time, min_meeting_duration)\n    \n    # Check that meeting fits within Stephanie's available window.\n    # For comparing times, convert to datetime objects.\n    meeting_start_dt = time_str_to_datetime(arrival_marina_time)\n    meeting_end_dt = time_str_to_datetime(meeting_end_time)\n    stephanie_start_dt = time_str_to_datetime(stephanie_available_start)\n    stephanie_end_dt = time_str_to_datetime(stephanie_available_end)\n    \n    if meeting_start_dt < stephanie_start_dt or meeting_end_dt > stephanie_end_dt:\n        result = {\n            \"error\": \"Meeting schedule does not fit within Stephanie's available time window.\"\n        }\n    else:\n        # Build schedule list. We'll include:\n        # 1. Starting at Chinatown.\n        # 2. Travelling from Chinatown to Marina District.\n        # 3. Start meeting with Stephanie at Marina District.\n        schedule = []\n        \n        # Start event\n        schedule.append({\n            \"action\": \"start\",\n            \"location\": arrival_location,\n            \"time\": arrival_time\n        })\n        \n        # Travel event from Chinatown to Marina District.\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": arrival_location,\n            \"duration\": travel_time_chinatown_to_marina,\n            \"time\": departure_time,\n            \"to\": meeting_location\n        })\n        \n        # We can include a wait event if arrival occurs before the meeting possible start,\n        # but in this case, since we arrive at 9:12AM and Stephanie is available then, no wait is needed.\n        # Directly schedule the meeting event.\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meeting_location,\n            \"duration\": min_meeting_duration,\n            \"time\": arrival_marina_time\n        })\n        \n        result = {\"schedule\": schedule}\n    \n    # Output the result as JSON-formatted dictionary.\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_8",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:51AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "11:51AM",
                    "duration": 9,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "12:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "12:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(total_minutes):\n    # Converts minutes since midnight to a string in format \"H:MMAM/PM\"\n    hour = total_minutes // 60\n    minute = total_minutes % 60\n    suffix = \"AM\" if hour < 12 or hour == 24 else \"PM\"\n    # Convert hour into 12-hour format\n    hour12 = hour\n    if hour == 0:\n        hour12 = 12\n    elif hour > 12:\n        hour12 = hour - 12\n    return f\"{hour12}:{minute:02d}{suffix}\"\n\ndef main():\n    # Input parameters (all times in minutes since midnight)\n    # You start at Union Square at 9:00AM\n    start_time = 9 * 60  # 9:00AM => 540 minutes\n\n    # Mary's availability at Nob Hill: 12:00PM (720) to 4:15PM (16*60+15=975)\n    mary_available_start = 12 * 60      # 12:00PM => 720 minutes\n    mary_available_end = 16 * 60 + 15     # 4:15PM => 975 minutes\n    \n    # Minimum meeting duration with Mary in minutes\n    min_meet_duration = 75\n\n    # Travel times in minutes\n    # From Union Square to Nob Hill: 9 minutes\n    travel_union_to_nob = 9\n\n    # We want to schedule the meeting so that we meet Mary for at least 75 minutes.\n    # To achieve this, we plan to start the meeting at Nob Hill as soon as Mary arrives.\n    # Therefore, we must leave Union Square so as to arrive at Nob Hill exactly at 12:00PM.\n    departure_time_from_union = mary_available_start - travel_union_to_nob  # 720 - 9 = 711 minutes (11:51AM)\n    arrival_time_at_nob = departure_time_from_union + travel_union_to_nob  # should be 720 minutes (12:00PM)\n\n    # Meeting will begin at Mary's available start time (12:00PM)\n    meeting_start = mary_available_start\n    meeting_duration = min_meet_duration\n    meeting_end = meeting_start + meeting_duration\n    # We ensure that meeting_end does not exceed Mary's availability end (this simple schedule supports meeting as long as it fits)\n    if meeting_end > mary_available_end:\n        raise ValueError(\"Not enough time to meet Mary for the minimum required duration within her availability\")\n\n    # Create the schedule list with events.\n    schedule = []\n\n    # 1. Start event at Union Square at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Union Square\",\n        \"time\": minutes_to_time_str(start_time)\n    })\n\n    # 2. Wait event at Union Square - waiting until departure time.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Union Square\",\n        \"time\": minutes_to_time_str(departure_time_from_union)\n    })\n\n    # 3. Travel event from Union Square to Nob Hill.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_union_to_nob,\n        \"time\": minutes_to_time_str(departure_time_from_union),\n        \"to\": \"Nob Hill\"\n    })\n\n    # 4. Meet event at Nob Hill with Mary.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": minutes_to_time_str(meeting_start)\n    })\n\n    # Assemble the final result dictionary.\n    result = {\"schedule\": schedule}\n\n    # Output the result as JSON-formatted string.\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_9",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:59AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:59AM",
                    "duration": 16,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:15AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "10:30AM",
                    "duration": 18,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 15,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\n# Input parameters (times in string format)\nstart_time_str = \"9:00AM\"          # Arrival at Golden Gate Park\njames_start_str = \"10:15AM\"        # James becomes available at Marina District\njames_end_str = \"1:30PM\"           # James leaves Marina District\nmin_meet_duration = 15             # Minimum meeting duration in minutes\n\n# Travel durations (minutes)\ntravel_golden_to_marina = 16\ntravel_marina_to_golden = 18\n\n# Convert time strings to datetime objects (using an arbitrary date)\ntime_format = \"%I:%M%p\"\nstart_time = datetime.strptime(start_time_str, time_format)\njames_start = datetime.strptime(james_start_str, time_format)\njames_end = datetime.strptime(james_end_str, time_format)\n\n# Compute the optimal departure time from Golden Gate Park such that we arrive exactly at James' start time.\n# departure_time + travel_golden_to_marina minutes = james_start\ndeparture_time = james_start - timedelta(minutes=travel_golden_to_marina)\n\n# Meeting start time will be James' availability start time.\nmeeting_start_time = james_start\n\n# Meeting end time is meeting start + minimum required duration.\nmeeting_end_time = meeting_start_time + timedelta(minutes=min_meet_duration)\n\n# Compute return departure time: immediately after meeting ends.\nreturn_departure_time = meeting_end_time\n\n# Return arrival time after traveling back.\nreturn_arrival_time = return_departure_time + timedelta(minutes=travel_marina_to_golden)\n\n# Build the schedule step by step\nschedule = []\n\n# Step 1: Start at Golden Gate Park at start time.\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Golden Gate Park\",\n    \"time\": format_time(start_time)\n})\n\n# Step 2: Wait at Golden Gate Park until departure time.\nschedule.append({\n    \"action\": \"wait\",\n    \"location\": \"Golden Gate Park\",\n    \"time\": format_time(departure_time)\n})\n\n# Step 3: Travel from Golden Gate Park to Marina District.\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Marina District\",\n    \"duration\": travel_golden_to_marina,\n    \"time\": format_time(departure_time),\n    \"to\": \"Marina District\"\n})\n\n# Step 4: Meet James at Marina District.\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": \"Marina District\",\n    \"duration\": min_meet_duration,\n    \"time\": format_time(meeting_start_time)\n})\n\n# Step 5: Travel from Marina District back to Golden Gate Park.\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Golden Gate Park\",\n    \"duration\": travel_marina_to_golden,\n    \"time\": format_time(return_departure_time),\n    \"to\": \"Golden Gate Park\"\n})\n\n# Assemble the result dictionary.\nresult = {\"schedule\": schedule}\n\n# Output the result as JSON.\nprint(json.dumps(result, indent=2))",
            "count": "meeting_planning_example_10",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "1:35PM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "1:35PM",
                    "duration": 25,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom math import floor\n\n# Helper function: convert time in minutes (since midnight) to a formatted string \"H:MMAM/PM\"\ndef minutes_to_timestr(minutes):\n    # Calculate hours and minutes in 24-hour time\n    hour24 = minutes // 60\n    minute = minutes % 60\n    suffix = \"AM\" if hour24 < 12 else \"PM\"\n    hour12 = hour24 if 1 <= hour24 <= 12 else hour24 % 12\n    if hour12 == 0:\n        hour12 = 12\n    # Format minutes with 2-digits\n    return f\"{hour12}:{minute:02d}{suffix}\"\n\n# Input parameters (times in minutes since midnight)\n# Arrival at Nob Hill at 9:00 AM -> 9 * 60 = 540\narrival_nobhill = 9 * 60  # 540 minutes\n\n# Carol is available at Sunset District from 2:00 PM to 8:30 PM\ncarol_start = 14 * 60  # 840 minutes (2:00PM)\ncarol_end = 20 * 60 + 30  # 1230 minutes (8:30PM)\n\n# Minimum meeting duration with Carol (in minutes)\nmin_meet_duration = 75\n\n# Travel durations (in minutes)\ntravel_nobhill_to_sunset = 25\ntravel_sunset_to_nobhill = 27\n\n# Compute departure time from Nob Hill to meet Carol at Sunset District\n# To arrive at 2:00PM (840 minutes), we need to leave at:\ndeparture_nobhill = carol_start - travel_nobhill_to_sunset  # 840 - 25 = 815 minutes\n\n# Compute arrival time at Sunset District after travel\narrival_sunset = departure_nobhill + travel_nobhill_to_sunset  # Should equal carol_start (840 minutes)\n\n# Compute end time of meeting with Carol\nmeeting_end = carol_start + min_meet_duration  # 840 + 75 = 915 minutes (3:15PM)\n\n# Create schedule steps\nschedule = []\n\n# 1. Start event at Nob Hill at arrival time\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Nob Hill\",\n    \"time\": minutes_to_timestr(arrival_nobhill)\n})\n\n# 2. Wait event at Nob Hill until departure time\nschedule.append({\n    \"action\": \"wait\",\n    \"location\": \"Nob Hill\",\n    \"time\": minutes_to_timestr(departure_nobhill)\n})\n\n# 3. Travel event from Nob Hill to Sunset District\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Sunset District\",\n    \"duration\": travel_nobhill_to_sunset,\n    \"time\": minutes_to_timestr(departure_nobhill),\n    \"to\": \"Sunset District\"\n})\n\n# 4. Meet event with Carol at Sunset District\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": \"Sunset District\",\n    \"duration\": min_meet_duration,\n    \"time\": minutes_to_timestr(arrival_sunset)\n})\n\n# Construct output dictionary\noutput = {\n    \"schedule\": schedule\n}\n\n# Output the resulting JSON\nprint(json.dumps(output, indent=2))",
            "count": "meeting_planning_example_11",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "5:44PM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "5:44PM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "6:00PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse a time string in the format H:MMAM/PM (e.g., '9:00AM' or '6:00PM')\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt_obj):\n    # Format datetime object to H:MMAM/PM (remove any leading zero in the hour)\n    time_str = dt_obj.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters\n    start_location = \"North Beach\"\n    meeting_location = \"Alamo Square\"\n    arrival_time_str = \"9:00AM\"\n    barbara_available_start_str = \"6:00PM\"\n    barbara_available_end_str = \"9:30PM\"\n    min_meeting_duration = 90  # in minutes\n\n    travel_NB_to_AS = 16  # minutes from North Beach to Alamo Square\n    travel_AS_to_NB = 15  # minutes from Alamo Square to North Beach (not used in current schedule)\n\n    # Convert string times to datetime objects (using an arbitrary common date)\n    base_date = \"2023-01-01 \"  # arbitrary date for time arithmetic\n    arrival_time = datetime.strptime(base_date + arrival_time_str, \"%Y-%m-%d %I:%M%p\")\n    barbara_start = datetime.strptime(base_date + barbara_available_start_str, \"%Y-%m-%d %I:%M%p\")\n    barbara_end = datetime.strptime(base_date + barbara_available_end_str, \"%Y-%m-%d %I:%M%p\")\n\n    # Calculate the departure time from North Beach such that we arrive at Alamo Square at or just before Barbara is available.\n    # We need to travel for travel_NB_to_AS minutes, so departure = barbara_start - travel duration.\n    departure_time = barbara_start - timedelta(minutes=travel_NB_to_AS)\n    \n    # Calculate meeting start and end times.\n    meeting_start = barbara_start  # We plan to start the meeting right when Barbara is available\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    # Build schedule events.\n    # 1. Start at North Beach at arrival time.\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # 2. Wait at North Beach until departure time (if there's waiting).\n    # Only add a wait event if departure_time is after arrival_time.\n    if departure_time > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(departure_time)\n        })\n    \n    # 3. Travel from North Beach to Alamo Square.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_NB_to_AS,\n        \"time\": format_time(departure_time),\n        \"to\": meeting_location\n    })\n    \n    # 4. Meet Barbara at Alamo Square for at least 90 minutes.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_12",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "6:27PM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "6:27PM",
                    "duration": 18,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "6:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "6:45PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as 'H:MMAM/PM' without a leading zero.\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0] == \"0\":\n        formatted = formatted[1:]\n    return formatted\n\ndef main():\n    # Input parameters\n    # Arrival time at Presidio: 9:00AM\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Betty's availability at North Beach: from 6:45PM to 10:00PM\n    betty_arrival = datetime.strptime(\"6:45PM\", \"%I:%M%p\")\n    betty_depart = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    \n    # Minimum meeting duration with Betty in minutes\n    min_meet_duration = 75\n    \n    # Travel durations in minutes\n    travel_presidio_to_northbeach = 18\n    travel_northbeach_to_presidio = 17  # Not used in our schedule\n    \n    # Compute the departure time from Presidio so that arrival at North Beach is exactly at Betty's arrival time.\n    travel_departure = betty_arrival - timedelta(minutes=travel_presidio_to_northbeach)\n    \n    # Meeting start time is Betty's arrival\n    meet_start = betty_arrival\n    \n    # Meeting end time (if needed) is meeting start time + minimum meeting duration\n    meet_end = meet_start + timedelta(minutes=min_meet_duration)\n    \n    # Create schedule list following the required structure.\n    schedule = []\n    \n    # 1. Start event at Presidio\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Presidio\",\n        \"time\": format_time(start_time)\n    })\n    \n    # 2. Wait event at Presidio until departure for North Beach\n    # Only add waiting event if waiting time exists.\n    if travel_departure > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": format_time(travel_departure)\n        })\n    \n    # 3. Travel event from Presidio to North Beach\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_presidio_to_northbeach,\n        \"time\": format_time(travel_departure),\n        \"to\": \"North Beach\"\n    })\n    \n    # 4. Meet event with Betty at North Beach for minimum 75 minutes\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meet_start)\n    })\n    \n    # Build final output dictionary\n    output = {\"schedule\": schedule}\n    \n    # Print the JSON-formatted output\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_13",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "7:49PM",
                    "duration": 11,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "8:00PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 120,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Custom time formatting to 'H:MMAM/PM' (without a leading zero for hour)\n    hour = dt.hour % 12\n    if hour == 0:\n        hour = 12\n    minute = dt.minute\n    am_pm = \"AM\" if dt.hour < 12 else \"PM\"\n    return f\"{hour}:{minute:02d}{am_pm}\"\n\ndef main():\n    # Input parameters and constraints\n    # Starting point: Nob Hill at 9:00AM\n    # Mary is available at Marina District from 8:00PM to 10:00PM, meeting minimum 120 minutes.\n    # Travel times in minutes:\n    travel_time_nobhill_to_marina = 11\n    \n    # Use an arbitrary date (e.g., today) for scheduling; only the time matters.\n    base_date = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)\n    \n    # Starting time at Nob Hill: 9:00AM\n    start_time = base_date + timedelta(hours=9)  # 9:00AM at Nob Hill\n    \n    # Mary's availability window at Marina District: 8:00PM to 10:00PM\n    mary_available_start = base_date + timedelta(hours=20)  # 8:00PM\n    mary_available_end = base_date + timedelta(hours=22)    # 10:00PM\n    meeting_duration = 120  # minutes required meeting time with Mary\n    \n    # To meet Mary with the minimum required duration, we want the meeting to start at Mary's available start.\n    # To arrive right at 8:00PM, we need to travel from Nob Hill at:\n    travel_departure = mary_available_start - timedelta(minutes=travel_time_nobhill_to_marina)\n    \n    # Compute arrival time at Marina District after travel:\n    arrival_time = travel_departure + timedelta(minutes=travel_time_nobhill_to_marina)\n    \n    # The meeting can start at Mary's available time (8:00PM) as we plan to arrive exactly then.\n    meeting_start_time = mary_available_start\n    # (Even though we arrive exactly at 8:00PM, scheduling a 'wait' action for synchronization as per structure.)\n    \n    # Prepare schedule actions as described in the required output structure.\n    schedule = [\n        {\n            \"action\": \"start\",\n            \"location\": \"Nob Hill\",\n            \"time\": format_time(start_time)\n        },\n        {\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_time_nobhill_to_marina,\n            \"time\": format_time(travel_departure),\n            \"to\": \"Marina District\"\n        },\n        {\n            \"action\": \"wait\",\n            \"location\": \"Marina District\",\n            \"time\": format_time(arrival_time)\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": \"Marina District\",\n            \"duration\": meeting_duration,\n            \"time\": format_time(meeting_start_time)\n        }\n    ]\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Output the result as JSON formatted string.\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_14",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "12:39PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "12:39PM",
                    "duration": 21,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "1:00PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 21,
                    "time": "9:21AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime to H:MMAM/PM with no leading zero for hour\n    return dt.strftime('%-I:%M%p') if hasattr(dt, 'strftime') else dt.strftime('%I:%M%p').lstrip('0')\n\ndef main():\n    # Input parameters and constants\n    start_location = \"Russian Hill\"\n    meeting_location = \"Golden Gate Park\"\n    arrival_time_str = \"9:00AM\"\n    john_available_start_str = \"1:00PM\"\n    john_available_end_str = \"6:15PM\"\n    min_meet_duration = 90  # minutes\n    travel_RH_to_GGP = 21   # minutes travel from Russian Hill to Golden Gate Park\n    \n    # Set a base date (arbitrary: Jan 1, 2020) for datetime arithmetic\n    base_date = \"2020-01-01 \"\n    start_time = datetime.strptime(base_date + arrival_time_str, \"%Y-%m-%d %I:%M%p\")\n    john_start_time = datetime.strptime(base_date + john_available_start_str, \"%Y-%m-%d %I:%M%p\")\n    john_end_time = datetime.strptime(base_date + john_available_end_str, \"%Y-%m-%d %I:%M%p\")\n    \n    # Calculate departure time from Russian Hill to arrive exactly at John's available start time.\n    departure_time = john_start_time - timedelta(minutes=travel_RH_to_GGP)\n    \n    # Calculate arrival time at Golden Gate Park after travel.\n    arrival_at_GGP = departure_time + timedelta(minutes=travel_RH_to_GGP)\n    \n    # Determine meeting start time. Ideally we want to start exactly when John is available.\n    meeting_start_time = max(arrival_at_GGP, john_start_time)\n    # Meeting must be at least 90 minutes, so meeting end time is:\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meet_duration)\n    \n    # Ensure meeting end time does not exceed John's availability end time.\n    if meeting_end_time > john_end_time:\n        raise ValueError(\"Not enough time to meet John for the minimum required duration within his availability.\")\n    \n    # Construct schedule steps:\n    schedule = []\n    \n    # Step 1: Start at Russian Hill at arrival_time\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Step 2: Wait at Russian Hill until departure time (if any waiting is needed)\n    # Only add wait step if departure time is later than start_time.\n    if departure_time > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(departure_time)\n        })\n    \n    # Step 3: Travel from Russian Hill to Golden Gate Park\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_RH_to_GGP,\n        \"time\": format_time(departure_time),\n        \"to\": meeting_location\n    })\n    \n    # Step 4: Meet with John at Golden Gate Park for minimum 90 minutes\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Output result as a JSON formatted dictionary.\n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_15",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "3:08PM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "3:08PM",
                    "duration": 7,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "3:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (no leading zero in hour)\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, \"strftime\") else \"\"\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef main():\n    # Input parameters and constraints\n    # Start at Chinatown at 9:00AM\n    start_location = \"Chinatown\"\n    start_time_str = \"9:00AM\"\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\")\n    \n    # Ronald's availability at Russian Hill and required meeting duration\n    meeting_location = \"Russian Hill\"\n    ronald_available_start_str = \"3:15PM\"\n    ronald_available_end_str = \"9:30PM\"\n    ronald_available_start = datetime.strptime(ronald_available_start_str, \"%I:%M%p\")\n    ronald_available_end = datetime.strptime(ronald_available_end_str, \"%I:%M%p\")\n    meeting_duration = 105  # in minutes\n    \n    # Travel times (minutes)\n    travel_CT_to_RH = 7\n    travel_RH_to_CT = 9\n\n    # Compute the departure time from Chinatown so that we arrive at Russian Hill exactly when Ronald is available.\n    departure_from_CT = ronald_available_start - timedelta(minutes=travel_CT_to_RH)\n    # Compute arrival time at Russian Hill after travel from Chinatown\n    arrival_at_RH = departure_from_CT + timedelta(minutes=travel_CT_to_RH)\n    # Meeting start time is arrival_at_RH which is expected to be ronald_available_start\n    meeting_start = arrival_at_RH\n    # Meeting end time (for computation purposes, though not directly used in schedule output)\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    \n    # Build schedule events\n    schedule = []\n    \n    # 1. Start event at Chinatown at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # 2. Wait event at Chinatown until departure time (if waiting is needed)\n    # Only add wait if departure_from_CT is after start_time.\n    if departure_from_CT > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(departure_from_CT)\n        })\n    \n    # 3. Travel event: travel from Chinatown to Russian Hill starting at departure time.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_CT_to_RH,\n        \"time\": format_time(departure_from_CT),\n        \"to\": meeting_location\n    })\n    \n    # 4. Meet event at Russian Hill starting at arrival (3:15PM) for meeting_duration minutes\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Prepare the final output dictionary\n    output = {\"schedule\": schedule}\n    \n    # Print JSON-formatted output\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_16",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "1:14PM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "1:14PM",
                    "duration": 16,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "1:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format the datetime object into the string format like '9:00AM' or '1:14PM'\n    # Remove any leading zeros from the hour.\n    formatted = dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%#I:%M%p\")\n    # For systems where %-I is not supported (e.g., Windows), adjust manually:\n    if formatted[0] == '0':\n        formatted = formatted[1:]\n    return formatted\n\ndef main():\n    # Input parameters in minutes and times.\n    travel_time_alamo_to_sunset = 16  # minutes from Alamo Square to Sunset District\n    travel_time_sunset_to_alamo = 17  # minutes from Sunset District to Alamo Square (unused in this schedule)\n    \n    # Meeting constraints\n    arrival_time_alamo = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    matthew_meeting_start = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\n    matthew_meeting_end = datetime.strptime(\"2:30PM\", \"%I:%M%p\")\n    min_meeting_duration = 15  # minutes\n\n    # Compute departure time from Alamo Square such that we arrive at Sunset District exactly at 1:30PM.\n    departure_time_alamo = matthew_meeting_start - timedelta(minutes=travel_time_alamo_to_sunset)\n    \n    # Compute meeting end time based on minimum required meeting duration.\n    meeting_end_time = matthew_meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    # Build the schedule as required:\n    schedule = []\n    \n    # Step 1: Start at Alamo Square at arrival time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Alamo Square\",\n        \"time\": format_time(arrival_time_alamo)\n    })\n\n    # Step 2: Wait at Alamo Square until departure time.\n    # Only add a wait action if departure time is after the arrival.\n    if departure_time_alamo > arrival_time_alamo:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": format_time(departure_time_alamo)\n        })\n    \n    # Step 3: Travel from Alamo Square to Sunset District.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time_alamo_to_sunset,\n        \"time\": format_time(departure_time_alamo),\n        \"to\": \"Sunset District\"\n    })\n    \n    # Step 4: Meet Matthew at Sunset District for at least the minimum duration.\n    # Ensure that the meeting fits in his available window.\n    meeting_possible = (matthew_meeting_start + timedelta(minutes=min_meeting_duration)) <= matthew_meeting_end\n    if meeting_possible:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Sunset District\",\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(matthew_meeting_start)\n        })\n    else:\n        # If meeting is not possible, output a note that meeting cannot be scheduled.\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Sunset District\",\n            \"duration\": 0,\n            \"time\": format_time(matthew_meeting_start)\n        })\n    \n    # Prepare the final output dictionary.\n    output = {\"schedule\": schedule}\n    \n    # Print the output as a JSON-formatted string.\n    print(json.dumps(output, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_17",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:19PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "8:19PM",
                    "duration": 11,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "8:30PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM without a leading zero in the hour.\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters\n    # Arrival at Marina District at 9:00AM\n    arrival_time_str = \"9:00AM\"\n    marina_location = \"Marina District\"\n    richmond_location = \"Richmond District\"\n    \n    # Travel times in minutes\n    travel_marina_to_richmond = 11  # minutes\n    travel_richmond_to_marina = 9   # minutes (if needed later)\n    \n    # Betty's constraints\n    betty_available_start_str = \"8:30PM\"\n    betty_available_end_str = \"10:00PM\"\n    min_meeting_duration = 75  # minutes\n    \n    # Use an arbitrary date (the date is irrelevant) for computation.\n    date_format = \"%I:%M%p\"\n    base_date = datetime(2023, 1, 1)  # arbitrary date\n    \n    # Parse times into datetime objects\n    arrival_time = datetime.strptime(arrival_time_str, date_format).replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    betty_available_start = datetime.strptime(betty_available_start_str, date_format).replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    betty_available_end = datetime.strptime(betty_available_end_str, date_format).replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    \n    # Calculate the ideal departure time from Marina so that you can arrive in Richmond at exactly Betty's available start time.\n    departure_time = betty_available_start - timedelta(minutes=travel_marina_to_richmond)\n    \n    # Ensure that departure time is after arrival. (It always is in this scenario; if not, adjustments might be needed.)\n    if departure_time < arrival_time:\n        departure_time = arrival_time\n    \n    # Meeting start time is the time you start meeting Betty. Since you arrive exactly at betty_available_start,\n    # we plan to start meeting immediately after arrival.\n    meeting_start_time = betty_available_start\n    \n    # Meeting end time is meeting start time plus minimum meeting duration.\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n    \n    # Check if meeting end time does not exceed Betty's availability.\n    if meeting_end_time > betty_available_end:\n        # Adjust meeting duration if possible; in this scenario, Betty is available for 90 minutes (8:30PM to 10:00PM)\n        # so meeting_end_time is 9:45PM, which is within the limit.\n        meeting_end_time = betty_available_end  # This line is only needed if adjustment would be needed.\n    \n    # Build the schedule as a list of actions.\n    schedule = []\n    \n    # 1. Start at Marina District at arrival time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": marina_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # 2. Wait at Marina District until departure time if needed.\n    if arrival_time < departure_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": marina_location,\n            \"time\": format_time(departure_time)\n        })\n    \n    # 3. Travel from Marina District to Richmond District.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": richmond_location,\n        \"duration\": travel_marina_to_richmond,\n        \"time\": format_time(departure_time),\n        \"to\": richmond_location\n    })\n    \n    # 4. (Optional) If there is any waiting time at Richmond District before meeting Betty,\n    #    include a wait step. In this schedule, arrival coincides with Betty's start time.\n    #    However, for clarity, we mention the meeting start time.\n    if format_time(departure_time + timedelta(minutes=travel_marina_to_richmond)) != format_time(meeting_start_time):\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": richmond_location,\n            \"time\": format_time(meeting_start_time)\n        })\n    \n    # 5. Meet Betty at Richmond District.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": richmond_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Create result dictionary\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Output the result as JSON formatted dictionary.\n    print(json.dumps(result, indent=2))\n    \nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_18",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "7:29PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "7:29PM",
                    "duration": 16,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time in \"H:MMAM/PM\" format (strip any leading zero from hour)\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0] == \"0\":\n        formatted = formatted[1:]\n    return formatted\n\ndef main():\n    # Input parameters\n    # Locations\n    start_location = \"Golden Gate Park\"\n    meeting_location = \"Pacific Heights\"\n    \n    # Start time at Golden Gate Park: 9:00AM (today's date arbitrary)\n    base_date = datetime.today().replace(hour=9, minute=0, second=0, microsecond=0)\n    start_time = base_date\n\n    # John's availability\n    john_available_start = base_date.replace(hour=19, minute=45)  # 7:45PM\n    john_available_end = base_date.replace(hour=20, minute=45)    # 8:45PM\n    meeting_duration = 45  # minutes\n    \n    # Travel times (in minutes)\n    travel_gp_to_ph = 16  # from Golden Gate Park to Pacific Heights\n    travel_ph_to_gp = 15  # from Pacific Heights to Golden Gate Park (not used in this schedule)\n\n    # To meet John, we need to be at Pacific Heights at or before John's available start.\n    # Compute departure time from Golden Gate Park so that arrival equals John's available start.\n    departure_time_for_meeting = john_available_start - timedelta(minutes=travel_gp_to_ph)\n    \n    # If we're already at Golden Gate Park from 9:00AM, wait until departure time.\n    # Compute arriving time to Pacific Heights.\n    arrival_time_ph = departure_time_for_meeting + timedelta(minutes=travel_gp_to_ph)\n    \n    # Determine meeting start and end time; meeting must be at least 45 minutes.\n    meeting_start_time = arrival_time_ph  # Ideally start as soon as you arrive.\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Check if meeting fits within John's availability; if not, adjust (here it fits: 7:45PM to 8:30PM)\n    if meeting_end_time > john_available_end:\n        raise ValueError(\"John's availability is not enough for a 45-minute meeting.\")\n\n    # Build the schedule as a list of actions.\n    schedule = []\n    \n    # Action 1: Start at Golden Gate Park at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Action 2: Wait at Golden Gate Park until departure time.\n    # (This action reflects waiting until it's time to leave.)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": start_location,\n        \"time\": format_time(departure_time_for_meeting)\n    })\n    \n    # Action 3: Travel from Golden Gate Park to Pacific Heights.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_gp_to_ph,\n        \"time\": format_time(departure_time_for_meeting),\n        \"to\": meeting_location\n    })\n    \n    # Action 4: Meet John at Pacific Heights.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Prepare final dictionary.\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Output the result as JSON-formatted dictionary.\n    print(json.dumps(result, indent=2))\n    \nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_19",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "11:22AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "11:22AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format the datetime in \"H:MMAM/PM\" format without a leading zero for hour.\n    # First get a 12-hour format with leading zero and then remove it if present.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters (all times as datetime objects for a dummy date)\n    # We'll use January 1, 2000 as an arbitrary date.\n    base_date = \"2000-01-01\"\n    arrival_chinatown_str = base_date + \" 9:00AM\"\n    joseph_start_str = base_date + \" 11:30AM\"\n    joseph_end_str = base_date + \" 3:15PM\"\n\n    arrival_chinatown = datetime.strptime(arrival_chinatown_str, \"%Y-%m-%d %I:%M%p\")\n    joseph_avail_start = datetime.strptime(joseph_start_str, \"%Y-%m-%d %I:%M%p\")\n    joseph_avail_end = datetime.strptime(joseph_end_str, \"%Y-%m-%d %I:%M%p\")\n    \n    # Travel times (in minutes)\n    travel_time_chinatown_to_nobhill = 8\n    travel_time_nobhill_to_chinatown = 6\n    \n    # Meeting duration requirement in minutes\n    required_meet_duration = 75\n\n    # Plan:\n    # To meet Joseph at Nob Hill, we must be there no later than joseph's available start time (11:30AM).\n    # Hence, we must leave Chinatown at (11:30AM - 8 minutes)\n    departure_chinatown = joseph_avail_start - timedelta(minutes=travel_time_chinatown_to_nobhill)\n    # Arrival at Nob Hill after travel:\n    arrival_nobhill = departure_chinatown + timedelta(minutes=travel_time_chinatown_to_nobhill)\n    \n    # Meeting with Joseph begins at the time we arrive, i.e., 11:30AM.\n    meeting_start = arrival_nobhill\n    meeting_end = meeting_start + timedelta(minutes=required_meet_duration)\n    \n    # Build schedule list of actions:\n    schedule = []\n    \n    # Start at Chinatown at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Chinatown\",\n        \"time\": format_time(arrival_chinatown)\n    })\n    \n    # Wait at Chinatown until departure for travel if needed.\n    # Only add a wait action if the waiting period is non-zero.\n    if departure_chinatown > arrival_chinatown:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": format_time(departure_chinatown)\n        })\n    \n    # Travel from Chinatown to Nob Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time_chinatown_to_nobhill,\n        \"time\": format_time(departure_chinatown),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Meet Joseph at Nob Hill for the required duration (75 minutes)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": required_meet_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Build final output dictionary\n    output = {\n        \"schedule\": schedule\n    }\n    \n    # Print JSON formatted output\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_20",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Formats datetime to format H:MMAM/PM with no leading zero on hours.\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters\n    # Arrival at Mission District is 9:00AM\n    arrival_time_str = \"9:00AM\"\n    mission_location = \"Mission District\"\n    haight_location = \"Haight-Ashbury\"\n    \n    # Travel times (in minutes)\n    travel_time_md_to_ha = 12\n    travel_time_ha_to_md = 11  # not used in this schedule\n    \n    # Margaret's schedule at Haight-Ashbury\n    margaret_available_start_str = \"8:00AM\"\n    margaret_available_end_str = \"3:45PM\"\n    margaret_min_meet_duration = 30   # in minutes\n\n    # Convert string times to datetime objects (dummy date)\n    base_date = \"2023-01-01 \"  # arbitrary date\n    time_format = \"%Y-%m-%d %I:%M%p\"\n    arrival_time = datetime.strptime(base_date + arrival_time_str, time_format)\n    margaret_start = datetime.strptime(base_date + margaret_available_start_str, time_format)\n    margaret_end = datetime.strptime(base_date + margaret_available_end_str, time_format)\n    \n    # Compute travel from Mission District to Haight-Ashbury.\n    # We assume immediate departure.\n    departure_time = arrival_time   # depart from Mission District as soon as we arrive.\n    arrival_haight = departure_time + timedelta(minutes=travel_time_md_to_ha)\n    \n    # Since Margaret is available from 8:00AM and it's already 9:12AM,\n    # we can meet immediately upon arrival.\n    meeting_start = arrival_haight\n    meeting_duration = margaret_min_meet_duration  # in minutes\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    \n    # Build the schedule following the specified JSON structure.\n    schedule = []\n    \n    # Start action at Mission District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": mission_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Travel action from Mission District to Haight-Ashbury.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": haight_location,\n        \"duration\": travel_time_md_to_ha,\n        \"time\": format_time(departure_time),\n        \"to\": haight_location\n    })\n    \n    # Wait action at Haight-Ashbury: here we assume no extra waiting time as meeting can start immediately.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": haight_location,\n        \"time\": format_time(arrival_haight)\n    })\n    \n    # Meet action with Margaret at Haight-Ashbury.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": haight_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Create final result dictionary\n    result = {\"schedule\": schedule}\n    \n    # Output the result as JSON-formatted dictionary\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_21",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "10:53AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "10:53AM",
                    "duration": 22,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "11:15AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "1:00PM",
                    "duration": 24,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 105,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM with no leading zero in hour.\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0] == '0':\n        formatted = formatted[1:]\n    return formatted\n\n# Input parameters and constants\n# Travel distances in minutes\ntravel_presidio_to_union = 22\ntravel_union_to_presidio = 24\n\n# Meeting constraints\n# You arrive at Presidio at 9:00AM.\nstart_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n# Andrew will be at Union Square from 11:15AM to 5:15PM.\nandrew_start = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\nandrew_end = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\n# Minimum meeting duration in minutes with Andrew\nmin_meet_duration = 105\n\n# Calculate optimal departure time from Presidio so you arrive at Union Square exactly at Andrew's start time.\ndeparture_time = andrew_start - timedelta(minutes=travel_presidio_to_union)\n\n# Meeting start and end times at Union Square\nmeeting_start = andrew_start\nmeeting_end = meeting_start + timedelta(minutes=min_meet_duration)\n# Optionally, after meeting you travel back to Presidio.\n# We'll assume you leave immediately after the meeting.\nback_travel_start = meeting_end\nback_travel_end = back_travel_start + timedelta(minutes=travel_union_to_presidio)\n\n# Build the schedule as a list of events\nschedule = []\n\n# Step 1: Start at Presidio at 9:00AM.\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"Presidio\",\n    \"time\": format_time(start_time)\n})\n\n# Step 2: Wait at Presidio until departure time, if needed.\n# Only add a wait event if there is a gap between arrival and departure.\nif departure_time > start_time:\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Presidio\",\n        \"time\": format_time(departure_time)\n    })\n\n# Step 3: Travel from Presidio to Union Square.\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Presidio\",\n    \"duration\": travel_presidio_to_union,\n    \"time\": format_time(departure_time),\n    \"to\": \"Union Square\"\n})\n\n# Step 4: Meet Andrew at Union Square for the required duration.\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": \"Union Square\",\n    \"duration\": min_meet_duration,\n    \"time\": format_time(meeting_start)\n})\n\n# Step 5: Travel back from Union Square to Presidio.\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Union Square\",\n    \"duration\": travel_union_to_presidio,\n    \"time\": format_time(back_travel_start),\n    \"to\": \"Presidio\"\n})\n\n# Create final output dictionary\noutput = {\n    \"schedule\": schedule\n}\n\n# Print the JSON output\nprint(json.dumps(output, indent=2))",
            "count": "meeting_planning_example_22",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "5:07PM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "5:07PM",
                    "duration": 23,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "5:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 75,
                    "time": "5:30PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (remove any leading zero in hour)\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0] == \"0\":\n        formatted = formatted[1:]\n    return formatted\n\ndef main():\n    # Input parameters & constants\n    # Starting location and time\n    start_location = \"Bayview\"\n    start_time = datetime(1900, 1, 1, 9, 0)  # 9:00AM\n    \n    # John's meeting location and constraints\n    john_location = \"Russian Hill\"\n    john_available_start = datetime(1900, 1, 1, 17, 30)  # 5:30PM\n    john_available_end = datetime(1900, 1, 1, 21, 0)    # 9:00PM\n    meeting_min_duration = 75  # in minutes\n    \n    # Travel durations in minutes\n    travel_duration_bayview_to_rh = 23  # minutes\n    \n    # Calculate travel departure time from Bayview to meet John at Russian Hill\n    # To arrive exactly at John's available start time:\n    travel_departure_time = john_available_start - timedelta(minutes=travel_duration_bayview_to_rh)\n    \n    # Meeting start time is when John is available (arrival in Russian Hill)\n    meeting_start_time = john_available_start\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_min_duration)\n    \n    # Build the schedule\n    schedule = []\n    \n    # Action 1: Start at Bayview at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Action 2: Wait at Bayview until departure time (travel_departure_time)\n    # Only add wait action if there is a waiting period after starting time.\n    if travel_departure_time > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(travel_departure_time)\n        })\n    \n    # Action 3: Travel from Bayview to Russian Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": john_location,\n        \"duration\": travel_duration_bayview_to_rh,\n        \"time\": format_time(travel_departure_time),\n        \"to\": john_location\n    })\n    \n    # Action 4: Meet John at Russian Hill for at least 75 minutes\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": john_location,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Output the schedule as a JSON-formatted dictionary\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_23",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:43AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "10:43AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:00AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as 'H:MMAM/PM' with no leading zero for hour.\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, \"strftime\") else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters\n    # Locations: Nob Hill and Presidio.\n    # Travel times in minutes\n    travel_time_NH_to_Presidio = 17\n    travel_time_Presidio_to_NH = 18\n\n    # Arrival time at Nob Hill\n    start_time_str = \"9:00AM\"\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\")\n    \n    # Matthew's presence at Presidio from 11:00AM to 3:15PM\n    matthew_available_start = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    matthew_available_end = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    \n    # Minimum meeting duration (in minutes)\n    meeting_min_duration = 30\n\n    # Compute departure time from Nob Hill so that arrival at Presidio coincides with Matthew's availability\n    # To meet at the earliest available time (11:00AM), departure time is:\n    departure_time = matthew_available_start - timedelta(minutes=travel_time_NH_to_Presidio)\n    # Arrival time at Presidio after travel:\n    arrival_time = departure_time + timedelta(minutes=travel_time_NH_to_Presidio)\n    \n    # Compute meeting start and end times at Presidio\n    meeting_start = arrival_time if arrival_time >= matthew_available_start else matthew_available_start\n    meeting_end = meeting_start + timedelta(minutes=meeting_min_duration)\n    \n    # Ensure meeting does not exceed Matthew's available end time\n    if meeting_end > matthew_available_end:\n        raise ValueError(\"Not enough time to have a meeting meeting the minimum duration within available window.\")\n    \n    # Create schedule events in order:\n    schedule = []\n    \n    # 1. Start at Nob Hill at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Nob Hill\",\n        \"time\": format_time(start_time)\n    })\n    \n    # 2. Wait at Nob Hill until departure time.\n    # Only add wait step if there is a waiting period.\n    if departure_time > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": format_time(departure_time)\n        })\n    \n    # 3. Travel from Nob Hill to Presidio.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_time_NH_to_Presidio,\n        \"time\": format_time(departure_time),\n        \"to\": \"Presidio\"\n    })\n    \n    # 4. Wait at Presidio until meeting starts (in case arrival is earlier)\n    if meeting_start > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": format_time(meeting_start)\n        })\n    \n    # 5. Meet Matthew at Presidio for at least 30 minutes.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Optional: If you wish to travel back to Nob Hill after the meeting, uncomment below.\n    # return_departure = meeting_end\n    # schedule.append({\n    #     \"action\": \"travel\",\n    #     \"location\": \"Presidio\",\n    #     \"duration\": travel_time_Presidio_to_NH,\n    #     \"time\": format_time(return_departure),\n    #     \"to\": \"Nob Hill\"\n    # })\n    \n    # Output final schedule as JSON formatted dictionary.\n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_24",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "3:37PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "3:37PM",
                    "duration": 23,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "4:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 105,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse time from a string like \"9:00AM\"\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format time as \"H:MMAM/PM\" with no leading zero for hour\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters\n    arrival_park_str = \"9:00AM\"\n    david_available_start_str = \"4:00PM\"\n    david_available_end_str = \"9:45PM\"\n    travel_time_park_to_chinatown = 23  # in minutes\n    required_meeting_duration = 105  # in minutes\n\n    # Parse times\n    arrival_park = parse_time(arrival_park_str)\n    david_start = parse_time(david_available_start_str)\n    david_end = parse_time(david_available_end_str)\n\n    # We want to meet David when he becomes available.\n    # Compute travel departure time from Golden Gate Park such that arrival is at 4:00PM.\n    travel_departure_time = david_start - timedelta(minutes=travel_time_park_to_chinatown)\n    \n    # The meeting can start when David is available and we have arrived at Chinatown.\n    meeting_start_time = david_start\n    meeting_end_time = meeting_start_time + timedelta(minutes=required_meeting_duration)\n    \n    # Ensure meeting does not exceed David's available end time\n    if meeting_end_time > david_end:\n        # If meeting end time goes beyond, adjust meeting start so that meeting lasts required time.\n        meeting_start_time = david_end - timedelta(minutes=required_meeting_duration)\n        travel_departure_time = meeting_start_time - timedelta(minutes=travel_time_park_to_chinatown)\n        meeting_end_time = meeting_start_time + timedelta(minutes=required_meeting_duration)\n    \n    # Build the schedule list\n    schedule = []\n    \n    # Action 1: Start at Golden Gate Park at arrival time\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": format_time(arrival_park)\n    })\n    \n    # Action 2: Wait at Golden Gate Park until departure time for travel (if needed)\n    # Only add wait if the departure time is later than the arrival time.\n    if travel_departure_time > arrival_park:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Golden Gate Park\",\n            \"time\": format_time(travel_departure_time)\n        })\n    \n    # Action 3: Travel from Golden Gate Park to Chinatown.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_time_park_to_chinatown,\n        \"time\": format_time(travel_departure_time),\n        \"to\": \"Chinatown\"\n    })\n    \n    # Action 4: Meet David at Chinatown for the required duration starting at meeting_start_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": required_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Prepare final output dictionary\n    output = {\"schedule\": schedule}\n    \n    # Print the JSON formatted schedule\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_25",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:08PM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "1:08PM",
                    "duration": 7,
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 105,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime object as H:MMAM/PM (no leading zero for hour)\n    return dt.strftime('%-I:%M%p') if hasattr(dt, 'strftime') else dt.strftime('%I:%M%p').lstrip(\"0\")\n\ndef main():\n    # Input Parameters / Constraints\n    start_location = \"Richmond District\"\n    meeting_location = \"Presidio\"\n    \n    # Travel times in minutes\n    travel_Richmond_to_Presidio = 7\n    travel_Presidio_to_Richmond = 7\n\n    # Arrival time at Richmond District\n    arrival_time_str = \"9:00AM\"\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M%p\")\n    \n    # Sarah's availability at Presidio and meeting constraints\n    sarah_available_start_str = \"1:15PM\"\n    sarah_available_end_str   = \"3:15PM\"\n    sarah_available_start = datetime.strptime(sarah_available_start_str, \"%I:%M%p\")\n    sarah_available_end   = datetime.strptime(sarah_available_end_str, \"%I:%M%p\")\n    minimum_meeting_duration = 105  # in minutes\n\n    # Compute departure time from Richmond to arrive exactly when Sarah is available.\n    # We want to arrive at Presidio at Sarah's available start time.\n    departure_time_for_travel = sarah_available_start - timedelta(minutes=travel_Richmond_to_Presidio)\n    \n    # Meeting start time is when we arrive at Presidio\n    meeting_start_time = sarah_available_start\n    \n    # Meeting end time is meeting start time plus the meeting duration\n    meeting_end_time = meeting_start_time + timedelta(minutes=minimum_meeting_duration)\n    \n    # Check if meeting_end_time is within Sarah's availability.\n    if meeting_end_time > sarah_available_end:\n        raise ValueError(\"Cannot schedule the meeting for the minimum required duration within Sarah's availability.\")\n\n    # Build schedule events as a list of dictionaries.\n    schedule = []\n\n    # 1. Start at Richmond District at arrival time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(arrival_time)\n    })\n\n    # 2. Wait at Richmond District until it's time to depart.\n    # Only add a wait event if departure time is later than arrival time.\n    if departure_time_for_travel > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(departure_time_for_travel)\n        })\n\n    # 3. Travel from Richmond District to Presidio.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_Richmond_to_Presidio,\n        \"time\": format_time(departure_time_for_travel),\n        \"to\": meeting_location\n    })\n\n    # 4. Meet Sarah at Presidio.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": minimum_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n\n    # Prepare the final JSON dictionary.\n    result = {\n        \"schedule\": schedule\n    }\n\n    # Output the result in JSON format.\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_26",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "6:53PM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "6:53PM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:00PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 15,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (remove any leading zero)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters\n    arrival_location = \"Marina District\"\n    meeting_location = \"Pacific Heights\"\n    \n    # Travel times in minutes\n    travel_time_marina_to_pacific = 7  # minutes\n    travel_time_pacific_to_marina = 6  # minutes (not used in schedule below)\n    \n    # Time constraints\n    # We arrive at Marina District at 9:00AM\n    arrival_time_str = \"9:00AM\"\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M%p\")\n    \n    # Margaret will be at Pacific Heights from 7:00PM to 7:45PM.\n    margaret_available_start_str = \"7:00PM\"\n    margaret_available_end_str   = \"7:45PM\"\n    margaret_available_start = datetime.strptime(margaret_available_start_str, \"%I:%M%p\")\n    margaret_available_end   = datetime.strptime(margaret_available_end_str, \"%I:%M%p\")\n    \n    # We want to meet Margaret for a minimum of 15 minutes.\n    meeting_min_duration = 15  # minutes\n\n    # To meet Margaret at Pacific Heights for at least 15 minutes,\n    # the latest we can start the meeting is such that meeting ends by her availability end.\n    # However, to optimize our schedule, let us attempt to start the meeting at the earliest possible time,\n    # which is when her availability starts.\n    optimal_meeting_start = margaret_available_start\n    optimal_meeting_end = optimal_meeting_start + timedelta(minutes=meeting_min_duration)\n    \n    # Ensure the meeting can finish within her availability\n    if optimal_meeting_end > margaret_available_end:\n        raise ValueError(\"Not enough time to meet Margaret for the minimum required duration.\")\n\n    # Calculate departure time from Marina District to arrive in time at Pacific Heights.\n    # We need to travel from Marina District to Pacific Heights, taking 7 minutes.\n    departure_time = optimal_meeting_start - timedelta(minutes=travel_time_marina_to_pacific)\n    \n    # Build schedule:\n    # 1. Start at Marina District at 9:00AM.\n    # 2. Wait at Marina District until departure time.\n    # 3. Travel to Pacific Heights starting at the departure time.\n    # 4. Meet Margaret at Pacific Heights from optimal_meeting_start for at least 15 minutes.\n    schedule = []\n    \n    # Action: start\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Action: wait at Marina District until departure time, if needed.\n    if departure_time > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": arrival_location,\n            \"time\": format_time(departure_time)\n        })\n    \n    # Action: travel from Marina District to Pacific Heights\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_marina_to_pacific,\n        \"time\": format_time(departure_time),\n        \"to\": meeting_location\n    })\n    \n    # Action: meet Margaret at Pacific Heights\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(optimal_meeting_start)\n    })\n    \n    # Prepare output dictionary according to the required JSON structure.\n    output = {\"schedule\": schedule}\n    \n    # Output JSON formatted result\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_27",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "5:50PM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "5:57PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime dt as \"H:MMAM/PM\" without a leading zero.\n    t = dt.strftime(\"%I:%M%p\")\n    if t[0] == \"0\":\n        t = t[1:]\n    return t\n\ndef main():\n    # Input parameters and constants\n    # Arrival at Union Square\n    start_location = \"Union Square\"\n    start_time = datetime(2000, 1, 1, 9, 0)  # 9:00AM\n    \n    # Joshua's availability at Chinatown: from 6:00PM to 9:30PM\n    joshua_location = \"Chinatown\"\n    joshua_available_start = datetime(2000, 1, 1, 18, 0)  # 6:00PM\n    joshua_available_end   = datetime(2000, 1, 1, 21, 30) # 9:30PM\n    meeting_min_duration = 75  # minutes minimum meeting time\n    \n    # Travel times in minutes\n    travel_times = {\n        (\"Union Square\", \"Chinatown\"): 7,\n        (\"Chinatown\", \"Union Square\"): 7\n    }\n    \n    # For our schedule, we want to meet Joshua at Chinatown.\n    # To incorporate a \"wait\" action as required in the output, we purposely leave a small buffer.\n    # We plan to arrive a few minutes early and then wait until Joshua is available.\n    # Let's choose a waiting buffer of 3 minutes.\n    waiting_buffer = 3  # minutes\n    \n    # Compute departure time from Union Square to ensure waiting buffer at Chinatown.\n    travel_duration = travel_times[(start_location, joshua_location)]\n    # To wait for 3 minutes, we want to arrive 3 minutes before Joshua becomes available.\n    travel_arrival_time = joshua_available_start - timedelta(minutes=waiting_buffer)\n    departure_time = travel_arrival_time - timedelta(minutes=travel_duration)\n    \n    # Verify that departure_time is after the start time.\n    if departure_time < start_time:\n        raise ValueError(\"Departure time is before arrival time at the starting location!\")\n    \n    # Compute waiting time at Chinatown\n    wait_duration = (joshua_available_start - travel_arrival_time).seconds // 60  # in minutes\n    # It should be waiting_buffer minutes if calculations are correct.\n    \n    # Meeting start time is when Joshua becomes available.\n    meeting_start_time = joshua_available_start\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_min_duration)\n    \n    # Build the schedule as a list of actions\n    schedule = []\n    \n    # Start action at Union Square at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Travel action from Union Square to Chinatown.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(departure_time),\n        \"to\": joshua_location\n    })\n    \n    # Wait action at Chinatown from arrival until Joshua is available.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": joshua_location,\n        \"time\": format_time(travel_arrival_time)\n    })\n    \n    # Meet action with Joshua at Chinatown.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": joshua_location,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Prepare final output dictionary\n    output = {\n        \"schedule\": schedule\n    }\n    \n    # Output result as JSON-formatted dictionary\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_28",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "7:15PM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "7:15PM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_timestr(total_minutes):\n    # Convert minutes since midnight into H:MMAM/PM format (no leading zero for hour)\n    hour = total_minutes // 60\n    minute = total_minutes % 60\n    period = \"AM\"\n    if hour >= 12:\n        period = \"PM\"\n    display_hour = hour\n    if hour == 0:\n        display_hour = 12\n    elif hour > 12:\n        display_hour = hour - 12\n    return f\"{display_hour}:{minute:02d}{period}\"\n\ndef compute_schedule():\n    # Input parameters\n    arrival_sunset = 9 * 60  # 9:00AM in minutes\n    nancy_available_start = 19 * 60 + 30  # 7:30PM in minutes (19:30)\n    nancy_available_end = 21 * 60 + 45    # 9:45PM in minutes (21:45)\n    travel_time_sunset_to_haight = 15  # in minutes\n    meeting_duration = 75  # minutes required with Nancy\n    \n    # Compute the departure time from Sunset District:\n    # To meet Nancy right at the start of her available slot, you must leave\n    # at the time that allows arrival exactly at 7:30PM.\n    departure_sunset = nancy_available_start - travel_time_sunset_to_haight  # 7:15PM\n    \n    # Compute meeting start and end times:\n    meeting_start = nancy_available_start  # 7:30PM when meeting begins\n    meeting_end = meeting_start + meeting_duration  # meeting end time\n    \n    # Verify meeting_end does not exceed Nancy's available end time.\n    if meeting_end > nancy_available_end:\n        raise ValueError(\"Cannot meet Nancy for the required duration within her available time.\")\n    \n    # Build the schedule dynamically:\n    schedule = []\n    \n    # Step 1: Start at Sunset District at arrival time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Sunset District\",\n        \"time\": minutes_to_timestr(arrival_sunset)\n    })\n    \n    # Step 2: Wait at Sunset District until departure time.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Sunset District\",\n        \"time\": minutes_to_timestr(departure_sunset)\n    })\n    \n    # Step 3: Travel from Sunset District to Haight-Ashbury.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_time_sunset_to_haight,\n        \"time\": minutes_to_timestr(departure_sunset),\n        \"to\": \"Haight-Ashbury\"\n    })\n    \n    # Step 4: Meet Nancy at Haight-Ashbury.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": meeting_duration,\n        \"time\": minutes_to_timestr(meeting_start)\n    })\n    \n    # Construct the final JSON object.\n    result = {\"schedule\": schedule}\n    return result\n\nif __name__ == \"__main__\":\n    schedule_result = compute_schedule()\n    print(json.dumps(schedule_result, indent=2))",
            "count": "meeting_planning_example_29",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 120,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (without leading zeros for hours)\n    hour = dt.hour\n    minute = dt.minute\n    am_pm = \"AM\" if hour < 12 else \"PM\"\n    # Convert to 12-hour clock, note that hour 0 means 12AM\n    hour = hour % 12\n    if hour == 0:\n        hour = 12\n    return f\"{hour}:{minute:02d}{am_pm}\"\n\ndef main():\n    # Input parameters and constraints\n    # Arrival location and time\n    start_location = \"Richmond District\"\n    arrival_time_str = \"9:00AM\"\n    arrival_dt = datetime.strptime(arrival_time_str, \"%I:%M%p\")  # use a dummy date\n    \n    # Stephanie's availability at North Beach\n    stephanie_location = \"North Beach\"\n    stephanie_start_dt = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    stephanie_end_dt   = datetime.strptime(\"4:15PM\", \"%I:%M%p\")\n    # Minimum meeting duration in minutes\n    meeting_duration = 120\n    \n    # Travel times\n    travel_time_to_nb = 17  # minutes from Richmond District to North Beach\n    travel_time_from_nb = 18  # minutes from North Beach to Richmond District (not used in this schedule)\n    \n    # Compute schedule:\n    schedule = []\n    \n    # 1. Start at Richmond District at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(arrival_dt)\n    })\n    \n    # 2. Travel from Richmond District to North Beach\n    travel_departure_dt = arrival_dt  # leave immediately at 9:00AM\n    travel_duration_td = timedelta(minutes=travel_time_to_nb)\n    travel_arrival_dt = travel_departure_dt + travel_duration_td\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": stephanie_location,\n        \"duration\": travel_time_to_nb,\n        \"time\": format_time(travel_departure_dt),\n        \"to\": stephanie_location\n    })\n    \n    # 3. Wait at North Beach if arrived before Stephanie is available.\n    # If arrival is before 9:30AM, we wait until 9:30AM.\n    wait_start_dt = travel_arrival_dt\n    meeting_start_dt = max(travel_arrival_dt, stephanie_start_dt)\n    if travel_arrival_dt < stephanie_start_dt:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": stephanie_location,\n            \"time\": format_time(travel_arrival_dt)\n        })\n    \n    # 4. Meet Stephanie at North Beach for at least 120 minutes starting when she is available.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": stephanie_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_dt)\n    })\n    \n    # (Optional additional scheduling can be added here, e.g., travel back or meeting others.)\n    \n    # Build output dictionary\n    output = {\"schedule\": schedule}\n    \n    # Output JSON-formatted result\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_30",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:11AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(total_minutes):\n    # total_minutes: minutes past midnight\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    period = \"AM\"\n    if hours >= 12:\n        period = \"PM\"\n        if hours > 12:\n            hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{minutes:02d}{period}\"\n\ndef main():\n    # Input parameters\n    # Arrival at Nob Hill at 9:00AM = 9 * 60 = 540 minutes from midnight\n    arrival_nob_hill = 9 * 60  # 9:00AM in minutes\n    \n    # Travel times (in minutes)\n    travel_nh_to_as = 11  # Nob Hill to Alamo Square\n    \n    # Anthony's availability at Alamo Square: 7:15AM to 1:00PM.\n    anthony_start = 7 * 60 + 15  # 7:15AM in minutes\n    anthony_end = 13 * 60        # 1:00PM in minutes\n    \n    # Meeting constraint: minimum of 15 minutes with Anthony.\n    meeting_duration = 15\n    \n    # Compute optimal schedule:\n    # Since we arrive at Nob Hill at 9:00AM, the best option is to immediately travel\n    # to Alamo Square to meet Anthony, as Anthony is available until 1:00PM.\n    start_time = arrival_nob_hill  # 9:00AM at Nob Hill\n    travel_start_time = start_time\n    travel_duration = travel_nh_to_as\n    arrival_at_as = travel_start_time + travel_duration  # arriving at Alamo Square\n    \n    # Ensure that meeting can be scheduled within Anthony's available time.\n    # We choose to meet for exactly the minimum required duration.\n    meeting_start = arrival_at_as\n    meeting_end = meeting_start + meeting_duration\n    if meeting_end > anthony_end:\n        raise ValueError(\"Not enough time to meet Anthony for the required duration.\")\n    \n    # Build the schedule steps:\n    schedule = []\n    \n    # Step 1: Start at Nob Hill\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Nob Hill\",\n        \"time\": format_time(start_time)\n    })\n    \n    # Step 2: Travel from Nob Hill to Alamo Square\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_start_time),\n        \"to\": \"Alamo Square\"\n    })\n    \n    # Optional waiting step is not needed because we arrive during Anthony's available time.\n    # If arrival was before Anthony's available time, we would add a waiting event.\n    # Here, we assume travel lands us in time.\n    if meeting_start < anthony_start:\n        # Wait until Anthony is available.\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": format_time(anthony_start)\n        })\n        meeting_start = anthony_start\n        meeting_end = meeting_start + meeting_duration\n    \n    # Step 3: Meet with Anthony at Alamo Square\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Prepare result JSON dictionary\n    result = {\"schedule\": schedule}\n    \n    # Print out JSON formatted result\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_31",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:11AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "10:56AM",
                    "duration": 13,
                    "to": "The Castro"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format dt as 'H:MMAM/PM' (remove any leading zero)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters and constraints\n    start_location = \"The Castro\"\n    meeting_location = \"Golden Gate Park\"\n    start_time_str = \"9:00AM\"\n    meeting_min_duration = 105  # in minutes\n    jeffrey_start_str = \"7:00AM\"\n    jeffrey_end_str = \"5:30PM\"\n    \n    # Travel durations (in minutes)\n    travel_time_castro_to_park = 11\n    travel_time_park_to_castro = 13\n    \n    # Parse the times\n    time_format = \"%I:%M%p\"\n    start_time = datetime.strptime(start_time_str, time_format)\n    jeffrey_start = datetime.strptime(jeffrey_start_str, time_format)\n    jeffrey_end = datetime.strptime(jeffrey_end_str, time_format)\n    \n    # Our schedule:\n    # 1. Start at The Castro at start_time.\n    # 2. Travel from The Castro to Golden Gate Park.\n    travel_depart_time = start_time\n    arrival_at_park = travel_depart_time + timedelta(minutes=travel_time_castro_to_park)\n    \n    # Ensure that Jeffrey is available at arrival (Jeffrey arrives at 7:00AM, so already available)\n    # 3. Meet Jeffrey at Golden Gate Park for the required minimum duration.\n    meeting_start = arrival_at_park\n    meeting_duration = meeting_min_duration\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    \n    # Ensure meeting ends before Jeffrey leaves (Jeffrey leaves at 5:30PM)\n    if meeting_end > jeffrey_end:\n        raise ValueError(\"Cannot schedule meeting: meeting end time is after Jeffrey's availability.\")\n    \n    # 4. Travel back to The Castro after meeting.\n    travel_back_depart_time = meeting_end\n    arrival_back_castro = travel_back_depart_time + timedelta(minutes=travel_time_park_to_castro)\n    \n    # Build the schedule list\n    schedule = []\n    \n    # Event 1: Start at The Castro\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Event 2: Travel from The Castro to Golden Gate Park\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_castro_to_park,\n        \"time\": format_time(travel_depart_time),\n        \"to\": meeting_location\n    })\n    \n    # Event 3: Meet Jeffrey at Golden Gate Park\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Event 4: Travel back from Golden Gate Park to The Castro\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_park_to_castro,\n        \"time\": format_time(travel_back_depart_time),\n        \"to\": start_location\n    })\n    \n    # For completeness, if there was waiting time before meeting, we could add a \"wait\" event.\n    # In this schedule, we arrive exactly when we are ready to meet, so no waiting is needed.\n    \n    # Output the schedule as a JSON-formatted dictionary\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_32",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "12:00PM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "12:00PM",
                    "duration": 30,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "12:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 30,
                    "time": "9:30AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(minutes):\n    # Convert total minutes since midnight to a formatted string \"H:MMAM/PM\"\n    hours = minutes // 60\n    mins = minutes % 60\n    period = \"AM\"\n    if hours >= 12:\n        period = \"PM\"\n    display_hour = hours % 12\n    if display_hour == 0:\n        display_hour = 12\n    return f\"{display_hour}:{mins:02d}{period}\"\n\ndef compute_optimal_schedule():\n    # Input variables based on constraints:\n    start_location = \"Sunset District\"\n    meeting_location = \"Union Square\"\n    \n    # Travel times in minutes\n    travel_from_sunset_to_union = 30  # Sunset District -> Union Square \n    travel_from_union_to_sunset = 26  # Not used in meeting with Sarah\n    \n    # Arrival and meeting constraints\n    start_time = 9 * 60  # 9:00AM in minutes since midnight (9*60 = 540)\n    sarah_arrival = 12 * 60 + 30  # 12:30PM -> 750 minutes\n    sarah_departure = 21 * 60 + 30  # 9:30PM -> 1290 minutes\n    required_meet_duration = 15  # minutes\n\n    # To optimize meeting Sarah, we want to arrive at Union Square exactly when Sarah arrives.\n    # Calculate departure time from Sunset District to arrive exactly at sarah_arrival .\n    travel_departure_time = sarah_arrival - travel_from_sunset_to_union  # departure from Sunset District, in minutes\n    \n    # Ensure that travel_departure_time is not before the start_time:\n    if travel_departure_time < start_time:\n        travel_departure_time = start_time\n\n    # Calculate travel arrival time at Union Square\n    travel_arrival_time = travel_departure_time + travel_from_sunset_to_union\n\n    # Build schedule events:\n    schedule = []\n    \n    # Event 1: Start at Sunset District at start_time (9:00AM)\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": minutes_to_time_str(start_time)\n    })\n    \n    # Event 2: Wait at Sunset District until departure time (if any wait time)\n    if travel_departure_time > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": minutes_to_time_str(travel_departure_time)\n        })\n    \n    # Event 3: Travel from Sunset District to Union Square\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_from_sunset_to_union,\n        \"time\": minutes_to_time_str(travel_departure_time),\n        \"to\": meeting_location\n    })\n    \n    # Event 4: Meet Sarah at Union Square for at least the required duration.\n    # Arrival time is travel_arrival_time, which ideally equals Sarah's available start time.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": required_meet_duration,\n        \"time\": minutes_to_time_str(travel_arrival_time)\n    })\n    \n    # Create the final schedule dictionary.\n    result = {\"schedule\": schedule}\n    return result\n\nif __name__ == \"__main__\":\n    schedule = compute_optimal_schedule()\n    # Output the schedule as a JSON-formatted dictionary\n    print(json.dumps(schedule, indent=2))\n",
            "count": "meeting_planning_example_33",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:52AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "11:52AM",
                    "duration": 23,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "12:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 105,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time in H:MMAM/PM format with no leading zero for the hour.\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted.startswith(\"0\"):\n        formatted = formatted[1:]\n    return formatted\n\ndef main():\n    # Define input parameters\n    # You arrive at Bayview at 9:00AM.\n    bayview_location = \"Bayview\"\n    pacific_heights_location = \"Pacific Heights\"\n    bayview_arrival_str = \"9:00AM\"\n    \n    # Thomas's availability at Pacific Heights:\n    thomas_available_start_str = \"12:15PM\"\n    thomas_available_end_str = \"5:15PM\"  # Although not explicitly used in computing the meeting \n    # Desired meeting duration in minutes:\n    required_meeting_duration = 105\n\n    # Travel Times:\n    travel_bayview_to_pacific = timedelta(minutes=23)\n    travel_pacific_to_bayview = timedelta(minutes=22)  # Not used in our plan\n\n    # Convert string times to datetime objects (using an arbitrary date: 1900-01-01)\n    bayview_start_time = datetime.strptime(bayview_arrival_str, \"%I:%M%p\")\n    thomas_available_start = datetime.strptime(thomas_available_start_str, \"%I:%M%p\")\n    \n    # To meet Thomas, you need to arrive at Pacific Heights at or after his available start.\n    # So, compute the departure time from Bayview to arrive exactly at thomas_available_start.\n    departure_time = thomas_available_start - travel_bayview_to_pacific\n    arrival_at_pacific = departure_time + travel_bayview_to_pacific\n    \n    # The plan is:\n    # 1. Start at Bayview at 9:00AM.\n    # 2. Wait at Bayview until the departure time (calculated).\n    # 3. Travel from Bayview to Pacific Heights starting at departure time.\n    # 4. Upon arrival at Pacific Heights (which is Thomas' available start), meet Thomas for the required meeting duration.\n    \n    # Now, construct the schedule.\n    schedule = []\n    \n    # Start action at Bayview at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": bayview_location,\n        \"time\": format_time(bayview_start_time)\n    })\n    \n    # Wait until departure time at Bayview if needed.\n    # Only include a wait event if departure_time is later than start time.\n    if departure_time > bayview_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": bayview_location,\n            \"time\": format_time(departure_time)\n        })\n    \n    # Travel from Bayview to Pacific Heights.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": pacific_heights_location,\n        \"duration\": int(travel_bayview_to_pacific.total_seconds() // 60),\n        \"time\": format_time(departure_time),\n        \"to\": pacific_heights_location\n    })\n    \n    # Meet Thomas at Pacific Heights.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": pacific_heights_location,\n        \"duration\": required_meeting_duration,\n        \"time\": format_time(arrival_at_pacific)\n    })\n    \n    # Output the final schedule as a JSON-formatted dictionary.\n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_34",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:18AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "10:48AM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:10AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 90,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    hour = dt.hour % 12\n    if hour == 0:\n        hour = 12\n    minute = dt.minute\n    suffix = \"AM\" if dt.hour < 12 else \"PM\"\n    return f\"{hour}:{minute:02d}{suffix}\"\n\ndef main():\n    # Input parameters / constraints\n    # Travel times in minutes\n    bayview_to_chinatown = 18\n    chinatown_to_bayview = 22\n    \n    # Arrival and meeting constraints\n    # You arrive at Bayview at 9:00AM.\n    base_date = datetime(2023, 1, 1)  # arbitrary date for time calculations\n    arrival_bayview = datetime.combine(base_date.date(), datetime.strptime(\"9:00AM\", \"%I:%M%p\").time())\n    \n    # Jason's availability at Chinatown from 8:30AM to 12:30PM.\n    jason_start = datetime.combine(base_date.date(), datetime.strptime(\"8:30AM\", \"%I:%M%p\").time())\n    jason_end   = datetime.combine(base_date.date(), datetime.strptime(\"12:30PM\", \"%I:%M%p\").time())\n    min_meeting_duration = 90  # in minutes\n    \n    schedule = []\n    \n    # Step 1: Start at Bayview at arrival time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Bayview\",\n        \"time\": format_time(arrival_bayview)\n    })\n    \n    # Step 2: Travel from Bayview to Chinatown.\n    # Depart immediately at 9:00AM.\n    travel_depart_time = arrival_bayview\n    travel_duration = bayview_to_chinatown\n    arrival_chinatown = travel_depart_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",   # starting location for travel\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_depart_time),\n        \"to\": \"Chinatown\"\n    })\n    \n    # If arrival_chinatown is before Jason is available (i.e. before 8:30AM), wait until Jason starts.\n    # In this case, arrival_chinatown will be 9:18AM which is after 8:30AM, so no wait is needed.\n    meeting_start = max(arrival_chinatown, jason_start)\n    \n    if meeting_start > arrival_chinatown:\n        # There is some waiting time at Chinatown before Jason is available\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": format_time(arrival_chinatown)\n        })\n    \n    # Step 3: Meet Jason at Chinatown for at least 90 minutes.\n    meeting_duration = min_meeting_duration\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    \n    # Ensure meeting ends before Jason leaves; if not, adjust the meeting start time\n    if meeting_end > jason_end:\n        # If meeting end would go past Jason's available time, then meeting start must be adjusted backwards.\n        meeting_start = jason_end - timedelta(minutes=meeting_duration)\n        meeting_end = jason_end\n        # If meeting_start is before arrival, then it's impossible.\n        if meeting_start < arrival_chinatown:\n            raise ValueError(\"Cannot schedule a 90-minute meeting with Jason based on current constraints.\")\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Step 4: Travel from Chinatown back to Bayview after the meeting.\n    travel_back_depart = meeting_end\n    travel_back_duration = chinatown_to_bayview\n    arrival_back = travel_back_depart + timedelta(minutes=travel_back_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",  # starting location for travel back\n        \"duration\": travel_back_duration,\n        \"time\": format_time(travel_back_depart),\n        \"to\": \"Bayview\"\n    })\n    \n    # Optionally, add a wait action at Bayview if needed (e.g., you have time before meeting other friends)\n    # For the sake of completeness, if arrival back is before Jason's end time (or other constraints), we record a wait.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Bayview\",\n        \"time\": format_time(arrival_back)\n    })\n    \n    # Form the final output dictionary\n    output = {\"schedule\": schedule}\n    \n    # Output result as JSON formatted string\n    print(json.dumps(output, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_35",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "1:16PM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "1:16PM",
                    "duration": 14,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "1:30PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 60,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as 'H:MMAM/PM' with no leading zero for hour.\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters:\n    # Arrival: Marina District at 9:00AM.\n    arrival_location = \"Marina District\"\n    arrival_time_str = \"9:00AM\"\n    # Barbara's availability at Embarcadero from 1:30PM to 8:45PM.\n    barbara_location = \"Embarcadero\"\n    barbara_available_start_str = \"1:30PM\"\n    barbara_available_end_str = \"8:45PM\"\n    # Minimum meeting duration in minutes:\n    meeting_duration_min = 60\n    # Travel durations (in minutes)\n    travel_marina_to_embark = 14  # minutes from Marina District to Embarcadero\n    travel_embark_to_marina = 12  # minutes from Embarcadero to Marina District (not used in this plan)\n\n    # Define a dummy date for our datetime objects (year, month, day doesn't matter).\n    base_date = datetime(2020, 1, 1)\n    \n    # Parse times:\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    barbara_start_time = datetime.strptime(barbara_available_start_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    barbara_end_time = datetime.strptime(barbara_available_end_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\n\n    # Compute optimal schedule:\n    # To meet Barbara at Embarcadero for at least 60 minutes, we need to arrive at Embarcadero as Barbara becomes available.\n    # Therefore, we schedule departure from Marina District such that arrival at Embarcadero is exactly barbara_start_time.\n    travel_departure_time = barbara_start_time - timedelta(minutes=travel_marina_to_embark)\n    travel_duration = travel_marina_to_embark  # in minutes\n\n    # Meeting start time at Barbara's location:\n    meeting_start_time = barbara_start_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration_min)\n\n    # Build schedule steps:\n    schedule = []\n\n    # Start at Marina District at arrival time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": format_time(arrival_time)\n    })\n\n    # Wait at Marina District until it's time to depart.\n    # Only add a wait action if there is a waiting period.\n    if arrival_time < travel_departure_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": arrival_location,\n            \"time\": format_time(travel_departure_time)\n        })\n\n    # Travel from Marina District to Embarcadero.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_departure_time),\n        \"to\": barbara_location\n    })\n\n    # Meet Barbara at Embarcadero for the minimum required duration.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": barbara_location,\n        \"duration\": meeting_duration_min,\n        \"time\": format_time(meeting_start_time)\n    })\n\n    # Prepare the output JSON structure.\n    output = {\n        \"schedule\": schedule\n    }\n\n    # Output the JSON formatted dictionary.\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_36",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:56AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "11:56AM",
                    "duration": 19,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "12:15PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "1:45PM",
                    "duration": 19,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 90,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as 'H:MMAM/PM' with no leading zero for hour.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters\n    arrival_location = \"Bayview\"\n    meeting_location = \"Financial District\"\n    arrival_time_str = \"9:00AM\"  # Arrival at Bayview\n    jeffrey_available_start_str = \"12:15PM\"\n    jeffrey_available_end_str = \"2:00PM\"\n    required_meeting_duration = 90  # minutes\n    travel_duration = 19  # minutes travel time between Bayview and Financial District (in both directions)\n    \n    # Create a base date for computation\n    base_date = datetime(2000, 1, 1)\n    \n    # Convert input times to datetime objects\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M%p\").replace(year=2000, month=1, day=1)\n    jeffrey_start = datetime.strptime(jeffrey_available_start_str, \"%I:%M%p\").replace(year=2000, month=1, day=1)\n    jeffrey_end = datetime.strptime(jeffrey_available_end_str, \"%I:%M%p\").replace(year=2000, month=1, day=1)\n    \n    # Calculate ideal departure time from Bayview to arrive exactly at Jeffrey's start time.\n    departure_time = jeffrey_start - timedelta(minutes=travel_duration)\n    \n    # Ensure that departure time is not before arrival time.\n    if departure_time < arrival_time:\n        departure_time = arrival_time\n    \n    # Calculate arrival time at Financial District after travel.\n    travel_arrival_time = departure_time + timedelta(minutes=travel_duration)\n    \n    # Meeting start time is when both you have arrived and Jeffrey is available.\n    meeting_start = max(travel_arrival_time, jeffrey_start)\n    \n    # The meeting must last at least the required duration.\n    meeting_end = meeting_start + timedelta(minutes=required_meeting_duration)\n    \n    # Ensure the meeting ends before Jeffrey leaves.\n    if meeting_end > jeffrey_end:\n        # If the calculated meeting_end is after Jeffrey's availability, adjust meeting_start\n        meeting_start = jeffrey_end - timedelta(minutes=required_meeting_duration)\n        meeting_end = jeffrey_end\n    \n    # After meeting, plan travel back to Bayview.\n    return_travel_departure = meeting_end\n    return_travel_arrival = return_travel_departure + timedelta(minutes=travel_duration)\n    \n    # Build schedule (each step is computed)\n    schedule = []\n    \n    # Step 1: Start at Bayview at arrival_time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Step 2: Wait at Bayview until departure_time if necessary.\n    if departure_time > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": arrival_location,\n            \"time\": format_time(departure_time)\n        })\n    \n    # Step 3: Travel from Bayview to Financial District.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(departure_time),\n        \"to\": meeting_location\n    })\n    \n    # Step 4: Meet Jeffrey at Financial District.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": required_meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Step 5: Travel back from Financial District to Bayview.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(return_travel_departure),\n        \"to\": arrival_location\n    })\n    \n    # Prepare the final dictionary\n    result = {\"schedule\": schedule}\n    \n    # Output the result in JSON format\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_37",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:35PM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:35PM",
                    "duration": 10,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format the datetime dt to format H:MMAM/PM without leading zero in hour.\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%#I:%M%p\")\n\ndef main():\n    # Input parameters (all times on an arbitrary same date)\n    # We assume the meeting day is January 1, 2023 for calculation purposes\n    date = \"2023-01-01\"\n    \n    # Start at Union Square: 9:00AM\n    start_time_union = datetime.strptime(date + \" 9:00AM\", \"%Y-%m-%d %I:%M%p\")\n    \n    # Margaret's availability at North Beach: 9:45PM to 10:30PM\n    margaret_start = datetime.strptime(date + \" 9:45PM\", \"%Y-%m-%d %I:%M%p\")\n    margaret_end   = datetime.strptime(date + \" 10:30PM\", \"%Y-%m-%d %I:%M%p\")\n    \n    # Travel distances (in minutes)\n    travel_union_to_north = 10\n    travel_north_to_union = 7  # Not used in this schedule since no return is scheduled\n    \n    # Constraint: Need to meet Margaret for a minimum of 45 minutes.\n    required_meeting_duration = 45  # minutes\n    # Check available meeting window duration at North Beach.\n    available_meeting_duration = int((margaret_end - margaret_start).total_seconds() / 60)\n    if available_meeting_duration < required_meeting_duration:\n        raise ValueError(\"Margaret's available time is less than the required meeting duration.\")\n    \n    # To meet Margaret exactly at the start of her availability, we plan to arrive right at 9:45PM.\n    # Thus, we need to leave Union Square with enough time for travel.\n    departure_time_union = margaret_start - timedelta(minutes=travel_union_to_north)\n    \n    # The travel from Union Square to North Beach\n    travel_start_time = departure_time_union  # departure from Union Square for travel.\n    travel_duration = travel_union_to_north    # 10 minutes travel\n    arrival_time_north = travel_start_time + timedelta(minutes=travel_duration)\n    \n    # Meeting time at North Beach: starting at arrival time.\n    meeting_start_time = arrival_time_north\n    meeting_duration = required_meeting_duration  # 45 minutes meeting\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Build schedule as a list of events:\n    schedule = []\n    \n    # 1. Start at Union Square at arrival time 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Union Square\",\n        \"time\": format_time(start_time_union)\n    })\n    \n    # 2. Wait at Union Square until departure (calculated as leaving time).\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Union Square\",\n        \"time\": format_time(departure_time_union)\n    })\n    \n    # 3. Travel from Union Square to North Beach.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_start_time),\n        \"to\": \"North Beach\"\n    })\n    \n    # 4. Meet Margaret at North Beach.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Output result as JSON-formatted dictionary\n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_38",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "4:34PM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "4:34PM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:45PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 120,
                    "time": "4:45PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\nimport json\n\ndef minutes_to_time_str(total_minutes):\n    # total_minutes represents minutes from midnight\n    hour = (total_minutes // 60) % 24\n    minute = total_minutes % 60\n    suffix = \"AM\" if hour < 12 else \"PM\"\n    # Convert to 12-hour format\n    hour12 = hour if 1 <= hour <= 12 else hour % 12\n    if hour12 == 0:\n        hour12 = 12\n    return f\"{hour12}:{minute:02d}{suffix}\"\n\ndef main():\n    # Input variables (all times in minutes from midnight)\n    # You arrive at Fisherman's Wharf at 9:00AM\n    arrival_fishermans_wharf = 9 * 60  # 9:00AM -> 540 minutes\n    # Stephanie will be at Nob Hill from 4:45PM to 9:45PM.\n    stephanie_start = 16 * 60 + 45  # 16:45 -> 1005 minutes\n    stephanie_end   = 21 * 60 + 45  # 21:45 -> 1305 minutes\n    # Minimum meeting duration with Stephanie: 120 minutes\n    meeting_duration = 120\n    # Travel distances (in minutes)\n    travel_ftw_to_nh = 11  # from Fisherman's Wharf to Nob Hill\n    # Compute departure time from Fisherman's Wharf ensuring meeting can start at 4:45PM exactly.\n    # To arrive by Stephanie's available start time at Nob Hill, leave at:\n    departure_time = stephanie_start - travel_ftw_to_nh  # 1005 - 11 = 994 minutes (which is 4:34PM)\n    # Meeting will start exactly at Stephanie's available time\n    meeting_start = stephanie_start  # 1005 minutes => 4:45PM\n    meeting_end = meeting_start + meeting_duration  # meeting_end = 1005 + 120 = 1125 minutes (6:45PM)\n    \n    # Build schedule as a list of steps\n    schedule = []\n    \n    # Step 1: Start at Fisherman's Wharf at arrival\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Fisherman's Wharf\",\n        \"time\": minutes_to_time_str(arrival_fishermans_wharf)\n    })\n    \n    # Step 2: Wait at Fisherman's Wharf until departure time\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Fisherman's Wharf\",\n        \"time\": minutes_to_time_str(departure_time)\n    })\n    \n    # Step 3: Travel from Fisherman's Wharf to Nob Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",  # starting location of travel\n        \"duration\": travel_ftw_to_nh,\n        \"time\": minutes_to_time_str(departure_time),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Step 4: Meet Stephanie at Nob Hill for meeting_duration minutes\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": minutes_to_time_str(meeting_start)\n    })\n    \n    # Build the final JSON object\n    result = {\"schedule\": schedule}\n    \n    # Output the result as JSON-formatted dictionary\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_39",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "1:58PM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "1:58PM",
                    "duration": 17,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\n\ndef minutes_to_time_str(total_minutes):\n    # Convert minutes since midnight to H:MMAM/PM format (no leading zero)\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    hours_mod = hours if 1 <= hours <= 12 else (hours - 12 if hours > 12 else 12)\n    return f\"{hours_mod}:{minutes:02d}{period}\"\n\ndef main():\n    # Input parameters (in minutes since midnight)\n    # You arrive at The Castro at 9:00AM => 9 * 60 = 540 minutes\n    start_castro = 9 * 60             # 540 minutes\n    deborah_start = 14 * 60 + 15        # Deborah available from 2:15PM => 855 minutes\n    deborah_end = 20 * 60             # 8:00PM => 1200 minutes, not directly used in schedule here\n    meeting_duration = 75             # minimum meeting duration in minutes\n    travel_castro_to_sunset = 17      # travel time from The Castro to Sunset District (minutes)\n    travel_sunset_to_castro = 17      # (not used in this schedule)\n\n    # Compute optimal schedule:\n    # To meet Deborah by 2:15PM at Sunset District, we must depart from The Castro at:\n    depart_castro = deborah_start - travel_castro_to_sunset  # 855 - 17 = 838 minutes -> 1:58PM\n    arrival_sunset = depart_castro + travel_castro_to_sunset   # Should equal deborah_start (855 minutes)\n\n    # Build the schedule as a list of events.\n    schedule = []\n\n    # 1. Start at The Castro at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"The Castro\",\n        \"time\": minutes_to_time_str(start_castro)\n    })\n\n    # 2. Wait at The Castro until it's time to depart.\n    # Only add the wait event if there is waiting time.\n    if depart_castro > start_castro:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"The Castro\",\n            \"time\": minutes_to_time_str(depart_castro)\n        })\n\n    # 3. Travel from The Castro to Sunset District.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_castro_to_sunset,\n        \"time\": minutes_to_time_str(depart_castro),\n        \"to\": \"Sunset District\"\n    })\n\n    # 4. Meet Deborah at Sunset District.\n    # Meeting starts as soon as Deborah is available.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": meeting_duration,\n        \"time\": minutes_to_time_str(deborah_start)\n    })\n\n    # Construct the final output dictionary.\n    output = {\n        \"schedule\": schedule\n    }\n\n    # Output the result as a JSON-formatted string.\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_40",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:18AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "10:03AM",
                    "duration": 19,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 45,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM with no leading zero for the hour.\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0] == \"0\":\n        formatted = formatted[1:]\n    return formatted\n\ndef main():\n    # Input parameters as defined\n    # Arrival at North Beach at 9:00AM\n    nb_arrival = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # George's availability at Haight-Ashbury: 7:30AM to 1:15PM\n    george_start = datetime.strptime(\"7:30AM\", \"%I:%M%p\")\n    george_end   = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    meeting_min_duration = 45  # in minutes\n\n    # Travel times (in minutes)\n    travel_nb_to_ha = 18\n    travel_ha_to_nb = 19\n\n    # Compute the schedule:\n    # 1. Start at North Beach at 9:00AM.\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"North Beach\",\n        \"time\": format_time(nb_arrival)\n    })\n\n    # 2. Travel from North Beach to Haight-Ashbury\n    # Departure time is 9:00AM\n    travel1_departure = nb_arrival\n    travel1_duration = travel_nb_to_ha\n    arrival_ha = travel1_departure + timedelta(minutes=travel1_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel1_duration,\n        \"time\": format_time(travel1_departure),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # 3. Meeting with George at Haight-Ashbury.\n    # George is available, and we ensure meeting meets the minimum duration.\n    # We can start the meeting immediately upon arrival.\n    meeting_start = arrival_ha\n    meeting_duration = meeting_min_duration\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n    # Check that the meeting ends before George leaves.\n    if meeting_end > george_end:\n        raise ValueError(\"Cannot meet George for the required duration within his available time.\")\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n\n    # 4. Travel from Haight-Ashbury back to North Beach.\n    travel2_departure = meeting_end\n    travel2_duration = travel_ha_to_nb\n    arrival_nb_final = travel2_departure + timedelta(minutes=travel2_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel2_duration,\n        \"time\": format_time(travel2_departure),\n        \"to\": \"North Beach\"\n    })\n\n    # Prepare the output dictionary\n    output = {\"schedule\": schedule}\n\n    # Output JSON-formatted result\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_41",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:43PM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "12:43PM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:00PM",
                    "duration": 360
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "7:00PM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM with no leading zero for hour.\n    # dt is a datetime object.\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters and constraints\n    # Arrival time at Nob Hill: 9:00AM\n    base_date = datetime(2023, 1, 1)  # arbitrary date\n    arrival_nob_hill = base_date.replace(hour=9, minute=0)\n    \n    # Timothy is available at Presidio from 1:00PM to 7:00PM.\n    timothy_available_start = base_date.replace(hour=13, minute=0)\n    timothy_available_end = base_date.replace(hour=19, minute=0)\n    \n    # Minimum meeting duration (in minutes)\n    min_meeting_duration = 30\n    \n    # Travel times (in minutes)\n    travel_nobhill_to_presidio = 17\n    travel_presidio_to_nobhill = 18\n\n    # Optimal goal: meet as much as possible during Timothy's presence.\n    # To maximize meeting time, we want to start meeting at the beginning of his availability\n    # and continue until he leaves.\n    meeting_start = timothy_available_start  # 1:00PM\n    meeting_end = timothy_available_end      # 7:00PM\n    meeting_duration = int((meeting_end - meeting_start).total_seconds() / 60)\n\n    # Ensure meeting duration meets the minimum constraint\n    if meeting_duration < min_meeting_duration:\n        raise ValueError(\"Meeting duration does not meet the minimum required time.\")\n    \n    # Compute departure time from Nob Hill such that you arrive at Presidio by meeting_start.\n    departure_from_nob_hill = meeting_start - timedelta(minutes=travel_nobhill_to_presidio)\n    \n    # Compute arrival time after traveling back to Nob Hill from Presidio\n    departure_from_presidio = meeting_end\n    arrival_back_nob_hill = departure_from_presidio + timedelta(minutes=travel_presidio_to_nobhill)\n    \n    # Build the schedule as a list of events following the given structure.\n    schedule = []\n    \n    # 1. Start at Nob Hill at arrival_nob_hill\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Nob Hill\",\n        \"time\": format_time(arrival_nob_hill)\n    })\n    \n    # 2. Wait at Nob Hill until departure time for travel to Presidio\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Nob Hill\",\n        \"time\": format_time(departure_from_nob_hill)\n    })\n    \n    # 3. Travel from Nob Hill to Presidio\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_nobhill_to_presidio,\n        \"time\": format_time(departure_from_nob_hill),\n        \"to\": \"Presidio\"\n    })\n    \n    # 4. Meet Timothy at Presidio\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # 5. Travel back from Presidio to Nob Hill after meeting ends\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_presidio_to_nobhill,\n        \"time\": format_time(departure_from_presidio),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Assemble the result dictionary\n    result = {\"schedule\": schedule}\n    \n    # Output the result as JSON-formatted dictionary\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_42",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:31AM",
                    "duration": 12,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time in H:MMAM/PM with no leading zero on hour.\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters and constraints\n    start_location = \"Marina District\"\n    friend_location = \"Chinatown\"\n    arrival_time_str = \"9:00AM\"\n    friend_available_start_str = \"9:00AM\"  # Friend Sandra available from 9:00AM\n    friend_available_end_str = \"11:45AM\"   # until 11:45AM\n    min_meet_duration = 15  # in minutes\n\n    # Travel durations in minutes\n    travel_marina_to_chinatown = 16\n    travel_chinatown_to_marina = 12\n\n    # Parse the starting time\n    start_dt = datetime.strptime(arrival_time_str, \"%I:%M%p\")\n    \n    # Compute departure from Marina District at start_dt\n    # Travel from Marina District to Chinatown\n    travel_start_dt = start_dt\n    arrival_chinatown_dt = travel_start_dt + timedelta(minutes=travel_marina_to_chinatown)\n    \n    # Friend Sandra is available from friend_available_start_str, so meeting can start at the maximum of arrival time and friend available start time.\n    friend_available_start_dt = datetime.strptime(friend_available_start_str, \"%I:%M%p\")\n    meeting_start_dt = max(arrival_chinatown_dt, friend_available_start_dt)\n    \n    # To meet minimum meeting duration:\n    meeting_end_dt = meeting_start_dt + timedelta(minutes=min_meet_duration)\n    \n    # After meeting, travel back to Marina District\n    travel_back_start_dt = meeting_end_dt\n    arrival_marina_dt = travel_back_start_dt + timedelta(minutes=travel_chinatown_to_marina)\n    \n    # Build the schedule list following the required structure.\n    schedule = []\n    \n    # Step 1: Start at Marina District at arrival time\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_dt)\n    })\n    \n    # Step 2: Travel from Marina District to Chinatown.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_marina_to_chinatown,\n        \"time\": format_time(travel_start_dt),\n        \"to\": friend_location\n    })\n    \n    # If arrival time is before the meeting start time (friend available start), then wait.\n    if arrival_chinatown_dt < meeting_start_dt:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(arrival_chinatown_dt)\n        })\n    \n    # Step 3: Meet Sandra at Chinatown.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meeting_start_dt)\n    })\n    \n    # Step 4: Travel back from Chinatown to Marina District.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_chinatown_to_marina,\n        \"time\": format_time(travel_back_start_dt),\n        \"to\": start_location\n    })\n    \n    # Combine the events into the final output dictionary.\n    result = {\"schedule\": schedule}\n    \n    # Output the result in JSON format\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_43",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 105,
                    "time": "9:13AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime to H:MMAM/PM without a leading zero in hour.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters / constraints\n    start_location = \"Pacific Heights\"\n    meeting_location = \"Fisherman's Wharf\"\n    betty_available_start = datetime.strptime(\"8:45AM\", \"%I:%M%p\")\n    betty_available_end = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    min_meeting_duration = 105  # in minutes\n    travel_PH_to_FW = 13  # minutes\n    travel_FW_to_PH = 12  # minutes  (not used in schedule but given)\n    \n    # You arrive at Pacific Heights at 9:00AM.\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Travel from Pacific Heights to Fisherman's Wharf.\n    travel_start_time = start_time\n    arrival_time_FW = travel_start_time + timedelta(minutes=travel_PH_to_FW)\n    \n    # Determine if waiting is required at Fisherman's Wharf.\n    # Betty is available from 8:45AM, so if we arrive after that we do not need to wait.\n    if arrival_time_FW < betty_available_start:\n        wait_time = betty_available_start\n    else:\n        wait_time = arrival_time_FW  # No waiting needed since arrival is after Betty's available start.\n    \n    # Meeting will start as soon as we are ready (after waiting if necessary)\n    meeting_start_time = wait_time\n    meeting_duration = min_meeting_duration  # meeting duration in minutes\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Build schedule list\n    schedule = []\n    \n    # Step 1: Start at Pacific Heights at start_time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Step 2: Travel from Pacific Heights to Fisherman's Wharf.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_PH_to_FW,\n        \"time\": format_time(travel_start_time),\n        \"to\": meeting_location\n    })\n    \n    # Step 3: Wait at Fisherman's Wharf (if necessary).\n    # Even if wait time is same as arrival, include the step to follow output structure.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": format_time(wait_time)\n    })\n    \n    # Step 4: Meet Betty at Fisherman's Wharf for the required duration.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Output the result as JSON-formatted dictionary.\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_44",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "7:14PM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(total_minutes):\n    # Convert minutes since midnight to \"H:MMAM/PM\" without a leading zero for hour.\n    hour = (total_minutes // 60) % 24\n    minute = total_minutes % 60\n    period = \"AM\" if hour < 12 else \"PM\"\n    # convert hour from 24hr to 12hr format (with 0 -> 12)\n    display_hour = hour\n    if hour == 0:\n        display_hour = 12\n    elif hour > 12:\n        display_hour = hour - 12\n    return f\"{display_hour}:{minute:02d}{period}\"\n\ndef main():\n    # Input parameters:\n    # You arrive at North Beach at 9:00AM.\n    start_location = \"North Beach\"\n    start_time_str = \"9:00AM\"\n    # Emily constraints\n    emily_location = \"Alamo Square\"\n    emily_start_str = \"7:30PM\"\n    emily_end_str = \"9:00PM\"\n    min_meet_duration = 15  # minutes\n    \n    # Travel distances in minutes:\n    travel_NB_to_AS = 16\n    travel_AS_to_NB = 15  # (not used in this schedule)\n    \n    # Convert times (assuming times are on the same day) to minutes since midnight.\n    # Helper dictionary for conversion of AM/PM times.\n    def time_str_to_minutes(time_str):\n        # Parse time string using datetime.strptime with %I:%M%p format.\n        t = datetime.strptime(time_str, \"%I:%M%p\")\n        return t.hour * 60 + t.minute\n\n    start_time_minutes = time_str_to_minutes(start_time_str)\n    emily_start_minutes = time_str_to_minutes(emily_start_str)\n    emily_end_minutes = time_str_to_minutes(emily_end_str)\n    \n    # To meet Emily for minimum duration, we must start meeting no earlier than her arrival.\n    # We want to maximize the meeting by starting at the earliest possible time in her window.\n    # Compute the optimal departure time from North Beach so that you arrive at Alamo Square\n    # exactly at Emily's start time. If travel takes 16 minutes then:\n    departure_time_minutes = emily_start_minutes - travel_NB_to_AS\n    # In the real world, you might leave a little earlier if you want to wait at the destination.\n    # Here, we compute the optimal plan to start the meeting right when Emily is available.\n    \n    # Compute arrival time at Alamo Square by traveling from North Beach.\n    arrival_AS_minutes = departure_time_minutes + travel_NB_to_AS\n\n    # Schedule construction following the required JSON structure.\n    schedule = []\n    \n    # Action 1: Start at North Beach at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": start_time_str\n    })\n    \n    # Action 2: Travel from North Beach to Alamo Square.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": emily_location,\n        \"duration\": travel_NB_to_AS,\n        \"time\": minutes_to_time_str(departure_time_minutes),\n        \"to\": emily_location\n    })\n    \n    # Action 3: Wait at Alamo Square until the meeting starts.\n    # You arrive at arrival_AS_minutes, which is expected to be Emily's available time.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": emily_location,\n        \"time\": minutes_to_time_str(arrival_AS_minutes)\n    })\n    \n    # Action 4: Meet Emily at Alamo Square.\n    # Meeting start time is Emily's available time (7:30PM) and meeting lasts for at least 15 minutes.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": emily_location,\n        \"duration\": min_meet_duration,\n        \"time\": minutes_to_time_str(emily_start_minutes)\n    })\n    \n    # Prepare output dictionary.\n    output = {\"schedule\": schedule}\n    \n    # Output the JSON formatted result.\n    print(json.dumps(output, indent=2))\n    \nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_45",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "4:11PM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "4:11PM",
                    "duration": 19,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "4:30PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 90,
                    "time": "4:30PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (no leading zero for hour)\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\n# Input parameters and constraints\nstart_location = \"Haight-Ashbury\"\nmeeting_location = \"North Beach\"\n\n# Times and durations (all in minutes)\ntravel_time_HA_to_NB = 19  # minutes from Haight-Ashbury to North Beach\ntravel_time_NB_to_HA = 18  # minutes from North Beach to Haight-Ashbury (not used)\nminimum_meet_duration = 90  # minutes meeting Robert\n\n# Schedule constraints:\n# - Arrive at Haight-Ashbury at 9:00AM\n# - Robert is at North Beach from 4:30PM to 9:30PM\n\n# We'll schedule the meeting so that we meet Robert at his available time at North Beach.\n# To respect the minimum meeting duration of 90 minutes, we plan to start the meeting at 4:30PM (earliest time)\n# and meet until 6:00PM.\n# To reach North Beach in time, we need to leave Haight-Ashbury at:\n#   departure_time = meeting_start_time - travel_time_HA_to_NB\n\n# Define base date (the date doesn't really matter, only the time components do)\nbase_date = datetime(1900, 1, 1)\n\n# Define times\nstart_time = base_date.replace(hour=9, minute=0)  # 9:00AM\nrobert_available_start = base_date.replace(hour=16, minute=30)  # 4:30PM in 24-hour time\ndeparture_time = robert_available_start - timedelta(minutes=travel_time_HA_to_NB)  # time to leave Haight-Ashbury\nmeeting_duration = timedelta(minutes=minimum_meet_duration)\nmeeting_end_time = robert_available_start + meeting_duration  # meeting ends at 6:00PM\n\n# Create the schedule steps\nschedule = []\n\n# 1. Start at Haight-Ashbury at 9:00AM\nschedule.append({\n    \"action\": \"start\",\n    \"location\": start_location,\n    \"time\": format_time(start_time)\n})\n\n# 2. Wait at Haight-Ashbury until departure time\nschedule.append({\n    \"action\": \"wait\",\n    \"location\": start_location,\n    \"time\": format_time(departure_time)\n})\n\n# 3. Travel from Haight-Ashbury to North Beach\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": meeting_location,\n    \"duration\": travel_time_HA_to_NB,\n    \"time\": format_time(departure_time),\n    \"to\": meeting_location\n})\n\n# 4. Meet Robert at North Beach for at least 90 minutes starting at 4:30PM\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": meeting_location,\n    \"duration\": minimum_meet_duration,\n    \"time\": format_time(robert_available_start)\n})\n\n# Prepare the final output dictionary\noutput = {\n    \"schedule\": schedule\n}\n\n# Output the result as JSON\nprint(json.dumps(output, indent=2))\n                    \nif __name__ == \"__main__\":\n    pass",
            "count": "meeting_planning_example_46",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:13AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:13AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM with no leading zero for hour.\n    # Using %-I may not work on all platforms so we manually format.\n    hour = dt.hour % 12\n    if hour == 0:\n        hour = 12\n    minute = dt.minute\n    am_pm = \"AM\" if dt.hour < 12 else \"PM\"\n    return f\"{hour}:{minute:02d}{am_pm}\"\n\ndef main():\n    # Input parameters / constraints\n    arrival_str = \"9:00AM\"  # arriving at Richmond District at 9:00AM\n    paul_start_str = \"9:30AM\"\n    paul_end_str = \"11:15AM\"\n    \n    meeting_min_duration = 15  # in minutes\n    \n    # Travel times in minutes:\n    travel_Richmond_to_NobHill = 17  # in minutes\n    travel_NobHill_to_Richmond = 14  # in minutes\n    \n    # For calculation, pick an arbitrary date; the date does not matter.\n    base_date = \"2023-01-01 \"\n    time_format = \"%Y-%m-%d %I:%M%p\"\n    \n    arrival_time = datetime.strptime(base_date + arrival_str, time_format)\n    paul_start_time = datetime.strptime(base_date + paul_start_str, time_format)\n    paul_end_time = datetime.strptime(base_date + paul_end_str, time_format)\n    \n    # Calculate the optimal departure time from Richmond District so that upon arriving at Nob Hill,\n    # the meeting with Paul can start exactly when he is available.\n    departure_time_from_Richmond = paul_start_time - timedelta(minutes=travel_Richmond_to_NobHill)\n    \n    # If departure time is before arrival at Richmond, adjust waiting time.\n    if departure_time_from_Richmond < arrival_time:\n        departure_time_from_Richmond = arrival_time\n    \n    # Travel: scheduled travel from departure_time_from_Richmond to Nob Hill.\n    travel_duration = travel_Richmond_to_NobHill\n    arrival_at_NobHill = departure_time_from_Richmond + timedelta(minutes=travel_duration)\n    \n    # Ensure that we can meet Paul for at least meeting_min_duration.\n    meeting_start_time = max(arrival_at_NobHill, paul_start_time)\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_min_duration)\n    if meeting_end_time > paul_end_time:\n        raise Exception(\"Not enough time to meet Paul for the minimum required duration.\")\n    \n    # Construct the schedule steps\n    schedule = []\n    \n    # Step 1: Start at Richmond District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Richmond District\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Step 2: Wait at Richmond District until departure time (if any waiting is needed)\n    if departure_time_from_Richmond > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Richmond District\",\n            \"time\": format_time(departure_time_from_Richmond)\n        })\n    \n    # Step 3: Travel from Richmond District to Nob Hill, departing at departure_time_from_Richmond\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_duration,\n        \"time\": format_time(departure_time_from_Richmond),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Step 4: (Optional) If arrived early at Nob Hill, wait until Paul's window starts\n    if arrival_at_NobHill < paul_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": format_time(paul_start_time)\n        })\n    \n    # Step 5: Meet Paul at Nob Hill\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Build final resulting JSON dictionary and output it\n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_47",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:21PM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:21PM",
                    "duration": 9,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "9:30PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(minutes):\n    # Convert minutes from midnight to a time string in H:MMAM/PM format.\n    hour = minutes // 60\n    minute = minutes % 60\n    dt = datetime(2020, 1, 1, hour, minute)  # dummy date\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input constraints and parameters (all times in minutes from midnight)\n    # Arrival at Financial District at 9:00AM\n    arrival_financial = 9 * 60  # 9:00AM = 540 minutes\n    \n    # Joseph will be at Union Square from 9:30PM to 10:00PM\n    joseph_start = 21 * 60 + 30   # 9:30PM = 1290 minutes\n    joseph_end = 22 * 60          # 10:00PM = 1320 minutes\n    required_meet_duration = 15   # minutes\n    \n    # Travel time between locations in minutes\n    travel_financial_to_union = 9\n    travel_union_to_financial = 9  # not used in this schedule\n    \n    # To meet Joseph for at least 15 minutes, we need to arrive at Union Square by his start time.\n    # We will plan to travel such that we reach exactly at 9:30PM.\n    # Compute departure time from Financial District:\n    departure_from_financial = joseph_start - travel_financial_to_union  # 1290 - 9 = 1281 minutes (9:21PM)\n    \n    # Meeting start time (at Union Square) is the arrival time after travel.\n    meeting_start = joseph_start  # 9:30PM, i.e., 1290 minutes.\n    meeting_duration = required_meet_duration  # 15 minutes meeting\n    \n    # Build the schedule timeline based on our decisions.\n    schedule = []\n    \n    # Step 1: Start at Financial District at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Financial District\",\n        \"time\": minutes_to_time_str(arrival_financial)\n    })\n    \n    # Step 2: Wait at Financial District until departure time (9:21PM)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Financial District\",\n        \"time\": minutes_to_time_str(departure_from_financial)\n    })\n    \n    # Step 3: Travel from Financial District to Union Square\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_financial_to_union,\n        \"time\": minutes_to_time_str(departure_from_financial),\n        \"to\": \"Union Square\"\n    })\n    \n    # Step 4: Meet Joseph at Union Square for at least 15 minutes starting at 9:30PM\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": meeting_duration,\n        \"time\": minutes_to_time_str(meeting_start)\n    })\n    \n    # Build the JSON dictionary\n    output = {\n        \"schedule\": schedule\n    }\n    \n    # Output result as JSON-formatted dictionary\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_48",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:49PM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "1:49PM",
                    "duration": 26,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "2:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime to H:MMAM/PM without a leading zero\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters and constraints\n    # You are at Richmond District starting at 9:00AM.\n    # Sarah is available at Bayview from 2:15PM to 5:30PM.\n    # You need a minimum meeting duration of 45 minutes.\n    # Travel times: Richmond District -> Bayview: 26 minutes, Bayview -> Richmond District: 25 minutes.\n    \n    # Use an arbitrary date (e.g., Jan 1, 2023) for time calculations.\n    base_date = datetime(2023, 1, 1)\n    \n    # Define times for the schedule.\n    start_time = base_date.replace(hour=9, minute=0)\n    sarah_start = base_date.replace(hour=14, minute=15)  # 2:15PM\n    sarah_end = base_date.replace(hour=17, minute=30)    # 5:30PM\n    \n    # Travel durations (in minutes)\n    travel_RD_to_BV = 26\n    travel_BV_to_RD = 25  # not used in the optimal schedule since return isn't required\n    \n    # Minimum meeting duration in minutes\n    min_meeting_duration = 45\n    \n    # Calculate the departure time from Richmond District so that you arrive at Bayview by Sarah's starting time.\n    # Arrival at Bayview should be exactly at Sarah's start time.\n    travel_departure = sarah_start - timedelta(minutes=travel_RD_to_BV)\n    \n    # Meeting starts when Sarah is available (at Bayview)\n    meeting_start = sarah_start\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    # Ensure that the meeting does not go past Sarah's available time.\n    if meeting_end > sarah_end:\n        meeting_end = sarah_end\n        meeting_duration = int((meeting_end - meeting_start).total_seconds() / 60)\n    else:\n        meeting_duration = min_meeting_duration\n    \n    # Build the schedule as a list of actions.\n    schedule = []\n    \n    # Start at Richmond District at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Richmond District\",\n        \"time\": format_time(start_time)\n    })\n    \n    # Wait at Richmond District until it's time to travel.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Richmond District\",\n        \"time\": format_time(travel_departure)\n    })\n    \n    # Travel from Richmond District to Bayview. Depart at travel_departure.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_RD_to_BV,\n        \"time\": format_time(travel_departure),\n        \"to\": \"Bayview\"\n    })\n    \n    # Meet Sarah at Bayview starting at 2:15PM for the required duration.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Create the final JSON output.\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_49",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime as H:MMAM/PM without a leading zero in the hour\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters\n    # Locations:\n    start_location = \"North Beach\"\n    meeting_location = \"Nob Hill\"\n    \n    # Times and travel durations (in minutes)\n    # Start time at North Beach\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    # Melissa availability at Nob Hill: from 9:30AM to 8:30PM\n    melissa_available_start = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    melissa_available_end = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    # Required meeting duration in minutes\n    required_meeting_duration = 75\n    \n    # Travel times (in minutes)\n    travel_NB_to_NH = 7  # North Beach to Nob Hill\n    # For completeness, if travel back is needed, travel_NH_to_NB = 8 (not used in this schedule)\n    \n    # Compute schedule:\n    schedule = []\n    \n    # 1. Start at North Beach at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # 2. Travel from North Beach to Nob Hill\n    travel_departure_time = start_time\n    travel_duration = travel_NB_to_NH\n    arrival_time = travel_departure_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_departure_time),\n        \"to\": meeting_location\n    })\n    \n    # 3. Wait at Nob Hill until Melissa is available (if arrival is before 9:30AM)\n    # If arrival_time is before Melissa's availability start then wait.\n    if arrival_time < melissa_available_start:\n        wait_time = arrival_time  # wait starts upon arrival\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(wait_time)\n        })\n        meeting_start_time = melissa_available_start\n    else:\n        meeting_start_time = arrival_time\n    \n    # 4. Meet Melissa for at least 75 minutes within her available window\n    # Ensure that the meeting can finish before her availability ends.\n    meeting_end_time = meeting_start_time + timedelta(minutes=required_meeting_duration)\n    if meeting_end_time > melissa_available_end:\n        # if meeting can't be scheduled within her available time, adjust to her available end time.\n        # In this scenario, it is assumed that the meeting must start within her available window.\n        meeting_end_time = melissa_available_end\n        required_meeting_duration = int((meeting_end_time - meeting_start_time).total_seconds() // 60)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": required_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Prepare final output\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_50",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "9:22AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 15,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM without a leading zero for hour.\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters\n    # Travel times in minutes\n    travel_castro_to_emb = 22\n    travel_emb_to_castro = 25  # provided but not needed in this schedule\n    \n    # Meeting constraints and times\n    start_location = \"The Castro\"\n    meeting_location = \"Embarcadero\"\n    arrival_time_str = \"9:00AM\"\n    # Parse start time (today's date is irrelevant, we only use times)\n    start_time = datetime.strptime(arrival_time_str, \"%I:%M%p\")\n    \n    laura_available_start = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\n    laura_available_end = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    min_meeting_duration = 15  # in minutes\n    \n    # Compute travel to Embarcadero from The Castro\n    travel_start_time = start_time  # leave immediately at 9:00AM\n    arrival_emb_time = travel_start_time + timedelta(minutes=travel_castro_to_emb)\n    \n    # Ensure that arrival is within Laura's availability.\n    # If arrival is before Laura is available, we wait until she is available.\n    if arrival_emb_time < laura_available_start:\n        wait_time = laura_available_start - arrival_emb_time\n        meeting_start_time = laura_available_start\n    else:\n        meeting_start_time = arrival_emb_time\n\n    # Meeting should last at least the minimum duration\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n    \n    # Check if meeting end time is within Laura's available window.\n    if meeting_end_time > laura_available_end:\n        raise ValueError(\"Cannot schedule a meeting of the required duration within Laura's availability.\")\n    \n    # Prepare schedule events following the required JSON structure.\n    schedule = []\n    \n    # Start event at The Castro at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Travel event: from The Castro to Embarcadero.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_castro_to_emb,\n        \"time\": format_time(travel_start_time),\n        \"to\": meeting_location\n    })\n    \n    # Wait event at Embarcadero if there's any waiting (if arrival time < meeting start).\n    # In our computed schedule, meeting starts at arrival_emb_time.\n    # But if we had to wait, we record the wait event at the time meeting is ready to start.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Meeting event: meeting Laura for the minimum required duration.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Output the schedule as a JSON-formatted dictionary.\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n    \nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_51",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:01PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "1:01PM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(total_minutes):\n    # total_minutes: minutes since midnight\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    period = \"AM\" if hours < 12 else \"PM\"\n    display_hour = hours if 1 <= hours <= 12 else (hours - 12 if hours > 12 else 12)\n    return f\"{display_hour}:{minutes:02d}{period}\"\n\ndef main():\n    # Input parameters (all times in minutes from midnight)\n    arrival_time = 9 * 60  # 9:00AM at Russian Hill\n    # Barbara's available meeting window at Richmond District\n    barbara_start = 13 * 60 + 15  # 1:15PM\n    barbara_end = 18 * 60 + 15    # 6:15PM\n    meeting_min_duration = 45    # 45 minutes minimum meeting duration\n    \n    # Travel times (in minutes)\n    travel_RH_to_RD = 14         # Russian Hill to Richmond District\n    travel_RD_to_RH = 13         # Richmond District to Russian Hill (not used in this schedule)\n    \n    # Compute the optimal schedule:\n    # We want to meet Barbara at the beginning of her window. So,\n    # we need to depart Russian Hill so that we arrive at Richmond District exactly at Barbara's start time.\n    # departure_time + travel_RH_to_RD = barbara_start  => departure_time = barbara_start - travel_RH_to_RD\n    departure_time = barbara_start - travel_RH_to_RD  # in minutes\n    # Arrival at Richmond District to meet Barbara:\n    meeting_start_time = departure_time + travel_RH_to_RD\n    # Meeting will last at least the minimum duration:\n    meeting_duration = meeting_min_duration\n    meeting_end_time = meeting_start_time + meeting_duration\n\n    # Construct the schedule. We include:\n    # 1. Start at Russian Hill when arriving at 9:00AM.\n    # 2. Wait at Russian Hill until departure time.\n    # 3. Travel from Russian Hill to Richmond District.\n    # 4. Meet Barbara for the required duration.\n    \n    schedule = []\n    \n    # Step 1: Start at Russian Hill at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Russian Hill\",\n        \"time\": minutes_to_time_str(arrival_time)\n    })\n    \n    # Step 2: Wait at Russian Hill until departure time (unless already departure time)\n    # We only add this step if there is waiting time.\n    if departure_time > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": minutes_to_time_str(departure_time)\n        })\n    \n    # Step 3: Travel from Russian Hill to Richmond District.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_RH_to_RD,\n        \"time\": minutes_to_time_str(departure_time),\n        \"to\": \"Richmond District\"\n    })\n    \n    # Step 4: Meet Barbara at Richmond District.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": minutes_to_time_str(meeting_start_time)\n    })\n    \n    # Output the schedule as a JSON-formatted dictionary\n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n    \nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_52",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "10:02AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "10:02AM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "10:15AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 120,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime object to H:MMAM/PM with no leading zero in hour if possible.\n    # Example: 9:00AM, 10:02AM, 10:15AM, etc.\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, \"strftime\") else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef add_minutes(base_time, minutes):\n    return base_time + timedelta(minutes=minutes)\n\ndef main():\n    # Input parameters and constraints\n    # Starting location and time\n    start_location = \"Richmond District\"\n    start_time_str = \"9:00AM\"\n    # Parse start time into datetime object (using an arbitrary date, e.g., Jan 1, 2000)\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\")\n    \n    # Ashley meeting details at Alamo Square\n    ashley_location = \"Alamo Square\"\n    ashley_available_start_str = \"10:15AM\"\n    ashley_available_end_str = \"1:00PM\"\n    ashley_available_start = datetime.strptime(ashley_available_start_str, \"%I:%M%p\")\n    ashley_available_end = datetime.strptime(ashley_available_end_str, \"%I:%M%p\")\n    min_meeting_duration = 120  # in minutes\n\n    # Travel times (in minutes)\n    travel_time_Richmond_to_Alamo = 13\n    # travel_time_Alamo_to_Richmond = 12   # Not used in our schedule since we only travel one way for meeting\n\n    # To meet Ashley for a minimum of 120 minutes during her available time window,\n    # we need to arrive at Alamo Square no later than:\n    # latest_meeting_start = Ashley_available_end - min_meeting_duration\n    latest_meeting_start = ashley_available_end - timedelta(minutes=min_meeting_duration)\n    # For optimal plan, we choose the earliest possible meeting start within the window,\n    # which is Ashley's available start time (10:15AM) if that permits the minimum meeting duration.\n    # Check if meeting starting at 10:15AM fits:\n    if ashley_available_start <= latest_meeting_start:\n        meeting_start = ashley_available_start\n    else:\n        meeting_start = latest_meeting_start\n\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n\n    # Calculate departure time from Richmond District\n    departure_time = meeting_start - timedelta(minutes=travel_time_Richmond_to_Alamo)\n\n    # Build schedule\n    schedule = []\n\n    # 1. Start at Richmond District at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n\n    # 2. Wait at Richmond District until departure time (if there is waiting)\n    if departure_time > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(departure_time)\n        })\n\n    # 3. Travel from Richmond District to Alamo Square\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": ashley_location,\n        \"duration\": travel_time_Richmond_to_Alamo,\n        \"time\": format_time(departure_time),\n        \"to\": ashley_location\n    })\n\n    # 4. Meet Ashley at Alamo Square for a minimum of 120 minutes, starting at meeting_start time.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": ashley_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n\n    # Prepare final output as JSON-formatted dictionary\n    output = {\n        \"schedule\": schedule\n    }\n\n    # Print JSON output\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_53",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:58PM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "12:58PM",
                    "duration": 17,
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    \"\"\"Format datetime to H:MMAM/PM with no leading zero on hour.\"\"\"\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters\n    # Locations\n    financial_district = \"Financial District\"\n    mission_district = \"Mission District\"\n    \n    # Travel times (in minutes)\n    travel_fd_to_mission = 17  # Financial District to Mission District\n    \n    # Constraint times (using an arbitrary common date, e.g., Jan 1, 2000)\n    date_base = datetime(2000, 1, 1)\n    arrival_time_fd = date_base.replace(hour=9, minute=0)  # 9:00AM arrival at Financial District\n    william_meet_start = date_base.replace(hour=13, minute=15)  # 1:15PM start at Mission District\n    william_meet_end = date_base.replace(hour=14, minute=15)    # 2:15PM end at Mission District\n    required_meeting_duration = timedelta(minutes=45)\n    \n    # Compute optimal departure time from Financial District:\n    # To arrive at Mission District at william_meet_start, you need to leave 17 minutes earlier.\n    departure_time_fd = william_meet_start - timedelta(minutes=travel_fd_to_mission)\n    # Ensure that waiting time is used at Financial District until time to depart.\n    \n    # Compute meeting schedule:\n    # Travel event:\n    travel_duration = travel_fd_to_mission  # in minutes\n    # Meeting: we schedule a 45 minute meeting starting when arriving.\n    meeting_start_time = william_meet_start\n    meeting_duration = required_meeting_duration  # 45 minutes\n    meeting_end_time = meeting_start_time + meeting_duration\n    # We must also check that meeting_end_time does not exceed william_meet_end.\n    if meeting_end_time > william_meet_end:\n        # Adjust meeting duration if necessary (although our computed meeting of 45 min is safe)\n        meeting_duration = william_meet_end - meeting_start_time\n        meeting_end_time = william_meet_end\n\n    # Build schedule as list of events.\n    schedule = []\n    \n    # Start event at Financial District when arriving.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": financial_district,\n        \"time\": format_time(arrival_time_fd)\n    })\n    \n    # Wait event at Financial District until departure time.\n    # We only add a wait if there is actual waiting time.\n    if departure_time_fd > arrival_time_fd:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": financial_district,\n            \"time\": format_time(departure_time_fd)\n        })\n    \n    # Travel event from Financial District to Mission District.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": financial_district,\n        \"duration\": travel_duration,\n        \"time\": format_time(departure_time_fd),\n        \"to\": mission_district\n    })\n    \n    # Meet event at Mission District with William.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": mission_district,\n        \"duration\": meeting_duration.seconds // 60,  # convert timedelta to minutes\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Prepare output dictionary.\n    output = {\n        \"schedule\": schedule\n    }\n    \n    # Output the result as a JSON-formatted dictionary.\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_54",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "11:22AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "11:22AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    \"\"\"Formats a datetime object as 'H:MMAM/PM' with no leading zero for hour.\"\"\"\n    # Extract hour without leading zero\n    hour = dt.strftime(\"%I\").lstrip(\"0\")\n    minute = dt.strftime(\"%M\")\n    am_pm = dt.strftime(\"%p\")\n    return f\"{hour}:{minute}{am_pm}\"\n\ndef main():\n    # Input parameters and constraints\n    start_location = \"Financial District\"\n    meeting_location = \"Nob Hill\"\n    \n    # Arrival time at Financial District: 9:00AM today (using an arbitrary date)\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Helen's availability: at Nob Hill from 11:30AM to 12:15PM\n    helen_available_start = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    helen_available_end   = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\n    \n    # Minimum meeting duration with Helen is 45 minutes.\n    required_meeting_duration = timedelta(minutes=45)\n    \n    # Travel times (in minutes)\n    travel_fd_to_nh = timedelta(minutes=8)\n    travel_nh_to_fd = timedelta(minutes=9)\n    \n    # Compute meeting schedule:\n    # To meet Helen for at least 45 minutes, the meeting at Nob Hill must start no later than 11:30AM \n    # and last until 12:15PM (which is exactly 45 minutes).\n    \n    # We plan to meet at Helen's available start time, 11:30AM.\n    meeting_start = helen_available_start\n    meeting_end = meeting_start + required_meeting_duration\n    \n    # Check if meeting_end exceeds Helen's available window\n    if meeting_end > helen_available_end:\n        raise ValueError(\"Not enough time in Helen's availability window to schedule the required meeting.\")\n    \n    # Compute departure time from Financial District:\n    # You need to leave Financial District in time to arrive at Nob Hill by meeting_start.\n    departure_time = meeting_start - travel_fd_to_nh\n    \n    # Create schedule records:\n    schedule = []\n    \n    # Start event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Wait event at Financial District until departure time (if any waiting is needed)\n    if start_time < departure_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(departure_time)\n        })\n    \n    # Travel event from Financial District to Nob Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": int(travel_fd_to_nh.total_seconds() // 60),\n        \"time\": format_time(departure_time),\n        \"to\": meeting_location\n    })\n    \n    # Meet event at Nob Hill\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": int(required_meeting_duration.total_seconds() // 60),\n        \"time\": format_time(meeting_start)\n    })\n    \n    # For completeness, you could add an optional travel back if desired.\n    # Uncomment the following lines if a return travel is required:\n    # return_departure = meeting_end\n    # schedule.append({\n    #     \"action\": \"travel\",\n    #     \"location\": meeting_location,\n    #     \"duration\": int(travel_nh_to_fd.total_seconds() // 60),\n    #     \"time\": format_time(return_departure),\n    #     \"to\": start_location\n    # })\n    \n    # Output the schedule as a JSON-formatted dictionary.\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_55",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "10:07AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:15AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\n# Helper function to format time in \"H:MMAM/PM\" format (no leading zero for hour)\ndef format_time(dt):\n    # Use strftime and then remove any leading zero from the hour\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted.startswith(\"0\"):\n        formatted = formatted[1:]\n    return formatted\n\ndef main():\n    # Input parameters (all times on an arbitrary same day)\n    # Starting at Chinatown at 9:00AM\n    base_date = datetime(2023, 1, 1)  # arbitrary date\n    arrival_chinatown = base_date.replace(hour=9, minute=0)\n    \n    # Joshua will be at Nob Hill from 10:15AM to 1:00PM and meeting duration min 45 minutes.\n    joshua_start = base_date.replace(hour=10, minute=15)\n    joshua_end = base_date.replace(hour=13, minute=0)\n    min_meet_duration = 45  # in minutes\n    \n    # Travel durations (in minutes)\n    travel_chinatown_to_nobhill = 8\n    travel_nobhill_to_chinatown = 6\n    \n    # Compute the optimal meeting schedule.\n    # To meet Joshua for at least 45 minutes, we need to arrive at Nob Hill by 10:15AM.\n    # We calculate departure time from Chinatown so that we arrive exactly at 10:15AM.\n    departure_from_chinatown = joshua_start - timedelta(minutes=travel_chinatown_to_nobhill)\n    arrival_nobhill = departure_from_chinatown + timedelta(minutes=travel_chinatown_to_nobhill)\n    \n    # Build the schedule.\n    # According to the desired output format, we include:\n    # start, travel, wait, and meet actions.\n    schedule = []\n    \n    # 1. Start at Chinatown at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Chinatown\",\n        \"time\": format_time(arrival_chinatown)\n    })\n    \n    # 2. Travel from Chinatown to Nob Hill.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_chinatown_to_nobhill,\n        \"time\": format_time(departure_from_chinatown),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # 3. Wait at Nob Hill. (Arriving at Nob Hill exactly when Joshua is available, so wait time is effectively 0.)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Nob Hill\",\n        \"time\": format_time(arrival_nobhill)\n    })\n    \n    # 4. Meet Joshua at Nob Hill for at least 45 minutes.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": min_meet_duration,\n        \"time\": format_time(arrival_nobhill)\n    })\n    \n    # Create output dictionary.\n    output = {\"schedule\": schedule}\n    \n    # Print JSON-formatted output.\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_56",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "10:07AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "10:07AM",
                    "duration": 23,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "10:30AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "11:30AM",
                    "duration": 22,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time in H:MMAM/PM without leading zero in hour\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef add_minutes(time_obj, mins):\n    return time_obj + timedelta(minutes=mins)\n\ndef main():\n    # Input parameters / Constraints\n    # Travel times (in minutes)\n    travel_bayview_to_sunset = 23\n    travel_sunset_to_bayview = 22\n\n    # Meeting constraints\n    start_location = \"Bayview\"\n    meeting_location = \"Sunset District\"\n    arrival_time_bayview = \"9:00AM\"  # when you arrive at Bayview\n    jessica_available_start_str = \"10:30AM\"\n    jessica_available_end_str = \"5:45PM\"\n    min_meeting_duration = 60  # in minutes\n\n    # Convert the string times to datetime objects (dummy date used)\n    base_date = datetime(1900, 1, 1)\n    fmt = \"%I:%M%p\"\n    bayview_arrival_dt = datetime.strptime(arrival_time_bayview, fmt)\n    jessica_start_dt = datetime.strptime(jessica_available_start_str, fmt)\n    jessica_end_dt = datetime.strptime(jessica_available_end_str, fmt)\n\n    # Calculate departure time from Bayview:\n    # To arrive at Jessica's start time exactly, we must depart (travel time minutes earlier).\n    departure_from_bayview_dt = jessica_start_dt - timedelta(minutes=travel_bayview_to_sunset)\n    \n    # Calculate meeting start time (at Jessica's location)\n    meeting_start_dt = jessica_start_dt\n    meeting_end_dt = meeting_start_dt + timedelta(minutes=min_meeting_duration)\n\n    # Calculate return travel: depart immediately after meeting ends\n    departure_from_sunset_dt = meeting_end_dt\n    return_arrival_dt = departure_from_sunset_dt + timedelta(minutes=travel_sunset_to_bayview)\n\n    # Build the schedule events list\n    # Event 1: Start at Bayview at arrival time\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(bayview_arrival_dt)\n    })\n    \n    # Event 2: Wait at Bayview until departure time (if there is any waiting time)\n    if departure_from_bayview_dt > bayview_arrival_dt:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(departure_from_bayview_dt)\n        })\n    \n    # Event 3: Travel from Bayview to Sunset District\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_bayview_to_sunset,\n        \"time\": format_time(departure_from_bayview_dt),\n        \"to\": meeting_location\n    })\n    \n    # Event 4: Meet Jessica at Sunset District\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start_dt)\n    })\n    \n    # Event 5: Travel from Sunset District back to Bayview after meeting\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_sunset_to_bayview,\n        \"time\": format_time(departure_from_sunset_dt),\n        \"to\": start_location\n    })\n    \n    # Create output dictionary\n    output = {\n        \"schedule\": schedule\n    }\n    \n    # Print JSON-formatted output\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_57",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 20,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "9:20AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:50AM",
                    "duration": 23,
                    "to": "The Castro"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 30,
                    "time": "9:20AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    \"\"\"\n    Format a datetime object to H:MMAM/PM format (without leading zero in hour).\n    \"\"\"\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%#I:%M%p\")\n\ndef main():\n    # Input parameters\n    # Locations and travel times in minutes\n    travel_time_castro_to_fd = 20\n    travel_time_fd_to_castro = 23\n\n    # Meeting constraints and constraints for Nancy\n    castro_start_time_str = \"9:00AM\"\n    nancy_available_start_str = \"9:15AM\"\n    nancy_available_end_str = \"4:45PM\"\n    min_meeting_duration = 30  # minutes\n    \n    # Convert the string times to datetime objects (using an arbitrary date, e.g., today)\n    time_format = \"%I:%M%p\"  # e.g., 9:00AM format (leading zero might be optional)\n    base_date = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)\n    \n    castro_start_time = datetime.strptime(castro_start_time_str, time_format).replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    nancy_available_start = datetime.strptime(nancy_available_start_str, time_format).replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    nancy_available_end = datetime.strptime(nancy_available_end_str, time_format).replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    \n    schedule = []\n\n    # 1. Start at The Castro at arrival time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"The Castro\",\n        \"time\": format_time(castro_start_time)\n    })\n    \n    # 2. Travel from The Castro to Financial District.\n    # We depart immediately at 9:00AM.\n    travel_departure_time = castro_start_time\n    arrival_fd_time = travel_departure_time + timedelta(minutes=travel_time_castro_to_fd)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time_castro_to_fd,\n        \"time\": format_time(travel_departure_time),\n        \"to\": \"Financial District\"\n    })\n    \n    # 3. Once arrived, if we arrived before Nancy's available start time, wait until then.\n    meeting_start_time = arrival_fd_time\n    if meeting_start_time < nancy_available_start:\n        # need to wait until Nancy becomes available\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Financial District\",\n            \"time\": format_time(meeting_start_time)\n        })\n        meeting_start_time = nancy_available_start\n\n    # Ensure that starting meeting at meeting_start_time plus minimum meeting duration ends before Nancy leaves.\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end_time > nancy_available_end:\n        # Adjust meeting duration if necessary (in a realistic scenario, we cannot meet)\n        min_meeting_duration = int((nancy_available_end - meeting_start_time).total_seconds() / 60)\n        meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # 4. After meeting, travel back to The Castro.\n    travel_departure_from_fd = meeting_end_time\n    arrival_castro_time = travel_departure_from_fd + timedelta(minutes=travel_time_fd_to_castro)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time_fd_to_castro,\n        \"time\": format_time(travel_departure_from_fd),\n        \"to\": \"The Castro\"\n    })\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n    \nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_58",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 105,
                    "time": "9:19AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM without a leading zero for the hour\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\n# Input parameters\nbayview_location = \"Bayview\"\nhaight_location = \"Haight-Ashbury\"\narrival_time_str = \"9:00AM\"  # arrival time at Bayview\nrichard_start_str = \"7:00AM\"\nrichard_end_str = \"3:45PM\"\nmin_meet_duration = 105  # in minutes\n\n# Travel durations in minutes\ntravel_bayview_to_haight = 19\ntravel_haight_to_bayview = 18\n\n# Convert arrival time to a datetime object (using arbitrary date)\ntime_format = \"%I:%M%p\"\nstart_time = datetime.strptime(arrival_time_str, time_format)\n\n# Compute departure travel event from Bayview to Haight-Ashbury.\n# The travel starts at Bayview at 9:00AM.\ntravel_start_time = start_time\narrival_at_haight = travel_start_time + timedelta(minutes=travel_bayview_to_haight)\n\n# Since Richard is available from 7:00AM, there's no waiting needed if arriving after that.\n# However, we include a wait event to show alignment of arrival time before the meeting starts.\nwait_time = arrival_at_haight\n\n# Meeting with Richard at Haight-Ashbury\nmeet_start_time = wait_time\n# Ensure meeting duration meets the minimum requirement (105 minutes)\nmeet_duration = min_meet_duration\nmeet_end_time = meet_start_time + timedelta(minutes=meet_duration)\n\n# Build the schedule as a list of events.\nschedule = [\n    {\n        \"action\": \"start\",\n        \"location\": bayview_location,\n        \"time\": format_time(start_time)\n    },\n    {\n        \"action\": \"travel\",\n        \"location\": haight_location,\n        \"duration\": travel_bayview_to_haight,\n        \"time\": format_time(travel_start_time),\n        \"to\": haight_location\n    },\n    {\n        \"action\": \"wait\",\n        \"location\": haight_location,\n        \"time\": format_time(wait_time)\n    },\n    {\n        \"action\": \"meet\",\n        \"location\": haight_location,\n        \"duration\": meet_duration,\n        \"time\": format_time(meet_start_time)\n    }\n]\n\n# Create the final schedule dictionary\nresult = {\n    \"schedule\": schedule\n}\n\n# Output the result as a JSON-formatted dictionary\nprint(json.dumps(result, indent=2))\n                        \nif __name__ == \"__main__\":\n    pass",
            "count": "meeting_planning_example_59",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "6:23PM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "6:23PM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:30PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 45,
                    "time": "6:30PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (e.g., '9:00AM') without a leading zero for hour.\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == '0':\n        time_str = time_str[1:]\n    return time_str\n\ndef compute_schedule():\n    # Input parameters as provided\n    # Arrival: You arrive at Union Square at 9:00AM.\n    arrival_time = datetime(2023, 1, 1, 9, 0)\n    \n    # Carol will be at Chinatown from 6:30PM to 8:00PM.\n    carol_start = datetime(2023, 1, 1, 18, 30)\n    carol_end   = datetime(2023, 1, 1, 20, 0)\n    # Minimum meeting duration with Carol is 45 minutes.\n    meeting_duration = 45  # in minutes\n    \n    # Travel distances (in minutes)\n    travel_time_minutes = 7  # from Union Square to Chinatown\n    \n    # Optimal schedule idea:\n    # To meet Carol for at least 45 minutes when she first arrives at 6:30PM,\n    # plan the travel such that you arrive in Chinatown at 6:30PM.\n    # Therefore, you will depart from Union Square at (6:30PM - 7 minutes) = 6:23PM.\n    departure_time = carol_start - timedelta(minutes=travel_time_minutes)\n    \n    # Build the schedule.\n    # The schedule structure is:\n    # 1. \"start\" at Union Square at 9:00AM.\n    # 2. \"wait\" at Union Square until departure time (6:23PM).\n    # 3. \"travel\" from Union Square to Chinatown, departing at 6:23PM taking 7 minutes.\n    # 4. \"meet\" Carol at Chinatown starting at 6:30PM for 45 minutes.\n    schedule = {\n        \"schedule\": [\n            {\n                \"action\": \"start\",\n                \"location\": \"Union Square\",\n                \"time\": format_time(arrival_time)\n            },\n            {\n                \"action\": \"wait\",\n                \"location\": \"Union Square\",\n                \"time\": format_time(departure_time)\n            },\n            {\n                \"action\": \"travel\",\n                \"location\": \"Union Square\",\n                \"duration\": travel_time_minutes,\n                \"time\": format_time(departure_time),\n                \"to\": \"Chinatown\"\n            },\n            {\n                \"action\": \"meet\",\n                \"location\": \"Chinatown\",\n                \"duration\": meeting_duration,\n                \"time\": format_time(carol_start)\n            }\n        ]\n    }\n    return schedule\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))",
            "count": "meeting_planning_example_60",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "7:04PM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "7:04PM",
                    "duration": 11,
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "7:15PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "8:45PM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:57PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 90,
                    "time": "7:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format a datetime object to H:MMAM/PM without a leading zero for hour.\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0] == \"0\":\n        formatted = formatted[1:]\n    return formatted\n\ndef main():\n    # Input parameters and constraints\n    # Arrival at Golden Gate Park at 9:00AM.\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Stephanie is at Presidio from 7:15PM to 10:00PM.\n    stephanie_available_start = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    stephanie_available_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    \n    # Travel times in minutes:\n    travel_ggp_to_presidio = 11   # minutes\n    travel_presidio_to_ggp = 12   # minutes\n    \n    # Meeting constraint: Meet Stephanie for a minimum of 90 minutes.\n    meeting_duration = 90  # minutes\n    \n    # To maximize the meeting with Stephanie, we want to arrive exactly at her available start time.\n    # Thus, we must leave Golden Gate Park at:\n    departure_time = stephanie_available_start - timedelta(minutes=travel_ggp_to_presidio)\n    \n    # Check that departure_time is later than start time\n    if departure_time < start_time:\n        raise ValueError(\"Departure time is before the arrival time.\")\n    \n    # At Presidio the meeting starts at 7:15PM and lasts for meeting_duration (90 minutes)\n    meeting_start = stephanie_available_start\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    \n    # Verify that meeting ends before Stephanie's available window closes.\n    if meeting_end > stephanie_available_end:\n        raise ValueError(\"Cannot meet Stephanie for the required duration within her available time.\")\n    \n    # After meeting, travel back to Golden Gate Park.\n    travel_back_start = meeting_end\n    arrival_back = travel_back_start + timedelta(minutes=travel_presidio_to_ggp)\n    \n    # Constructing the schedule\n    schedule = []\n    # Start at Golden Gate Park at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": format_time(start_time)\n    })\n    \n    # Wait at Golden Gate Park until departure for Presidio.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": format_time(departure_time)\n    })\n    \n    # Travel from Golden Gate Park to Presidio.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_ggp_to_presidio,\n        \"time\": format_time(departure_time),\n        \"to\": \"Presidio\"\n    })\n    \n    # Meet Stephanie at Presidio.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Travel from Presidio back to Golden Gate Park after meeting.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_presidio_to_ggp,\n        \"time\": format_time(meeting_end),\n        \"to\": \"Golden Gate Park\"\n    })\n    \n    # Final wait at Golden Gate Park after returning.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": format_time(arrival_back)\n    })\n    \n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_61",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:16AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "11:16AM",
                    "duration": 14,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport datetime\nimport json\n\ndef format_time(dt):\n    # Format a datetime object as H:MMAM/PM without a leading zero.\n    # For portability, use strftime then lstrip leading zero.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters and constraints\n    # You arrive at Presidio at 9:00AM.\n    start_location = \"Presidio\"\n    meeting_location = \"Russian Hill\"\n    arrival_time_str = \"9:00AM\"\n    # Travel times in minutes\n    travel_presidio_to_rh = 14\n    # Amanda's meeting availability\n    amanda_available_from_str = \"11:30AM\"  # available from 11:30AM\n    amanda_available_to_str = \"9:15PM\"\n    min_meet_duration = 15  # in minutes\n\n    # Define a base date (arbitrary) to use for datetime arithmetic.\n    base_date = datetime.date(2000, 1, 1)\n\n    # Parse times into datetime objects using strptime.\n    start_time = datetime.datetime.strptime(arrival_time_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    amanda_from = datetime.datetime.strptime(amanda_available_from_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    # If Amanda's available to time is before her start time in terms of clock then it means PM\n    amanda_to = datetime.datetime.strptime(amanda_available_to_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    # In case the PM time parsed falls on the next day (not in this case) we assume same day.\n\n    # Optimal scheduling idea:\n    # We want to meet Amanda at Russian Hill for at least 15 minutes.\n    # To minimize idle waiting, we plan to depart from Presidio so that we arrive at Russian Hill exactly when Amanda becomes available.\n    # Compute departure time from Presidio:\n    departure_time = amanda_from - datetime.timedelta(minutes=travel_presidio_to_rh)\n    # However, if departure_time is before our arrival at Presidio (9:00AM), we must not depart before starting.\n    if departure_time < start_time:\n        departure_time = start_time\n\n    # Arrival time at Russian Hill after travel.\n    arrival_at_rh = departure_time + datetime.timedelta(minutes=travel_presidio_to_rh)\n\n    # Our meeting start time must be the later of Amanda's available from or our arrival.\n    meeting_start = max(arrival_at_rh, amanda_from)\n    meeting_end = meeting_start + datetime.timedelta(minutes=min_meet_duration)\n\n    # Build the schedule:\n    schedule = []\n\n    # 1. Start event at Presidio at arrival time (9:00AM)\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n\n    # 2. Wait event at Presidio until departure (if there is waiting)\n    # Only add a wait event if we are not departing immediately\n    if departure_time > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(departure_time)\n        })\n\n    # 3. Travel event from Presidio to Russian Hill.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_presidio_to_rh,\n        \"time\": format_time(departure_time),\n        \"to\": meeting_location\n    })\n\n    # 4. Meet event at Russian Hill with Amanda.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meeting_start)\n    })\n\n    # Create the final JSON output.\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_62",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 31,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "9:31AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 31,
                    "time": "9:31AM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "9:31AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(total_minutes):\n    # Given minutes from midnight, return string in H:MMAM/PM format\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    period = \"AM\" if hours < 12 or hours == 24 else \"PM\"\n    if hours == 0:\n        disp_hour = 12\n    elif hours > 12:\n        disp_hour = hours - 12\n    else:\n        disp_hour = hours\n    # Format minutes with no leading zero for hour but always two digits for minutes\n    return f\"{disp_hour}:{minutes:02d}{period}\"\n\ndef add_minutes(time_minutes, minutes_to_add):\n    return time_minutes + minutes_to_add\n\ndef main():\n    # Input parameters (in minutes)\n    # Travel distances in minutes:\n    travel_presidio_to_bayview = 31\n    travel_bayview_to_presidio = 31  # not used in current schedule\n    # Meeting constraints and times (in minutes from midnight)\n    # You arrive at Presidio at 9:00AM\n    start_time = 9 * 60  # 9:00AM => 540 minutes\n    # Nancy is at Bayview from 7:15AM to 5:30PM (expressed in minutes since midnight)\n    nancy_start = 7 * 60 + 15    # 7:15AM\n    nancy_end   = 17 * 60 + 30   # 5:30PM\n    meeting_min_duration = 30   # meeting duration: at least 30 minutes\n    \n    # Plan: start at Presidio, travel to Bayview, meet Nancy for the required duration.\n    # Start at Presidio at 9:00AM\n    start_action = {\n        \"action\": \"start\",\n        \"location\": \"Presidio\",\n        \"time\": minutes_to_time_str(start_time)\n    }\n    \n    # Travel from Presidio to Bayview immediately after start time\n    travel_action = {\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_presidio_to_bayview,\n        \"time\": minutes_to_time_str(start_time),\n        \"to\": \"Bayview\"\n    }\n    \n    # Compute arrival time at Bayview\n    arrival_time = add_minutes(start_time, travel_presidio_to_bayview)\n    \n    # Check if Nancy is available upon arrival.\n    # If arrival is before her availability window, we must wait until nancy_start.\n    if arrival_time < nancy_start:\n        # Add a wait action until Nancy arrives\n        wait_time = nancy_start\n        wait_action = {\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": minutes_to_time_str(arrival_time)\n        }\n        meeting_start_time = nancy_start\n        schedule_actions = [start_action, travel_action, wait_action]\n    else:\n        meeting_start_time = arrival_time\n        schedule_actions = [start_action, travel_action]\n    \n    # Ensure that meeting can finish before Nancy leaves.\n    if meeting_start_time + meeting_min_duration > nancy_end:\n        raise Exception(\"Unable to meet Nancy for the required duration within her available hours.\")\n    \n    meet_action = {\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_min_duration,\n        \"time\": minutes_to_time_str(meeting_start_time)\n    }\n    \n    schedule_actions.append(meet_action)\n    \n    schedule = {\"schedule\": schedule_actions}\n    \n    # Output the schedule as JSON formatted dictionary.\n    print(json.dumps(schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_63",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "3:37PM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "3:37PM",
                    "duration": 8,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "3:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "3:45PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime dt as H:MMAM/PM (remove any leading zero from hour)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters and constraints\n    arrival_location = \"Nob Hill\"\n    meeting_location = \"Pacific Heights\"\n    \n    # Travel times in minutes\n    travel_time_NH_to_PH = 8  # minutes\n    travel_time_PH_to_NH = 8  # minutes (not used in schedule but provided)\n    \n    # Constraints:\n    # Arrival at Nob Hill at 9:00AM.\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Margaret's available window at Pacific Heights: 3:45PM to 7:15PM.\n    margaret_available_start = datetime.strptime(\"3:45PM\", \"%I:%M%p\")\n    margaret_available_end = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    \n    # Meeting minimum duration with Margaret in minutes\n    meeting_duration = 45  # minutes\n    \n    # Compute the latest departure time from Nob Hill to arrive exactly at Margaret's available start.\n    # Since travel time from Nob Hill to Pacific Heights is 8 minutes, we subtract that from the available start.\n    departure_time = margaret_available_start - timedelta(minutes=travel_time_NH_to_PH)\n    \n    # Compute meeting start time (equal to Margaret's available start) and meeting end time.\n    meeting_start_time = margaret_available_start\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # For an optimal plan to maximize meeting opportunities,\n    # we want to meet Margaret as soon as she is available.\n    # Thus, the schedule is to wait at Nob Hill until departure_time, travel to PH, and meet Margaret.\n    \n    schedule = []\n    \n    # Start at Nob Hill at arrival time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Wait at Nob Hill until the time to depart (if any waiting is required).\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": arrival_location,\n        \"time\": format_time(departure_time)\n    })\n    \n    # Travel from Nob Hill to Pacific Heights.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_NH_to_PH,\n        \"time\": format_time(departure_time),\n        \"to\": meeting_location\n    })\n    \n    # Meet Margaret for at least 45 minutes once available.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Output result as JSON\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_64",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "6:35PM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "6:35PM",
                    "duration": 25,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "7:00PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 45,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM without leading zero for hour.\n    # Use %I to get hour with leading zero then remove it.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input variables (all times in datetime objects for the day)\n    # Assume the meeting date is arbitrary, we use today's date for computation.\n    # For this example, we set the date arbitrarily to Jan 1, 2020.\n    date_ref = \"2020-01-01\"\n    arrival_time_str = f\"{date_ref} 9:00AM\"\n    meeting_start_str = f\"{date_ref} 7:00PM\"\n    meeting_end_str = f\"{date_ref} 9:00PM\"\n    \n    arrival_time = datetime.strptime(arrival_time_str, \"%Y-%m-%d %I:%M%p\")\n    meeting_slot_start = datetime.strptime(meeting_start_str, \"%Y-%m-%d %I:%M%p\")\n    meeting_slot_end = datetime.strptime(meeting_end_str, \"%Y-%m-%d %I:%M%p\")\n    \n    # Travel times in minutes.\n    travel_duration_google = 25  # Golden Gate Park to Embarcadero\n    # Meeting minimum duration in minutes.\n    meeting_min_duration = 45\n    \n    # Compute departure time from Golden Gate Park such that arrival at Embarcadero is exactly at Sandra's available start.\n    departure_time = meeting_slot_start - timedelta(minutes=travel_duration_google)\n    \n    # Check if departure time is after arrival. If not, adjust waiting period.\n    if departure_time < arrival_time:\n        # If the departure time is before arriving, then we should depart as soon as we arrive.\n        departure_time = arrival_time\n\n    # Compute meeting start time at Embarcadero; ideally it should be the max between arrival from travel and meeting_slot_start.\n    meeting_actual_start = max(meeting_slot_start, departure_time + timedelta(minutes=travel_duration_google))\n    # In our current plan, meeting_actual_start should be meeting_slot_start if we time travel exactly.\n    \n    # Ensure that the meeting can last at least meeting_min_duration within Sandra's available window.\n    meeting_possible_duration = (meeting_slot_end - meeting_actual_start).total_seconds() / 60\n    if meeting_possible_duration < meeting_min_duration:\n        # If not enough time, meeting duration is set to the available window.\n        meeting_duration = int(meeting_possible_duration)\n    else:\n        meeting_duration = meeting_min_duration\n\n    # Build the schedule events.\n    schedule = []\n\n    # Event 1: Start at Golden Gate Park at arrival_time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Event 2: Wait at Golden Gate Park until departure time.\n    # Only add a wait event if there is waiting time.\n    if arrival_time < departure_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Golden Gate Park\",\n            \"time\": format_time(departure_time)\n        })\n    \n    # Event 3: Travel from Golden Gate Park to Embarcadero.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_duration_google,\n        \"time\": format_time(departure_time),\n        \"to\": \"Embarcadero\"\n    })\n    \n    # Event 4: Meet Sandra at Embarcadero.\n    # The meeting starts when you arrive (which is departure_time + travel_duration_google)\n    meeting_start_time = departure_time + timedelta(minutes=travel_duration_google)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Prepare the final result in a dictionary.\n    result = {\"schedule\": schedule}\n    \n    # Output JSON-formatted dictionary\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_65",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:58AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "10:58AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:15AM",
                    "duration": 390
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "5:45PM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 120,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport datetime\nimport json\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM without leading zero on hour\n    hour = dt.hour % 12\n    if hour == 0:\n        hour = 12\n    minute = dt.minute\n    meridiem = \"AM\" if dt.hour < 12 else \"PM\"\n    return f\"{hour}:{minute:02d}{meridiem}\"\n\ndef main():\n    # Input parameters and constraints\n    # You arrive at Nob Hill at 9:00AM.\n    arrival_time = datetime.datetime(2023, 1, 1, 9, 0)\n    start_location = \"Nob Hill\"\n\n    # Meeting friend's (Robert) availability:\n    robert_available_start = datetime.datetime(2023, 1, 1, 11, 15)\n    robert_available_end   = datetime.datetime(2023, 1, 1, 17, 45)\n    min_meeting_duration = 120  # in minutes\n    \n    # Travel times (in minutes)\n    travel_nobhill_to_presidio = 17\n    travel_presidio_to_nobhill = 18\n\n    # We want to meet Robert at the Presidio.\n    meeting_location = \"Presidio\"\n    \n    # To optimize, we aim to start the meeting at Robert's available start time.\n    # For an on-time arrival at Presidio, we must depart from Nob Hill at:\n    departure_time_nobhill = robert_available_start - datetime.timedelta(minutes=travel_nobhill_to_presidio)\n\n    # Calculate any waiting time at the starting point if necessary.\n    # If arrival_time is earlier than departure_time_nobhill, then we wait at Nob Hill.\n    wait_start_time = None\n    if arrival_time < departure_time_nobhill:\n        wait_start_time = departure_time_nobhill  # We wait until it's time to leave\n\n    # For the meeting itself, we can maximize meeting duration up to Robert's end time.\n    # In our optimization, we choose the full available window at Presidio.\n    meeting_start_time = robert_available_start\n    meeting_end_time = robert_available_end\n    meeting_duration = int((meeting_end_time - meeting_start_time).total_seconds() // 60)\n    \n    # Ensure that the meeting duration is at least the minimum required.\n    if meeting_duration < min_meeting_duration:\n        raise ValueError(\"Not enough available meeting time for the minimum meeting duration.\")\n    \n    # After meeting, travel back from Presidio to Nob Hill.\n    departure_time_presidio = meeting_end_time  # leave immediately after meeting\n    arrival_time_nobhill = departure_time_presidio + datetime.timedelta(minutes=travel_presidio_to_nobhill)\n    \n    # Build the schedule as a list of actions.\n    schedule = []\n    \n    # 1. Start event at Nob Hill at arrival_time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # 2. If there is idle time at Nob Hill before departure, add a wait event.\n    if wait_start_time and arrival_time < wait_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(wait_start_time)\n        })\n    \n    # 3. Travel from Nob Hill to Presidio.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_nobhill_to_presidio,\n        \"time\": format_time(departure_time_nobhill),\n        \"to\": meeting_location\n    })\n    \n    # 4. Meeting with Robert at Presidio.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # 5. Travel from Presidio back to Nob Hill.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_presidio_to_nobhill,\n        \"time\": format_time(departure_time_presidio),\n        \"to\": start_location\n    })\n    \n    # Final schedule dictionary\n    schedule_dict = {\"schedule\": schedule}\n    \n    # Output the JSON-formatted schedule\n    print(json.dumps(schedule_dict, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_66",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "7:34PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "7:34PM",
                    "duration": 26,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "8:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 105,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (strip any leading zero from hour)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters as variables\n    # Arrival time at Golden Gate Park\n    start_time = datetime(2023, 1, 1, 9, 0)  # 9:00AM\n    start_location = \"Golden Gate Park\"\n    \n    # Meeting constraints for Kenneth\n    kenneth_location = \"Financial District\"\n    kenneth_available_start = datetime(2023, 1, 1, 20, 0)  # 8:00PM\n    kenneth_available_end = datetime(2023, 1, 1, 22, 0)    # 10:00PM\n    meeting_min_duration = 105  # in minutes\n\n    # Travel durations (in minutes)\n    travel_GP_to_FD = 26  # minutes from Golden Gate Park to Financial District\n    travel_FD_to_GP = 23  # not used in this schedule but provided\n\n    # To meet Kenneth for at least 105 minutes, we can plan to start the meeting at the earliest available time (8:00PM)\n    # Thus, we need to leave Golden Gate Park at kenneth_available_start minus travel time.\n    departure_time = kenneth_available_start - timedelta(minutes=travel_GP_to_FD)  # time to leave Golden Gate Park\n\n    # Meeting start time at Financial District will be exactly at 8:00PM and meeting lasts for 105 minutes.\n    meeting_start_time = kenneth_available_start\n    meeting_duration = timedelta(minutes=meeting_min_duration)\n    meeting_end_time = meeting_start_time + meeting_duration\n\n    # Construct the schedule steps using computed times.\n    schedule = []\n\n    # Step 1: Start at Golden Gate Park at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n\n    # Step 2: Wait at Golden Gate Park until departure time (when it's time to leave to meet Kenneth).\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": start_location,\n        \"time\": format_time(departure_time)\n    })\n\n    # Step 3: Travel from Golden Gate Park to Financial District.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_GP_to_FD,\n        \"time\": format_time(departure_time),\n        \"to\": kenneth_location\n    })\n\n    # Step 4: Meet Kenneth at Financial District for the required duration (starting at 8:00PM).\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": kenneth_location,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n\n    # Optionally, one could add another travel step returning, but constraints only require meeting Kenneth.\n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_67",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "9:17AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 30,
                    "time": "9:17AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format the time as H:MMAM/PM with no leading zero for hour.\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters / Constraints\n    # Times are represented based on an arbitrary date\n    base_date = datetime(2023, 1, 1)  # arbitrary date\n    \n    # Starting point details\n    start_location = \"Haight-Ashbury\"\n    start_time = base_date.replace(hour=9, minute=0)\n    \n    # Patricia's availability window at Russian Hill\n    patricia_available_start = base_date.replace(hour=7, minute=45)\n    patricia_available_end = base_date.replace(hour=14, minute=15)  # 2:15PM\n    \n    # Travel times (minutes)\n    travel_time_haight_to_russian = 17\n    \n    # We want to meet Patricia for at least 30 minutes.\n    meeting_duration = 30\n    \n    # Compute the schedule:\n    # 1. Start at Haight-Ashbury at 9:00AM.\n    # 2. Travel from Haight-Ashbury to Russian Hill. Depart 9:00AM, travel time is 17 minutes.\n    travel_depart_time = start_time\n    arrival_time = travel_depart_time + timedelta(minutes=travel_time_haight_to_russian)\n    \n    # 3. Determine meeting start time (must be within Patricia's available window)\n    # Since Patricia is already available at 7:45AM, and arrival is after that, meeting can start immediately.\n    meeting_start_time = arrival_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # In case waiting is necessary (if arrived before Patricia is available) we would wait.\n    # Here, if arrival_time < patricia_available_start, then waiting is needed:\n    if arrival_time < patricia_available_start:\n        wait_time = patricia_available_start - arrival_time\n        wait_event_time = patricia_available_start\n    else:\n        # No waiting required. We'll log the arrival time as the wait endpoint with no duration.\n        wait_time = timedelta(minutes=0)\n        wait_event_time = arrival_time\n        \n    # Build schedule events with the required dictionary structure.\n    schedule = []\n    \n    # Start event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Travel event from Haight-Ashbury to Russian Hill.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_time_haight_to_russian,\n        \"time\": format_time(travel_depart_time),\n        \"to\": \"Russian Hill\"\n    })\n    \n    # Wait event\n    # Only include the wait event if there's a gap between arrival and meeting start.\n    # In our computed schedule, wait could be 0 minutes. We include it regardless for structure.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Russian Hill\",\n        \"time\": format_time(wait_event_time)\n    })\n    \n    # Meet event: meeting Patricia for at least 30 minutes.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    output = {\"schedule\": schedule}\n    \n    # Output the JSON-formatted schedule dictionary.\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_68",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:07AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 90,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime object to H:MMAM/PM (remove any leading zero in hour)\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters\n    # Locations\n    start_location = \"Chinatown\"\n    meeting_location = \"Union Square\"\n    \n    # Times (we assume same day, use arbitrary date, say Jan 1, 2000)\n    day = \"2000-01-01\"\n    arrival_at_chinatown = datetime.strptime(day + \" 9:00AM\", \"%Y-%m-%d %I:%M%p\")\n    mark_available_start = datetime.strptime(day + \" 8:00AM\", \"%Y-%m-%d %I:%M%p\")\n    mark_available_end = datetime.strptime(day + \" 12:45PM\", \"%Y-%m-%d %I:%M%p\")\n    \n    # Travel durations in minutes\n    travel_time_chinatown_to_union = 7  # minutes\n    \n    # Meeting constraints\n    min_meeting_duration = 90  # minutes\n    \n    # Compute schedule:\n    # Step 1: Start at Chinatown\n    start_event = {\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(arrival_at_chinatown)\n    }\n    \n    # Step 2: Travel from Chinatown to Union Square\n    # Depart Chinatown at the arrival time (9:00AM)\n    travel_departure_time = arrival_at_chinatown\n    travel_event = {\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_chinatown_to_union,\n        \"time\": format_time(travel_departure_time),\n        \"to\": meeting_location\n    }\n    \n    # Arrival time at Union Square\n    arrival_union = travel_departure_time + timedelta(minutes=travel_time_chinatown_to_union)\n    \n    # Step 3: Wait event at Union Square (if needed, waiting until meeting start time)\n    # In this scenario, as soon as you arrive, you can start meeting.\n    # For clarity, we include a wait event with the arrival time at Union Square.\n    wait_event = {\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": format_time(arrival_union)\n    }\n    \n    # Step 4: Meet Mark at Union Square; meeting duration is at least 90 minutes.\n    meeting_start = arrival_union  # start meeting immediately\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if the meeting can be completed within Mark's available time.\n    if meeting_end > mark_available_end:\n        raise Exception(\"Cannot meet Mark for the required duration within his available time.\")\n    \n    meet_event = {\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start)\n    }\n    \n    schedule = {\n        \"schedule\": [start_event, travel_event, wait_event, meet_event]\n    }\n    \n    # Output the schedule in JSON format\n    print(json.dumps(schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_69",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:06AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:06AM",
                    "duration": 24,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "10:00AM",
                    "duration": 22,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 24,
                    "time": "9:24AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 30,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parses a time string like '9:00AM' into a datetime object (using an arbitrary date)\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime object back into the required format 'H:MMAM/PM'\n    # Remove any leading zeros from hours.\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters / constraints\n    start_location = \"Golden Gate Park\"\n    meeting_location = \"North Beach\"\n    \n    # Arrival times\n    start_time_str = \"9:00AM\"\n    start_time = parse_time(start_time_str)\n    \n    # Ronald's available window at North Beach\n    ronald_available_start_str = \"9:30AM\"\n    ronald_available_end_str = \"6:30PM\"  # not used in our optimal schedule but provided\n    ronald_available_start = parse_time(ronald_available_start_str)\n    \n    # Travel times (in minutes)\n    travel_GGP_to_NB = 24\n    travel_NB_to_GGP = 22\n    \n    # Meeting requirement: at least 30 minutes\n    meeting_duration = 30\n    \n    # Calculate departure time from Golden Gate Park so that arrival at North Beach is exactly when Ronald becomes available\n    departure_time = ronald_available_start - timedelta(minutes=travel_GGP_to_NB)\n    # Meeting start will be when arrival happens at North Beach\n    meeting_start_time = ronald_available_start\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Optionally, travel back to Golden Gate Park after meeting\n    return_travel_time = travel_NB_to_GGP\n    return_departure_time = meeting_end_time\n    return_arrival_time = return_departure_time + timedelta(minutes=return_travel_time)\n    \n    # Build the schedule as a list of steps.\n    schedule = []\n    \n    # Step 1: Start at Golden Gate Park at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Step 2: Wait until departure time at Golden Gate Park.\n    # Only add a wait if there is time to wait.\n    if departure_time > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(departure_time)\n        })\n    \n    # Step 3: Travel from Golden Gate Park to North Beach.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_GGP_to_NB,\n        \"time\": format_time(departure_time),\n        \"to\": meeting_location\n    })\n    \n    # Step 4: Meet Ronald at North Beach (at least 30 minutes).\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Step 5: Travel back from North Beach to Golden Gate Park.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_NB_to_GGP,\n        \"time\": format_time(return_departure_time),\n        \"to\": start_location\n    })\n    \n    result = { \"schedule\": schedule }\n    # Output the result as JSON-formatted dictionary.\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_70",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "10:42AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "10:42AM",
                    "duration": 18,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "11:00AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\n# Helper function to format time in H:MMAM/PM format (no leading zero for hour)\ndef format_time(dt):\n    hour = dt.hour % 12\n    if hour == 0:\n        hour = 12\n    minute = dt.minute\n    suffix = \"AM\" if dt.hour < 12 else \"PM\"\n    return f\"{hour}:{minute:02d}{suffix}\"\n\n# Input parameters\narrival_location = \"Haight-Ashbury\"\npaul_location = \"Bayview\"\n\n# Times are defined as datetime objects on an arbitrary date.\n# We choose an arbitrary date (e.g., January 1, 2020) and set the times accordingly.\nbase_date = datetime(2020, 1, 1)\n\n# Arrival at Haight-Ashbury at 9:00AM.\narrival_time = base_date.replace(hour=9, minute=0)\n\n# Paul's availability at Bayview from 11:00AM to 4:30PM.\npaul_available_start = base_date.replace(hour=11, minute=0)\npaul_available_end = base_date.replace(hour=16, minute=30)\n\n# Travel durations in minutes (as given)\ntravel_haight_to_bayview = timedelta(minutes=18)\ntravel_bayview_to_haight = timedelta(minutes=19)\n\n# Required meeting duration with Paul\nrequired_meeting_duration = timedelta(minutes=90)\n\n# The optimal plan: Arrive at Haight-Ashbury, wait until it's time to travel so that you arrive exactly at Paul's available start.\n# Compute the departure time from Haight-Ashbury:\ndeparture_time = paul_available_start - travel_haight_to_bayview  # leave so as to arrive at Paul's start time\n\n# Compute the arrival time at Bayview after travel:\narrival_bayview_time = departure_time + travel_haight_to_bayview\n\n# Meeting start time will be Paul's available start or arrivalBayviewTime, whichever is later.\nmeeting_start = max(paul_available_start, arrival_bayview_time)\n\n# Meeting end time must be meeting_start + required duration.\nmeeting_end = meeting_start + required_meeting_duration\n\n# Sanity check: meeting_end must be before Paul's availability end.\nif meeting_end > paul_available_end:\n    raise ValueError(\"Cannot schedule a meeting of required duration within Paul's available time.\")\n\n# Build the schedule list\nschedule = []\n\n# Step 1: Start at Haight-Ashbury at arrival time.\nschedule.append({\n    \"action\": \"start\",\n    \"location\": arrival_location,\n    \"time\": format_time(arrival_time)\n})\n\n# Step 2: Wait at Haight-Ashbury until departure time.\n# Only add a wait step if there is waiting time.\nif departure_time > arrival_time:\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": arrival_location,\n        \"time\": format_time(departure_time)\n    })\n\n# Step 3: Travel from Haight-Ashbury to Bayview.\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": arrival_location,\n    \"duration\": int(travel_haight_to_bayview.total_seconds() // 60),\n    \"time\": format_time(departure_time),\n    \"to\": paul_location\n})\n\n# Step 4: Meet Paul at Bayview for the required duration.\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": paul_location,\n    \"duration\": int(required_meeting_duration.total_seconds() // 60),\n    \"time\": format_time(meeting_start)\n})\n\n# Output the result as a JSON-formatted dictionary.\nresult = {\"schedule\": schedule}\nprint(json.dumps(result, indent=2))",
            "count": "meeting_planning_example_71",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:35AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:35AM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:45AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "9:45AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(total_minutes):\n    # total_minutes is minutes after midnight\n    hour = total_minutes // 60\n    minute = total_minutes % 60\n    dt = datetime(2020, 1, 1, hour, minute)  # dummy date\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input parameters (constraints)\n    start_location = \"Pacific Heights\"\n    meeting_location = \"Alamo Square\"\n    travel_time = 10  # minutes for either direction\n    \n    # Times in minutes after midnight\n    # Arrival at Pacific Heights at 9:00AM\n    arrival_time_PH = 9 * 60      # 9:00AM = 540 minutes\n    # John is available at Alamo Square from 9:45AM to 2:30PM\n    john_available_start = 9 * 60 + 45  # 585 minutes (9:45AM)\n    john_available_end = 14 * 60 + 30     # 870 minutes (2:30PM)\n    \n    # Constraint: Need to meet John for at least 90 minutes.\n    meeting_duration = 90  # minutes\n    \n    # To maximize meeting with John, we want to start meeting right when John is available.\n    # Therefore, we must arrive at Alamo Square exactly at John's available start.\n    # Calculate departure time from Pacific Heights: travel_time is 10 minutes.\n    departure_time_PH = john_available_start - travel_time  # 585 - 10 = 575 minutes = 9:35AM\n    \n    # Prepare schedule events:\n    # 1. Start event at Pacific Heights at arrival_time_PH.\n    event_start = {\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": minutes_to_time_str(arrival_time_PH)\n    }\n    \n    # 2. Wait at Pacific Heights until departure (if any waiting is needed)\n    # Only add wait event if departure_time_PH is later than arrival_time_PH.\n    wait_event = None\n    if departure_time_PH > arrival_time_PH:\n        wait_event = {\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": minutes_to_time_str(departure_time_PH)\n        }\n    \n    # 3. Travel event from Pacific Heights to Alamo Square.\n    travel_event = {\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": minutes_to_time_str(departure_time_PH),\n        \"to\": meeting_location\n    }\n    \n    # 4. Meeting event with John at Alamo Square.\n    meeting_event = {\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": minutes_to_time_str(john_available_start)\n    }\n    \n    # Build schedule list in order.\n    schedule = []\n    schedule.append(event_start)\n    if wait_event:\n        schedule.append(wait_event)\n    schedule.append(travel_event)\n    schedule.append(meeting_event)\n    \n    # Create final JSON formatted dictionary.\n    output = {\"schedule\": schedule}\n    \n    # Print output JSON.\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_72",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "9:07AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 60,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format the time as H:MMAM/PM with no leading zero for the hour.\n    hour = dt.hour\n    minute = dt.minute\n    am_pm = \"AM\" if hour < 12 else \"PM\"\n    # Convert 24-hour format to 12-hour format\n    hour_12 = hour % 12\n    if hour_12 == 0:\n        hour_12 = 12\n    return f\"{hour_12}:{minute:02d}{am_pm}\"\n\ndef compute_schedule():\n    # Input variables and constraints\n    # Locations and travel times (in minutes)\n    location_start = \"Russian Hill\"\n    location_meeting = \"Pacific Heights\"\n    travel_time_RH_to_PH = 7  # minutes\n    \n    # Arrival time at Russian Hill: 9:00AM\n    start_time = datetime(2000, 1, 1, 9, 0)\n    \n    # Barbara's availability at Pacific Heights\n    barbara_available_start = datetime(2000, 1, 1, 7, 15)\n    barbara_available_end   = datetime(2000, 1, 1, 22, 0)  # 10:00PM\n    \n    # Minimum meeting duration with Barbara (in minutes)\n    meeting_duration = 60\n\n    # Step 1: Start at Russian Hill at 9:00AM\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": location_start,\n        \"time\": format_time(start_time)\n    })\n\n    # Step 2: Travel from Russian Hill to Pacific Heights\n    travel_departure_time = start_time\n    travel_arrival_time = travel_departure_time + timedelta(minutes=travel_time_RH_to_PH)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": location_start,\n        \"duration\": travel_time_RH_to_PH,\n        \"time\": format_time(travel_departure_time),\n        \"to\": location_meeting\n    })\n\n    # Step 3: Determine meeting start time at Pacific Heights.\n    # Since Barbara is available from 7:15AM and our arrival is later (9:07AM),\n    # we can start the meeting immediately on arrival.\n    meeting_start_time = travel_arrival_time\n    \n    # If we had to wait for Barbara to be available, a wait step would be inserted.\n    if meeting_start_time < barbara_available_start:\n        # Wait until Barbara is available\n        wait_time = barbara_available_start - meeting_start_time\n        actual_meeting_start = barbara_available_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": location_meeting,\n            \"time\": format_time(meeting_start_time)\n        })\n    else:\n        actual_meeting_start = meeting_start_time\n\n    # Check if meeting can finish before Barbara's end availability.\n    meeting_end_time = actual_meeting_start + timedelta(minutes=meeting_duration)\n    if meeting_end_time > barbara_available_end:\n        raise ValueError(\"Not enough time to meet Barbara within her availability.\")\n\n    # Step 4: Meeting action at Pacific Heights\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": location_meeting,\n        \"duration\": meeting_duration,\n        \"time\": format_time(actual_meeting_start)\n    })\n\n    return {\"schedule\": schedule}\n\ndef main():\n    schedule_dict = compute_schedule()\n    print(json.dumps(schedule_dict, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_73",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "3:43PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "3:43PM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:00PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "4:45PM",
                    "duration": 14,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Use %I:%M%p then remove any leading zero from hour.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters and constraints\n    # Start at Richmond at 9:00AM\n    start_location = \"Richmond District\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Richard is available at Nob Hill from 4:00PM to 6:15PM,\n    # and we want to meet him for at least 45 minutes.\n    richard_location = \"Nob Hill\"\n    richard_available_start = datetime.strptime(\"4:00PM\", \"%I:%M%p\")\n    richard_available_end = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    min_meeting_duration = timedelta(minutes=45)\n    \n    # Travel durations\n    travel_from_Richmond_to_Nob = timedelta(minutes=17)\n    travel_from_Nob_to_Richmond = timedelta(minutes=14)\n    \n    # Optimal schedule logic:\n    # To start the meeting with Richard at his available time,\n    # we want to arrive at Nob Hill exactly at 4:00PM.\n    # So, we depart from Richmond at 4:00PM - 17 minutes.\n    departure_from_Richmond_for_Nob = richard_available_start - travel_from_Richmond_to_Nob\n    \n    # Meeting start time at Nob Hill is when we arrive\n    meeting_start = richard_available_start\n    meeting_end = meeting_start + min_meeting_duration\n    # Ensure meeting does not go beyond Richard's available time\n    if meeting_end > richard_available_end:\n        meeting_end = richard_available_end\n    \n    # After the meeting, we travel back from Nob Hill to Richmond District.\n    departure_from_Nob_for_Richmond = meeting_end\n    arrival_back_at_Richmond = departure_from_Nob_for_Richmond + travel_from_Nob_to_Richmond\n    \n    # Build schedule steps, ensuring all times and durations are computed.\n    schedule = []\n    # Step 1: start at Richmond District at arriving time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(arrival_time)\n    })\n    # Step 2: wait at Richmond District until departure for Nob Hill.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": start_location,\n        \"time\": format_time(departure_from_Richmond_for_Nob)\n    })\n    # Step 3: travel from Richmond District to Nob Hill.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": int(travel_from_Richmond_to_Nob.total_seconds() / 60),\n        \"time\": format_time(departure_from_Richmond_for_Nob),\n        \"to\": richard_location\n    })\n    # Step 4: meet Richard at Nob Hill.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": richard_location,\n        \"duration\": int(min_meeting_duration.total_seconds() / 60),\n        \"time\": format_time(meeting_start)\n    })\n    # Step 5: travel back from Nob Hill to Richmond District.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": richard_location,\n        \"duration\": int(travel_from_Nob_to_Richmond.total_seconds() / 60),\n        \"time\": format_time(meeting_end),\n        \"to\": start_location\n    })\n    \n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_74",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "11:17AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "11:17AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM",
                    "duration": 195
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "2:45PM",
                    "duration": 12,
                    "to": "Pacific Heights"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(total_minutes):\n    # total_minutes is minutes from midnight\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    period = \"AM\"\n    if hours >= 12:\n        period = \"PM\"\n    display_hour = hours if 1 <= hours <= 12 else (hours - 12 if hours > 12 else 12)\n    # Format minute with no leading zero if possible\n    return f\"{display_hour}:{minutes:02d}{period}\"\n\ndef main():\n    # Input constraints and parameters:\n    # Locations: Pacific Heights (PH) and Fisherman's Wharf (FW)\n    # Travel times (in minutes):\n    travel_PH_to_FW = 13\n    travel_FW_to_PH = 12\n    \n    # Starting time at Pacific Heights: 9:00AM (minutes from midnight)\n    start_time = 9 * 60  # 9:00AM -> 540 minutes\n    \n    # David is available at Fisherman's Wharf from 11:30AM to 2:45PM\n    david_available_start = 11 * 60 + 30  # 11:30AM -> 690 minutes\n    david_available_end = 14 * 60 + 45    # 2:45PM -> 885 minutes\n    \n    # Requirement: Minimum meeting duration is 15 minutes.\n    min_meet_duration = 15\n    \n    # To maximize meeting time with David under the constraints,\n    # the optimal schedule is to arrive at Fisherman's Wharf exactly at 11:30AM\n    # by leaving Pacific Heights with enough time to travel.\n    depart_PH_time = david_available_start - travel_PH_to_FW  # depart so that arrival is exactly at 11:30AM\n    \n    # Compute meeting duration: ideally meeting for as long as David is available\n    meeting_duration = david_available_end - david_available_start\n    if meeting_duration < min_meet_duration:\n        raise ValueError(\"Not enough time to meet David for the minimum required duration.\")\n    \n    # Plan the meeting schedule:\n    # 1. Start at Pacific Heights at 9:00AM.\n    # 2. Wait at Pacific Heights until departure time to catch David\u2019s availability window.\n    # 3. Travel from Pacific Heights to Fisherman's Wharf.\n    # 4. Meet David at Fisherman's Wharf.\n    # 5. (Optional) Travel back from Fisherman's Wharf to Pacific Heights.\n    \n    # Calculate arrival time at Fisherman's Wharf\n    arrival_FW_time = depart_PH_time + travel_PH_to_FW\n    \n    # Travel back calculation: leaving immediately after David's available window ends.\n    depart_FW_time = david_available_end\n    arrival_PH_return_time = depart_FW_time + travel_FW_to_PH\n    \n    schedule = []\n    \n    # Start at Pacific Heights\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Pacific Heights\",\n        \"time\": minutes_to_time_str(start_time)\n    })\n    \n    # Wait at Pacific Heights until it's time to leave (only add if waiting is needed)\n    if depart_PH_time > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": minutes_to_time_str(depart_PH_time)\n        })\n    \n    # Travel from Pacific Heights to Fisherman's Wharf\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_PH_to_FW,\n        \"time\": minutes_to_time_str(depart_PH_time),\n        \"to\": \"Fisherman's Wharf\"\n    })\n    \n    # Meet David at Fisherman's Wharf from his available start time until available end time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": meeting_duration,\n        \"time\": minutes_to_time_str(arrival_FW_time)\n    })\n    \n    # Travel back from Fisherman's Wharf to Pacific Heights after meeting David.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_FW_to_PH,\n        \"time\": minutes_to_time_str(depart_FW_time),\n        \"to\": \"Pacific Heights\"\n    })\n    \n    output_dict = {\"schedule\": schedule}\n    print(json.dumps(output_dict, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_75",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "4:44PM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "4:44PM",
                    "duration": 16,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 60,
                    "time": "5:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime object to H:MMAM/PM format without leading zero in hour.\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt\n\ndef main():\n    # Input parameters\n    # Arrival and meeting constraints times as datetime objects for a common arbitrary date.\n    base_date = \"2000-01-01 \"  # arbitrary date\n    arrival_time_str = base_date + \"9:00AM\"\n    meeting_start_constraint_str = base_date + \"5:00PM\"\n    meeting_end_constraint_str = base_date + \"8:15PM\"\n    min_meeting_duration = 60  # in minutes\n\n    # Travel durations (in minutes)\n    travel_marina_to_haight = 16\n    travel_haight_to_marina = 17\n\n    # Convert strings to datetime objects\n    arrival_time = datetime.strptime(arrival_time_str, \"%Y-%m-%d %I:%M%p\")\n    meeting_start_constraint = datetime.strptime(meeting_start_constraint_str, \"%Y-%m-%d %I:%M%p\")\n    meeting_end_constraint = datetime.strptime(meeting_end_constraint_str, \"%Y-%m-%d %I:%M%p\")\n\n    # Calculate the ideal departure time from Marina District so that we arrive at Haight-Ashbury exactly at the start of Timothy's window.\n    departure_from_marina = meeting_start_constraint - timedelta(minutes=travel_marina_to_haight)\n    \n    # Check that arrival_time is before departure (it is)\n    if arrival_time > departure_from_marina:\n        raise ValueError(\"Arrival time is after the necessary departure time to meet the constraint.\")\n\n    # The meeting with Timothy will start at his available start time: 5:00PM.\n    meeting_start = meeting_start_constraint\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    # Ensure that the meeting ends before Timothy leaves.\n    if meeting_end > meeting_end_constraint:\n        raise ValueError(\"Not enough time to meet Timothy for the required duration within his schedule.\")\n\n    # Create schedule steps:\n    schedule = []\n\n    # Step 1: Start at Marina District at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Marina District\",\n        \"time\": format_time(arrival_time)\n    })\n\n    # Step 2: Wait at Marina District until departure for travel.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Marina District\",\n        \"time\": format_time(departure_from_marina)\n    })\n\n    # Step 3: Travel from Marina District to Haight-Ashbury.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_marina_to_haight,\n        \"time\": format_time(departure_from_marina),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # Step 4: Meet Timothy at Haight-Ashbury.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n\n    # Create final JSON dictionary\n    output = {\"schedule\": schedule}\n\n    # Print JSON output\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_76",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 9,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:09AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 30,
                    "time": "9:09AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM with no leading zero on hour.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters (all in minutes and predefined strings)\n    \n    # Travel times in minutes\n    travel_time_RD_to_GGP = 9\n    travel_time_GGP_to_RD = 7  # provided but not used in this particular schedule\n    \n    # Constraints and meeting details\n    start_location = \"Richmond District\"\n    meeting_location = \"Golden Gate Park\"\n    arrival_time_str = \"9:00AM\"\n    meeting_duration = 30  # in minutes\n    \n    # Robert's availability (for information, not affecting schedule computation since it's always met)\n    robert_start = datetime.strptime(\"8:15AM\", \"%I:%M%p\")\n    robert_end   = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    \n    # Calculate start time (arrival at Richmond District)\n    start_time = datetime.strptime(arrival_time_str, \"%I:%M%p\")\n    \n    # Compute departure from Richmond District for meeting\n    # We'll leave immediately at start time to maximize meeting time\n    travel_start_time = start_time\n    \n    # Arrival time at Golden Gate Park = start time + travel_time_RD_to_GGP\n    arrival_GGP_time = travel_start_time + timedelta(minutes=travel_time_RD_to_GGP)\n    \n    # Ensure that meeting can occur as Robert is available.\n    # Robert is available from 8:15AM and our arrival is after that.\n    # So we schedule the meeting immediately upon arrival.\n    meeting_start_time = arrival_GGP_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Build the schedule list according to required structure\n    schedule = []\n    \n    # Start event at Richmond District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Travel event to Golden Gate Park\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_RD_to_GGP,\n        \"time\": format_time(travel_start_time),\n        \"to\": meeting_location\n    })\n    \n    # (Optional wait action if arrival is before time to meet, but in our case, meeting begins immediately)\n    # We check if there is any waiting time before meeting (not needed here)\n    if meeting_start_time > arrival_GGP_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(arrival_GGP_time)\n        })\n    \n    # Meeting event with Robert\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Final JSON output dictionary\n    output = {\"schedule\": schedule}\n    \n    # Print the JSON-formatted output\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_77",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "5:41PM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "5:41PM",
                    "duration": 19,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "6:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 105,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    \"\"\"Format a datetime object into H:MMAM/PM format without a leading zero in the hour.\"\"\"\n    # Use %I:%M%p then remove a leading zero if present.\n    return dt.strftime('%I:%M%p').lstrip(\"0\")\n\ndef main():\n    # Input parameters (times are handled as datetime objects with a dummy date)\n    # You arrive at Union Square at 9:00AM.\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    # Michelle will be at The Castro from 6:00PM to 8:00PM.\n    michelle_start = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    michelle_end = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    \n    # Travel distance in minutes\n    travel_time_minutes = 19\n    \n    # Meeting constraint: Meet Michelle for a minimum of 105 minutes.\n    min_meeting_minutes = 105\n    \n    # Calculate the ideal departure time from Union Square.\n    # To start meeting exactly at Michelle's available start, we need to leave\n    departure_time = michelle_start - timedelta(minutes=travel_time_minutes)\n    \n    # Check if arriving at Union Square at 9:00AM allows waiting until the required departure time.\n    # (In a more complex scenario, we might consider alternative timings but for this constraint,\n    # waiting is acceptable.)\n    if arrival_time > departure_time:\n        raise ValueError(\"Arrival time is after the required departure time!\")\n    \n    # The meeting will be scheduled to start at Michelle's available start time.\n    meeting_start = michelle_start\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_minutes)\n    \n    # Ensure that the meeting end does not exceed Michelle's availability.\n    if meeting_end > michelle_end:\n        raise ValueError(\"Not enough time to meet Michelle for the required duration within her availability.\")\n    \n    # Build the schedule action list as required.\n    schedule = []\n    \n    # 1. Start action at Union Square at arrival time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Union Square\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    # 2. Wait at Union Square until departure time.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Union Square\",\n        \"time\": format_time(departure_time)\n    })\n    \n    # 3. Travel from Union Square to The Castro.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_time_minutes,\n        \"time\": format_time(departure_time),\n        \"to\": \"The Castro\"\n    })\n    \n    # 4. Meet Michelle at The Castro.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": min_meeting_minutes,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Create the output dictionary.\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Output the JSON-formatted result.\n    print(json.dumps(result, indent=2))\n    \nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_78",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "1:08PM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "1:08PM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "1:30PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\n# Input variables (meeting constraints)\n# Arrival time at North Beach\narrival_time_str = \"9:00AM\"\n# Paul's availability window at Bayview\npaul_available_start_str = \"1:30PM\"\npaul_available_end_str = \"7:45PM\"\n# Minimum meeting duration with Paul (in minutes)\nmin_meeting_duration = 45\n\n# Travel times in minutes\ntravel_NB_to_BV = 22  # minutes from North Beach to Bayview\ntravel_BV_to_NB = 21  # minutes from Bayview to North Beach\n\n# Helper function to parse time string into datetime object (using arbitrary date)\ndef parse_time(time_str):\n    # using an arbitrary date, e.g. Jan 1, 2000\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\n# Helper function to format datetime object into required time format (no leading zero in hour)\ndef format_time(dt):\n    # Remove any leading 0 from hour using %-I if available (works on Unix) or handle manually.\n    # For portability, we'll format and then remove any leading zero.\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0] == '0':\n        formatted = formatted[1:]\n    return formatted\n\n# Parse the input times\narrival_time = parse_time(arrival_time_str)\npaul_start = parse_time(paul_available_start_str)\npaul_end = parse_time(paul_available_end_str)\n\n# Determine the optimal departure time from North Beach such that we arrive at Bayview exactly at Paul's available start\n# We subtract travel time from Paul's start time.\ndeparture_from_NB = paul_start - timedelta(minutes=travel_NB_to_BV)\n\n# Calculate arrival time at Bayview (should equal Paul's available start if scheduled correctly)\narrival_at_BV = departure_from_NB + timedelta(minutes=travel_NB_to_BV)\n\n# Check if departure_from_NB is not before initial arrival at North Beach.\n# If it is before, then you are already there and waiting.\nif departure_from_NB < arrival_time:\n    departure_from_NB = arrival_time\n    arrival_at_BV = departure_from_NB + timedelta(minutes=travel_NB_to_BV)\n\n# Meeting with Paul should last at least min_meeting_duration minutes.\nmeeting_start = max(arrival_at_BV, paul_start)\nmeeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n\n# Build the schedule list using our computed times\nschedule = []\n# 1. Start event at North Beach when arriving\nschedule.append({\n    \"action\": \"start\",\n    \"location\": \"North Beach\",\n    \"time\": format_time(arrival_time)\n})\n# 2. Wait at North Beach until departure time (if there is waiting time)\nif departure_from_NB > arrival_time:\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"North Beach\",\n        \"time\": format_time(departure_from_NB)\n    })\n# 3. Travel event from North Beach to Bayview\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"North Beach\",\n    \"duration\": travel_NB_to_BV,\n    \"time\": format_time(departure_from_NB),\n    \"to\": \"Bayview\"\n})\n# 4. Meeting event with Paul at Bayview (starting as soon as possible after arrival)\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": \"Bayview\",\n    \"duration\": min_meeting_duration,\n    \"time\": format_time(meeting_start)\n})\n\n# Create final schedule dictionary\nfinal_schedule = {\"schedule\": schedule}\n\n# Output the result as JSON-formatted dictionary\nprint(json.dumps(final_schedule, indent=2))",
            "count": "meeting_planning_example_79",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "11:18AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "11:18AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (remove any leading zero)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters and constraints\n    start_location = \"Mission District\"\n    friend_location = \"Haight-Ashbury\"\n    \n    # Arrival and friend availability times (using an arbitrary date)\n    base_date = datetime(2020, 1, 1)\n    arrival_time = base_date.replace(hour=9, minute=0)\n    friend_available_start = base_date.replace(hour=11, minute=30)\n    friend_available_end = base_date.replace(hour=22, minute=0)  # 10:00PM, though not used in schedule\n    \n    # Travel durations (in minutes)\n    travel_time_MD_to_HA = 12\n    travel_time_HA_to_MD = 11  # provided but not used in optimal schedule below\n    \n    # Meeting constraint: meet friend for a minimum of 75 minutes\n    meeting_duration = 75\n    \n    # To maximize the meeting opportunity with Joshua at Haight-Ashbury,\n    # we schedule departure from Mission District so that we arrive exactly at his available start time.\n    departure_time_for_travel = friend_available_start - timedelta(minutes=travel_time_MD_to_HA)\n    # Compute meeting start time (arrival at friend's location)\n    meeting_start_time = friend_available_start\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Build the schedule as a list of events\n    schedule = []\n    \n    # Step 1: Starting point\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Step 2: Wait at the Mission District until departure time for travel\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": start_location,\n        \"time\": format_time(departure_time_for_travel)\n    })\n    \n    # Step 3: Travel from Mission District to Haight-Ashbury\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time_MD_to_HA,\n        \"time\": format_time(departure_time_for_travel),\n        \"to\": friend_location\n    })\n    \n    # Step 4: Meet Joshua at Haight-Ashbury for the required meeting duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Create the final JSON output\n    output = {\n        \"schedule\": schedule\n    }\n    \n    # Print JSON formatted output\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_80",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "12:17PM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "12:30PM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "12:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(total_minutes):\n    # This function converts total minutes since midnight into a formatted time string like \"H:MMAM/PM\"\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    period = \"AM\" if hours < 12 or hours == 24 else \"PM\"\n    # Adjust for 12-hour format:\n    display_hour = hours % 12\n    if display_hour == 0:\n        display_hour = 12\n    return f\"{display_hour}:{minutes:02d}{period}\"\n\ndef main():\n    # Input parameters and constraints:\n    # Arrival: Richmond District at 9:00AM => 9*60 = 540 minutes since midnight.\n    start_time_minutes = 9 * 60  # 9:00AM is 540 minutes\n    start_location = \"Richmond District\"\n    \n    # Betty at Alamo Square from 12:30PM to 7:15PM.\n    betty_available_start = 12 * 60 + 30  # 750 minutes since midnight\n    betty_available_end = 19 * 60 + 15    # 1155 minutes since midnight\n\n    # Minimum meeting duration (in minutes)\n    meeting_duration = 75\n\n    # Travel times in minutes:\n    travel_time_rd_to_as = 13  # Richmond District to Alamo Square\n    travel_time_as_to_rd = 12  # Alamo Square to Richmond District (not used in this schedule)\n\n    # To meet Betty, we want to schedule departure from Richmond District such that we arrive\n    # at Alamo Square at or after Betty starts being available (12:30PM).\n    # Hence, departure time from Richmond District should be:\n    departure_time_rd = betty_available_start - travel_time_rd_to_as  # departure time in minutes\n    # Ensure departure is not before our arrival at Richmond District\n    if departure_time_rd < start_time_minutes:\n        departure_time_rd = start_time_minutes\n\n    # Calculate arrival time at Alamo Square\n    arrival_time_as = departure_time_rd + travel_time_rd_to_as\n\n    # Check if there's enough time for the meeting given Betty's availability window.\n    latest_possible_meeting_start = betty_available_end - meeting_duration\n    if arrival_time_as > latest_possible_meeting_start:\n        # If arrival time is too late, adjust departure to ensure meeting duration is satisfied.\n        # This simple logic sets the meeting start at latest_possible_meeting_start.\n        arrival_time_as = latest_possible_meeting_start\n        departure_time_rd = arrival_time_as - travel_time_rd_to_as\n\n    # Create schedule list following the expected structure.\n    schedule = []\n    \n    # Start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": minutes_to_time_str(start_time_minutes)\n    })\n\n    # Wait at Richmond District until departure time (if there is waiting time)\n    if departure_time_rd > start_time_minutes:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": minutes_to_time_str(departure_time_rd)\n        })\n\n    # Travel action from Richmond District to Alamo Square\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_time_rd_to_as,\n        \"time\": minutes_to_time_str(arrival_time_as),\n        \"to\": \"Alamo Square\"\n    })\n\n    # Meet action with Betty at Alamo Square (meeting lasts at least 75 minutes)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meeting_duration,\n        \"time\": minutes_to_time_str(arrival_time_as)\n    })\n\n    # Output the result as JSON formatted dictionary\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_81",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "5:35PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "5:35PM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "5:45PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "7:00PM",
                    "duration": 9,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "5:45PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime to H:MMAM/PM (remove any leading zero from hour)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters\n    # Arrival at Golden Gate Park at 9:00AM\n    arrival_time = datetime(2023, 1, 1, 9, 0)\n    start_location = \"Golden Gate Park\"\n    \n    # Ashley's availability at Alamo Square from 5:45PM to 9:30PM\n    ashley_start = datetime(2023, 1, 1, 17, 45)\n    ashley_end = datetime(2023, 1, 1, 21, 30)\n    \n    # Travel durations (in minutes)\n    travel_ggp_to_as = 10\n    travel_as_to_ggp = 9\n    \n    # Minimum meeting duration with Ashley (in minutes)\n    meeting_duration_required = 75\n    \n    # Calculate departure time from Golden Gate Park so that arrival at Alamo Square is exactly Ashley's start time\n    departure_time_from_ggp = ashley_start - timedelta(minutes=travel_ggp_to_as)\n    \n    # Calculate arrival time at Alamo Square after travel from Golden Gate Park\n    arrival_at_as = departure_time_from_ggp + timedelta(minutes=travel_ggp_to_as)\n    \n    # Meeting with Ashley starts as soon as you arrive\n    meeting_start = arrival_at_as\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration_required)\n    \n    # Optionally, travel back to Golden Gate Park after meeting (if needed)\n    departure_time_from_as = meeting_end\n    arrival_back_at_ggp = departure_time_from_as + timedelta(minutes=travel_as_to_ggp)\n    \n    # Build the schedule list following the required structure.\n    schedule = []\n    \n    # 1. Start at Golden Gate Park at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # 2. Wait at Golden Gate Park until departure time (to catch Ashley on time).\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": start_location,\n        \"time\": format_time(departure_time_from_ggp)\n    })\n    \n    # 3. Travel from Golden Gate Park to Alamo Square.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_ggp_to_as,\n        \"time\": format_time(departure_time_from_ggp),\n        \"to\": \"Alamo Square\"\n    })\n    \n    # 4. Meet Ashley at Alamo Square for the minimum required duration.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meeting_duration_required,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # 5. (Optional) Travel back from Alamo Square to Golden Gate Park after the meeting.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_as_to_ggp,\n        \"time\": format_time(departure_time_from_as),\n        \"to\": \"Golden Gate Park\"\n    })\n    \n    # Create the final schedule dictionary\n    final_schedule = {\"schedule\": schedule}\n    \n    # Output the result as a JSON-formatted dictionary\n    print(json.dumps(final_schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_82",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:33PM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:33PM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\n\ndef minutes_to_time_str(total_minutes):\n    # Convert minutes since midnight to \"H:MMAM/PM\" format.\n    hour = (total_minutes // 60) % 24\n    minute = total_minutes % 60\n    period = \"AM\" if hour < 12 else \"PM\"\n    display_hour = hour if 1 <= hour <= 12 else hour % 12\n    if display_hour == 0:\n        display_hour = 12\n    return f\"{display_hour}:{minute:02d}{period}\"\n\ndef main():\n    # Input parameters\n    # Travel distances (in minutes)\n    travel_presidio_to_ggp = 12\n    travel_ggp_to_presidio = 11\n\n    # Meeting constraints\n    # You arrive at Presidio at 9:00AM.\n    arrival_presidio = 9 * 60  # 9:00AM in minutes after midnight (9*60 = 540)\n    \n    # Carol is at Golden Gate Park from 9:45PM to 10:30PM.\n    carol_available_start = 21 * 60 + 45  # 9:45PM in minutes (1305 minutes)\n    carol_available_end = 22 * 60 + 30    # 10:30PM in minutes (1350 minutes)\n    \n    meet_duration = 45  # minutes required to meet Carol\n\n    # To get the required meeting time, we need to arrive at Golden Gate Park by 9:45PM.\n    # Therefore, we'll plan to leave Presidio at (Carol available start - travel time)\n    departure_from_presidio = carol_available_start - travel_presidio_to_ggp  # compute departure time from Presidio\n\n    # Create the schedule steps.\n    schedule = []\n\n    # Step 1: start at Presidio at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Presidio\",\n        \"time\": minutes_to_time_str(arrival_presidio)\n    })\n\n    # Step 2: wait at Presidio until departure time.\n    # We assume waiting means staying at the same location until it's time to travel.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Presidio\",\n        \"time\": minutes_to_time_str(departure_from_presidio)\n    })\n\n    # Step 3: travel from Presidio to Golden Gate Park.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_presidio_to_ggp,\n        \"time\": minutes_to_time_str(departure_from_presidio),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Step 4: meet Carol at Golden Gate Park.\n    # The meeting starts at Carol's available start time.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meet_duration,\n        \"time\": minutes_to_time_str(carol_available_start)\n    })\n\n    # Compile the final dictionary\n    result = {\"schedule\": schedule}\n\n    # Output the result as JSON-formatted string\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_83",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:55AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "10:55AM",
                    "duration": 5,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 5,
                    "time": "9:05AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    # Convert time string in format \"H:MMAM/PM\" to minutes since midnight\n    # Example: \"9:00AM\" => 540, \"11:00AM\" => 660\n    time_obj = datetime.strptime(time_str, \"%I:%M%p\")\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    # Convert minutes since midnight to \"H:MMAM/PM\" without leading zero for hour.\n    hour = minutes // 60\n    minute = minutes % 60\n    suffix = \"AM\" if hour < 12 or hour == 24 else \"PM\"\n    # Adjust hour for 12-hour clock\n    hour_mod = hour\n    if hour == 0:\n        hour_mod = 12\n    elif hour > 12:\n        hour_mod = hour - 12\n    return f\"{hour_mod}:{minute:02d}{suffix}\"\n\ndef compute_schedule():\n    # Input variables based on the problem statement\n    # Locations and travel times\n    origin = \"Alamo Square\"\n    destination = \"Haight-Ashbury\"\n    travel_time_alamo_to_haight = 5  # in minutes\n    travel_time_haight_to_alamo = 5  # in minutes\n\n    # Time constraints\n    arrival_time_alamo = \"9:00AM\"  # arrival at Alamo Square\n    thomas_available_start = \"11:00AM\"\n    thomas_available_end = \"1:00PM\"\n    min_meeting_duration = 30  # in minutes\n\n    # Convert times to minutes since midnight\n    arrival_alamo_min = time_to_minutes(arrival_time_alamo)\n    thomas_start_min = time_to_minutes(thomas_available_start)\n    thomas_end_min = time_to_minutes(thomas_available_end)\n\n    # Calculate the latest departure from Alamo such that we arrive exactly at Thomas' available start\n    departure_alamo_min = thomas_start_min - travel_time_alamo_to_haight\n    # If arrival time is earlier than departure time, we need to wait at Alamo Square.\n    # Meeting will start at Thomas' available start time.\n    meeting_start_min = thomas_start_min\n    meeting_duration = min_meeting_duration\n    meeting_end_min = meeting_start_min + meeting_duration\n\n    # Build the schedule as a list of events.\n    schedule = []\n    # Start at Alamo Square\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": origin,\n        \"time\": minutes_to_time(arrival_alamo_min)\n    })\n    # Wait at Alamo Square until departure time if necessary\n    if arrival_alamo_min < departure_alamo_min:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": origin,\n            \"time\": minutes_to_time(departure_alamo_min)\n        })\n    # Travel from Alamo Square to Haight-Ashbury\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": origin,\n        \"duration\": travel_time_alamo_to_haight,\n        \"time\": minutes_to_time(departure_alamo_min),\n        \"to\": destination\n    })\n    # Meeting with Thomas at Haight-Ashbury\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": meeting_duration,\n        \"time\": minutes_to_time(meeting_start_min)\n    })\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule_plan = compute_schedule()\n    print(json.dumps(schedule_plan, indent=2))",
            "count": "meeting_planning_example_84",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "1:11PM",
                    "duration": 4,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "1:15PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 4,
                    "time": "9:04AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Use strftime with %-I to remove any leading zero for hour.\n    # Note: On Windows, you may need to use %#I instead.\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input parameters:\n    # Travel distances in minutes:\n    travel_north_to_russian = 4  # minutes from North Beach to Russian Hill\n    travel_russian_to_north = 5  # minutes from Russian Hill to North Beach\n\n    # Constraints:\n    # Arrival at North Beach at 9:00AM\n    start_time = datetime(2020, 1, 1, 9, 0)\n    start_location = \"North Beach\"\n    \n    # William will be at Russian Hill from 1:15PM to 9:30PM.\n    # We want to meet him for at least 15 minutes.\n    william_available_start = datetime(2020, 1, 1, 13, 15)  # 1:15PM\n    meeting_min_duration = 15  # minutes\n    \n    # To meet him, we must travel from North Beach to Russian Hill.\n    # We want to arrive at Russian Hill by the time William is available.\n    # Hence, we need to depart North Beach at:\n    departure_time = william_available_start - timedelta(minutes=travel_north_to_russian)\n    departure_location = start_location\n    travel_duration = travel_north_to_russian\n    destination = \"Russian Hill\"\n    \n    # After travel, we assume we wait until William is available.\n    # Our arrival time at Russian Hill:\n    arrival_time = departure_time + timedelta(minutes=travel_duration)\n    # In an optimal schedule, we want to meet him as soon as he arrives.\n    meeting_start_time = max(arrival_time, william_available_start)\n    \n    # Construct the schedule as a JSON-formatted dictionary.\n    schedule = {\n        \"schedule\": [\n            {\n                \"action\": \"start\",\n                \"location\": start_location,\n                \"time\": format_time(start_time)\n            },\n            {\n                \"action\": \"travel\",\n                \"location\": departure_location,\n                \"duration\": travel_duration,\n                \"time\": format_time(departure_time),\n                \"to\": destination\n            },\n            {\n                \"action\": \"wait\",\n                \"location\": destination,\n                \"time\": format_time(arrival_time)\n            },\n            {\n                \"action\": \"meet\",\n                \"location\": destination,\n                \"duration\": meeting_min_duration,\n                \"time\": format_time(meeting_start_time)\n            }\n        ]\n    }\n    \n    # Output the result in JSON format.\n    print(json.dumps(schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_85",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "7:33PM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "7:33PM",
                    "duration": 12,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "7:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (remove leading zero if present)\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters and constraints\n    # Arrival time at Marina District\n    arrival_time = datetime(2023, 1, 1, 9, 0)  # 9:00AM\n    \n    # Daniel's availability at Nob Hill: from 7:45PM to 9:00PM\n    meeting_start = datetime(2023, 1, 1, 19, 45)  # 7:45PM\n    meeting_end = datetime(2023, 1, 1, 21, 0)     # 9:00PM\n    \n    # Travel times in minutes (provided)\n    travel_time_marina_to_nobhill = timedelta(minutes=12)\n    travel_time_nobhill_to_marina = timedelta(minutes=11)  # Not used in current schedule\n\n    # Compute departure time from Marina District to arrive at Nob Hill exactly at 7:45PM\n    departure_time = meeting_start - travel_time_marina_to_nobhill  # Should be 7:33PM\n    \n    # Meeting duration in minutes (ensure minimum 15 minutes, but we maximize Daniel's available window)\n    meeting_duration = int((meeting_end - meeting_start).total_seconds() // 60)\n    if meeting_duration < 15:\n        raise ValueError(\"Meeting duration with Daniel is less than the required minimum of 15 minutes.\")\n\n    # Build the schedule step by step\n    schedule = []\n    \n    # Step 1: Start at Marina District at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Marina District\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Step 2: Wait at Marina District until departure time (for travel)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Marina District\",\n        \"time\": format_time(departure_time)\n    })\n    \n    # Step 3: Travel from Marina District to Nob Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": int(travel_time_marina_to_nobhill.total_seconds() // 60),\n        \"time\": format_time(departure_time),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Step 4: Meet Daniel at Nob Hill starting at 7:45PM\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Final schedule dictionary\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Output the schedule as JSON-formatted dictionary\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_86",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "9:11AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "10:26AM",
                    "duration": 10,
                    "to": "Embarcadero"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 75,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (remove any leading 0 in hour)\n    # Using %-I may not be portable on Windows, so we do custom formatting.\n    hour = dt.hour\n    minute = dt.minute\n    ampm = \"AM\" if hour < 12 else \"PM\"\n    hour = hour % 12\n    if hour == 0:\n        hour = 12\n    return f\"{hour}:{minute:02d}{ampm}\"\n\ndef main():\n    # Input constraints and travel durations (in minutes)\n    # Arrival time at Embarcadero\n    arrival_embarcadero = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    travel_ep_to_ph = 11  # Embarcadero to Pacific Heights\n    travel_ph_to_ep = 10  # Pacific Heights to Embarcadero\n\n    # James availability at Pacific Heights\n    james_available_start = datetime.strptime(\"8:30AM\", \"%I:%M%p\")\n    james_available_end   = datetime.strptime(\"3:00PM\", \"%I:%M%p\")\n    meeting_duration = 75  # in minutes\n\n    schedule = []\n    \n    # Step 1: Start at Embarcadero at arrival time\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Embarcadero\",\n        \"time\": format_time(arrival_embarcadero)\n    })\n    \n    # Step 2: Travel from Embarcadero to Pacific Heights\n    # Depart at arrival time.\n    travel_departure_time = arrival_embarcadero\n    travel_duration = travel_ep_to_ph  # minutes\n    travel_arrival_time = travel_departure_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_departure_time),\n        \"to\": \"Pacific Heights\"\n    })\n    \n    # Step 3: Wait if needed until James is available.\n    # If arrival is before James's start time, wait until that time.\n    meeting_start_time = travel_arrival_time\n    if travel_arrival_time < james_available_start:\n        # Calculate wait duration (not used in subsequent calculation but can show schedule)\n        wait_time = james_available_start - travel_arrival_time\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": format_time(travel_arrival_time)\n        })\n        meeting_start_time = james_available_start\n\n    # Step 4: Meeting with James for minimum required duration\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    # Check if meeting_end_time is within James' availability:\n    if meeting_end_time > james_available_end:\n        raise ValueError(\"Cannot schedule meeting with James within his available time window.\")\n        \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Step 5: Travel back to Embarcadero after the meeting\n    travel_back_departure_time = meeting_end_time\n    travel_back_duration = travel_ph_to_ep\n    travel_back_arrival_time = travel_back_departure_time + timedelta(minutes=travel_back_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Embarcadero\",\n        \"duration\": travel_back_duration,\n        \"time\": format_time(travel_back_departure_time),\n        \"to\": \"Embarcadero\"\n    })\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_87",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "8:34PM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "8:34PM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "8:45PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 15,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time in H:MMAM/PM, remove leading zero if present\n    t_str = dt.strftime(\"%I:%M%p\")\n    if t_str[0] == \"0\":\n        t_str = t_str[1:]\n    return t_str\n\n# Input parameters (all times and durations)\n# Starting location and starting time: Sunset District at 9:00AM\nstart_location = \"Sunset District\"\nstart_time_str = \"9:00AM\"\n\n# Joshua's availability at Golden Gate Park from 8:45PM to 9:45PM\njoshua_available_start_str = \"8:45PM\"\njoshua_available_end_str = \"9:45PM\"\nmin_meet_duration = 15  # in minutes\n\n# Travel times (in minutes)\ntravel_Sunset_to_GGP = 11\ntravel_GGP_to_Sunset = 10\n\n# Base date for the schedule (date is arbitrary)\nbase_date = datetime(2023, 1, 1)\n\n# Convert input times to datetime objects using the base_date\nstart_time = datetime.strptime(start_time_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\njoshua_avail_start = datetime.strptime(joshua_available_start_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\njoshua_avail_end = datetime.strptime(joshua_available_end_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\n\n# Compute the optimum times:\n# To meet Joshua as soon as he is available, we want to arrive at Golden Gate Park exactly at his available start.\n# Therefore, we need to depart from Sunset District such that arrival time = joshua_avail_start.\ndeparture_time = joshua_avail_start - timedelta(minutes=travel_Sunset_to_GGP)\nmeeting_start = joshua_avail_start\nmeeting_end = meeting_start + timedelta(minutes=min_meet_duration)\n\n# Build the schedule as a list of events\nschedule = []\n\n# 1. Starting event at Sunset District at 9:00AM\nschedule.append({\n    \"action\": \"start\",\n    \"location\": start_location,\n    \"time\": format_time(start_time)\n})\n\n# 2. Wait event at Sunset District until the departure time for travel.\n# Only add wait if the departure time is later than the start time.\nif departure_time > start_time:\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": start_location,\n        \"time\": format_time(departure_time)\n    })\n\n# 3. Travel event from Sunset District to Golden Gate Park.\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": \"Golden Gate Park\",\n    \"duration\": travel_Sunset_to_GGP,\n    \"time\": format_time(departure_time),\n    \"to\": \"Golden Gate Park\"\n})\n\n# 4. Meet event with Joshua at Golden Gate Park.\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": \"Golden Gate Park\",\n    \"duration\": min_meet_duration,\n    \"time\": format_time(meeting_start)\n})\n\n# Create the final dictionary output\noutput = {\"schedule\": schedule}\n\n# Output the result as a JSON-formatted dictionary\nprint(json.dumps(output, indent=2))",
            "count": "meeting_planning_example_88",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "5:45PM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "5:45PM",
                    "duration": 15,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "6:00PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 60,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time in \"H:MMAM/PM\" format (remove any leading zero)\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters / constraints\n    # Arrival at Mission District at 9:00AM\n    arrival_str = \"9:00AM\"\n    arrival_time = datetime.strptime(arrival_str, \"%I:%M%p\")\n    \n    # Patricia will be at Bayview from 6:00PM to 7:30PM\n    patricia_available_start_str = \"6:00PM\"\n    patricia_available_end_str = \"7:30PM\"\n    patricia_start = datetime.strptime(patricia_available_start_str, \"%I:%M%p\")\n    patricia_end = datetime.strptime(patricia_available_end_str, \"%I:%M%p\")\n    \n    # Required minimum meeting duration with Patricia (in minutes)\n    meeting_duration_minutes = 60\n    \n    # Travel times (in minutes):\n    travel_md_to_bayview = 15\n    travel_bayview_to_md = 13  # (not used in our schedule since return is not mandatory)\n    \n    # To meet Patricia we need to start meeting no earlier than when she is available.\n    # We compute departure time from Mission District so that arrival at Bayview is exactly at 6:00PM.\n    travel_time_td = timedelta(minutes=travel_md_to_bayview)\n    meeting_start_time = patricia_start  # 6:00 PM is the earliest we can meet her.\n    departure_time = meeting_start_time - travel_time_td  # leave Mission District to travel\n    \n    # Calculate travel arrival time (should be patricia_start)\n    travel_arrival_time = departure_time + travel_time_td\n\n    # Now, we schedule the meeting with Patricia for the required duration.\n    meeting_duration_td = timedelta(minutes=meeting_duration_minutes)\n    meeting_end_time = travel_arrival_time + meeting_duration_td\n\n    # Build the schedule steps according to the required structure.\n    schedule = []\n    \n    # Start action at Mission District at arrival time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Mission District\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Wait at Mission District until departure time.\n    # (In our schedule, waiting is implicitly from arrival until departure)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Mission District\",\n        \"time\": format_time(departure_time)\n    })\n    \n    # Travel action from Mission District to Bayview.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_md_to_bayview,\n        \"time\": format_time(departure_time),\n        \"to\": \"Bayview\"\n    })\n    \n    # Meet action with Patricia at Bayview.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration_minutes,\n        \"time\": format_time(travel_arrival_time)\n    })\n    \n    # Prepare the final output dictionary.\n    output = {\"schedule\": schedule}\n    \n    # Print the output in JSON formatted string.\n    print(json.dumps(output, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_89",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format the time as H:MMAM/PM without leading 0 in hour\n    time_str = dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\")\n    # On Windows, %-I might not be supported so instead, remove leading zero if present.\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters (in minutes and times)\n    travel_time_alamo_to_chinatown = 16  # minutes from Alamo Square to Chinatown\n    travel_time_chinatown_to_alamo = 17  # minutes for the opposite direction, not used here\n\n    # Arrival times and meeting constraints\n    start_location = \"Alamo Square\"\n    meeting_location = \"Chinatown\"\n    start_time_str = \"9:00AM\"\n    laura_avail_start_str = \"8:15AM\"\n    laura_avail_end_str = \"6:45PM\"\n    min_meeting_duration = 15  # minutes\n\n    # Convert start time to datetime (we will use a dummy date: Jan 1, 2023)\n    base_date = \"2023-01-01 \"\n    start_dt = datetime.strptime(base_date + start_time_str, \"%Y-%m-%d %I:%M%p\")\n    laura_avail_start = datetime.strptime(base_date + laura_avail_start_str, \"%Y-%m-%d %I:%M%p\")\n    laura_avail_end = datetime.strptime(base_date + laura_avail_end_str, \"%Y-%m-%d %I:%M%p\")\n\n    # First event: Start at Alamo Square at 9:00AM\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_dt)\n    })\n\n    # Next: Travel from Alamo Square to Chinatown. Departure is at the starting time.\n    travel_departure_time = start_dt\n    travel_event = {\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_alamo_to_chinatown,\n        \"time\": format_time(travel_departure_time),\n        \"to\": meeting_location\n    }\n    schedule.append(travel_event)\n\n    # Arrival time at Chinatown\n    arrival_dt = travel_departure_time + timedelta(minutes=travel_time_alamo_to_chinatown)\n\n    # Check if we need to wait until Laura is available.\n    # Since Laura is available from 8:15AM and arrival_dt is after that, no waiting is needed.\n    if arrival_dt < laura_avail_start:\n        # We will wait until Laura is available.\n        wait_event = {\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(laura_avail_start)\n        }\n        schedule.append(wait_event)\n        meeting_start_dt = laura_avail_start\n    else:\n        # Start meeting immediately upon arrival.\n        meeting_start_dt = arrival_dt\n\n    # Meeting event: meeting Laura for at least 15 minutes.\n    meeting_event = {\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start_dt)\n    }\n    schedule.append(meeting_event)\n\n    # Optional: If desired, you could compute an end of meeting time (not required by JSON structure).\n    meeting_end_dt = meeting_start_dt + timedelta(minutes=min_meeting_duration)\n    # Ensure meeting_end_dt is within Laura's available window (it should be).\n    if meeting_end_dt > laura_avail_end:\n        raise ValueError(\"Meeting cannot be scheduled within Laura's available time.\")\n\n    # Final schedule dictionary:\n    result = {\"schedule\": schedule}\n\n    # Output result as JSON formatted string.\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_90",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "6:46PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "6:46PM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "7:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    \"\"\"Format datetime object to H:MMAM/PM with no leading zero in hour.\"\"\"\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str.startswith(\"0\"):\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters (times and durations)\n    arrival_time_str = \"9:00AM\"  # You arrive at Russian Hill at 9:00AM\n    daniel_meet_start_str = \"7:00PM\"  # Daniel available start time at Richmond District\n    daniel_meet_end_str = \"8:15PM\"    # Daniel available end time at Richmond District\n    min_meeting_duration = 75  # minutes required with Daniel\n\n    # Travel times (in minutes)\n    travel_rh_to_richmond = 14  # from Russian Hill to Richmond District\n\n    # For calculation purposes, we'll choose an arbitrary date (today's date)\n    base_date = datetime.today().date()\n    \n    # Parse the times into datetime objects\n    arrival_time = datetime.strptime(f\"{base_date} {arrival_time_str}\", \"%Y-%m-%d %I:%M%p\")\n    daniel_start = datetime.strptime(f\"{base_date} {daniel_meet_start_str}\", \"%Y-%m-%d %I:%M%p\")\n    daniel_end = datetime.strptime(f\"{base_date} {daniel_meet_end_str}\", \"%Y-%m-%d %I:%M%p\")\n    \n    # Ensure the meeting with Daniel can last at least the required duration.\n    available_meet_duration = (daniel_end - daniel_start).seconds // 60\n    if available_meet_duration < min_meeting_duration:\n        raise ValueError(\"Not enough available time to meet Daniel for the required duration.\")\n    \n    # To meet Daniel, you need to be at Richmond District exactly at the meeting start time (7:00PM).\n    # Calculate departure time from Russian Hill that will allow arriving exactly at 7:00PM.\n    departure_time = daniel_start - timedelta(minutes=travel_rh_to_richmond)\n    \n    # Now build the schedule.\n    # We assume the optimal schedule is:\n    # 1. Start at Russian Hill at 9:00AM.\n    # 2. Wait at Russian Hill until departure time.\n    # 3. Travel from Russian Hill to Richmond District (14 minutes, leaving at departure_time).\n    # 4. Meet Daniel in Richmond District for min_meeting_duration starting at 7:00PM.\n    \n    schedule = []\n    \n    # 1. Start event at Russian Hill at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Russian Hill\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    # 2. Wait event at Russian Hill until departure time.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Russian Hill\",\n        \"time\": format_time(departure_time)\n    })\n    \n    # 3. Travel from Russian Hill to Richmond District.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_rh_to_richmond,\n        \"time\": format_time(departure_time),\n        \"to\": \"Richmond District\"\n    })\n    \n    # 4. Meet Daniel at Richmond District.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(daniel_start)\n    })\n    \n    # Build result dictionary\n    result = {\"schedule\": schedule}\n    \n    # Print output as JSON-formatted dictionary\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_91",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "1:37PM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "1:37PM",
                    "duration": 23,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "2:00PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 45,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Use %-I for hour without leading zero if supported;\n    # for cross-platform compatibility, we remove any leading 0 manually.\n    return dt.strftime(\"%-I:%M%p\") if dt.strftime(\"%-I\") else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters\n    # Start: Arrive at Financial District at 9:00AM\n    start_location = \"Financial District\"\n    start_time_str = \"9:00AM\"\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\")\n    \n    # Carol's availability at The Castro: from 2:00PM to 5:45PM\n    carol_location = \"The Castro\"\n    carol_start_str = \"2:00PM\"\n    carol_end_str = \"5:45PM\"\n    carol_start = datetime.strptime(carol_start_str, \"%I:%M%p\")\n    carol_end = datetime.strptime(carol_end_str, \"%I:%M%p\")\n    \n    # Travel times (in minutes)\n    travel_FD_to_Castro = 23  # from Financial District to The Castro\n    travel_Castro_to_FD = 20  # from The Castro to Financial District, not used in this schedule\n    \n    # Minimal meeting duration for Carol in minutes\n    min_meet_duration = 45\n    \n    # Compute when to leave Financial District to arrive at The Castro exactly at Carol's available start time\n    # Arrival time needed: carol_start, so departure time from FD is:\n    departure_time = carol_start - timedelta(minutes=travel_FD_to_Castro)\n    \n    # Meeting will start at Carol's available time if arriving just on time:\n    meeting_start = carol_start\n    meeting_end = meeting_start + timedelta(minutes=min_meet_duration)\n    \n    # Build schedule\n    schedule = []\n    \n    # 1. Start at Financial District at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # 2. Wait at Financial District until departure time (if any waiting is needed)\n    # Only add wait action if departure_time is after start_time.\n    if departure_time > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(departure_time)\n        })\n    \n    # 3. Travel from Financial District to The Castro\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": carol_location,\n        \"duration\": travel_FD_to_Castro,\n        \"time\": format_time(departure_time),\n        \"to\": carol_location\n    })\n    \n    # 4. Meet Carol at The Castro for at least 45 minutes \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": carol_location,\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Output the schedule as a JSON formatted dictionary.\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_92",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:54PM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "6:54PM",
                    "duration": 6,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "7:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "8:15PM",
                    "duration": 3,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "8:18PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 6,
                    "time": "9:06AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_str_to_datetime(timestr):\n    # expects format like \"9:00AM\" or \"6:54PM\"\n    return datetime.strptime(timestr, \"%I:%M%p\")\n\ndef datetime_to_time_str(dt):\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef add_minutes(time_dt, minutes):\n    return time_dt + timedelta(minutes=minutes)\n\ndef main():\n    # Meeting constraints and travel times (in minutes)\n    start_location = \"North Beach\"\n    meet_location = \"Chinatown\"\n    arrival_time_str = \"9:00AM\"  # arrival at North Beach\n    travel_NB_to_CT = 6        # minutes from North Beach to Chinatown\n    travel_CT_to_NB = 3        # minutes from Chinatown to North Beach\n    \n    # Emily's availability and meeting requirement\n    emily_available_start_str = \"7:00PM\"\n    emily_available_end_str = \"9:00PM\"\n    min_meet_duration = 75     # minutes required with Emily\n\n    # Convert times from strings to datetime objects.\n    start_time = time_str_to_datetime(arrival_time_str)\n    emily_available_start = time_str_to_datetime(emily_available_start_str)\n    emily_available_end = time_str_to_datetime(emily_available_end_str)\n    \n    # To meet Emily for at least the minimum required time, we aim to start the meeting as early as possible.\n    # We must arrive at Chinatown by Emily's available start (7:00PM). \n    # Therefore, we need to depart from North Beach by:\n    depart_from_nb = emily_available_start - timedelta(minutes=travel_NB_to_CT)\n    depart_from_nb_str = depart_from_nb.strftime(\"%-I:%M%p\")\n    \n    # Build the schedule.\n    schedule = []\n    \n    # Step 1: Start at North Beach at arrival time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": start_time.strftime(\"%-I:%M%p\")\n    })\n    \n    # Step 2: Wait at North Beach until departure time (if any waiting time).\n    # Only add wait event if departure time is later than start time.\n    if depart_from_nb > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": depart_from_nb_str\n        })\n    \n    # Step 3: Travel from North Beach to Chinatown.\n    travel_depart_time = depart_from_nb\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meet_location,\n        \"duration\": travel_NB_to_CT,\n        \"time\": travel_depart_time.strftime(\"%-I:%M%p\"),\n        \"to\": meet_location\n    })\n    \n    # Step 4: Arrive at Chinatown and start meeting Emily.\n    # Arrival time at Chinatown should equal Emily's availability start.\n    meeting_start_time = add_minutes(travel_depart_time, travel_NB_to_CT)\n    # Ensure that even if we have extra waiting time, meeting starts at Emily's available start.\n    if meeting_start_time < emily_available_start:\n        meeting_start_time = emily_available_start\n    meeting_start_time_str = meeting_start_time.strftime(\"%-I:%M%p\")\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meet_location,\n        \"duration\": min_meet_duration,\n        \"time\": meeting_start_time_str\n    })\n    \n    # Step 5: Compute when the meeting ends.\n    meeting_end_time = add_minutes(meeting_start_time, min_meet_duration)\n    \n    # Optional: if there is time left in Emily's window, we assume meeting stops at the min required duration.\n    # Step 6: Travel from Chinatown back to North Beach.\n    travel_back_depart_time = meeting_end_time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_CT_to_NB,\n        \"time\": travel_back_depart_time.strftime(\"%-I:%M%p\"),\n        \"to\": start_location\n    })\n    \n    # Step 7: Arrive at North Beach.\n    arrival_back_time = add_minutes(travel_back_depart_time, travel_CT_to_NB)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": start_location,\n        \"time\": arrival_back_time.strftime(\"%-I:%M%p\")\n    })\n    \n    # Build the final result.\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Output the schedule as JSON.\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_93",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "11:02AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "11:02AM",
                    "duration": 13,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:15AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "11:30AM",
                    "duration": 15,
                    "to": "Alamo Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Return time formatted as H:MMAM/PM - remove any leading zero in hour.\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters (all times are on the same arbitrary day)\n    # Arrival and meeting window times:\n    arrival_time_str = \"9:00AM\"\n    james_available_start_str = \"11:15AM\"\n    james_available_end_str = \"12:00PM\"\n    minimum_meet_duration = 15  # minutes meeting with James\n\n    # Travel distances (in minutes)\n    travel_alamo_to_russian = 13\n    travel_russian_to_alamo = 15\n\n    # Define a base date (today) for datetime operations\n    base_date = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)\n    \n    # Parse the times into datetime objects\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M%p\")\n    arrival_time = base_date.replace(hour=arrival_time.hour, minute=arrival_time.minute)\n    \n    james_start = datetime.strptime(james_available_start_str, \"%I:%M%p\")\n    james_start = base_date.replace(hour=james_start.hour, minute=james_start.minute)\n    \n    james_end = datetime.strptime(james_available_end_str, \"%I:%M%p\")\n    james_end = base_date.replace(hour=james_end.hour, minute=james_end.minute)\n    \n    # Compute departure time from Alamo Square so that arrival at Russian Hill is exactly when James is available.\n    # We want to arrive at James_start. To do so, we subtract the travel time.\n    departure_for_james = james_start - timedelta(minutes=travel_alamo_to_russian)\n    \n    # Safety check: if departure_for_james is before arrival, adjust accordingly.\n    if departure_for_james < arrival_time:\n        departure_for_james = arrival_time\n\n    # Meeting start time will be max(arrival at Russian Hill, james_start)\n    meeting_start = max(james_start, departure_for_james + timedelta(minutes=travel_alamo_to_russian))\n    # Meeting end time: add the meeting duration, but cannot exceed James's available end time.\n    meeting_end = meeting_start + timedelta(minutes=minimum_meet_duration)\n    if meeting_end > james_end:\n        # Adjust meeting start if needed (this case is unlikely given the numbers)\n        meeting_start = james_end - timedelta(minutes=minimum_meet_duration)\n        meeting_end = james_end\n\n    # Compute return travel departure time from Russian Hill.\n    # Assume you depart immediately after the meeting.\n    departure_from_russian = meeting_end\n    arrival_back_alamo = departure_from_russian + timedelta(minutes=travel_russian_to_alamo)\n\n    # Build the schedule events according to the required JSON format.\n    schedule = []\n\n    # 1. Start at Alamo Square at arrival_time\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Alamo Square\",\n        \"time\": format_time(arrival_time)\n    })\n\n    # 2. Wait at Alamo Square until departure_for_james (if there is waiting time)\n    if departure_for_james > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": format_time(departure_for_james)\n        })\n\n    # 3. Travel from Alamo Square to Russian Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_alamo_to_russian,\n        \"time\": format_time(departure_for_james),\n        \"to\": \"Russian Hill\"\n    })\n\n    # 4. Meet James at Russian Hill\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": minimum_meet_duration,\n        \"time\": format_time(meeting_start)\n    })\n\n    # 5. Travel back from Russian Hill to Alamo Square\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_russian_to_alamo,\n        \"time\": format_time(departure_from_russian),\n        \"to\": \"Alamo Square\"\n    })\n\n    # Final output JSON\n    output = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(output, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_94",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "10:38AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "10:38AM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "11:00AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "12:30PM",
                    "duration": 21,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time in H:MMAM/PM without a leading zero for hour.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters and constraints\n    # Starting location: North Beach at 9:00AM\n    start_location = \"North Beach\"\n    start_time = datetime(2023, 1, 1, 9, 0)  # arbitrary date\n    \n    # Steven's meeting window at Bayview\n    meeting_location = \"Bayview\"\n    steven_available_start = datetime(2023, 1, 1, 11, 0)\n    steven_available_end = datetime(2023, 1, 1, 12, 45)\n    required_meeting_duration = 90  # minutes\n    \n    # Travel times (in minutes)\n    travel_nb_to_bv = 22  # North Beach to Bayview\n    travel_bv_to_nb = 21  # Bayview to North Beach\n\n    # Calculate optimal schedule:\n    # To meet Steven for 90 minutes, we want to start meeting at the earliest possible time within his window.\n    # Therefore, plan to start meeting at Bayview at steven_available_start (11:00AM).\n    # To arrive exactly at 11:00AM, we need to leave North Beach at 11:00AM - travel_nb_to_bv minutes.\n    departure_time_from_nb = steven_available_start - timedelta(minutes=travel_nb_to_bv)\n    \n    # Arrival at Bayview after travel:\n    arrival_time_at_bv = departure_time_from_nb + timedelta(minutes=travel_nb_to_bv)\n    \n    # Meeting event: meeting starts at 11:00AM (arrival time) and lasts for required 90 minutes\n    meeting_start = arrival_time_at_bv\n    meeting_duration_td = timedelta(minutes=required_meeting_duration)\n    meeting_end = meeting_start + meeting_duration_td\n\n    # Check if meeting_end is within Steven's available window.\n    # If meeting_end goes past steven_available_end, then adjust meeting duration to maximum possible\n    if meeting_end > steven_available_end:\n        # Adjust meeting duration if possible: use the maximum available time\n        available_duration = int((steven_available_end - meeting_start).total_seconds() // 60)\n        if available_duration < required_meeting_duration:\n            # Cannot meet the required duration; for this schedule we assume that required meeting duration must be met.\n            raise ValueError(\"Cannot schedule a meeting that satisfies the required minimum duration.\")\n        else:\n            meeting_end = meeting_start + timedelta(minutes=available_duration)\n    \n    # Travel back from Bayview to North Beach.\n    departure_time_from_bv = meeting_end  # leaving immediately after meeting\n    arrival_time_at_nb = departure_time_from_bv + timedelta(minutes=travel_bv_to_nb)\n\n    # Create schedule events:\n    schedule = []\n    # Start event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    # Wait event at North Beach until departure time for travel to Bayview if needed.\n    if departure_time_from_nb > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(departure_time_from_nb)\n        })\n    # Travel event from North Beach to Bayview.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_nb_to_bv,\n        \"time\": format_time(departure_time_from_nb),\n        \"to\": meeting_location\n    })\n    # Meet event at Bayview with Steven.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": required_meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    # Travel event from Bayview back to North Beach.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_bv_to_nb,\n        \"time\": format_time(departure_time_from_bv),\n        \"to\": start_location\n    })\n\n    # Create result dictionary.\n    result = {\"schedule\": schedule}\n    \n    # Output the result as JSON-formatted dictionary.\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_95",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 27,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:27AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 27,
                    "time": "9:27AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 30,
                    "time": "9:27AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time in H:MMAM/PM without a leading zero on the hour.\n    return dt.strftime('%-I:%M%p') if hasattr(dt, 'strftime') else dt.strftime('%#I:%M%p')\n\ndef main():\n    # Input parameters / constraints\n    start_location = \"Sunset District\"\n    meeting_location = \"Nob Hill\"\n    \n    # Travel durations in minutes\n    travel_sunset_to_nobhill = 27\n    travel_nobhill_to_sunset = 25  # not used in the current schedule\n    \n    # Meeting constraints:\n    arrival_time_str = \"9:00AM\"  # Arrival at Sunset District\n    rebecca_available_start_str = \"9:00AM\"  # Rebecca is available from 9:00AM at Nob Hill\n    rebecca_available_end_str = \"6:15PM\"  # Rebecca leaves at 6:15PM from Nob Hill\n    minimum_meeting_duration = 30  # in minutes\n    \n    # Parsing the provided times for calculations.\n    # We'll assume today's date (the date doesn't matter)\n    base_date = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)\n    start_time = datetime.strptime(arrival_time_str, \"%I:%M%p\")\n    start_time = base_date.replace(hour=start_time.hour, minute=start_time.minute)\n    \n    rebecca_available_start = datetime.strptime(rebecca_available_start_str, \"%I:%M%p\")\n    rebecca_available_start = base_date.replace(hour=rebecca_available_start.hour, minute=rebecca_available_start.minute)\n    \n    rebecca_available_end = datetime.strptime(rebecca_available_end_str, \"%I:%M%p\")\n    rebecca_available_end = base_date.replace(hour=rebecca_available_end.hour, minute=rebecca_available_end.minute)\n    \n    # Calculate travel and meeting schedule\n    # We start at Sunset District at 9:00AM and depart immediately.\n    departure_time = start_time\n    \n    # Arriving at Nob Hill after traveling\n    arrival_at_nobhill = departure_time + timedelta(minutes=travel_sunset_to_nobhill)\n    \n    # The meeting with Rebecca can start when we arrive or when she is available (whichever is later)\n    meeting_start = max(arrival_at_nobhill, rebecca_available_start)\n    \n    # Ensure that meeting can be held for at least the minimum duration before Rebecca leaves.\n    meeting_end_possible = meeting_start + timedelta(minutes=minimum_meeting_duration)\n    if meeting_end_possible > rebecca_available_end:\n        # If not enough time to meet, then we cannot schedule the meeting.\n        schedule = {\n            \"schedule\": [\n                {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n                {\"action\": \"error\", \"message\": \"Not enough time to meet Rebecca for the minimum duration within her available window.\"}\n            ]\n        }\n    else:\n        events = []\n        # Starting event at Sunset District\n        events.append({\n            \"action\": \"start\",\n            \"location\": start_location,\n            \"time\": format_time(start_time)\n        })\n        # Travel event from Sunset District to Nob Hill\n        events.append({\n            \"action\": \"travel\",\n            \"location\": start_location,\n            \"duration\": travel_sunset_to_nobhill,\n            \"time\": format_time(departure_time),\n            \"to\": meeting_location\n        })\n        # Check if we need to wait (if arrival is before the meeting start)\n        if arrival_at_nobhill < meeting_start:\n            # Wait until meeting start time\n            events.append({\n                \"action\": \"wait\",\n                \"location\": meeting_location,\n                \"time\": format_time(arrival_at_nobhill)\n            })\n        # Meeting event with Rebecca at Nob Hill\n        events.append({\n            \"action\": \"meet\",\n            \"location\": meeting_location,\n            \"duration\": minimum_meeting_duration,\n            \"time\": format_time(meeting_start)\n        })\n        schedule = {\"schedule\": events}\n    \n    # Output the schedule as a JSON-formatted dictionary\n    print(json.dumps(schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_96",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "5:40PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "5:40PM",
                    "duration": 20,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "6:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(total_minutes):\n    # Convert minutes from midnight to a formatted time string \"H:MMAM/PM\"\n    hour = total_minutes // 60\n    minute = total_minutes % 60\n    period = \"AM\" if hour < 12 or hour == 24 else \"PM\"\n    # Convert to 12-hour format without leading zero\n    hour = hour % 12\n    if hour == 0:\n        hour = 12\n    return f\"{hour}:{minute:02d}{period}\"\n\ndef main():\n    # Input parameters\n    start_location = \"Chinatown\"\n    meeting_location = \"Richmond District\"\n    \n    # Times in minutes from midnight\n    arrival_time = 9 * 60  # 9:00AM\n    charles_available_start = 18 * 60  # 6:00PM\n    charles_available_end = 21 * 60    # 9:00PM\n    \n    travel_duration = 20  # minutes between Chinatown and Richmond District\n    minimum_meet_duration = 75  # minutes required to meet Charles\n    \n    # To meet Charles at or after his available start time:\n    # We need to depart from Chinatown so that arrival is at or after 6:00PM.\n    # The optimal case is to arrive exactly at 6:00PM.\n    departure_time = charles_available_start - travel_duration  # leaving from Chinatown\n    arrival_at_meet = departure_time + travel_duration  # should be 6:00PM exactly\n    \n    # Check if meeting can last at least minimum_meet_duration within available time window.\n    meeting_end_time = arrival_at_meet + minimum_meet_duration\n    if meeting_end_time > charles_available_end:\n        raise ValueError(\"Not enough time to meet Charles for the required duration.\")\n    \n    # Build the schedule as a list of events.\n    schedule = []\n    \n    # Start event at Chinatown at arrival_time (9:00AM)\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": minutes_to_time_str(arrival_time)\n    })\n    \n    # Wait event at Chinatown until departure_time (waiting from 9:00AM to departure_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": start_location,\n        \"time\": minutes_to_time_str(departure_time)\n    })\n    \n    # Travel event from Chinatown to Richmond District starting at departure_time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": minutes_to_time_str(departure_time),\n        \"to\": meeting_location\n    })\n    \n    # Meet event with Charles at Richmond District starting at arrival_at_meet\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": minimum_meet_duration,\n        \"time\": minutes_to_time_str(arrival_at_meet)\n    })\n    \n    # Prepare final dictionary\n    result = {\"schedule\": schedule}\n    \n    # Output the JSON result\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_97",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "8:33PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "8:33PM",
                    "duration": 12,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime as H:MMAM/PM (strip any leading zero from hour)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters\n    # Arrival at Alamo Square at 9:00AM\n    arrival_time_str = \"9:00AM\"\n    # Timothy's availability at Richmond District (from 8:45PM to 9:30PM)\n    timothy_start_str = \"8:45PM\"\n    timothy_end_str = \"9:30PM\"\n    # Meeting minimum duration in minutes\n    meeting_min_duration = 45\n\n    # Travel times in minutes\n    travel_alamo_to_richmond = 12\n    travel_richmond_to_alamo = 13  # not used in this schedule but provided\n\n    # Use an arbitrary date; only time is important. Using today's date.\n    base_date = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)\n    \n    # Parse the input times into datetime objects.\n    # Arrival at Alamo Square at 9:00AM\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M%p\")\n    # Use today's date for consistency\n    arrival_time = base_date.replace(hour=arrival_time.hour, minute=arrival_time.minute)\n    \n    # Timothy's availability start time: 8:45PM and end time: 9:30PM\n    timothy_start = datetime.strptime(timothy_start_str, \"%I:%M%p\")\n    timothy_start = base_date.replace(hour=timothy_start.hour, minute=timothy_start.minute)\n    timothy_end = datetime.strptime(timothy_end_str, \"%I:%M%p\")\n    timothy_end = base_date.replace(hour=timothy_end.hour, minute=timothy_end.minute)\n    \n    # To meet Timothy for a minimum of 45 minutes, we need the meeting to run from timothy_start to timothy_start + 45 minutes.\n    # Since Timothy is only available until 9:30PM, the only possible meeting is exactly from 8:45PM to 9:30PM.\n    meeting_duration = timedelta(minutes=meeting_min_duration)\n    meeting_start = timothy_start\n    meeting_end = meeting_start + meeting_duration\n\n    # Compute the travel departure time from Alamo Square.\n    # To arrive exactly at meeting_start (8:45PM) in Richmond District,\n    # we leave Alamo Square travel_alamo_to_richmond minutes earlier.\n    travel_duration = timedelta(minutes=travel_alamo_to_richmond)\n    departure_time = meeting_start - travel_duration\n\n    # Build the schedule:\n    schedule = []\n    # 1. Start event at Alamo Square\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Alamo Square\",\n        \"time\": format_time(arrival_time)\n    })\n    # 2. Wait event at Alamo Square until departure time (computed)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Alamo Square\",\n        \"time\": format_time(departure_time)\n    })\n    # 3. Travel event from Alamo Square to Richmond District\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_alamo_to_richmond,\n        \"time\": format_time(departure_time),\n        \"to\": \"Richmond District\"\n    })\n    # 4. Meet event with Timothy at Richmond District\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start)\n    })\n\n    # Create output dictionary\n    output = {\"schedule\": schedule}\n    \n    # Print JSON formatted output\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_98",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "1:02PM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "1:02PM",
                    "duration": 13,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "1:15PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(total_minutes):\n    # total_minutes: minutes since midnight\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    suffix = \"AM\" if hours < 12 or hours == 24 else \"PM\"\n    # convert hours from 24-hour to 12-hour format\n    display_hour = hours if 1 <= hours <= 12 else hours % 12\n    if display_hour == 0:\n        display_hour = 12\n    return f\"{display_hour}:{minutes:02}{suffix}\"\n\ndef main():\n    # Input parameters and constraints:\n    arrival_location = \"Fisherman's Wharf\"\n    meeting_location = \"Union Square\"\n    arrival_time_str = \"9:00AM\"  # arrival at Fisherman's Wharf\n    # Kevin's availability window at Union Square: 1:15PM to 7:15PM\n    kevin_available_start_str = \"1:15PM\"\n    kevin_available_end_str   = \"7:15PM\"\n    min_meet_duration = 15  # minutes required meeting with Kevin\n\n    # Travel times (in minutes)\n    travel_FW_to_US = 13\n    travel_US_to_FW = 15\n\n    # Convert times to minutes since midnight for calculation\n    def time_str_to_minutes(tstr):\n        # Parse time string in format h:MMAM/PM, for example \"9:00AM\"\n        dt = datetime.strptime(tstr, \"%I:%M%p\")\n        return dt.hour * 60 + dt.minute\n\n    arrival_time = time_str_to_minutes(arrival_time_str)\n    kevin_start = time_str_to_minutes(kevin_available_start_str)\n    kevin_end   = time_str_to_minutes(kevin_available_end_str)\n\n    # To meet Kevin for at least 15 minutes, we must arrive at Union Square by his availability start.\n    # We compute the departure time from Fisherman's Wharf such that arrival in Union Square equals Kevin's available start.\n    departure_from_FW = kevin_start - travel_FW_to_US\n    # Safety check: if departure_from_FW is earlier than arrival_time, adjust departure time to arrival_time.\n    if departure_from_FW < arrival_time:\n        departure_from_FW = arrival_time\n\n    # Arrival at Union Square after travel:\n    arrival_at_US = departure_from_FW + travel_FW_to_US\n\n    # Ensure we have enough time to meet Kevin for the minimum duration.\n    # Meeting end time:\n    meeting_end_time = arrival_at_US + min_meet_duration\n    if meeting_end_time > kevin_end:\n        # It is not possible to meet Kevin for the required duration.\n        schedule = {\"error\": \"Cannot schedule meeting with Kevin given current constraints\"}\n    else:\n        # Build the schedule as a list of events\n        schedule_events = []\n        # Start event\n        schedule_events.append({\n            \"action\": \"start\",\n            \"location\": arrival_location,\n            \"time\": minutes_to_time_str(arrival_time)\n        })\n        # Wait event at Fisherman's Wharf until departure time (if waiting time is positive)\n        if departure_from_FW > arrival_time:\n            schedule_events.append({\n                \"action\": \"wait\",\n                \"location\": arrival_location,\n                \"time\": minutes_to_time_str(departure_from_FW)\n            })\n        # Travel event from Fisherman's Wharf to Union Square\n        schedule_events.append({\n            \"action\": \"travel\",\n            \"location\": arrival_location,\n            \"duration\": travel_FW_to_US,\n            \"time\": minutes_to_time_str(departure_from_FW),\n            \"to\": meeting_location\n        })\n        # Wait event if arrived before Kevin's availability (if any difference)\n        if arrival_at_US < kevin_start:\n            schedule_events.append({\n                \"action\": \"wait\",\n                \"location\": meeting_location,\n                \"time\": minutes_to_time_str(kevin_start)\n            })\n            meeting_start = kevin_start\n        else:\n            meeting_start = arrival_at_US\n\n        # Meeting event with Kevin\n        schedule_events.append({\n            \"action\": \"meet\",\n            \"location\": meeting_location,\n            \"duration\": min_meet_duration,\n            \"time\": minutes_to_time_str(meeting_start)\n        })\n\n        schedule = {\"schedule\": schedule_events}\n\n    # Output the schedule as JSON\n    print(json.dumps(schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_99",
            "is_correct": false
        }
    ],
    "5shot": [
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "10:30AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 120,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time in H:MMAM/PM (no leading zero for hour)\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef add_minutes(time_obj, minutes):\n    return time_obj + timedelta(minutes=minutes)\n\ndef main():\n    # Input parameters for the meeting scenario\n    # Meeting: Marina District to Mission District\n    start_location = \"Marina District\"\n    meeting_location = \"Mission District\"\n    start_time_str = \"9:00AM\"\n    travel_time = 20  # minutes from Marina District to Mission District\n    meeting_availability_start_str = \"10:30AM\"\n    meeting_availability_end_str = \"1:30PM\"\n    required_meeting_duration = 120  # minutes\n\n    # Convert strings to datetime objects (dummy date used)\n    base_date = \"2000-01-01 \"\n    start_time = datetime.strptime(base_date + start_time_str, \"%Y-%m-%d %I:%M%p\")\n    meeting_availability_start = datetime.strptime(base_date + meeting_availability_start_str, \"%Y-%m-%d %I:%M%p\")\n    meeting_availability_end = datetime.strptime(base_date + meeting_availability_end_str, \"%Y-%m-%d %I:%M%p\")\n    \n    # Compute travel arrival (start at Marina then travel)\n    arrival_time = add_minutes(start_time, travel_time)\n    \n    # Determine meeting start time: if arrival is earlier than meeting window start, wait until meeting start.\n    meeting_start_time = max(arrival_time, meeting_availability_start)\n    meeting_end_time = add_minutes(meeting_start_time, required_meeting_duration)\n    \n    # Check if meeting_end_time is within availability; if not, adjust (though based on constraints it will be)\n    if meeting_end_time > meeting_availability_end:\n        raise ValueError(\"Meeting cannot be scheduled within the availability window.\")\n    \n    # Build the schedule\n    schedule = []\n    # Step 1: Start\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Step 2: Travel from Marina District to Mission District\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": format_time(arrival_time),\n        \"to\": meeting_location\n    })\n    \n    # Step 3: Wait if arrived before meeting availability start\n    if arrival_time < meeting_availability_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(meeting_availability_start)\n        })\n    \n    # Step 4: Meet with Stephanie for the required duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": required_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Wrap result in a dictionary and output as JSON\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_0",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "5:15PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 60,
                    "time": "5:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    \"\"\"Parse time from 'H:MMAM/PM' format to a datetime object (using an arbitrary date).\"\"\"\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    \"\"\"Format datetime to 'H:MMAM/PM' without leading zero in the hour.\"\"\"\n    # Remove any leading zero from the hour\n    return dt.strftime(\"%-I:%M%p\") if dt.strftime(\"%I\")[0] != \"0\" else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef add_minutes(time_str, mins):\n    \"\"\"Add minutes to a time string and return a formatted time string.\"\"\"\n    dt = parse_time(time_str)\n    new_dt = dt + timedelta(minutes=mins)\n    # To handle platforms that do not support %-I, manually remove leading zero\n    formatted = new_dt.strftime(\"%I:%M%p\")\n    if formatted[0] == \"0\":\n        formatted = formatted[1:]\n    return formatted\n\ndef main():\n    # Input parameters for the Betty meeting scenario\n    start_location = \"Richmond District\"\n    meeting_location = \"Financial District\"\n    arrival_time = \"9:00AM\"\n    travel_duration = 22  # minutes from Richmond District to Financial District\n    betty_available_start = \"5:15PM\"\n    betty_available_end = \"9:45PM\"\n    meeting_min_duration = 60  # minutes\n\n    # Compute times\n    travel_arrival_time = add_minutes(arrival_time, travel_duration)\n    # The meeting with Betty starts at the later of arrival time at meeting location and Betty's available start time.\n    # Since travel_arrival_time is 9:22AM and Betty is available from 5:15PM, meeting starts at 5:15PM.\n    meeting_start_time = betty_available_start\n    # Meeting end time is meeting_start + meeting_min_duration\n    meeting_end_time = add_minutes(meeting_start_time, meeting_min_duration)\n\n    # Build the schedule as a list of actions\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": arrival_time},\n        {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_duration, \"time\": travel_arrival_time, \"to\": meeting_location},\n        {\"action\": \"wait\", \"location\": meeting_location, \"time\": meeting_start_time},\n        {\"action\": \"meet\", \"location\": meeting_location, \"duration\": meeting_min_duration, \"time\": meeting_start_time}\n    ]\n\n    # Wrap the schedule in the required dictionary\n    output = {\"schedule\": schedule}\n\n    # Output the result in JSON format\n    # First print \"SOLUTION:\" then the JSON.\n    print(\"SOLUTION:\")\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_1",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "3:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 90,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse a time string without leading zero in hour (expected format like '9:00AM' or '3:15PM')\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    # Format time without leading zero for the hour\n    return dt.strftime('%-I:%M%p') if hasattr(dt, 'strftime') else dt.strftime('%#I:%M%p')\n\n# Input variables for the meeting with Jessica at Sunset District\nstart_location = \"Haight-Ashbury\"\ndestination = \"Sunset District\"\nstart_time_str = \"9:00AM\"\ntravel_duration = 15  # in minutes\njessica_available_start_str = \"3:15PM\"\njessica_available_end_str = \"8:15PM\"\nmeeting_min_duration = 90  # in minutes\n\n# Parse start times and availability times\nstart_time = parse_time(start_time_str)\njessica_available_start = parse_time(jessica_available_start_str)\njessica_available_end = parse_time(jessica_available_end_str)\n\n# Calculate arrival time at destination after travel\narrival_time = start_time + timedelta(minutes=travel_duration)\n\n# Determine meeting start time: max(arrival_time, jessica_available_start)\n# In this case, arrival_time is 9:15AM and Jessica is available starting at 3:15PM, so meeting starts at 3:15PM\nmeeting_start = max(arrival_time, jessica_available_start)\n\n# Calculate meeting end time based on meeting minimum duration requirement\nmeeting_end = meeting_start + timedelta(minutes=meeting_min_duration)\n\n# Build the schedule\nschedule = [\n    {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n    {\"action\": \"travel\", \"location\": destination, \"duration\": travel_duration, \"time\": format_time(arrival_time), \"to\": destination},\n    {\"action\": \"wait\", \"location\": destination, \"time\": format_time(meeting_start)},\n    {\"action\": \"meet\", \"location\": destination, \"duration\": meeting_min_duration, \"time\": format_time(meeting_start)}\n]\n\n# Prepare the result as a JSON-formatted dictionary\nresult = {\"schedule\": schedule}\n\n# Print the output as a JSON string\nprint(\"SOLUTION:\")\nprint(json.dumps(result, indent=2))",
            "count": "meeting_planning_example_2",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:22AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\n\ndef minutes_to_time(total_minutes):\n    # total_minutes is minutes from midnight\n    hour = total_minutes // 60\n    minute = total_minutes % 60\n    period = \"AM\" if hour < 12 else \"PM\"\n    # convert to 12-hour format, treating hour 0 as 12AM and hour 12 as 12PM\n    hour = hour % 12\n    if hour == 0:\n        hour = 12\n    return f\"{hour}:{minute:02d}{period}\"\n\ndef compute_schedule():\n    # Input parameters for the meeting with Barbara at Golden Gate Park:\n    # Starting location: Bayview, starting time: 9:00AM (9*60 = 540 minutes after midnight)\n    start_location = \"Bayview\"\n    start_time = 9 * 60  # 540 minutes\n    \n    # Travel time from Bayview to Golden Gate Park\n    travel_duration = 22  # minutes\n    \n    # Barbara will be at Golden Gate Park from 8:00AM to 11:30AM\n    barbara_arrival = 8 * 60      # 480 minutes (8:00AM)\n    barbara_departure = 11 * 60 + 30  # 690 minutes (11:30AM)\n    \n    # Minimum meeting duration\n    meet_duration = 90  # minutes\n\n    # Compute arrival time at Golden Gate Park\n    arrival_time = start_time + travel_duration  # 540 + 22 = 562 minutes (9:22AM)\n    \n    # The meeting start time is when both are available.\n    # Barbara is already available at Golden Gate Park by 8:00AM.\n    # So, meeting can start immediately upon arrival.\n    meeting_start_time = max(arrival_time, barbara_arrival)  # 562 in our case\n    \n    # Compute meeting end time\n    meeting_end_time = meeting_start_time + meet_duration\n    if meeting_end_time > barbara_departure:\n        raise ValueError(\"Not enough time to meet Barbara for the required duration.\")\n    \n    # Build the schedule\n    schedule = []\n    # Action: start at Bayview at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": minutes_to_time(start_time)\n    })\n    # Action: travel to Golden Gate Park taking 22 minutes and arriving at 9:22AM\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_duration,\n        \"time\": minutes_to_time(arrival_time),\n        \"to\": \"Golden Gate Park\"\n    })\n    # Action: wait if necessary.\n    # In this case, arrival time equals meeting start time, so waiting is effectively zero minutes.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": minutes_to_time(meeting_start_time)\n    })\n    # Action: meet Barbara for 90 minutes starting at 9:22AM (meeting start time)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": meet_duration,\n        \"time\": minutes_to_time(meeting_start_time)\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    # Output the result as a JSON string formatted with no extra spaces.\n    print(json.dumps(result))\n    \n# SOLUTION:\n# You start at Bayview at 9:00AM.\n# You travel to Golden Gate Park in 22 minutes and arrive at 9:22AM.\n# You wait until 9:22AM.\n# You meet Barbara for 90 minutes from 9:22AM to 10:52AM.",
            "count": "meeting_planning_example_3",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:15AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 60,
                    "time": "9:15AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse time string in format 'H:MMAM/PM', e.g., \"9:00AM\"\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime object to time string with no leading zeros, e.g., \"9:00AM\"\n    hour = dt.hour % 12\n    if hour == 0:\n        hour = 12\n    minute = dt.minute\n    suffix = \"AM\" if dt.hour < 12 else \"PM\"\n    return f\"{hour}:{minute:02d}{suffix}\"\n\ndef compute_schedule():\n    # Input parameters for Jessica meeting constraints\n    start_location = \"Presidio\"\n    meeting_location = \"Marina District\"\n    travel_duration = 10  # minutes from Presidio to Marina District\n    arrival_time_str = \"9:00AM\"\n    jessica_start_str = \"9:15AM\"\n    jessica_end_str = \"5:45PM\"\n    min_meeting_duration = 60  # minutes\n    \n    # Parse times\n    start_time = parse_time(arrival_time_str)\n    jessica_start_time = parse_time(jessica_start_str)\n    jessica_end_time = parse_time(jessica_end_str)\n    \n    # Compute travel event: depart at start_time and arrive after travel_duration minutes\n    travel_time_delta = timedelta(minutes=travel_duration)\n    arrival_meeting_time = start_time + travel_time_delta\n    \n    # Determine wait start: if arriving before Jessica is available, wait until her start time\n    if arrival_meeting_time < jessica_start_time:\n        wait_time = jessica_start_time\n    else:\n        wait_time = arrival_meeting_time\n    \n    # Meeting start time is when Jessica is available (or arrival time if later)\n    meeting_start_time = jessica_start_time if arrival_meeting_time <= jessica_start_time else arrival_meeting_time\n    meeting_duration_delta = timedelta(minutes=min_meeting_duration)\n    meeting_end_time = meeting_start_time + meeting_duration_delta\n    \n    # Build schedule list\n    schedule = []\n    # Start event at start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    # Travel event to meeting_location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_meeting_time),\n        \"to\": meeting_location\n    })\n    # Wait event: wait until Jessica becomes available if needed\n    # Only include wait if arrival is before Jessica's start\n    if arrival_meeting_time < jessica_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(jessica_start_time)\n        })\n    # Meeting event with Jessica\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    return schedule\n\nif __name__ == '__main__':\n    # Compute the schedule\n    schedule = compute_schedule()\n    # Build final JSON dictionary\n    result = {\"schedule\": schedule}\n    \n    # Print SOLUTION header and JSON output\n    print(\"SOLUTION:\")\n    print(json.dumps(result, indent=2))\n",
            "count": "meeting_planning_example_4",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "12:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 75,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\n\ndef time_to_minutes(time_str):\n    # expects format like \"9:00AM\" or \"12:15PM\"\n    period = time_str[-2:]\n    time_part = time_str[:-2]\n    hour_str, minute_str = time_part.split(':')\n    hour = int(hour_str)\n    minute = int(minute_str)\n    if period.upper() == \"PM\" and hour != 12:\n        hour += 12\n    if period.upper() == \"AM\" and hour == 12:\n        hour = 0\n    return hour * 60 + minute\n\ndef minutes_to_time(minutes):\n    # converts minutes from midnight to string format \"H:MMAM/PM\" (no leading zero for hour)\n    hour = minutes // 60\n    minute = minutes % 60\n    period = \"AM\"\n    if hour >= 12:\n        period = \"PM\"\n    if hour == 0:\n        display_hour = 12\n    elif hour > 12:\n        display_hour = hour - 12\n    else:\n        display_hour = hour\n    return f\"{display_hour}:{minute:02d}{period}\"\n\ndef main():\n    # Input parameters for the meeting with William\n    start_location = \"Nob Hill\"\n    start_time_str = \"9:00AM\"\n    travel_duration = 17  # minutes from Nob Hill to The Castro\n    destination = \"The Castro\"\n    friend_available_start_str = \"12:15PM\"\n    friend_available_end_str = \"10:00PM\"\n    meeting_duration = 75  # minutes\n    \n    # Convert times to minutes from midnight\n    start_time = time_to_minutes(start_time_str)\n    friend_available_start = time_to_minutes(friend_available_start_str)\n    friend_available_end = time_to_minutes(friend_available_end_str)\n    \n    # Calculate arrival time at destination\n    arrival_time = start_time + travel_duration\n    \n    # Meeting can only start when friend is available and after arrival\n    meeting_start = max(arrival_time, friend_available_start)\n    \n    # Check if friend is available long enough: meeting_start + meeting_duration must be <= friend_available_end.\n    if meeting_start + meeting_duration > friend_available_end:\n        raise ValueError(\"Not enough time to meet the friend within the available window.\")\n    \n    # Format times back to \"H:MMAM/PM\"\n    arrival_time_str = minutes_to_time(arrival_time)\n    meeting_start_str = minutes_to_time(meeting_start)\n    \n    # Build the schedule based on computed times.\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": start_time_str},\n        {\"action\": \"travel\", \"location\": destination, \"duration\": travel_duration, \"time\": arrival_time_str, \"to\": destination}\n    ]\n    \n    # Only add a wait event if arrival is before the meeting start time\n    if arrival_time < meeting_start:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": meeting_start_str})\n    \n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": meeting_duration, \"time\": meeting_start_str})\n    \n    # Create final dictionary and output as JSON\n    result = {\"schedule\": schedule}\n    \n    # Print \"SOLUTION:\" followed by the JSON output\n    print(\"SOLUTION:\")\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_5",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "2:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 90,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    \"\"\"\n    Parse a time string in the format H:MMAM/PM (no leading zeros) into a datetime object.\n    We'll use an arbitrary date.\n    \"\"\"\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(time_obj):\n    \"\"\"\n    Format a datetime object as H:MMAM/PM (remove any leading zero).\n    \"\"\"\n    return time_obj.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for the Kenneth meeting scenario:\n    # You arrive at Fisherman's Wharf at 9:00AM.\n    # Travel distances: Fisherman's Wharf -> Nob Hill = 11 minutes.\n    # Kenneth will be at Nob Hill from 2:15PM to 7:45PM.\n    # You'd like to meet Kenneth for a minimum of 90 minutes.\n    \n    # Define starting location and time.\n    start_location = \"Fisherman's Wharf\"\n    start_time_str = \"9:00AM\"\n    start_time = parse_time(start_time_str)\n    \n    # Travel parameters\n    travel_duration = 11  # minutes from Fisherman's Wharf to Nob Hill\n    destination = \"Nob Hill\"\n    \n    # Calculate arrival time at destination given travel duration.\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    arrival_time_str = format_time(arrival_time)\n    \n    # Meeting constraints:\n    meeting_start_window_str = \"2:15PM\"  # Kenneth available from this time\n    meeting_start_window = parse_time(meeting_start_window_str)\n    meeting_duration = 90  # minutes minimum meeting duration\n    \n    # For an optimal schedule, we choose to wait until Kenneth is available.\n    # So, wait from arrival time until meeting_start_window\n    # (Even though we arrive much earlier, we wait until 2:15PM.)\n    \n    # Prepare schedule dictionary\n    schedule = {\n        \"schedule\": [\n            {\n                \"action\": \"start\",\n                \"location\": start_location,\n                \"time\": start_time_str\n            },\n            {\n                \"action\": \"travel\",\n                \"location\": destination,\n                \"duration\": travel_duration,\n                \"time\": arrival_time_str,\n                \"to\": destination\n            },\n            {\n                \"action\": \"wait\",\n                \"location\": destination,\n                \"time\": meeting_start_window_str\n            },\n            {\n                \"action\": \"meet\",\n                \"location\": destination,\n                \"duration\": meeting_duration,\n                \"time\": meeting_start_window_str\n            }\n        ]\n    }\n    \n    # Output the result in JSON format preceded by \"SOLUTION:\"\n    print(\"SOLUTION:\")\n    print(json.dumps(schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_6",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "3:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse time using '%I:%M%p' format (this will parse 9:00AM correctly)\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM without any leading 0 for hour.\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0] == \"0\":\n        formatted = formatted[1:]\n    return formatted\n\ndef main():\n    # Input variables for the Richmond District to North Beach meeting with John\n    start_location = \"Richmond District\"\n    meeting_location = \"North Beach\"\n    start_time_str = \"9:00AM\"  # arriving at Richmond District at 9:00AM\n    travel_duration = 17      # minutes from Richmond District to North Beach\n    # John's availability and meeting requirement \n    john_available_start_str = \"3:15PM\"\n    john_available_end_str   = \"5:15PM\"\n    meeting_duration = 75     # minutes to meet John\n\n    # Compute times\n    start_time = parse_time(start_time_str)\n    # Travel: departure is at the start time; arrival is after travel_duration minutes.\n    travel_time = timedelta(minutes=travel_duration)\n    arrival_time = start_time + travel_time\n\n    # John's meeting start is when he becomes available.\n    john_available_start = parse_time(john_available_start_str)\n    # We assume we wait until John's availability if we arrive early.\n    meeting_start = john_available_start\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n    # Check if meeting_end is within John's available window (optional check, but per constraint it will be)\n    john_available_end = parse_time(john_available_end_str)\n    if meeting_end > john_available_end:\n        raise ValueError(\"John's available time window is insufficient for the meeting duration.\")\n\n    # Build the schedule steps\n    schedule = []\n    # 1. Start action at Richmond District at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    # 2. Travel action to North Beach\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": meeting_location\n    })\n    # 3. Wait action until John's availability at North Beach (if arrival earlier than meeting start)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": format_time(meeting_start)\n    })\n    # 4. Meet action with John at North Beach for the required duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n\n    # Prepare final result dictionary\n    result = {\"schedule\": schedule}\n\n    # Output result as JSON formatted dictionary\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_7",
            "is_correct": true
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 105,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse times in the format H:MMAM/PM, e.g., \"9:00AM\"\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format time without a leading zero in the hour.\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters for the meeting with Stephanie at Marina District\n    start_location = \"Chinatown\"\n    start_time_str = \"9:00AM\"\n    travel_duration = 12  # minutes from Chinatown to Marina District\n    partner_location = \"Marina District\"\n    partner_available_start_str = \"8:00AM\"\n    partner_available_end_str = \"3:00PM\"\n    meeting_duration = 105  # minutes\n    \n    # Parse times\n    start_time = parse_time(start_time_str)\n    partner_available_start = parse_time(partner_available_start_str)\n    partner_available_end = parse_time(partner_available_end_str)\n    \n    # Compute arrival time by travel from Chinatown to Marina District\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Meeting can only start when both parties are available.\n    # Since Stephanie is available from 8:00AM and arrival is 9:12AM, meeting starts at arrival_time.\n    meeting_start = max(arrival_time, partner_available_start)\n    \n    # Compute meeting end time\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    \n    # Ensure meeting can be completed within the partner's available window.\n    if meeting_end > partner_available_end:\n        raise Exception(\"Meeting duration cannot be met within the partner's available time.\")\n    \n    # Build schedule steps following the solution format.\n    schedule = []\n    # Start event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    # Travel event\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": partner_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": partner_location\n    })\n    # Since the meeting partner is already available upon arrival, no waiting is required.\n    # Meeting event\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": partner_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Prepare the final JSON dictionary\n    result = {\"schedule\": schedule}\n    \n    # If needed, print the solution note as in provided examples.\n    # The printed solution explanation:\n    solution_explanation = (\n        \"SOLUTION: You start at Chinatown at 9:00AM. You travel to Marina District in 12 minutes and arrive at \"\n        f\"{format_time(arrival_time)}. You meet Stephanie for 105 minutes from {format_time(meeting_start)} \"\n        f\"to {format_time(meeting_end)}.\"\n    )\n    \n    # Print the explanation and JSON result.\n    print(solution_explanation)\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_8",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 9,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:09AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "12:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "12:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse time strings in the format H:MMAM/PM (e.g., \"9:00AM\")\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime to H:MMAM/PM without any leading zero in hour.\n    # Using %-I for Linux/Mac or alternative method for Windows:\n    hour = dt.hour % 12\n    if hour == 0:\n        hour = 12\n    return f\"{hour}:{dt.strftime('%M%p')}\"\n\ndef main():\n    # Input parameters for the Mary meeting scenario:\n    # Locations and constraints:\n    start_location = \"Union Square\"\n    destination = \"Nob Hill\"\n    start_time_str = \"9:00AM\"  # You arrive at Union Square at this time\n    travel_time = 9          # minutes from Union Square to Nob Hill\n    mary_available_start_str = \"12:00PM\"  # Mary available start time at Nob Hill\n    mary_available_end_str = \"4:15PM\"     # Mary available end time (not used in scheduling, but constraint)\n    min_meet_duration = 75   # minutes meeting duration\n\n    # Parse the times:\n    start_time = parse_time(start_time_str)\n    mary_available_start = parse_time(mary_available_start_str)\n    # Compute arrival time at destination:\n    arrival_time = start_time + timedelta(minutes=travel_time)\n    \n    # Determine meeting start time:\n    # We need to wait until Mary is available (12:00PM)\n    meeting_start = mary_available_start  # since arrival time (9:09AM) is before 12:00PM\n    \n    # Meeting end time after the minimum meeting duration\n    meeting_end = meeting_start + timedelta(minutes=min_meet_duration)\n    \n    # Construct the schedule list, following the desired format:\n    schedule = [\n        {\n            \"action\": \"start\",\n            \"location\": start_location,\n            \"time\": format_time(start_time)\n        },\n        {\n            \"action\": \"travel\",\n            \"location\": destination,\n            \"duration\": travel_time,\n            \"time\": format_time(start_time),\n            \"to\": destination\n        },\n        {\n            \"action\": \"wait\",\n            \"location\": destination,\n            \"time\": format_time(arrival_time)\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": destination,\n            \"duration\": min_meet_duration,\n            \"time\": format_time(meeting_start)\n        }\n    ]\n    \n    # Construct the final result dictionary\n    result = {\"schedule\": schedule}\n    \n    # Output the result as a JSON-formatted string\n    print(\"SOLUTION:\")\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_9",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:15AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 15,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(timestr):\n    # Parses a time string in format H:MMAM/PM to a datetime object with arbitrary fixed date.\n    return datetime.strptime(timestr, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Formats datetime to H:MMAM/PM (without leading zero)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for the current meeting constraint\n    # Starting location and starting time\n    start_location = \"Golden Gate Park\"\n    start_time_str = \"9:00AM\"\n    # Travel time from Golden Gate Park to Marina District in minutes\n    travel_duration = 16\n\n    # Meeting details for friend James at Marina District\n    friend_location = \"Marina District\"\n    friend_available_start_str = \"10:15AM\"\n    friend_available_end_str = \"1:30PM\"\n    meeting_min_duration = 15  # in minutes\n\n    # Parse times to datetime objects (using an arbitrary date)\n    start_time = parse_time(start_time_str)\n    friend_available_start = parse_time(friend_available_start_str)\n    friend_available_end = parse_time(friend_available_end_str)\n\n    # Compute travel: from start location to friend's location\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Determine meeting start time: waiting until the friend is available, if needed.\n    meeting_start = friend_available_start if arrival_time < friend_available_start else arrival_time\n    meeting_end = meeting_start + timedelta(minutes=meeting_min_duration)\n    \n    # Build the schedule list.\n    schedule = []\n    \n    # Start step\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Travel step\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": friend_location\n    })\n\n    # Wait step (only if arrival_time is before meeting_start, else no wait)\n    if arrival_time < meeting_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(meeting_start)\n        })\n    \n    # Meet step\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Prepare final result\n    result = {\"schedule\": schedule}\n    \n    # Output the result as JSON\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_10",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:25AM",
                    "duration": 25,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse a time string of format H:MMAM/PM (e.g., \"9:00AM\")\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime to string with no leading zero for hour (using %-I which works on Unix)\n    # On Windows, you might need to manually remove the leading zero.\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input variables for Carol meeting at Sunset District\n    start_location = \"Nob Hill\"\n    destination = \"Sunset District\"\n    \n    # Starting time and travel time from Nob Hill to Sunset District\n    start_time_str = \"9:00AM\"\n    travel_duration = 25  # minutes\n    \n    # Carol's availability and required meeting duration\n    carol_avail_start_str = \"2:00PM\"\n    carol_avail_end_str = \"8:30PM\"  # Not used directly in calculation but provided as constraint.\n    required_meeting_duration = 75  # minutes\n    \n    # Parse times into datetime objects\n    start_time = parse_time(start_time_str)\n    carol_avail_start = parse_time(carol_avail_start_str)\n    \n    # Compute arrival time at destination with travel time\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Waiting until Carol's available start time if arrived early\n    # In this case, arrival is before Carol's availability.\n    wait_time = carol_avail_start\n    \n    # Set meeting start as Carol's available start time and compute meeting end time\n    meeting_start = carol_avail_start\n    meeting_end = meeting_start + timedelta(minutes=required_meeting_duration)\n    \n    # Build the schedule list of actions as required\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": destination, \"duration\": travel_duration, \"time\": format_time(arrival_time), \"to\": destination},\n        {\"action\": \"wait\", \"location\": destination, \"time\": format_time(wait_time)},\n        {\"action\": \"meet\", \"location\": destination, \"duration\": required_meeting_duration, \"time\": format_time(meeting_start)}\n    ]\n    \n    result = {\"schedule\": schedule}\n    \n    # Output the result as JSON formatted dictionary\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_11",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "6:00PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(timestr):\n    # Parse a time string in format e.g., '9:00AM' into a datetime object (using arbitrary common date)\n    return datetime.strptime(timestr, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime object into string \"H:MMAM/PM\" removing any leading zero in the hour\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input variables for the meeting with Barbara\n    # Starting point - North Beach at 9:00AM\n    start_location = \"North Beach\"\n    start_time_str = \"9:00AM\"\n    start_time = parse_time(start_time_str)\n    \n    # Travel constraints: North Beach to Alamo Square takes 16 minutes.\n    destination = \"Alamo Square\"\n    travel_duration = 16  # in minutes\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    arrival_time_str = format_time(arrival_time)\n    \n    # Meeting constraints: Barbara will be at Alamo Square from 6:00PM to 9:30PM.\n    # Minimum meeting duration: 90 minutes.\n    meeting_location = destination  # meeting takes place at Alamo Square\n    meeting_min_duration = 90  # in minutes\n    meeting_start_str = \"6:00PM\"\n    meeting_start = parse_time(meeting_start_str)\n    meeting_end = meeting_start + timedelta(minutes=meeting_min_duration)\n    meeting_end_str = format_time(meeting_end)\n    \n    # Build the schedule steps\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": start_time_str},\n        {\"action\": \"travel\", \"location\": destination, \"duration\": travel_duration, \"time\": arrival_time_str, \"to\": destination},\n        {\"action\": \"wait\", \"location\": destination, \"time\": meeting_start_str},\n        {\"action\": \"meet\", \"location\": destination, \"duration\": meeting_min_duration, \"time\": meeting_start_str}\n    ]\n    \n    output = {\"schedule\": schedule}\n    \n    # Print the solution header and output JSON\n    print(\"SOLUTION:\")\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_12",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:18AM",
                    "duration": 18,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "6:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "6:45PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(timestr):\n    # Parse a time string like \"9:00AM\"\n    return datetime.strptime(timestr, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime to \"H:MMAM/PM\" (strip any leading zero in the hour)\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input variables for meeting with Betty at North Beach\n    start_location = \"Presidio\"\n    start_time_str = \"9:00AM\"\n    arrival_location = \"North Beach\"\n    travel_time_minutes = 18\n    betty_start_str = \"6:45PM\"  # when Betty is available\n    betty_end_str = \"10:00PM\"   # Betty latest available time (not used for calculation)\n    meeting_duration = 75       # minutes required for meeting Betty\n\n    # Parse initial times\n    start_time = parse_time(start_time_str)\n    betty_start_time = parse_time(betty_start_str)\n    \n    # Compute travel: add travel time to the start time\n    arrival_time = start_time + timedelta(minutes=travel_time_minutes)\n\n    # The meeting cannot start until Betty is available. \n    # If arrival is earlier, wait for Betty's start time.\n    if arrival_time < betty_start_time:\n        meeting_start_time = betty_start_time\n    else:\n        meeting_start_time = arrival_time\n\n    # Construct the schedule as requested\n    schedule = []\n    # Start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    # Travel action: arrival time at destination\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_time_minutes,\n        \"time\": format_time(arrival_time),\n        \"to\": arrival_location\n    })\n    # Wait action: waiting until Betty becomes available (if needed)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": arrival_location,\n        \"time\": format_time(meeting_start_time)\n    })\n    # Meet action: meeting Betty for the required duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": arrival_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n\n    # Build final output JSON structure\n    output = {\n        \"schedule\": schedule\n    }\n    \n    # Print \"SOLUTION:\" prefix and then the JSON output\n    print(\"SOLUTION:\")\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_13",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "8:00PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 120,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_str_to_minutes(time_str):\n    # Convert a time string like \"9:00AM\" to minutes since midnight.\n    dt = datetime.strptime(time_str, '%I:%M%p')\n    return dt.hour * 60 + dt.minute\n\ndef minutes_to_time_str(minutes):\n    # Convert minutes since midnight to time string like \"9:00AM\"\n    hour = (minutes // 60) % 24\n    minute = minutes % 60\n    suffix = \"AM\" if hour < 12 else \"PM\"\n    display_hour = hour if 1 <= hour <= 12 else hour % 12\n    if display_hour == 0:\n        display_hour = 12\n    return f\"{display_hour}:{minute:02d}{suffix}\"\n\ndef main():\n    # Input Variables for the Nob Hill to Marina District meeting with Mary\n    start_location = \"Nob Hill\"\n    start_time_str = \"9:00AM\"\n    mary_location = \"Marina District\"\n    travel_time = 11  # minutes from Nob Hill to Marina District\n    mary_available_start_str = \"8:00PM\"\n    mary_available_end_str = \"10:00PM\"\n    meeting_duration_required = 120  # minutes\n    \n    # Convert times to minutes since midnight\n    start_time_min = time_str_to_minutes(start_time_str)\n    mary_available_start_min = time_str_to_minutes(mary_available_start_str)\n    mary_available_end_min = time_str_to_minutes(mary_available_end_str)\n    \n    # Compute travel arrival time at Marina District\n    arrival_time_min = start_time_min + travel_time\n    arrival_time_str = minutes_to_time_str(arrival_time_min)\n    \n    # Determine wait start time: if arrival is before Mary becomes available.\n    # In our case, arrival will be well before Mary becomes available.\n    wait_time_str = mary_available_start_str\n    \n    # Meeting scheduled start time\n    meeting_start_min = max(arrival_time_min, mary_available_start_min)\n    meeting_start_str = minutes_to_time_str(meeting_start_min)\n    \n    # Meeting end time (meeting duration must be satisfied and within Mary's availability window if possible)\n    meeting_end_min = meeting_start_min + meeting_duration_required\n    meeting_end_str = minutes_to_time_str(meeting_end_min)\n    \n    # Build the schedule as a list of actions.\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": start_time_str\n    })\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": mary_location,\n        \"duration\": travel_time,\n        \"time\": arrival_time_str,\n        \"to\": mary_location\n    })\n    \n    # If waiting is needed because Mary is only available later:\n    if arrival_time_min < mary_available_start_min:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": mary_location,\n            \"time\": wait_time_str\n        })\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": mary_location,\n        \"duration\": meeting_duration_required,\n        \"time\": meeting_start_str\n    })\n    \n    # Put the schedule into the output dictionary.\n    output = {\n        \"schedule\": schedule\n    }\n    \n    # Print out the JSON formatted schedule.\n    print(json.dumps(output, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_14",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:21AM",
                    "duration": 21,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "1:00PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 21,
                    "time": "9:21AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\").replace(\" 0\", \" \")\n\ndef main():\n    # Input parameters for John's meeting\n    # We are starting at Russian Hill at 9:00AM\n    start_location = \"Russian Hill\"\n    start_time_str = \"9:00AM\"\n    # Travel from Russian Hill to Golden Gate Park is 21 minutes\n    travel_duration = 21\n    destination = \"Golden Gate Park\"\n    # John's availability and meeting constraints\n    john_available_start_str = \"1:00PM\"  # John's available from\n    john_available_end_str = \"6:15PM\"      # John's available until (not used for meeting start, but meeting must finish before this)\n    meeting_min_duration = 90  # in minutes\n\n    # Parse the times into datetime objects; use an arbitrary date\n    base_date = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    john_available_start = datetime.strptime(john_available_start_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    \n    # Compute travel arrival time\n    travel_time = timedelta(minutes=travel_duration)\n    arrival_time = start_time + travel_time\n\n    # Meeting can start at the max of arrival time and John's available start time\n    meeting_start = max(arrival_time, john_available_start)\n    meeting_duration = timedelta(minutes=meeting_min_duration)\n    meeting_end = meeting_start + meeting_duration\n\n    # Build schedule events in required format:\n    # Note: The JSON formatted output should have \"action\", \"location\", \"time\", etc.\n    schedule = []\n    # 1. Start event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    # 2. Travel event\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": destination\n    })\n    # 3. Wait event if arrival is before meeting start\n    if arrival_time < meeting_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": destination,\n            \"time\": format_time(meeting_start)\n        })\n    # 4. Meet event\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    result = {\"schedule\": schedule}\n    \n    # Output the result as a JSON-formatted dictionary\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    # SOLUTION:\n    main()",
            "count": "meeting_planning_example_15",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "3:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta, date, time\n\ndef format_time(dt):\n    # Format datetime object to H:MMAM/PM without leading zero in hour\n    hour = dt.hour % 12\n    if hour == 0:\n        hour = 12\n    return f\"{hour}:{dt.minute:02d}{dt.strftime('%p')}\"\n\ndef main():\n    # Define the base date for time calculations (dummy date)\n    base_date = date(1900, 1, 1)\n    \n    # Input parameters for the meeting\n    # Arrival and travel details:\n    start_location = \"Chinatown\"\n    meeting_location = \"Russian Hill\"\n    start_time = datetime.combine(base_date, time(9, 0))  # 9:00AM arrival at Chinatown\n    travel_duration = 7  # travel time from Chinatown to Russian Hill in minutes\n    \n    # Compute arrival time at Russian Hill\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Meeting constraints for Ronald:\n    # Ronald will be at Russian Hill from 3:15PM to 9:30PM. Minimum meet duration is 105 minutes.\n    meeting_start_time = datetime.combine(base_date, time(15, 15))  # 3:15PM\n    meeting_duration = 105  # in minutes\n    \n    # Build the schedule steps\n    schedule = [\n        {\n            \"action\": \"start\",\n            \"location\": start_location,\n            \"time\": format_time(start_time)\n        },\n        {\n            \"action\": \"travel\",\n            \"location\": meeting_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(arrival_time),\n            \"to\": meeting_location\n        },\n        {\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(meeting_start_time)\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": meeting_location,\n            \"duration\": meeting_duration,\n            \"time\": format_time(meeting_start_time)\n        }\n    ]\n    \n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_16",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "1:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse time in format H:MMAM/PM (e.g., 9:00AM, 1:30PM)\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(time_dt):\n    # Format datetime back to H:MMAM/PM with no leading zero for hours.\n    return time_dt.strftime(\"%-I:%M%p\") if hasattr(time_dt, 'strftime') else time_dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for the meeting with Matthew\n    # Starting at Alamo Square at 9:00AM.\n    start_location = \"Alamo Square\"\n    start_time_str = \"9:00AM\"\n    \n    # Travel distances\n    # From Alamo Square to Sunset District: 16 minutes.\n    travel_duration = 16  # minutes\n    destination = \"Sunset District\"\n    \n    # Meeting constraints\n    meeting_friend = \"Matthew\"\n    meeting_location = \"Sunset District\"\n    friend_available_start_str = \"1:30PM\"\n    friend_available_end_str = \"2:30PM\"\n    meeting_min_duration = 15  # minutes\n\n    # Parse times into datetime objects (today's date arbitrary)\n    start_time = parse_time(start_time_str)\n    friend_available_start = parse_time(friend_available_start_str)\n    friend_available_end = parse_time(friend_available_end_str)\n    \n    # Action 1: Starting the day at Alamo Square\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Travel from Alamo Square to Sunset District\n    travel_start_time = start_time\n    travel_time = timedelta(minutes=travel_duration)\n    arrival_time = travel_start_time + travel_time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_start_time),\n        \"to\": destination\n    })\n    \n    # Wait until friend is available.\n    # If arrival time is before friend_available_start, then wait.\n    wait_time = arrival_time\n    if wait_time < friend_available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(wait_time)\n        })\n        meeting_start_time = friend_available_start\n    else:\n        # Otherwise start meeting immediately (if arrival is after friend's available start).\n        meeting_start_time = wait_time\n    \n    # Compute meeting end time given the minimum meeting duration\n    meeting_duration_td = timedelta(minutes=meeting_min_duration)\n    meeting_end_time = meeting_start_time + meeting_duration_td\n    \n    # Check if meeting can be completed within friend's available window\n    if meeting_end_time > friend_available_end:\n        raise ValueError(\"Cannot schedule the meeting within friend's available window.\")\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Prepare output JSON dictionary\n    output = {\n        \"schedule\": schedule\n    }\n    \n    # Print JSON-formatted output\n    print(json.dumps(output, indent=2))\n\nif __name__ == '__main__':\n    # SOLUTION:You start at Alamo Square at 9:00AM. You travel to Sunset District in 16 minutes and arrive at 9:16AM.\n    # You wait until 1:30PM. You meet Matthew for 15 minutes from 1:30PM to 1:45PM.\n    main()",
            "count": "meeting_planning_example_17",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "8:30PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse a time string in the format \"H:MMAM/PM\" (e.g., \"9:00AM\")\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime as \"H:MMAM/PM\" without a leading zero for hours.\n    hour = dt.hour % 12\n    if hour == 0:\n        hour = 12\n    minute = dt.minute\n    meridiem = \"AM\" if dt.hour < 12 else \"PM\"\n    return f\"{hour}:{minute:02d}{meridiem}\"\n\ndef main():\n    # Input parameters for Betty's schedule meeting at Richmond District\n    # Meeting 6:\n    # Travel distances (in minutes):\n    # Marina District to Richmond District: 11.\n    # Richmond District to Marina District: 9.\n    #\n    # CONSTRAINTS: You arrive at Marina District at 9:00AM.\n    # Betty will be at Richmond District from 8:30PM to 10:00PM.\n    # You'd like to meet Betty for a minimum of 75 minutes.\n    \n    # Define input variables\n    start_location = \"Marina District\"\n    meeting_location = \"Richmond District\"\n    start_time_str = \"9:00AM\"\n    travel_duration = 11  # minutes\n    betty_available_start_str = \"8:30PM\"\n    betty_available_end_str = \"10:00PM\"\n    meeting_duration = 75  # minutes\n\n    # Parse times\n    start_time = parse_time(start_time_str)\n    betty_start = parse_time(betty_available_start_str)\n    betty_end = parse_time(betty_available_end_str)\n\n    # Compute arrival time at meeting location after travel\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n\n    # Determine meeting start time: you must wait until Betty is available.\n    # If you arrive before Betty arrives, you wait until betty_start.\n    meeting_start = betty_start if arrival_time < betty_start else arrival_time\n\n    # Compute meeting end time\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    \n    # Validate that meeting end time does not exceed Betty's availability.\n    if meeting_end > betty_end:\n        raise ValueError(\"Not enough time to meet Betty for the required duration within her availability window.\")\n\n    # Build the schedule as a list of events\n    schedule = []\n    # Start event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    # Travel event: arriving at meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": meeting_location\n    })\n    # Wait event (if any waiting time is needed)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": format_time(meeting_start)\n    })\n    # Meet event\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n\n    # Prepare final JSON output\n    output = {\"schedule\": schedule}\n\n    # Print result in the required JSON format with SOLUTION: header.\n    print(\"SOLUTION:\")\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_18",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as \"H:MMAM/PM\" with no leading zero in hour.\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, \"strftime\") else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for the Golden Gate Park to Pacific Heights meeting with John\n    start_location = \"Golden Gate Park\"\n    meeting_location = \"Pacific Heights\"\n    \n    # Times and travel durations in minutes\n    arrival_time_str = \"9:00AM\"  # arrival at Golden Gate Park\n    travel_duration = 16        # Golden Gate Park -> Pacific Heights takes 16 minutes\n    john_available_start_str = \"7:45PM\"\n    john_available_end_str = \"8:45PM\"\n    meeting_min_duration = 45   # in minutes\n    \n    # Convert times from string to datetime objects (using an arbitrary same date)\n    date_format = \"%I:%M%p\"\n    base_date = datetime(2023, 1, 1)  # arbitrary date\n    start_time = datetime.strptime(arrival_time_str, date_format).replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    john_start = datetime.strptime(john_available_start_str, date_format).replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    john_end = datetime.strptime(john_available_end_str, date_format).replace(year=base_date.year, month=base_date.month, day=base_date.day)\n    \n    # Compute travel arrival time at Pacific Heights\n    travel_time_delta = timedelta(minutes=travel_duration)\n    arrival_destination_time = start_time + travel_time_delta\n    \n    # Determine meeting start time: the meeting can only start at or after John's available start.\n    # If we arrive earlier, we wait.\n    meeting_start_time = john_start if arrival_destination_time < john_start else arrival_destination_time\n    \n    # Compute meeting end time by adding minimum meeting duration.\n    meeting_duration_delta = timedelta(minutes=meeting_min_duration)\n    meeting_end_time = meeting_start_time + meeting_duration_delta\n\n    # Ensure that meeting_end_time does not exceed John's available end.\n    if meeting_end_time > john_end:\n        # If meeting cannot be scheduled for the minimum required duration, adjust meeting_end_time to John's end (though this would not meet the requirement)\n        meeting_end_time = john_end\n\n    # Build the schedule as a list of actions\n    schedule = []\n    \n    # 1. Start action at Golden Gate Park at start_time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # 2. Travel action from Golden Gate Park to Pacific Heights.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_destination_time),\n        \"to\": meeting_location\n    })\n    \n    # 3. Wait action if arrival time is before meeting start time.\n    if arrival_destination_time < meeting_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(meeting_start_time)\n        })\n\n    # 4. Meet action at Pacific Heights with John.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    result = {\"schedule\": schedule}\n    json_output = json.dumps(result, indent=2)\n    print(json_output)\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_19",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(timestr):\n    # timestr expected format e.g. \"9:00AM\" or \"12:45PM\"\n    # We'll use datetime.strptime with format \"%I:%M%p\" (which supports leading zeros,\n    # but if there's no leading zero it's still fine)\n    return datetime.strptime(timestr, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (remove leading zero for hour)\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == '0':\n        time_str = time_str[1:]\n    return time_str\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef main():\n    # Input parameters for Joseph meeting at Nob Hill\n    # Arrival at Chinatown at 9:00AM \n    start_location = \"Chinatown\"\n    start_time_str = \"9:00AM\"\n    start_time = parse_time(start_time_str)\n    \n    # Travel: Chinatown to Nob Hill: 8 minutes, Nob Hill to Chinatown: 6 minutes.\n    travel_duration = 8\n    destination = \"Nob Hill\"\n    \n    # Joseph's availability and meeting constraint\n    joseph_avail_start_str = \"11:30AM\"\n    joseph_avail_end_str   = \"3:15PM\"\n    joseph_meeting_min = 75\n    \n    joseph_avail_start = parse_time(joseph_avail_start_str)\n    joseph_avail_end = parse_time(joseph_avail_end_str)\n    \n    # Compute arrival time at destination after travel\n    arrival_time = add_minutes(start_time, travel_duration)\n    arrival_time_str = format_time(arrival_time)\n    \n    # Determine meeting start time.\n    # You can only start meeting at the later of arrival_time and joseph_avail_start.\n    meeting_start = max(arrival_time, joseph_avail_start)\n    meeting_start_str = format_time(meeting_start)\n    \n    # Compute meeting end time.\n    meeting_end = add_minutes(meeting_start, joseph_meeting_min)\n    meeting_end_str = format_time(meeting_end)\n    \n    # Build the schedule list\n    schedule = []\n    \n    # Start event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": start_time_str\n    })\n    \n    # Travel event\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": arrival_time_str,\n        \"to\": destination\n    })\n    \n    # If arrival occurs before Joseph's available time, wait until Joseph's start.\n    if arrival_time < joseph_avail_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": destination,\n            \"time\": joseph_avail_start_str\n        })\n    \n    # Meeting event \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": joseph_meeting_min,\n        \"time\": meeting_start_str\n    })\n    \n    # Build final result dictionary and output JSON\n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_20",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_timestr(total_minutes):\n    \"\"\"\n    Converts minutes since midnight to a time string (e.g., \"9:00AM\").\n    \"\"\"\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    period = \"AM\"\n    if hours >= 12:\n        period = \"PM\"\n    display_hour = hours if 1 <= hours <= 12 else hours % 12\n    if display_hour == 0:\n        display_hour = 12\n    return f\"{display_hour}:{minutes:02d}{period}\"\n\ndef main():\n    # Input variables for the meeting constraints\n    # Locations: Mission District and Haight-Ashbury.\n    # Times are handled in minutes since midnight.\n    start_location = \"Mission District\"\n    meeting_location = \"Haight-Ashbury\"\n    \n    # Schedule parameters (all times in minutes since midnight)\n    # Arrival at start location: 9:00AM -> 9*60 = 540\n    start_time = 9 * 60  # 9:00AM => 540 minutes\n    \n    # Travel: Mission District to Haight-Ashbury takes 12 minutes.\n    travel_duration = 12\n    \n    # Margaret's available time at Haight-Ashbury is from 8:00AM to 3:45PM.\n    margaret_available_start = 8 * 60       # 8:00AM -> 480 minutes\n    margaret_available_end = 15 * 60 + 45     # 3:45PM -> 945 minutes\n    \n    # Meeting duration requirement is 30 minutes.\n    meeting_duration = 30\n    \n    # Compute travel details\n    departure_time = start_time  # departing right away from Mission District at 9:00AM\n    arrival_time = departure_time + travel_duration  # arrival at Haight-Ashbury\n    \n    # Meeting should start no earlier than arrival and when Margaret is available.\n    meeting_start = max(arrival_time, margaret_available_start)\n    meeting_end = meeting_start + meeting_duration\n    \n    # Ensure meeting can be completed within Margaret's availability window.\n    if meeting_end > margaret_available_end:\n        raise ValueError(\"Not enough time to meet Margaret within her available window.\")\n    \n    # Build the schedule according to the required output structure:\n    schedule = [\n        {\n            \"action\": \"start\",\n            \"location\": start_location,\n            \"time\": minutes_to_timestr(start_time)\n        },\n        {\n            \"action\": \"travel\",\n            \"location\": meeting_location,\n            \"duration\": travel_duration,\n            \"time\": minutes_to_timestr(departure_time),\n            \"to\": meeting_location\n        },\n        {\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": minutes_to_timestr(arrival_time)\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": meeting_location,\n            \"duration\": meeting_duration,\n            \"time\": minutes_to_timestr(meeting_start)\n        }\n    ]\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    # Print the resulting schedule as a formatted JSON string.\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    # SOLUTION:\n    main()",
            "count": "meeting_planning_example_21",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "11:15AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 105,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (removing any leading 0)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for the Presidio -> Union Square -> Andrew meeting scenario:\n    start_location = \"Presidio\"\n    destination = \"Union Square\"\n    start_time_str = \"9:00AM\"\n    travel_duration = 22  # minutes\n    meeting_duration = 105  # minutes required with Andrew\n    andrew_start_str = \"11:15AM\"\n    andrew_end_str = \"5:15PM\"\n    \n    # Parse times into datetime objects (using an arbitrary date)\n    time_format = \"%I:%M%p\"\n    base_date = \"2023-01-01 \"  # arbitrary date\n    start_datetime = datetime.strptime(\"2023-01-01 \" + start_time_str, \"%Y-%m-%d \" + time_format)\n    andrew_start = datetime.strptime(\"2023-01-01 \" + andrew_start_str, \"%Y-%m-%d \" + time_format)\n    andrew_end = datetime.strptime(\"2023-01-01 \" + andrew_end_str, \"%Y-%m-%d \" + time_format)\n    \n    # Compute travel event: from Presidio to Union Square\n    arrival_datetime = start_datetime + timedelta(minutes=travel_duration)\n    \n    # Determine when we can start meeting Andrew (we must wait until he is available)\n    meeting_start = max(arrival_datetime, andrew_start)\n    \n    # Meeting end time\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    \n    # Build the schedule as a list of events:\n    schedule = []\n    \n    # Start event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": start_time_str\n    })\n    \n    # Travel event\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_datetime),\n        \"to\": destination\n    })\n    \n    # Wait event - only add wait if arrival is earlier than meeting start time\n    if arrival_datetime < meeting_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": destination,\n            \"time\": format_time(meeting_start)\n        })\n    \n    # Meet event\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Output result as JSON formatted dictionary\n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n    \nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_22",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "5:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 75,
                    "time": "5:30PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time in H:MMAM/PM format with no leading zero for hour\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0]==\"0\":\n        formatted = formatted[1:]\n    return formatted\n\ndef parse_time(timestr):\n    # Parse a time string like '9:00AM' into a datetime object on a dummy date (1900-01-01)\n    return datetime.strptime(timestr, \"%I:%M%p\")\n\ndef main():\n    # Input parameters for the meeting with John\n    start_location = \"Bayview\"\n    meeting_location = \"Russian Hill\"\n    start_time_str = \"9:00AM\"\n    travel_duration = 23  # minutes from Bayview to Russian Hill\n    john_available_from_str = \"5:30PM\"\n    john_available_to_str = \"9:00PM\"  # though not used because meeting duration is fixed\n    meeting_min_duration = 75  # minutes\n\n    # Convert start time and John's available start time to datetime objects\n    start_time = parse_time(start_time_str)\n    john_available_from = parse_time(john_available_from_str)\n\n    # Compute travel: leaving start location at start_time, travel for travel_duration minutes.\n    travel_td = timedelta(minutes=travel_duration)\n    arrival_time = start_time + travel_td\n\n    # The meeting with John can begin only when he is available.\n    # Therefore, if arrival_time is before John's available start, wait until that time.\n    if arrival_time < john_available_from:\n        meeting_start_time = john_available_from\n    else:\n        meeting_start_time = arrival_time\n\n    meeting_td = timedelta(minutes=meeting_min_duration)\n    meeting_end_time = meeting_start_time + meeting_td\n\n    # Create schedule steps according to the problem statement:\n    schedule = []\n    # Start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    # Travel action\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": meeting_location\n    })\n    # Wait action (if any waiting is needed)\n    if arrival_time < meeting_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(meeting_start_time)\n        })\n    # Meet action\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n\n    # Build final JSON structure\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Additionally, print a solution text header as requested\n    # For this meeting:\n    # \"SOLUTION: You start at Bayview at 9:00AM. You travel to Russian Hill in 23 minutes and arrive at 9:23AM. \n    # You wait until 5:30PM. You meet John for 75 minutes from 5:30PM to 6:45PM.\"\n    \n    print(\"SOLUTION:\")\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_23",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:00AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\n\ndef minutes_to_time_str(minutes):\n    # Convert minutes from midnight to H:MMAM/PM format.\n    hour = minutes // 60\n    minute = minutes % 60\n    suffix = \"AM\"\n    if hour >= 12:\n        suffix = \"PM\"\n    if hour > 12:\n        hour -= 12\n    # Handle midnight hour 0 as 12 AM\n    if hour == 0:\n        hour = 12\n    return f\"{hour}:{minute:02d}{suffix}\"\n\ndef add_minutes(time_in_minutes, delta):\n    return time_in_minutes + delta\n\ndef main():\n    # Input variables for the Nob Hill to Presidio meeting with Matthew.\n    # Arrival and travel\n    start_location = \"Nob Hill\"\n    meeting_location = \"Presidio\"\n    arrival_time_str = \"9:00AM\"  # Arrival at Nob Hill\n    travel_duration = 17       # Nob Hill to Presidio in minutes\n    \n    # Meeting constraints\n    meeting_start_available = \"11:00AM\"  # when Matthew becomes available at Presidio\n    meeting_end_available = \"3:15PM\"     # end available, but we need only 30 minutes meeting\n    meeting_duration = 30                # minimum meeting duration in minutes\n    \n    # Convert given times to minutes from midnight.\n    # 9:00AM -> 9*60 = 540 minutes\n    start_time = 9 * 60  # 9:00AM = 540 minutes\n    # Convert meeting start available time \"11:00AM\"\n    meeting_start = 11 * 60  # 11:00AM = 660 minutes\n    \n    # Compute travel arrival time\n    travel_arrival = add_minutes(start_time, travel_duration)\n    # Wait until meeting start time (if arrival is earlier than meeting availability, else no wait).\n    wait_time = meeting_start if travel_arrival < meeting_start else travel_arrival\n    # Meeting start is the maximum of arrival and meeting availability\n    final_meeting_start = max(travel_arrival, meeting_start)\n    \n    # Compute meeting end time from chosen start\n    final_meeting_end = final_meeting_start + meeting_duration\n    # Format times as strings\n    start_time_str = minutes_to_time_str(start_time)\n    travel_arrival_str = minutes_to_time_str(travel_arrival)\n    wait_time_str = minutes_to_time_str(wait_time)\n    final_meeting_start_str = minutes_to_time_str(final_meeting_start)\n    \n    # Create schedule list following the required structure.\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": start_time_str},\n        {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_duration, \"time\": travel_arrival_str, \"to\": meeting_location},\n        {\"action\": \"wait\", \"location\": meeting_location, \"time\": wait_time_str},\n        {\"action\": \"meet\", \"location\": meeting_location, \"duration\": meeting_duration, \"time\": final_meeting_start_str}\n    ]\n    \n    # Wrap the schedule dictionary\n    output = {\"schedule\": schedule}\n    \n    # Output the result as a JSON-formatted string\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    # SOLUTION:\n    main()",
            "count": "meeting_planning_example_24",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "4:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 105,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef to_time_str(time_obj):\n    # convert datetime object to string format like '9:00AM' or '12:00PM'\n    return time_obj.strftime('%-I:%M%p')\n\ndef add_minutes(time_obj, minutes):\n    return time_obj + timedelta(minutes=minutes)\n\ndef main():\n    # Input parameters for the Golden Gate Park to Chinatown meeting\n    start_location = \"Golden Gate Park\"\n    meeting_location = \"Chinatown\"\n    travel_time = 23  # minutes from Golden Gate Park to Chinatown\n    arrival_time_str = \"9:00AM\"  # start time at Golden Gate Park\n    \n    # Meeting constraints for David at Chinatown\n    friend_start_str = \"4:00PM\"  # David available from 4:00PM\n    friend_end_str = \"9:45PM\"    # David available until 9:45PM\n    meeting_duration = 105       # minutes required meeting duration\n    \n    # Convert string times to datetime objects, using an arbitrary same date (e.g., Jan 1, 2000)\n    base_date = \"2000-01-01 \"\n    start_time = datetime.strptime(base_date + arrival_time_str, \"%Y-%m-%d %I:%M%p\")\n    friend_avail_start = datetime.strptime(base_date + friend_start_str, \"%Y-%m-%d %I:%M%p\")\n    friend_avail_end = datetime.strptime(base_date + friend_end_str, \"%Y-%m-%d %I:%M%p\")\n    \n    # Calculate arrival time at meeting location after travel\n    travel_arrival_time = add_minutes(start_time, travel_time)\n    \n    # For meeting to happen as early as possible,\n    # we must wait until the friend is available.\n    if travel_arrival_time < friend_avail_start:\n        meeting_start_time = friend_avail_start\n    else:\n        meeting_start_time = travel_arrival_time\n    \n    # Check if the meeting can end before friend's available time ends\n    meeting_end_time = add_minutes(meeting_start_time, meeting_duration)\n    if meeting_end_time > friend_avail_end:\n        raise Exception(\"Cannot schedule the meeting within the friend's available window.\")\n    \n    # Build the schedule using the computed times\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": to_time_str(start_time)\n    })\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": to_time_str(travel_arrival_time),\n        \"to\": meeting_location\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": to_time_str(meeting_start_time)\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": to_time_str(meeting_start_time)\n    })\n    \n    output = {\"schedule\": schedule}\n    \n    print(json.dumps(output, indent=2))\n\nif __name__ == '__main__':\n    # SOLUTION: You start at Golden Gate Park at 9:00AM. You travel to Chinatown in 23 minutes and arrive at 9:23AM. \n    # You wait until 4:00PM. You meet David for 105 minutes from 4:00PM to 5:45PM.\n    main()",
            "count": "meeting_planning_example_25",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 105,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (strip any leading 0 from hour)\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%#I:%M%p\")\n\n# Input parameters for the meeting at Presidio with Sarah\nstart_location = \"Richmond District\"\ndestination = \"Presidio\"\ntravel_duration = 7  # in minutes\n\n# Time constraints\nstart_time_str = \"9:00AM\"         # Arrival at Richmond District\nmeeting_location = \"Presidio\"\nmeeting_start_str = \"1:15PM\"      # Sarah available begins at\nmeeting_duration = 105            # in minutes (minimum meeting duration)\n\n# Parse the times into datetime objects (using an arbitrary date)\ntime_format = \"%I:%M%p\"\nstart_time = datetime.strptime(start_time_str, time_format)\nmeeting_start_time = datetime.strptime(meeting_start_str, time_format)\n\n# Calculate travel arrival time\narrival_time = start_time + timedelta(minutes=travel_duration)\n\n# Determine waiting time if arriving early\n# In this scenario, arrival_time is before meeting_start_time, so we wait.\n# The wait action time will be the meeting start time.\nwait_time = meeting_start_time\n\n# Calculate meeting end time by adding meeting_duration to meeting start time\nmeeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n# Build the schedule following the required format\nschedule = [\n    {\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    },\n    {\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": destination\n    },\n    {\n        \"action\": \"wait\",\n        \"location\": destination,\n        \"time\": format_time(wait_time)\n    },\n    {\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    }\n]\n\nresult = {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    # Print schedule with JSON formatting\n    print(json.dumps(result, indent=2))\n    \n# SOLUTION: You start at Richmond District at 9:00AM. You travel to Presidio in 7 minutes and arrive at 9:07AM. You wait until 1:15PM. You meet Sarah for 105 minutes from 1:15PM to 3:00PM.",
            "count": "meeting_planning_example_26",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:00PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 15,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time in H:MMAM/PM without leading zero for hour.\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0] == \"0\":\n        formatted = formatted[1:]\n    return formatted\n\n# Input variables for the Marina District to Pacific Heights meeting with Margaret\nstart_location = \"Marina District\"\nstart_time_str = \"9:00AM\"\ntravel_duration = 7  # minutes from Marina District to Pacific Heights\nmeeting_location = \"Pacific Heights\"\nmeeting_window_start_str = \"7:00PM\"\nmeeting_window_end_str = \"7:45PM\"\nminimum_meeting_duration = 15  # minutes\n\n# Parse times into datetime objects (arbitrarily using today's date)\nbase_date = datetime.today().date()\nstart_time = datetime.strptime(start_time_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\nmeeting_window_start = datetime.strptime(meeting_window_start_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\nmeeting_window_end = datetime.strptime(meeting_window_end_str, \"%I:%M%p\").replace(year=base_date.year, month=base_date.month, day=base_date.day)\n\n# Compute travel arrival time at meeting location\narrival_time = start_time + timedelta(minutes=travel_duration)\n\n# Determine the wait start time (if arrival before meeting window, then wait until meeting window start)\nif arrival_time < meeting_window_start:\n    wait_time = meeting_window_start\nelse:\n    wait_time = arrival_time  # this case would be arriving after meeting window start\n\n# Meeting start time is when the friend becomes available (or your arrival time if later)\nmeeting_start = meeting_window_start if arrival_time <= meeting_window_start else arrival_time\n\n# Calculate meeting end time based on minimum duration, ensuring it doesn't exceed the available window.\nmeeting_end = meeting_start + timedelta(minutes=minimum_meeting_duration)\nif meeting_end > meeting_window_end:\n    # If not enough time to meet the minimum duration, adjust meeting_start to latest possible time\n    meeting_start = meeting_window_end - timedelta(minutes=minimum_meeting_duration)\n    meeting_end = meeting_window_end\n\n# Build the schedule dictionary following the required JSON structure.\nschedule = []\n\n# 1. Start action at start location.\nschedule.append({\n    \"action\": \"start\",\n    \"location\": start_location,\n    \"time\": format_time(start_time)\n})\n\n# 2. Travel action from start location to meeting location.\ntravel_arrival_str = format_time(arrival_time)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": meeting_location,\n    \"duration\": travel_duration,\n    \"time\": travel_arrival_str,\n    \"to\": meeting_location\n})\n\n# 3. Wait action until meeting window if needed.\nif arrival_time < meeting_window_start:\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": format_time(meeting_window_start)\n    })\n\n# 4. Meet action at meeting location.\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": meeting_location,\n    \"duration\": minimum_meeting_duration,\n    \"time\": format_time(meeting_start)\n})\n\n# Construct the output dictionary.\noutput = {\n    \"schedule\": schedule\n}\n\n# Print the JSON formatted schedule.\nprint(json.dumps(output, indent=2))",
            "count": "meeting_planning_example_27",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%#I:%M%p\")\n\ndef add_minutes(time_obj, minutes):\n    return time_obj + timedelta(minutes=minutes)\n\ndef main():\n    # Input parameters for the Joshua meeting at Chinatown\n    # Starting location: Union Square at 9:00AM\n    start_location = \"Union Square\"\n    start_time_str = \"9:00AM\"\n    # Travel from Union Square to Chinatown takes 7 minutes\n    travel_duration = 7\n    destination = \"Chinatown\"\n    \n    # Joshua is available at Chinatown from 6:00PM to 9:30PM\n    joshua_available_from_str = \"6:00PM\"\n    # Minimum meeting duration for Joshua is 75 minutes\n    meeting_duration = 75\n\n    # Convert start time and available time to datetime objects for computation.\n    # Using an arbitrary date since only time matters.\n    base_date = \"2023-01-01 \"  # arbitrary fixed date\n    start_time = datetime.strptime(base_date + start_time_str, \"%Y-%m-%d %I:%M%p\")\n    joshua_available_from = datetime.strptime(base_date + joshua_available_from_str, \"%Y-%m-%d %I:%M%p\")\n\n    # Compute travel: depart at start_time and travel to destination\n    travel_arrival_time = add_minutes(start_time, travel_duration)\n\n    # You arrive at Chinatown at travel_arrival_time.\n    # If arrival time is before Joshua's available time, you wait until he is ready.\n    # In our case, travel_arrival_time is much earlier than 6:00PM.\n    meeting_start_time = joshua_available_from  # wait until he's available\n    meeting_end_time = add_minutes(meeting_start_time, meeting_duration)\n\n    # Format times to required string format: \"H:MMAM/PM\" (no leading zeros, e.g., \"9:00AM\")\n    start_time_str_fmt = format_time(start_time)\n    travel_arrival_time_str = format_time(travel_arrival_time)\n    meeting_start_time_str = format_time(meeting_start_time)\n    meeting_end_time_str = format_time(meeting_end_time)\n\n    # Construct the schedule following the given structure\n    schedule = [\n        {\n            \"action\": \"start\",\n            \"location\": start_location,\n            \"time\": start_time_str_fmt\n        },\n        {\n            \"action\": \"travel\",\n            \"location\": destination,\n            \"duration\": travel_duration,\n            \"time\": travel_arrival_time_str,\n            \"to\": destination\n        },\n        {\n            \"action\": \"wait\",\n            \"location\": destination,\n            \"time\": meeting_start_time_str\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": destination,\n            \"duration\": meeting_duration,\n            \"time\": meeting_start_time_str\n        }\n    ]\n    \n    # Create final JSON dictionary\n    result = {\n        \"schedule\": schedule\n    }\n    # Output the result as a JSON-formatted string\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_28",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\n\ndef minutes_to_time_str(total_minutes):\n    # Convert minutes past midnight to H:MMAM/PM format (no leading zero for hour)\n    hour = total_minutes // 60\n    minute = total_minutes % 60\n    period = \"AM\"\n    if hour >= 12:\n        period = \"PM\"\n    display_hour = hour if (hour % 12) != 0 else 12\n    if hour > 12:\n        display_hour = hour - 12\n    return f\"{display_hour}:{minute:02d}{period}\"\n\ndef main():\n    # Input variables for the meeting constraints with Nancy\n    # Arrival and travel details\n    start_location = \"Sunset District\"\n    meeting_location = \"Haight-Ashbury\"\n    travel_duration = 15  # minutes from Sunset District to Haight-Ashbury\n    \n    # Start time: 9:00AM => 9*60 = 540 minutes after midnight\n    start_time = 9 * 60  # in minutes\n    # Nancy's schedule at Haight-Ashbury: available from 7:30PM to 9:45PM\n    meeting_window_start = 19 * 60 + 30  # 7:30PM in minutes (1170)\n    meeting_window_end = 21 * 60 + 45    # 9:45PM in minutes (1305)\n    meeting_duration = 75  # minutes\n    \n    # Compute travel arrival time at Haight-Ashbury\n    arrival_time = start_time + travel_duration  # 9:00AM + 15 minutes = 9:15AM\n    # You arrive long before Nancy is available; so you must wait\n    wait_time = meeting_window_start  # Wait until 7:30PM\n    \n    # Compute meeting start and end times based on available window and minimum meeting duration\n    meeting_start = meeting_window_start  # start meeting when Nancy is available, i.e., 7:30PM\n    meeting_end = meeting_start + meeting_duration\n    \n    # Check if meeting_end is within Nancy's available window (for safety)\n    if meeting_end > meeting_window_end:\n        raise ValueError(\"Not enough time to meet Nancy for the required duration within her available window.\")\n    \n    # Build schedule following the requested structure:\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": minutes_to_time_str(start_time)},\n        {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_duration, \n         \"time\": minutes_to_time_str(start_time), \"to\": meeting_location},\n        {\"action\": \"wait\", \"location\": meeting_location, \"time\": minutes_to_time_str(wait_time)},\n        {\"action\": \"meet\", \"location\": meeting_location, \"duration\": meeting_duration, \n         \"time\": minutes_to_time_str(meeting_start)}\n    ]\n    \n    # Output the result as a JSON formatted dictionary\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_29",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 120,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time without a leading zero for the hour (e.g., 9:00AM)\n    # Using dt.hour % 12 to avoid platform issues with %-I on Windows.\n    hour = dt.hour % 12\n    if hour == 0:\n        hour = 12\n    return f\"{hour}:{dt.strftime('%M%p')}\"\n\ndef main():\n    # Input variables for meeting constraints\n    # Current problem: Meeting with Stephanie at North Beach.\n    # Travel distances (in minutes):\n    # Richmond District to North Beach: 17\n    # North Beach to Richmond District: 18 (not used in this meeting)\n    start_location = \"Richmond District\"\n    meeting_location = \"North Beach\"\n    travel_duration = 17  # in minutes\n    \n    # Arrival and friend availability constraints:\n    # You arrive at Richmond District at 9:00AM.\n    # Stephanie will be at North Beach from 9:30AM to 4:15PM.\n    # Minimum meeting duration for Stephanie is 120 minutes.\n    meeting_min_duration = 120  # minutes\n    friend_available_start = datetime(2023, 1, 1, 9, 30)  # Using a dummy date\n    friend_available_end = datetime(2023, 1, 1, 16, 15)\n    \n    # Compute schedule times\n    start_time = datetime(2023, 1, 1, 9, 0)  # 9:00AM at Richmond District\n    travel_arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Calculate waiting time:\n    # The meeting can only start when both you and Stephanie are available.\n    # You arrive at travel_arrival_time and Stephanie is available from friend_available_start.\n    meeting_start_time = friend_available_start if friend_available_start > travel_arrival_time else travel_arrival_time\n    \n    # Check whether meeting fits in friend availability window if needed (not enforced in scheduling demo)\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_min_duration)\n    if meeting_end_time > friend_available_end:\n        raise ValueError(\"The meeting cannot be scheduled within the friend\u2019s availability window.\")\n    \n    # Build the schedule steps\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_arrival_time),\n        \"to\": meeting_location\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": format_time(meeting_start_time)\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Create the result dictionary\n    result = {\"schedule\": schedule}\n    \n    # Output the result as a JSON-formatted string\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_30",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:11AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(total_minutes):\n    # total_minutes is minutes since midnight\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    period = \"AM\" if hours < 12 or hours == 24 else \"PM\"\n    # adjust hour for 12-hour clock\n    display_hour = hours\n    if display_hour == 0:\n        display_hour = 12\n    elif display_hour > 12:\n        display_hour -= 12\n    return f\"{display_hour}:{minutes:02d}{period}\"\n\ndef main():\n    # Input Parameters for the meeting with Anthony:\n    # - You arrive at Nob Hill at 9:00AM.\n    # - Travel time from Nob Hill to Alamo Square is 11 minutes.\n    # - Anthony will be at Alamo Square from 7:15AM to 1:00PM.\n    # - You\u2019d like to meet Anthony for a minimum of 15 minutes.\n    \n    # Define starting parameters in minutes since midnight\n    # 9:00AM is 9 * 60 = 540 minutes.\n    start_time = 540  # 9:00AM\n    travel_duration = 11   # minutes from Nob Hill to Alamo Square\n    meeting_duration = 15  # minutes required with Anthony\n    \n    # Compute travel arrival time\n    travel_arrival_time = start_time + travel_duration  # 540 + 11 = 551 minutes => 9:11AM\n    \n    # Anthony's availability: from 7:15AM to 1:00PM.\n    anthony_start = 7 * 60 + 15     # 435 minutes (7:15AM)\n    anthony_end = 13 * 60           # 780 minutes (1:00PM)\n    \n    # Determine the actual meeting start time at Alamo Square.\n    # If we arrive early (before Anthony's available time), we must wait.\n    meeting_start = max(travel_arrival_time, anthony_start)\n    wait_needed = (meeting_start - travel_arrival_time) if travel_arrival_time < meeting_start else 0\n    \n    # Check if meeting can finish before Anthony leaves\n    meeting_end = meeting_start + meeting_duration\n    if meeting_end > anthony_end:\n        raise ValueError(\"Meeting time exceeds Anthony's availability.\")\n    \n    # Build the schedule steps\n    schedule = []\n    \n    # Starting point\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Nob Hill\",\n        \"time\": minutes_to_time_str(start_time)\n    })\n    \n    # Travel step\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_duration,\n        \"time\": minutes_to_time_str(travel_arrival_time),\n        \"to\": \"Alamo Square\"\n    })\n    \n    # If there's waiting time, add wait event\n    if wait_needed > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": minutes_to_time_str(travel_arrival_time)\n        })\n    \n    # Meeting step\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meeting_duration,\n        \"time\": minutes_to_time_str(meeting_start)\n    })\n    \n    # Final output dictionary\n    output = {\n        \"schedule\": schedule\n    }\n    \n    # Print the JSON formatted result\n    print(json.dumps(output, indent=2))\n    \nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_31",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:11AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport datetime\nimport json\n\ndef add_minutes(time_obj, minutes):\n    return time_obj + datetime.timedelta(minutes=minutes)\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM with no leading zero for hour\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0] == '0':\n        formatted = formatted[1:]\n    return formatted\n\ndef main():\n    # Input parameters for the meeting with Jeffrey at Golden Gate Park\n    start_location = \"The Castro\"\n    start_time_str = \"9:00AM\"\n    travel_duration = 11  # minutes from The Castro to Golden Gate Park\n    destination = \"Golden Gate Park\"\n    \n    # Jeffrey's schedule at Golden Gate Park and meeting requirements\n    friend_available_start_str = \"7:00AM\"\n    friend_available_end_str = \"5:30PM\"\n    meeting_min_duration = 105  # minutes\n\n    # Parse start times as datetime objects (using an arbitrary common date)\n    time_format = \"%I:%M%p\"\n    start_time = datetime.datetime.strptime(start_time_str, time_format)\n    friend_available_start = datetime.datetime.strptime(friend_available_start_str, time_format)\n    friend_available_end = datetime.datetime.strptime(friend_available_end_str, time_format)\n    \n    # Compute arrival time at destination after travel\n    arrival_time = add_minutes(start_time, travel_duration)\n    \n    # Decide the meeting start time; if arrival is before friend availability, wait until friend_available_start\n    meeting_start_time = arrival_time if arrival_time >= friend_available_start else friend_available_start\n    \n    # Compute meeting end time based on minimum meeting duration\n    meeting_end_time = add_minutes(meeting_start_time, meeting_min_duration)\n    \n    # Ensure that meeting does not extend beyond friend's availability (if it does, adjust meeting end)\n    if meeting_end_time > friend_available_end:\n        meeting_end_time = friend_available_end\n        # In a real scenario, we might flag that the meeting duration requirement could not be fully met.\n    \n    # Build the schedule using the specified format\n    schedule = []\n    schedule.append({\n        \"action\": \"start\", \n        \"location\": start_location, \n        \"time\": start_time_str\n    })\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": destination\n    })\n    \n    # If waiting is required before the meeting begins, add a wait action.\n    if arrival_time < meeting_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": destination,\n            \"time\": format_time(meeting_start_time)\n        })\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    result = {\"schedule\": schedule}\n    \n    # Output the result as JSON; starting output with \"SOLUTION:\" as required.\n    print(\"SOLUTION:\")\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_32",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:30AM",
                    "duration": 30,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "12:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 30,
                    "time": "9:30AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\n# Helper functions to parse and format times\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef main():\n    # Input Variables for the meeting with Sarah in this scenario:\n    # You are at Sunset District at 9:00AM.\n    start_location = \"Sunset District\"\n    start_time_str = \"9:00AM\"\n    \n    # Travel details (from Sunset District to Union Square)\n    travel_duration = 30  # minutes (Sunset District to Union Square)\n    travel_destination = \"Union Square\"\n    \n    # Friend's availability and meeting requirement\n    friend_location = \"Union Square\"\n    friend_available_str = \"12:30PM\"  # Sarah available starting time\n    meeting_min_duration = 15  # minutes\n    # Not using friend's end time in schedule calculation, as only the start and minimum meeting is needed.\n    # But Sarah is available until 9:30PM in the input.\n    \n    # Compute schedule times using datetime\n    start_dt = parse_time(start_time_str)\n    arrival_dt = add_minutes(start_dt, travel_duration)\n    \n    # Wait: We need to wait until friend's available time (12:30PM)\n    friend_available_dt = parse_time(friend_available_str)\n    # If arrival is earlier than friend available time, we wait.\n    wait_start_dt = friend_available_dt  # Start meeting exactly when friend becomes available.\n    \n    # Meeting start time is at 12:30PM, meeting minimum duration is 15 minutes.\n    meeting_start_dt = friend_available_dt\n    meeting_end_dt = add_minutes(meeting_start_dt, meeting_min_duration)\n    \n    # Build schedule as a list of actions:\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_dt)},\n        {\"action\": \"travel\", \"location\": travel_destination, \"duration\": travel_duration, \"time\": format_time(arrival_dt), \"to\": travel_destination},\n        {\"action\": \"wait\", \"location\": travel_destination, \"time\": format_time(wait_start_dt)},\n        {\"action\": \"meet\", \"location\": travel_destination, \"duration\": meeting_min_duration, \"time\": format_time(meeting_start_dt)}\n    ]\n    \n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_33",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "12:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 105,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\n\ndef time_to_minutes(time_str):\n    # Converts a time string like \"9:00AM\" or \"12:15PM\" to minutes since midnight.\n    period = time_str[-2:]\n    time_str = time_str[:-2]\n    hour_str, minute_str = time_str.split(\":\")\n    hour = int(hour_str)\n    minute = int(minute_str)\n    if period.upper() == \"AM\":\n        if hour == 12:\n            hour = 0\n    else:  # PM\n        if hour != 12:\n            hour += 12\n    return hour * 60 + minute\n\ndef minutes_to_time(minutes):\n    # Converts minutes since midnight back to time string like \"9:00AM\"\n    hour = minutes // 60\n    minute = minutes % 60\n    period = \"AM\"\n    if hour >= 12:\n        period = \"PM\"\n    display_hour = hour\n    if hour == 0:\n        display_hour = 12\n    elif hour > 12:\n        display_hour = hour - 12\n    return f\"{display_hour}:{minute:02d}{period}\"\n\ndef compute_schedule():\n    # Input parameters for the meeting with Thomas (last meeting in the prompt)\n    start_location = \"Bayview\"\n    start_time_str = \"9:00AM\"\n    destination = \"Pacific Heights\"\n    \n    # Travel times (in minutes)\n    travel_time = 23  # from Bayview to Pacific Heights\n    # Thomas meeting constraints\n    thomas_arrival_str = \"12:15PM\"  # meeting window start time at Pacific Heights\n    thomas_departure_str = \"5:15PM\"  # meeting window end time at Pacific Heights\n    meeting_duration_req = 105  # in minutes\n\n    # Convert times to minutes since midnight\n    start_time = time_to_minutes(start_time_str)\n    thomas_window_start = time_to_minutes(thomas_arrival_str)\n    thomas_window_end = time_to_minutes(thomas_departure_str)\n\n    # Compute arrival time at Pacific Heights\n    arrival_time = start_time + travel_time\n    arrival_time_str = minutes_to_time(arrival_time)\n    \n    # Decide meeting start time. If arrival is before Thomas' arrival, need to wait.\n    meeting_start = max(arrival_time, thomas_window_start)\n    meeting_start_str = minutes_to_time(meeting_start)\n    \n    # Meeting end time computed based on required meeting duration.\n    meeting_end = meeting_start + meeting_duration_req\n    meeting_end_str = minutes_to_time(meeting_end)\n    \n    # Check if meeting can be completed within Thomas' available window.\n    if meeting_end > thomas_window_end:\n        raise ValueError(\"Cannot schedule the meeting within Thomas' available time window.\")\n    \n    # Build the schedule list as per output requirements.\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": start_time_str\n    })\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_time,\n        \"time\": arrival_time_str,\n        \"to\": destination\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": destination,\n        \"time\": meeting_start_str\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": meeting_duration_req,\n        \"time\": meeting_start_str\n    })\n    \n    result = {\"schedule\": schedule}\n    return result\n\ndef main():\n    schedule_result = compute_schedule()\n    # Print output with \"SOLUTION:\" header followed by JSON formatted schedule.\n    print(\"SOLUTION:\")\n    print(json.dumps(schedule_result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_34",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:18AM",
                    "duration": 18,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:18AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 90,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse a time string like '9:00AM' into a datetime object (dummy date)\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime to H:MMAM/PM with no leading zero for hour.\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%#I:%M%p\")\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef main():\n    # Input parameters for the Jason meeting (Bayview to Chinatown)\n    start_location = \"Bayview\"\n    destination = \"Chinatown\"\n    start_time_str = \"9:00AM\"\n    travel_duration = 18  # in minutes from Bayview to Chinatown\n    friend_location = \"Chinatown\"\n    friend_name = \"Jason\"\n    friend_available_start_str = \"8:30AM\"\n    friend_available_end_str = \"12:30PM\"\n    min_meeting_duration = 90  # in minutes\n\n    # Convert times using a dummy date (we don't care about date)\n    start_time = parse_time(start_time_str)\n    friend_available_start = parse_time(friend_available_start_str)\n    friend_available_end = parse_time(friend_available_end_str)\n\n    # Compute travel arrival time at destination\n    arrival_time = add_minutes(start_time, travel_duration)\n\n    # Compute meeting start time: the meeting can start as soon as arrival time,\n    # but if arrival is before friend available start, wait until friend available start.\n    if arrival_time < friend_available_start:\n        meeting_start = friend_available_start\n    else:\n        meeting_start = arrival_time\n\n    # Check if meeting is possible with the required duration:\n    meeting_end = add_minutes(meeting_start, min_meeting_duration)\n    if meeting_end > friend_available_end:\n        raise ValueError(\"Meeting with Jason is not possible within his available time window.\")\n\n    # Build schedule actions following the required JSON structure.\n    schedule = []\n\n    # Action: start\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n\n    # Action: travel from start_location to destination\n    travel_action = {\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": destination\n    }\n    schedule.append(travel_action)\n\n    # If arriving early compared to meeting start, add a wait action.\n    if arrival_time < meeting_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": destination,\n            \"time\": format_time(arrival_time)\n        })\n\n    # Action: meet at destination for Jason\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n\n    # Wrap into final dictionary.\n    result = {\n        \"schedule\": schedule\n    }\n\n    # Output result as JSON\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    # SOLUTION:\n    # You start at Bayview at 9:00AM.\n    # You travel to Chinatown in 18 minutes and arrive at 9:18AM.\n    # You meet Jason for 90 minutes from 9:18AM to 10:48AM.\n    main()",
            "count": "meeting_planning_example_35",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:14AM",
                    "duration": 14,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "1:30PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 60,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse time strings in the format \"9:00AM\", \"1:30PM\", etc.\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format time to \"H:MMAM/PM\" without any leading zero in hour.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt += timedelta(minutes=minutes)\n    return format_time(dt)\n\ndef main():\n    # Input parameters for the Barbara meeting schedule:\n    # You arrive at Marina District at 9:00AM.\n    # Barbara will be at Embarcadero from 1:30PM to 8:45PM.\n    # You'd like to meet Barbara for a minimum of 60 minutes.\n    # Travel distances:\n    # Marina District to Embarcadero: 14 minutes.\n    # Embarcadero to Marina District: 12 minutes.\n    \n    start_location = \"Marina District\"\n    start_time = \"9:00AM\"\n    travel_duration = 14  # minutes from Marina District to Embarcadero\n    destination = \"Embarcadero\"\n    \n    # Calculate arrival time at Embarcadero.\n    arrival_time = add_minutes(start_time, travel_duration)\n    \n    # Barbara's availability start:\n    barbara_start = \"1:30PM\"\n    # Minimum meeting duration:\n    meeting_duration = 60  # minutes\n    \n    # Compute meeting start time (Barbara's availability)\n    meeting_start = barbara_start\n    # Optionally, we can compute meeting end time if needed:\n    meeting_end = add_minutes(meeting_start, meeting_duration)\n    \n    # Build the schedule list following the specified structure.\n    schedule = [\n        {\n            \"action\": \"start\",\n            \"location\": start_location,\n            \"time\": start_time\n        },\n        {\n            \"action\": \"travel\",\n            \"location\": start_location,\n            \"duration\": travel_duration,\n            \"time\": arrival_time,\n            \"to\": destination\n        },\n        {\n            \"action\": \"wait\",\n            \"location\": destination,\n            \"time\": barbara_start\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": destination,\n            \"duration\": meeting_duration,\n            \"time\": meeting_start\n        }\n    ]\n    \n    # Create a dictionary for output.\n    output = {\"schedule\": schedule}\n    \n    # Print the output as JSON.\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_36",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "12:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 90,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport datetime\nimport json\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (remove any leading zero in hour)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input variables for the constraint:\n    # Bayview to Financial District travel time (in minutes)\n    travel_time = 19\n    \n    # Arrival time at Bayview\n    start_time = datetime.datetime(2020, 1, 1, 9, 0)  # Using an arbitrary date\n\n    # Jeffrey's availability window at Financial District\n    available_start = datetime.datetime(2020, 1, 1, 12, 15)\n    available_end = datetime.datetime(2020, 1, 1, 14, 0)\n    \n    # Minimum meeting duration (in minutes)\n    meeting_duration = 90\n    \n    # Calculate the arrival time at Financial District after travel\n    arrival_fd = start_time + datetime.timedelta(minutes=travel_time)\n    \n    # Determine the meeting start time:\n    # It cannot start before the available start time.\n    meeting_start = max(arrival_fd, available_start)\n    \n    # Calculate the meeting end time based on the minimum meeting duration\n    meeting_end = meeting_start + datetime.timedelta(minutes=meeting_duration)\n    \n    # Check if meeting_end is within the available window:\n    if meeting_end > available_end:\n        raise ValueError(\"Cannot schedule the meeting: not enough available time for the meeting.\")\n    \n    # Build the schedule as a list of events in order\n    schedule = []\n    \n    # 1. Start event at Bayview at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Bayview\",\n        \"time\": format_time(start_time)\n    })\n    \n    # 2. Travel event from Bayview to Financial District\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_time,\n        \"time\": format_time(arrival_fd),\n        \"to\": \"Financial District\"\n    })\n    \n    # 3. Wait event for Jeffrey's available time at Financial District\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Financial District\",\n        \"time\": format_time(meeting_start)\n    })\n    \n    # 4. Meet event with Jeffrey for 90 minutes starting at the available time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    result = {\"schedule\": schedule}\n    \n    # Output the result as JSON formatted string\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_37",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_str_to_minutes(time_str):\n    # Convert a time string in H:MMAM/PM format to minutes since midnight.\n    time_obj = datetime.strptime(time_str, \"%I:%M%p\")\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time_str(minutes):\n    # Convert minutes since midnight to H:MMAM/PM format.\n    # Wrap around if minutes >= 1440.\n    minutes = minutes % (24 * 60)\n    hour = minutes // 60\n    minute = minutes % 60\n    dt = datetime(2000, 1, 1, hour, minute)\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, \"strftime\") else dt.strftime(\"%#I:%M%p\")\n\ndef main():\n    # Input parameters\n    # Starting info\n    start_location = \"Union Square\"\n    start_time_str = \"9:00AM\"\n    start_time = time_str_to_minutes(start_time_str)\n    \n    # Travel parameters\n    destination = \"North Beach\"\n    travel_duration = 10  # minutes, from Union Square to North Beach\n    \n    # Meeting constraints for Margaret\n    meeting_location = \"North Beach\"  # Margaret will be at North Beach\n    margaret_available_start_str = \"9:45PM\"  # available from 9:45PM\n    margaret_available_end_str = \"10:30PM\"     # until 10:30PM\n    margaret_meeting_min_duration = 45  # minutes minimum meeting duration\n    \n    # Convert available times to minutes\n    margaret_available_start = time_str_to_minutes(margaret_available_start_str)\n    margaret_available_end = time_str_to_minutes(margaret_available_end_str)\n    \n    # Compute arrival time at destination\n    arrival_time = start_time + travel_duration\n    \n    # Determine meeting start time.\n    # If arrival is before Margaret's available start, we wait until available start\n    meeting_start = max(arrival_time, margaret_available_start)\n    \n    # Meeting end time is meeting_start plus meeting duration\n    meeting_end = meeting_start + margaret_meeting_min_duration\n\n    # Check if meeting can be completed before Margaret leaves\n    if meeting_end > margaret_available_end:\n        raise ValueError(\"Cannot meet Margaret for the required duration given the constraints.\")\n\n    # Build schedule steps\n    schedule = []\n    \n    # Step 1: Start at Union Square\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": minutes_to_time_str(start_time)\n    })\n    \n    # Step 2: Travel from Union Square to North Beach\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": minutes_to_time_str(arrival_time),\n        \"to\": destination\n    })\n    \n    # If arrival_time is before meeting_start, we add a wait step.\n    if arrival_time < meeting_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": minutes_to_time_str(meeting_start)\n        })\n    \n    # Step 3: Meet Margaret\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": margaret_meeting_min_duration,\n        \"time\": minutes_to_time_str(meeting_start)\n    })\n    \n    # Create output dictionary\n    output = {\"schedule\": schedule}\n    \n    # Print output as JSON\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_38",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:45PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 120,
                    "time": "4:45PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse a time string in the format H:MMAM/PM into a datetime object (using a dummy date)\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime object back into a string in H:MMAM/PM format (remove any leading zeros in the hour)\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%#I:%M%p\")\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt_new = dt + timedelta(minutes=minutes)\n    return format_time(dt_new)\n\ndef main():\n    # Input parameters for Stephanie meeting at Nob Hill after starting at Fisherman's Wharf.\n    start_location = \"Fisherman's Wharf\"\n    meeting_location = \"Nob Hill\"\n    \n    # Times and durations based on the constraints\n    arrival_start_time = \"9:00AM\"       # You arrive at Fisherman's Wharf at 9:00AM.\n    travel_duration = 11                # Fisherman's Wharf to Nob Hill takes 11 minutes.\n    stephanie_start = \"4:45PM\"          # Stephanie available from 4:45PM.\n    required_meeting_duration = 120     # In minutes\n    \n    # Compute travel arrival time to Nob Hill\n    arrival_time_nobhill = add_minutes(arrival_start_time, travel_duration)\n    \n    # Compute meeting end time from start meeting time (Stephanie start time) + duration\n    meeting_end_time = add_minutes(stephanie_start, required_meeting_duration)\n    \n    # Construct the schedule events\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": arrival_start_time},\n        {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_duration, \"time\": arrival_time_nobhill, \"to\": meeting_location},\n        {\"action\": \"wait\", \"location\": meeting_location, \"time\": stephanie_start},\n        {\"action\": \"meet\", \"location\": meeting_location, \"duration\": required_meeting_duration, \"time\": stephanie_start}\n    ]\n    \n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_39",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\n\ndef time_to_minutes(t):\n    # Convert time formatted like '9:00AM' or '2:15PM' to minutes past midnight\n    period = t[-2:]\n    time_part = t[:-2]\n    hour_str, minute_str = time_part.split(\":\")\n    hour = int(hour_str)\n    minute = int(minute_str)\n    if period.upper() == \"PM\" and hour != 12:\n        hour += 12\n    if period.upper() == \"AM\" and hour == 12:\n        hour = 0\n    return hour * 60 + minute\n\ndef minutes_to_time(m):\n    # Convert minutes past midnight to time string formatted as 'H:MMAM/PM'\n    hour = m // 60\n    minute = m % 60\n    period = \"AM\"\n    if hour >= 12:\n        period = \"PM\"\n    display_hour = hour\n    if hour == 0:\n        display_hour = 12\n    elif hour > 12:\n        display_hour = hour - 12\n    return f\"{display_hour}:{minute:02d}{period}\"\n\n# Input parameters for the meeting with Deborah\nstart_location = \"The Castro\"\ndestination = \"Sunset District\"\nstart_time_str = \"9:00AM\"\ntravel_duration = 17  # in minutes\ndeborah_available_start_str = \"2:15PM\"\nmeeting_duration = 75  # in minutes\n\n# Compute times\nstart_time_minutes = time_to_minutes(start_time_str)\narrival_time_minutes = start_time_minutes + travel_duration\narrival_time_str = minutes_to_time(arrival_time_minutes)\n\ndeborah_available_start_minutes = time_to_minutes(deborah_available_start_str)\n# The meeting starts as soon as Deborah is available.\nmeeting_start_minutes = deborah_available_start_minutes\nmeeting_start_str = minutes_to_time(meeting_start_minutes)\nmeeting_end_minutes = meeting_start_minutes + meeting_duration\nmeeting_end_str = minutes_to_time(meeting_end_minutes)\n\n# Build the schedule\nschedule = [\n    {\"action\": \"start\", \"location\": start_location, \"time\": start_time_str},\n    {\"action\": \"travel\", \"location\": destination, \"duration\": travel_duration, \"time\": arrival_time_str, \"to\": destination},\n    {\"action\": \"wait\", \"location\": destination, \"time\": meeting_start_str},\n    {\"action\": \"meet\", \"location\": destination, \"duration\": meeting_duration, \"time\": meeting_start_str}\n]\n\nresult = {\"schedule\": schedule}\n\n# Output the result as JSON\nprint(json.dumps(result, indent=2))",
            "count": "meeting_planning_example_40",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:18AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 45,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM without a leading 0 in hour.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef compute_schedule():\n    # Input parameters for the North Beach to Haight-Ashbury meeting with George\n    start_location = \"North Beach\"\n    meeting_location = \"Haight-Ashbury\"\n    \n    # Travel time from North Beach to Haight-Ashbury in minutes.\n    travel_time = 18  \n    # Meeting details: George is available from 7:30AM to 1:15PM and meeting duration required is 45 minutes.\n    required_meeting_duration = 45  # in minutes\n    \n    # We start at North Beach at 9:00AM.\n    start_time_str = \"9:00AM\"\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\")\n    \n    # Compute travel start and arrival time.\n    travel_start_time = start_time  # travel starts immediately at 9:00AM\n    arrival_time = travel_start_time + timedelta(minutes=travel_time)\n    \n    # Check if arrival time is within George's availability window.\n    # George is available from 7:30AM to 1:15PM.\n    georgestart = datetime.strptime(\"7:30AM\", \"%I:%M%p\")\n    georgeend = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    \n    # Meeting start time is the max(arrival_time, availability start)\n    meeting_start_time = arrival_time if arrival_time >= georgestart else georgestart\n    meeting_end_time = meeting_start_time + timedelta(minutes=required_meeting_duration)\n    \n    # Verify that meeting end time is within George's availability.\n    if meeting_end_time > georgeend:\n        raise ValueError(\"Cannot schedule a meeting with George for the required duration within his availability window.\")\n    \n    # Build the schedule steps.\n    schedule = []\n    # Step 1: Start at North Beach\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    # Step 2: Travel to Haight-Ashbury\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": format_time(travel_start_time),\n        \"to\": meeting_location\n    })\n    # If arrival time is earlier than meeting start time, add a wait step.\n    if arrival_time < meeting_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(arrival_time)\n        })\n    # Step 3: Meet George for required duration.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": required_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == '__main__':\n    # Compute the schedule for the North Beach to Haight-Ashbury meeting with George.\n    schedule_dict = compute_schedule()\n    \n    # Optionally, print the solution text as required.\n    print(\"SOLUTION:\")\n    # Output JSON formatted result.\n    print(json.dumps(schedule_dict, indent=2))",
            "count": "meeting_planning_example_41",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:00PM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format the datetime object to H:MMAM/PM where hour has no leading zero.\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for the meeting with Timothy\n    start_location = \"Nob Hill\"\n    meeting_location = \"Presidio\"\n    \n    # Arrival times and travel durations (in minutes)\n    arrival_time_str = \"9:00AM\"\n    travel_duration = 17   # from Nob Hill to Presidio in minutes\n    meeting_availability_start_str = \"1:00PM\"\n    meeting_availability_end_str = \"7:00PM\"\n    meeting_duration = 30  # Minimum minutes to meet Timothy\n    \n    # Convert times from strings to datetime objects (using today's date arbitrary)\n    dt_format = \"%I:%M%p\"\n    start_dt = datetime.strptime(arrival_time_str, dt_format)\n    meeting_start_avail_dt = datetime.strptime(meeting_availability_start_str, dt_format)\n    meeting_end_avail_dt = datetime.strptime(meeting_availability_end_str, dt_format)\n    \n    # Compute travel and arrival time at the meeting location.\n    travel_dt = timedelta(minutes=travel_duration)\n    arrival_dt = start_dt + travel_dt\n    \n    # The meeting can only start when Timothy is available.\n    # So, our meeting will start at the later of the arrival time and the availability start.\n    meeting_start_dt = max(arrival_dt, meeting_start_avail_dt)\n    # meeting end time after meeting_duration minutes\n    meeting_end_dt = meeting_start_dt + timedelta(minutes=meeting_duration)\n    \n    # Check that meeting_end_dt is not after availability end time\n    if meeting_end_dt > meeting_end_avail_dt:\n        raise ValueError(\"Meeting duration exceeds available time for Timothy.\")\n    \n    # Create schedule actions following the given output structure.\n    schedule = []\n    # Action 1: Start at Nob Hill at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_dt)\n    })\n    # Action 2: Travel from Nob Hill to Presidio.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_dt),\n        \"to\": meeting_location\n    })\n    # Action 3: Wait until meeting availability begins.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": format_time(meeting_start_dt)\n    })\n    # Action 4: Meet Timothy for meeting_duration minutes.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_dt)\n    })\n    \n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_42",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\n\ndef time_to_minutes(time_str):\n    \"\"\"\n    Convert a time string in the format H:MMAM/PM to minutes since midnight.\n    Example: \"9:00AM\" -> 540, \"2:30PM\" -> 14*60+30 = 870.\n    \"\"\"\n    # Separate the time and the period\n    period = time_str[-2:]\n    time_part = time_str[:-2]\n    hour_str, minute_str = time_part.split(\":\")\n    hour = int(hour_str)\n    minute = int(minute_str)\n    \n    # Adjust for AM/PM\n    if period.upper() == \"PM\" and hour != 12:\n        hour += 12\n    if period.upper() == \"AM\" and hour == 12:\n        hour = 0\n    return hour * 60 + minute\n\ndef minutes_to_time(minutes):\n    \"\"\"\n    Convert minutes since midnight to a time string in format H:MMAM/PM without a leading zero for hour.\n    \"\"\"\n    hour = minutes // 60\n    minute = minutes % 60\n    period = \"AM\"\n    if hour >= 12:\n        period = \"PM\"\n    if hour == 0:\n        display_hour = 12\n    elif hour > 12:\n        display_hour = hour - 12\n    else:\n        display_hour = hour\n    return f\"{display_hour}:{minute:02d}{period}\"\n\ndef main():\n    # Input variables for the Marina District to Chinatown meeting with Sandra.\n    # Starting point and time\n    start_location = \"Marina District\"\n    start_time_str = \"9:00AM\"\n    start_time_minutes = time_to_minutes(start_time_str)\n    \n    # Travel information\n    destination = \"Chinatown\"\n    travel_duration = 16  # minutes from Marina District to Chinatown\n    \n    # Meeting constraints for Sandra\n    friend_name = \"Sandra\"\n    meeting_location = \"Chinatown\"\n    friend_available_start_str = \"9:00AM\"\n    friend_available_end_str = \"11:45AM\"\n    friend_available_start = time_to_minutes(friend_available_start_str)\n    friend_available_end = time_to_minutes(friend_available_end_str)\n    meeting_minimum_duration = 15  # minutes\n    \n    # Compute travel: leave at starting time, travel takes travel_duration minutes\n    arrival_time_minutes = start_time_minutes + travel_duration\n    \n    # Determine meeting start: you can only start meeting when friend is available.\n    meeting_start_minutes = max(arrival_time_minutes, friend_available_start)\n    \n    # Check if meeting can be held fully within friend's available window.\n    meeting_end_minutes = meeting_start_minutes + meeting_minimum_duration\n    if meeting_end_minutes > friend_available_end:\n        raise ValueError(\"Cannot schedule the meeting within the friend's available hours.\")\n    \n    # Build the schedule list.\n    schedule = []\n    \n    # Step 1: Start at Marina District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": minutes_to_time(start_time_minutes)\n    })\n    \n    # Step 2: Travel from Marina District to Chinatown\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": minutes_to_time(arrival_time_minutes),\n        \"to\": destination\n    })\n    \n    # If there's a waiting period (arrival earlier than meeting start), include wait step.\n    if arrival_time_minutes < meeting_start_minutes:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": minutes_to_time(meeting_start_minutes)\n        })\n    \n    # Step 3: Meet Sandra\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_minimum_duration,\n        \"time\": minutes_to_time(meeting_start_minutes)\n    })\n    \n    # Construct the JSON output dictionary.\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Print the solution header and JSON output.\n    print(\"SOLUTION:\")\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_43",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 105,
                    "time": "9:13AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parses time strings like \"9:00AM\" into a datetime object (arbitrary date)\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Formats datetime object to \"H:MMAM/PM\" (without leading zero on hour)\n    hour = dt.hour % 12\n    if hour == 0:\n        hour = 12\n    minute = dt.minute\n    period = \"AM\" if dt.hour < 12 else \"PM\"\n    return f\"{hour}:{minute:02d}{period}\"\n\ndef compute_schedule():\n    # Input variables (for meeting Betty scenario)\n    start_location = \"Pacific Heights\"\n    destination = \"Fisherman's Wharf\"\n    start_time_str = \"9:00AM\"\n    travel_duration = 13  # minutes from Pacific Heights to Fisherman's Wharf\n\n    # Betty's meeting constraints\n    betty_start_window_str = \"8:45AM\"  # Betty is available starting 8:45AM\n    betty_end_window_str = \"6:00PM\"     # Betty is available until 6:00PM\n    meeting_minimum = 105  # minutes meeting duration\n\n    # Parse times\n    start_time = parse_time(start_time_str)\n    betty_start = parse_time(betty_start_window_str)\n    betty_end = parse_time(betty_end_window_str)\n\n    # Compute travel and meeting times\n    travel_td = timedelta(minutes=travel_duration)\n    arrival_time = start_time + travel_td\n\n    # Determine meeting start time: must not start before Betty's availability\n    meeting_start = arrival_time if arrival_time >= betty_start else betty_start\n    meeting_td = timedelta(minutes=meeting_minimum)\n    meeting_end = meeting_start + meeting_td\n\n    # Check if meeting end is within Betty's available window (if not, schedule might be infeasible)\n    if meeting_end > betty_end:\n        raise ValueError(\"Cannot meet Betty for the required minimum duration within her available time.\")\n\n    # Build schedule events list\n    schedule = []\n    # Event 1: start at Pacific Heights\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    # Event 2: travel to Fisherman's Wharf\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": destination\n    })\n    # Event 3: wait until meeting start (if any waiting is needed, otherwise waiting time is the same as arrival)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": destination,\n        \"time\": format_time(meeting_start)\n    })\n    # Event 4: meet Betty for the minimum required duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": meeting_minimum,\n        \"time\": format_time(meeting_start)\n    })\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule_plan = compute_schedule()\n    # Output the result as a JSON-formatted dictionary\n    print(\"SOLUTION:\")\n    print(json.dumps(schedule_plan, indent=2))",
            "count": "meeting_planning_example_44",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\n# Helper function to format datetime as \"H:MMAM/PM\" without a leading zero for hour.\ndef format_time(dt):\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0] == \"0\":\n        formatted = formatted[1:]\n    return formatted\n\n# Base date for scheduling (the specific date doesn't matter)\nbase_date = datetime(2023, 1, 1)\n\n# Input parameters for the meeting with Emily\n# Travel distances (in minutes):\n# North Beach to Alamo Square: 16.\ntravel_duration = timedelta(minutes=16)\n\n# Constraints:\n# Arrive at North Beach at 9:00AM.\nstart_location = \"North Beach\"\nstart_time = base_date.replace(hour=9, minute=0)\n\n# Emily will be at Alamo Square from 7:30PM to 9:00PM.\nmeeting_location = \"Alamo Square\"\nemily_available_start = base_date.replace(hour=19, minute=30)\nemily_available_end = base_date.replace(hour=21, minute=0)\n# Minimum meeting duration in minutes\nmeeting_duration_minutes = 15\nmeeting_duration = timedelta(minutes=meeting_duration_minutes)\n\n# Compute travel from start_location to meeting_location.\narrival_time = start_time + travel_duration\n\n# If we arrive before Emily is available, we wait until she is available.\nif arrival_time < emily_available_start:\n    meeting_start_time = emily_available_start\nelse:\n    meeting_start_time = arrival_time\n\n# Set meeting end time based on minimum meeting duration.\nmeeting_end_time = meeting_start_time + meeting_duration\n\n# Build the schedule list of actions.\nschedule = []\n\n# Action 1: Start at North Beach\nschedule.append({\n    \"action\": \"start\",\n    \"location\": start_location,\n    \"time\": format_time(start_time)\n})\n\n# Action 2: Travel to Alamo Square\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": meeting_location,\n    \"duration\": 16,\n    \"time\": format_time(arrival_time),\n    \"to\": meeting_location\n})\n\n# Action 3: Wait if necessary until Emily is available.\nif arrival_time < emily_available_start:\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": format_time(emily_available_start)\n    })\n\n# Action 4: Meet Emily for the required duration.\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": meeting_location,\n    \"duration\": meeting_duration_minutes,\n    \"time\": format_time(meeting_start_time)\n})\n\n# Build final output JSON dictionary.\noutput = {\n    \"schedule\": schedule\n}\n\n# Print output starting with \"SOLUTION:\" followed by the JSON-formatted dictionary.\nprint(\"SOLUTION:\")\nprint(json.dumps(output, indent=2))",
            "count": "meeting_planning_example_45",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "4:30PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 90,
                    "time": "4:30PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(timestr):\n    # timestr example \"9:00AM\" or \"4:30PM\"\n    # Format: '%I:%M%p' handles times without a leading zero\n    return datetime.strptime(timestr, '%I:%M%p')\n\ndef format_time(dt):\n    # Format the datetime object to the required format: \"H:MMAM/PM\" (strip leading zero from hour)\n    return dt.strftime('%-I:%M%p') if hasattr(dt, 'strftime') else dt.strftime('%#I:%M%p')\n\ndef main():\n    # Input parameters for the Haight-Ashbury -> North Beach meeting with Robert\n    start_location = \"Haight-Ashbury\"\n    destination = \"North Beach\"\n    friend = \"Robert\"\n    travel_duration = 19  # minutes from Haight-Ashbury to North Beach\n    min_meet_duration = 90  # minutes with Robert\n    arrival_time_str = \"9:00AM\"  # you arrive at Haight-Ashbury at 9:00AM\n    friend_available_start_str = \"4:30PM\"  # Robert will be at North Beach from 4:30PM ...\n    # friend_available_end_str = \"9:30PM\"  (not used in schedule computation since meeting is fixed length)\n\n    # Parse times\n    start_time = parse_time(arrival_time_str)\n    travel_td = timedelta(minutes=travel_duration)\n    arrival_at_destination = start_time + travel_td\n\n    meeting_start = parse_time(friend_available_start_str)\n    meeting_duration_td = timedelta(minutes=min_meet_duration)\n    meeting_end = meeting_start + meeting_duration_td\n\n    # Construct schedule following the required solution format\n    # Format the datetime objects to \"H:MMAM/PM\"\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": destination, \"duration\": travel_duration, \"time\": format_time(arrival_at_destination), \"to\": destination},\n        {\"action\": \"wait\", \"location\": destination, \"time\": format_time(meeting_start)},\n        {\"action\": \"meet\", \"location\": destination, \"duration\": min_meet_duration, \"time\": format_time(meeting_start)}\n    ]\n\n    result = {\"schedule\": schedule}\n\n    # Output result as JSON\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    # SOLUTION:\n    # You start at Haight-Ashbury at 9:00AM.\n    # You travel to North Beach in 19 minutes and arrive at 9:19AM.\n    # You wait until 4:30PM.\n    # You meet Robert for 90 minutes from 4:30PM to 6:00PM.\n    main()",
            "count": "meeting_planning_example_46",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse time in H:MMAM/PM format. Using datetime.strptime with format \"%I:%M%p\"\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM without leading zero\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Parameters for the meeting with Paul:\n    start_location = \"Richmond District\"\n    destination = \"Nob Hill\"\n    arrival_start_time_str = \"9:00AM\"  # start time at Richmond District\n    travel_duration = 17  # in minutes\n    # Paul's availability constraints:\n    paul_available_start_str = \"9:30AM\"\n    paul_available_end_str = \"11:15AM\"  # not directly needed, but could be used to check\n    meeting_duration = 15  # in minutes, minimum meeting time\n\n    # Compute times using datetime arithmetic.\n    start_time = parse_time(arrival_start_time_str)\n    # Travel: depart at the start time\n    travel_depart_time = start_time\n    travel_arrival_time = travel_depart_time + timedelta(minutes=travel_duration)\n    \n    # Paul's available start time as datetime object.\n    paul_available_start = parse_time(paul_available_start_str)\n    \n    # Determine meeting start time: we must wait until Paul is available.\n    meeting_start_time = paul_available_start if travel_arrival_time <= paul_available_start else travel_arrival_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Build schedule list as required.\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": destination, \"duration\": travel_duration, \"time\": format_time(travel_depart_time), \"to\": destination},\n        {\"action\": \"wait\", \"location\": destination, \"time\": format_time(meeting_start_time)},\n        {\"action\": \"meet\", \"location\": destination, \"duration\": meeting_duration, \"time\": format_time(meeting_start_time)}\n    ]\n    \n    # For output, we require a JSON-formatted dictionary with key \"schedule\".\n    output = {\"schedule\": schedule}\n    \n    # Print the result as JSON.\n    print(\"SOLUTION:\")\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_47",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "9:30PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime to H:MMAM/PM without leading zero in the hour.\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0] == \"0\":\n        formatted = formatted[1:]\n    return formatted\n\ndef main():\n    # Input parameters for the Financial District to Union Square meeting.\n    # Starting point and time:\n    start_location = \"Financial District\"\n    start_time_str = \"9:00AM\"\n    \n    # Travel from Financial District to Union Square:\n    meeting_location = \"Union Square\"\n    travel_duration = 9  # minutes\n    \n    # Joseph's availability and meeting requirement:\n    friend_available_start_str = \"9:30PM\"\n    friend_available_end_str = \"10:00PM\"  # Not directly used in computation but needed for constraints.\n    meeting_min_duration = 15  # minutes\n\n    # Convert starting time string and travel time to datetime objects.\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\")\n    travel_time_delta = timedelta(minutes=travel_duration)\n    arrival_time = start_time + travel_time_delta\n\n    # Convert friend available start string to datetime.\n    friend_available_start = datetime.strptime(friend_available_start_str, \"%I:%M%p\")\n    # Adjust friend available time if needed (if AM/PM confusion, but here it's PM so it is on the same day)\n    if friend_available_start < start_time:\n        friend_available_start += timedelta(days=1)\n    \n    # Determine meeting start time. We must wait until Joseph is available.\n    meeting_start = friend_available_start if arrival_time <= friend_available_start else arrival_time\n    \n    # Calculate meeting end time (for reference); meeting lasts for at least the minimum duration.\n    meeting_duration_delta = timedelta(minutes=meeting_min_duration)\n    meeting_end = meeting_start + meeting_duration_delta\n\n    # Build the schedule following the defined JSON structure.\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_duration, \"time\": format_time(arrival_time), \"to\": meeting_location},\n        {\"action\": \"wait\", \"location\": meeting_location, \"time\": format_time(meeting_start)},\n        {\"action\": \"meet\", \"location\": meeting_location, \"duration\": meeting_min_duration, \"time\": format_time(meeting_start)}\n    ]\n\n    result = {\"schedule\": schedule}\n    # Output the result as pretty printed JSON.\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_48",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:26AM",
                    "duration": 26,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "2:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport datetime\nimport json\n\ndef parse_time(time_str):\n    # Parse time string in format H:MMAM/PM (e.g., \"9:00AM\")\n    return datetime.datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime as H:MMAM/PM without leading zero for the hour\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    new_dt = dt + datetime.timedelta(minutes=minutes)\n    return format_time(new_dt)\n\ndef main():\n    # Input parameters for the last scenario\n    # Travel: Richmond District to Bayview: 26 minutes.\n    travel_duration = 26  # minutes\n    \n    # Constraint: You arrive at Richmond District at 9:00AM.\n    start_location = \"Richmond District\"\n    start_time = \"9:00AM\"\n    \n    # Meeting details:\n    meeting_person = \"Sarah\"  # Although not used in output, location is Bayview.\n    meeting_location = \"Bayview\"\n    meeting_available_start = \"2:15PM\"  # Sarah will be at Bayview from this time\n    meeting_available_end = \"5:30PM\"    # End of Sarah's availability (not directly used)\n    meeting_min_duration = 45  # minutes\n    \n    # Compute travel arrival time\n    travel_arrival_time = add_minutes(start_time, travel_duration)\n    \n    # The meeting can only happen when Sarah is available.\n    # The earliest meeting start is the meeting available start.\n    meeting_start_time = meeting_available_start\n    # Compute meeting end time (for our own verification if needed)\n    meeting_end_time = add_minutes(meeting_start_time, meeting_min_duration)\n    \n    # Build schedule list following provided format.\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": start_time},\n        {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_duration, \"time\": travel_arrival_time, \"to\": meeting_location},\n        {\"action\": \"wait\", \"location\": meeting_location, \"time\": meeting_start_time},\n        {\"action\": \"meet\", \"location\": meeting_location, \"duration\": meeting_min_duration, \"time\": meeting_start_time}\n    ]\n    \n    # Construct final JSON object\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Print the solution header and JSON result\n    print(\"SOLUTION:\")\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_49",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%#I:%M%p\")\n\ndef main():\n    # Input parameters for the meeting with Melissa:\n    start_location = \"North Beach\"\n    meeting_location = \"Nob Hill\"\n    arrival_time_str = \"9:00AM\"\n    travel_duration = 7  # minutes from North Beach to Nob Hill\n    availability_start_str = \"9:30AM\"\n    availability_end_str = \"8:30PM\"\n    meeting_min_duration = 75  # minutes\n    \n    # Parse times using datetime.strptime. Use a dummy date.\n    time_format = \"%I:%M%p\"\n    start_time = datetime.strptime(arrival_time_str, time_format)\n    available_start = datetime.strptime(availability_start_str, time_format)\n    available_end = datetime.strptime(availability_end_str, time_format)\n    \n    # Compute travel: leaving at start_time, add travel_duration minutes.\n    travel_arrival = start_time + timedelta(minutes=travel_duration)\n    \n    # Wait until Melissa is available, if necessary\n    meeting_start = available_start if available_start > travel_arrival else travel_arrival\n    \n    # Meeting duration: ensure that meeting can end before availability_end if required\n    meeting_end = meeting_start + timedelta(minutes=meeting_min_duration)\n    \n    # Build schedule as list of actions\n    schedule = []\n    \n    # Action: start at starting location at arrival_time_str\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": start_time.strftime(\"%-I:%M%p\")  if start_time.strftime(\"%-I\") else start_time.strftime(\"%#I:%M%p\")\n    })\n    \n    # Action: travel to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": travel_arrival.strftime(\"%-I:%M%p\") if travel_arrival.strftime(\"%-I\") else travel_arrival.strftime(\"%#I:%M%p\"),\n        \"to\": meeting_location\n    })\n    \n    # Action: wait until meeting start if arrival is earlier than available start\n    if travel_arrival < meeting_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": meeting_start.strftime(\"%-I:%M%p\") if meeting_start.strftime(\"%-I\") else meeting_start.strftime(\"%#I:%M%p\")\n        })\n    \n    # Action: meeting action\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_min_duration,\n        \"time\": meeting_start.strftime(\"%-I:%M%p\") if meeting_start.strftime(\"%-I\") else meeting_start.strftime(\"%#I:%M%p\")\n    })\n    \n    # Prepare the final schedule dictionary\n    final_schedule = {\"schedule\": schedule}\n    \n    # Print the SOLUTION header and the JSON formatted schedule.\n    print(\"SOLUTION:\")\n    print(json.dumps(final_schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_50",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "9:22AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 15,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as 'H:MMAM/PM' with no leading zero.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for the meeting at The Castro/Embarcadero with Laura\n    # Start details:\n    start_location = \"The Castro\"\n    start_time_str = \"9:00AM\"\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\")\n    \n    # Travel details:\n    origin = \"The Castro\"\n    destination = \"Embarcadero\"\n    travel_duration = 22  # in minutes\n    \n    # Meeting details:\n    meeting_person = \"Laura\"\n    # Laura's availability at destination:\n    laura_available_start_str = \"8:00AM\"\n    laura_available_end_str = \"11:00AM\"\n    laura_available_start = datetime.strptime(laura_available_start_str, \"%I:%M%p\")\n    laura_available_end = datetime.strptime(laura_available_end_str, \"%I:%M%p\")\n    minimum_meet_duration = 15  # minutes\n    \n    # Compute travel arrival time:\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Determine meeting start time:\n    # If we arrive before Laura is available, we need to wait until her availability begins.\n    meeting_start = arrival_time if arrival_time >= laura_available_start else laura_available_start\n    \n    # Check that meeting can occur within Laura's available window.\n    # The meeting must finish by or before laura_available_end.\n    meeting_end = meeting_start + timedelta(minutes=minimum_meet_duration)\n    if meeting_end > laura_available_end:\n        raise ValueError(\"Not enough time to meet Laura for the required duration.\")\n    \n    # Prepare schedule steps:\n    schedule = []\n    \n    # Step 1: Start\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Step 2: Travel: compute arrival time string.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": destination\n    })\n    \n    # Step 3: Wait (if any wait is needed)\n    # If arrival time is before meeting start, then a wait is required.\n    wait_time = arrival_time if arrival_time >= laura_available_start else laura_available_start\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": destination,\n        \"time\": format_time(wait_time)\n    })\n    \n    # Step 4: Meet\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": minimum_meet_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Prepare result dictionary\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Output result as JSON\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    # SOLUTION: You start at The Castro at 9:00AM.\n    # You travel to Embarcadero in 22 minutes and arrive at 9:22AM.\n    # You wait at Embarcadero until 9:22AM (no waiting needed as you arrived after Laura\u2019s available time).\n    # You meet Laura for 15 minutes from 9:22AM to 9:37AM.\n    main()",
            "count": "meeting_planning_example_51",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:14AM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(total_minutes):\n    # Converts minutes since midnight to formatted time \"H:MMAM/PM\"\n    hour = total_minutes // 60\n    minute = total_minutes % 60\n    period = \"AM\"\n    if hour >= 12:\n        period = \"PM\"\n    display_hour = hour\n    if hour == 0:\n        display_hour = 12\n    elif hour > 12:\n        display_hour = hour - 12\n    return f\"{display_hour}:{minute:02d}{period}\"\n\ndef add_minutes(time_str, minutes_to_add):\n    # Convert time_str formatted as \"H:MMAM/PM\" into minutes since midnight, add minutes, and convert back.\n    # Parse time_str to get hour, minute and period\n    period = time_str[-2:]\n    time_part = time_str[:-2]\n    hour, minute = map(int, time_part.split(\":\"))\n    if period == \"PM\" and hour != 12:\n        hour += 12\n    if period == \"AM\" and hour == 12:\n        hour = 0\n    total_minutes = hour * 60 + minute + minutes_to_add\n    return minutes_to_time_str(total_minutes)\n\n# Input parameters for the meeting with Barbara:\n# Travel distances:\n# Russian Hill to Richmond District: 14 minutes.\n# Arrival: You arrive at Russian Hill at 9:00AM.\n# Barbara will be at Richmond District from 1:15PM to 6:15PM.\n# Minimum meeting duration: 45 minutes.\n\n# Calculation:\nstart_location = \"Russian Hill\"\ndestination = \"Richmond District\"\nstart_time_str = \"9:00AM\"\ntravel_duration = 14\n\n# Compute arrival time at destination\narrival_time_str = add_minutes(start_time_str, travel_duration)\n\n# Barbara is available starting at 1:15PM -> we need to wait until then.\nmeeting_start_str = \"1:15PM\"\nmeeting_duration = 45\n# Meeting end time (not directly used in schedule but computed logically):\nmeeting_end = add_minutes(meeting_start_str, meeting_duration)\n\n# Build the schedule steps as a list of dictionaries\nschedule = [\n    {\"action\": \"start\", \"location\": start_location, \"time\": start_time_str},\n    {\"action\": \"travel\", \"location\": destination, \"duration\": travel_duration, \"time\": arrival_time_str, \"to\": destination},\n    {\"action\": \"wait\", \"location\": destination, \"time\": meeting_start_str},\n    {\"action\": \"meet\", \"location\": destination, \"duration\": meeting_duration, \"time\": meeting_start_str}\n]\n\n# Create the final output dictionary\noutput = {\"schedule\": schedule}\n\n# Print the result with the required header and JSON output.\nprint(\"SOLUTION:\")\nprint(json.dumps(output, indent=2))",
            "count": "meeting_planning_example_52",
            "is_correct": true
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 120,
                    "time": "10:15AM"
                }
            ],
            "type_error": "SyntaxError",
            "full_response": "SOLUTION: You start at Richmond District at 9:00AM. You travel to Alamo Square in 13 minutes and arrive at 9:13AM. You wait until 10:15AM. You meet Ashley for 120 minutes from 10:15AM to 12:15PM.\n\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime in H:MMAM/PM style without a leading zero.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef compute_schedule():\n    # Input parameters for the Ashley meeting scenario:\n    start_location = \"Richmond District\"\n    meeting_location = \"Alamo Square\"\n    \n    # Times and durations\n    arrival_str = \"9:00AM\"  # arrival time at starting location as given\n    travel_duration = 13   # minutes from Richmond District to Alamo Square\n    \n    # Ashley meeting constraints:\n    ashley_available_start_str = \"10:15AM\"\n    ashley_available_end_str = \"1:00PM\"\n    meeting_min_duration = 120  # minutes desired meeting duration\n\n    # Use an arbitrary date for datetime arithmetic\n    base_date = \"2023-01-01 \"\n    \n    start_time = datetime.strptime(base_date + arrival_str, \"%Y-%m-%d %I:%M%p\")\n    ashley_available_start = datetime.strptime(base_date + ashley_available_start_str, \"%Y-%m-%d %I:%M%p\")\n    ashley_available_end = datetime.strptime(base_date + ashley_available_end_str, \"%Y-%m-%d %I:%M%p\")\n    \n    # Compute arrival time at meeting location after travel.\n    travel_arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Meeting should start at max(arrival time, Ashley available start)\n    meeting_start_time = max(travel_arrival_time, ashley_available_start)\n    # Meeting duration is fixed as minimum requirement.\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_min_duration)\n    \n    # Check if meeting can be held within Ashley's available window.\n    if meeting_end_time > ashley_available_end:\n        raise ValueError(\"Cannot meet Ashley for the required duration within the available window.\")\n    \n    # Build the schedule list according to the specified JSON format.\n    schedule = []\n    \n    # Start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Travel action\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_arrival_time),\n        \"to\": meeting_location\n    })\n    \n    # Wait action (only add if waiting is required)\n    if travel_arrival_time < meeting_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(meeting_start_time)\n        })\n    \n    # Meet action\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    return {\"schedule\": schedule}\n\ndef main():\n    schedule_dict = compute_schedule()\n    # Print the JSON output with indentations\n    print(json.dumps(schedule_dict, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_53",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef add_minutes(time_obj, minutes):\n    return time_obj + timedelta(minutes=minutes)\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM (e.g., 9:00AM, no leading zero for hour)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\n# Input parameters for the meeting schedule\n# Starting point and time\nstart_location = \"Financial District\"\nstart_time_str = \"9:00AM\"\ntravel_time = 17  # minutes from Financial District to Mission District\ndestination = \"Mission District\"\n\n# Meeting constraints for William\nfriend_location = \"Mission District\"\nfriend_available_start_str = \"1:15PM\"\nfriend_available_end_str = \"2:15PM\"\nmin_meet_duration = 45  # minutes\n\n# Parse times from strings\nstart_time = datetime.strptime(start_time_str, \"%I:%M%p\")\nfriend_available_start = datetime.strptime(friend_available_start_str, \"%I:%M%p\")\nfriend_available_end = datetime.strptime(friend_available_end_str, \"%I:%M%p\")\n\n# Compute travel arrival time at the destination\narrival_time = add_minutes(start_time, travel_time)\n\n# The meeting with William can only start when he is available and after arrival.\nmeeting_start = friend_available_start if arrival_time <= friend_available_start else arrival_time\n\n# Ensure the meeting meets the minimum duration requirement\nmeeting_end = add_minutes(meeting_start, min_meet_duration)\nif meeting_end > friend_available_end:\n    raise ValueError(\"Not enough time to meet William for the required duration within his available window.\")\n\n# Build the schedule as a list of events\nschedule = [\n    {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n    {\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": format_time(start_time), \"to\": destination},\n    {\"action\": \"wait\", \"location\": destination, \"time\": format_time(arrival_time)},\n    {\"action\": \"meet\", \"location\": destination, \"duration\": min_meet_duration, \"time\": format_time(meeting_start)}\n]\n\n# Prepare the final output dictionary\nresult = {\"schedule\": schedule}\n\n# Output the result in JSON format with the required SOLUTION: header\nprint(\"SOLUTION:\")\nprint(json.dumps(result, indent=2))",
            "count": "meeting_planning_example_54",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Custom formatting to remove any leading zero for hour\n    hour = dt.hour % 12\n    if hour == 0:\n        hour = 12\n    return f\"{hour}:{dt.minute:02d}{'AM' if dt.hour < 12 else 'PM'}\"\n\ndef main():\n    # Input variables for the Financial District -> Nob Hill schedule with Helen\n    start_location = \"Financial District\"\n    meeting_location = \"Nob Hill\"\n    start_time_str = \"9:00AM\"  # arrival at Financial District\n    travel_duration = 8       # minutes from Financial District to Nob Hill\n    helen_arrival_str = \"11:30AM\"\n    helen_departure_str = \"12:15PM\"\n    meeting_min_duration = 45 # minutes required to meet Helen\n\n    # Helper: parse a time string in format H:MMAM/PM (using arbitrary date)\n    def parse_time(timestr):\n        return datetime.strptime(timestr, \"%I:%M%p\")\n    \n    # Parse times\n    start_dt = parse_time(start_time_str)\n    helen_start_dt = parse_time(helen_arrival_str)\n    helen_end_dt = parse_time(helen_departure_str)\n    \n    # Compute travel: departure from Financial District at start time\n    # Arrival to Nob Hill: start time plus travel_duration\n    arrival_dt = start_dt + timedelta(minutes=travel_duration)\n    \n    # Determine meeting start time: must start when Helen is available.\n    # Since we arrive at Nob Hill earlier than Helen's available time, we wait until her arrival.\n    meeting_start_dt = helen_start_dt\n    # Compute meeting end time, meeting duration is exactly meeting_min_duration\n    meeting_end_dt = meeting_start_dt + timedelta(minutes=meeting_min_duration)\n    \n    # Verify that meeting end time does not surpass Helen's departure time.\n    # If it does, adjust meeting duration accordingly.\n    if meeting_end_dt > helen_end_dt:\n        meeting_duration = int((helen_end_dt - meeting_start_dt).total_seconds() / 60)\n    else:\n        meeting_duration = meeting_min_duration\n\n    # Create schedule list\n    schedule = []\n    \n    # Start event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_dt)\n    })\n    \n    # Travel event - starting from Financial District, leaving at start time.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(start_dt),\n        \"to\": meeting_location\n    })\n    \n    # Wait event\n    # We consider the wait event time as when the meeting can begin (arrival time might be different but we wait until Helen arrives).\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": format_time(meeting_start_dt)\n    })\n    \n    # Meet event with Helen\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_dt)\n    })\n    \n    # Create result dict\n    result = {\"schedule\": schedule}\n    \n    # Print JSON output\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_55",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:15AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse time in the format H:MMAM/PM, e.g. \"9:00AM\"\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM without leading zero\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%#I:%M%p\")\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    new_dt = dt + timedelta(minutes=minutes)\n    return format_time(new_dt)\n\ndef main():\n    # Input parameters:\n    # Location travel times (in minutes)\n    travel_chinatown_to_nobhill = 8   # minutes\n    travel_nobhill_to_chinatown = 6   # Not used in forward schedule\n\n    # Constraints:\n    start_location = \"Chinatown\"\n    start_time = \"9:00AM\"\n\n    meeting_location = \"Nob Hill\"\n    joshua_arrival = \"10:15AM\"   # Joshua available time start at Nob Hill\n    joshua_leave = \"1:00PM\"\n    meeting_duration = 45  # minutes (minimum meeting duration required)\n\n    # Compute schedule:\n    # 1. Start at Chinatown at 9:00AM\n    # 2. Travel from Chinatown to Nob Hill taking 8 minutes\n    travel_departure_time = start_time  # depart immediately at 9:00AM\n    arrival_time = add_minutes(travel_departure_time, travel_chinatown_to_nobhill)\n    \n    # 3. Wait until Joshua arrives at 10:15AM.\n    # Compute wait start time: We are already at Nob Hill from arrival_time. The actual wait begins when Joshua arrives.\n    wait_time = joshua_arrival\n\n    # 4. Meet Joshua for 45 minutes starting at 10:15AM.\n    meeting_start_time = joshua_arrival\n    meeting_end_time = add_minutes(meeting_start_time, meeting_duration)\n    \n    # Construct the schedule in the desired JSON output format.\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": start_time},\n        {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_chinatown_to_nobhill, \"time\": arrival_time, \"to\": meeting_location},\n        {\"action\": \"wait\", \"location\": meeting_location, \"time\": wait_time},\n        {\"action\": \"meet\", \"location\": meeting_location, \"duration\": meeting_duration, \"time\": meeting_start_time}\n    ]\n\n    result = {\"schedule\": schedule}\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_56",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "10:30AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse time in the format H:MMAM/PM (e.g., \"9:00AM\")\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime into time string like \"9:00AM\" without a leading zero\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0] == \"0\":\n        formatted = formatted[1:]\n    return formatted\n\ndef compute_schedule():\n    # Input variables for the meeting at Sunset District with Jessica\n    start_location = \"Bayview\"\n    destination = \"Sunset District\"\n    initial_arrival_at_start = \"9:00AM\"  # You arrive at Bayview at 9:00AM\n\n    travel_duration = 23  # minutes from Bayview to Sunset District\n\n    # Jessica's availability and meeting requirement\n    jessica_available_from = \"10:30AM\"\n    jessica_available_to = \"5:45PM\"  # not used in schedule because meeting requirement is earlier\n    meeting_duration = 60  # minimum meeting duration in minutes\n\n    # Convert times to datetime objects\n    start_time = parse_time(initial_arrival_at_start)\n    meeting_start_time = parse_time(jessica_available_from)\n    \n    # Calculate travel arrival time to the destination (Sunset District)\n    travel_time_delta = timedelta(minutes=travel_duration)\n    arrival_time = start_time + travel_time_delta\n\n    # Waiting: if arrival is before Jessica's available start time, then wait until meeting_start_time\n    # Otherwise, the meeting would start immediately.\n    wait_start_time = meeting_start_time if arrival_time < meeting_start_time else arrival_time\n\n    # Construct the schedule as a list of steps:\n    schedule = []\n    \n    # Step 1: start at Bayview at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Step 2: travel from Bayview to Sunset District, arriving at computed time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": destination\n    })\n    \n    # Step 3: wait until the meeting start time (Jessica available start)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": destination,\n        \"time\": format_time(wait_start_time)\n    })\n    \n    # Step 4: meet Jessica for 60 minutes starting at her available time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": meeting_duration,\n        \"time\": format_time(wait_start_time)\n    })\n    \n    return {\"schedule\": schedule}\n\ndef main():\n    schedule_dict = compute_schedule()\n    # Print \"SOLUTION:\" followed by the schedule in JSON format.\n    print(\"SOLUTION:\")\n    print(json.dumps(schedule_dict, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_57",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "9:20AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 30,
                    "time": "9:20AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse a time string like \"9:00AM\"\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    # Format time with no leading zero for hour (e.g., \"9:00AM\")\n    time_str = dt.strftime('%I:%M%p')\n    if time_str[0] == '0':\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters for the Nancy meeting schedule:\n    # Arrival location and time.\n    start_location = \"The Castro\"\n    start_time_str = \"9:00AM\"\n    start_time = parse_time(start_time_str)\n    \n    # Travel constraints:\n    travel_duration = 20  # minutes from The Castro to Financial District\n    \n    # Nancy meeting constraints:\n    meeting_location = \"Financial District\"\n    nancy_start_str = \"9:15AM\"   # earliest time Nancy is available\n    nancy_end_str = \"4:45PM\"     # latest time Nancy is available\n    meeting_minimum_duration = 30  # minutes\n    \n    # Calculate travel arrival time.\n    travel_time = timedelta(minutes=travel_duration)\n    arrival_time = start_time + travel_time\n    \n    # Determine meeting start time.\n    # Nancy is available starting at 9:15AM, so if arrival is later than that, meeting starts at arrival.\n    nancy_available_from = parse_time(nancy_start_str)\n    meeting_start_time = arrival_time if arrival_time >= nancy_available_from else nancy_available_from\n    \n    # Check if meeting can occur within Nancy's available window.\n    nancy_available_until = parse_time(nancy_end_str)\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_minimum_duration)\n    if meeting_end_time > nancy_available_until:\n        raise ValueError(\"Cannot schedule meeting for the minimum required duration within Nancy's available time.\")\n    \n    # Build schedule steps.\n    schedule = []\n    \n    # Step 1: Start at The Castro.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Step 2: Travel to Financial District.\n    # We'll mark the travel step with the arrival time.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": meeting_location\n    })\n    \n    # If waiting is necessary - in this case, if arrival is before meeting start time.\n    if arrival_time < meeting_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(meeting_start_time)\n        })\n    \n    # Step 3: Meet Nancy.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_minimum_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Output the schedule as a JSON-formatted dictionary.\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_58",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 105,
                    "time": "9:19AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as 'H:MMAM/PM' with no leading zero on hour.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for the meeting with Richard at Haight-Ashbury:\n    # Initial start location and arrival time:\n    start_location = \"Bayview\"\n    start_time_str = \"9:00AM\"\n    # Travel time from Bayview to Haight-Ashbury (in minutes)\n    travel_duration = 19\n    destination = \"Haight-Ashbury\"\n    # Richard's availability window and required meeting duration:\n    richard_available_start_str = \"7:00AM\"\n    richard_available_end_str = \"3:45PM\"\n    meeting_duration = 105  # in minutes\n\n    # Parse start time into datetime object; using an arbitrary date (e.g., Jan 1, 2000)\n    base_date = \"2000-01-01 \"\n    start_time = datetime.strptime(base_date + start_time_str, \"%Y-%m-%d %I:%M%p\")\n    \n    # Calculate travel arrival time at destination:\n    travel_time_delta = timedelta(minutes=travel_duration)\n    arrival_time = start_time + travel_time_delta\n\n    # Parse Richard's availability start and end times:\n    richard_start = datetime.strptime(base_date + richard_available_start_str, \"%Y-%m-%d %I:%M%p\")\n    richard_end = datetime.strptime(base_date + richard_available_end_str, \"%Y-%m-%d %I:%M%p\")\n    \n    # Since arrival_time might be after Richard's available start,\n    # meeting can start at max(arrival_time, richard_start).\n    meeting_start = max(arrival_time, richard_start)\n    meeting_time_delta = timedelta(minutes=meeting_duration)\n    meeting_end = meeting_start + meeting_time_delta\n\n    # Ensure meeting_end does not exceed Richard's availability.\n    # If it does, adjust the meeting start time so that the meeting can still last the required duration.\n    if meeting_end > richard_end:\n        # Adjust meeting start time backward as long as it does not start before arrival_time.\n        possible_meeting_start = richard_end - meeting_time_delta\n        if possible_meeting_start >= arrival_time:\n            meeting_start = possible_meeting_start\n            meeting_end = richard_end\n        else:\n            # In a real scenario, the meeting might be infeasible.\n            raise ValueError(\"Meeting constraints cannot be satisfied with the current timings.\")\n\n    # Construct the schedule as an ordered list of actions.\n    schedule = []\n    # Action 1: Start at initial location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    # Action 2: Travel to destination\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": destination\n    })\n    # If there's waiting time between arrival and the meeting start, add a wait action.\n    if arrival_time < meeting_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": destination,\n            \"time\": format_time(arrival_time)\n        })\n    # Action 3: Meet Richard\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Final schedule dictionary\n    result = {\"schedule\": schedule}\n    \n    # Output the result as a JSON-formatted string.\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_59",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:30PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 45,
                    "time": "6:30PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time in \"H:MMAM/PM\", remove leading zero for hour if present\n    return dt.strftime('%-I:%M%p') if hasattr(dt, 'strftime') else dt.strftime('%#I:%M%p')\n\n# Input parameters for the Union Square to Chinatown meeting\n# Start location/time\nstart_location = \"Union Square\"\nstart_time_str = \"9:00AM\"\n\n# Travel details\nfrom_location = \"Union Square\"\nto_location = \"Chinatown\"\ntravel_duration = 7  # in minutes\n\n# Meeting constraints and details\nmeeting_person = \"Carol\"\nmeeting_location = \"Chinatown\"\nmeeting_min_duration = 45  # minutes\n# Carol's available times at Chinatown: from 6:30PM to 8:00PM\nmeeting_available_start_str = \"6:30PM\"\nmeeting_available_end_str = \"8:00PM\"\n\n# Convert time strings to datetime objects (dummy date, only time matters)\ndef parse_time(tstr):\n    return datetime.strptime(tstr, '%I:%M%p')\n\nstart_dt = parse_time(start_time_str)\narrival_dt = start_dt + timedelta(minutes=travel_duration)\nmeeting_available_start = parse_time(meeting_available_start_str)\n# meeting meeting start time: wait until Carol is available\n# Since the arrival (9:07AM) is much earlier than availability (6:30PM), we must wait.\nmeeting_start_dt = meeting_available_start\nmeeting_end_dt = meeting_start_dt + timedelta(minutes=meeting_min_duration)\n\n# Create the schedule steps as required\nschedule = []\n\n# Step 1: start event\nschedule.append({\n    \"action\": \"start\",\n    \"location\": start_location,\n    \"time\": format_time(start_dt)\n})\n\n# Step 2: travel event\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": to_location,\n    \"duration\": travel_duration,\n    \"time\": format_time(arrival_dt),\n    \"to\": to_location\n})\n\n# Step 3: wait event - wait until the meeting available time\nschedule.append({\n    \"action\": \"wait\",\n    \"location\": meeting_location,\n    \"time\": format_time(meeting_start_dt)\n})\n\n# Step 4: meet event\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": meeting_location,\n    \"duration\": meeting_min_duration,\n    \"time\": format_time(meeting_start_dt)\n})\n\n# Construct the final JSON output\noutput = {\n    \"schedule\": schedule\n}\n\n# Output the JSON formatted result\nprint(json.dumps(output, indent=2))",
            "count": "meeting_planning_example_60",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "7:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 90,
                    "time": "7:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format a datetime object to 'H:MMAM/PM' (no leading zero hour)\n    hour = dt.hour\n    minute = dt.minute\n    period = \"AM\" if hour < 12 else \"PM\"\n    display_hour = hour % 12\n    if display_hour == 0:\n        display_hour = 12\n    return f\"{display_hour}:{minute:02d}{period}\"\n\ndef main():\n    # Input parameters for meeting with Stephanie\n    # Start location: Golden Gate Park at 9:00AM\n    start_location = \"Golden Gate Park\"\n    start_time_str = \"9:00AM\"\n    \n    # Travel details from Golden Gate Park to Presidio\n    travel_time_minutes = 11\n    destination = \"Presidio\"\n    \n    # Meeting constraints with Stephanie\n    # Stephanie is at Presidio from 7:15PM to 10:00PM, meeting duration minimum 90 minutes.\n    meeting_location = \"Presidio\"\n    meeting_start_constraint_str = \"7:15PM\"\n    meeting_end_constraint_str = \"10:00PM\"\n    meeting_duration_minutes = 90\n\n    # Parse times using a helper function.\n    # Since we only care about time (not date), use a common date.\n    base_date = datetime(1900, 1, 1)\n    \n    def parse_time(time_str):\n        # Convert string like \"9:00AM\" to datetime object\n        return datetime.strptime(time_str, \"%I:%M%p\").replace(year=1900, month=1, day=1)\n    \n    start_time = parse_time(start_time_str)\n    meeting_start_constraint = parse_time(meeting_start_constraint_str)\n    meeting_end_constraint = parse_time(meeting_end_constraint_str)\n\n    # Compute travel arrival time.\n    travel_duration = timedelta(minutes=travel_time_minutes)\n    travel_arrival_time = start_time + travel_duration\n\n    # The earliest meeting time is the meeting constraint start time.\n    meeting_start_time = meeting_start_constraint\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration_minutes)\n    \n    # Build schedule events.\n    schedule = []\n    # Start event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    # Travel event\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_time_minutes,\n        \"time\": format_time(travel_arrival_time),\n        \"to\": destination\n    })\n    # Wait event: wait until meeting start time (Stephanie becomes available)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": destination,\n        \"time\": format_time(meeting_start_time)\n    })\n    # Meet event\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration_minutes,\n        \"time\": format_time(meeting_start_time)\n    })\n\n    result = {\"schedule\": schedule}\n    \n    # Output the schedule as a JSON-formatted dictionary.\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_61",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:14AM",
                    "duration": 14,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(timestr):\n    # Convert time string in format '9:00AM' to a datetime object (the date is arbitrary)\n    return datetime.strptime(timestr, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime to H:MMAM/PM without leading zero on hour.\n    hour = dt.hour\n    if hour > 12:\n        hour -= 12\n    elif hour == 0:\n        hour = 12\n    return f\"{hour}:{dt.minute:02d}{dt.strftime('%p')}\"\n\ndef main():\n    # Input parameters for meeting with Amanda\n    start_location = \"Presidio\"\n    meeting_location = \"Russian Hill\"\n    start_time_str = \"9:00AM\"\n    travel_duration = 14  # minutes from Presidio to Russian Hill\n    # Amanda's availability and meeting requirement\n    amanda_available_start_str = \"11:30AM\"\n    amanda_available_end_str = \"9:15PM\"  # Not used directly in schedule, but provided constraint.\n    meeting_duration = 15  # minutes\n    \n    # Parse start time and Amanda's available start time\n    start_time = parse_time(start_time_str)\n    amanda_available_start = parse_time(amanda_available_start_str)\n    \n    # Compute arrival time at Russian Hill\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # We must wait until Amanda is available.\n    # Determine the actual meeting start time as the later of arrival and Amanda's available start.\n    if arrival_time < amanda_available_start:\n        actual_meeting_start = amanda_available_start\n    else:\n        actual_meeting_start = arrival_time\n    \n    # Compute meeting end time based on meeting duration requirement.\n    meeting_end = actual_meeting_start + timedelta(minutes=meeting_duration)\n    \n    # Build the schedule in steps.\n    schedule = []\n    \n    # Step 1: Start at Presidio at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Step 2: Travel from Presidio to Russian Hill\n    travel_arrival_time = arrival_time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_arrival_time),\n        \"to\": meeting_location\n    })\n    \n    # Step 3: Wait at Russian Hill until Amanda is available (if needed)\n    if travel_arrival_time < actual_meeting_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(actual_meeting_start)\n        })\n    \n    # Step 4: Meet Amanda for 15 minutes starting at the actual meeting start time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(actual_meeting_start)\n    })\n    \n    # Prepare final JSON output dictionary\n    output = {\"schedule\": schedule}\n    \n    # Print out JSON-formatted schedule\n    print(json.dumps(output, indent=2))\n    \nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_62",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:31AM",
                    "duration": 31,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "9:31AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 31,
                    "time": "9:31AM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "9:31AM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM with no leading zero on hour.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef compute_schedule():\n    # Input parameters for the Presidio-to-Bayview meeting with Nancy.\n    # Starting information\n    start_location = \"Presidio\"\n    start_time_str = \"9:00AM\"\n    # Convert start time to datetime object (use arbitrary date)\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\")\n    \n    # Travel info: Presidio to Bayview takes 31 minutes.\n    travel_duration = 31  # in minutes\n    \n    # Nancy's constraints at Bayview\n    friend_location = \"Bayview\"\n    friend_available_start_str = \"7:15AM\"\n    friend_available_end_str = \"5:30PM\"\n    friend_meeting_duration = 30  # in minutes\n    \n    friend_available_start = datetime.strptime(friend_available_start_str, \"%I:%M%p\")\n    friend_available_end = datetime.strptime(friend_available_end_str, \"%I:%M%p\")\n    \n    # Compute arrival time at Bayview by adding travel duration\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Determine meeting start time: reception can only start when both you and Nancy are available.\n    # Nancy is available since 7:15AM so if you arrive after that, meeting starts at arrival.\n    meeting_start = arrival_time if arrival_time > friend_available_start else friend_available_start\n    \n    # Meeting must last for at least the minimum required duration.\n    meeting_end = meeting_start + timedelta(minutes=friend_meeting_duration)\n    \n    # Create the schedule list.\n    schedule = []\n    \n    # Start event at Presidio.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Travel event from Presidio to Bayview.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": friend_location\n    })\n    \n    # Determine if there is a wait needed.\n    # If arrival is before the friend's available window, then wait until friend is available.\n    if arrival_time < friend_available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(friend_available_start)\n        })\n    \n    # Meet event at Bayview.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": friend_meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))",
            "count": "meeting_planning_example_63",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "3:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "3:45PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime dt as \"H:MMAM/PM\" without a leading zero\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # -------------------------------\n    # Input parameters for the meeting with Margaret at Pacific Heights\n    # -------------------------------\n    start_location = \"Nob Hill\"\n    meeting_location = \"Pacific Heights\"\n    \n    # Travel time from Nob Hill to Pacific Heights is 8 minutes.\n    travel_duration = 8  # minutes\n\n    # Start time: arrival at Nob Hill is 9:00AM.\n    start_time_str = \"9:00AM\"\n    start_datetime = datetime.strptime(start_time_str, \"%I:%M%p\")\n    \n    # Margaret's available time at Pacific Heights\n    margaret_available_start_str = \"3:45PM\"\n    margaret_available_start = datetime.strptime(margaret_available_start_str, \"%I:%M%p\")\n    margaret_available_end_str = \"7:15PM\"\n    margaret_available_end = datetime.strptime(margaret_available_end_str, \"%I:%M%p\")\n    \n    # Minimum meeting duration for Margaret is 45 minutes.\n    meeting_duration = 45  # minutes\n\n    # Calculate departure and arrival times.\n    # Depart Nob Hill at start time.\n    travel_departure = start_datetime\n    # Arrival at Pacific Heights after travel_duration minutes.\n    arrival_datetime = travel_departure + timedelta(minutes=travel_duration)\n    \n    # Wait until the available meeting start time:\n    # If arrival is earlier than Margaret's available start time, wait until then.\n    meeting_start = margaret_available_start if arrival_datetime < margaret_available_start else arrival_datetime\n    \n    # Ensure that we can have the meeting for the required duration before the end of Margaret's available time.\n    meeting_end = meeting_start + timedelta(minutes=meeting_duration)\n    if meeting_end > margaret_available_end:\n        raise ValueError(\"Not enough time to meet Margaret for the required duration within her availability.\")\n    \n    # Format all times as strings.\n    start_time_fmt = format_time(start_datetime)\n    travel_departure_fmt = format_time(travel_departure)\n    arrival_time_fmt = format_time(arrival_datetime)\n    meeting_start_fmt = format_time(meeting_start)\n    meeting_end_fmt = format_time(meeting_end)\n\n    # Build schedule steps:\n    # Following the structure:\n    # {\n    #   \"schedule\": [\n    #     {\"action\": \"start\", \"location\": \"Location Name\", \"time\": \"H:MMAM/PM\"},\n    #     {\"action\": \"travel\", \"location\": \"Destination\", \"duration\": X, \"time\": \"H:MMAM/PM\", \"to\": \"Destination\"},\n    #     {\"action\": \"wait\", \"location\": \"Location Name\", \"time\": \"H:MMAM/PM\"},\n    #     {\"action\": \"meet\", \"location\": \"Location Name\", \"duration\": X, \"time\": \"H:MMAM/PM\"}\n    #   ]\n    # }\n    schedule = []\n    # 1. Start at Nob Hill at 9:00AM.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": start_time_fmt\n    })\n    # 2. Travel from Nob Hill to Pacific Heights.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": travel_departure_fmt,\n        \"to\": meeting_location\n    })\n    # 3. Wait at Pacific Heights until meeting start.\n    # Since arrival time may be earlier than the meeting start time,\n    # we record the wait as starting at meeting_start time.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": meeting_start_fmt\n    })\n    # 4. Meet Margaret for the minimum required duration.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_start_fmt\n    })\n\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_64",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:25AM",
                    "duration": 25,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "7:00PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 45,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime to string like '9:00AM' (remove any leading 0)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for this schedule:\n    # Starting location and time\n    start_location = \"Golden Gate Park\"\n    start_time_str = \"9:00AM\"\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\")\n    \n    # Travel details\n    travel_from = \"Golden Gate Park\"\n    travel_to = \"Embarcadero\"\n    travel_duration = 25  # in minutes\n    \n    # Meeting constraints\n    meeting_friend = \"Sandra\"\n    meeting_location = \"Embarcadero\"\n    meeting_available_start_str = \"7:00PM\"\n    meeting_available_end_str = \"9:00PM\"\n    meeting_available_start = datetime.strptime(meeting_available_start_str, \"%I:%M%p\")\n    meeting_available_end = datetime.strptime(meeting_available_end_str, \"%I:%M%p\")\n    meeting_min_duration = 45  # in minutes\n    \n    # Compute travel arrival time\n    travel_td = timedelta(minutes=travel_duration)\n    arrival_time = start_time + travel_td\n\n    # Determine meeting start time: must also be within friend's available window.\n    # Since we arrive before friend's availability, wait until meeting_available_start \n    # (provided that meeting_available_start is later than arrival_time)\n    meeting_start = meeting_available_start if arrival_time < meeting_available_start else arrival_time\n    meeting_end = meeting_start + timedelta(minutes=meeting_min_duration)\n    \n    # Build schedule steps\n    schedule = []\n    \n    # Step 1: Start at Golden Gate Park at start_time\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Step 2: Travel from Golden Gate Park to Embarcadero\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": travel_to,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": travel_to\n    })\n    \n    # Step 3: If arrival time is before meeting start, wait until meeting start\n    if arrival_time < meeting_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(meeting_start)\n        })\n    \n    # Step 4: Meet Sandra for the minimum required duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Build output dictionary in required JSON structure\n    output = {\"schedule\": schedule}\n    \n    # Output JSON-formatted result\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_65",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:15AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 120,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\n\n# Helper function to convert a time string (e.g., \"9:00AM\") to minutes since midnight.\ndef time_str_to_minutes(time_str):\n    # Expected format: H:MMAM/PM or HH:MMAM/PM (e.g., \"9:00AM\", \"11:15AM\")\n    period = time_str[-2:]\n    time_part = time_str[:-2]\n    hour_str, minute_str = time_part.split(\":\")\n    hour = int(hour_str)\n    minute = int(minute_str)\n    if period.upper() == \"PM\" and hour != 12:\n        hour += 12\n    if period.upper() == \"AM\" and hour == 12:\n        hour = 0\n    return hour * 60 + minute\n\n# Helper function to convert minutes since midnight back to time string H:MMAM/PM.\ndef minutes_to_time_str(minutes):\n    hour = minutes // 60\n    minute = minutes % 60\n    period = \"AM\"\n    if hour >= 12:\n        period = \"PM\"\n    display_hour = hour % 12\n    if display_hour == 0:\n        display_hour = 12\n    return f\"{display_hour}:{minute:02d}{period}\"\n\ndef compute_schedule():\n    # Input variables for the Robert meeting scenario.\n    start_location = \"Nob Hill\"\n    start_time_str = \"9:00AM\"\n    travel_duration = 17  # minutes from Nob Hill to Presidio\n    destination = \"Presidio\"\n    \n    # Meeting parameters for Robert\n    meeting_person = \"Robert\"\n    meeting_location = \"Presidio\"\n    meeting_available_start_str = \"11:15AM\"\n    meeting_available_end_str = \"5:45PM\"  # though not directly used; meeting must last 120 minutes\n    meeting_duration = 120  # in minutes\n    \n    # Convert times to minutes\n    start_time = time_str_to_minutes(start_time_str)\n    meeting_available_start = time_str_to_minutes(meeting_available_start_str)\n    \n    # Compute arrival time at destination after travel\n    arrival_time = start_time + travel_duration\n    arrival_time_str = minutes_to_time_str(arrival_time)\n    \n    # If you arrive before the meeting can begin, wait until the available start time.\n    meeting_start = max(arrival_time, meeting_available_start)\n    meeting_start_str = minutes_to_time_str(meeting_start)\n    \n    # Meeting end time\n    meeting_end = meeting_start + meeting_duration\n    meeting_end_str = minutes_to_time_str(meeting_end)\n    \n    # Build the schedule events in the required JSON structure.\n    schedule = []\n    \n    # Start event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": start_time_str\n    })\n    \n    # Travel event: we assume the travel is done immediately at start time.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": arrival_time_str,\n        \"to\": destination\n    })\n    \n    # Wait event: if arrival time is before the meeting available start.\n    # We output the waiting event at the time the meeting is scheduled to start.\n    if arrival_time < meeting_available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": meeting_available_start_str\n        })\n    else:\n        # If arrival is after the available time, we do not include a wait.\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": arrival_time_str\n        })\n    \n    # Meet event\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": meeting_start_str\n    })\n    \n    # Return schedule dictionary.\n    return {\"schedule\": schedule}\n\ndef main():\n    schedule_plan = compute_schedule()\n    # Output the result as a JSON-formatted dictionary.\n    print(json.dumps(schedule_plan, indent=2))\n\nif __name__ == \"__main__\":\n    # SOLUTION:\n    main()",
            "count": "meeting_planning_example_66",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:26AM",
                    "duration": 26,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "8:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 105,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime to H:MMAM/PM without leading zero in hour.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for Kenneth meeting at Financial District\n    start_location = \"Golden Gate Park\"\n    meeting_location = \"Financial District\"\n    \n    # Start time at Golden Gate Park: 9:00AM (using arbitrary date)\n    start_time = datetime(2023, 1, 1, 9, 0)\n    \n    # Travel time from Golden Gate Park to Financial District in minutes\n    travel_duration = 26  # minutes\n    \n    # Kenneth's availability window at Financial District: 8:00PM to 10:00PM\n    available_start = datetime(2023, 1, 1, 20, 0)\n    available_end = datetime(2023, 1, 1, 22, 0)\n    \n    # Minimum meeting duration in minutes\n    meeting_duration = 105  # minutes\n    \n    # Compute travel arrival time\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Compute meeting start time: must be not before both arrival and available start time\n    meeting_start_time = max(arrival_time, available_start)\n    \n    # Check that meeting can finish before Kenneth's available end time\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > available_end:\n        raise ValueError(\"Cannot schedule the meeting within the available window.\")\n    \n    # Build schedule pieces in order.\n    schedule = []\n    \n    # 1. Start at Golden Gate Park at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # 2. Travel to Financial District\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": meeting_location\n    })\n    \n    # 3. Wait until meeting start time (if needed)\n    # Only add wait step if arrival time is before meeting start time.\n    if arrival_time < meeting_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(meeting_start_time)\n        })\n    \n    # 4. Meet Kenneth for meeting_duration minutes starting at meeting_start_time\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Create final output dictionary with schedule\n    output = {\"schedule\": schedule}\n    \n    # Output the result as JSON formatted string\n    print(json.dumps(output, indent=2))\n    \nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_67",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "9:17AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 30,
                    "time": "9:17AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM with no leading zero for hour.\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # SOLUTION:\n    # You start at Haight-Ashbury at 9:00AM. \n    # You travel to Russian Hill in 17 minutes and arrive at 9:17AM. \n    # You meet Patricia for 30 minutes from 9:17AM to 9:47AM.\n    \n    # Input parameters for meeting with Patricia\n    start_location = \"Haight-Ashbury\"\n    destination = \"Russian Hill\"\n    \n    # Define time format (we use a dummy date because only time is needed)\n    base_date = datetime(2000, 1, 1)\n    arrival_time_str = \"9:00AM\"\n    start_time = datetime.strptime(arrival_time_str, \"%I:%M%p\")\n    # Adjust base date to our chosen date for consistency if needed\n    start_time = base_date.replace(hour=start_time.hour, minute=start_time.minute)\n    \n    # Travel duration from Haight-Ashbury to Russian Hill\n    travel_duration = 17  # minutes\n    travel_delta = timedelta(minutes=travel_duration)\n    \n    # Calculate arrival at destination time\n    arrival_destination_time = start_time + travel_delta\n    \n    # Meeting constraint: Patricia available from 7:45AM to 2:15PM, need at least 30 minutes meeting.\n    patricia_available_start = base_date.replace(hour=7, minute=45)\n    patricia_available_end = base_date.replace(hour=14, minute=15)\n    meeting_duration = 30  # minutes\n    meeting_delta = timedelta(minutes=meeting_duration)\n    \n    # The earliest meeting start is the arrival at destination\n    meeting_start = arrival_destination_time\n    meeting_end = meeting_start + meeting_delta\n    # Check if meeting_end is within the availability window; if not, adjust\n    if meeting_end > patricia_available_end:\n        # If meeting doesn't fit, shift meeting start to the latest possible start time that fits.\n        meeting_start = patricia_available_end - meeting_delta\n        meeting_end = patricia_available_end\n    # In this scenario, the meeting fits as computed.\n    \n    # Build the schedule as a list of actions\n    schedule = []\n    \n    # Action: start at Haight-Ashbury at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Action: travel to Russian Hill (arrival time calculated)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_destination_time),\n        \"to\": destination\n    })\n    \n    # In this schedule no additional waiting is needed because arrival time coincides with the meeting start.\n    \n    # Action: meet Patricia for 30 minutes at Russian Hill, starting at arrival\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Create the final result dictionary\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Output the result as JSON\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_68",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:07AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 90,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse a time string in the format H:MMAM/PM (e.g., \"9:00AM\")\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format the datetime so that the hour is not zero-padded (e.g., \"9:00AM\")\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef main():\n    # Input parameters for the meeting with Mark.\n    # Starting location and time\n    starting_location = \"Chinatown\"\n    start_time_str = \"9:00AM\"\n    start_time = parse_time(start_time_str)\n    \n    # Travel information between Chinatown and Union Square\n    travel_from = \"Chinatown\"\n    travel_to = \"Union Square\"\n    travel_duration = 7  # in minutes\n    \n    # Friend's constraints: Mark\n    friend_name = \"Mark\"  # although only location is used per schedule style.\n    friend_location = \"Union Square\"\n    friend_available_start_str = \"8:00AM\"\n    friend_available_end_str = \"12:45PM\"\n    friend_available_start = parse_time(friend_available_start_str)\n    friend_available_end = parse_time(friend_available_end_str)\n    meeting_minimum = 90  # in minutes\n    \n    # Compute schedule step by step.\n    \n    # 1. Start at Chinatown at 9:00AM.\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": starting_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # 2. Travel from Chinatown to Union Square.\n    # For the travel event, we denote departure time as the start time.\n    travel_event = {\n        \"action\": \"travel\",\n        \"location\": travel_to,\n        \"duration\": travel_duration,\n        \"time\": format_time(start_time),\n        \"to\": travel_to\n    }\n    schedule.append(travel_event)\n    \n    # Arrival time at Union Square:\n    arrival_time = add_minutes(start_time, travel_duration)\n    \n    # 3. Determine meeting start.\n    # The meeting can only start when our arrival time and friend's availability overlap.\n    meeting_start = arrival_time if arrival_time >= friend_available_start else friend_available_start\n    \n    # If arrival_time is earlier than friend\u2019s availability, a waiting event is needed.\n    if arrival_time < friend_available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(arrival_time)\n        })\n    \n    # 4. Schedule meeting event, ensuring meeting lasts minimum required minutes.\n    meeting_event = {\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_minimum,\n        \"time\": format_time(meeting_start)\n    }\n    schedule.append(meeting_event)\n    \n    # Assemble final output as a JSON formatted dictionary.\n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_69",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:24AM",
                    "duration": 24,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 24,
                    "time": "9:24AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 30,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM without leading zero in hour.\n    formatted = dt.strftime(\"%I:%M%p\")\n    if formatted[0] == '0':\n        formatted = formatted[1:]\n    return formatted\n\ndef main():\n    # Input Variables for the Golden Gate Park to North Beach meeting with Ronald\n    start_location = \"Golden Gate Park\"\n    meeting_location = \"North Beach\"\n    # Arrival time at start location: 9:00AM (arbitrary date)\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Travel time from Golden Gate Park to North Beach\n    travel_time_minutes = 24\n    travel_duration = timedelta(minutes=travel_time_minutes)\n    \n    # Ronald's available window and meeting minimum duration\n    ronald_start = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    ronald_end   = datetime.strptime(\"6:30PM\", \"%I:%M%p\")\n    meeting_min_minutes = 30\n    meeting_duration = timedelta(minutes=meeting_min_minutes)\n    \n    # Compute travel: you leave immediately at start.\n    # Arrive at North Beach after travel duration\n    arrival_time = start_time + travel_duration\n    \n    # Compute meeting start time: the later of arrival_time and Ronald's start availability.\n    meeting_start_time = max(arrival_time, ronald_start)\n    meeting_end_time = meeting_start_time + meeting_duration\n    # Ensure meeting ends before Ronald leaves (should be fine in this case: 10:00AM < 6:30PM)\n    \n    # Build schedule actions according to required output structure.\n    schedule = []\n    \n    # 1. Start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # 2. Travel action: from Golden Gate Park to North Beach\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time_minutes,\n        \"time\": format_time(arrival_time),\n        \"to\": meeting_location\n    })\n    \n    # 3. Wait action: if arrived before Ronald is available, wait until meeting start time.\n    # Only add wait action if waiting is needed.\n    if arrival_time < ronald_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(meeting_start_time)\n        })\n    \n    # 4. Meet action: meeting Ronald at North Beach\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_min_minutes,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Final JSON object\n    output = {\"schedule\": schedule}\n    \n    # Print JSON formatted output\n    print(\"SOLUTION:\")\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_70",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:18AM",
                    "duration": 18,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "11:00AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM without leading zero on hour.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for Paul's meeting\n    start_location = \"Haight-Ashbury\"\n    meeting_location = \"Bayview\"\n    travel_time = 18           # minutes from Haight-Ashbury to Bayview\n    arrival_time_str = \"9:00AM\"  # start time at Haight-Ashbury\n    paul_available_start_str = \"11:00AM\"  # Paul's available start time \n    paul_available_end_str = \"4:30PM\"     # Paul's available end time, not used in schedule\n    meeting_duration = 90      # minimum meeting time in minutes\n    \n    # Create datetime objects for the given times (use a fixed date)\n    base_date = \"2000-01-01\"\n    start_dt = datetime.strptime(f\"{base_date} {arrival_time_str}\", \"%Y-%m-%d %I:%M%p\")\n    paul_start_dt = datetime.strptime(f\"{base_date} {paul_available_start_str}\", \"%Y-%m-%d %I:%M%p\")\n    \n    # Compute arrival time at meeting location after travel\n    travel_td = timedelta(minutes=travel_time)\n    arrival_dt = start_dt + travel_td\n    \n    # Wait until Paul's available start time if arrival is earlier\n    wait_start_dt = arrival_dt if arrival_dt >= paul_start_dt else paul_start_dt\n    \n    # Compute meeting end time\n    meeting_td = timedelta(minutes=meeting_duration)\n    meeting_end_dt = paul_start_dt + meeting_td  # meeting starts at Paul's available start\n    \n    # Build the schedule as a list of steps\n    schedule = []\n    \n    # Step 1: Start at Haight-Ashbury at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_dt)\n    })\n    \n    # Step 2: Travel to Bayview\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_time,\n        \"time\": format_time(arrival_dt),\n        \"to\": meeting_location\n    })\n    \n    # Step 3: Wait until Paul's available start time if necessary\n    if arrival_dt < paul_start_dt:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(paul_start_dt)\n        })\n    \n    # Step 4: Meet Paul for the required duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(paul_start_dt)\n    })\n    \n    # Create final output dictionary\n    output = {\"schedule\": schedule}\n    \n    # Print the JSON-formatted output\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_71",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:45AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "9:45AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time without leading zero in the hour\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, \"strftime\") else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for the meeting with John\n    start_location = \"Pacific Heights\"\n    meeting_location = \"Alamo Square\"\n    start_time_str = \"9:00AM\"              # arrival time at start_location\n    travel_duration = 10                   # minutes from Pacific Heights to Alamo Square\n    friend_available_start_str = \"9:45AM\"  # John is available from 9:45AM\n    friend_available_end_str = \"2:30PM\"    # John's availability end (not used because meeting ends earlier)\n    meet_duration = 90                     # minutes required for meeting John\n\n    # Parse input times into datetime objects (using some arbitrary date)\n    time_format = \"%I:%M%p\"\n    start_time = datetime.strptime(start_time_str, time_format)\n    friend_available_start = datetime.strptime(friend_available_start_str, time_format)\n    # friend_available_end = datetime.strptime(friend_available_end_str, time_format) # Not needed for meeting calculation\n\n    # Calculate arrival time at meeting location based on travel time\n    travel_start_time = start_time  # leaving immediately at start\n    arrival_time = travel_start_time + timedelta(minutes=travel_duration)\n\n    # Determine meeting start time as max(arrival_time, friend's available start time)\n    meeting_start = max(arrival_time, friend_available_start)\n    meeting_end = meeting_start + timedelta(minutes=meet_duration)\n    \n    # Construct the schedule dictionary\n    schedule = {\n        \"schedule\": [\n            {\n                \"action\": \"start\",\n                \"location\": start_location,\n                \"time\": format_time(start_time)\n            },\n            {\n                \"action\": \"travel\",\n                \"location\": meeting_location,\n                \"duration\": travel_duration,\n                \"time\": format_time(arrival_time),\n                \"to\": meeting_location\n            },\n            {\n                \"action\": \"wait\",\n                \"location\": meeting_location,\n                \"time\": format_time(meeting_start)\n            },\n            {\n                \"action\": \"meet\",\n                \"location\": meeting_location,\n                \"duration\": meet_duration,\n                \"time\": format_time(meeting_start)\n            }\n        ]\n    }\n\n    # Output result as JSON\n    print(json.dumps(schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_72",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "9:07AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 60,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MMAM/PM without a leading zero in the hour.\n    return dt.strftime(\"%-I:%M%p\") if dt.strftime(\"%-I\") else dt.strftime(\"%#I:%M%p\")\n\ndef main():\n    # Input parameters for the meeting with Barbara:\n    # Locations:\n    start_location = \"Russian Hill\"\n    dest_location = \"Pacific Heights\"\n    \n    # Travel time: Russian Hill to Pacific Heights in minutes.\n    travel_duration = 7\n    \n    # Arrival constraints:\n    # You arrive at Russian Hill at 9:00AM.\n    start_time_str = \"9:00AM\"\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\")\n    \n    # Barbara's schedule and meeting duration\n    barbara_available_from_str = \"7:15AM\"\n    barbara_available_from = datetime.strptime(barbara_available_from_str, \"%I:%M%p\")\n    barbara_available_to_str = \"10:00PM\"\n    barbara_available_to = datetime.strptime(barbara_available_to_str, \"%I:%M%p\")\n    meet_min_duration = 60  # in minutes\n    \n    # Compute travel: depart at start_time, add travel duration.\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Determine meeting start time.\n    # Since Barbara is available from 7:15AM and arrival is 9:07AM,\n    # meeting can start immediately upon arrival.\n    meeting_start = arrival_time\n    meeting_end = meeting_start + timedelta(minutes=meet_min_duration)\n    \n    # Build the schedule based on the computed times.\n    schedule = []\n    # Start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    # Travel action (arrival time is recorded in the \"time\" field)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": dest_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": dest_location\n    })\n    # In this scenario, since we arrive after Barbara has been available,\n    # there is no additional waiting step.\n    # Directly schedule the meeting.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": dest_location,\n        \"duration\": meet_min_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Prepare the final JSON output as a dictionary.\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Output the final JSON result.\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_73",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:00PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\n# Input Parameters for the Richmond District to Nob Hill schedule with Richard\nstart_location = \"Richmond District\"\ndestination = \"Nob Hill\"\nstart_time_str = \"9:00AM\"\ntravel_time = 17  # minutes for travel from Richmond District to Nob Hill\nmeeting_start_str = \"4:00PM\"\nmeeting_min_duration = 45  # minutes meeting duration with Richard\n\n# Convert times to datetime objects\nstart_time = datetime.strptime(start_time_str, \"%I:%M%p\")\nmeeting_start_time = datetime.strptime(meeting_start_str, \"%I:%M%p\")\n\n# Compute travel arrival time\narrival_time = start_time + timedelta(minutes=travel_time)\n\n# Compute meeting end time based on minimum meeting duration\nmeeting_end_time = meeting_start_time + timedelta(minutes=meeting_min_duration)\n\n# Build schedule dictionary\nschedule = []\n\n# Start action: starting location and time\nschedule.append({\n    \"action\": \"start\",\n    \"location\": start_location,\n    \"time\": format_time(start_time)\n})\n\n# Travel action: leaving to destination\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": destination,\n    \"duration\": travel_time,\n    \"time\": format_time(arrival_time),\n    \"to\": destination\n})\n\n# Wait action: waiting until meeting start time (assuming wait occurs at the destination)\nschedule.append({\n    \"action\": \"wait\",\n    \"location\": destination,\n    \"time\": format_time(meeting_start_time)\n})\n\n# Meet action: meeting Richard\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": destination,\n    \"duration\": meeting_min_duration,\n    \"time\": format_time(meeting_start_time)\n})\n\n# Build final JSON object\noutput = {\"schedule\": schedule}\n\n# Output the result as JSON-formatted string\nprint(json.dumps(output, indent=2))",
            "count": "meeting_planning_example_74",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nimport re\n\ndef time_to_minutes(time_str):\n    # Parse a time string in the format \"H:MMAM\" or \"H:MMPM\"\n    pattern = r\"(\\d+):(\\d+)(AM|PM)\"\n    match = re.match(pattern, time_str)\n    if not match:\n        raise ValueError(\"Time string format error\")\n    hour, minute, period = match.groups()\n    hour = int(hour)\n    minute = int(minute)\n    if period == \"PM\" and hour != 12:\n        hour += 12\n    if period == \"AM\" and hour == 12:\n        hour = 0\n    return hour * 60 + minute\n\ndef minutes_to_time(minutes):\n    # Convert minutes since midnight to time string in \"H:MMAM/PM\" format.\n    hour = minutes // 60\n    minute = minutes % 60\n    period = \"AM\"\n    if hour >= 12:\n        period = \"PM\"\n    disp_hour = hour\n    if hour == 0:\n        disp_hour = 12\n    elif hour > 12:\n        disp_hour = hour - 12\n    return f\"{disp_hour}:{minute:02d}{period}\"\n\ndef add_minutes(time_str, added_minutes):\n    total_minutes = time_to_minutes(time_str) + added_minutes\n    return minutes_to_time(total_minutes)\n\n# Input Parameters for the meeting with David at Fisherman's Wharf\nstart_location = \"Pacific Heights\"\nstart_time_str = \"9:00AM\"\ndestination = \"Fisherman's Wharf\"\ntravel_duration = 13  # minutes from Pacific Heights to Fisherman's Wharf\n\nfriend_name = \"David\"\navailability_start_str = \"11:30AM\"\navailability_end_str = \"2:45PM\"\nmeeting_min_duration = 15  # minutes\n\n# Compute arrival time at Fisherman's Wharf\narrival_time_str = add_minutes(start_time_str, travel_duration)\n\n# Determine meeting start time: wait until friend is available\n# Since arrival_time may be before availability_start, meeting cannot start before availability_start.\n# So meeting starts at availability_start.\nmeeting_start_str = availability_start_str\nmeeting_start_minutes = time_to_minutes(meeting_start_str)\n# Meeting end time after meeting for minimum required duration\nmeeting_end_minutes = meeting_start_minutes + meeting_min_duration\nmeeting_end_str = minutes_to_time(meeting_end_minutes)\n\n# Build the schedule steps.\nschedule = [\n    {\"action\": \"start\", \"location\": start_location, \"time\": start_time_str},\n    {\"action\": \"travel\", \"location\": destination, \"duration\": travel_duration, \"time\": arrival_time_str, \"to\": destination},\n    {\"action\": \"wait\", \"location\": destination, \"time\": availability_start_str},\n    {\"action\": \"meet\", \"location\": destination, \"duration\": meeting_min_duration, \"time\": availability_start_str}\n]\n\n# Prepare the output dictionary.\noutput = {\"schedule\": schedule}\n\n# Print \"SOLUTION:\" with the computed meeting plan as JSON.\nprint(\"SOLUTION:\")\nprint(json.dumps(output, indent=2))",
            "count": "meeting_planning_example_75",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 60,
                    "time": "5:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(total_minutes):\n    \"\"\"Converts minutes since midnight into a formatted time string 'H:MMAM/PM'.\"\"\"\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    # Create a datetime object (date is arbitrary)\n    dt = datetime(2020, 1, 1, hour=hours % 24, minute=minutes)\n    return dt.strftime(\"%-I:%M%p\")\n\ndef time_str_to_minutes(time_str):\n    \"\"\"Converts a time string 'H:MMAM/PM' into minutes since midnight.\"\"\"\n    dt = datetime.strptime(time_str, \"%I:%M%p\")\n    return dt.hour * 60 + dt.minute\n\ndef main():\n    # Input variables for the Marina District to Haight-Ashbury meeting schedule (Timothy)\n    # Initial departure details\n    start_location = \"Marina District\"\n    start_time_str = \"9:00AM\"\n    start_time_minutes = time_str_to_minutes(start_time_str)\n    \n    # Travel time from Marina District to Haight-Ashbury (in minutes)\n    travel_duration = 16\n    \n    # Friend meeting details (Timothy at Haight-Ashbury)\n    meeting_location = \"Haight-Ashbury\"\n    friend_available_start_str = \"5:00PM\"\n    friend_available_end_str = \"8:15PM\"\n    friend_available_start = time_str_to_minutes(friend_available_start_str)\n    friend_available_end = time_str_to_minutes(friend_available_end_str)\n    meeting_duration = 60\n    \n    # Compute travel arrival time\n    arrival_time_minutes = start_time_minutes + travel_duration\n    arrival_time_str = minutes_to_time_str(arrival_time_minutes)\n    \n    # Wait until friend is available. Meeting can only start at or after the friend available start time.\n    meeting_start_minutes = max(arrival_time_minutes, friend_available_start)\n    meeting_start_str = minutes_to_time_str(meeting_start_minutes)\n    \n    # Make sure that meeting fits before friend_available_end (not strictly required for our output, but part of constraints)\n    if meeting_start_minutes + meeting_duration > friend_available_end:\n        raise ValueError(\"Cannot meet friend Timothy for the required duration within the available time window.\")\n    \n    # Build the schedule timeline\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": start_time_str},\n        {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_duration, \"time\": arrival_time_str, \"to\": meeting_location},\n        {\"action\": \"wait\", \"location\": meeting_location, \"time\": minutes_to_time_str(friend_available_start)},\n        {\"action\": \"meet\", \"location\": meeting_location, \"duration\": meeting_duration, \"time\": meeting_start_str}\n    ]\n    \n    # Output the result as a JSON-formatted dictionary\n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_76",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:09AM",
                    "duration": 9,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:09AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 30,
                    "time": "9:09AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef convert_minutes_to_time_str(minutes_since_midnight):\n    # Compute time in HH:MMAM/PM format without leading zero for hour\n    hours = minutes_since_midnight // 60\n    minutes = minutes_since_midnight % 60\n    dt = datetime(2000, 1, 1, hours, minutes)\n    time_str = dt.strftime(\"%-I:%M%p\") if hasattr(dt, \"strftime\") else dt.strftime(\"%I:%M%p\")\n    # Remove possible leading zero if %-I doesn't work on Windows\n    if time_str[0] == '0':\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters for the schedule:\n    # Arrival location: Richmond District at 9:00AM\n    # Destination: Golden Gate Park\n    # Travel time from Richmond District to Golden Gate Park: 9 minutes\n    # Friend: Robert is at Golden Gate Park from 8:15AM to 8:30PM\n    # Minimum meeting time: 30 minutes\n    start_location = \"Richmond District\"\n    destination = \"Golden Gate Park\"\n    \n    # Convert times to minutes since midnight:\n    # 9:00AM -> 9*60 = 540\n    arrival_time = 540  \n    travel_duration = 9\n    # Friend availability start time at Golden Gate Park: 8:15AM -> 8*60 + 15 = 495, end time = 20:30 -> 20*60+30 = 1230\n    friend_start = 495\n    friend_end = 1230\n    min_meet_duration = 30\n\n    # Compute travel: leaving from the starting location at start time.\n    # We assume we depart immediately after start.\n    departure_time = arrival_time\n    arrival_at_destination = departure_time + travel_duration\n\n    # Check if waiting is needed (if arriving before friend start)\n    if arrival_at_destination < friend_start:\n        wait_duration = friend_start - arrival_at_destination\n        meet_start = friend_start\n    else:\n        wait_duration = 0\n        meet_start = arrival_at_destination\n\n    # Meeting end time after minimum meeting duration\n    meet_end = meet_start + min_meet_duration\n\n    # Build schedule steps:\n    schedule = []\n    \n    # Step 1: Start at the starting location at arrival_time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": convert_minutes_to_time_str(arrival_time)\n    })\n    \n    # Step 2: Travel from starting location to destination\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": convert_minutes_to_time_str(arrival_at_destination),\n        \"to\": destination\n    })\n    \n    # If waiting is required, add a wait step.\n    if wait_duration > 0:\n        wait_time = arrival_at_destination  # waiting starts immediately upon arrival\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": destination,\n            \"time\": convert_minutes_to_time_str(wait_time)\n        })\n    \n    # Step 3: Meet friend at destination (Robert)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": min_meet_duration,\n        \"time\": convert_minutes_to_time_str(meet_start)\n    })\n    \n    # Prepare final JSON output\n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    # SOLUTION: You start at Richmond District at 9:00AM. You travel to Golden Gate Park in 9 minutes and arrive at 9:09AM. You meet Robert for 30 minutes from 9:09AM to 9:39AM.\n    main()",
            "count": "meeting_planning_example_77",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "6:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 105,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, \"strftime\") else dt.strftime(\"%#I:%M%p\")\n\ndef main():\n    # Input parameters for the scenario\n    # Meeting location: Michelle at The Castro with constraints\n    # Travel: Union Square to The Castro: 19 minutes\n    travel_time = 19  # minutes\n    \n    # Arrival time at starting location Union Square at 9:00AM\n    start_location = \"Union Square\"\n    start_time_str = \"9:00AM\"\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\")\n\n    # Meeting friend: Michelle at The Castro\n    meeting_friend_location = \"The Castro\"\n    michelle_start_str = \"6:00PM\"\n    michelle_end_str = \"8:00PM\"\n    michelle_meeting_duration = 105  # minutes minimum\n    \n    michelle_start = datetime.strptime(michelle_start_str, \"%I:%M%p\")\n    michelle_end = datetime.strptime(michelle_end_str, \"%I:%M%p\")\n    \n    # Compute travel details: depart from start at start time and add travel time\n    travel_departure_time = start_time\n    travel_arrival_time = travel_departure_time + timedelta(minutes=travel_time)\n    \n    # Meeting can only start at the later of arrival time and the friend availability window start\n    meeting_start_time = max(travel_arrival_time, michelle_start)\n    meeting_end_time = meeting_start_time + timedelta(minutes=michelle_meeting_duration)\n    \n    # Check if meeting_end_time is within the available window of Michelle\n    if meeting_end_time > michelle_end:\n        raise ValueError(\"Cannot schedule the meeting within the available time window.\")\n    \n    # Construct the schedule steps according to the specified output format\n    schedule = []\n    \n    # Step 1: Start at Union Square at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": start_time.strftime(\"%-I:%M%p\") if start_time.strftime(\"%-I\") else start_time.strftime(\"%I:%M%p\").lstrip(\"0\")\n    })\n    \n    # Step 2: Travel from Union Square to The Castro\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_friend_location,\n        \"duration\": travel_time,\n        \"time\": travel_arrival_time.strftime(\"%-I:%M%p\") if travel_arrival_time.strftime(\"%-I\") else travel_arrival_time.strftime(\"%I:%M%p\").lstrip(\"0\"),\n        \"to\": meeting_friend_location\n    })\n    \n    # Step 3: Wait until the friend is available (if there is waiting time, i.e., arrival before available start time)\n    if travel_arrival_time < michelle_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_friend_location,\n            \"time\": michelle_start.strftime(\"%-I:%M%p\") if michelle_start.strftime(\"%-I\") else michelle_start.strftime(\"%I:%M%p\").lstrip(\"0\")\n        })\n    \n    # Step 4: Meet Michelle for the required duration\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_friend_location,\n        \"duration\": michelle_meeting_duration,\n        \"time\": meeting_start_time.strftime(\"%-I:%M%p\") if meeting_start_time.strftime(\"%-I\") else meeting_start_time.strftime(\"%I:%M%p\").lstrip(\"0\")\n    })\n    \n    # Create the final result dictionary as specified\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Output the result as JSON formatted string\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_78",
            "is_correct": true
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime to H:MMAM/PM (remove any leading zero from hour)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for the \"Paul\" meeting\n    start_location = \"North Beach\"\n    destination = \"Bayview\"\n    travel_duration = 22  # in minutes from North Beach to Bayview\n    arrival_str = \"9:00AM\"  # arrival time at starting location\n    # Paul's availability and meeting requirement at Bayview\n    paul_available_start_str = \"1:30PM\"\n    paul_available_end_str = \"7:45PM\"\n    meeting_min_duration = 45  # in minutes\n\n    # Convert time strings to datetime objects (use an arbitrary date)\n    time_format = \"%I:%M%p\"\n    start_time = datetime.strptime(arrival_str, time_format)\n    paul_available_start = datetime.strptime(paul_available_start_str, time_format)\n    paul_available_end = datetime.strptime(paul_available_end_str, time_format)\n    \n    # Calculate arrival time at Bayview after travel\n    travel_arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Meeting start time must be Paul\u2019s available start if arrival is earlier.\n    meeting_start_time = paul_available_start if travel_arrival_time < paul_available_start else travel_arrival_time\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_min_duration)\n    \n    # Build the schedule actions\n    schedule = []\n    \n    # Start Action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Travel Action\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_arrival_time),\n        \"to\": destination\n    })\n    \n    # Wait Action (if arrived before meeting start)\n    if travel_arrival_time < meeting_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": destination,\n            \"time\": format_time(meeting_start_time)\n        })\n    \n    # Meet Action\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Print the SOLUTION text followed by the JSON schedule\n    solution_text = (\n        \"SOLUTION:You start at North Beach at 9:00AM. \"\n        \"You travel to Bayview in 22 minutes and arrive at {}. \"\n        \"You wait until {}. \"\n        \"You meet Paul for 45 minutes from {} to {}.\"\n    ).format(\n        format_time(travel_arrival_time),\n        format_time(meeting_start_time),\n        format_time(meeting_start_time),\n        format_time(meeting_end_time)\n    )\n    \n    print(solution_text)\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n    \nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_79",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as 'H:MMAM/PM' (remove any leading zero from hours)\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef compute_schedule():\n    # Input parameters for the Mission District -> Haight-Ashbury meeting with Joshua.\n    \n    # Starting point and times:\n    starting_location = \"Mission District\"\n    starting_time_str = \"9:00AM\"\n    start_time = datetime.strptime(starting_time_str, \"%I:%M%p\")\n    \n    # Travel parameters:\n    travel_from = \"Mission District\"\n    travel_to = \"Haight-Ashbury\"\n    travel_duration = 12  # in minutes\n    \n    # Calculate arrival time at destination\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Joshua's availability and meeting constraints:\n    joshua_available_start_str = \"11:30AM\"\n    joshua_available_end_str = \"10:00PM\"  # Not used in scheduling since we only need meeting start and duration.\n    meeting_min_duration = 75  # in minutes\n\n    meeting_start = datetime.strptime(joshua_available_start_str, \"%I:%M%p\")\n    meeting_end = meeting_start + timedelta(minutes=meeting_min_duration)\n    \n    # Build schedule events:\n    schedule = []\n    \n    # 1. Start event at Mission District at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": starting_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # 2. Travel event: from Mission District to Haight-Ashbury, travel duration 12 mins.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": travel_to,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": travel_to\n    })\n    \n    # 3. Wait event: wait at Haight-Ashbury until Joshua is available at 11:30AM.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": travel_to,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # 4. Meet event: meet Joshua for 75 minutes from 11:30AM to 12:45PM.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": travel_to,\n        \"duration\": meeting_min_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    return {\"schedule\": schedule}\n\ndef main():\n    schedule_dict = compute_schedule()\n    # Output the result as a JSON-formatted dictionary.\n    print(json.dumps(schedule_dict, indent=2))\n\nif __name__ == \"__main__\":\n    # SOLUTION:You start at Mission District at 9:00AM. You travel to Haight-Ashbury in 12 minutes and arrive at 9:12AM. You wait until 11:30AM. You meet Joshua for 75 minutes from 11:30AM to 12:45PM.\n    main()",
            "count": "meeting_planning_example_80",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "12:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime object to H:MMAM/PM (without a leading zero for hours)\n    # Use %-I to remove leading zero on Unix-like systems; on Windows we remove it manually.\n    time_str = dt.strftime(\"%I:%M%p\")\n    if time_str[0] == \"0\":\n        time_str = time_str[1:]\n    return time_str\n\ndef main():\n    # Input parameters for the Richmond District to Alamo Square meeting\n    start_location = \"Richmond District\"\n    meeting_location = \"Alamo Square\"\n    start_time_str = \"9:00AM\"       # Arrival at Richmond District\n    travel_duration = 13            # minutes from Richmond District to Alamo Square\n    friend_available_start_str = \"12:30PM\"\n    friend_available_end_str = \"7:15PM\"  # not explicitly used in schedule computation here\n    meeting_min_duration = 75       # minutes required to meet Betty\n    \n    # Convert start_time and friend available time into datetime objects (use arbitrary same date)\n    dt_format = \"%I:%M%p\"\n    start_dt = datetime.strptime(start_time_str, dt_format)\n    friend_available_start_dt = datetime.strptime(friend_available_start_str, dt_format)\n    \n    # Compute arrival time at meeting location by travelling\n    travel_td = timedelta(minutes=travel_duration)\n    arrival_dt = start_dt + travel_td\n    \n    # Meeting cannot start until friend's available start time, so wait if necessary\n    meeting_start_dt = friend_available_start_dt\n    meeting_end_dt = meeting_start_dt + timedelta(minutes=meeting_min_duration)\n    \n    # Build schedule list according to the specified JSON structure\n    schedule = [\n        {\n            \"action\": \"start\",\n            \"location\": start_location,\n            \"time\": format_time(start_dt)\n        },\n        {\n            \"action\": \"travel\",\n            \"location\": meeting_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(arrival_dt),\n            \"to\": meeting_location\n        },\n        {\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(meeting_start_dt)\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": meeting_location,\n            \"duration\": meeting_min_duration,\n            \"time\": format_time(meeting_start_dt)\n        }\n    ]\n    \n    result = {\"schedule\": schedule}\n    \n    # Print the result with a \"SOLUTION:\" header followed by the JSON dictionary\n    print(\"SOLUTION:\")\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_81",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "5:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "5:45PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(minutes):\n    \"\"\"\n    Converts minutes since midnight to time string in format 'H:MMAM/PM'\n    \"\"\"\n    # create a datetime object for today at midnight\n    dt = datetime(2000, 1, 1, 0, 0) + timedelta(minutes=minutes)\n    hour = dt.hour\n    minute = dt.minute\n    am_pm = \"AM\" if hour < 12 else \"PM\"\n    hour_display = hour if 1 <= hour <= 12 else (hour - 12 if hour > 12 else 12)\n    return f\"{hour_display}:{minute:02d}{am_pm}\"\n\ndef main():\n    # Input variables for Ashley's meeting scenario\n    # Locations:\n    start_location = \"Golden Gate Park\"\n    destination = \"Alamo Square\"\n    \n    # Start time at start_location is 9:00AM\n    start_time_minutes = 9 * 60  # 9:00AM -> 540 minutes\n    \n    # Travel time from Golden Gate Park to Alamo Square = 10 minutes\n    travel_duration = 10\n    \n    # Arrival time at destination after travel\n    arrival_time_minutes = start_time_minutes + travel_duration  # 540 + 10 = 550 minutes (9:10AM)\n    \n    # Ashley's availability at Alamo Square\n    ashley_available_start = 17 * 60 + 45  # 5:45PM -> 17*60+45 = 1065 minutes\n    ashley_available_end   = 21 * 60 + 30  # 9:30PM -> 21*60+30 = 1290 minutes\n    \n    # Minimum meeting duration required with Ashley: 75 minutes\n    min_meet_duration = 75\n    \n    # Determine meeting start time at the destination.\n    # We must wait until Ashley becomes available.\n    meeting_start_minutes = max(arrival_time_minutes, ashley_available_start)\n    # For a minimum meeting time, the meeting will run for 75 minutes.\n    meeting_duration = min_meet_duration\n    meeting_end_minutes = meeting_start_minutes + meeting_duration\n    \n    # Build the schedule dictionary following the required structure\n    schedule = []\n    \n    # Start event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": minutes_to_time_str(start_time_minutes)\n    })\n    \n    # Travel event\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": minutes_to_time_str(arrival_time_minutes),\n        \"to\": destination\n    })\n    \n    # Wait event (only if arrival is before Ashley's available start time)\n    if arrival_time_minutes < ashley_available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": destination,\n            \"time\": minutes_to_time_str(ashley_available_start)\n        })\n    else:\n        # if arrival_time is later than Ashley available start time, then wait event is not needed,\n        # but we show immediate meeting start.\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": destination,\n            \"time\": minutes_to_time_str(arrival_time_minutes)\n        })\n    \n    # Meet event\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": meeting_duration,\n        \"time\": minutes_to_time_str(meeting_start_minutes)\n    })\n    \n    result = {\"schedule\": schedule}\n    \n    # Print the JSON formatted output\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_82",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse a time string in format like '9:00AM' or '10:30PM'\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime dd as 'H:MMAM/PM' without a leading zero for the hour.\n    return dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for the meeting with Carol\n    start_location = \"Presidio\"\n    destination = \"Golden Gate Park\"\n    start_time_str = \"9:00AM\"\n    travel_duration = 12  # minutes from Presidio to Golden Gate Park\n    \n    # Carol's meeting constraints at Golden Gate Park\n    carol_available_start_str = \"9:45PM\"\n    carol_available_end_str = \"10:30PM\"\n    required_meeting_duration = 45  # minutes\n    \n    # Convert time strings to datetime objects (using a fixed arbitrary date)\n    start_time = parse_time(start_time_str)\n    carol_available_start = parse_time(carol_available_start_str)\n    carol_available_end = parse_time(carol_available_end_str)\n    \n    # Compute travel: arrival time at destination\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Determine waiting:\n    # If arrival is before Carol's availability start, then wait until carol_available_start.\n    if arrival_time < carol_available_start:\n        wait_time = carol_available_start\n    else:\n        wait_time = arrival_time\n    \n    # Meeting: meeting starts at carol_available_start, and lasts required_meeting_duration minutes.\n    meeting_start = carol_available_start\n    meeting_end = meeting_start + timedelta(minutes=required_meeting_duration)\n    \n    # Prepare schedule events using the specified structure.\n    schedule = []\n    \n    # Start event at the starting location and time.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Travel event from the starting location to the destination.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": destination\n    })\n    \n    # Wait event at the destination until Carol is available.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": destination,\n        \"time\": format_time(wait_time)\n    })\n    \n    # Meet event with Carol at the destination starting when she's available.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": required_meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Final result dictionary\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Output the result as JSON.\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_83",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:05AM",
                    "duration": 5,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 5,
                    "time": "9:05AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parses a string like '9:00AM' to a datetime object with an arbitrary date.\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    # Format datetime dt as H:MMAM/PM without any leading zero.\n    return dt.strftime('%-I:%M%p') if hasattr(dt, 'strftime') else dt.strftime('%I:%M%p').lstrip(\"0\")\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt_new = dt + timedelta(minutes=minutes)\n    # Using custom formatting to avoid leading zero on hour if possible.\n    hour = dt_new.hour if dt_new.hour <= 12 else dt_new.hour - 12\n    minute = dt_new.minute\n    am_pm = dt_new.strftime('%p')\n    # Ensure minute is two digits\n    return f\"{hour}:{minute:02d}{am_pm}\"\n\ndef main():\n    # Input parameters for the Thomas meeting scenario:\n    # Travel distances\n    travel_duration = 5  # minutes from Alamo Square to Haight-Ashbury\n    # Start location and time\n    start_location = \"Alamo Square\"\n    start_time = \"9:00AM\"\n    # Destination and meeting constraints for Thomas\n    destination = \"Haight-Ashbury\"\n    thomas_available_start = \"11:00AM\"\n    thomas_available_end = \"1:00PM\"  # not used for minimal meeting period calculation\n    meeting_duration = 30  # minimum meeting minutes for Thomas\n    \n    # Compute schedule:\n    # 1. Start at Alamo Square at 9:00AM\n    # 2. Travel to Haight-Ashbury\n    travel_start_time = start_time\n    travel_arrival_time = add_minutes(travel_start_time, travel_duration)\n    # 3. Wait until Thomas becomes available at Haight-Ashbury (11:00AM)\n    wait_time = thomas_available_start  # need to wait until 11:00AM even though arrival at 9:05AM\n    # 4. Meet Thomas for 30 minutes starting at 11:00AM\n    meet_start_time = wait_time\n    meet_end_time = add_minutes(meet_start_time, meeting_duration)\n    \n    # Build schedule in required JSON structure:\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": start_time},\n        {\"action\": \"travel\", \"location\": destination, \"duration\": travel_duration, \"time\": travel_arrival_time, \"to\": destination},\n        {\"action\": \"wait\", \"location\": destination, \"time\": wait_time},\n        {\"action\": \"meet\", \"location\": destination, \"duration\": meeting_duration, \"time\": meet_start_time}\n    ]\n    \n    output = {\"schedule\": schedule}\n    \n    # Print the result in JSON format preceded by \"SOLUTION:\" text\n    print(\"SOLUTION:\")\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_84",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 4,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "1:15PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 4,
                    "time": "9:04AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python\nimport json\n\ndef parse_time(time_str):\n    # Parse a time string formatted as H:MMAM/PM to minutes since midnight.\n    # Example: \"9:00AM\" or \"1:15PM\"\n    time_str = time_str.strip()\n    # Separate AM/PM from time part\n    if time_str[-2:] in [\"AM\", \"PM\"]:\n        period = time_str[-2:]\n        time_part = time_str[:-2]\n    else:\n        period = \"AM\"\n        time_part = time_str\n    # Split hour and minute\n    hour_str, minute_str = time_part.split(\":\")\n    hour = int(hour_str)\n    minute = int(minute_str)\n    if period == \"PM\" and hour != 12:\n        hour += 12\n    if period == \"AM\" and hour == 12:\n        hour = 0\n    return hour * 60 + minute\n\ndef minutes_to_time(minutes):\n    # Convert minutes since midnight to H:MMAM/PM format (no leading zero for hour)\n    hour = minutes // 60\n    minute = minutes % 60\n    period = \"AM\"\n    if hour >= 12:\n        period = \"PM\"\n    display_hour = hour\n    if hour == 0:\n        display_hour = 12\n    elif hour > 12:\n        display_hour = hour - 12\n    return f\"{display_hour}:{minute:02d}{period}\"\n\ndef compute_schedule():\n    # Input parameters for the meeting with William:\n    # Travel distances:\n    travel_from = \"North Beach\"\n    travel_to = \"Russian Hill\"\n    travel_duration = 4  # minutes from North Beach to Russian Hill\n    \n    # Constraints:\n    start_location = \"North Beach\"\n    starting_time_str = \"9:00AM\"  # arrival time at start location\n    meeting_friend = \"William\"\n    meeting_location = \"Russian Hill\"\n    friend_available_start_str = \"1:15PM\"\n    friend_available_end_str = \"9:30PM\"  # not used in schedule but provided\n    min_meeting_duration = 15  # minutes\n    \n    # Convert times to minutes since midnight\n    starting_time = parse_time(starting_time_str)\n    friend_available_start = parse_time(friend_available_start_str)\n    # Compute travel: depart immediately\n    travel_depart_time = starting_time\n    travel_arrival_time = travel_depart_time + travel_duration\n    \n    # Determine meeting start time: wait if necessary until friend's availability starts\n    meeting_start_time = max(travel_arrival_time, friend_available_start)\n    meeting_end_time = meeting_start_time + min_meeting_duration\n\n    # Build schedule steps\n    schedule = []\n    # Step 1: start event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": starting_time_str\n    })\n    # Step 2: travel event. Use starting_time as departure time.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": travel_to,\n        \"duration\": travel_duration,\n        \"time\": starting_time_str,\n        \"to\": travel_to\n    })\n    # Step 3: wait event at destination until meeting starts.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": travel_to,\n        \"time\": minutes_to_time(meeting_start_time)\n    })\n    # Step 4: meet event\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": travel_to,\n        \"duration\": min_meeting_duration,\n        \"time\": minutes_to_time(meeting_start_time)\n    })\n    \n    return {\"schedule\": schedule}\n\ndef main():\n    result = compute_schedule()\n    # Print the solution header and the JSON formatted output\n    print(\"SOLUTION:\")\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_85",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "7:45PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\n\ndef parse_time(time_str):\n    # Parse time string in format H:MMAM/PM (e.g., \"9:00AM\", \"12:30PM\")\n    # Return total minutes past midnight.\n    # Separate into time and period.\n    period = time_str[-2:]\n    time_part = time_str[:-2]\n    hour_str, minute_str = time_part.split(':')\n    hour = int(hour_str)\n    minute = int(minute_str)\n    # Convert to 24-hour format minutes\n    if period.upper() == \"AM\":\n        if hour == 12:\n            hour = 0\n    else:\n        if hour != 12:\n            hour += 12\n    return hour * 60 + minute\n\ndef format_time(total_minutes):\n    # Convert minutes past midnight to time string in format H:MMAM/PM with no leading zero for hour.\n    total_minutes = total_minutes % (24 * 60)\n    hour_24 = total_minutes // 60\n    minute = total_minutes % 60\n    period = \"AM\" if hour_24 < 12 else \"PM\"\n    hour_12 = hour_24\n    if hour_24 == 0:\n        hour_12 = 12\n    elif hour_24 > 12:\n        hour_12 = hour_24 - 12\n    return f\"{hour_12}:{minute:02d}{period}\"\n\ndef main():\n    # Input variables for Daniel's meeting constraints\n    start_location = \"Marina District\"\n    arrival_time_str = \"9:00AM\"  # Arrival at Marina District\n    travel_duration = 12       # Minutes to travel from Marina District to Nob Hill\n    destination = \"Nob Hill\"\n    friend_name = \"Daniel\"\n    friend_location = \"Nob Hill\"  # Meeting occurs at Nob Hill\n    friend_available_start_str = \"7:45PM\"  # Daniel is available from this time\n    friend_available_end_str = \"9:00PM\"  # Not used in schedule, but constraint exists\n    meeting_required_duration = 15  # minutes of meeting required\n\n    # Convert times to minutes for computations\n    arrival_time = parse_time(arrival_time_str)\n    friend_available_start = parse_time(friend_available_start_str)\n    \n    # Compute travel arrival time:\n    travel_arrival_time = arrival_time + travel_duration\n    travel_arrival_time_str = format_time(travel_arrival_time)\n    \n    # In our schedule, we wait at the destination until Daniel becomes available.\n    # So our wait starts at travel_arrival_time and ends at friend's available start time.\n    wait_time_str = friend_available_start_str  # When we actually start meeting\n    \n    # Meeting start time is friend_available_start, meeting lasts for meeting_required_duration.\n    meeting_start_time_str = friend_available_start_str\n    # (Not printing meeting end time, only start time and duration are required)\n    \n    schedule = []\n    # Start event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time_str\n    })\n    # Travel event\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": travel_arrival_time_str,\n        \"to\": destination\n    })\n    # Wait event (waiting until the friend is available)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": destination,\n        \"time\": wait_time_str\n    })\n    # Meet event\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": meeting_required_duration,\n        \"time\": meeting_start_time_str\n    })\n    \n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_86",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "9:11AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 75,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format datetime to H:MMAM/PM without a leading zero in hours.\n    return dt.strftime(\"%-I:%M%p\") if dt.strftime(\"%I\")[0] != \"0\" else dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Meeting parameters for James at Pacific Heights.\n    # Input details:\n    # You start at Embarcadero at 9:00AM.\n    # Travel from Embarcadero to Pacific Heights takes 11 minutes.\n    # James is available at Pacific Heights from 8:30AM to 3:00PM.\n    # You'd like to meet James for a minimum of 75 minutes.\n    \n    # Set the base date (arbitrary date, using 1900-01-01 for consistency)\n    base_date = datetime(1900, 1, 1)\n    \n    # 1. Start event at Embarcadero at 9:00AM.\n    start_time = base_date.replace(hour=9, minute=0)\n    \n    # 2. Travel event: calculate arrival time at Pacific Heights.\n    travel_duration = 11  # in minutes\n    travel_arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # 3. Determine meeting availability for James:\n    james_available_start = base_date.replace(hour=8, minute=30)\n    james_available_end   = base_date.replace(hour=15, minute=0)  # 3:00PM\n    \n    # The meeting start will be the later of arrival time and James available start.\n    meeting_start_time = max(travel_arrival_time, james_available_start)\n    \n    # Meeting duration for James is 75 minutes, so calculate meeting end time.\n    meeting_duration = 75  # minutes\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Validate that meeting_end_time does not exceed James' available end time.\n    if meeting_end_time > james_available_end:\n        raise ValueError(\"Cannot schedule the meeting with James within his available timeframe.\")\n    \n    # Build the schedule list as per required JSON structure.\n    schedule = []\n    \n    # Start event.\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Embarcadero\",\n        \"time\": format_time(start_time)\n    })\n    \n    # Travel event.\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_arrival_time),\n        \"to\": \"Pacific Heights\"\n    })\n    \n    # Wait event.\n    # In this scenario, arrival time equals the meeting start time, but we include the wait event.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": \"Pacific Heights\",\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Meet event.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Create the final dictionary.\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Print the solution header and the JSON formatted result.\n    print(\"SOLUTION:\")\n    print(json.dumps(result, indent=2))\n    \nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_87",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "8:45PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 15,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(t_str):\n    # t_str format example: '9:00AM' or '8:45PM'\n    dt = datetime.strptime(t_str, \"%I:%M%p\")\n    return dt.hour * 60 + dt.minute\n\ndef minutes_to_time(minutes):\n    # Range minutes can exceed one day; mod by 1440 for safety.\n    minutes = minutes % 1440\n    hour = minutes // 60\n    minute = minutes % 60\n    # Create a datetime object with the given hour and minute\n    dt = datetime.strptime(f\"{hour}:{minute}\", \"%H:%M\")\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%#I:%M%p\")\n\ndef main():\n    # Input parameters for the Joshua meeting case\n    # Locations and times\n    start_location = \"Sunset District\"\n    start_time_str = \"9:00AM\"\n    destination = \"Golden Gate Park\"\n    \n    # Travel time from Sunset District to Golden Gate Park (in minutes)\n    travel_duration = 11\n    \n    # Joshua's meeting details at Golden Gate Park\n    friend_name = \"Joshua\"\n    friend_location = destination  # Joshua is at Golden Gate Park\n    friend_avail_start_str = \"8:45PM\"\n    friend_avail_end_str = \"9:45PM\"\n    meeting_min_duration = 15  # in minutes\n\n    # Convert times to minutes from midnight\n    start_time_min = time_to_minutes(start_time_str)\n    arrival_time_min = start_time_min + travel_duration\n\n    friend_avail_start_min = time_to_minutes(friend_avail_start_str)\n    friend_avail_end_min = time_to_minutes(friend_avail_end_str)\n\n    # The meeting can only start when Joshua is available.\n    # Even if you arrive earlier, you need to wait until he arrives.\n    meeting_start_min = max(arrival_time_min, friend_avail_start_min)\n    meeting_end_min = meeting_start_min + meeting_min_duration\n\n    # Ensure meeting ends before friend's availability ends (not enforced since constraints guarantee it)\n    if meeting_end_min > friend_avail_end_min:\n        raise ValueError(\"Not enough time to meet Joshua within his available window.\")\n\n    # Convert computed times back to formatted strings\n    arrival_time_str = minutes_to_time(arrival_time_min)\n    meeting_start_str = minutes_to_time(meeting_start_min)\n    meeting_end_str = minutes_to_time(meeting_end_min)\n\n    # Build schedule following the specified format\n    schedule = {\n        \"schedule\": [\n            {\"action\": \"start\", \"location\": start_location, \"time\": start_time_str},\n            {\"action\": \"travel\", \"location\": destination, \"duration\": travel_duration, \"time\": start_time_str, \"to\": destination},\n            {\"action\": \"wait\", \"location\": destination, \"time\": meeting_start_str},\n            {\"action\": \"meet\", \"location\": destination, \"duration\": meeting_min_duration, \"time\": meeting_start_str}\n        ]\n    }\n\n    # To follow the solution narrative\n    solution_narrative = (\n        f\"SOLUTION: You start at {start_location} at {start_time_str}. \"\n        f\"You travel to {destination} in {travel_duration} minutes and arrive at {arrival_time_str}. \"\n        f\"You wait until {meeting_start_str}. \"\n        f\"You meet {friend_name} for {meeting_min_duration} minutes from {meeting_start_str} to {meeting_end_str}.\"\n    )\n\n    # Output the JSON dictionary as required\n    output = {\n        \"narrative\": solution_narrative,\n        \"schedule\": schedule[\"schedule\"]\n    }\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_88",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "6:00PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 60,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # format time as H:MAM/PM without a leading zero for the hour\n    # using %-I may not work on Windows, so we'll format manually\n    hour = dt.hour % 12\n    if hour == 0:\n        hour = 12\n    minute = dt.minute\n    am_pm = \"AM\" if dt.hour < 12 else \"PM\"\n    return f\"{hour}:{minute:02d}{am_pm}\"\n\ndef compute_schedule():\n    # Input variables for the meeting constraints\n    # Arrival location and time:\n    start_location = \"Mission District\"\n    arrival_time_str = \"9:00AM\"\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M%p\")\n    \n    # Travel info from Mission District to Bayview\n    travel_duration = 15  # in minutes\n    destination = \"Bayview\"\n    \n    # Friend's availability constraints (Patricia at Bayview)\n    friend_start_str = \"6:00PM\"  # friend arrives time at Bayview\n    friend_end_str = \"7:30PM\"    # friend leaves time\n    min_meeting_duration = 60    # in minutes (minimum meeting duration)\n    \n    # Convert friend's available start time to datetime\n    friend_start_time = datetime.strptime(friend_start_str, \"%I:%M%p\")\n    friend_end_time = datetime.strptime(friend_end_str, \"%I:%M%p\")\n    \n    # Compute travel arrival time at Bayview\n    travel_arrival_time = arrival_time + timedelta(minutes=travel_duration)\n    \n    # The meeting can only start when the friend is available.\n    # So if we are earlier than friend's start time, we need to wait.\n    meeting_start_time = friend_start_time if travel_arrival_time < friend_start_time else travel_arrival_time\n    \n    # Check if the meeting can last for the minimum required duration within friend's availability.\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end_time > friend_end_time:\n        raise ValueError(\"Cannot schedule the meeting within the friend's available time.\")\n    \n    schedule = []\n    \n    # Create schedule entries:\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(arrival_time)\n    })\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_arrival_time),\n        \"to\": destination\n    })\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": destination,\n        \"time\": format_time(meeting_start_time)\n    })\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    return {\"schedule\": schedule}\n\ndef main():\n    schedule_dict = compute_schedule()\n    # Output the result as JSON-formatted dictionary\n    print(json.dumps(schedule_dict, indent=2))\n\nif __name__ == \"__main__\":\n    # SOLUTION:\n    # You start at Mission District at 9:00AM. You travel to Bayview in 15 minutes and arrive at 9:15AM.\n    # You wait until 6:00PM. You meet Patricia for 60 minutes from 6:00PM to 7:00PM.\n    main()",
            "count": "meeting_planning_example_89",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    \"\"\"Parses a time in H:MMAM/PM format to a datetime object (date is arbitrary).\"\"\"\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    \"\"\"Formats a datetime object back to H:MMAM/PM (without leading zeros for hour).\"\"\"\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%#I:%M%p\")\n\ndef add_minutes(time_obj, minutes):\n    return time_obj + timedelta(minutes=minutes)\n\n# Input variables for the meeting at Laura's location\n# Meeting location: Travel from Alamo Square to Chinatown\nstart_location = \"Alamo Square\"\nmeeting_location = \"Chinatown\"\nstart_time_str = \"9:00AM\"\ntravel_duration = 16  # minutes from Alamo Square to Chinatown\n\n# Friend's availability and meeting requirement\nfriend_name = \"Laura\"\nfriend_avail_start_str = \"8:15AM\"\nfriend_avail_end_str = \"6:45PM\"\nmeeting_min_duration = 15  # minutes\n\n# Parse initial times\nstart_time = parse_time(start_time_str)\nfriend_avail_start = parse_time(friend_avail_start_str)\nfriend_avail_end = parse_time(friend_avail_end_str)\n\n# Compute travel: depart at start time to meeting_location.\narrival_time = add_minutes(start_time, travel_duration)\n\n# Meeting can only start when both you have arrived and the friend is available.\nmeeting_start_time = max(arrival_time, friend_avail_start)\n# Meeting end time computed by adding meeting duration.\nmeeting_end_time = add_minutes(meeting_start_time, meeting_min_duration)\n\n# Ensure meeting does not exceed friend's availability.\nif meeting_end_time > friend_avail_end:\n    raise Exception(\"Cannot meet the friend for the required duration within the available window.\")\n\n# Build the schedule as a list of actions.\nschedule = []\n\n# Action 1: Start at the starting location.\nschedule.append({\n    \"action\": \"start\",\n    \"location\": start_location,\n    \"time\": format_time(start_time)\n})\n\n# Action 2: Travel from start location to meeting location.\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": meeting_location,\n    \"duration\": travel_duration,\n    \"time\": format_time(start_time),\n    \"to\": meeting_location\n})\n\n# Check if there is waiting time before meeting can commence.\nif meeting_start_time > arrival_time:\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": format_time(arrival_time)\n    })\n\n# Action 3: Meet the friend for the required duration.\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": meeting_location,\n    \"duration\": meeting_min_duration,\n    \"time\": format_time(meeting_start_time)\n})\n\n# Final result in JSON format.\nresult = {\n    \"schedule\": schedule\n}\n\nif __name__ == \"__main__\":\n    print(json.dumps(result, indent=2))\n",
            "count": "meeting_planning_example_90",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:14AM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "7:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse a time string in the format H:MMAM/PM (e.g., '9:00AM')\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime to H:MMAM/PM with no leading zero for hour\n    hour = dt.strftime(\"%I\").lstrip(\"0\")\n    minute = dt.strftime(\"%M\")\n    ampm = dt.strftime(\"%p\")\n    return f\"{hour}:{minute}{ampm}\"\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt += timedelta(minutes=minutes)\n    return format_time(dt)\n\ndef main():\n    # Input variables for the meeting scenario:\n    # Arriving location and time:\n    start_location = \"Russian Hill\"\n    start_time = \"9:00AM\"\n    \n    # Travel parameters:\n    departure = \"Russian Hill\"\n    destination = \"Richmond District\"\n    travel_time = 14  # minutes\n    \n    # Meeting parameters:\n    friend_name = \"Daniel\"\n    friend_location = \"Richmond District\"  # where Daniel is available\n    friend_available_start = \"7:00PM\"\n    friend_available_end = \"8:15PM\"\n    min_meet_duration = 75  # minutes\n    \n    # Compute schedule:\n    # Start: already at Russian Hill at start_time.\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": start_time\n    })\n    \n    # Travel: from Russian Hill to Richmond District.\n    arrival_time = add_minutes(start_time, travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_time,\n        \"time\": arrival_time,\n        \"to\": destination\n    })\n    \n    # Wait: wait until friend_available_start if arrived earlier.\n    # We assume arrival_time is before the friend availability.\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": destination,\n        \"time\": friend_available_start\n    })\n    \n    # Meet: meet friend from their available start time for the min meeting duration.\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": min_meet_duration,\n        \"time\": friend_available_start\n    })\n    \n    # Prepare final dictionary:\n    result = {\n        \"schedule\": schedule\n    }\n    \n    # Output the result as JSON:\n    # First, print \"SOLUTION:\" as required.\n    print(\"SOLUTION:\")\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_91",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "2:00PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 45,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time in H:MMAM/PM format (e.g., 9:00AM, no leading zero for hour)\n    # Using %-I on Unix; if on Windows, you might need to adjust accordingly (e.g., dt.strftime(\"%#I:%M%p\"))\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input parameters for the meeting with Carol\n    start_location = \"Financial District\"\n    meeting_location = \"The Castro\"\n    start_time_str = \"9:00AM\"\n    travel_duration = 23  # minutes from Financial District to The Castro\n    carol_available_start_str = \"2:00PM\"\n    carol_available_end_str = \"5:45PM\"\n    meeting_duration = 45  # minutes\n    \n    # Parse the start time and Carol's available start time\n    start_time = datetime.strptime(start_time_str, \"%I:%M%p\")\n    carol_available_start = datetime.strptime(carol_available_start_str, \"%I:%M%p\")\n    \n    # Compute arrival time at The Castro after travel\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # The waiting period is until Carol is available (from arrival_time until Carol's available start)\n    # We assume that we can only start the meeting when Carol is available.\n    meeting_start_time = carol_available_start\n    \n    # Build the schedule step-by-step.\n    schedule = []\n    \n    # Start at Financial District at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    # Travel to The Castro\n    arrival_time_str = format_time(arrival_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": arrival_time_str,\n        \"to\": meeting_location\n    })\n    \n    # Wait at The Castro until Carol becomes available at 2:00PM\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Meet Carol for a minimum of 45 minutes starting at 2:00PM\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Build the final JSON dictionary\n    output = {\"schedule\": schedule}\n    \n    # Output the result as JSON formatted string\n    print(\"SOLUTION:\")\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_92",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:06AM",
                    "duration": 6,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "7:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 6,
                    "time": "9:06AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    # Parse times like '9:00AM' or '7:00PM'\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format time without any leading zero in hour, e.g., '9:00AM'\n    return dt.strftime(\"%-I:%M%p\") if hasattr(dt, 'strftime') else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\ndef main():\n    # Input parameters for the scenario: North Beach to Chinatown for meeting Emily\n    start_location = \"North Beach\"\n    start_time_str = \"9:00AM\"\n    travel_duration = 6  # minutes from North Beach to Chinatown\n\n    meeting_location = \"Chinatown\"\n    friend_name = \"Emily\"\n    friend_available_start_str = \"7:00PM\"\n    friend_available_end_str = \"9:00PM\"\n    meeting_min_duration = 75  # minutes\n\n    # Convert times to datetime objects.\n    start_time = parse_time(start_time_str)\n    travel_duration_td = timedelta(minutes=travel_duration)\n    arrival_time = start_time + travel_duration_td\n\n    friend_available_start = parse_time(friend_available_start_str)\n    friend_available_end = parse_time(friend_available_end_str)\n\n    # Determine meeting start time: max of arrival and friend's available start.\n    meeting_start = friend_available_start if arrival_time < friend_available_start else arrival_time\n    meeting_duration_td = timedelta(minutes=meeting_min_duration)\n    meeting_end = meeting_start + meeting_duration_td\n\n    # Verify that meeting_end does not exceed friend's available end time.\n    # If it exceeds, adjust (here we assume the schedule must satisfy the minimum requirement).\n    if meeting_end > friend_available_end:\n        raise ValueError(\"Cannot schedule a meeting for the required duration within the available time window.\")\n\n    # Build the schedule dictionary.\n    schedule = [\n        {\n            \"action\": \"start\",\n            \"location\": start_location,\n            \"time\": format_time(start_time)\n        },\n        {\n            \"action\": \"travel\",\n            \"location\": meeting_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(arrival_time),\n            \"to\": meeting_location\n        },\n        {\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": format_time(friend_available_start)\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": meeting_location,\n            \"duration\": meeting_min_duration,\n            \"time\": format_time(friend_available_start)\n        }\n    ]\n\n    # Create final output dictionary.\n    output = {\n        \"schedule\": schedule\n    }\n\n    # Print the output as a JSON-formatted dictionary.\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_93",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:15AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(total_minutes):\n    # total_minutes: minutes since midnight\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    suffix = \"AM\" if hours < 12 else \"PM\"\n    display_hour = hours if 1 <= hours <= 12 else (hours - 12 if hours > 12 else 12)\n    return f\"{display_hour}:{minutes:02d}{suffix}\"\n\n# SOLUTION:\n# You start at Alamo Square at 9:00AM. You travel to Russian Hill in 13 minutes and arrive at 9:13AM.\n# You wait until 11:15AM. You meet James for 15 minutes from 11:15AM to 11:30AM.\n\n# Define input parameters for the meeting with James\nstart_location = \"Alamo Square\"\ndestination = \"Russian Hill\"\nstart_time_minutes = 9 * 60  # 9:00AM -> 540 minutes\ntravel_duration = 13         # in minutes\narrival_time_minutes = start_time_minutes + travel_duration  # 9:13AM -> 553 minutes\n\n# James is available from 11:15AM to 12:00PM. Minimum meeting duration required is 15 minutes.\njames_available_start = 11 * 60 + 15  # 11:15AM -> 675 minutes\nmeeting_duration = 15                 # in minutes\nmeeting_start_minutes = james_available_start  # meeting starts at 11:15AM\nmeeting_end_minutes = meeting_start_minutes + meeting_duration  # 11:30AM\n\nschedule = [\n    {\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": minutes_to_time_str(start_time_minutes)\n    },\n    {\n        \"action\": \"travel\",\n        \"location\": destination,\n        \"duration\": travel_duration,\n        \"time\": minutes_to_time_str(arrival_time_minutes),\n        \"to\": destination\n    },\n    {\n        \"action\": \"wait\",\n        \"location\": destination,\n        \"time\": minutes_to_time_str(james_available_start)\n    },\n    {\n        \"action\": \"meet\",\n        \"location\": destination,\n        \"duration\": meeting_duration,\n        \"time\": minutes_to_time_str(meeting_start_minutes)\n    }\n]\n\noutput = {\"schedule\": schedule}\n\nprint(json.dumps(output, indent=2))",
            "count": "meeting_planning_example_94",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "11:00AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_str_to_minutes(time_str):\n    # Convert a time string like \"9:00AM\" to minutes since midnight.\n    dt = datetime.strptime(time_str, \"%I:%M%p\")\n    return dt.hour * 60 + dt.minute\n\ndef minutes_to_time_str(minutes):\n    # Convert minutes since midnight to a formatted time string \"H:MMAM/PM\" with no leading zero.\n    hour = minutes // 60\n    minute = minutes % 60\n    suffix = \"AM\" if hour < 12 or hour == 24 else \"PM\"\n    # adjust hour for 12-hour format\n    hour = hour if 1 <= hour <= 12 else hour % 12\n    if hour == 0:\n        hour = 12\n    return f\"{hour}:{minute:02d}{suffix}\"\n\ndef main():\n    # Input parameters for the North Beach to Bayview meeting (with Steven)\n    # Arrival and travel details\n    start_location = \"North Beach\"\n    meeting_location = \"Bayview\"\n    travel_duration = 22  # minutes (North Beach to Bayview)\n    arrival_time_str = \"9:00AM\"\n    participant_availability_start = \"11:00AM\"\n    participant_availability_end = \"12:45PM\"\n    meeting_min_duration = 90  # minutes\n\n    # Convert times to minutes since midnight\n    start_time = time_str_to_minutes(arrival_time_str)\n    travel_minutes = travel_duration\n    # Compute arrival time at meeting location\n    arrival_meeting_location = start_time + travel_minutes\n\n    participant_start = time_str_to_minutes(participant_availability_start)\n    participant_end = time_str_to_minutes(participant_availability_end)\n\n    # The meeting can only start when the participant is available and after arrival.\n    meeting_start = max(arrival_meeting_location, participant_start)\n    meeting_end = meeting_start + meeting_min_duration\n\n    # Check if meeting end does not exceed the participant's available time.\n    if meeting_end > participant_end:\n        raise ValueError(\"Not enough time to meet with the participant given the constraints.\")\n\n    # Build schedule steps\n    schedule = []\n\n    # Step 1: start at start_location at arrival_time_str\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time_str\n    })\n\n    # Step 2: travel from start_location to meeting_location.\n    travel_arrival_time_str = minutes_to_time_str(arrival_meeting_location)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": travel_arrival_time_str,\n        \"to\": meeting_location\n    })\n\n    # Step 3: wait until participant is available (if needed)\n    meeting_start_str = minutes_to_time_str(meeting_start)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": meeting_location,\n        \"time\": meeting_start_str\n    })\n\n    # Step 4: meet the participant\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_min_duration,\n        \"time\": meeting_start_str\n    })\n\n    # Create final output dictionary\n    output = {\n        \"schedule\": schedule\n    }\n\n    # Print the result as a JSON-formatted dictionary\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_95",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:27AM",
                    "duration": 27,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:27AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 27,
                    "time": "9:27AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 30,
                    "time": "9:27AM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef convert_to_datetime(time_str):\n    # Convert time string (e.g., \"9:00AM\") to a datetime object.\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef format_time(dt):\n    # Format datetime object back to the time format \"H:MMAM/PM\" without a leading zero for hour.\n    return dt.strftime(\"%-I:%M%p\") if dt.strftime(\"%-I\") else dt.strftime(\"%I:%M%p\").lstrip(\"0\")\n\n# Input parameters for the meeting with Rebecca at Nob Hill.\n# Starting location and time.\nstart_location = \"Sunset District\"\nstart_time_str = \"9:00AM\"\nstart_time = convert_to_datetime(start_time_str)\n\n# Travel details from Sunset District to Nob Hill.\ntravel_duration = 27  # in minutes\ndestination = \"Nob Hill\"\n\n# Meeting constraints for Rebecca.\n# Rebecca is available at Nob Hill from 9:00AM to 6:15PM.\nrebecca_window_start_str = \"9:00AM\"\nrebecca_window_end_str = \"6:15PM\"\nrebecca_window_start = convert_to_datetime(rebecca_window_start_str)\nrebecca_window_end = convert_to_datetime(rebecca_window_end_str)\n\n# Minimum meeting time.\nmeeting_duration = 30  # in minutes\n\n# Compute the arrival time at Nob Hill.\narrival_time = start_time + timedelta(minutes=travel_duration)\n\n# The meeting with Rebecca can only start when both you have arrived and Rebecca is available.\n# Since Rebecca is available from 9:00AM and arrival_time is after that, meeting start equals arrival_time.\nmeeting_start = max(arrival_time, rebecca_window_start)\n# Meeting end time computed from meeting start plus required duration.\nmeeting_end = meeting_start + timedelta(minutes=meeting_duration)\n\n# Build the schedule. In this schedule, no waiting is needed because meeting can start immediately.\nschedule = []\n\n# Step 1: Start at Sunset District.\nschedule.append({\n    \"action\": \"start\",\n    \"location\": start_location,\n    \"time\": format_time(start_time)\n})\n\n# Step 2: Travel to Nob Hill.\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": destination,\n    \"duration\": travel_duration,\n    \"time\": format_time(arrival_time),\n    \"to\": destination\n})\n\n# If there was any waiting period needed, it would be inserted here.\n# In this case, meeting can start immediately upon arrival so we do not add a waiting step.\n\n# Step 3: Meet Rebecca at Nob Hill.\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": destination,\n    \"duration\": meeting_duration,\n    \"time\": format_time(meeting_start)\n})\n\n# Prepare the result in the specified JSON structure.\nresult = {\n    \"schedule\": schedule\n}\n\n# Output the result.\nprint(\"SOLUTION:\")\nprint(json.dumps(result, indent=2))",
            "count": "meeting_planning_example_96",
            "is_correct": true
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\n\ndef minutes_to_time(mins):\n    # Converts minutes-since-midnight into time string formatted as H:MMAM/PM\n    hour = mins // 60\n    minute = mins % 60\n    period = \"AM\"\n    if hour >= 12:\n        period = \"PM\"\n    if hour > 12:\n        hour -= 12\n    if hour == 0:\n        hour = 12\n    return f\"{hour}:{minute:02d}{period}\"\n\ndef main():\n    # Input Variables\n    start_location = \"Chinatown\"\n    meeting_location = \"Richmond District\"\n    travel_duration = 20  # minutes from Chinatown to Richmond District\n    # Starting time at Chinatown is 9:00AM = 9*60 = 540 minutes\n    start_time = 9 * 60  # in minutes\n    # Charles's availability at Richmond District: 6:00PM to 9:00PM.\n    available_start = 18 * 60  # 6:00PM = 1080 minutes\n    # Minimum meeting duration requirement for Charles is 75 minutes.\n    meeting_duration = 75\n\n    # Compute travel details\n    departure_time = start_time  # leaving at 9:00AM from Chinatown\n    arrival_time = departure_time + travel_duration  # arriving at Richmond District\n    arrival_time_str = minutes_to_time(arrival_time)\n\n    # Determine wait and meeting start time.\n    # We can only meet when Charles is available, so meeting must start at max(arrival_time, available_start)\n    meeting_start = max(arrival_time, available_start)\n    meeting_end = meeting_start + meeting_duration\n\n    meeting_start_str = minutes_to_time(meeting_start)\n    meeting_end_str = minutes_to_time(meeting_end)\n    start_time_str = minutes_to_time(start_time)\n    \n    # Build textual solution as required\n    solution_text = (\n        f\"SOLUTION: You start at {start_location} at {start_time_str}. \"\n        f\"You travel to {meeting_location} in {travel_duration} minutes and arrive at {arrival_time_str}. \"\n        f\"You wait until {minutes_to_time(available_start)}. \"\n        f\"You meet Charles for {meeting_duration} minutes from {meeting_start_str} to {meeting_end_str}.\"\n    )\n    \n    # Build schedule dictionary with required structure\n    schedule = {\n        \"schedule\": [\n            {\"action\": \"start\", \"location\": start_location, \"time\": start_time_str},\n            {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_duration, \"time\": arrival_time_str, \"to\": meeting_location},\n            {\"action\": \"wait\", \"location\": meeting_location, \"time\": minutes_to_time(available_start)},\n            {\"action\": \"meet\", \"location\": meeting_location, \"duration\": meeting_duration, \"time\": meeting_start_str}\n        ]\n    }\n    \n    # Print textual solution\n    print(solution_text)\n    \n    # Output the schedule dictionary as JSON\n    print(json.dumps(schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_97",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:12AM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\n\ndef minutes_to_time(total_minutes):\n    # convert minutes since midnight to a formatted time string (H:MMAM/PM)\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    period = \"AM\"\n    if hours >= 12:\n        period = \"PM\"\n        if hours > 12:\n            hours -= 12\n    if hours == 0:\n        hours = 12\n    return f\"{hours}:{minutes:02d}{period}\"\n\ndef main():\n    # Input variables for the Timothy meeting at Richmond District\n    start_location = \"Alamo Square\"\n    meeting_location = \"Richmond District\"\n    \n    start_time_str = \"9:00AM\"  # arrival at Alamo Square\n    travel_duration = 12       # minutes from Alamo Square to Richmond District\n    timothy_start_str = \"8:45PM\"  # when Timothy is available at Richmond District\n    timothy_end_str = \"9:30PM\"\n    meeting_min_duration = 45  # required meeting duration with Timothy in minutes\n\n    # Convert start_time_str \"9:00AM\" to minutes since midnight\n    # We'll manually parse the time string\n    def parse_time(time_str):\n        # Expecting format H:MMAM/PM (e.g., \"9:00AM\", \"8:45PM\")\n        period = time_str[-2:]\n        time_part = time_str[:-2]\n        hour, minute = map(int, time_part.split(':'))\n        if period.upper() == \"PM\" and hour != 12:\n            hour += 12\n        if period.upper() == \"AM\" and hour == 12:\n            hour = 0\n        return hour * 60 + minute\n\n    start_time = parse_time(start_time_str)  # in minutes from midnight for start\n    # Calculate arrival time at meeting location after travel\n    arrival_time = start_time + travel_duration\n\n    # Convert Timothy's available start time to minutes\n    timothy_start = parse_time(timothy_start_str)\n    timothy_end = parse_time(timothy_end_str)\n\n    # Determine meeting start time: max(arrival_time, timothy_start)\n    meeting_start = max(arrival_time, timothy_start)\n    meeting_end = meeting_start + meeting_min_duration\n\n    # Ensure meeting doesn't exceed Timothy's availability\n    if meeting_end > timothy_end:\n        raise ValueError(\"Cannot meet Timothy for the required duration within his available window.\")\n\n    # Prepare schedule events as a list of dictionaries\n    schedule = []\n\n    # Starting event\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": minutes_to_time(start_time)\n    })\n\n    # Travel event from starting location to meeting location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": meeting_location,\n        \"duration\": travel_duration,\n        \"time\": minutes_to_time(start_time),  # departure time from start location\n        \"to\": meeting_location\n    })\n\n    # Arrival is computed; We might add a wait event if we need to wait until meeting start\n    if meeting_start > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": meeting_location,\n            \"time\": minutes_to_time(arrival_time)\n        })\n\n    # Meeting event\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": meeting_location,\n        \"duration\": meeting_min_duration,\n        \"time\": minutes_to_time(meeting_start)\n    })\n\n    # Output result as JSON\n    result = {\"schedule\": schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_98",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "1:15PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(timestr):\n    \"\"\"Converts time string like '9:00AM' into a datetime object (arbitrary date).\"\"\"\n    return datetime.strptime(timestr, '%I:%M%p')\n\ndef format_time(dt):\n    \"\"\"Formats a datetime object into string format like '9:00AM' with no leading zero in hour.\"\"\"\n    return dt.strftime('%-I:%M%p') if hasattr(dt, 'strftime') else dt.strftime('%#I:%M%p')\n    \ndef add_minutes(time_str, minutes):\n    time_obj = parse_time(time_str)\n    new_time = time_obj + timedelta(minutes=minutes)\n    return format_time(new_time)\n\ndef main():\n    # Input parameters for the Fisherman's Wharf to Union Square meeting with Kevin\n    start_location = \"Fisherman's Wharf\"\n    meeting_location = \"Union Square\"\n    start_time = \"9:00AM\"\n    \n    # Travel times (in minutes) from Fisherman's Wharf to Union Square\n    travel_duration = 13\n    \n    # Kevin's availability details\n    kevin_available_from = \"1:15PM\"\n    kevin_available_to = \"7:15PM\"  # not used directly, as we only need to start meeting\n    meeting_min_duration = 15  # in minutes\n    \n    # Compute schedule times\n    # Starting at Fisherman's Wharf at 9:00AM\n    # Travel to Union Square\n    arrive_time = add_minutes(start_time, travel_duration)\n    # Wait until Kevin is available;\n    # if arrival is earlier than Kevin's available start time, then waiting time exists.\n    # We will set the meeting start time as Kevin's available from time.\n    meeting_start_time = kevin_available_from\n    meeting_end_time = add_minutes(meeting_start_time, meeting_min_duration)\n    \n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": start_time},\n        {\"action\": \"travel\", \"location\": meeting_location, \"duration\": travel_duration, \"time\": arrive_time, \"to\": meeting_location},\n        {\"action\": \"wait\", \"location\": meeting_location, \"time\": kevin_available_from},\n        {\"action\": \"meet\", \"location\": meeting_location, \"duration\": meeting_min_duration, \"time\": meeting_start_time}\n    ]\n    \n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n    \nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_99",
            "is_correct": true
        }
    ]
}