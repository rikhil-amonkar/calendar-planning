{
    "0shot": [
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 20,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:20AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "10:30AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "12:30PM",
                    "duration": 19,
                    "to": "Marina District"
                },
                {
                    "action": "end",
                    "location": "Marina District",
                    "time": "12:49PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 120,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Marina District\"\n    friend_location = \"Mission District\"\n    friend_availability = (datetime.strptime(\"10:30AM\", \"%I:%M%p\"), datetime.strptime(\"1:30PM\", \"%I:%M%p\"))\n    meeting_duration = 120\n    travel_duration_to_friend = 20\n    travel_duration_from_friend = 19\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_0",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "5:15PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "6:15PM",
                    "duration": 21,
                    "to": "Richmond District"
                },
                {
                    "action": "end",
                    "location": "Richmond District",
                    "time": "6:36PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 60,
                    "time": "5:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Richmond District\"\n    friend_location = \"Financial District\"\n    friend_availability = (datetime.strptime(\"5:15PM\", \"%I:%M%p\"), datetime.strptime(\"9:45PM\", \"%I:%M%p\"))\n    meeting_duration = 60\n    travel_duration_to_friend = 22\n    travel_duration_from_friend = 21\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_1",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 15,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "3:15PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "4:45PM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "end",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 90,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Haight-Ashbury\"\n    friend_location = \"Sunset District\"\n    friend_availability = (datetime.strptime(\"3:15PM\", \"%I:%M%p\"), datetime.strptime(\"8:15PM\", \"%I:%M%p\"))\n    meeting_duration = 90\n    travel_duration_to_friend = 15\n    travel_duration_from_friend = 15\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_2",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:22AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "10:52AM",
                    "duration": 23,
                    "to": "Bayview"
                },
                {
                    "action": "end",
                    "location": "Bayview",
                    "time": "11:15AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Bayview\"\n    friend_location = \"Golden Gate Park\"\n    friend_availability = (datetime.strptime(\"8:00AM\", \"%I:%M%p\"), datetime.strptime(\"11:30AM\", \"%I:%M%p\"))\n    meeting_duration = 90\n    travel_duration_to_friend = 22\n    travel_duration_from_friend = 23\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_3",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 10,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:10AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:15AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "10:15AM",
                    "duration": 10,
                    "to": "Presidio"
                },
                {
                    "action": "end",
                    "location": "Presidio",
                    "time": "10:25AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 60,
                    "time": "9:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Presidio\"\n    friend_location = \"Marina District\"\n    friend_availability = (datetime.strptime(\"9:15AM\", \"%I:%M%p\"), datetime.strptime(\"5:45PM\", \"%I:%M%p\"))\n    meeting_duration = 60\n    travel_duration_to_friend = 10\n    travel_duration_from_friend = 10\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_4",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "12:15PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "1:30PM",
                    "duration": 16,
                    "to": "Nob Hill"
                },
                {
                    "action": "end",
                    "location": "Nob Hill",
                    "time": "1:46PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 75,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Nob Hill\"\n    friend_location = \"The Castro\"\n    friend_availability = (datetime.strptime(\"12:15PM\", \"%I:%M%p\"), datetime.strptime(\"10:00PM\", \"%I:%M%p\"))\n    meeting_duration = 75\n    travel_duration_to_friend = 17\n    travel_duration_from_friend = 16\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_5",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "2:15PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "3:45PM",
                    "duration": 11,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "end",
                    "location": "Fisherman's Wharf",
                    "time": "3:56PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 90,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Fisherman's Wharf\"\n    friend_location = \"Nob Hill\"\n    friend_availability = (datetime.strptime(\"2:15PM\", \"%I:%M%p\"), datetime.strptime(\"7:45PM\", \"%I:%M%p\"))\n    meeting_duration = 90\n    travel_duration_to_friend = 11\n    travel_duration_from_friend = 11\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_6",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "3:15PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "4:30PM",
                    "duration": 18,
                    "to": "Richmond District"
                },
                {
                    "action": "end",
                    "location": "Richmond District",
                    "time": "4:48PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Richmond District\"\n    friend_location = \"North Beach\"\n    friend_availability = (datetime.strptime(\"3:15PM\", \"%I:%M%p\"), datetime.strptime(\"5:15PM\", \"%I:%M%p\"))\n    meeting_duration = 75\n    travel_duration_to_friend = 17\n    travel_duration_from_friend = 18\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_7",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:12AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:12AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "10:57AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "end",
                    "location": "Chinatown",
                    "time": "11:13AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 105,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Chinatown\"\n    friend_location = \"Marina District\"\n    friend_availability = (datetime.strptime(\"8:00AM\", \"%I:%M%p\"), datetime.strptime(\"3:00PM\", \"%I:%M%p\"))\n    meeting_duration = 105\n    travel_duration_to_friend = 12\n    travel_duration_from_friend = 16\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_8",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 9,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:09AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "12:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "1:15PM",
                    "duration": 7,
                    "to": "Union Square"
                },
                {
                    "action": "end",
                    "location": "Union Square",
                    "time": "1:22PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "12:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Union Square\"\n    friend_location = \"Nob Hill\"\n    friend_availability = (datetime.strptime(\"12:00PM\", \"%I:%M%p\"), datetime.strptime(\"4:15PM\", \"%I:%M%p\"))\n    meeting_duration = 75\n    travel_duration_to_friend = 9\n    travel_duration_from_friend = 7\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_9",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:15AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "10:30AM",
                    "duration": 18,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "end",
                    "location": "Golden Gate Park",
                    "time": "10:48AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 15,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Golden Gate Park\"\n    friend_location = \"Marina District\"\n    friend_availability = (datetime.strptime(\"10:15AM\", \"%I:%M%p\"), datetime.strptime(\"1:30PM\", \"%I:%M%p\"))\n    meeting_duration = 15\n    travel_duration_to_friend = 16\n    travel_duration_from_friend = 18\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_10",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 25,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:25AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "3:15PM",
                    "duration": 27,
                    "to": "Nob Hill"
                },
                {
                    "action": "end",
                    "location": "Nob Hill",
                    "time": "3:42PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Nob Hill\"\n    friend_location = \"Sunset District\"\n    friend_availability = (datetime.strptime(\"2:00PM\", \"%I:%M%p\"), datetime.strptime(\"8:30PM\", \"%I:%M%p\"))\n    meeting_duration = 75\n    travel_duration_to_friend = 25\n    travel_duration_from_friend = 27\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_11",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "6:00PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "7:30PM",
                    "duration": 15,
                    "to": "North Beach"
                },
                {
                    "action": "end",
                    "location": "North Beach",
                    "time": "7:45PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"North Beach\"\n    friend_location = \"Alamo Square\"\n    friend_availability = (datetime.strptime(\"6:00PM\", \"%I:%M%p\"), datetime.strptime(\"9:30PM\", \"%I:%M%p\"))\n    meeting_duration = 90\n    travel_duration_to_friend = 16\n    travel_duration_from_friend = 15\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_12",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:18AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "6:45PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "8:00PM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "end",
                    "location": "Presidio",
                    "time": "8:17PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "6:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Presidio\"\n    friend_location = \"North Beach\"\n    friend_availability = (datetime.strptime(\"6:45PM\", \"%I:%M%p\"), datetime.strptime(\"10:00PM\", \"%I:%M%p\"))\n    meeting_duration = 75\n    travel_duration_to_friend = 18\n    travel_duration_from_friend = 17\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_13",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "8:00PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "10:00PM",
                    "duration": 12,
                    "to": "Nob Hill"
                },
                {
                    "action": "end",
                    "location": "Nob Hill",
                    "time": "10:12PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 120,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Nob Hill\"\n    friend_location = \"Marina District\"\n    friend_availability = (datetime.strptime(\"8:00PM\", \"%I:%M%p\"), datetime.strptime(\"10:00PM\", \"%I:%M%p\"))\n    meeting_duration = 120\n    travel_duration_to_friend = 11\n    travel_duration_from_friend = 12\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_14",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 21,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:21AM"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "1:00PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "2:30PM",
                    "duration": 19,
                    "to": "Russian Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 21,
                    "time": "9:21AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, john_start_time, john_end_time, meeting_duration, \n                       russian_hill_to_golden_gate_park, golden_gate_park_to_russian_hill):\n    schedule = []\n    \n    # Start at Russian Hill\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to Golden Gate Park\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=russian_hill_to_golden_gate_park)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": russian_hill_to_golden_gate_park, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n    \n    # Wait for John\n    wait_end_time = max(travel_end_time, john_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet John\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds John's end time\n    if meet_end_time > john_end_time:\n        meet_end_time = john_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to Russian Hill\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=golden_gate_park_to_russian_hill)\n    schedule.append({\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": golden_gate_park_to_russian_hill, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Russian Hill\"})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    john_start_time = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    john_end_time = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    meeting_duration = 90\n    russian_hill_to_golden_gate_park = 21\n    golden_gate_park_to_russian_hill = 19\n    \n    schedule = calculate_schedule(arrival_time, john_start_time, john_end_time, meeting_duration, \n                                   russian_hill_to_golden_gate_park, golden_gate_park_to_russian_hill)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_15",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "3:15PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "5:00PM",
                    "duration": 9,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    meeting_duration = 105\n    start_location_to_friend_location = 7\n    friend_location_to_start_location = 9\n    start_location = \"Chinatown\"\n    friend_location = \"Russian Hill\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_16",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "1:30PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "1:45PM",
                    "duration": 17,
                    "to": "Alamo Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"2:30PM\", \"%I:%M%p\")\n    meeting_duration = 15\n    start_location_to_friend_location = 16\n    friend_location_to_start_location = 17\n    start_location = \"Alamo Square\"\n    friend_location = \"Sunset District\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_17",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:30PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:45PM",
                    "duration": 9,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "8:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    start_location_to_friend_location = 11\n    friend_location_to_start_location = 9\n    start_location = \"Marina District\"\n    friend_location = \"Richmond District\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_18",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:45PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "8:30PM",
                    "duration": 15,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"8:45PM\", \"%I:%M%p\")\n    meeting_duration = 45\n    start_location_to_friend_location = 16\n    friend_location_to_start_location = 15\n    start_location = \"Golden Gate Park\"\n    friend_location = \"Pacific Heights\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_19",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "12:45PM",
                    "duration": 6,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    start_location_to_friend_location = 8\n    friend_location_to_start_location = 6\n    start_location = \"Chinatown\"\n    friend_location = \"Nob Hill\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_20",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:42AM",
                    "duration": 11,
                    "to": "Mission District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"3:45PM\", \"%I:%M%p\")\n    meeting_duration = 30\n    start_location_to_friend_location = 12\n    friend_location_to_start_location = 11\n    start_location = \"Mission District\"\n    friend_location = \"Haight-Ashbury\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_21",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "11:15AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "1:00PM",
                    "duration": 24,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 105,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\n    meeting_duration = 105\n    start_location_to_friend_location = 22\n    friend_location_to_start_location = 24\n    start_location = \"Presidio\"\n    friend_location = \"Union Square\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_22",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "5:30PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "6:45PM",
                    "duration": 23,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 75,
                    "time": "5:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    start_location_to_friend_location = 23\n    friend_location_to_start_location = 23\n    start_location = \"Bayview\"\n    friend_location = \"Russian Hill\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_23",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:00AM",
                    "duration": 30.0
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "11:30AM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define input parameters\narrival_location = \"Nob Hill\"\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nmatthew_location = \"Presidio\"\nmatthew_start_time = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\nmatthew_end_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\nmin_meeting_duration = 30\ntravel_time_nob_hill_to_presidio = 17\ntravel_time_presidio_to_nob_hill = 18\n\n# Calculate optimal meeting schedule\nschedule = []\ncurrent_time = arrival_time\ncurrent_location = arrival_location\n\n# Add start action to schedule\nschedule.append({\n    \"action\": \"start\",\n    \"location\": current_location,\n    \"time\": current_time.strftime(\"%I:%M%p\")\n})\n\n# Travel to Presidio\ntravel_start_time = current_time\ntravel_end_time = travel_start_time + timedelta(minutes=travel_time_nob_hill_to_presidio)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": current_location,\n    \"duration\": travel_time_nob_hill_to_presidio,\n    \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n    \"to\": matthew_location\n})\ncurrent_time = travel_end_time\ncurrent_location = matthew_location\n\n# Wait for Matthew\nwait_start_time = current_time\nwait_end_time = max(wait_start_time, matthew_start_time)\nschedule.append({\n    \"action\": \"wait\",\n    \"location\": current_location,\n    \"time\": wait_start_time.strftime(\"%I:%M%p\")\n})\ncurrent_time = wait_end_time\n\n# Meet Matthew\nmeet_start_time = current_time\nmeet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), matthew_end_time)\nschedule.append({\n    \"action\": \"meet\",\n    \"location\": current_location,\n    \"duration\": (meet_end_time - meet_start_time).total_seconds() / 60,\n    \"time\": meet_start_time.strftime(\"%I:%M%p\")\n})\ncurrent_time = meet_end_time\n\n# Travel back to Nob Hill\ntravel_start_time = current_time\ntravel_end_time = travel_start_time + timedelta(minutes=travel_time_presidio_to_nob_hill)\nschedule.append({\n    \"action\": \"travel\",\n    \"location\": current_location,\n    \"duration\": travel_time_presidio_to_nob_hill,\n    \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n    \"to\": arrival_location\n})\ncurrent_time = travel_end_time\ncurrent_location = arrival_location\n\n# Output schedule as JSON\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_24",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "4:00PM",
                    "duration": 105.0
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "5:45PM",
                    "duration": 23,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 105,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival):\n    schedule = []\n    current_time = arrival_time\n    current_location = arrival_location\n\n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend's location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n\n    # Wait for friend\n    wait_start_time = current_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": current_location,\n        \"time\": wait_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = wait_end_time\n\n    # Meet friend\n    meet_start_time = current_time\n    meet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), friend_end_time)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": (meet_end_time - meet_start_time).total_seconds() / 60,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = meet_end_time\n\n    # Travel back to arrival location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_arrival)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_arrival,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n    current_time = travel_end_time\n    current_location = arrival_location\n\n    return schedule\n\ndef main():\n    # Define input parameters\n    arrival_location = \"Golden Gate Park\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_location = \"Chinatown\"\n    friend_start_time = datetime.strptime(\"4:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    min_meeting_duration = 105\n    travel_time_to_friend = 23\n    travel_time_to_arrival = 23\n\n    schedule = calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_25",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:15PM",
                    "duration": 105.0
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "3:00PM",
                    "duration": 7,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 105,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival):\n    schedule = []\n    current_time = arrival_time\n    current_location = arrival_location\n\n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend's location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n\n    # Wait for friend\n    wait_start_time = current_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": current_location,\n        \"time\": wait_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = wait_end_time\n\n    # Meet friend\n    meet_start_time = current_time\n    meet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), friend_end_time)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": (meet_end_time - meet_start_time).total_seconds() / 60,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = meet_end_time\n\n    # Travel back to arrival location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_arrival)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_arrival,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n    current_time = travel_end_time\n    current_location = arrival_location\n\n    return schedule\n\ndef main():\n    # Define input parameters\n    arrival_location = \"Richmond District\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_location = \"Presidio\"\n    friend_start_time = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    min_meeting_duration = 105\n    travel_time_to_friend = 7\n    travel_time_to_arrival = 7\n\n    schedule = calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_26",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:00PM",
                    "duration": 15.0
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "7:15PM",
                    "duration": 6,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 15,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival):\n    schedule = []\n    current_time = arrival_time\n    current_location = arrival_location\n\n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend's location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n\n    # Wait for friend\n    wait_start_time = current_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": current_location,\n        \"time\": wait_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = wait_end_time\n\n    # Meet friend\n    meet_start_time = current_time\n    meet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), friend_end_time)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": (meet_end_time - meet_start_time).total_seconds() / 60,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = meet_end_time\n\n    # Travel back to arrival location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_arrival)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_arrival,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n    current_time = travel_end_time\n    current_location = arrival_location\n\n    return schedule\n\ndef main():\n    # Define input parameters\n    arrival_location = \"Marina District\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_location = \"Pacific Heights\"\n    friend_start_time = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    min_meeting_duration = 15\n    travel_time_to_friend = 7\n    travel_time_to_arrival = 6\n\n    schedule = calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_27",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:00PM",
                    "duration": 75.0
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "7:15PM",
                    "duration": 7,
                    "to": "Union Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival):\n    schedule = []\n    current_time = arrival_time\n    current_location = arrival_location\n\n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend's location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n\n    # Wait for friend\n    wait_start_time = current_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": current_location,\n        \"time\": wait_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = wait_end_time\n\n    # Meet friend\n    meet_start_time = current_time\n    meet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), friend_end_time)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": (meet_end_time - meet_start_time).total_seconds() / 60,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = meet_end_time\n\n    # Travel back to arrival location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_arrival)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_arrival,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n    current_time = travel_end_time\n    current_location = arrival_location\n\n    return schedule\n\ndef main():\n    # Define input parameters\n    arrival_location = \"Union Square\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_location = \"Chinatown\"\n    friend_start_time = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    min_meeting_duration = 75\n    travel_time_to_friend = 7\n    travel_time_to_arrival = 7\n\n    schedule = calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_28",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM",
                    "duration": 75.0
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "8:45PM",
                    "duration": 15,
                    "to": "Sunset District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival):\n    schedule = []\n    current_time = arrival_time\n    current_location = arrival_location\n\n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend's location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n\n    # Wait for friend\n    wait_start_time = current_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": current_location,\n        \"time\": wait_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = wait_end_time\n\n    # Meet friend\n    meet_start_time = current_time\n    meet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), friend_end_time)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": (meet_end_time - meet_start_time).total_seconds() / 60,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = meet_end_time\n\n    # Travel back to arrival location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_arrival)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_arrival,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n    current_time = travel_end_time\n    current_location = arrival_location\n\n    return schedule\n\ndef main():\n    # Define input parameters\n    arrival_location = \"Sunset District\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_location = \"Haight-Ashbury\"\n    friend_start_time = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    min_meeting_duration = 75\n    travel_time_to_friend = 15\n    travel_time_to_arrival = 15\n\n    schedule = calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival)\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_29",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:17AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "11:30AM",
                    "duration": 18,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 120,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, stephanie_start_time, stephanie_end_time, meeting_duration, travel_time_to_stephanie, travel_time_from_stephanie):\n    schedule = []\n    \n    # Start at Richmond District\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to North Beach\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_stephanie)\n    schedule.append({\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time_to_stephanie, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"North Beach\"})\n    \n    # Wait for Stephanie\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, stephanie_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"North Beach\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"North Beach\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet Stephanie\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel back to Richmond District\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_from_stephanie)\n    schedule.append({\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_time_from_stephanie, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Richmond District\"})\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nstephanie_start_time = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\nstephanie_end_time = datetime.strptime(\"4:15PM\", \"%I:%M%p\")\nmeeting_duration = 120\ntravel_time_to_stephanie = 17\ntravel_time_from_stephanie = 18\n\nschedule = calculate_schedule(arrival_time, stephanie_start_time, stephanie_end_time, meeting_duration, travel_time_to_stephanie, travel_time_from_stephanie)\n\nprint(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_30",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:11AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Alamo Square\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\nmeeting_duration = 15\ntravel_time_to_friend = 11\ntravel_time_from_friend = 11\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_31",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:11AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"The Castro\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"7:00AM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\nmeeting_duration = 105\ntravel_time_to_friend = 11\ntravel_time_from_friend = 13\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_32",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 30,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30AM"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "12:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 30,
                    "time": "9:30AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Sunset District\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Union Square\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Union Square\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Union Square\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"12:30PM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\nmeeting_duration = 15\ntravel_time_to_friend = 30\ntravel_time_from_friend = 26\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_33",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:23AM"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "12:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 105,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Pacific Heights\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\nmeeting_duration = 105\ntravel_time_to_friend = 23\ntravel_time_from_friend = 22\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_34",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:18AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 90,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Chinatown\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"8:30AM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"12:30PM\", \"%I:%M%p\")\nmeeting_duration = 90\ntravel_time_to_friend = 18\ntravel_time_from_friend = 22\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_35",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:14AM"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "1:30PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 60,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Embarcadero\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"8:45PM\", \"%I:%M%p\")\nmeeting_duration = 60\ntravel_time_to_friend = 14\ntravel_time_from_friend = 12\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_36",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:19AM"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "12:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 90,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Financial District\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Financial District\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Financial District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Financial District\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"2:00PM\", \"%I:%M%p\")\nmeeting_duration = 90\ntravel_time_to_friend = 19\ntravel_time_from_friend = 19\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_37",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 10,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:10AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"North Beach\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"North Beach\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"North Beach\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"10:30PM\", \"%I:%M%p\")\nmeeting_duration = 45\ntravel_time_to_friend = 10\ntravel_time_from_friend = 7\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_38",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:11AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:45PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 120,
                    "time": "4:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Nob Hill\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"4:45PM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\nmeeting_duration = 120\ntravel_time_to_friend = 11\ntravel_time_from_friend = 11\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_39",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:17AM"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"The Castro\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Sunset District\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\nmeeting_duration = 75\ntravel_time_to_friend = 17\ntravel_time_from_friend = 17\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_40",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:18AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 45,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Haight-Ashbury\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"7:30AM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\nmeeting_duration = 45\ntravel_time_to_friend = 18\ntravel_time_from_friend = 19\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_41",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:17AM"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:00PM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "1:30PM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Nob Hill\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Update current time\n    current_time = meet_end_time\n    \n    # Travel back to Nob Hill\n    travel_back_end_time = current_time + timedelta(minutes=travel_duration_from_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_duration_from_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 17\n    travel_duration_from_meeting = 18\n    meeting_duration = 30\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_42",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Marina District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Chinatown\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"11:45AM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 16\n    travel_duration_from_meeting = 12\n    meeting_duration = 15\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_43",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 105,
                    "time": "9:13AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Pacific Heights\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Fisherman's Wharf\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Fisherman's Wharf\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Fisherman's Wharf\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"8:45AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 13\n    travel_duration_from_meeting = 12\n    meeting_duration = 105\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_44",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:16AM"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"North Beach\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 16\n    travel_duration_from_meeting = 15\n    meeting_duration = 15\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_45",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:19AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "4:30PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 90,
                    "time": "4:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Haight-Ashbury\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"North Beach\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"4:30PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 19\n    travel_duration_from_meeting = 18\n    meeting_duration = 90\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_46",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:17AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Richmond District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 17\n    travel_duration_from_meeting = 14\n    meeting_duration = 15\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_47",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 9,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:09AM"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "9:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Financial District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Union Square\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Union Square\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Union Square\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 9\n    travel_duration_from_meeting = 9\n    meeting_duration = 15\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_48",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 26,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:26AM"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "2:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Richmond District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 26\n    travel_duration_from_meeting = 25\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_49",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:07AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"North Beach\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 7\n    travel_duration_from_meeting = 8\n    meeting_duration = 75\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_50",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "9:22AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 15,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"The Castro\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Embarcadero\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Embarcadero\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 22\n    travel_duration_from_meeting = 25\n    meeting_duration = 15\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_51",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:14AM"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Russian Hill\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Richmond District\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Richmond District\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 14\n    travel_duration_from_meeting = 13\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_52",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:13AM"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "10:15AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 120,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Richmond District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 13\n    travel_duration_from_meeting = 12\n    meeting_duration = 120\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_53",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:17AM"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Financial District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Mission District\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Mission District\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Mission District\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 17\n    travel_duration_from_meeting = 17\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_54",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:08AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Financial District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 8\n    travel_duration_from_meeting = 9\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_55",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:08AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:15AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Chinatown\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 8\n    travel_duration_from_meeting = 6\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_56",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:23AM"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "10:30AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Bayview\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Sunset District\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Sunset District\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Sunset District\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"10:30AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"5:45PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 23\n    travel_duration_from_meeting = 22\n    meeting_duration = 60\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_57",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:00AM",
                    "duration": 20,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "9:20AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 30,
                    "time": "9:20AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"The Castro\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Financial District\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Financial District\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Financial District\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"9:15AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"4:45PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 20\n    travel_duration_from_meeting = 23\n    meeting_duration = 30\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_58",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 105,
                    "time": "9:19AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Bayview\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Haight-Ashbury\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Haight-Ashbury\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"7:00AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"3:45PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 19\n    travel_duration_from_meeting = 18\n    meeting_duration = 105\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_59",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:07AM"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:30PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 45,
                    "time": "6:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Union Square\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Chinatown\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"6:30PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 7\n    travel_duration_from_meeting = 7\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_60",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:11AM"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "7:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 90,
                    "time": "7:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 11\n    travel_duration_from_meeting = 12\n    meeting_duration = 90\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_61",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:14AM"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Presidio\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"9:15PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 14\n    travel_duration_from_meeting = 14\n    meeting_duration = 15\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_62",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 31,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "9:31AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 31,
                    "time": "9:31AM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "9:31AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Presidio\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 31\n    travel_duration_from_meeting = 31\n    meeting_duration = 30\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_63",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:08AM"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "3:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "3:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Nob Hill\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"3:45PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 8\n    travel_duration_from_meeting = 8\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_64",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 25,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:25AM"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "7:00PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "7:45PM",
                    "duration": 25,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "end",
                    "location": "Golden Gate Park",
                    "time": "8:10PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 45,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, sandra_start_time, sandra_end_time, travel_duration, meeting_duration):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to Embarcadero\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Embarcadero\"})\n    \n    # Calculate wait time before meeting Sandra\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, sandra_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with Sandra\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time back to Golden Gate Park\n    travel_back_start_time = meet_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_duration, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    \n    # Calculate end time\n    end_time = travel_back_end_time\n    schedule.append({\"action\": \"end\", \"location\": \"Golden Gate Park\", \"time\": end_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    sandra_start_time = datetime.strptime('7:00PM', '%I:%M%p')\n    sandra_end_time = datetime.strptime('9:00PM', '%I:%M%p')\n    travel_duration = 25\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, sandra_start_time, sandra_end_time, travel_duration, meeting_duration)\n    \n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_65",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:17AM"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:15AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 120,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_start_time = datetime.strptime('11:15AM', '%I:%M%p')\n    friend_end_time = datetime.strptime('5:45PM', '%I:%M%p')\n    travel_duration = 17\n    meeting_duration = 120\n    start_location = \"Nob Hill\"\n    friend_location = \"Presidio\"\n\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location)\n    \n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_66",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 26,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:26AM"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "8:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 105,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_start_time = datetime.strptime('8:00PM', '%I:%M%p')\n    friend_end_time = datetime.strptime('10:00PM', '%I:%M%p')\n    travel_duration = 26\n    meeting_duration = 105\n    start_location = \"Golden Gate Park\"\n    friend_location = \"Financial District\"\n\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location)\n    \n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_67",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "9:17AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 30,
                    "time": "9:17AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_start_time = datetime.strptime('7:45AM', '%I:%M%p')\n    friend_end_time = datetime.strptime('2:15PM', '%I:%M%p')\n    travel_duration = 17\n    meeting_duration = 30\n    start_location = \"Haight-Ashbury\"\n    friend_location = \"Russian Hill\"\n\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location)\n    \n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_68",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:07AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 90,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_start_time = datetime.strptime('8:00AM', '%I:%M%p')\n    friend_end_time = datetime.strptime('12:45PM', '%I:%M%p')\n    travel_duration = 7\n    meeting_duration = 90\n    start_location = \"Chinatown\"\n    friend_location = \"Union Square\"\n\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location)\n    \n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_69",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 24,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:24AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 24,
                    "time": "9:24AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 30,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_start_time = datetime.strptime('9:30AM', '%I:%M%p')\n    friend_end_time = datetime.strptime('6:30PM', '%I:%M%p')\n    travel_duration = 24\n    meeting_duration = 30\n    start_location = \"Golden Gate Park\"\n    friend_location = \"North Beach\"\n\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location)\n    \n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_70",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:18AM"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "11:00AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_start_time = datetime.strptime('11:00AM', '%I:%M%p')\n    friend_end_time = datetime.strptime('4:30PM', '%I:%M%p')\n    travel_duration = 18\n    meeting_duration = 90\n    start_location = \"Haight-Ashbury\"\n    friend_location = \"Bayview\"\n\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location)\n    \n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_71",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:10AM"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:45AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "9:45AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_start_time = datetime.strptime('9:45AM', '%I:%M%p')\n    friend_end_time = datetime.strptime('2:30PM', '%I:%M%p')\n    travel_duration = 10\n    meeting_duration = 90\n    start_location = \"Pacific Heights\"\n    friend_location = \"Alamo Square\"\n\n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location)\n    \n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_72",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "9:07AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 60,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration):\n    schedule = []\n\n    # Start at Russian Hill\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to Pacific Heights\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": \"Pacific Heights\"})\n\n    # Wait until Barbara is available\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet Barbara\n    meet_start = wait_end\n    meet_end = meet_start + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    travel_time = 7\n    meeting_duration = 60\n\n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration)\n\n    import json\n    print(json.dumps(schedule, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_73",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"4:00PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    travel_time = 17\n    meeting_duration = 45\n    start_location = \"Richmond District\"\n    destination = \"Nob Hill\"\n\n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n    print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n    for action in schedule[\"schedule\"]:\n        if action[\"action\"] == \"travel\":\n            print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n        elif action[\"action\"] == \"wait\":\n            print(\"You wait until\", action['time'], \".\")\n        elif action[\"action\"] == \"meet\":\n            print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n    import json\n    print(json.dumps(schedule, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_74",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"2:45PM\", \"%I:%M%p\")\n    travel_time = 13\n    meeting_duration = 15\n    start_location = \"Pacific Heights\"\n    destination = \"Fisherman's Wharf\"\n\n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n    print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n    for action in schedule[\"schedule\"]:\n        if action[\"action\"] == \"travel\":\n            print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n        elif action[\"action\"] == \"wait\":\n            print(\"You wait until\", action['time'], \".\")\n        elif action[\"action\"] == \"meet\":\n            print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n    import json\n    print(json.dumps(schedule, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_75",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 60,
                    "time": "5:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"5:00PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"8:15PM\", \"%I:%M%p\")\n    travel_time = 16\n    meeting_duration = 60\n    start_location = \"Marina District\"\n    destination = \"Haight-Ashbury\"\n\n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n    print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n    for action in schedule[\"schedule\"]:\n        if action[\"action\"] == \"travel\":\n            print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n        elif action[\"action\"] == \"wait\":\n            print(\"You wait until\", action['time'], \".\")\n        elif action[\"action\"] == \"meet\":\n            print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n    import json\n    print(json.dumps(schedule, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_76",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 30,
                    "time": "9:09AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"8:15AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    travel_time = 9\n    meeting_duration = 30\n    start_location = \"Richmond District\"\n    destination = \"Golden Gate Park\"\n\n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n    print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n    for action in schedule[\"schedule\"]:\n        if action[\"action\"] == \"travel\":\n            print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n        elif action[\"action\"] == \"wait\":\n            print(\"You wait until\", action['time'], \".\")\n        elif action[\"action\"] == \"meet\":\n            print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n    import json\n    print(json.dumps(schedule, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_77",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 105,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    travel_time = 19\n    meeting_duration = 105\n    start_location = \"Union Square\"\n    destination = \"The Castro\"\n\n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n    print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n    for action in schedule[\"schedule\"]:\n        if action[\"action\"] == \"travel\":\n            print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n        elif action[\"action\"] == \"wait\":\n            print(\"You wait until\", action['time'], \".\")\n        elif action[\"action\"] == \"meet\":\n            print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n    import json\n    print(json.dumps(schedule, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_78",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    travel_time = 22\n    meeting_duration = 45\n    start_location = \"North Beach\"\n    destination = \"Bayview\"\n\n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n    print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n    for action in schedule[\"schedule\"]:\n        if action[\"action\"] == \"travel\":\n            print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n        elif action[\"action\"] == \"wait\":\n            print(\"You wait until\", action['time'], \".\")\n        elif action[\"action\"] == \"meet\":\n            print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n    import json\n    print(json.dumps(schedule, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_79",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    travel_time = 12\n    meeting_duration = 75\n    start_location = \"Mission District\"\n    destination = \"Haight-Ashbury\"\n\n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n    print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n    for action in schedule[\"schedule\"]:\n        if action[\"action\"] == \"travel\":\n            print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n        elif action[\"action\"] == \"wait\":\n            print(\"You wait until\", action['time'], \".\")\n        elif action[\"action\"] == \"meet\":\n            print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n    import json\n    print(json.dumps(schedule, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_80",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"12:30PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    travel_time = 13\n    meeting_duration = 75\n    start_location = \"Richmond District\"\n    destination = \"Alamo Square\"\n\n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n    print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n    for action in schedule[\"schedule\"]:\n        if action[\"action\"] == \"travel\":\n            print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n        elif action[\"action\"] == \"wait\":\n            print(\"You wait until\", action['time'], \".\")\n        elif action[\"action\"] == \"meet\":\n            print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n    import json\n    print(json.dumps(schedule, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_81",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "5:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"5:45PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    travel_time = 10\n    meeting_duration = 75\n    start_location = \"Golden Gate Park\"\n    destination = \"Alamo Square\"\n\n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n    print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n    for action in schedule[\"schedule\"]:\n        if action[\"action\"] == \"travel\":\n            print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n        elif action[\"action\"] == \"wait\":\n            print(\"You wait until\", action['time'], \".\")\n        elif action[\"action\"] == \"meet\":\n            print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n    import json\n    print(json.dumps(schedule, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_82",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:45PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "10:41PM",
                    "duration": 11,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, carol_available_time, meeting_duration, \n                       travel_time_presidio_to_golden_gate, travel_time_golden_gate_to_presidio):\n    # Initialize schedule\n    schedule = []\n\n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": \"Presidio\", \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to Golden Gate Park\n    travel_time_to_golden_gate = travel_time_presidio_to_golden_gate\n    travel_end_time = start_time + timedelta(minutes=travel_time_to_golden_gate)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time_to_golden_gate, \n                     \"time\": travel_end_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n\n    # Calculate wait time before meeting Carol\n    carol_available_time = carol_available_time\n    wait_end_time = carol_available_time\n    wait_duration = (wait_end_time - travel_end_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time with Carol\n    meeting_end_time = carol_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": meeting_duration, \n                     \"time\": carol_available_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back to Presidio\n    travel_time_back_to_presidio = travel_time_golden_gate_to_presidio\n    travel_end_time_back = meeting_end_time + timedelta(minutes=travel_time_back_to_presidio)\n    schedule.append({\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time_back_to_presidio, \n                     \"time\": travel_end_time_back.strftime(\"%I:%M%p\"), \"to\": \"Presidio\"})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    carol_available_time = datetime.strptime('9:45PM', '%I:%M%p')\n    meeting_duration = 45\n    travel_time_presidio_to_golden_gate = 12\n    travel_time_golden_gate_to_presidio = 11\n\n    schedule = calculate_schedule(arrival_time, carol_available_time, meeting_duration, \n                                   travel_time_presidio_to_golden_gate, travel_time_golden_gate_to_presidio)\n\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_83",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:05AM",
                    "duration": 5,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "11:35AM",
                    "duration": 5,
                    "to": "Alamo Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 5,
                    "time": "9:05AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": \"Haight-Ashbury\"})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": \"Alamo Square\"})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_available_time = datetime.strptime('11:00AM', '%I:%M%p')\n    meeting_duration = 30\n    travel_time_to_friend = 5\n    travel_time_back = 5\n\n    schedule = calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                                   travel_time_to_friend, travel_time_back)\n\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_84",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:04AM",
                    "duration": 4,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "1:15PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "1:35PM",
                    "duration": 5,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 4,
                    "time": "9:04AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_available_time = datetime.strptime('1:15PM', '%I:%M%p')\n    meeting_duration = 15\n    travel_time_to_friend = 4\n    travel_time_back = 5\n    start_location = \"North Beach\"\n    friend_location = \"Russian Hill\"\n\n    schedule = calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                                   travel_time_to_friend, travel_time_back, start_location, friend_location)\n\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_85",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "7:45PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "8:11PM",
                    "duration": 11,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_available_time = datetime.strptime('7:45PM', '%I:%M%p')\n    meeting_duration = 15\n    travel_time_to_friend = 12\n    travel_time_back = 11\n    start_location = \"Marina District\"\n    friend_location = \"Nob Hill\"\n\n    schedule = calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                                   travel_time_to_friend, travel_time_back, start_location, friend_location)\n\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_86",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "8:30AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:55AM",
                    "duration": 10,
                    "to": "Embarcadero"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 75,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_available_time = datetime.strptime('8:30AM', '%I:%M%p')\n    meeting_duration = 75\n    travel_time_to_friend = 11\n    travel_time_back = 10\n    start_location = \"Embarcadero\"\n    friend_location = \"Pacific Heights\"\n\n    schedule = calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                                   travel_time_to_friend, travel_time_back, start_location, friend_location)\n\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_87",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "8:45PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:10PM",
                    "duration": 10,
                    "to": "Sunset District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 15,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_available_time = datetime.strptime('8:45PM', '%I:%M%p')\n    meeting_duration = 15\n    travel_time_to_friend = 11\n    travel_time_back = 10\n    start_location = \"Sunset District\"\n    friend_location = \"Golden Gate Park\"\n\n    schedule = calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                                   travel_time_to_friend, travel_time_back, start_location, friend_location)\n\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_88",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "6:00PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "7:13PM",
                    "duration": 13,
                    "to": "Mission District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 60,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_available_time = datetime.strptime('6:00PM', '%I:%M%p')\n    meeting_duration = 60\n    travel_time_to_friend = 15\n    travel_time_back = 13\n    start_location = \"Mission District\"\n    friend_location = \"Bayview\"\n\n    schedule = calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                                   travel_time_to_friend, travel_time_back, start_location, friend_location)\n\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_89",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "8:15AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "8:47AM",
                    "duration": 17,
                    "to": "Alamo Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_available_time = datetime.strptime('8:15AM', '%I:%M%p')\n    meeting_duration = 15\n    travel_time_to_friend = 16\n    travel_time_back = 17\n    start_location = \"Alamo Square\"\n    friend_location = \"Chinatown\"\n\n    schedule = calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                                   travel_time_to_friend, travel_time_back, start_location, friend_location)\n\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_90",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:14AM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "7:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "8:28PM",
                    "duration": 13,
                    "to": "Russian Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime('9:00AM', '%I:%M%p')\n    friend_available_time = datetime.strptime('7:00PM', '%I:%M%p')\n    meeting_duration = 75\n    travel_time_to_friend = 14\n    travel_time_back = 13\n    start_location = \"Russian Hill\"\n    friend_location = \"Richmond District\"\n\n    schedule = calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                                   travel_time_to_friend, travel_time_back, start_location, friend_location)\n\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_91",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "2:45PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "3:05PM",
                    "duration": 20,
                    "to": "Financial District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 45,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, carol_start_time, carol_end_time, meeting_duration, travel_to_castro, travel_to_district):\n    schedule = []\n    \n    # Start at Financial District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Financial District\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to The Castro\n    travel_time_to_castro = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_castro)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_to_castro,\n        \"time\": travel_time_to_castro.strftime(\"%I:%M%p\"),\n        \"to\": \"The Castro\"\n    })\n    \n    # Calculate wait time before meeting Carol\n    wait_time = carol_start_time - travel_time_to_castro\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"The Castro\",\n            \"time\": (travel_time_to_castro + wait_time).strftime(\"%I:%M%p\")\n        })\n    \n    # Meet Carol\n    meet_time = carol_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"The Castro\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time back to Financial District\n    travel_time_to_district = meet_time + timedelta(minutes=travel_to_district)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_to_district,\n        \"time\": travel_time_to_district.strftime(\"%I:%M%p\"),\n        \"to\": \"Financial District\"\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    carol_start_time = datetime.strptime(\"2:00PM\", \"%I:%M%p\")\n    carol_end_time = datetime.strptime(\"5:45PM\", \"%I:%M%p\")\n    meeting_duration = 45\n    travel_to_castro = 23\n    travel_to_district = 20\n    \n    schedule = calculate_schedule(arrival_time, carol_start_time, carol_end_time, meeting_duration, travel_to_castro, travel_to_district)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_92",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:06AM",
                    "duration": 6,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "8:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 6,
                    "time": "9:06AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"North Beach\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Chinatown\"\n    })\n    \n    # Calculate wait time before meeting the friend\n    wait_time = friend_start_time - travel_time_to_friend\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": (travel_time_to_friend + wait_time).strftime(\"%I:%M%p\")\n        })\n    \n    # Meet the friend\n    meet_time = friend_start_time + timedelta(minutes=meeting_duration)\n    if meet_time > friend_end_time:\n        meet_time = friend_end_time\n        meeting_duration = (meet_time - friend_start_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_to_friend = 6\n    travel_to_start = 3\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_93",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Alamo Square\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n    \n    # Calculate wait time before meeting the friend\n    wait_time = friend_start_time - travel_time_to_friend\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": (travel_time_to_friend + wait_time).strftime(\"%I:%M%p\")\n        })\n    \n    # Meet the friend\n    meet_time = friend_start_time + timedelta(minutes=meeting_duration)\n    if meet_time > friend_end_time:\n        meet_time = friend_end_time\n        meeting_duration = (meet_time - friend_start_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"12:00PM\", \"%I:%M%p\")\n    meeting_duration = 15\n    travel_to_friend = 13\n    travel_to_start = 15\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_94",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "12:30PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"North Beach\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n    \n    # Calculate wait time before meeting the friend\n    wait_time = friend_start_time - travel_time_to_friend\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": (travel_time_to_friend + wait_time).strftime(\"%I:%M%p\")\n        })\n    \n    # Meet the friend\n    meet_time = friend_start_time + timedelta(minutes=meeting_duration)\n    if meet_time > friend_end_time:\n        meet_time = friend_end_time\n        meeting_duration = (meet_time - friend_start_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"12:45PM\", \"%I:%M%p\")\n    meeting_duration = 90\n    travel_to_friend = 22\n    travel_to_start = 21\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_95",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:27AM",
                    "duration": 27,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:57AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 27,
                    "time": "9:27AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 30,
                    "time": "9:27AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Sunset District\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Meet the friend\n    meet_time = travel_time_to_friend\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": (meet_time + timedelta(minutes=meeting_duration)).strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    meeting_duration = 30\n    travel_to_friend = 27\n    travel_to_start = 25\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_96",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "7:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Chinatown\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n    \n    # Calculate wait time before meeting the friend\n    wait_time = friend_start_time - travel_time_to_friend\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Richmond District\",\n            \"time\": (travel_time_to_friend + wait_time).strftime(\"%I:%M%p\")\n        })\n    \n    # Meet the friend\n    meet_time = friend_start_time + timedelta(minutes=meeting_duration)\n    if meet_time > friend_end_time:\n        meet_time = friend_end_time\n        meeting_duration = (meet_time - friend_start_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_to_friend = 20\n    travel_to_start = 20\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_97",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "9:30PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Alamo Square\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n    \n    # Calculate wait time before meeting the friend\n    wait_time = friend_start_time - travel_time_to_friend\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Richmond District\",\n            \"time\": (travel_time_to_friend + wait_time).strftime(\"%I:%M%p\")\n        })\n    \n    # Meet the friend\n    meet_time = friend_start_time + timedelta(minutes=meeting_duration)\n    if meet_time > friend_end_time:\n        meet_time = friend_end_time\n        meeting_duration = (meet_time - friend_start_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"8:45PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    meeting_duration = 45\n    travel_to_friend = 12\n    travel_to_start = 13\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_98",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "1:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Fisherman's Wharf\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Union Square\"\n    })\n    \n    # Calculate wait time before meeting the friend\n    wait_time = friend_start_time - travel_time_to_friend\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Union Square\",\n            \"time\": (travel_time_to_friend + wait_time).strftime(\"%I:%M%p\")\n        })\n    \n    # Meet the friend\n    meet_time = friend_start_time + timedelta(minutes=meeting_duration)\n    if meet_time > friend_end_time:\n        meet_time = friend_end_time\n        meeting_duration = (meet_time - friend_start_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    meeting_duration = 15\n    travel_to_friend = 13\n    travel_to_start = 15\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_99",
            "is_correct": false
        }
    ],
    "5shot": [
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 20,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:20AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "10:30AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "12:30PM",
                    "duration": 19,
                    "to": "Marina District"
                },
                {
                    "action": "end",
                    "location": "Marina District",
                    "time": "12:49PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 120,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Marina District\"\n    friend_location = \"Mission District\"\n    friend_availability = (datetime.strptime(\"10:30AM\", \"%I:%M%p\"), datetime.strptime(\"1:30PM\", \"%I:%M%p\"))\n    meeting_duration = 120\n    travel_duration_to_friend = 20\n    travel_duration_from_friend = 19\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_0",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "5:15PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "6:15PM",
                    "duration": 21,
                    "to": "Richmond District"
                },
                {
                    "action": "end",
                    "location": "Richmond District",
                    "time": "6:36PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 60,
                    "time": "5:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Richmond District\"\n    friend_location = \"Financial District\"\n    friend_availability = (datetime.strptime(\"5:15PM\", \"%I:%M%p\"), datetime.strptime(\"9:45PM\", \"%I:%M%p\"))\n    meeting_duration = 60\n    travel_duration_to_friend = 22\n    travel_duration_from_friend = 21\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_1",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 15,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "3:15PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "4:45PM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "end",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 90,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Haight-Ashbury\"\n    friend_location = \"Sunset District\"\n    friend_availability = (datetime.strptime(\"3:15PM\", \"%I:%M%p\"), datetime.strptime(\"8:15PM\", \"%I:%M%p\"))\n    meeting_duration = 90\n    travel_duration_to_friend = 15\n    travel_duration_from_friend = 15\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_2",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:22AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "10:52AM",
                    "duration": 23,
                    "to": "Bayview"
                },
                {
                    "action": "end",
                    "location": "Bayview",
                    "time": "11:15AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Bayview\"\n    friend_location = \"Golden Gate Park\"\n    friend_availability = (datetime.strptime(\"8:00AM\", \"%I:%M%p\"), datetime.strptime(\"11:30AM\", \"%I:%M%p\"))\n    meeting_duration = 90\n    travel_duration_to_friend = 22\n    travel_duration_from_friend = 23\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_3",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 10,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:10AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:15AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "10:15AM",
                    "duration": 10,
                    "to": "Presidio"
                },
                {
                    "action": "end",
                    "location": "Presidio",
                    "time": "10:25AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 60,
                    "time": "9:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Presidio\"\n    friend_location = \"Marina District\"\n    friend_availability = (datetime.strptime(\"9:15AM\", \"%I:%M%p\"), datetime.strptime(\"5:45PM\", \"%I:%M%p\"))\n    meeting_duration = 60\n    travel_duration_to_friend = 10\n    travel_duration_from_friend = 10\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_4",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "12:15PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "1:30PM",
                    "duration": 16,
                    "to": "Nob Hill"
                },
                {
                    "action": "end",
                    "location": "Nob Hill",
                    "time": "1:46PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 75,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Nob Hill\"\n    friend_location = \"The Castro\"\n    friend_availability = (datetime.strptime(\"12:15PM\", \"%I:%M%p\"), datetime.strptime(\"10:00PM\", \"%I:%M%p\"))\n    meeting_duration = 75\n    travel_duration_to_friend = 17\n    travel_duration_from_friend = 16\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_5",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "2:15PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "3:45PM",
                    "duration": 11,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "end",
                    "location": "Fisherman's Wharf",
                    "time": "3:56PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 90,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Fisherman's Wharf\"\n    friend_location = \"Nob Hill\"\n    friend_availability = (datetime.strptime(\"2:15PM\", \"%I:%M%p\"), datetime.strptime(\"7:45PM\", \"%I:%M%p\"))\n    meeting_duration = 90\n    travel_duration_to_friend = 11\n    travel_duration_from_friend = 11\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_6",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "3:15PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "4:30PM",
                    "duration": 18,
                    "to": "Richmond District"
                },
                {
                    "action": "end",
                    "location": "Richmond District",
                    "time": "4:48PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Richmond District\"\n    friend_location = \"North Beach\"\n    friend_availability = (datetime.strptime(\"3:15PM\", \"%I:%M%p\"), datetime.strptime(\"5:15PM\", \"%I:%M%p\"))\n    meeting_duration = 75\n    travel_duration_to_friend = 17\n    travel_duration_from_friend = 18\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_7",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:12AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:12AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "10:57AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "end",
                    "location": "Chinatown",
                    "time": "11:13AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 105,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Chinatown\"\n    friend_location = \"Marina District\"\n    friend_availability = (datetime.strptime(\"8:00AM\", \"%I:%M%p\"), datetime.strptime(\"3:00PM\", \"%I:%M%p\"))\n    meeting_duration = 105\n    travel_duration_to_friend = 12\n    travel_duration_from_friend = 16\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_8",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 9,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:09AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "12:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "1:15PM",
                    "duration": 7,
                    "to": "Union Square"
                },
                {
                    "action": "end",
                    "location": "Union Square",
                    "time": "1:22PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "12:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Union Square\"\n    friend_location = \"Nob Hill\"\n    friend_availability = (datetime.strptime(\"12:00PM\", \"%I:%M%p\"), datetime.strptime(\"4:15PM\", \"%I:%M%p\"))\n    meeting_duration = 75\n    travel_duration_to_friend = 9\n    travel_duration_from_friend = 7\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_9",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:15AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "10:30AM",
                    "duration": 18,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "end",
                    "location": "Golden Gate Park",
                    "time": "10:48AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 15,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Golden Gate Park\"\n    friend_location = \"Marina District\"\n    friend_availability = (datetime.strptime(\"10:15AM\", \"%I:%M%p\"), datetime.strptime(\"1:30PM\", \"%I:%M%p\"))\n    meeting_duration = 15\n    travel_duration_to_friend = 16\n    travel_duration_from_friend = 18\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_10",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 25,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:25AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "3:15PM",
                    "duration": 27,
                    "to": "Nob Hill"
                },
                {
                    "action": "end",
                    "location": "Nob Hill",
                    "time": "3:42PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Nob Hill\"\n    friend_location = \"Sunset District\"\n    friend_availability = (datetime.strptime(\"2:00PM\", \"%I:%M%p\"), datetime.strptime(\"8:30PM\", \"%I:%M%p\"))\n    meeting_duration = 75\n    travel_duration_to_friend = 25\n    travel_duration_from_friend = 27\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_11",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "6:00PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "7:30PM",
                    "duration": 15,
                    "to": "North Beach"
                },
                {
                    "action": "end",
                    "location": "North Beach",
                    "time": "7:45PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"North Beach\"\n    friend_location = \"Alamo Square\"\n    friend_availability = (datetime.strptime(\"6:00PM\", \"%I:%M%p\"), datetime.strptime(\"9:30PM\", \"%I:%M%p\"))\n    meeting_duration = 90\n    travel_duration_to_friend = 16\n    travel_duration_from_friend = 15\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_12",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:18AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "6:45PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "8:00PM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "end",
                    "location": "Presidio",
                    "time": "8:17PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "6:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Presidio\"\n    friend_location = \"North Beach\"\n    friend_availability = (datetime.strptime(\"6:45PM\", \"%I:%M%p\"), datetime.strptime(\"10:00PM\", \"%I:%M%p\"))\n    meeting_duration = 75\n    travel_duration_to_friend = 18\n    travel_duration_from_friend = 17\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_13",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "8:00PM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "10:00PM",
                    "duration": 12,
                    "to": "Nob Hill"
                },
                {
                    "action": "end",
                    "location": "Nob Hill",
                    "time": "10:12PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 120,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend):\n    schedule = []\n\n    # Add arrival to schedule\n    schedule.append({\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time to friend\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_duration_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": travel_end_time.strftime(\"%I:%M%p\")})\n\n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, friend_availability[0])\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    if meeting_end_time > friend_availability[1]:\n        return None\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meeting_start_time.strftime(\"%I:%M%p\")})\n\n    # Calculate travel time back\n    travel_back_start_time = meeting_end_time\n    travel_back_end_time = travel_back_start_time + timedelta(minutes=travel_duration_from_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration_from_friend, \"time\": travel_back_start_time.strftime(\"%I:%M%p\"), \"to\": arrival_location})\n    schedule.append({\"action\": \"end\", \"location\": arrival_location, \"time\": travel_back_end_time.strftime(\"%I:%M%p\")})\n\n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    arrival_location = \"Nob Hill\"\n    friend_location = \"Marina District\"\n    friend_availability = (datetime.strptime(\"8:00PM\", \"%I:%M%p\"), datetime.strptime(\"10:00PM\", \"%I:%M%p\"))\n    meeting_duration = 120\n    travel_duration_to_friend = 11\n    travel_duration_from_friend = 12\n\n    schedule = calculate_schedule(arrival_time, arrival_location, friend_location, friend_availability, meeting_duration, travel_duration_to_friend, travel_duration_from_friend)\n\n    if schedule:\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n    else:\n        print(\"SOLUTION: No valid schedule found.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_14",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 21,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "1:00PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "2:30PM",
                    "duration": 19,
                    "to": "Russian Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 21,
                    "time": "9:21AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    meeting_duration = 90\n    start_location_to_friend_location = 21\n    friend_location_to_start_location = 19\n    start_location = \"Russian Hill\"\n    friend_location = \"Golden Gate Park\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_15",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "3:15PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "5:00PM",
                    "duration": 9,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    meeting_duration = 105\n    start_location_to_friend_location = 7\n    friend_location_to_start_location = 9\n    start_location = \"Chinatown\"\n    friend_location = \"Russian Hill\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_16",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "1:30PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "1:45PM",
                    "duration": 17,
                    "to": "Alamo Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"2:30PM\", \"%I:%M%p\")\n    meeting_duration = 15\n    start_location_to_friend_location = 16\n    friend_location_to_start_location = 17\n    start_location = \"Alamo Square\"\n    friend_location = \"Sunset District\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_17",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:30PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:45PM",
                    "duration": 9,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "8:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    start_location_to_friend_location = 11\n    friend_location_to_start_location = 9\n    start_location = \"Marina District\"\n    friend_location = \"Richmond District\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_18",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:45PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "8:30PM",
                    "duration": 15,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"8:45PM\", \"%I:%M%p\")\n    meeting_duration = 45\n    start_location_to_friend_location = 16\n    friend_location_to_start_location = 15\n    start_location = \"Golden Gate Park\"\n    friend_location = \"Pacific Heights\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_19",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "12:45PM",
                    "duration": 6,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    start_location_to_friend_location = 8\n    friend_location_to_start_location = 6\n    start_location = \"Chinatown\"\n    friend_location = \"Nob Hill\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_20",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:42AM",
                    "duration": 11,
                    "to": "Mission District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"3:45PM\", \"%I:%M%p\")\n    meeting_duration = 30\n    start_location_to_friend_location = 12\n    friend_location_to_start_location = 11\n    start_location = \"Mission District\"\n    friend_location = \"Haight-Ashbury\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_21",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "11:15AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "1:00PM",
                    "duration": 24,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 105,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\n    meeting_duration = 105\n    start_location_to_friend_location = 22\n    friend_location_to_start_location = 24\n    start_location = \"Presidio\"\n    friend_location = \"Union Square\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_22",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "5:30PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "6:45PM",
                    "duration": 23,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 75,
                    "time": "5:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                       start_location_to_friend_location, friend_location_to_start_location, \n                       start_location, friend_location):\n    schedule = []\n    \n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend_location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=start_location_to_friend_location)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": start_location_to_friend_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Wait for friend\n    wait_end_time = max(travel_end_time, friend_start_time)\n    if wait_end_time > travel_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Meet friend\n    meet_end_time = wait_end_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting exceeds friend's end time\n    if meet_end_time > friend_end_time:\n        meet_end_time = friend_end_time\n        meeting_duration = (meet_end_time - wait_end_time).seconds // 60\n        schedule[-1][\"duration\"] = meeting_duration\n    \n    # Travel back to start_location\n    travel_start_time = meet_end_time\n    travel_end_time = travel_start_time + timedelta(minutes=friend_location_to_start_location)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": friend_location_to_start_location, \n                     \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": start_location})\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    start_location_to_friend_location = 23\n    friend_location_to_start_location = 23\n    start_location = \"Bayview\"\n    friend_location = \"Russian Hill\"\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, \n                                   start_location_to_friend_location, friend_location_to_start_location, \n                                   start_location, friend_location)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_23",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival):\n    schedule = []\n    current_time = arrival_time\n    current_location = arrival_location\n\n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend's location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n\n    # Wait for friend\n    wait_start_time = current_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": current_location,\n        \"time\": wait_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = wait_end_time\n\n    # Meet friend\n    meet_start_time = current_time\n    meet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), friend_end_time)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": (meet_end_time - meet_start_time).total_seconds() / 60,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = meet_end_time\n\n    # Travel back to arrival location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_arrival)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_arrival,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n    current_time = travel_end_time\n    current_location = arrival_location\n\n    return schedule\n\ndef main():\n    # Define input parameters\n    arrival_locations = [\"Marina District\", \"Chinatown\", \"Golden Gate Park\", \"Pacific Heights\", \"Presidio\", \"Nob Hill\"]\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_locations = [\"The Castro\", \"Haight-Ashbury\", \"North Beach\", \"Embarcadero\", \"Pacific Heights\", \"Presidio\"]\n    friend_start_times = [datetime.strptime(\"10:15AM\", \"%I:%M%p\"), datetime.strptime(\"6:00PM\", \"%I:%M%p\"), datetime.strptime(\"2:45PM\", \"%I:%M%p\"), datetime.strptime(\"8:15PM\", \"%I:%M%p\"), datetime.strptime(\"5:00PM\", \"%I:%M%p\"), datetime.strptime(\"11:00AM\", \"%I:%M%p\")]\n    friend_end_times = [datetime.strptime(\"9:30PM\", \"%I:%M%p\"), datetime.strptime(\"9:00PM\", \"%I:%M%p\"), datetime.strptime(\"8:45PM\", \"%I:%M%p\"), datetime.strptime(\"10:00PM\", \"%I:%M%p\"), datetime.strptime(\"10:00PM\", \"%I:%M%p\"), datetime.strptime(\"3:15PM\", \"%I:%M%p\")]\n    min_meeting_durations = [45, 75, 45, 75, 90, 30]\n    travel_times_to_friend = [22, 19, 24, 10, 11, 17]\n    travel_times_to_arrival = [21, 19, 22, 11, 11, 18]\n\n    for i in range(len(arrival_locations)):\n        schedule = calculate_schedule(arrival_locations[i], arrival_time, friend_locations[i], friend_start_times[i], friend_end_times[i], min_meeting_durations[i], travel_times_to_friend[i], travel_times_to_arrival[i])\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_24",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 105,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival):\n    schedule = []\n    current_time = arrival_time\n    current_location = arrival_location\n\n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend's location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n\n    # Wait for friend\n    wait_start_time = current_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": current_location,\n        \"time\": wait_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = wait_end_time\n\n    # Meet friend\n    meet_start_time = current_time\n    meet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), friend_end_time)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": (meet_end_time - meet_start_time).total_seconds() / 60,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = meet_end_time\n\n    # Travel back to arrival location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_arrival)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_arrival,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n    current_time = travel_end_time\n    current_location = arrival_location\n\n    return schedule\n\ndef main():\n    # Define input parameters\n    arrival_locations = [\"Marina District\", \"Union Square\", \"Nob Hill\", \"Sunset District\", \"Bayview\", \"Golden Gate Park\"]\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_locations = [\"Mission District\", \"Fisherman's Wharf\", \"Sunset District\", \"Embarcadero\", \"Russian Hill\", \"Chinatown\"]\n    friend_start_times = [datetime.strptime(\"5:45PM\", \"%I:%M%p\"), datetime.strptime(\"8:00AM\", \"%I:%M%p\"), datetime.strptime(\"8:15PM\", \"%I:%M%p\"), datetime.strptime(\"9:00PM\", \"%I:%M%p\"), datetime.strptime(\"10:15AM\", \"%I:%M%p\"), datetime.strptime(\"4:00PM\", \"%I:%M%p\")]\n    friend_end_times = [datetime.strptime(\"7:00PM\", \"%I:%M%p\"), datetime.strptime(\"6:45PM\", \"%I:%M%p\"), datetime.strptime(\"10:00PM\", \"%I:%M%p\"), datetime.strptime(\"10:00PM\", \"%I:%M%p\"), datetime.strptime(\"9:30PM\", \"%I:%M%p\"), datetime.strptime(\"9:45PM\", \"%I:%M%p\")]\n    min_meeting_durations = [75, 105, 90, 30, 90, 105]\n    travel_times_to_friend = [20, 15, 25, 31, 23, 23]\n    travel_times_to_arrival = [19, 13, 27, 30, 23, 23]\n\n    for i in range(len(arrival_locations)):\n        schedule = calculate_schedule(arrival_locations[i], arrival_time, friend_locations[i], friend_start_times[i], friend_end_times[i], min_meeting_durations[i], travel_times_to_friend[i], travel_times_to_arrival[i])\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_25",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 105,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival):\n    schedule = []\n    current_time = arrival_time\n    current_location = arrival_location\n\n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend's location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n\n    # Wait for friend\n    wait_start_time = current_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": current_location,\n        \"time\": wait_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = wait_end_time\n\n    # Meet friend\n    meet_start_time = current_time\n    meet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), friend_end_time)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": (meet_end_time - meet_start_time).total_seconds() / 60,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = meet_end_time\n\n    # Travel back to arrival location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_arrival)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_arrival,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n    current_time = travel_end_time\n    current_location = arrival_location\n\n    return schedule\n\ndef main():\n    # Define input parameters\n    arrival_locations = [\"Nob Hill\", \"Sunset District\", \"Mission District\", \"Russian Hill\", \"Richmond District\", \"Richmond District\"]\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_locations = [\"Bayview\", \"The Castro\", \"Financial District\", \"Financial District\", \"Bayview\", \"Presidio\"]\n    friend_start_times = [datetime.strptime(\"9:45AM\", \"%I:%M%p\"), datetime.strptime(\"10:45AM\", \"%I:%M%p\"), datetime.strptime(\"10:45AM\", \"%I:%M%p\"), datetime.strptime(\"7:30AM\", \"%I:%M%p\"), datetime.strptime(\"5:00PM\", \"%I:%M%p\"), datetime.strptime(\"1:15PM\", \"%I:%M%p\")]\n    friend_end_times = [datetime.strptime(\"10:30AM\", \"%I:%M%p\"), datetime.strptime(\"3:30PM\", \"%I:%M%p\"), datetime.strptime(\"5:30PM\", \"%I:%M%p\"), datetime.strptime(\"9:15PM\", \"%I:%M%p\"), datetime.strptime(\"8:45PM\", \"%I:%M%p\"), datetime.strptime(\"3:15PM\", \"%I:%M%p\")]\n    min_meeting_durations = [15, 105, 45, 15, 15, 105]\n    travel_times_to_friend = [19, 17, 17, 11, 26, 7]\n    travel_times_to_arrival = [20, 17, 17, 10, 25, 7]\n\n    for i in range(len(arrival_locations)):\n        schedule = calculate_schedule(arrival_locations[i], arrival_time, friend_locations[i], friend_start_times[i], friend_end_times[i], min_meeting_durations[i], travel_times_to_friend[i], travel_times_to_arrival[i])\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_26",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 15,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival):\n    schedule = []\n    current_time = arrival_time\n    current_location = arrival_location\n\n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend's location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n\n    # Wait for friend\n    wait_start_time = current_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": current_location,\n        \"time\": wait_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = wait_end_time\n\n    # Meet friend\n    meet_start_time = current_time\n    meet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), friend_end_time)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": (meet_end_time - meet_start_time).total_seconds() / 60,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = meet_end_time\n\n    # Travel back to arrival location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_arrival)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_arrival,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n    current_time = travel_end_time\n    current_location = arrival_location\n\n    return schedule\n\ndef main():\n    # Define input parameters\n    arrival_locations = [\"Embarcadero\", \"Richmond District\", \"Embarcadero\", \"Fisherman's Wharf\", \"Haight-Ashbury\", \"Marina District\"]\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_locations = [\"Union Square\", \"Presidio\", \"Chinatown\", \"Golden Gate Park\", \"Presidio\", \"Pacific Heights\"]\n    friend_start_times = [datetime.strptime(\"8:00AM\", \"%I:%M%p\"), datetime.strptime(\"9:15AM\", \"%I:%M%p\"), datetime.strptime(\"4:45PM\", \"%I:%M%p\"), datetime.strptime(\"8:45PM\", \"%I:%M%p\"), datetime.strptime(\"6:15PM\", \"%I:%M%p\"), datetime.strptime(\"7:00PM\", \"%I:%M%p\")]\n    friend_end_times = [datetime.strptime(\"1:00PM\", \"%I:%M%p\"), datetime.strptime(\"2:30PM\", \"%I:%M%p\"), datetime.strptime(\"8:30PM\", \"%I:%M%p\"), datetime.strptime(\"9:30PM\", \"%I:%M%p\"), datetime.strptime(\"7:30PM\", \"%I:%M%p\"), datetime.strptime(\"7:45PM\", \"%I:%M%p\")]\n    min_meeting_durations = [60, 90, 30, 15, 60, 15]\n    travel_times_to_friend = [10, 7, 7, 25, 15, 7]\n    travel_times_to_arrival = [11, 7, 5, 24, 15, 6]\n\n    for i in range(len(arrival_locations)):\n        schedule = calculate_schedule(arrival_locations[i], arrival_time, friend_locations[i], friend_start_times[i], friend_end_times[i], min_meeting_durations[i], travel_times_to_friend[i], travel_times_to_arrival[i])\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_27",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival):\n    schedule = []\n    current_time = arrival_time\n    current_location = arrival_location\n\n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend's location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n\n    # Wait for friend\n    wait_start_time = current_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": current_location,\n        \"time\": wait_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = wait_end_time\n\n    # Meet friend\n    meet_start_time = current_time\n    meet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), friend_end_time)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": (meet_end_time - meet_start_time).total_seconds() / 60,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = meet_end_time\n\n    # Travel back to arrival location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_arrival)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_arrival,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n    current_time = travel_end_time\n    current_location = arrival_location\n\n    return schedule\n\ndef main():\n    # Define input parameters\n    arrival_locations = [\"North Beach\", \"Golden Gate Park\", \"Haight-Ashbury\", \"North Beach\", \"Financial District\", \"Union Square\"]\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_locations = [\"Haight-Ashbury\", \"Alamo Square\", \"Nob Hill\", \"Alamo Square\", \"Golden Gate Park\", \"Chinatown\"]\n    friend_start_times = [datetime.strptime(\"10:15AM\", \"%I:%M%p\"), datetime.strptime(\"9:45AM\", \"%I:%M%p\"), datetime.strptime(\"1:15PM\", \"%I:%M%p\"), datetime.strptime(\"9:30AM\", \"%I:%M%p\"), datetime.strptime(\"7:30AM\", \"%I:%M%p\"), datetime.strptime(\"6:00PM\", \"%I:%M%p\")]\n    friend_end_times = [datetime.strptime(\"9:00PM\", \"%I:%M%p\"), datetime.strptime(\"1:15PM\", \"%I:%M%p\"), datetime.strptime(\"2:30PM\", \"%I:%M%p\"), datetime.strptime(\"8:00PM\", \"%I:%M%p\"), datetime.strptime(\"6:30PM\", \"%I:%M%p\"), datetime.strptime(\"9:30PM\", \"%I:%M%p\")]\n    min_meeting_durations = [45, 60, 15, 45, 60, 75]\n    travel_times_to_friend = [18, 10, 15, 16, 23, 7]\n    travel_times_to_arrival = [19, 9, 13, 15, 26, 7]\n\n    for i in range(len(arrival_locations)):\n        schedule = calculate_schedule(arrival_locations[i], arrival_time, friend_locations[i], friend_start_times[i], friend_end_times[i], min_meeting_durations[i], travel_times_to_friend[i], travel_times_to_arrival[i])\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_28",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_location, arrival_time, friend_location, friend_start_time, friend_end_time, min_meeting_duration, travel_time_to_friend, travel_time_to_arrival):\n    schedule = []\n    current_time = arrival_time\n    current_location = arrival_location\n\n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n\n    # Travel to friend's location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n\n    # Wait for friend\n    wait_start_time = current_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": current_location,\n        \"time\": wait_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = wait_end_time\n\n    # Meet friend\n    meet_start_time = current_time\n    meet_end_time = min(meet_start_time + timedelta(minutes=min_meeting_duration), friend_end_time)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": (meet_end_time - meet_start_time).total_seconds() / 60,\n        \"time\": meet_start_time.strftime(\"%I:%M%p\")\n    })\n    current_time = meet_end_time\n\n    # Travel back to arrival location\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_arrival)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_to_arrival,\n        \"time\": travel_start_time.strftime(\"%I:%M%p\"),\n        \"to\": arrival_location\n    })\n    current_time = travel_end_time\n    current_location = arrival_location\n\n    return schedule\n\ndef main():\n    # Define input parameters\n    arrival_locations = [\"Richmond District\", \"Alamo Square\", \"Russian Hill\", \"The Castro\", \"Alamo Square\", \"Sunset District\"]\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_locations = [\"Chinatown\", \"Mission District\", \"Chinatown\", \"Financial District\", \"Pacific Heights\", \"Haight-Ashbury\"]\n    friend_start_times = [datetime.strptime(\"8:30AM\", \"%I:%M%p\"), datetime.strptime(\"8:45PM\", \"%I:%M%p\"), datetime.strptime(\"8:15PM\", \"%I:%M%p\"), datetime.strptime(\"5:15PM\", \"%I:%M%p\"), datetime.strptime(\"8:45PM\", \"%I:%M%p\"), datetime.strptime(\"7:30PM\", \"%I:%M%p\")]\n    friend_end_times = [datetime.strptime(\"4:00PM\", \"%I:%M%p\"), datetime.strptime(\"9:30PM\", \"%I:%M%p\"), datetime.strptime(\"10:00PM\", \"%I:%M%p\"), datetime.strptime(\"9:00PM\", \"%I:%M%p\"), datetime.strptime(\"10:00PM\", \"%I:%M%p\"), datetime.strptime(\"9:45PM\", \"%I:%M%p\")]\n    min_meeting_durations = [75, 30, 90, 105, 60, 75]\n    travel_times_to_friend = [20, 10, 9, 20, 10, 15]\n    travel_times_to_arrival = [20, 11, 7, 23, 10, 15]\n\n    for i in range(len(arrival_locations)):\n        schedule = calculate_schedule(arrival_locations[i], arrival_time, friend_locations[i], friend_start_times[i], friend_end_times[i], min_meeting_durations[i], travel_times_to_friend[i], travel_times_to_arrival[i])\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_29",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:17AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 120,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Richmond District\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"North Beach\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"North Beach\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"North Beach\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"4:15PM\", \"%I:%M%p\")\nmeeting_duration = 120\ntravel_time_to_friend = 17\ntravel_time_from_friend = 18\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_30",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:11AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Alamo Square\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Alamo Square\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\nmeeting_duration = 15\ntravel_time_to_friend = 11\ntravel_time_from_friend = 11\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_31",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:11AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"The Castro\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Golden Gate Park\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"7:00AM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\nmeeting_duration = 105\ntravel_time_to_friend = 11\ntravel_time_from_friend = 13\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_32",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 30,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30AM"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "12:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 30,
                    "time": "9:30AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Sunset District\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Union Square\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Union Square\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Union Square\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"12:30PM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\nmeeting_duration = 15\ntravel_time_to_friend = 30\ntravel_time_from_friend = 26\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_33",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:23AM"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "12:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 105,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Pacific Heights\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\nmeeting_duration = 105\ntravel_time_to_friend = 23\ntravel_time_from_friend = 22\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_34",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:18AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 90,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Chinatown\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Chinatown\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"8:30AM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"12:30PM\", \"%I:%M%p\")\nmeeting_duration = 90\ntravel_time_to_friend = 18\ntravel_time_from_friend = 22\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_35",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:14AM"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "1:30PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 60,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Marina District\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Embarcadero\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Embarcadero\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"8:45PM\", \"%I:%M%p\")\nmeeting_duration = 60\ntravel_time_to_friend = 14\ntravel_time_from_friend = 12\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_36",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:19AM"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "12:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 90,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Bayview\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Financial District\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Financial District\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Financial District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Financial District\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"2:00PM\", \"%I:%M%p\")\nmeeting_duration = 90\ntravel_time_to_friend = 19\ntravel_time_from_friend = 19\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_37",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 10,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:10AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Union Square\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"North Beach\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"North Beach\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"North Beach\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"10:30PM\", \"%I:%M%p\")\nmeeting_duration = 45\ntravel_time_to_friend = 10\ntravel_time_from_friend = 7\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_38",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:11AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:45PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 120,
                    "time": "4:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"Fisherman's Wharf\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Nob Hill\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"4:45PM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\nmeeting_duration = 120\ntravel_time_to_friend = 11\ntravel_time_from_friend = 11\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_39",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:17AM"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"The Castro\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Sunset District\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\nmeeting_duration = 75\ntravel_time_to_friend = 17\ntravel_time_from_friend = 17\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_40",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:18AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 45,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend):\n    schedule = []\n    \n    # Start at the initial location\n    schedule.append({\"action\": \"start\", \"location\": \"North Beach\", \"time\": arrival_time.strftime(\"%I:%M%p\")})\n    \n    # Travel to friend's location\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_time_to_friend, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": \"Haight-Ashbury\"})\n    \n    # Wait for friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Check if meeting duration can be fulfilled\n    if wait_end_time + timedelta(minutes=meeting_duration) <= friend_end_time:\n        meet_start_time = wait_end_time\n        meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n        schedule.append({\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    else:\n        print(\"Cannot fulfill meeting duration\")\n        return None\n    \n    return schedule\n\narrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\nfriend_start_time = datetime.strptime(\"7:30AM\", \"%I:%M%p\")\nfriend_end_time = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\nmeeting_duration = 45\ntravel_time_to_friend = 18\ntravel_time_from_friend = 19\n\nschedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_time_to_friend, travel_time_from_friend)\n\nif schedule is not None:\n    print(\"SOLUTION:\")\n    print(json.dumps({\"schedule\": schedule}, indent=4))\n```",
            "count": "meeting_planning_example_41",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:17AM"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:00PM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Nob Hill\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 17\n    travel_duration_from_meeting = 18\n    meeting_duration = 30\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_42",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Marina District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Chinatown\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"11:45AM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 16\n    travel_duration_from_meeting = 12\n    meeting_duration = 15\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_43",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 105,
                    "time": "9:13AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Pacific Heights\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Fisherman's Wharf\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Fisherman's Wharf\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Fisherman's Wharf\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"8:45AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 13\n    travel_duration_from_meeting = 12\n    meeting_duration = 105\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_44",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:16AM"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"North Beach\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 16\n    travel_duration_from_meeting = 15\n    meeting_duration = 15\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_45",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:19AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "4:30PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 90,
                    "time": "4:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Haight-Ashbury\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"North Beach\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"4:30PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 19\n    travel_duration_from_meeting = 18\n    meeting_duration = 90\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_46",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:17AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Richmond District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 17\n    travel_duration_from_meeting = 14\n    meeting_duration = 15\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_47",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 9,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:09AM"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "9:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Financial District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Union Square\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Union Square\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Union Square\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 9\n    travel_duration_from_meeting = 9\n    meeting_duration = 15\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_48",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 26,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:26AM"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "2:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Richmond District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 26\n    travel_duration_from_meeting = 25\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_49",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:07AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"North Beach\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 7\n    travel_duration_from_meeting = 8\n    meeting_duration = 75\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_50",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "9:22AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 15,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"The Castro\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Embarcadero\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Embarcadero\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Embarcadero\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 22\n    travel_duration_from_meeting = 25\n    meeting_duration = 15\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_51",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:14AM"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Russian Hill\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Richmond District\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Richmond District\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 14\n    travel_duration_from_meeting = 13\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_52",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:13AM"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "10:15AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 120,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Richmond District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Alamo Square\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 13\n    travel_duration_from_meeting = 12\n    meeting_duration = 120\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_53",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:17AM"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Financial District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Mission District\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Mission District\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Mission District\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 17\n    travel_duration_from_meeting = 17\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_54",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:08AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Financial District\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Financial District\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 8\n    travel_duration_from_meeting = 9\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_55",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:08AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:15AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Chinatown\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 8\n    travel_duration_from_meeting = 6\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_56",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:23AM"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "10:30AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Bayview\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Sunset District\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Sunset District\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Sunset District\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"10:30AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"5:45PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 23\n    travel_duration_from_meeting = 22\n    meeting_duration = 60\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_57",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:00AM",
                    "duration": 20,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "9:20AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 30,
                    "time": "9:20AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"The Castro\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"The Castro\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Financial District\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Financial District\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Financial District\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"9:15AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"4:45PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 20\n    travel_duration_from_meeting = 23\n    meeting_duration = 30\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_58",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 105,
                    "time": "9:19AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Bayview\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Haight-Ashbury\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Haight-Ashbury\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Haight-Ashbury\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"7:00AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"3:45PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 19\n    travel_duration_from_meeting = 18\n    meeting_duration = 105\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_59",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:07AM"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:30PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 45,
                    "time": "6:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Union Square\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Chinatown\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"6:30PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 7\n    travel_duration_from_meeting = 7\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_60",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:11AM"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "7:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 90,
                    "time": "7:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Presidio\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 11\n    travel_duration_from_meeting = 12\n    meeting_duration = 90\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_61",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:14AM"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Presidio\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"9:15PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 14\n    travel_duration_from_meeting = 14\n    meeting_duration = 15\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_62",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 31,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "9:31AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 31,
                    "time": "9:31AM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "9:31AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Presidio\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"7:15AM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 31\n    travel_duration_from_meeting = 31\n    meeting_duration = 30\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_63",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:08AM"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "3:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "3:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration):\n    schedule = []\n    current_time = arrival_time\n    \n    # Add start action to schedule\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Nob Hill\",\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Check if meeting is possible\n    if current_time + timedelta(minutes=travel_duration_to_meeting) > meeting_end:\n        return schedule\n    \n    # Travel to meeting location\n    travel_end_time = current_time + timedelta(minutes=travel_duration_to_meeting)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_duration_to_meeting,\n        \"time\": current_time.strftime(\"%I:%M%p\"),\n        \"to\": \"Pacific Heights\"\n    })\n    \n    # Update current time\n    current_time = travel_end_time\n    \n    # Wait until meeting start time\n    wait_end_time = max(current_time, meeting_start)\n    wait_duration = (wait_end_time - current_time).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": current_time.strftime(\"%I:%M%p\")\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": wait_end_time.strftime(\"%I:%M%p\")\n        })\n    \n    # Update current time\n    current_time = wait_end_time\n    \n    # Check if meeting duration can be fulfilled\n    if current_time + timedelta(minutes=meeting_duration) > meeting_end:\n        meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    # Meet\n    meet_end_time = current_time + timedelta(minutes=meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": meeting_duration,\n        \"time\": current_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    meeting_start = datetime.strptime(\"3:45PM\", \"%I:%M%p\")\n    meeting_end = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    travel_duration_to_meeting = 8\n    travel_duration_from_meeting = 8\n    meeting_duration = 45\n    \n    schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_duration_to_meeting, travel_duration_from_meeting, meeting_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_64",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 45,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    scenarios = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('2:45PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('7:45PM', '%I:%M%p'),\n            \"travel_duration\": 10,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Alamo Square\",\n            \"friend_location\": \"Pacific Heights\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('8:45AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('2:30PM', '%I:%M%p'),\n            \"travel_duration\": 7,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Richmond District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('11:00AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('1:45PM', '%I:%M%p'),\n            \"travel_duration\": 9,\n            \"meeting_duration\": 15,\n            \"start_location\": \"Nob Hill\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('9:30AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('3:45PM', '%I:%M%p'),\n            \"travel_duration\": 15,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Sunset District\",\n            \"friend_location\": \"Haight-Ashbury\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('9:15PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('10:15PM', '%I:%M%p'),\n            \"travel_duration\": 23,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Bayview\",\n            \"friend_location\": \"Russian Hill\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('7:00PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('9:00PM', '%I:%M%p'),\n            \"travel_duration\": 25,\n            \"meeting_duration\": 45,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Embarcadero\"\n        }\n    ]\n\n    for i, scenario in enumerate(scenarios):\n        schedule = calculate_schedule(**scenario)\n        output = {\"schedule\": schedule}\n        print(f\"Scenario {i+1}:\")\n        print(json.dumps(output, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_65",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 120,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    scenarios = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('7:45PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('9:15PM', '%I:%M%p'),\n            \"travel_duration\": 10,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Chinatown\",\n            \"friend_location\": \"Pacific Heights\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('9:45AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('8:00PM', '%I:%M%p'),\n            \"travel_duration\": 20,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Union Square\",\n            \"friend_location\": \"Richmond District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('6:15PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('9:15PM', '%I:%M%p'),\n            \"travel_duration\": 19,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Haight-Ashbury\",\n            \"friend_location\": \"Chinatown\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('8:45PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('9:30PM', '%I:%M%p'),\n            \"travel_duration\": 10,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Sunset District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('6:45PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('10:00PM', '%I:%M%p'),\n            \"travel_duration\": 16,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Russian Hill\",\n            \"friend_location\": \"Mission District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('11:15AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('5:45PM', '%I:%M%p'),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Nob Hill\",\n            \"friend_location\": \"Presidio\"\n        }\n    ]\n\n    for i, scenario in enumerate(scenarios):\n        schedule = calculate_schedule(**scenario)\n        output = {\"schedule\": schedule}\n        print(f\"Scenario {i+1}:\")\n        print(json.dumps(output, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_66",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 105,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    scenarios = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('2:45PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('6:30PM', '%I:%M%p'),\n            \"travel_duration\": 3,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Chinatown\",\n            \"friend_location\": \"North Beach\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('5:00PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('7:30PM', '%I:%M%p'),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Alamo Square\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('9:45PM', '%I:%M%p'),\n            \"travel_duration\": 13,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Pacific Heights\",\n            \"friend_location\": \"Fisherman's Wharf\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('1:00PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('8:15PM', '%I:%M%p'),\n            \"travel_duration\": 6,\n            \"meeting_duration\": 60,\n            \"start_location\": \"North Beach\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('3:00PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('10:00PM', '%I:%M%p'),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Sunset District\",\n            \"friend_location\": \"The Castro\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('8:00PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('10:00PM', '%I:%M%p'),\n            \"travel_duration\": 26,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Financial District\"\n        }\n    ]\n\n    for i, scenario in enumerate(scenarios):\n        schedule = calculate_schedule(**scenario)\n        output = {\"schedule\": schedule}\n        print(f\"Scenario {i+1}:\")\n        print(json.dumps(output, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_67",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 30,
                    "time": "9:17AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    scenarios = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('1:45PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('4:45PM', '%I:%M%p'),\n            \"travel_duration\": 10,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Sunset District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('11:00AM', '%I:%M%p'),\n            \"travel_duration\": 12,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Presidio\",\n            \"friend_location\": \"Golden Gate Park\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('7:00AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('9:00PM', '%I:%M%p'),\n            \"travel_duration\": 19,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Richmond District\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('7:45AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('3:45PM', '%I:%M%p'),\n            \"travel_duration\": 16,\n            \"meeting_duration\": 60,\n            \"start_location\": \"The Castro\",\n            \"friend_location\": \"Nob Hill\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('6:00PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('9:00PM', '%I:%M%p'),\n            \"travel_duration\": 9,\n            \"meeting_duration\": 45,\n            \"start_location\": \"Richmond District\",\n            \"friend_location\": \"Marina District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('7:45AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('2:15PM', '%I:%M%p'),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Haight-Ashbury\",\n            \"friend_location\": \"Russian Hill\"\n        }\n    ]\n\n    for i, scenario in enumerate(scenarios):\n        schedule = calculate_schedule(**scenario)\n        output = {\"schedule\": schedule}\n        print(f\"Scenario {i+1}:\")\n        print(json.dumps(output, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_68",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 90,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    scenarios = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('4:30PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('7:30PM', '%I:%M%p'),\n            \"travel_duration\": 6,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Fisherman's Wharf\",\n            \"friend_location\": \"North Beach\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('4:45PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('9:45PM', '%I:%M%p'),\n            \"travel_duration\": 13,\n            \"meeting_duration\": 105,\n            \"start_location\": \"Richmond District\",\n            \"friend_location\": \"Alamo Square\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('9:45AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('6:00PM', '%I:%M%p'),\n            \"travel_duration\": 16,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Sunset District\",\n            \"friend_location\": \"Presidio\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('10:15AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('3:45PM', '%I:%M%p'),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 45,\n            \"start_location\": \"Chinatown\",\n            \"friend_location\": \"Alamo Square\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('8:45AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('7:00PM', '%I:%M%p'),\n            \"travel_duration\": 25,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Nob Hill\",\n            \"friend_location\": \"Sunset District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('8:00AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('12:45PM', '%I:%M%p'),\n            \"travel_duration\": 7,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Chinatown\",\n            \"friend_location\": \"Union Square\"\n        }\n    ]\n\n    for i, scenario in enumerate(scenarios):\n        schedule = calculate_schedule(**scenario)\n        output = {\"schedule\": schedule}\n        print(f\"Scenario {i+1}:\")\n        print(json.dumps(output, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_69",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 24,
                    "time": "9:24AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 30,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    scenarios = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('2:15PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('6:45PM', '%I:%M%p'),\n            \"travel_duration\": 8,\n            \"meeting_duration\": 120,\n            \"start_location\": \"North Beach\",\n            \"friend_location\": \"Pacific Heights\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('6:45PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('9:15PM', '%I:%M%p'),\n            \"travel_duration\": 18,\n            \"meeting_duration\": 60,\n            \"start_location\": \"North Beach\",\n            \"friend_location\": \"Haight-Ashbury\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('3:30PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('10:00PM', '%I:%M%p'),\n            \"travel_duration\": 15,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Financial District\",\n            \"friend_location\": \"Marina District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('8:00PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('10:00PM', '%I:%M%p'),\n            \"travel_duration\": 18,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Union Square\",\n            \"friend_location\": \"Marina District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('2:15PM', '%I:%M%p'),\n            \"travel_duration\": 8,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Fisherman's Wharf\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('9:30AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('6:30PM', '%I:%M%p'),\n            \"travel_duration\": 24,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"North Beach\"\n        }\n    ]\n\n    for i, scenario in enumerate(scenarios):\n        schedule = calculate_schedule(**scenario)\n        output = {\"schedule\": schedule}\n        print(f\"Scenario {i+1}:\")\n        print(json.dumps(output, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_70",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    scenarios = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('11:15AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('2:30PM', '%I:%M%p'),\n            \"travel_duration\": 15,\n            \"meeting_duration\": 15,\n            \"start_location\": \"Presidio\",\n            \"friend_location\": \"Sunset District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('4:15PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('8:30PM', '%I:%M%p'),\n            \"travel_duration\": 7,\n            \"meeting_duration\": 15,\n            \"start_location\": \"Union Square\",\n            \"friend_location\": \"Chinatown\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('7:15PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('9:45PM', '%I:%M%p'),\n            \"travel_duration\": 24,\n            \"meeting_duration\": 120,\n            \"start_location\": \"Mission District\",\n            \"friend_location\": \"Sunset District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('1:15PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('3:45PM', '%I:%M%p'),\n            \"travel_duration\": 24,\n            \"meeting_duration\": 15,\n            \"start_location\": \"The Castro\",\n            \"friend_location\": \"Fisherman's Wharf\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('9:00PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('9:30PM', '%I:%M%p'),\n            \"travel_duration\": 18,\n            \"meeting_duration\": 30,\n            \"start_location\": \"Presidio\",\n            \"friend_location\": \"Alamo Square\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('11:00AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('4:30PM', '%I:%M%p'),\n            \"travel_duration\": 18,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Haight-Ashbury\",\n            \"friend_location\": \"Bayview\"\n        }\n    ]\n\n    for i, scenario in enumerate(scenarios):\n        schedule = calculate_schedule(**scenario)\n        output = {\"schedule\": schedule}\n        print(f\"Scenario {i+1}:\")\n        print(json.dumps(output, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_71",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "9:45AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, travel_duration, meeting_duration, start_location, friend_location):\n    schedule = []\n    \n    # Calculate start time\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate travel time to friend's location\n    travel_start_time = start_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_duration)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_duration, \"time\": travel_start_time.strftime(\"%I:%M%p\"), \"to\": friend_location})\n    \n    # Calculate wait time before meeting friend\n    wait_start_time = travel_end_time\n    wait_end_time = max(wait_start_time, friend_start_time)\n    if wait_start_time < wait_end_time:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_start_time.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n    \n    # Calculate meeting time with friend\n    meet_start_time = wait_end_time\n    meet_end_time = meet_start_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \"time\": meet_start_time.strftime(\"%I:%M%p\")})\n    \n    return schedule\n\ndef main():\n    scenarios = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('11:15AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('6:00PM', '%I:%M%p'),\n            \"travel_duration\": 22,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Chinatown\",\n            \"friend_location\": \"The Castro\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('6:15PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('8:15PM', '%I:%M%p'),\n            \"travel_duration\": 15,\n            \"meeting_duration\": 15,\n            \"start_location\": \"Financial District\",\n            \"friend_location\": \"Marina District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('8:30AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('9:15PM', '%I:%M%p'),\n            \"travel_duration\": 17,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Mission District\",\n            \"friend_location\": \"Golden Gate Park\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('12:30PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('5:15PM', '%I:%M%p'),\n            \"travel_duration\": 11,\n            \"meeting_duration\": 75,\n            \"start_location\": \"Mission District\",\n            \"friend_location\": \"Alamo Square\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('12:45PM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('4:30PM', '%I:%M%p'),\n            \"travel_duration\": 8,\n            \"meeting_duration\": 60,\n            \"start_location\": \"Russian Hill\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_start_time\": datetime.strptime('9:45AM', '%I:%M%p'),\n            \"friend_end_time\": datetime.strptime('2:30PM', '%I:%M%p'),\n            \"travel_duration\": 10,\n            \"meeting_duration\": 90,\n            \"start_location\": \"Pacific Heights\",\n            \"friend_location\": \"Alamo Square\"\n        }\n    ]\n\n    for i, scenario in enumerate(scenarios):\n        schedule = calculate_schedule(**scenario)\n        output = {\"schedule\": schedule}\n        print(f\"Scenario {i+1}:\")\n        print(json.dumps(output, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_72",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 60,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = meet_start + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": meeting_duration, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    # Define meeting constraints\n    constraints = [\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"4:15PM\", \"meeting_end\": \"9:45PM\", \"travel_time\": 10, \"meeting_duration\": 120, \"start_location\": \"Union Square\", \"destination\": \"North Beach\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"3:15PM\", \"meeting_end\": \"8:30PM\", \"travel_time\": 11, \"meeting_duration\": 105, \"start_location\": \"Pacific Heights\", \"destination\": \"Chinatown\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"7:00PM\", \"meeting_end\": \"9:30PM\", \"travel_time\": 18, \"meeting_duration\": 105, \"start_location\": \"North Beach\", \"destination\": \"Mission District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"3:45PM\", \"meeting_end\": \"7:00PM\", \"travel_time\": 14, \"meeting_duration\": 120, \"start_location\": \"Russian Hill\", \"destination\": \"Richmond District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"7:00PM\", \"meeting_end\": \"9:45PM\", \"travel_time\": 13, \"meeting_duration\": 60, \"start_location\": \"Fisherman's Wharf\", \"destination\": \"Union Square\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"7:15AM\", \"meeting_end\": \"10:00PM\", \"travel_time\": 7, \"meeting_duration\": 60, \"start_location\": \"Russian Hill\", \"destination\": \"Pacific Heights\"}\n    ]\n\n    for constraint in constraints:\n        arrival_time = datetime.strptime(constraint[\"arrival_time\"], \"%I:%M%p\")\n        meeting_start = datetime.strptime(constraint[\"meeting_start\"], \"%I:%M%p\")\n        meeting_end = datetime.strptime(constraint[\"meeting_end\"], \"%I:%M%p\")\n        travel_time = constraint[\"travel_time\"]\n        meeting_duration = constraint[\"meeting_duration\"]\n        start_location = constraint[\"start_location\"]\n        destination = constraint[\"destination\"]\n\n        schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n        print(f\"SOLUTION: You start at {start_location} at {arrival_time.strftime('%I:%M%p')}.\")\n        for action in schedule[\"schedule\"]:\n            if action[\"action\"] == \"travel\":\n                print(f\"You travel to {action['to']} in {action['duration']} minutes and arrive at {action['time']}.\")\n            elif action[\"action\"] == \"wait\":\n                print(f\"You wait until {action['time']}.\")\n            elif action[\"action\"] == \"meet\":\n                print(f\"You meet at {action['location']} for {action['duration']} minutes from {action['time']} to {(datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p')}.\")\n\n        import json\n        print(json.dumps(schedule, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_73",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    # Define meeting constraints\n    constraints = [\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"7:30PM\", \"meeting_end\": \"8:30PM\", \"travel_time\": 29, \"meeting_duration\": 30, \"start_location\": \"Sunset District\", \"destination\": \"North Beach\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"7:45PM\", \"meeting_end\": \"10:00PM\", \"travel_time\": 5, \"meeting_duration\": 120, \"start_location\": \"Nob Hill\", \"destination\": \"Russian Hill\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"3:00PM\", \"meeting_end\": \"9:45PM\", \"travel_time\": 13, \"meeting_duration\": 75, \"start_location\": \"Golden Gate Park\", \"destination\": \"The Castro\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"2:15PM\", \"meeting_end\": \"8:00PM\", \"travel_time\": 29, \"meeting_duration\": 60, \"start_location\": \"Sunset District\", \"destination\": \"Fisherman's Wharf\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"5:45PM\", \"meeting_end\": \"7:00PM\", \"travel_time\": 17, \"meeting_duration\": 75, \"start_location\": \"Alamo Square\", \"destination\": \"Financial District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"4:00PM\", \"meeting_end\": \"6:15PM\", \"travel_time\": 17, \"meeting_duration\": 45, \"start_location\": \"Richmond District\", \"destination\": \"Nob Hill\"}\n    ]\n\n    for constraint in constraints:\n        arrival_time = datetime.strptime(constraint[\"arrival_time\"], \"%I:%M%p\")\n        meeting_start = datetime.strptime(constraint[\"meeting_start\"], \"%I:%M%p\")\n        meeting_end = datetime.strptime(constraint[\"meeting_end\"], \"%I:%M%p\")\n        travel_time = constraint[\"travel_time\"]\n        meeting_duration = constraint[\"meeting_duration\"]\n        start_location = constraint[\"start_location\"]\n        destination = constraint[\"destination\"]\n\n        schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n        print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n        for action in schedule[\"schedule\"]:\n            if action[\"action\"] == \"travel\":\n                print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n            elif action[\"action\"] == \"wait\":\n                print(\"You wait until\", action['time'], \".\")\n            elif action[\"action\"] == \"meet\":\n                print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n        import json\n        print(json.dumps(schedule, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_74",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    # Define meeting constraints\n    constraints = [\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"6:45PM\", \"meeting_end\": \"9:30PM\", \"travel_time\": 10, \"meeting_duration\": 15, \"start_location\": \"Golden Gate Park\", \"destination\": \"Alamo Square\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"7:30PM\", \"meeting_end\": \"9:30PM\", \"travel_time\": 5, \"meeting_duration\": 90, \"start_location\": \"Russian Hill\", \"destination\": \"North Beach\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"11:45AM\", \"meeting_end\": \"2:00PM\", \"travel_time\": 8, \"meeting_duration\": 120, \"start_location\": \"Embarcadero\", \"destination\": \"Russian Hill\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"9:15AM\", \"meeting_end\": \"1:30PM\", \"travel_time\": 11, \"meeting_duration\": 120, \"start_location\": \"Marina District\", \"destination\": \"Richmond District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"8:45PM\", \"meeting_end\": \"9:30PM\", \"travel_time\": 10, \"meeting_duration\": 45, \"start_location\": \"Pacific Heights\", \"destination\": \"Embarcadero\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"11:30AM\", \"meeting_end\": \"2:45PM\", \"travel_time\": 13, \"meeting_duration\": 15, \"start_location\": \"Pacific Heights\", \"destination\": \"Fisherman's Wharf\"}\n    ]\n\n    for constraint in constraints:\n        arrival_time = datetime.strptime(constraint[\"arrival_time\"], \"%I:%M%p\")\n        meeting_start = datetime.strptime(constraint[\"meeting_start\"], \"%I:%M%p\")\n        meeting_end = datetime.strptime(constraint[\"meeting_end\"], \"%I:%M%p\")\n        travel_time = constraint[\"travel_time\"]\n        meeting_duration = constraint[\"meeting_duration\"]\n        start_location = constraint[\"start_location\"]\n        destination = constraint[\"destination\"]\n\n        schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n        print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n        for action in schedule[\"schedule\"]:\n            if action[\"action\"] == \"travel\":\n                print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n            elif action[\"action\"] == \"wait\":\n                print(\"You wait until\", action['time'], \".\")\n            elif action[\"action\"] == \"meet\":\n                print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n        import json\n        print(json.dumps(schedule, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_75",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 60,
                    "time": "5:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    # Define meeting constraints\n    constraints = [\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"9:30PM\", \"meeting_end\": \"10:30PM\", \"travel_time\": 21, \"meeting_duration\": 60, \"start_location\": \"Russian Hill\", \"destination\": \"Golden Gate Park\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"7:45PM\", \"meeting_end\": \"9:45PM\", \"travel_time\": 17, \"meeting_duration\": 75, \"start_location\": \"Alamo Square\", \"destination\": \"Financial District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"10:30AM\", \"meeting_end\": \"8:15PM\", \"travel_time\": 5, \"meeting_duration\": 75, \"start_location\": \"Financial District\", \"destination\": \"Chinatown\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"4:45PM\", \"meeting_end\": \"9:15PM\", \"travel_time\": 22, \"meeting_duration\": 105, \"start_location\": \"Fisherman's Wharf\", \"destination\": \"Mission District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"7:00AM\", \"meeting_end\": \"7:30PM\", \"travel_time\": 22, \"meeting_duration\": 120, \"start_location\": \"Financial District\", \"destination\": \"Presidio\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"5:00PM\", \"meeting_end\": \"8:15PM\", \"travel_time\": 16, \"meeting_duration\": 60, \"start_location\": \"Marina District\", \"destination\": \"Haight-Ashbury\"}\n    ]\n\n    for constraint in constraints:\n        arrival_time = datetime.strptime(constraint[\"arrival_time\"], \"%I:%M%p\")\n        meeting_start = datetime.strptime(constraint[\"meeting_start\"], \"%I:%M%p\")\n        meeting_end = datetime.strptime(constraint[\"meeting_end\"], \"%I:%M%p\")\n        travel_time = constraint[\"travel_time\"]\n        meeting_duration = constraint[\"meeting_duration\"]\n        start_location = constraint[\"start_location\"]\n        destination = constraint[\"destination\"]\n\n        schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n        print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n        for action in schedule[\"schedule\"]:\n            if action[\"action\"] == \"travel\":\n                print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n            elif action[\"action\"] == \"wait\":\n                print(\"You wait until\", action['time'], \".\")\n            elif action[\"action\"] == \"meet\":\n                print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n        import json\n        print(json.dumps(schedule, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_76",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 30,
                    "time": "9:09AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    # Define meeting constraints\n    constraints = [\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"10:00AM\", \"meeting_end\": \"3:30PM\", \"travel_time\": 24, \"meeting_duration\": 60, \"start_location\": \"Union Square\", \"destination\": \"Presidio\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"9:00AM\", \"meeting_end\": \"2:15PM\", \"travel_time\": 21, \"meeting_duration\": 60, \"start_location\": \"Embarcadero\", \"destination\": \"Richmond District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"3:45PM\", \"meeting_end\": \"6:00PM\", \"travel_time\": 19, \"meeting_duration\": 60, \"start_location\": \"Mission District\", \"destination\": \"Embarcadero\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"3:30PM\", \"meeting_end\": \"8:15PM\", \"travel_time\": 31, \"meeting_duration\": 30, \"start_location\": \"Presidio\", \"destination\": \"Bayview\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"8:00AM\", \"meeting_end\": \"12:00PM\", \"travel_time\": 10, \"meeting_duration\": 60, \"start_location\": \"Embarcadero\", \"destination\": \"Nob Hill\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"8:15AM\", \"meeting_end\": \"8:30PM\", \"travel_time\": 9, \"meeting_duration\": 30, \"start_location\": \"Richmond District\", \"destination\": \"Golden Gate Park\"}\n    ]\n\n    for constraint in constraints:\n        arrival_time = datetime.strptime(constraint[\"arrival_time\"], \"%I:%M%p\")\n        meeting_start = datetime.strptime(constraint[\"meeting_start\"], \"%I:%M%p\")\n        meeting_end = datetime.strptime(constraint[\"meeting_end\"], \"%I:%M%p\")\n        travel_time = constraint[\"travel_time\"]\n        meeting_duration = constraint[\"meeting_duration\"]\n        start_location = constraint[\"start_location\"]\n        destination = constraint[\"destination\"]\n\n        schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n        print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n        for action in schedule[\"schedule\"]:\n            if action[\"action\"] == \"travel\":\n                print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n            elif action[\"action\"] == \"wait\":\n                print(\"You wait until\", action['time'], \".\")\n            elif action[\"action\"] == \"meet\":\n                print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n        import json\n        print(json.dumps(schedule, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_77",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 105,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    # Define meeting constraints\n    constraints = [\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"6:45PM\", \"meeting_end\": \"8:00PM\", \"travel_time\": 8, \"meeting_duration\": 75, \"start_location\": \"Nob Hill\", \"destination\": \"North Beach\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"9:45PM\", \"meeting_end\": \"10:45PM\", \"travel_time\": 17, \"meeting_duration\": 60, \"start_location\": \"Haight-Ashbury\", \"destination\": \"Marina District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"12:45PM\", \"meeting_end\": \"6:45PM\", \"travel_time\": 20, \"meeting_duration\": 45, \"start_location\": \"Richmond District\", \"destination\": \"Mission District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"12:00PM\", \"meeting_end\": \"4:45PM\", \"travel_time\": 8, \"meeting_duration\": 90, \"start_location\": \"Alamo Square\", \"destination\": \"The Castro\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"11:15AM\", \"meeting_end\": \"9:30PM\", \"travel_time\": 7, \"meeting_duration\": 120, \"start_location\": \"North Beach\", \"destination\": \"Nob Hill\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"6:00PM\", \"meeting_end\": \"8:00PM\", \"travel_time\": 19, \"meeting_duration\": 105, \"start_location\": \"Union Square\", \"destination\": \"The Castro\"}\n    ]\n\n    for constraint in constraints:\n        arrival_time = datetime.strptime(constraint[\"arrival_time\"], \"%I:%M%p\")\n        meeting_start = datetime.strptime(constraint[\"meeting_start\"], \"%I:%M%p\")\n        meeting_end = datetime.strptime(constraint[\"meeting_end\"], \"%I:%M%p\")\n        travel_time = constraint[\"travel_time\"]\n        meeting_duration = constraint[\"meeting_duration\"]\n        start_location = constraint[\"start_location\"]\n        destination = constraint[\"destination\"]\n\n        schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n        print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n        for action in schedule[\"schedule\"]:\n            if action[\"action\"] == \"travel\":\n                print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n            elif action[\"action\"] == \"wait\":\n                print(\"You wait until\", action['time'], \".\")\n            elif action[\"action\"] == \"meet\":\n                print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n        import json\n        print(json.dumps(schedule, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_78",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    # Define meeting constraints\n    constraints = [\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"10:15AM\", \"meeting_end\": \"10:00PM\", \"travel_time\": 7, \"meeting_duration\": 45, \"start_location\": \"Haight-Ashbury\", \"destination\": \"Golden Gate Park\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"7:15AM\", \"meeting_end\": \"10:30AM\", \"travel_time\": 21, \"meeting_duration\": 90, \"start_location\": \"Embarcadero\", \"destination\": \"Haight-Ashbury\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"2:30PM\", \"meeting_end\": \"9:00PM\", \"travel_time\": 11, \"meeting_duration\": 105, \"start_location\": \"Embarcadero\", \"destination\": \"Pacific Heights\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"7:45PM\", \"meeting_end\": \"9:00PM\", \"travel_time\": 12, \"meeting_duration\": 75, \"start_location\": \"Chinatown\", \"destination\": \"Marina District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"9:00PM\", \"meeting_end\": \"9:45PM\", \"travel_time\": 12, \"meeting_duration\": 30, \"start_location\": \"Presidio\", \"destination\": \"Golden Gate Park\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"1:30PM\", \"meeting_end\": \"7:45PM\", \"travel_time\": 22, \"meeting_duration\": 45, \"start_location\": \"North Beach\", \"destination\": \"Bayview\"}\n    ]\n\n    for constraint in constraints:\n        arrival_time = datetime.strptime(constraint[\"arrival_time\"], \"%I:%M%p\")\n        meeting_start = datetime.strptime(constraint[\"meeting_start\"], \"%I:%M%p\")\n        meeting_end = datetime.strptime(constraint[\"meeting_end\"], \"%I:%M%p\")\n        travel_time = constraint[\"travel_time\"]\n        meeting_duration = constraint[\"meeting_duration\"]\n        start_location = constraint[\"start_location\"]\n        destination = constraint[\"destination\"]\n\n        schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n        print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n        for action in schedule[\"schedule\"]:\n            if action[\"action\"] == \"travel\":\n                print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n            elif action[\"action\"] == \"wait\":\n                print(\"You wait until\", action['time'], \".\")\n            elif action[\"action\"] == \"meet\":\n                print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n        import json\n        print(json.dumps(schedule, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_79",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    # Define meeting constraints\n    constraints = [\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"12:30PM\", \"meeting_end\": \"8:30PM\", \"travel_time\": 18, \"meeting_duration\": 105, \"start_location\": \"Union Square\", \"destination\": \"Marina District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"4:00PM\", \"meeting_end\": \"8:45PM\", \"travel_time\": 16, \"meeting_duration\": 105, \"start_location\": \"Russian Hill\", \"destination\": \"Mission District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"9:45AM\", \"meeting_end\": \"7:45PM\", \"travel_time\": 23, \"meeting_duration\": 15, \"start_location\": \"Financial District\", \"destination\": \"The Castro\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"12:15PM\", \"meeting_end\": \"5:00PM\", \"travel_time\": 6, \"meeting_duration\": 90, \"start_location\": \"Haight-Ashbury\", \"destination\": \"The Castro\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"8:00AM\", \"meeting_end\": \"9:15PM\", \"travel_time\": 15, \"meeting_duration\": 90, \"start_location\": \"Union Square\", \"destination\": \"Bayview\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"11:30AM\", \"meeting_end\": \"10:00PM\", \"travel_time\": 12, \"meeting_duration\": 75, \"start_location\": \"Mission District\", \"destination\": \"Haight-Ashbury\"}\n    ]\n\n    for constraint in constraints:\n        arrival_time = datetime.strptime(constraint[\"arrival_time\"], \"%I:%M%p\")\n        meeting_start = datetime.strptime(constraint[\"meeting_start\"], \"%I:%M%p\")\n        meeting_end = datetime.strptime(constraint[\"meeting_end\"], \"%I:%M%p\")\n        travel_time = constraint[\"travel_time\"]\n        meeting_duration = constraint[\"meeting_duration\"]\n        start_location = constraint[\"start_location\"]\n        destination = constraint[\"destination\"]\n\n        schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n        print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n        for action in schedule[\"schedule\"]:\n            if action[\"action\"] == \"travel\":\n                print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n            elif action[\"action\"] == \"wait\":\n                print(\"You wait until\", action['time'], \".\")\n            elif action[\"action\"] == \"meet\":\n                print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n        import json\n        print(json.dumps(schedule, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_80",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    # Define meeting constraints\n    constraints = [\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"2:00PM\", \"meeting_end\": \"5:00PM\", \"travel_time\": 11, \"meeting_duration\": 105, \"start_location\": \"Sunset District\", \"destination\": \"Golden Gate Park\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"9:30PM\", \"meeting_end\": \"10:15PM\", \"travel_time\": 7, \"meeting_duration\": 15, \"start_location\": \"Haight-Ashbury\", \"destination\": \"Golden Gate Park\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"4:00PM\", \"meeting_end\": \"6:15PM\", \"travel_time\": 11, \"meeting_duration\": 45, \"start_location\": \"Russian Hill\", \"destination\": \"Financial District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"8:30PM\", \"meeting_end\": \"9:30PM\", \"travel_time\": 21, \"meeting_duration\": 45, \"start_location\": \"Sunset District\", \"destination\": \"Pacific Heights\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"10:45AM\", \"meeting_end\": \"1:00PM\", \"travel_time\": 17, \"meeting_duration\": 120, \"start_location\": \"Marina District\", \"destination\": \"Financial District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"12:30PM\", \"meeting_end\": \"7:15PM\", \"travel_time\": 13, \"meeting_duration\": 75, \"start_location\": \"Richmond District\", \"destination\": \"Alamo Square\"}\n    ]\n\n    for constraint in constraints:\n        arrival_time = datetime.strptime(constraint[\"arrival_time\"], \"%I:%M%p\")\n        meeting_start = datetime.strptime(constraint[\"meeting_start\"], \"%I:%M%p\")\n        meeting_end = datetime.strptime(constraint[\"meeting_end\"], \"%I:%M%p\")\n        travel_time = constraint[\"travel_time\"]\n        meeting_duration = constraint[\"meeting_duration\"]\n        start_location = constraint[\"start_location\"]\n        destination = constraint[\"destination\"]\n\n        schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n        print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n        for action in schedule[\"schedule\"]:\n            if action[\"action\"] == \"travel\":\n                print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n            elif action[\"action\"] == \"wait\":\n                print(\"You wait until\", action['time'], \".\")\n            elif action[\"action\"] == \"meet\":\n                print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n        import json\n        print(json.dumps(schedule, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_81",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "5:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination):\n    schedule = []\n\n    # Start at start_location\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    # Travel to destination\n    travel_start = start_time\n    travel_end = travel_start + timedelta(minutes=travel_time)\n    schedule.append({\"action\": \"travel\", \"location\": destination, \"duration\": travel_time, \"time\": travel_start.strftime(\"%I:%M%p\"), \"to\": destination})\n\n    # Wait until meeting_start\n    wait_start = travel_end\n    wait_end = max(wait_start, meeting_start)\n    if wait_start < wait_end:\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_start.strftime(\"%I:%M%p\")})\n        schedule.append({\"action\": \"wait\", \"location\": destination, \"time\": wait_end.strftime(\"%I:%M%p\")})\n\n    # Meet at destination\n    meet_start = wait_end\n    meet_end = min(meet_start + timedelta(minutes=meeting_duration), meeting_end)\n    schedule.append({\"action\": \"meet\", \"location\": destination, \"duration\": (meet_end - meet_start).seconds // 60, \"time\": meet_start.strftime(\"%I:%M%p\")})\n\n    return {\"schedule\": schedule}\n\ndef main():\n    # Define meeting constraints\n    constraints = [\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"8:15PM\", \"meeting_end\": \"9:30PM\", \"travel_time\": 20, \"meeting_duration\": 75, \"start_location\": \"Haight-Ashbury\", \"destination\": \"Embarcadero\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"1:45PM\", \"meeting_end\": \"3:30PM\", \"travel_time\": 19, \"meeting_duration\": 15, \"start_location\": \"Union Square\", \"destination\": \"The Castro\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"8:45AM\", \"meeting_end\": \"10:45AM\", \"travel_time\": 8, \"meeting_duration\": 45, \"start_location\": \"Nob Hill\", \"destination\": \"Pacific Heights\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"8:45AM\", \"meeting_end\": \"1:30PM\", \"travel_time\": 14, \"meeting_duration\": 120, \"start_location\": \"Presidio\", \"destination\": \"Russian Hill\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"7:30AM\", \"meeting_end\": \"5:30PM\", \"travel_time\": 17, \"meeting_duration\": 75, \"start_location\": \"Mission District\", \"destination\": \"Financial District\"},\n        {\"arrival_time\": \"9:00AM\", \"meeting_start\": \"5:45PM\", \"meeting_end\": \"9:30PM\", \"travel_time\": 10, \"meeting_duration\": 75, \"start_location\": \"Golden Gate Park\", \"destination\": \"Alamo Square\"}\n    ]\n\n    for constraint in constraints:\n        arrival_time = datetime.strptime(constraint[\"arrival_time\"], \"%I:%M%p\")\n        meeting_start = datetime.strptime(constraint[\"meeting_start\"], \"%I:%M%p\")\n        meeting_end = datetime.strptime(constraint[\"meeting_end\"], \"%I:%M%p\")\n        travel_time = constraint[\"travel_time\"]\n        meeting_duration = constraint[\"meeting_duration\"]\n        start_location = constraint[\"start_location\"]\n        destination = constraint[\"destination\"]\n\n        schedule = calculate_schedule(arrival_time, meeting_start, meeting_end, travel_time, meeting_duration, start_location, destination)\n\n        print(\"SOLUTION: You start at\", start_location, \"at\", arrival_time.strftime(\"%I:%M%p\"), \".\")\n        for action in schedule[\"schedule\"]:\n            if action[\"action\"] == \"travel\":\n                print(\"You travel to\", action['to'], \"in\", action['duration'], \"minutes and arrive at\", action['time'], \".\")\n            elif action[\"action\"] == \"wait\":\n                print(\"You wait until\", action['time'], \".\")\n            elif action[\"action\"] == \"meet\":\n                print(\"You meet at\", action['location'], \"for\", action['duration'], \"minutes from\", action['time'], \"to\", (datetime.strptime(action['time'], '%I:%M%p') + timedelta(minutes=action['duration'])).strftime('%I:%M%p'), \".\")\n\n        import json\n        print(json.dumps(schedule, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_82",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": \"You\", \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": \"Friend's Location\", \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": \"Friend's Location\"})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": \"Friend's Location\", \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": \"Friend's Location\", \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": \"You\", \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": \"You\"})\n\n    return schedule\n\ndef main():\n    # Test cases\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('1:00PM', '%I:%M%p'),\n            \"meeting_duration\": 45,\n            \"travel_time_to_friend\": 25,\n            \"travel_time_back\": 25,\n            \"start_location\": \"Embarcadero\",\n            \"friend_location\": \"Golden Gate Park\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('8:00AM', '%I:%M%p'),\n            \"meeting_duration\": 75,\n            \"travel_time_to_friend\": 19,\n            \"travel_time_back\": 20,\n            \"start_location\": \"Nob Hill\",\n            \"friend_location\": \"Bayview\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('2:15PM', '%I:%M%p'),\n            \"meeting_duration\": 60,\n            \"travel_time_to_friend\": 17,\n            \"travel_time_back\": 17,\n            \"start_location\": \"Haight-Ashbury\",\n            \"friend_location\": \"Russian Hill\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('7:45AM', '%I:%M%p'),\n            \"meeting_duration\": 15,\n            \"travel_time_to_friend\": 13,\n            \"travel_time_back\": 11,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"The Castro\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('2:45PM', '%I:%M%p'),\n            \"meeting_duration\": 90,\n            \"travel_time_to_friend\": 22,\n            \"travel_time_back\": 21,\n            \"start_location\": \"Marina District\",\n            \"friend_location\": \"The Castro\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('9:45PM', '%I:%M%p'),\n            \"meeting_duration\": 45,\n            \"travel_time_to_friend\": 12,\n            \"travel_time_back\": 11,\n            \"start_location\": \"Presidio\",\n            \"friend_location\": \"Golden Gate Park\"\n        }\n    ]\n\n    for test_case in test_cases:\n        schedule = calculate_schedule(test_case[\"arrival_time\"], test_case[\"friend_available_time\"], \n                                       test_case[\"meeting_duration\"], test_case[\"travel_time_to_friend\"], \n                                       test_case[\"travel_time_back\"])\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule, \"start_location\": test_case[\"start_location\"], \n                          \"friend_location\": test_case[\"friend_location\"]}, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_83",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 5,
                    "time": "9:05AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('3:30PM', '%I:%M%p'),\n            \"meeting_duration\": 15,\n            \"travel_time_to_friend\": 13,\n            \"travel_time_back\": 12,\n            \"start_location\": \"Pacific Heights\",\n            \"friend_location\": \"Fisherman's Wharf\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('4:15PM', '%I:%M%p'),\n            \"meeting_duration\": 90,\n            \"travel_time_to_friend\": 25,\n            \"travel_time_back\": 25,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('4:15PM', '%I:%M%p'),\n            \"meeting_duration\": 105,\n            \"travel_time_to_friend\": 26,\n            \"travel_time_back\": 30,\n            \"start_location\": \"Union Square\",\n            \"friend_location\": \"Sunset District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"meeting_duration\": 15,\n            \"travel_time_to_friend\": 6,\n            \"travel_time_back\": 8,\n            \"start_location\": \"Embarcadero\",\n            \"friend_location\": \"Fisherman's Wharf\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('7:15AM', '%I:%M%p'),\n            \"meeting_duration\": 30,\n            \"travel_time_to_friend\": 21,\n            \"travel_time_back\": 21,\n            \"start_location\": \"Sunset District\",\n            \"friend_location\": \"Pacific Heights\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('11:00AM', '%I:%M%p'),\n            \"meeting_duration\": 30,\n            \"travel_time_to_friend\": 5,\n            \"travel_time_back\": 5,\n            \"start_location\": \"Alamo Square\",\n            \"friend_location\": \"Haight-Ashbury\"\n        }\n    ]\n\n    for test_case in test_cases:\n        schedule = calculate_schedule(test_case[\"arrival_time\"], test_case[\"friend_available_time\"], \n                                       test_case[\"meeting_duration\"], test_case[\"travel_time_to_friend\"], \n                                       test_case[\"travel_time_back\"], test_case[\"start_location\"], \n                                       test_case[\"friend_location\"])\n\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_84",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 4,
                    "time": "9:04AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('10:45AM', '%I:%M%p'),\n            \"meeting_duration\": 60,\n            \"travel_time_to_friend\": 8,\n            \"travel_time_back\": 7,\n            \"start_location\": \"Nob Hill\",\n            \"friend_location\": \"North Beach\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('3:15PM', '%I:%M%p'),\n            \"meeting_duration\": 105,\n            \"travel_time_to_friend\": 19,\n            \"travel_time_back\": 19,\n            \"start_location\": \"Bayview\",\n            \"friend_location\": \"Financial District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('8:00AM', '%I:%M%p'),\n            \"meeting_duration\": 105,\n            \"travel_time_to_friend\": 22,\n            \"travel_time_back\": 23,\n            \"start_location\": \"Bayview\",\n            \"friend_location\": \"Golden Gate Park\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('4:45PM', '%I:%M%p'),\n            \"meeting_duration\": 120,\n            \"travel_time_to_friend\": 20,\n            \"travel_time_back\": 20,\n            \"start_location\": \"Richmond District\",\n            \"friend_location\": \"Chinatown\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('9:45AM', '%I:%M%p'),\n            \"meeting_duration\": 60,\n            \"travel_time_to_friend\": 5,\n            \"travel_time_back\": 4,\n            \"start_location\": \"Embarcadero\",\n            \"friend_location\": \"Financial District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('1:15PM', '%I:%M%p'),\n            \"meeting_duration\": 15,\n            \"travel_time_to_friend\": 4,\n            \"travel_time_back\": 5,\n            \"start_location\": \"North Beach\",\n            \"friend_location\": \"Russian Hill\"\n        }\n    ]\n\n    for test_case in test_cases:\n        schedule = calculate_schedule(test_case[\"arrival_time\"], test_case[\"friend_available_time\"], \n                                       test_case[\"meeting_duration\"], test_case[\"travel_time_to_friend\"], \n                                       test_case[\"travel_time_back\"], test_case[\"start_location\"], \n                                       test_case[\"friend_location\"])\n\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_85",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('7:00PM', '%I:%M%p'),\n            \"meeting_duration\": 15,\n            \"travel_time_to_friend\": 20,\n            \"travel_time_back\": 20,\n            \"start_location\": \"Mission District\",\n            \"friend_location\": \"Richmond District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('8:00AM', '%I:%M%p'),\n            \"meeting_duration\": 105,\n            \"travel_time_to_friend\": 21,\n            \"travel_time_back\": 21,\n            \"start_location\": \"Sunset District\",\n            \"friend_location\": \"Pacific Heights\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('10:30AM', '%I:%M%p'),\n            \"meeting_duration\": 60,\n            \"travel_time_to_friend\": 17,\n            \"travel_time_back\": 17,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Mission District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('2:45PM', '%I:%M%p'),\n            \"meeting_duration\": 30,\n            \"travel_time_to_friend\": 21,\n            \"travel_time_back\": 22,\n            \"start_location\": \"The Castro\",\n            \"friend_location\": \"Marina District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('12:45PM', '%I:%M%p'),\n            \"meeting_duration\": 120,\n            \"travel_time_to_friend\": 10,\n            \"travel_time_back\": 11,\n            \"start_location\": \"Pacific Heights\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('7:45PM', '%I:%M%p'),\n            \"meeting_duration\": 15,\n            \"travel_time_to_friend\": 12,\n            \"travel_time_back\": 11,\n            \"start_location\": \"Marina District\",\n            \"friend_location\": \"Nob Hill\"\n        }\n    ]\n\n    for test_case in test_cases:\n        schedule = calculate_schedule(test_case[\"arrival_time\"], test_case[\"friend_available_time\"], \n                                       test_case[\"meeting_duration\"], test_case[\"travel_time_to_friend\"], \n                                       test_case[\"travel_time_back\"], test_case[\"start_location\"], \n                                       test_case[\"friend_location\"])\n\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_86",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 75,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('11:30AM', '%I:%M%p'),\n            \"meeting_duration\": 30,\n            \"travel_time_to_friend\": 15,\n            \"travel_time_back\": 13,\n            \"start_location\": \"Haight-Ashbury\",\n            \"friend_location\": \"Nob Hill\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('11:45AM', '%I:%M%p'),\n            \"meeting_duration\": 15,\n            \"travel_time_to_friend\": 18,\n            \"travel_time_back\": 17,\n            \"start_location\": \"Presidio\",\n            \"friend_location\": \"North Beach\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('7:15PM', '%I:%M%p'),\n            \"meeting_duration\": 30,\n            \"travel_time_to_friend\": 30,\n            \"travel_time_back\": 31,\n            \"start_location\": \"Embarcadero\",\n            \"friend_location\": \"Sunset District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('7:30AM', '%I:%M%p'),\n            \"meeting_duration\": 75,\n            \"travel_time_to_friend\": 16,\n            \"travel_time_back\": 16,\n            \"start_location\": \"The Castro\",\n            \"friend_location\": \"Richmond District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('10:30AM', '%I:%M%p'),\n            \"meeting_duration\": 120,\n            \"travel_time_to_friend\": 18,\n            \"travel_time_back\": 18,\n            \"start_location\": \"Alamo Square\",\n            \"friend_location\": \"Presidio\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('8:30AM', '%I:%M%p'),\n            \"meeting_duration\": 75,\n            \"travel_time_to_friend\": 11,\n            \"travel_time_back\": 10,\n            \"start_location\": \"Embarcadero\",\n            \"friend_location\": \"Pacific Heights\"\n        }\n    ]\n\n    for test_case in test_cases:\n        schedule = calculate_schedule(test_case[\"arrival_time\"], test_case[\"friend_available_time\"], \n                                       test_case[\"meeting_duration\"], test_case[\"travel_time_to_friend\"], \n                                       test_case[\"travel_time_back\"], test_case[\"start_location\"], \n                                       test_case[\"friend_location\"])\n\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_87",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 15,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('5:00PM', '%I:%M%p'),\n            \"meeting_duration\": 45,\n            \"travel_time_to_friend\": 12,\n            \"travel_time_back\": 11,\n            \"start_location\": \"Marina District\",\n            \"friend_location\": \"Nob Hill\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('9:15AM', '%I:%M%p'),\n            \"meeting_duration\": 120,\n            \"travel_time_to_friend\": 25,\n            \"travel_time_back\": 26,\n            \"start_location\": \"Mission District\",\n            \"friend_location\": \"Presidio\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('12:45PM', '%I:%M%p'),\n            \"meeting_duration\": 105,\n            \"travel_time_to_friend\": 6,\n            \"travel_time_back\": 6,\n            \"start_location\": \"Haight-Ashbury\",\n            \"friend_location\": \"The Castro\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('7:15AM', '%I:%M%p'),\n            \"meeting_duration\": 120,\n            \"travel_time_to_friend\": 16,\n            \"travel_time_back\": 16,\n            \"start_location\": \"Pacific Heights\",\n            \"friend_location\": \"The Castro\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('9:00PM', '%I:%M%p'),\n            \"meeting_duration\": 45,\n            \"travel_time_to_friend\": 20,\n            \"travel_time_back\": 17,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Nob Hill\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('8:45PM', '%I:%M%p'),\n            \"meeting_duration\": 15,\n            \"travel_time_to_friend\": 11,\n            \"travel_time_back\": 10,\n            \"start_location\": \"Sunset District\",\n            \"friend_location\": \"Golden Gate Park\"\n        }\n    ]\n\n    for test_case in test_cases:\n        schedule = calculate_schedule(test_case[\"arrival_time\"], test_case[\"friend_available_time\"], \n                                       test_case[\"meeting_duration\"], test_case[\"travel_time_to_friend\"], \n                                       test_case[\"travel_time_back\"], test_case[\"start_location\"], \n                                       test_case[\"friend_location\"])\n\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_88",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 60,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('8:00PM', '%I:%M%p'),\n            \"meeting_duration\": 90,\n            \"travel_time_to_friend\": 7,\n            \"travel_time_back\": 7,\n            \"start_location\": \"Chinatown\",\n            \"friend_location\": \"Union Square\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('6:30PM', '%I:%M%p'),\n            \"meeting_duration\": 75,\n            \"travel_time_to_friend\": 18,\n            \"travel_time_back\": 18,\n            \"start_location\": \"Alamo Square\",\n            \"friend_location\": \"Presidio\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('10:15AM', '%I:%M%p'),\n            \"meeting_duration\": 15,\n            \"travel_time_to_friend\": 20,\n            \"travel_time_back\": 19,\n            \"start_location\": \"Bayview\",\n            \"friend_location\": \"The Castro\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('6:00PM', '%I:%M%p'),\n            \"meeting_duration\": 90,\n            \"travel_time_to_friend\": 24,\n            \"travel_time_back\": 25,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Fisherman's Wharf\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('6:30PM', '%I:%M%p'),\n            \"meeting_duration\": 105,\n            \"travel_time_to_friend\": 17,\n            \"travel_time_back\": 19,\n            \"start_location\": \"Alamo Square\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('6:00PM', '%I:%M%p'),\n            \"meeting_duration\": 60,\n            \"travel_time_to_friend\": 15,\n            \"travel_time_back\": 13,\n            \"start_location\": \"Mission District\",\n            \"friend_location\": \"Bayview\"\n        }\n    ]\n\n    for test_case in test_cases:\n        schedule = calculate_schedule(test_case[\"arrival_time\"], test_case[\"friend_available_time\"], \n                                       test_case[\"meeting_duration\"], test_case[\"travel_time_to_friend\"], \n                                       test_case[\"travel_time_back\"], test_case[\"start_location\"], \n                                       test_case[\"friend_location\"])\n\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_89",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('5:30PM', '%I:%M%p'),\n            \"meeting_duration\": 75,\n            \"travel_time_to_friend\": 6,\n            \"travel_time_back\": 8,\n            \"start_location\": \"Nob Hill\",\n            \"friend_location\": \"Chinatown\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('11:30AM', '%I:%M%p'),\n            \"meeting_duration\": 120,\n            \"travel_time_to_friend\": 16,\n            \"travel_time_back\": 15,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Pacific Heights\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('12:45PM', '%I:%M%p'),\n            \"meeting_duration\": 105,\n            \"travel_time_to_friend\": 10,\n            \"travel_time_back\": 10,\n            \"start_location\": \"Richmond District\",\n            \"friend_location\": \"Haight-Ashbury\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('7:00AM', '%I:%M%p'),\n            \"meeting_duration\": 45,\n            \"travel_time_to_friend\": 18,\n            \"travel_time_back\": 19,\n            \"start_location\": \"North Beach\",\n            \"friend_location\": \"Haight-Ashbury\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('8:00AM', '%I:%M%p'),\n            \"meeting_duration\": 60,\n            \"travel_time_to_friend\": 27,\n            \"travel_time_back\": 29,\n            \"start_location\": \"North Beach\",\n            \"friend_location\": \"Sunset District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('8:15AM', '%I:%M%p'),\n            \"meeting_duration\": 15,\n            \"travel_time_to_friend\": 16,\n            \"travel_time_back\": 17,\n            \"start_location\": \"Alamo Square\",\n            \"friend_location\": \"Chinatown\"\n        }\n    ]\n\n    for test_case in test_cases:\n        schedule = calculate_schedule(test_case[\"arrival_time\"], test_case[\"friend_available_time\"], \n                                       test_case[\"meeting_duration\"], test_case[\"travel_time_to_friend\"], \n                                       test_case[\"travel_time_back\"], test_case[\"start_location\"], \n                                       test_case[\"friend_location\"])\n\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_90",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_available_time, meeting_duration, \n                       travel_time_to_friend, travel_time_back, start_location, friend_location):\n    schedule = []\n\n    start_time = arrival_time\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": start_time.strftime(\"%I:%M%p\")})\n\n    travel_time_to_friend_end = start_time + timedelta(minutes=travel_time_to_friend)\n    schedule.append({\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n                     \"time\": travel_time_to_friend_end.strftime(\"%I:%M%p\"), \"to\": friend_location})\n\n    wait_end_time = friend_available_time\n    wait_duration = (wait_end_time - travel_time_to_friend_end).total_seconds() / 60\n    if wait_duration > 0:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": wait_end_time.strftime(\"%I:%M%p\")})\n\n    meeting_end_time = friend_available_time + timedelta(minutes=meeting_duration)\n    schedule.append({\"action\": \"meet\", \"location\": friend_location, \"duration\": meeting_duration, \n                     \"time\": friend_available_time.strftime(\"%I:%M%p\")})\n\n    travel_time_back_end = meeting_end_time + timedelta(minutes=travel_time_back)\n    schedule.append({\"action\": \"travel\", \"location\": start_location, \"duration\": travel_time_back, \n                     \"time\": travel_time_back_end.strftime(\"%I:%M%p\"), \"to\": start_location})\n\n    return schedule\n\ndef main():\n    test_cases = [\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('1:45PM', '%I:%M%p'),\n            \"meeting_duration\": 45,\n            \"travel_time_to_friend\": 22,\n            \"travel_time_back\": 20,\n            \"start_location\": \"Chinatown\",\n            \"friend_location\": \"The Castro\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('10:15AM', '%I:%M%p'),\n            \"meeting_duration\": 75,\n            \"travel_time_to_friend\": 23,\n            \"travel_time_back\": 22,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Bayview\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('1:00PM', '%I:%M%p'),\n            \"meeting_duration\": 60,\n            \"travel_time_to_friend\": 8,\n            \"travel_time_back\": 8,\n            \"start_location\": \"Russian Hill\",\n            \"friend_location\": \"Embarcadero\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('1:30PM', '%I:%M%p'),\n            \"meeting_duration\": 75,\n            \"travel_time_to_friend\": 7,\n            \"travel_time_back\": 9,\n            \"start_location\": \"Golden Gate Park\",\n            \"friend_location\": \"Richmond District\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('9:45AM', '%I:%M%p'),\n            \"meeting_duration\": 90,\n            \"travel_time_to_friend\": 13,\n            \"travel_time_back\": 12,\n            \"start_location\": \"Richmond District\",\n            \"friend_location\": \"Alamo Square\"\n        },\n        {\n            \"arrival_time\": datetime.strptime('9:00AM', '%I:%M%p'),\n            \"friend_available_time\": datetime.strptime('7:00PM', '%I:%M%p'),\n            \"meeting_duration\": 75,\n            \"travel_time_to_friend\": 14,\n            \"travel_time_back\": 13,\n            \"start_location\": \"Russian Hill\",\n            \"friend_location\": \"Richmond District\"\n        }\n    ]\n\n    for test_case in test_cases:\n        schedule = calculate_schedule(test_case[\"arrival_time\"], test_case[\"friend_available_time\"], \n                                       test_case[\"meeting_duration\"], test_case[\"travel_time_to_friend\"], \n                                       test_case[\"travel_time_back\"], test_case[\"start_location\"], \n                                       test_case[\"friend_location\"])\n\n        print(\"SOLUTION:\")\n        print(json.dumps({\"schedule\": schedule}, indent=4))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_91",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Starting Location",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Starting Location",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "Friend's Location"
                },
                {
                    "action": "wait",
                    "location": "Friend's Location",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Friend's Location",
                    "time": "2:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 45,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Starting Location\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Starting Location\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Friend's Location\"\n    })\n    \n    # Calculate wait time before meeting the friend\n    wait_time = friend_start_time - travel_time_to_friend\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Friend's Location\",\n            \"time\": (travel_time_to_friend + wait_time).strftime(\"%I:%M%p\")\n        })\n    \n    # Meet the friend\n    meet_time = friend_start_time + timedelta(minutes=meeting_duration)\n    if meet_time > friend_end_time:\n        meet_time = friend_end_time\n        meeting_duration = (meet_time - friend_start_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Friend's Location\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"2:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"5:45PM\", \"%I:%M%p\")\n    meeting_duration = 45\n    travel_to_friend = 23\n    travel_to_start = 20\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_92",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Starting Location",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Starting Location",
                    "time": "9:06AM",
                    "duration": 6,
                    "to": "Friend's Location"
                },
                {
                    "action": "wait",
                    "location": "Friend's Location",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Friend's Location",
                    "time": "8:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 6,
                    "time": "9:06AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Starting Location\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Starting Location\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Friend's Location\"\n    })\n    \n    # Calculate wait time before meeting the friend\n    wait_time = friend_start_time - travel_time_to_friend\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Friend's Location\",\n            \"time\": (travel_time_to_friend + wait_time).strftime(\"%I:%M%p\")\n        })\n    \n    # Meet the friend\n    meet_time = friend_start_time + timedelta(minutes=meeting_duration)\n    if meet_time > friend_end_time:\n        meet_time = friend_end_time\n        meeting_duration = (meet_time - friend_start_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Friend's Location\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_to_friend = 6\n    travel_to_start = 3\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_93",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Alamo Square\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Russian Hill\"\n    })\n    \n    # Calculate wait time before meeting the friend\n    wait_time = friend_start_time - travel_time_to_friend\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": (travel_time_to_friend + wait_time).strftime(\"%I:%M%p\")\n        })\n    \n    # Meet the friend\n    meet_time = friend_start_time + timedelta(minutes=meeting_duration)\n    if meet_time > friend_end_time:\n        meet_time = friend_end_time\n        meeting_duration = (meet_time - friend_start_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"12:00PM\", \"%I:%M%p\")\n    meeting_duration = 15\n    travel_to_friend = 13\n    travel_to_start = 15\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_94",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "12:30PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"North Beach\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Bayview\"\n    })\n    \n    # Calculate wait time before meeting the friend\n    wait_time = friend_start_time - travel_time_to_friend\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": (travel_time_to_friend + wait_time).strftime(\"%I:%M%p\")\n        })\n    \n    # Meet the friend\n    meet_time = friend_start_time + timedelta(minutes=meeting_duration)\n    if meet_time > friend_end_time:\n        meet_time = friend_end_time\n        meeting_duration = (meet_time - friend_start_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"12:45PM\", \"%I:%M%p\")\n    meeting_duration = 90\n    travel_to_friend = 22\n    travel_to_start = 21\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_95",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:27AM",
                    "duration": 27,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:57AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 27,
                    "time": "9:27AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 30,
                    "time": "9:27AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Sunset District\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Meet the friend\n    meet_time = travel_time_to_friend\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": (meet_time + timedelta(minutes=meeting_duration)).strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    meeting_duration = 30\n    travel_to_friend = 27\n    travel_to_start = 25\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_96",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "7:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Chinatown\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n    \n    # Calculate wait time before meeting the friend\n    wait_time = friend_start_time - travel_time_to_friend\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Richmond District\",\n            \"time\": (travel_time_to_friend + wait_time).strftime(\"%I:%M%p\")\n        })\n    \n    # Meet the friend\n    meet_time = friend_start_time + timedelta(minutes=meeting_duration)\n    if meet_time > friend_end_time:\n        meet_time = friend_end_time\n        meeting_duration = (meet_time - friend_start_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    meeting_duration = 75\n    travel_to_friend = 20\n    travel_to_start = 20\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_97",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "9:30PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Alamo Square\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Richmond District\"\n    })\n    \n    # Calculate wait time before meeting the friend\n    wait_time = friend_start_time - travel_time_to_friend\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Richmond District\",\n            \"time\": (travel_time_to_friend + wait_time).strftime(\"%I:%M%p\")\n        })\n    \n    # Meet the friend\n    meet_time = friend_start_time + timedelta(minutes=meeting_duration)\n    if meet_time > friend_end_time:\n        meet_time = friend_end_time\n        meeting_duration = (meet_time - friend_start_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"8:45PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    meeting_duration = 45\n    travel_to_friend = 12\n    travel_to_start = 13\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_98",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "1:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start):\n    schedule = []\n    \n    # Start at the starting location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Fisherman's Wharf\",\n        \"time\": arrival_time.strftime(\"%I:%M%p\")\n    })\n    \n    # Calculate travel time to the friend's location\n    travel_time_to_friend = datetime.strptime(arrival_time.strftime(\"%I:%M%p\"), \"%I:%M%p\") + timedelta(minutes=travel_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_to_friend,\n        \"time\": travel_time_to_friend.strftime(\"%I:%M%p\"),\n        \"to\": \"Union Square\"\n    })\n    \n    # Calculate wait time before meeting the friend\n    wait_time = friend_start_time - travel_time_to_friend\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Union Square\",\n            \"time\": (travel_time_to_friend + wait_time).strftime(\"%I:%M%p\")\n        })\n    \n    # Meet the friend\n    meet_time = friend_start_time + timedelta(minutes=meeting_duration)\n    if meet_time > friend_end_time:\n        meet_time = friend_end_time\n        meeting_duration = (meet_time - friend_start_time).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": meeting_duration,\n        \"time\": meet_time.strftime(\"%I:%M%p\")\n    })\n    \n    return schedule\n\ndef main():\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    friend_start_time = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    friend_end_time = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    meeting_duration = 15\n    travel_to_friend = 13\n    travel_to_start = 15\n    \n    schedule = calculate_schedule(arrival_time, friend_start_time, friend_end_time, meeting_duration, travel_to_friend, travel_to_start)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_99",
            "is_correct": false
        }
    ]
}