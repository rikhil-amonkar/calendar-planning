{
    "0shot": [
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "10:10AM",
                    "duration": 20,
                    "to": "Mission District"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "10:30AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 120,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    stephanie_start = datetime.strptime(\"10:30AM\", \"%I:%M%p\")\n    stephanie_end = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\n    min_meet_duration = 120\n    marina_to_mission = 20\n    mission_to_marina = 19\n\n    # Calculate possible meeting windows\n    earliest_departure = arrival_time\n    latest_arrival = stephanie_end - timedelta(minutes=min_meet_duration)\n    \n    # Calculate when to leave Marina to arrive at Mission by 10:30AM\n    travel_start = stephanie_start - timedelta(minutes=marina_to_mission)\n    \n    # Check if we have to wait before traveling\n    if travel_start < arrival_time:\n        travel_start = arrival_time\n        arrival_at_mission = travel_start + timedelta(minutes=marina_to_mission)\n        actual_meet_start = max(arrival_at_mission, stephanie_start)\n        meet_duration = (stephanie_end - actual_meet_start).total_seconds() / 60\n    else:\n        arrival_at_mission = stephanie_start\n        meet_duration = min_meet_duration\n    \n    # Build schedule\n    schedule = []\n    current_time = arrival_time\n    current_location = \"Marina District\"\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    if travel_start > current_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = travel_start\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": marina_to_mission,\n        \"time\": format_time(current_time),\n        \"to\": \"Mission District\"\n    })\n    current_time += timedelta(minutes=marina_to_mission)\n    current_location = \"Mission District\"\n    \n    if current_time < stephanie_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = stephanie_start\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": meet_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time += timedelta(minutes=meet_duration)\n    \n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_0",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "5:15PM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "6:15PM",
                    "duration": 21,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 60,
                    "time": "5:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    betty_available_start = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\n    betty_available_end = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    min_meet_duration = 60  # minutes\n    travel_to_financial = 22  # minutes\n    travel_to_richmond = 21  # minutes\n\n    # Calculate possible meeting window\n    latest_departure_from_richmond = betty_available_end - timedelta(minutes=min_meet_duration)\n    latest_departure_from_richmond = min(latest_departure_from_richmond, betty_available_end - timedelta(minutes=travel_to_financial))\n    \n    # Can we make it to the meeting?\n    arrival_at_financial = arrival_time + timedelta(minutes=travel_to_financial)\n    \n    if arrival_at_financial <= betty_available_end - timedelta(minutes=min_meet_duration):\n        # We can meet today\n        if arrival_at_financial >= betty_available_start:\n            # No waiting needed\n            meet_start = arrival_at_financial\n        else:\n            # Need to wait\n            meet_start = betty_available_start\n        \n        meet_end = meet_start + timedelta(minutes=min_meet_duration)\n        if meet_end > betty_available_end:\n            meet_end = betty_available_end\n            meet_start = meet_end - timedelta(minutes=min_meet_duration)\n        \n        # Build schedule\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_to_financial, \n             \"time\": format_time(arrival_time), \"to\": \"Financial District\"}\n        ]\n        \n        if arrival_at_financial < betty_available_start:\n            schedule.append({\n                \"action\": \"wait\", \"location\": \"Financial District\", \n                \"time\": format_time(arrival_at_financial)\n            })\n        \n        schedule.extend([\n            {\"action\": \"meet\", \"location\": \"Financial District\", \"duration\": min_meet_duration, \n             \"time\": format_time(meet_start)},\n            {\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_to_richmond, \n             \"time\": format_time(meet_end), \"to\": \"Richmond District\"}\n        ])\n    else:\n        # Cannot meet today\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_to_financial, \n             \"time\": format_time(arrival_time), \"to\": \"Financial District\"},\n            {\"action\": \"wait\", \"location\": \"Financial District\", \"time\": format_time(arrival_at_financial)},\n            {\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_to_richmond, \n             \"time\": format_time(betty_available_start), \"to\": \"Richmond District\"}\n        ]\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_1",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "6:30PM",
                    "duration": 15,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "6:45PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "8:15PM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 90,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    jessica_start = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    jessica_end = datetime.strptime(\"8:15PM\", \"%I:%M%p\")\n    min_meet_duration = 90  # minutes\n    travel_time_to_sunset = 15  # minutes\n    travel_time_to_haight = 15  # minutes\n\n    # Calculate possible meeting window\n    latest_meet_start = jessica_end - timedelta(minutes=min_meet_duration)\n    meet_start = max(jessica_start, latest_meet_start)\n\n    # Calculate travel time\n    travel_start = meet_start - timedelta(minutes=travel_time_to_sunset)\n    if travel_start < arrival_time:\n        # Not enough time to meet for 90 minutes, adjust meet_start to earliest possible\n        meet_start = jessica_start\n        travel_start = meet_start - timedelta(minutes=travel_time_to_sunset)\n        if travel_start < arrival_time:\n            # Still not enough time, adjust travel_start to arrival_time\n            travel_start = arrival_time\n            meet_start = travel_start + timedelta(minutes=travel_time_to_sunset)\n            min_meet_duration = (jessica_end - meet_start).total_seconds() / 60\n            if min_meet_duration <= 0:\n                # No possible meeting\n                schedule = [\n                    {\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": format_time(arrival_time)},\n                    {\"action\": \"wait\", \"location\": \"Haight-Ashbury\", \"time\": format_time(arrival_time)},\n                ]\n                print(json.dumps({\"schedule\": schedule}, indent=2))\n                return\n\n    # Calculate return time\n    meet_end = meet_start + timedelta(minutes=min_meet_duration)\n    return_start = meet_end\n    return_arrival = return_start + timedelta(minutes=travel_time_to_haight)\n\n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": format_time(arrival_time)},\n    ]\n\n    if travel_start > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Haight-Ashbury\",\n            \"time\": format_time(arrival_time)\n        })\n\n    schedule.extend([\n        {\n            \"action\": \"travel\",\n            \"location\": \"Sunset District\",\n            \"duration\": travel_time_to_sunset,\n            \"time\": format_time(travel_start),\n            \"to\": \"Sunset District\"\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": \"Sunset District\",\n            \"duration\": min_meet_duration,\n            \"time\": format_time(meet_start)\n        },\n        {\n            \"action\": \"travel\",\n            \"location\": \"Haight-Ashbury\",\n            \"duration\": travel_time_to_haight,\n            \"time\": format_time(return_start),\n            \"to\": \"Haight-Ashbury\"\n        }\n    ])\n\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_2",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:22AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef compute_optimal_schedule():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    arrival_location = \"Bayview\"\n    barbara_available_start = \"8:00AM\"\n    barbara_available_end = \"11:30AM\"\n    meet_duration = 90  # minutes\n    travel_time_to_golden_gate = 22  # minutes\n    travel_time_to_bayview = 23  # minutes\n\n    # Convert time strings to minutes since midnight\n    def time_to_minutes(time_str):\n        time_part, period = time_str[:-2], time_str[-2:]\n        hours, minutes = map(int, time_part.split(':'))\n        if period == \"PM\" and hours != 12:\n            hours += 12\n        elif period == \"AM\" and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n\n    # Convert minutes since midnight to time string\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        mins = minutes % 60\n        period = \"AM\" if hours < 12 else \"PM\"\n        if hours == 0:\n            hours = 12\n        elif hours > 12:\n            hours -= 12\n        return f\"{hours}:{mins:02d}{period}\"\n\n    arrival_min = time_to_minutes(arrival_time)\n    barbara_start_min = time_to_minutes(barbara_available_start)\n    barbara_end_min = time_to_minutes(barbara_available_end)\n\n    # Calculate possible meeting start times\n    earliest_departure = arrival_min\n    travel_duration = travel_time_to_golden_gate\n    arrival_at_golden_gate = earliest_departure + travel_duration\n\n    # Barbara is available until 11:30AM\n    latest_meeting_start = barbara_end_min - meet_duration\n    possible_meeting_start = max(arrival_at_golden_gate, barbara_start_min)\n    possible_meeting_start = min(possible_meeting_start, latest_meeting_start)\n\n    if possible_meeting_start + meet_duration > barbara_end_min:\n        # Not enough time to meet\n        schedule = []\n    else:\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time},\n            {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_duration, \n             \"time\": minutes_to_time(earliest_departure), \"to\": \"Golden Gate Park\"}\n        ]\n\n        if arrival_at_golden_gate < possible_meeting_start:\n            schedule.append({\n                \"action\": \"wait\", \n                \"location\": \"Golden Gate Park\", \n                \"time\": minutes_to_time(arrival_at_golden_gate)\n            })\n\n        schedule.append({\n            \"action\": \"meet\", \n            \"location\": \"Golden Gate Park\", \n            \"duration\": meet_duration, \n            \"time\": minutes_to_time(possible_meeting_start)\n        })\n\n    return {\"schedule\": schedule}\n\nresult = compute_optimal_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_3",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:15AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 60,
                    "time": "9:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = str_to_time('9:00AM')\n    jessica_start = str_to_time('9:15AM')\n    jessica_end = str_to_time('5:45PM')\n    min_meet_duration = 60\n    presidio_to_marina = 10\n    marina_to_presidio = 10\n    \n    # Calculate possible meeting windows\n    earliest_meet_start = max(\n        arrival_time + timedelta(minutes=presidio_to_marina),\n        jessica_start\n    )\n    latest_meet_start = jessica_end - timedelta(minutes=min_meet_duration)\n    \n    if earliest_meet_start > latest_meet_start:\n        return {\"schedule\": []}\n    \n    # Optimal is to meet as soon as possible\n    meet_start = earliest_meet_start\n    meet_end = meet_start + timedelta(minutes=min_meet_duration)\n    \n    # Build schedule\n    schedule = []\n    current_time = arrival_time\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Presidio\",\n        \"time\": time_to_str(current_time)\n    })\n    \n    # Travel to Marina District\n    travel_start = current_time\n    travel_end = travel_start + timedelta(minutes=presidio_to_marina)\n    if travel_end > meet_start:\n        # Need to leave earlier\n        travel_start = meet_start - timedelta(minutes=presidio_to_marina)\n        travel_end = meet_start\n    \n    if travel_start > current_time:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": presidio_to_marina,\n            \"time\": time_to_str(travel_start),\n            \"to\": \"Marina District\"\n        })\n        current_time = travel_end\n    \n    # Wait if needed\n    if current_time < meet_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Marina District\",\n            \"time\": time_to_str(current_time)\n        })\n        current_time = meet_start\n    \n    # Meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"duration\": min_meet_duration,\n        \"time\": time_to_str(current_time)\n    })\n    current_time = meet_end\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_4",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "12:15PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "1:30PM",
                    "duration": 16,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 75,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    william_start = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\n    william_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    min_meet_duration = 75\n    travel_to_castro = 17\n    travel_to_nob_hill = 16\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Nob Hill\n    current_time = arrival_time\n    current_location = \"Nob Hill\"\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n\n    # Option 1: Go to The Castro immediately\n    # Calculate arrival time at The Castro\n    travel_start = current_time\n    travel_end = travel_start + timedelta(minutes=travel_to_castro)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_to_castro,\n        \"time\": format_time(travel_start),\n        \"to\": \"The Castro\"\n    })\n    current_time = travel_end\n    current_location = \"The Castro\"\n\n    # Check if we need to wait for William\n    if current_time < william_start:\n        wait_duration = (william_start - current_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = william_start\n\n    # Meet with William\n    meet_end = current_time + timedelta(minutes=min_meet_duration)\n    if meet_end > william_end:\n        # Not enough time to meet, adjust meet duration\n        meet_duration = (william_end - current_time).seconds // 60\n        meet_end = william_end\n    else:\n        meet_duration = min_meet_duration\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": meet_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time = meet_end\n\n    # Return to Nob Hill\n    travel_start = current_time\n    travel_end = travel_start + timedelta(minutes=travel_to_nob_hill)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_to_nob_hill,\n        \"time\": format_time(travel_start),\n        \"to\": \"Nob Hill\"\n    })\n    current_time = travel_end\n    current_location = \"Nob Hill\"\n\n    # Prepare output\n    output = {\n        \"schedule\": schedule\n    }\n\n    return json.dumps(output, indent=2)\n\nprint(compute_schedule())\n```",
            "count": "meeting_planning_example_5",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "6:04PM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "6:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 90,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    kenneth_start = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    kenneth_end = datetime.strptime(\"7:45PM\", \"%I:%M%p\")\n    min_meet_duration = 90  # minutes\n    travel_time_fw_to_nh = 11  # minutes\n    travel_time_nh_to_fw = 11  # minutes\n\n    # Initialize schedule\n    schedule = []\n\n    # Start at Fisherman's Wharf\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Fisherman's Wharf\",\n        \"time\": format_time(arrival_time)\n    })\n\n    # Calculate latest departure time to meet Kenneth for 90 minutes\n    latest_departure_from_fw = kenneth_end - timedelta(minutes=min_meet_duration)\n    travel_start_time = latest_departure_from_fw - timedelta(minutes=travel_time_fw_to_nh)\n\n    # If we have time before meeting Kenneth, wait at Fisherman's Wharf\n    if arrival_time < travel_start_time:\n        wait_duration = (travel_start_time - arrival_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Fisherman's Wharf\",\n            \"time\": format_time(arrival_time),\n            \"duration\": int(wait_duration)\n        })\n\n    # Travel to Nob Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time_fw_to_nh,\n        \"time\": format_time(travel_start_time),\n        \"to\": \"Nob Hill\"\n    })\n\n    arrival_at_nh = travel_start_time + timedelta(minutes=travel_time_fw_to_nh)\n\n    # Wait until Kenneth is available if needed\n    if arrival_at_nh < kenneth_start:\n        wait_duration = (kenneth_start - arrival_at_nh).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Nob Hill\",\n            \"time\": format_time(arrival_at_nh),\n            \"duration\": int(wait_duration)\n        })\n\n    # Meet Kenneth\n    meet_start_time = max(arrival_at_nh, kenneth_start)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meet_start_time)\n    })\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_6",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "3:43PM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "4:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    john_start = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    john_end = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\n    min_meet_duration = 75  # minutes\n    travel_to_north_beach = 17  # minutes\n    travel_to_richmond = 18  # minutes\n\n    # Calculate possible meeting window\n    latest_departure_from_richmond = john_end - timedelta(minutes=min_meet_duration)\n    latest_departure_time = latest_departure_from_richmond - timedelta(minutes=travel_to_north_beach)\n\n    # Determine when to leave Richmond\n    leave_richmond_time = max(arrival_time, latest_departure_time)\n\n    # Calculate arrival at North Beach\n    arrive_north_beach_time = leave_richmond_time + timedelta(minutes=travel_to_north_beach)\n\n    # Calculate meeting start (can't be before John's availability)\n    meeting_start_time = max(arrive_north_beach_time, john_start)\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meet_duration)\n\n    # Build schedule\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Richmond District\",\n        \"time\": format_time(arrival_time)\n    })\n\n    if leave_richmond_time > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Richmond District\",\n            \"time\": format_time(arrival_time)\n        })\n\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_to_north_beach,\n        \"time\": format_time(leave_richmond_time),\n        \"to\": \"North Beach\"\n    })\n\n    if meeting_start_time > arrive_north_beach_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": format_time(arrive_north_beach_time)\n        })\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n\n    return {\n        \"schedule\": schedule\n    }\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_7",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:12AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 105,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    stephanie_available_start = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\n    stephanie_available_end = datetime.strptime(\"3:00PM\", \"%I:%M%p\")\n    min_meeting_duration = 105  # minutes\n    travel_to_marina = 12  # minutes\n    travel_to_china = 16  # minutes\n\n    # Calculate possible meeting start times\n    earliest_departure = arrival_time\n    earliest_arrival_marina = earliest_departure + timedelta(minutes=travel_to_marina)\n    latest_meeting_start = stephanie_available_end - timedelta(minutes=min_meeting_duration)\n\n    if earliest_arrival_marina > latest_meeting_start:\n        return {\"schedule\": []}  # No possible meeting\n\n    # The optimal is to leave as soon as possible to maximize possible meeting time\n    meeting_start = max(earliest_arrival_marina, stephanie_available_start)\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Chinatown\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": travel_to_marina, \n         \"time\": format_time(arrival_time), \"to\": \"Marina District\"},\n    ]\n    \n    if meeting_start > earliest_arrival_marina:\n        wait_duration = (meeting_start - earliest_arrival_marina).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\", \n            \"location\": \"Marina District\", \n            \"time\": format_time(earliest_arrival_marina),\n            \"duration\": int(wait_duration)\n        })\n    \n    schedule.append({\n        \"action\": \"meet\", \n        \"location\": \"Marina District\", \n        \"duration\": min_meeting_duration, \n        \"time\": format_time(meeting_start),\n        \"with\": \"Stephanie\"\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_8",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "11:51AM",
                    "duration": 9,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "12:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "1:15PM",
                    "duration": 7,
                    "to": "Union Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "12:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    mary_available_start = datetime.strptime(\"12:00PM\", \"%I:%M%p\")\n    mary_available_end = datetime.strptime(\"4:15PM\", \"%I:%M%p\")\n    min_meeting_duration = 75  # minutes\n    travel_to_nob_hill = 9  # minutes\n    travel_to_union_square = 7  # minutes\n\n    # Calculate possible meeting times\n    meeting_start = mary_available_start\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if meeting fits within Mary's availability\n    if meeting_end > mary_available_end:\n        # Try to adjust meeting time to fit\n        meeting_end = mary_available_end\n        meeting_start = meeting_end - timedelta(minutes=min_meeting_duration)\n        if meeting_start < mary_available_start:\n            # Not possible to meet for the full duration\n            min_meeting_duration = (mary_available_end - mary_available_start).total_seconds() / 60\n            meeting_start = mary_available_start\n            meeting_end = mary_available_end\n\n    # Calculate travel time to Nob Hill\n    travel_start_time = meeting_start - timedelta(minutes=travel_to_nob_hill)\n    \n    # Check if we can arrive on time\n    if travel_start_time < arrival_time:\n        # Need to wait at Union Square until we can travel\n        wait_duration = (travel_start_time - arrival_time).total_seconds() / 60\n        travel_start_time = arrival_time\n        meeting_start = travel_start_time + timedelta(minutes=travel_to_nob_hill)\n        meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n        if meeting_end > mary_available_end:\n            meeting_end = mary_available_end\n            min_meeting_duration = (meeting_end - meeting_start).total_seconds() / 60\n\n    # Build schedule\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Union Square\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    if travel_start_time > arrival_time:\n        # We have time before needing to travel\n        wait_duration = (travel_start_time - arrival_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Union Square\",\n            \"time\": format_time(arrival_time)\n        })\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_to_nob_hill,\n        \"time\": format_time(travel_start_time),\n        \"to\": \"Nob Hill\"\n    })\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    # Travel back to Union Square\n    travel_back_start = meeting_end\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_to_union_square,\n        \"time\": format_time(travel_back_start),\n        \"to\": \"Union Square\"\n    })\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_9",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:15AM",
                    "duration": 15.0
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "10:30AM",
                    "duration": 18,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 15,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    james_available_start = \"10:15AM\"\n    james_available_end = \"1:30PM\"\n    min_meeting_duration = 15\n    gg_to_marina = 16\n    marina_to_gg = 18\n    \n    # Convert times to datetime objects\n    current_time = str_to_time(arrival_time)\n    james_start = str_to_time(james_available_start)\n    james_end = str_to_time(james_available_end)\n    \n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": time_to_str(current_time)\n    })\n    \n    # Calculate earliest possible departure time to meet James\n    # We need to arrive at Marina by james_end - min_meeting_duration\n    latest_arrival_time = james_end - timedelta(minutes=min_meeting_duration)\n    latest_departure_time = latest_arrival_time - timedelta(minutes=gg_to_marina)\n    \n    # Can we leave now and arrive before James leaves?\n    if current_time + timedelta(minutes=gg_to_marina) <= james_end:\n        # Yes, let's go now\n        travel_start = current_time\n        travel_end = travel_start + timedelta(minutes=gg_to_marina)\n        \n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Marina District\",\n            \"duration\": gg_to_marina,\n            \"time\": time_to_str(travel_start),\n            \"to\": \"Marina District\"\n        })\n        \n        current_time = travel_end\n        \n        # Do we need to wait?\n        if current_time < james_start:\n            wait_duration = (james_start - current_time).total_seconds() / 60\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": \"Marina District\",\n                \"time\": time_to_str(current_time)\n            })\n            current_time = james_start\n        \n        # Schedule the meeting\n        meeting_end = min(current_time + timedelta(minutes=min_meeting_duration), james_end)\n        actual_duration = (meeting_end - current_time).total_seconds() / 60\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Marina District\",\n            \"duration\": actual_duration,\n            \"time\": time_to_str(current_time)\n        })\n        \n        current_time = meeting_end\n        \n        # Travel back\n        travel_back_end = current_time + timedelta(minutes=marina_to_gg)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Golden Gate Park\",\n            \"duration\": marina_to_gg,\n            \"time\": time_to_str(current_time),\n            \"to\": \"Golden Gate Park\"\n        })\n    \n    return schedule\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n```",
            "count": "meeting_planning_example_10",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 25,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:25AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "3:15PM",
                    "duration": 27,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    carol_start = datetime.strptime(\"2:00PM\", \"%I:%M%p\")\n    carol_end = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    min_meet_duration = 75\n    travel_to_sunset = 25\n    travel_to_nob_hill = 27\n\n    # Initialize schedule\n    schedule = []\n    current_time = arrival_time\n    current_location = \"Nob Hill\"\n\n    # Start at Nob Hill\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n\n    # Travel to Sunset District to meet Carol\n    travel_start = current_time\n    travel_end = travel_start + timedelta(minutes=travel_to_sunset)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_to_sunset,\n        \"time\": format_time(travel_start),\n        \"to\": \"Sunset District\"\n    })\n    current_time = travel_end\n    current_location = \"Sunset District\"\n\n    # Wait until Carol is available if needed\n    if current_time < carol_start:\n        wait_duration = (carol_start - current_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = carol_start\n\n    # Meet Carol (start as early as possible)\n    meet_end = current_time + timedelta(minutes=min_meet_duration)\n    if meet_end > carol_end:\n        # Not enough time to meet, adjust to latest possible\n        meet_start = carol_end - timedelta(minutes=min_meet_duration)\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = meet_start\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meet_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time += timedelta(minutes=min_meet_duration)\n\n    # Travel back to Nob Hill\n    travel_start = current_time\n    travel_end = travel_start + timedelta(minutes=travel_to_nob_hill)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_to_nob_hill,\n        \"time\": format_time(travel_start),\n        \"to\": \"Nob Hill\"\n    })\n    current_time = travel_end\n    current_location = \"Nob Hill\"\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_11",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "5:44PM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "6:00PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"PM\", \"PM\").replace(\"AM\", \"AM\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    barbara_start = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    barbara_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    min_meet_duration = 90  # minutes\n    travel_to_alamo = 16  # minutes\n    travel_to_north_beach = 15  # minutes\n\n    # Calculate latest possible start time for meeting\n    latest_meet_start = barbara_end - timedelta(minutes=min_meet_duration)\n    # Calculate earliest possible arrival at Alamo Square\n    earliest_arrival_alamo = arrival_time + timedelta(minutes=travel_to_alamo)\n\n    # Check if meeting is possible\n    if latest_meet_start < barbara_start or earliest_arrival_alamo > barbara_end:\n        print(json.dumps({\"schedule\": []}))\n        return\n\n    # Optimal schedule is to arrive just in time for the meeting\n    meet_start = max(barbara_start, earliest_arrival_alamo)\n    meet_end = meet_start + timedelta(minutes=min_meet_duration)\n\n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"North Beach\", \"time\": format_time(arrival_time)}\n    ]\n\n    # Add travel if needed\n    if meet_start > earliest_arrival_alamo:\n        # Need to wait before traveling\n        wait_duration = (meet_start - timedelta(minutes=travel_to_alamo)) - arrival_time\n        if wait_duration.total_seconds() > 0:\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": \"North Beach\",\n                \"duration\": wait_duration.seconds // 60,\n                \"time\": format_time(arrival_time)\n            })\n        \n        travel_time = arrival_time + wait_duration\n    else:\n        travel_time = arrival_time\n\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_to_alamo,\n        \"time\": format_time(travel_time),\n        \"to\": \"Alamo Square\"\n    })\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meet_start)\n    })\n\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_12",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "6:27PM",
                    "duration": 18,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:18AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "6:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "6:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    betty_available_start = datetime.strptime(\"6:45PM\", \"%I:%M%p\")\n    betty_available_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    min_meeting_duration = 75  # minutes\n    presidio_to_north_beach = 18  # minutes\n    north_beach_to_presidio = 17  # minutes\n\n    # Calculate latest possible time to leave Presidio to meet Betty\n    latest_departure_from_presidio = betty_available_end - timedelta(minutes=min_meeting_duration + north_beach_to_presidio)\n    \n    # Calculate earliest possible time to arrive at North Beach\n    earliest_arrival_at_north_beach = arrival_time + timedelta(minutes=presidio_to_north_beach)\n    \n    # Check if meeting is possible\n    if earliest_arrival_at_north_beach > betty_available_end - timedelta(minutes=min_meeting_duration):\n        return {\"schedule\": []}\n    \n    # Determine when to leave Presidio\n    if earliest_arrival_at_north_beach <= betty_available_start:\n        # Need to wait at North Beach\n        travel_start_time = betty_available_start - timedelta(minutes=presidio_to_north_beach)\n        wait_duration = (betty_available_start - earliest_arrival_at_north_beach).total_seconds() / 60\n        meeting_start = betty_available_start\n    else:\n        # Can go directly\n        travel_start_time = arrival_time\n        wait_duration = 0\n        meeting_start = earliest_arrival_at_north_beach\n    \n    # Ensure we don't exceed Betty's availability\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    if meeting_end > betty_available_end:\n        meeting_end = betty_available_end\n        actual_meeting_duration = (meeting_end - meeting_start).total_seconds() / 60\n    else:\n        actual_meeting_duration = min_meeting_duration\n    \n    # Build schedule\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Presidio\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    if travel_start_time > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": format_time(arrival_time)\n        })\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": presidio_to_north_beach,\n        \"time\": format_time(travel_start_time),\n        \"to\": \"North Beach\"\n    })\n    \n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": format_time(earliest_arrival_at_north_beach)\n        })\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"duration\": actual_meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    return {\"schedule\": schedule}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_13",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "7:49PM",
                    "duration": 11,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "8:00PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 120,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_location = \"Nob Hill\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    mary_location = \"Marina District\"\n    mary_start = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    mary_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    min_meet_duration = 120  # minutes\n    travel_time_to_marina = 11  # minutes\n    travel_time_to_nob_hill = 12  # minutes\n\n    # Calculate possible meeting window\n    latest_departure_from_nob_hill = mary_end - timedelta(minutes=min_meet_duration)\n    travel_start_time = latest_departure_from_nob_hill - timedelta(minutes=travel_time_to_marina)\n\n    # Check if we can meet for the full duration\n    if travel_start_time >= arrival_time:\n        # We can meet for full duration by leaving at travel_start_time\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"wait\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": mary_location, \"duration\": travel_time_to_marina,\n             \"time\": format_time(travel_start_time), \"to\": mary_location},\n            {\"action\": \"meet\", \"location\": mary_location, \"duration\": min_meet_duration,\n             \"time\": format_time(mary_start)},\n        ]\n    else:\n        # Can't meet for full duration, calculate maximum possible meeting time\n        earliest_arrival_at_marina = arrival_time + timedelta(minutes=travel_time_to_marina)\n        if earliest_arrival_at_marina >= mary_end:\n            # Can't meet at all\n            schedule = [\n                {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n                {\"action\": \"wait\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n            ]\n        else:\n            # Meet for whatever time is available\n            meet_duration = (mary_end - earliest_arrival_at_marina).total_seconds() / 60\n            meet_start = max(earliest_arrival_at_marina, mary_start)\n            meet_end = min(mary_end, meet_start + timedelta(minutes=meet_duration))\n            actual_duration = (meet_end - meet_start).total_seconds() / 60\n\n            schedule = [\n                {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n                {\"action\": \"travel\", \"location\": mary_location, \"duration\": travel_time_to_marina,\n                 \"time\": format_time(arrival_time), \"to\": mary_location},\n                {\"action\": \"meet\", \"location\": mary_location, \"duration\": actual_duration,\n                 \"time\": format_time(meet_start)},\n            ]\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_14",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "12:39PM",
                    "duration": 21,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "1:00PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "2:30PM",
                    "duration": 19,
                    "to": "Russian Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 21,
                    "time": "9:21AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    john_available_start = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    john_available_end = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    min_meeting_duration = 90  # minutes\n    travel_to_park = 21  # minutes\n    travel_to_hill = 19  # minutes\n\n    # Calculate possible meeting times\n    earliest_departure = arrival_time\n    latest_arrival_at_park = john_available_end - timedelta(minutes=min_meeting_duration)\n    latest_departure_from_hill = latest_arrival_at_park - timedelta(minutes=travel_to_park)\n\n    # Determine when to leave Russian Hill\n    leave_hill_time = min(latest_departure_from_hill, john_available_start - timedelta(minutes=travel_to_park))\n    leave_hill_time = max(leave_hill_time, earliest_departure)\n\n    # Calculate arrival at Golden Gate Park\n    arrive_park_time = leave_hill_time + timedelta(minutes=travel_to_park)\n\n    # Calculate meeting start time (can't be before John is available)\n    meeting_start_time = max(arrive_park_time, john_available_start)\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n\n    # Calculate return trip\n    leave_park_time = meeting_end_time\n    arrive_hill_time = leave_park_time + timedelta(minutes=travel_to_hill)\n\n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_to_park, \n         \"time\": format_time(leave_hill_time), \"to\": \"Golden Gate Park\"},\n    ]\n\n    if arrive_park_time < john_available_start:\n        wait_duration = (john_available_start - arrive_park_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\", \n            \"location\": \"Golden Gate Park\", \n            \"time\": format_time(arrive_park_time),\n            \"duration\": int(wait_duration)\n        })\n\n    schedule.extend([\n        {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": min_meeting_duration, \n         \"time\": format_time(meeting_start_time)},\n        {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_to_hill, \n         \"time\": format_time(leave_park_time), \"to\": \"Russian Hill\"},\n    ])\n\n    # Output as JSON\n    result = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_15",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "3:15PM",
                    "duration": 105.0
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "5:00PM",
                    "duration": 9,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"PM\", \"PM\").replace(\"AM\", \"AM\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    ronald_available_start = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    ronald_available_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    min_meeting_duration = 105\n    travel_to_russian_hill = 7\n    travel_to_chinatown = 9\n\n    # Calculate possible meeting times\n    earliest_departure = arrival_time\n    travel_time = timedelta(minutes=travel_to_russian_hill)\n    arrival_russian_hill = earliest_departure + travel_time\n\n    # Check if we arrive before Ronald is available\n    if arrival_russian_hill < ronald_available_start:\n        wait_time = ronald_available_start - arrival_russian_hill\n        meeting_start = ronald_available_start\n    else:\n        wait_time = timedelta(minutes=0)\n        meeting_start = arrival_russian_hill\n\n    # Calculate meeting end time\n    meeting_duration = timedelta(minutes=min_meeting_duration)\n    meeting_end = meeting_start + meeting_duration\n\n    # Check if meeting can fit in Ronald's availability\n    if meeting_end > ronald_available_end:\n        # Adjust meeting to end at Ronald's available end time\n        meeting_end = ronald_available_end\n        meeting_start = meeting_end - meeting_duration\n        if meeting_start < ronald_available_start:\n            # Not enough time to meet\n            meeting_start = ronald_available_start\n            meeting_end = ronald_available_end\n            meeting_duration = meeting_end - meeting_start\n\n    # Calculate return trip\n    departure_russian_hill = meeting_end\n    return_travel_time = timedelta(minutes=travel_to_chinatown)\n    arrival_chinatown = departure_russian_hill + return_travel_time\n\n    # Build schedule\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Chinatown\",\n        \"time\": format_time(arrival_time)\n    })\n\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_to_russian_hill,\n        \"time\": format_time(earliest_departure),\n        \"to\": \"Russian Hill\"\n    })\n\n    if wait_time.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Russian Hill\",\n            \"time\": format_time(arrival_russian_hill),\n            \"duration\": wait_time.total_seconds() / 60\n        })\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meeting_duration.total_seconds() / 60,\n        \"time\": format_time(meeting_start),\n        \"with\": \"Ronald\"\n    })\n\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_to_chinatown,\n        \"time\": format_time(departure_russian_hill),\n        \"to\": \"Chinatown\"\n    })\n\n    # Prepare output\n    output = {\n        \"schedule\": schedule\n    }\n\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_16",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "1:59PM",
                    "duration": 16,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:15PM",
                    "duration": 15.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(time):\n    return time.strftime(\"%-I:%M%p\")\n\ndef calculate_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    matthew_start = datetime.strptime(\"1:30PM\", \"%I:%M%p\")\n    matthew_end = datetime.strptime(\"2:30PM\", \"%I:%M%p\")\n    min_meet_duration = 15\n    travel_to_sunset = 16\n    travel_to_alamo = 17\n\n    schedule = []\n    current_time = arrival_time\n    current_location = \"Alamo Square\"\n\n    # Start at Alamo Square\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": time_to_str(current_time)\n    })\n\n    # Calculate latest departure time to meet Matthew for minimum duration\n    latest_departure = matthew_end - timedelta(minutes=min_meet_duration)\n    travel_departure_time = latest_departure - timedelta(minutes=travel_to_sunset)\n\n    # If we have time before needing to leave, stay at Alamo Square\n    if current_time < travel_departure_time:\n        wait_duration = (travel_departure_time - current_time).total_seconds() / 60\n        if wait_duration > 0:\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": time_to_str(current_time)\n            })\n            current_time = travel_departure_time\n\n    # Travel to Sunset District\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_to_sunset,\n        \"time\": time_to_str(current_time),\n        \"to\": \"Sunset District\"\n    })\n    current_time += timedelta(minutes=travel_to_sunset)\n    current_location = \"Sunset District\"\n\n    # Meet with Matthew\n    meet_start = max(current_time, matthew_start)\n    meet_duration = min((matthew_end - meet_start).total_seconds() / 60, \n                      (matthew_end - matthew_start).total_seconds() / 60)\n    \n    if meet_duration >= min_meet_duration:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": meet_duration,\n            \"time\": time_to_str(meet_start)\n        })\n        current_time = meet_start + timedelta(minutes=meet_duration)\n    else:\n        # Not enough time to meet, just wait\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": time_to_str(current_time)\n        })\n\n    return schedule\n\nresult = {\n    \"schedule\": calculate_schedule()\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_17",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "8:34PM",
                    "duration": 11,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "8:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    betty_available_start = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    betty_available_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    min_meet_duration = 75  # minutes\n    travel_to_richmond = 11  # minutes\n    travel_to_marina = 9  # minutes\n\n    # Calculate latest possible start time for meeting\n    latest_meet_start = betty_available_end - timedelta(minutes=min_meet_duration)\n    \n    # Calculate when to leave Marina to arrive at latest_meet_start\n    departure_from_marina = latest_meet_start - timedelta(minutes=travel_to_richmond)\n    \n    # Check if we have enough time to do this\n    if departure_from_marina >= arrival_time:\n        # We can make it by leaving at departure_from_marina\n        travel_start = departure_from_marina\n        meet_start = latest_meet_start\n    else:\n        # Need to leave as soon as we arrive\n        travel_start = arrival_time\n        meet_start = arrival_time + timedelta(minutes=travel_to_richmond)\n        # Check if we can still get the full meeting duration\n        if meet_start + timedelta(minutes=min_meet_duration) > betty_available_end:\n            # Can't meet for full duration, adjust to maximum possible\n            min_meet_duration = (betty_available_end - meet_start).total_seconds() / 60\n    \n    # Build schedule\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Marina District\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    if travel_start > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Marina District\",\n            \"time\": format_time(arrival_time)\n        })\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_to_richmond,\n        \"time\": format_time(travel_start),\n        \"to\": \"Richmond District\"\n    })\n    \n    if meet_start > travel_start + timedelta(minutes=travel_to_richmond):\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Richmond District\",\n            \"time\": format_time(travel_start + timedelta(minutes=travel_to_richmond))\n        })\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meet_start)\n    })\n    \n    # Output as JSON\n    output = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_18",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "7:44PM",
                    "duration": 16,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    arrival_time_str = \"9:00AM\"\n    arrival_location = \"Golden Gate Park\"\n    john_available_start_str = \"7:45PM\"\n    john_available_end_str = \"8:45PM\"\n    john_location = \"Pacific Heights\"\n    min_meeting_duration = 45  # minutes\n    travel_to_pacific = 16  # minutes\n    travel_to_golden_gate = 15  # minutes\n\n    # Parse times\n    arrival_time = parse_time(arrival_time_str)\n    john_available_start = parse_time(john_available_start_str)\n    john_available_end = parse_time(john_available_end_str)\n\n    # Calculate latest possible departure time to meet John\n    latest_departure_time = john_available_end - timedelta(minutes=min_meeting_duration)\n    travel_departure_time = latest_departure_time - timedelta(minutes=travel_to_pacific)\n\n    # Check if we can make it in time\n    if travel_departure_time >= arrival_time:\n        # We can meet John\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time_str},\n            {\"action\": \"travel\", \"location\": john_location, \"duration\": travel_to_pacific,\n             \"time\": format_time(travel_departure_time), \"to\": john_location},\n            {\"action\": \"meet\", \"location\": john_location, \"duration\": min_meeting_duration,\n             \"time\": john_available_start_str}\n        ]\n    else:\n        # Cannot meet John, just stay at Golden Gate Park\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time_str},\n            {\"action\": \"wait\", \"location\": arrival_location, \"time\": arrival_time_str}\n        ]\n\n    # Output as JSON\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_19",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "11:22AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "12:45PM",
                    "duration": 6,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    joseph_start = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    joseph_end = datetime.strptime(\"3:15PM\", \"%I:%M%p\")\n    min_meet_duration = 75\n    travel_to_nob_hill = 8\n    travel_to_china = 6\n    \n    schedule = []\n    current_time = arrival_time\n    current_location = \"Chinatown\"\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Calculate when to leave Chinatown to arrive at Nob Hill by 11:30AM\n    travel_start_time = joseph_start - timedelta(minutes=travel_to_nob_hill)\n    \n    # If we have time before leaving, wait in Chinatown\n    if current_time < travel_start_time:\n        wait_duration = (travel_start_time - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"duration\": int(wait_duration),\n            \"time\": format_time(current_time)\n        })\n        current_time = travel_start_time\n    \n    # Travel to Nob Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_to_nob_hill,\n        \"time\": format_time(current_time),\n        \"to\": \"Nob Hill\"\n    })\n    current_time += timedelta(minutes=travel_to_nob_hill)\n    current_location = \"Nob Hill\"\n    \n    # Meet with Joseph for 75 minutes starting at 11:30AM\n    meet_end_time = joseph_start + timedelta(minutes=min_meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meet_duration,\n        \"time\": format_time(joseph_start)\n    })\n    current_time = meet_end_time\n    \n    # Travel back to Chinatown\n    travel_back_duration = travel_to_china\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_back_duration,\n        \"time\": format_time(current_time),\n        \"to\": \"Chinatown\"\n    })\n    current_time += timedelta(minutes=travel_back_duration)\n    current_location = \"Chinatown\"\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_20",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:42AM",
                    "duration": 11,
                    "to": "Mission District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef format_time(hour, minute):\n    period = \"AM\" if hour < 12 else \"PM\"\n    display_hour = hour if hour <= 12 else hour - 12\n    return f\"{display_hour}:{minute:02d}{period}\"\n\ndef parse_time(time_str):\n    time_part, period = time_str[:-2], time_str[-2:]\n    hour, minute = map(int, time_part.split(':'))\n    if period == \"PM\" and hour != 12:\n        hour += 12\n    elif period == \"AM\" and hour == 12:\n        hour = 0\n    return hour, minute\n\ndef time_to_minutes(time_str):\n    hour, minute = parse_time(time_str)\n    return hour * 60 + minute\n\ndef minutes_to_time(total_minutes):\n    hour = total_minutes // 60\n    minute = total_minutes % 60\n    return format_time(hour, minute)\n\ndef compute_schedule():\n    # Input parameters\n    arrival_location = \"Mission District\"\n    arrival_time_str = \"9:00AM\"\n    margaret_location = \"Haight-Ashbury\"\n    margaret_available_start_str = \"8:00AM\"\n    margaret_available_end_str = \"3:45PM\"\n    travel_time_to_haight = 12  # minutes\n    travel_time_to_mission = 11  # minutes\n    min_meeting_duration = 30  # minutes\n\n    # Convert all times to minutes since midnight for easier calculations\n    arrival_time = time_to_minutes(arrival_time_str)\n    margaret_start = time_to_minutes(margaret_available_start_str)\n    margaret_end = time_to_minutes(margaret_available_end_str)\n\n    # Calculate earliest possible departure to meet Margaret\n    earliest_departure = arrival_time\n    arrival_at_haight = earliest_departure + travel_time_to_haight\n\n    # Calculate meeting window\n    meeting_start = max(arrival_at_haight, margaret_start)\n    meeting_end = min(meeting_start + min_meeting_duration, margaret_end)\n\n    if meeting_end - meeting_start < min_meeting_duration:\n        # Not enough time to meet\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time_str},\n            {\"action\": \"wait\", \"location\": arrival_location, \"time\": arrival_time_str}\n        ]\n    else:\n        # We can meet Margaret\n        return_time = meeting_end + travel_time_to_mission\n\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time_str},\n            {\"action\": \"travel\", \"location\": margaret_location, \"duration\": travel_time_to_haight, \n             \"time\": minutes_to_time(arrival_time), \"to\": margaret_location},\n            {\"action\": \"meet\", \"location\": margaret_location, \"duration\": min_meeting_duration, \n             \"time\": minutes_to_time(meeting_start)},\n            {\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_time_to_mission, \n             \"time\": minutes_to_time(meeting_end), \"to\": arrival_location}\n        ]\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_21",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "11:15AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "1:00PM",
                    "duration": 24,
                    "to": "Presidio"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 105,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    andrew_start = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    andrew_end = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\n    meet_duration = timedelta(minutes=105)\n    presidio_to_union = timedelta(minutes=22)\n    union_to_presidio = timedelta(minutes=24)\n\n    # Initialize schedule\n    schedule = []\n    current_time = arrival_time\n    current_location = \"Presidio\"\n\n    # Start at Presidio\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n\n    # Travel to Union Square to meet Andrew\n    travel_time = presidio_to_union\n    travel_end_time = current_time + travel_time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time.seconds // 60,\n        \"time\": format_time(current_time),\n        \"to\": \"Union Square\"\n    })\n    current_time = travel_end_time\n    current_location = \"Union Square\"\n\n    # Check if we need to wait for Andrew\n    if current_time < andrew_start:\n        wait_time = andrew_start - current_time\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = andrew_start\n\n    # Meet Andrew\n    meet_end_time = current_time + meet_duration\n    if meet_end_time > andrew_end:\n        meet_duration = andrew_end - current_time\n        meet_end_time = andrew_end\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": meet_duration.seconds // 60,\n        \"time\": format_time(current_time)\n    })\n    current_time = meet_end_time\n\n    # Travel back to Presidio\n    travel_time = union_to_presidio\n    travel_end_time = current_time + travel_time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time.seconds // 60,\n        \"time\": format_time(current_time),\n        \"to\": \"Presidio\"\n    })\n    current_time = travel_end_time\n    current_location = \"Presidio\"\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_22",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "5:07PM",
                    "duration": 23,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "5:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 75,
                    "time": "5:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef main():\n    # Input parameters\n    arrival_time = parse_time(\"9:00AM\")\n    john_available_start = parse_time(\"5:30PM\")\n    john_available_end = parse_time(\"9:00PM\")\n    min_meeting_duration = 75\n    travel_time = 23\n    \n    # Calculate latest possible departure time from Bayview to meet John for 75 mins\n    latest_departure = john_available_end - timedelta(minutes=min_meeting_duration + travel_time)\n    \n    # Calculate earliest possible departure time from Bayview to meet John when he arrives\n    earliest_departure = john_available_start - timedelta(minutes=travel_time)\n    \n    # Determine the optimal departure time (earliest possible to maximize time with John)\n    departure_time = earliest_departure if earliest_departure >= arrival_time else latest_departure\n    \n    # Calculate meeting start and end times\n    meeting_start_time = departure_time + timedelta(minutes=travel_time)\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n    \n    # Build schedule\n    schedule = []\n    \n    # Start at Bayview\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Bayview\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Wait at Bayview until departure time (if needed)\n    if arrival_time < departure_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": format_time(arrival_time)\n        })\n    \n    # Travel to Russian Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_time,\n        \"time\": format_time(departure_time),\n        \"to\": \"Russian Hill\"\n    })\n    \n    # Meet with John\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    # Output as JSON\n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_23",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:00AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = parse_time(\"9:00AM\")\n    matthew_start = parse_time(\"11:00AM\")\n    matthew_end = parse_time(\"3:15PM\")\n    min_meeting_duration = 30\n    travel_to_presidio = 17\n    travel_to_nob_hill = 18\n\n    current_time = arrival_time\n    schedule = [{\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": format_time(current_time)}]\n\n    # Calculate earliest possible arrival at Presidio\n    travel_start = current_time\n    travel_end = travel_start + timedelta(minutes=travel_to_presidio)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_to_presidio,\n        \"time\": format_time(travel_start),\n        \"to\": \"Presidio\"\n    })\n    current_time = travel_end\n\n    # Check if we need to wait for Matthew\n    if current_time < matthew_start:\n        wait_duration = (matthew_start - current_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": format_time(current_time)\n        })\n        current_time = matthew_start\n\n    # Schedule meeting with Matthew\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > matthew_end:\n        meeting_end = matthew_end\n        min_meeting_duration = (meeting_end - current_time).seconds // 60\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time = meeting_end\n\n    # Travel back to Nob Hill\n    travel_start = current_time\n    travel_end = travel_start + timedelta(minutes=travel_to_nob_hill)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Nob Hill\",\n        \"duration\": travel_to_nob_hill,\n        \"time\": format_time(travel_start),\n        \"to\": \"Nob Hill\"\n    })\n\n    return {\"schedule\": schedule}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_24",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "3:37PM",
                    "duration": 23,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "4:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 105,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime('%-I:%M%p').upper()\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = str_to_time('9:00AM')\n    david_start = str_to_time('4:00PM')\n    david_end = str_to_time('9:45PM')\n    min_meet_duration = 105\n    travel_time_to_chinatown = 23\n    travel_time_to_park = 23\n    \n    # Initialize schedule\n    schedule = []\n    current_time = arrival_time\n    current_location = \"Golden Gate Park\"\n    \n    # Start at Golden Gate Park\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": time_to_str(current_time)\n    })\n    \n    # Check if we can meet David\n    earliest_meet_start = david_start\n    latest_meet_end = david_end\n    required_meet_end = earliest_meet_start + timedelta(minutes=min_meet_duration)\n    \n    if required_meet_end > latest_meet_end:\n        # Can't meet David for required duration\n        return {\n            \"schedule\": schedule,\n            \"message\": \"Cannot meet David for the required duration\"\n        }\n    \n    # Calculate when to leave Golden Gate Park to arrive at Chinatown by earliest_meet_start\n    travel_start_time = earliest_meet_start - timedelta(minutes=travel_time_to_chinatown)\n    \n    # If we have time before travel, wait at Golden Gate Park\n    if current_time < travel_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": time_to_str(current_time)\n        })\n        current_time = travel_start_time\n    \n    # Travel to Chinatown\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Chinatown\",\n        \"duration\": travel_time_to_chinatown,\n        \"time\": time_to_str(current_time),\n        \"to\": \"Chinatown\"\n    })\n    current_time += timedelta(minutes=travel_time_to_chinatown)\n    current_location = \"Chinatown\"\n    \n    # Meet David\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meet_duration,\n        \"time\": time_to_str(current_time)\n    })\n    current_time += timedelta(minutes=min_meet_duration)\n    \n    # Return to Golden Gate Park if desired (not specified in requirements)\n    \n    return {\n        \"schedule\": schedule\n    }\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_25",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "1:08PM",
                    "duration": 7,
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:15PM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "3:00PM",
                    "duration": 7,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 105,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = parse_time(\"9:00AM\")\n    sarah_start = parse_time(\"1:15PM\")\n    sarah_end = parse_time(\"3:15PM\")\n    meeting_duration = timedelta(minutes=105)\n    travel_time = timedelta(minutes=7)\n    \n    # Calculate possible meeting window\n    latest_departure_from_richmond = sarah_end - meeting_duration\n    earliest_arrival_at_presidio = sarah_start\n    \n    # Calculate when to leave Richmond\n    leave_richmond_time = min(latest_departure_from_richmond - travel_time, earliest_arrival_at_presidio - travel_time)\n    \n    # Calculate arrival at Presidio\n    arrive_presidio_time = leave_richmond_time + travel_time\n    \n    # Calculate meeting end time\n    meeting_end_time = arrive_presidio_time + meeting_duration\n    \n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": format_time(arrival_time)},\n        {\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": 7, \"time\": format_time(leave_richmond_time), \"to\": \"Presidio\"},\n        {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": 105, \"time\": format_time(arrive_presidio_time)},\n        {\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": 7, \"time\": format_time(meeting_end_time), \"to\": \"Richmond District\"}\n    ]\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_26",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "7:23PM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:30PM",
                    "duration": 15.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 15,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    arrival_time_str = \"9:00AM\"\n    arrival_location = \"Marina District\"\n    margaret_available_start_str = \"7:00PM\"\n    margaret_available_end_str = \"7:45PM\"\n    margaret_location = \"Pacific Heights\"\n    travel_to_pacific_heights = 7  # minutes\n    travel_to_marina_district = 6  # minutes\n    min_meeting_duration = 15  # minutes\n\n    # Parse times\n    arrival_time = parse_time(arrival_time_str)\n    margaret_start = parse_time(margaret_available_start_str)\n    margaret_end = parse_time(margaret_available_end_str)\n\n    # Calculate latest possible departure time to meet Margaret\n    latest_departure = margaret_end - timedelta(minutes=min_meeting_duration)\n    travel_time_to_margaret = timedelta(minutes=travel_to_pacific_heights)\n    latest_start_travel = latest_departure - travel_time_to_margaret\n\n    # Initialize schedule\n    schedule = []\n    current_time = arrival_time\n    current_location = arrival_location\n\n    # Add starting point\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n\n    # Check if we need to wait before traveling to meet Margaret\n    if current_time < latest_start_travel:\n        # We have time before needing to travel to meet Margaret\n        # Can stay in Marina District until it's time to travel\n        wait_time = (latest_start_travel - current_time).total_seconds() / 60\n        if wait_time > 0:\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": format_time(current_time)\n            })\n            current_time = latest_start_travel\n\n    # Travel to Pacific Heights to meet Margaret\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_to_pacific_heights,\n        \"time\": format_time(current_time),\n        \"to\": margaret_location\n    })\n    current_time += timedelta(minutes=travel_to_pacific_heights)\n    current_location = margaret_location\n\n    # Meet with Margaret\n    meeting_start = max(current_time, margaret_start)\n    if meeting_start < margaret_end:\n        actual_meeting_duration = min(\n            (margaret_end - meeting_start).total_seconds() / 60,\n            min_meeting_duration\n        )\n        if actual_meeting_duration > 0:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": actual_meeting_duration,\n                \"time\": format_time(meeting_start)\n            })\n            current_time = meeting_start + timedelta(minutes=actual_meeting_duration)\n\n    # Output the schedule as JSON\n    output = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_27",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "8:08PM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "8:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    joshua_start = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    joshua_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    meeting_duration = 75  # minutes\n    travel_to_chinatown = 7  # minutes\n    travel_to_union_square = 7  # minutes\n\n    # Calculate latest possible departure to meet Joshua for 75 minutes\n    latest_departure = joshua_end - timedelta(minutes=meeting_duration)\n    \n    # Calculate when to leave Union Square\n    leave_union_square = latest_departure - timedelta(minutes=travel_to_chinatown)\n    \n    # Check if we have time before the meeting\n    schedule = []\n    current_time = arrival_time\n    current_location = \"Union Square\"\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Time until we need to leave for Chinatown\n    wait_time = (leave_union_square - current_time).total_seconds() / 60\n    \n    if wait_time > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = leave_union_square\n    \n    # Travel to Chinatown\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_to_chinatown,\n        \"time\": format_time(current_time),\n        \"to\": \"Chinatown\"\n    })\n    current_time += timedelta(minutes=travel_to_chinatown)\n    current_location = \"Chinatown\"\n    \n    # Wait until meeting starts if needed\n    if current_time < joshua_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = joshua_start\n    \n    # Meeting with Joshua\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time += timedelta(minutes=meeting_duration)\n    \n    return schedule\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n```",
            "count": "meeting_planning_example_28",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "8:15PM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "8:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    time_str = dt.strftime(\"%-I:%M%p\")\n    return time_str[:-2] + time_str[-2:].upper()\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    nancy_start = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    nancy_end = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    travel_time = 15  # minutes\n    min_meet_duration = 75  # minutes\n    \n    # Initialize schedule\n    schedule = []\n    \n    # Start at Sunset District at 9:00AM\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Sunset District\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Calculate when to leave Sunset District to meet Nancy\n    # We need to arrive at Haight-Ashbury by 7:30PM for maximum meeting time\n    # But we can arrive later if we still get 75 minutes\n    \n    # Latest possible arrival time to get 75 minutes\n    latest_arrival = nancy_end - timedelta(minutes=min_meet_duration)\n    \n    # Earliest possible arrival time is 7:30PM\n    arrival_at_haight = max(nancy_start, latest_arrival)\n    \n    # Time to leave Sunset District\n    departure_from_sunset = arrival_at_haight - timedelta(minutes=travel_time)\n    \n    # Check if we need to wait before traveling\n    if arrival_time < departure_from_sunset:\n        # Add wait time at Sunset District\n        wait_duration = (departure_from_sunset - arrival_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Sunset District\",\n            \"time\": format_time(arrival_time),\n            \"duration\": wait_duration\n        })\n    \n    # Add travel to Haight-Ashbury\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Sunset District\",\n        \"duration\": travel_time,\n        \"time\": format_time(departure_from_sunset),\n        \"to\": \"Haight-Ashbury\"\n    })\n    \n    # Add meeting with Nancy\n    actual_meet_duration = (nancy_end - arrival_at_haight).seconds // 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": actual_meet_duration,\n        \"time\": format_time(arrival_at_haight),\n        \"with\": \"Nancy\"\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_29",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "11:30AM",
                    "duration": 18,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 120,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(time):\n    return time.strftime(\"%-I:%M%p\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = str_to_time(\"9:00AM\")\n    stephanie_start = str_to_time(\"9:30AM\")\n    stephanie_end = str_to_time(\"4:15PM\")\n    min_meet_duration = 120\n    travel_to_north_beach = 17\n    travel_to_richmond = 18\n\n    # Initialize schedule\n    schedule = []\n    current_time = arrival_time\n    current_location = \"Richmond District\"\n\n    # Start at Richmond\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": time_to_str(current_time)\n    })\n\n    # Check if we can meet Stephanie\n    earliest_departure = current_time + timedelta(minutes=travel_to_north_beach)\n    if earliest_departure < stephanie_end:\n        # Travel to North Beach\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_to_north_beach,\n            \"time\": time_to_str(current_time),\n            \"to\": \"North Beach\"\n        })\n        current_time += timedelta(minutes=travel_to_north_beach)\n        current_location = \"North Beach\"\n\n        # Wait if necessary\n        if current_time < stephanie_start:\n            wait_time = (stephanie_start - current_time).seconds // 60\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": time_to_str(current_time)\n            })\n            current_time = stephanie_start\n\n        # Meet Stephanie\n        meet_end_time = current_time + timedelta(minutes=min_meet_duration)\n        if meet_end_time <= stephanie_end:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": min_meet_duration,\n                \"time\": time_to_str(current_time)\n            })\n            current_time = meet_end_time\n        else:\n            # If full duration not possible, meet until Stephanie leaves\n            actual_duration = (stephanie_end - current_time).seconds // 60\n            if actual_duration > 0:\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": current_location,\n                    \"duration\": actual_duration,\n                    \"time\": time_to_str(current_time)\n                })\n                current_time = stephanie_end\n\n        # Travel back to Richmond\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_to_richmond,\n            \"time\": time_to_str(current_time),\n            \"to\": \"Richmond District\"\n        })\n        current_time += timedelta(minutes=travel_to_richmond)\n        current_location = \"Richmond District\"\n\n    # Convert datetime objects to strings in the schedule\n    for entry in schedule:\n        if \"time\" in entry and isinstance(entry[\"time\"], datetime):\n            entry[\"time\"] = time_to_str(entry[\"time\"])\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_30",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:11AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = parse_time('9:00AM')\n    anthony_start = parse_time('7:15AM')\n    anthony_end = parse_time('1:00PM')\n    travel_time_nob_to_alamo = 11\n    min_meeting_duration = 15\n    \n    # Calculate earliest possible meeting\n    earliest_departure = arrival_time\n    travel_end = earliest_departure + timedelta(minutes=travel_time_nob_to_alamo)\n    \n    # Find meeting window\n    meeting_start = max(travel_end, anthony_start)\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end > anthony_end:\n        return {\"schedule\": []}  # No possible meeting\n    \n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_time_nob_to_alamo, \n         \"time\": format_time(earliest_departure), \"to\": \"Alamo Square\"},\n        {\"action\": \"meet\", \"location\": \"Alamo Square\", \"duration\": min_meeting_duration, \n         \"time\": format_time(meeting_start)}\n    ]\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_31",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:11AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "10:56AM",
                    "duration": 13,
                    "to": "The Castro"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time_str = '9:00AM'\n    arrival_location = 'The Castro'\n    jeffrey_start_str = '7:00AM'\n    jeffrey_end_str = '5:30PM'\n    jeffrey_location = 'Golden Gate Park'\n    castro_to_park = 11\n    park_to_castro = 13\n    min_meeting_duration = 105\n\n    # Convert times to datetime objects\n    current_time = str_to_time(arrival_time_str)\n    jeffrey_start = str_to_time(jeffrey_start_str)\n    jeffrey_end = str_to_time(jeffrey_end_str)\n\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": time_to_str(current_time)\n    })\n\n    # Travel to Golden Gate Park\n    travel_duration = castro_to_park\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_duration,\n        \"time\": time_to_str(current_time - timedelta(minutes=travel_duration)),\n        \"to\": jeffrey_location\n    })\n\n    # Check if Jeffrey is available\n    if current_time < jeffrey_start:\n        # Wait until Jeffrey arrives\n        wait_duration = (jeffrey_start - current_time).total_seconds() / 60\n        current_time = jeffrey_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": jeffrey_location,\n            \"duration\": wait_duration,\n            \"time\": time_to_str(current_time - timedelta(minutes=wait_duration))\n        })\n    elif current_time > jeffrey_end:\n        # No meeting possible\n        return {\"schedule\": schedule}\n\n    # Calculate available time with Jeffrey\n    available_end = jeffrey_end\n    available_duration = (available_end - current_time).total_seconds() / 60\n\n    if available_duration >= min_meeting_duration:\n        # Meet for the required duration\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": jeffrey_location,\n            \"duration\": min_meeting_duration,\n            \"time\": time_to_str(current_time)\n        })\n        current_time += timedelta(minutes=min_meeting_duration)\n    else:\n        # Meet for whatever time is available\n        if available_duration > 0:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": jeffrey_location,\n                \"duration\": available_duration,\n                \"time\": time_to_str(current_time)\n            })\n            current_time += timedelta(minutes=available_duration)\n\n    # Travel back to The Castro\n    travel_duration = park_to_castro\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": jeffrey_location,\n        \"duration\": travel_duration,\n        \"time\": time_to_str(current_time - timedelta(minutes=travel_duration)),\n        \"to\": arrival_location\n    })\n\n    return {\"schedule\": schedule}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_32",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 30,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "12:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 30,
                    "time": "9:30AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    sarah_available_start = datetime.strptime(\"12:30PM\", \"%I:%M%p\")\n    sarah_available_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    min_meeting_duration = 15  # minutes\n    sunset_to_union = 30  # minutes\n    union_to_sunset = 26  # minutes\n\n    # Calculate possible meeting times\n    # Option 1: Leave immediately to meet Sarah as soon as she's available\n    travel_start = arrival_time\n    travel_end = travel_start + timedelta(minutes=sunset_to_union)\n    meeting_start = max(travel_end, sarah_available_start)\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end > sarah_available_end:\n        # Can't meet - no valid schedule\n        schedule = []\n    else:\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Sunset District\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": sunset_to_union, \n             \"time\": format_time(travel_start), \"to\": \"Union Square\"},\n            {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": min_meeting_duration, \n             \"time\": format_time(meeting_start)}\n        ]\n    \n    # Option 2: Leave later to minimize waiting time\n    # Calculate latest departure to arrive exactly at 12:30PM\n    latest_departure = sarah_available_start - timedelta(minutes=sunset_to_union)\n    if latest_departure > arrival_time:\n        waiting_at_sunset = (latest_departure - arrival_time).total_seconds() / 60\n        schedule_option2 = [\n            {\"action\": \"start\", \"location\": \"Sunset District\", \"time\": format_time(arrival_time)},\n            {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": sunset_to_union, \n             \"time\": format_time(latest_departure), \"to\": \"Union Square\"},\n            {\"action\": \"meet\", \"location\": \"Union Square\", \"duration\": min_meeting_duration, \n             \"time\": format_time(sarah_available_start)}\n        ]\n        \n        # Choose the option with less waiting (Option 2 is better in this case)\n        if not schedule or waiting_at_sunset < (meeting_start - travel_end).total_seconds() / 60:\n            schedule = schedule_option2\n\n    # Output the result\n    result = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_33",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "12:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 105,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    thomas_start = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\n    thomas_end = datetime.strptime(\"5:15PM\", \"%I:%M%p\")\n    min_meet_duration = 105  # minutes\n    travel_to_pacific = 23  # minutes\n    travel_to_bayview = 22  # minutes\n\n    # Calculate possible meeting windows\n    latest_meet_start = thomas_end - timedelta(minutes=min_meet_duration)\n    possible_meet_starts = [max(thomas_start, arrival_time + timedelta(minutes=travel_to_pacific))]\n    if len(possible_meet_starts) == 0 or possible_meet_starts[0] > latest_meet_start:\n        # No possible meeting\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Bayview\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_to_pacific, \n             \"time\": format_time(arrival_time), \"to\": \"Pacific Heights\"},\n            {\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": format_time(arrival_time + timedelta(minutes=travel_to_pacific))},\n            {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": 0, \"time\": format_time(thomas_start)}\n        ]\n    else:\n        meet_start = possible_meet_starts[0]\n        meet_end = meet_start + timedelta(minutes=min_meet_duration)\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Bayview\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Pacific Heights\", \"duration\": travel_to_pacific, \n             \"time\": format_time(arrival_time), \"to\": \"Pacific Heights\"},\n            {\"action\": \"wait\", \"location\": \"Pacific Heights\", \"time\": format_time(arrival_time + timedelta(minutes=travel_to_pacific))},\n            {\"action\": \"meet\", \"location\": \"Pacific Heights\", \"duration\": min_meet_duration, \"time\": format_time(meet_start)}\n        ]\n\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_34",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:18AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 90,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_location = \"Bayview\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    friend_name = \"Jason\"\n    friend_location = \"Chinatown\"\n    friend_available_start = datetime.strptime(\"8:30AM\", \"%I:%M%p\")\n    friend_available_end = datetime.strptime(\"12:30PM\", \"%I:%M%p\")\n    min_meeting_duration = 90  # minutes\n    \n    travel_times = {\n        (\"Bayview\", \"Chinatown\"): 18,\n        (\"Chinatown\", \"Bayview\"): 22\n    }\n    \n    # Calculate possible meeting times\n    travel_to_chinatown = travel_times[(arrival_location, friend_location)]\n    earliest_arrival_chinatown = arrival_time + timedelta(minutes=travel_to_chinatown)\n    \n    # Determine meeting window\n    meeting_start = max(earliest_arrival_chinatown, friend_available_start)\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end > friend_available_end:\n        # Not enough time to meet\n        return {\"schedule\": []}\n    \n    # Build schedule\n    schedule = []\n    \n    # Start at Bayview\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Travel to Chinatown\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_to_chinatown,\n        \"time\": format_time(arrival_time),\n        \"to\": friend_location\n    })\n    \n    # Check if we need to wait\n    if earliest_arrival_chinatown < friend_available_start:\n        wait_time = (friend_available_start - earliest_arrival_chinatown).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(earliest_arrival_chinatown),\n            \"duration\": wait_time\n        })\n    \n    # Meeting with Jason\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start),\n        \"with\": friend_name\n    })\n    \n    return {\"schedule\": schedule}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_35",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:14AM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "1:30PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 60,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"PM\", \"PM\").replace(\"AM\", \"AM\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = str_to_time(\"9:00AM\")\n    barbara_start = str_to_time(\"1:30PM\")\n    barbara_end = str_to_time(\"8:45PM\")\n    min_meet_duration = 60\n    marina_to_embarcadero = 14\n    embarcadero_to_marina = 12\n\n    # Calculate possible meeting windows\n    latest_departure_from_embarcadero = barbara_end - timedelta(minutes=min_meet_duration)\n    earliest_arrival_at_embarcadero = barbara_start\n\n    # Calculate travel to Embarcadero\n    travel_start_to_emb = arrival_time\n    arrival_at_emb = travel_start_to_emb + timedelta(minutes=marina_to_embarcadero)\n\n    # Check if we need to wait for Barbara\n    if arrival_at_emb < earliest_arrival_at_embarcadero:\n        wait_time = (earliest_arrival_at_embarcadero - arrival_at_emb).seconds // 60\n        meet_start = earliest_arrival_at_embarcadero\n    else:\n        wait_time = 0\n        meet_start = arrival_at_emb\n\n    meet_end = meet_start + timedelta(minutes=min_meet_duration)\n    if meet_end > barbara_end:\n        meet_end = barbara_end\n        meet_start = barbara_end - timedelta(minutes=min_meet_duration)\n\n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Marina District\", \"time\": time_to_str(arrival_time)}\n    ]\n\n    if arrival_at_emb < barbara_start:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": marina_to_embarcadero,\n            \"time\": time_to_str(travel_start_to_emb),\n            \"to\": \"Embarcadero\"\n        })\n        if wait_time > 0:\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": \"Embarcadero\",\n                \"time\": time_to_str(arrival_at_emb)\n            })\n    else:\n        # Need to leave later to avoid waiting\n        new_departure_time = barbara_start - timedelta(minutes=marina_to_embarcadero)\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Marina District\",\n            \"time\": time_to_str(arrival_time)\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Embarcadero\",\n            \"duration\": marina_to_embarcadero,\n            \"time\": time_to_str(new_departure_time),\n            \"to\": \"Embarcadero\"\n        })\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"duration\": min_meet_duration,\n        \"time\": time_to_str(meet_start)\n    })\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_36",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "12:11PM",
                    "duration": 19,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "12:30PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 90,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    arrival_time = parse_time('9:00AM')\n    jeffrey_available_start = parse_time('12:15PM')\n    jeffrey_available_end = parse_time('2:00PM')\n    meeting_duration = 90  # minutes\n    travel_time_bayview_to_financial = 19  # minutes\n    travel_time_financial_to_bayview = 19  # minutes\n\n    # Calculate possible meeting window\n    meeting_window_duration = (jeffrey_available_end - jeffrey_available_start).total_seconds() / 60\n    if meeting_window_duration < meeting_duration:\n        print(json.dumps({\"error\": \"Not enough time to meet Jeffrey for 90 minutes\"}))\n        return\n\n    # Calculate earliest possible departure from Bayview\n    latest_departure_from_financial = jeffrey_available_end - timedelta(minutes=meeting_duration)\n    latest_departure_from_bayview = latest_departure_from_financial - timedelta(minutes=travel_time_bayview_to_financial)\n    \n    # Calculate travel to Financial District\n    travel_start_time = max(arrival_time, latest_departure_from_bayview)\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_bayview_to_financial)\n    \n    # Calculate meeting time\n    meeting_start_time = max(travel_end_time, jeffrey_available_start)\n    meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n    \n    # Check if meeting is possible\n    if meeting_end_time > jeffrey_available_end:\n        print(json.dumps({\"error\": \"Cannot schedule meeting with given constraints\"}))\n        return\n\n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Bayview\", \"time\": format_time(arrival_time)}\n    ]\n    \n    if travel_start_time > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Bayview\",\n            \"time\": format_time(arrival_time)\n        })\n    \n    schedule.extend([\n        {\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_time_bayview_to_financial,\n            \"time\": format_time(travel_start_time),\n            \"to\": \"Financial District\"\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": \"Financial District\",\n            \"duration\": meeting_duration,\n            \"time\": format_time(meeting_start_time)\n        }\n    ])\n    \n    # Output result\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_37",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "8:50PM",
                    "duration": 10,
                    "to": "North Beach"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:00PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:45PM",
                    "duration": 7,
                    "to": "Union Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    arrival_time = parse_time('9:00AM')\n    margaret_start = parse_time('9:45PM')\n    margaret_end = parse_time('10:30PM')\n    meet_duration = 45  # minutes\n    \n    # Travel times\n    union_to_north = 10\n    north_to_union = 7\n    \n    # Calculate possible meeting window\n    latest_departure_from_union = margaret_end - timedelta(minutes=meet_duration)\n    travel_time_to_north = timedelta(minutes=union_to_north)\n    earliest_arrival_at_north = arrival_time + travel_time_to_north\n    \n    # Check if meeting is possible\n    if earliest_arrival_at_north > latest_departure_from_union:\n        schedule = [{\"action\": \"start\", \"location\": \"Union Square\", \"time\": format_time(arrival_time)}]\n    else:\n        # Calculate optimal time to leave Union Square\n        leave_union_time = max(arrival_time, margaret_start - timedelta(minutes=meet_duration) - travel_time_to_north)\n        \n        # Calculate arrival at North Beach\n        arrive_north_time = leave_union_time + travel_time_to_north\n        \n        # Calculate return time\n        leave_north_time = arrive_north_time + timedelta(minutes=meet_duration)\n        arrive_union_time = leave_north_time + timedelta(minutes=north_to_union)\n        \n        # Build schedule\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Union Square\", \"time\": format_time(arrival_time)},\n            {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": union_to_north, \n             \"time\": format_time(leave_union_time), \"to\": \"North Beach\"},\n            {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": meet_duration, \n             \"time\": format_time(arrive_north_time)},\n            {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": north_to_union, \n             \"time\": format_time(leave_north_time), \"to\": \"Union Square\"}\n        ]\n    \n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_38",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "4:34PM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:45PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 120,
                    "time": "4:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = str_to_time('9:00AM')\n    stephanie_start = str_to_time('4:45PM')\n    stephanie_end = str_to_time('9:45PM')\n    meeting_duration = 120  # minutes\n    travel_time_fw_to_nh = 11  # minutes\n    travel_time_nh_to_fw = 11  # minutes\n\n    # Calculate latest possible departure from Fisherman's Wharf to meet Stephanie for 120 minutes\n    latest_departure_from_fw = stephanie_end - timedelta(minutes=meeting_duration + travel_time_fw_to_nh)\n    \n    # Calculate earliest possible departure from Fisherman's Wharf to meet Stephanie for 120 minutes\n    earliest_departure_from_fw = stephanie_start - timedelta(minutes=travel_time_fw_to_nh)\n    \n    # We can leave anytime between arrival_time and latest_departure_from_fw\n    # But we need to arrive at Nob Hill by stephanie_end - meeting_duration\n    # For simplicity, we'll choose to leave as late as possible to maximize time at Fisherman's Wharf\n    departure_from_fw = min(latest_departure_from_fw, earliest_departure_from_fw)\n    \n    # Build schedule\n    schedule = []\n    \n    # Start at Fisherman's Wharf\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Fisherman's Wharf\",\n        \"time\": time_to_str(arrival_time)\n    })\n    \n    # Wait at Fisherman's Wharf until departure time\n    if arrival_time < departure_from_fw:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Fisherman's Wharf\",\n            \"time\": time_to_str(arrival_time),\n            \"duration\": (departure_from_fw - arrival_time).seconds // 60\n        })\n    \n    # Travel to Nob Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": travel_time_fw_to_nh,\n        \"time\": time_to_str(departure_from_fw),\n        \"to\": \"Nob Hill\"\n    })\n    \n    # Arrive at Nob Hill\n    arrive_at_nh = departure_from_fw + timedelta(minutes=travel_time_fw_to_nh)\n    \n    # Meet Stephanie\n    meeting_start = max(arrive_at_nh, stephanie_start)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"duration\": meeting_duration,\n        \"time\": time_to_str(meeting_start)\n    })\n    \n    return {\n        \"schedule\": schedule\n    }\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_39",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "6:28PM",
                    "duration": 17,
                    "to": "Sunset District"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "6:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"PM\", \"PM\").replace(\"AM\", \"AM\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    deborah_available_start = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    deborah_available_end = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    meeting_duration = 75  # minutes\n    travel_time_castro_to_sunset = 17  # minutes\n    travel_time_sunset_to_castro = 17  # minutes\n\n    # Calculate possible meeting window\n    meeting_end_time = deborah_available_end\n    meeting_start_time = meeting_end_time - timedelta(minutes=meeting_duration)\n\n    # Check if meeting is possible within Deborah's availability\n    if meeting_start_time < deborah_available_start:\n        meeting_start_time = deborah_available_start\n        meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n        if meeting_end_time > deborah_available_end:\n            # Not enough time to meet\n            schedule = [{\"action\": \"start\", \"location\": \"The Castro\", \"time\": format_time(arrival_time)}]\n            print(json.dumps({\"schedule\": schedule}, indent=2))\n            return\n\n    # Calculate travel to Sunset District\n    travel_start_time = meeting_start_time - timedelta(minutes=travel_time_castro_to_sunset)\n    if travel_start_time < arrival_time:\n        # Need to wait before traveling\n        wait_time = (arrival_time - travel_start_time).total_seconds() / 60\n        travel_start_time = arrival_time\n    else:\n        wait_time = 0\n\n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"The Castro\", \"time\": format_time(arrival_time)}\n    ]\n\n    if wait_time > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"The Castro\",\n            \"time\": format_time(arrival_time),\n            \"duration\": wait_time\n        })\n\n    schedule.extend([\n        {\n            \"action\": \"travel\",\n            \"location\": \"The Castro\",\n            \"duration\": travel_time_castro_to_sunset,\n            \"time\": format_time(travel_start_time),\n            \"to\": \"Sunset District\"\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": \"Sunset District\",\n            \"duration\": meeting_duration,\n            \"time\": format_time(meeting_start_time)\n        }\n    ])\n\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_40",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:18AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 45,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"PM\", \"PM\").replace(\"AM\", \"AM\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = str_to_time(\"9:00AM\")\n    george_start = str_to_time(\"7:30AM\")\n    george_end = str_to_time(\"1:15PM\")\n    min_meet_duration = 45\n    travel_to_haight = 18  # minutes\n    travel_to_north_beach = 19  # minutes\n\n    # Calculate possible meeting windows\n    earliest_departure = arrival_time\n    travel_duration = timedelta(minutes=travel_to_haight)\n    arrival_haight = earliest_departure + travel_duration\n\n    # Find the latest possible meeting start time\n    latest_meet_start = george_end - timedelta(minutes=min_meet_duration)\n    \n    if arrival_haight > latest_meet_start:\n        return {\"schedule\": []}  # No possible meeting\n    \n    # Determine when to leave to maximize meeting time\n    if arrival_haight < george_start:\n        # Need to wait until George is available\n        wait_duration = (george_start - arrival_haight).total_seconds() / 60\n        meet_start = george_start\n    else:\n        wait_duration = 0\n        meet_start = arrival_haight\n    \n    meet_end = meet_start + timedelta(minutes=min_meet_duration)\n    if meet_end > george_end:\n        return {\"schedule\": []}  # Not enough time\n    \n    # Build schedule\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"North Beach\",\n        \"time\": time_to_str(arrival_time)\n    })\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_to_haight,\n        \"time\": time_to_str(arrival_time),\n        \"to\": \"Haight-Ashbury\"\n    })\n    \n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Haight-Ashbury\",\n            \"time\": time_to_str(arrival_haight),\n            \"duration\": wait_duration\n        })\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": min_meet_duration,\n        \"time\": time_to_str(meet_start)\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_41",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:00PM",
                    "duration": 360.0
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "7:00PM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    timothy_available_start = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    timothy_available_end = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    min_meeting_duration = 30  # minutes\n    travel_nob_to_presidio = 17  # minutes\n    travel_presidio_to_nob = 18  # minutes\n\n    # Calculate earliest possible meeting start\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_nob_to_presidio)\n    \n    # Check if we arrive before Timothy is available\n    if travel_end_time < timothy_available_start:\n        wait_duration = (timothy_available_start - travel_end_time).total_seconds() / 60\n        meeting_start_time = timothy_available_start\n    else:\n        wait_duration = 0\n        meeting_start_time = travel_end_time\n    \n    # Check if we can meet for at least 30 minutes\n    if meeting_start_time + timedelta(minutes=min_meeting_duration) > timothy_available_end:\n        # Can't meet for required duration\n        meeting_start_time = None\n        meeting_duration = 0\n    else:\n        # Meet as long as possible (until Timothy leaves)\n        meeting_duration = (timothy_available_end - meeting_start_time).total_seconds() / 60\n    \n    # Build schedule\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Nob Hill\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": travel_nob_to_presidio,\n        \"time\": format_time(travel_start_time),\n        \"to\": \"Presidio\"\n    })\n    \n    if wait_duration > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": format_time(travel_end_time)\n        })\n    \n    if meeting_duration >= min_meeting_duration:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"duration\": meeting_duration,\n            \"time\": format_time(meeting_start_time)\n        })\n        \n        # Return trip\n        return_start_time = meeting_start_time + timedelta(minutes=meeting_duration)\n        return_end_time = return_start_time + timedelta(minutes=travel_presidio_to_nob)\n        \n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Nob Hill\",\n            \"duration\": travel_presidio_to_nob,\n            \"time\": format_time(return_start_time),\n            \"to\": \"Nob Hill\"\n        })\n    \n    return schedule\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    result = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_42",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:31AM",
                    "duration": 12,
                    "to": "Marina District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    sandra_available_start = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    sandra_available_end = datetime.strptime(\"11:45AM\", \"%I:%M%p\")\n    min_meeting_duration = 15  # minutes\n    travel_to_chinatown = 16  # minutes\n    travel_to_marina = 12  # minutes\n\n    # Calculate earliest possible arrival in Chinatown\n    travel_start = arrival_time\n    travel_end = travel_start + timedelta(minutes=travel_to_chinatown)\n    \n    # Calculate meeting window\n    meeting_start = max(travel_end, sandra_available_start)\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if meeting is possible\n    if meeting_end > sandra_available_end:\n        return {\"schedule\": []}\n    \n    # Calculate return time\n    return_start = meeting_end\n    return_end = return_start + timedelta(minutes=travel_to_marina)\n    \n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Marina District\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_to_chinatown, \n         \"time\": format_time(travel_start), \"to\": \"Chinatown\"},\n    ]\n    \n    if travel_end < sandra_available_start:\n        wait_duration = (sandra_available_start - travel_end).seconds // 60\n        schedule.append({\n            \"action\": \"wait\", \n            \"location\": \"Chinatown\", \n            \"duration\": wait_duration, \n            \"time\": format_time(travel_end)\n        })\n    \n    schedule.extend([\n        {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": min_meeting_duration, \n         \"time\": format_time(meeting_start)},\n        {\"action\": \"travel\", \"location\": \"Marina District\", \"duration\": travel_to_marina, \n         \"time\": format_time(return_start), \"to\": \"Marina District\"},\n    ])\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_43",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "10:58AM",
                    "duration": 12,
                    "to": "Pacific Heights"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 105,
                    "time": "9:13AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    betty_available_start = \"8:45AM\"\n    betty_available_end = \"6:00PM\"\n    min_meet_duration = 105\n    travel_to_wharf = 13\n    travel_to_heights = 12\n\n    current_time = str_to_time(arrival_time)\n    betty_start = str_to_time(betty_available_start)\n    betty_end = str_to_time(betty_available_end)\n\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Pacific Heights\",\n        \"time\": time_to_str(current_time)\n    })\n\n    # Check if we can meet immediately or need to wait\n    travel_start_time = current_time\n    arrival_at_wharf = travel_start_time + timedelta(minutes=travel_to_wharf)\n\n    if arrival_at_wharf < betty_start:\n        wait_duration = (betty_start - arrival_at_wharf).total_seconds() / 60\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_to_wharf,\n            \"time\": time_to_str(travel_start_time),\n            \"to\": \"Fisherman's Wharf\"\n        })\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Fisherman's Wharf\",\n            \"time\": time_to_str(arrival_at_wharf),\n            \"duration\": wait_duration\n        })\n        meet_start_time = betty_start\n    else:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Fisherman's Wharf\",\n            \"duration\": travel_to_wharf,\n            \"time\": time_to_str(travel_start_time),\n            \"to\": \"Fisherman's Wharf\"\n        })\n        meet_start_time = arrival_at_wharf\n\n    # Calculate meeting end time\n    meet_end_time = meet_start_time + timedelta(minutes=min_meet_duration)\n    if meet_end_time > betty_end:\n        meet_end_time = betty_end\n        actual_duration = (meet_end_time - meet_start_time).total_seconds() / 60\n    else:\n        actual_duration = min_meet_duration\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": actual_duration,\n        \"time\": time_to_str(meet_start_time)\n    })\n\n    # Return to Pacific Heights\n    return_start_time = meet_end_time\n    return_arrival_time = return_start_time + timedelta(minutes=travel_to_heights)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_to_heights,\n        \"time\": time_to_str(return_start_time),\n        \"to\": \"Pacific Heights\"\n    })\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_44",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "8:29PM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "8:45PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    emily_start = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    emily_end = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    min_meet_duration = 15\n    travel_to_alamo = 16\n    travel_to_north_beach = 15\n\n    # Calculate possible meeting window\n    latest_departure_from_north_beach = emily_end - timedelta(minutes=min_meet_duration)\n    latest_departure_from_north_beach -= timedelta(minutes=travel_to_alamo)\n    \n    # Check if we can meet Emily\n    can_meet = latest_departure_from_north_beach >= arrival_time\n    \n    schedule = [\n        {\"action\": \"start\", \"location\": \"North Beach\", \"time\": format_time(arrival_time)}\n    ]\n    \n    if can_meet:\n        # Optimal is to leave as late as possible to meet for minimum duration\n        travel_start_time = latest_departure_from_north_beach\n        arrival_at_alamo = travel_start_time + timedelta(minutes=travel_to_alamo)\n        meet_end_time = arrival_at_alamo + timedelta(minutes=min_meet_duration)\n        \n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"North Beach\",\n            \"duration\": travel_to_alamo,\n            \"time\": format_time(travel_start_time),\n            \"to\": \"Alamo Square\"\n        })\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Alamo Square\",\n            \"duration\": min_meet_duration,\n            \"time\": format_time(arrival_at_alamo)\n        })\n    else:\n        # Can't meet Emily, just stay at North Beach\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": format_time(arrival_time)\n        })\n    \n    # Convert to JSON\n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_45",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:19AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "4:30PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "6:00PM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 90,
                    "time": "4:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    robert_start = datetime.strptime(\"4:30PM\", \"%I:%M%p\")\n    robert_end = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    min_meet_duration = 90  # minutes\n    travel_haight_to_north = 19  # minutes\n    travel_north_to_haight = 18  # minutes\n\n    # Calculate possible meeting times\n    earliest_meet_start = robert_start\n    latest_meet_end = robert_end\n    latest_meet_start = latest_meet_end - timedelta(minutes=min_meet_duration)\n\n    # Calculate travel to North Beach\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_haight_to_north)\n\n    # Check if we can meet immediately after travel\n    possible_meet_start = max(travel_end_time, earliest_meet_start)\n    possible_meet_end = possible_meet_start + timedelta(minutes=min_meet_duration)\n\n    if possible_meet_end <= latest_meet_end:\n        # We can meet right after arriving\n        meet_start = possible_meet_start\n        meet_end = possible_meet_end\n    else:\n        # Need to wait until the latest possible meeting time\n        meet_start = latest_meet_start\n        meet_end = latest_meet_end\n\n    # Calculate return travel\n    return_travel_start = meet_end\n    return_travel_end = return_travel_start + timedelta(minutes=travel_north_to_haight)\n\n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Haight-Ashbury\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"North Beach\", \"duration\": travel_haight_to_north, \n         \"time\": format_time(travel_start_time), \"to\": \"North Beach\"}\n    ]\n\n    if travel_end_time < meet_start:\n        schedule.append({\n            \"action\": \"wait\", \"location\": \"North Beach\", \"time\": format_time(travel_end_time)\n        })\n\n    schedule.extend([\n        {\"action\": \"meet\", \"location\": \"North Beach\", \"duration\": min_meet_duration, \n         \"time\": format_time(meet_start)},\n        {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": travel_north_to_haight, \n         \"time\": format_time(return_travel_start), \"to\": \"Haight-Ashbury\"}\n    ])\n\n    # Output as JSON\n    result = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_46",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 15.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    arrival_time_str = '9:00AM'\n    arrival_location = 'Richmond District'\n    paul_available_start_str = '9:30AM'\n    paul_available_end_str = '11:15AM'\n    paul_location = 'Nob Hill'\n    travel_to_nob_hill = 17  # minutes\n    travel_to_richmond = 14  # minutes\n    min_meeting_duration = 15  # minutes\n\n    # Parse times\n    arrival_time = parse_time(arrival_time_str)\n    paul_start = parse_time(paul_available_start_str)\n    paul_end = parse_time(paul_available_end_str)\n\n    # Calculate possible meeting windows\n    # Option 1: Leave immediately to meet Paul as early as possible\n    depart_to_nob_hill = arrival_time\n    arrive_at_nob_hill = depart_to_nob_hill + timedelta(minutes=travel_to_nob_hill)\n    meet_start = max(arrive_at_nob_hill, paul_start)\n    meet_end = min(meet_start + timedelta(minutes=min_meeting_duration), paul_end)\n\n    # Option 2: Leave later to meet Paul for maximum time\n    latest_departure = paul_end - timedelta(minutes=min_meeting_duration) - timedelta(minutes=travel_to_nob_hill)\n    depart_to_nob_hill_opt2 = min(latest_departure, paul_start - timedelta(minutes=travel_to_nob_hill))\n    depart_to_nob_hill_opt2 = max(depart_to_nob_hill_opt2, arrival_time)\n    arrive_at_nob_hill_opt2 = depart_to_nob_hill_opt2 + timedelta(minutes=travel_to_nob_hill)\n    meet_start_opt2 = max(arrive_at_nob_hill_opt2, paul_start)\n    meet_end_opt2 = min(meet_start_opt2 + timedelta(minutes=min_meeting_duration), paul_end)\n\n    # Choose the option that gives earliest meeting time (could optimize differently)\n    if meet_end > meet_start:\n        selected_meet_start = meet_start\n        selected_meet_end = meet_end\n        selected_departure = depart_to_nob_hill\n    else:\n        selected_meet_start = meet_start_opt2\n        selected_meet_end = meet_end_opt2\n        selected_departure = depart_to_nob_hill_opt2\n\n    # Build schedule\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": format_time(arrival_time)\n    })\n\n    if selected_departure > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": arrival_location,\n            \"time\": format_time(arrival_time)\n        })\n\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": paul_location,\n        \"duration\": travel_to_nob_hill,\n        \"time\": format_time(selected_departure),\n        \"to\": paul_location\n    })\n\n    if selected_meet_start > arrive_at_nob_hill:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": paul_location,\n            \"time\": format_time(arrive_at_nob_hill)\n        })\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": paul_location,\n        \"duration\": (selected_meet_end - selected_meet_start).total_seconds() / 60,\n        \"time\": format_time(selected_meet_start)\n    })\n\n    # Output as JSON\n    output = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_47",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:21PM",
                    "duration": 9,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:30PM",
                    "duration": 30.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "9:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    joseph_start = datetime.strptime(\"9:30PM\", \"%I:%M%p\")\n    joseph_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    min_meet_duration = 15\n    travel_time_fd_to_us = 9\n    travel_time_us_to_fd = 9\n    \n    # Initialize schedule\n    schedule = []\n    current_time = arrival_time\n    current_location = \"Financial District\"\n    \n    # Start at Financial District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Plan to meet Joseph at Union Square\n    # Calculate latest departure time to arrive by 9:30PM for full 30 min meeting\n    latest_departure = joseph_start - timedelta(minutes=travel_time_fd_to_us)\n    \n    # If we have time before meeting Joseph, wait at Financial District\n    if current_time < latest_departure:\n        wait_duration = (latest_departure - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = latest_departure\n    \n    # Travel to Union Square\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time_fd_to_us,\n        \"time\": format_time(current_time),\n        \"to\": \"Union Square\"\n    })\n    current_time += timedelta(minutes=travel_time_fd_to_us)\n    current_location = \"Union Square\"\n    \n    # Meet Joseph (can meet for full 30 minutes)\n    meet_duration = (joseph_end - joseph_start).total_seconds() / 60\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": meet_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time = joseph_end\n    \n    return schedule\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    result = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_48",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "1:49PM",
                    "duration": 26,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "2:15PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "3:00PM",
                    "duration": 25,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    time_str = dt.strftime(\"%-I:%M%p\")\n    return time_str[:-2] + time_str[-2:].upper()\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    sarah_available_start = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    sarah_available_end = datetime.strptime(\"5:30PM\", \"%I:%M%p\")\n    min_meeting_duration = 45  # minutes\n    travel_to_bayview = 26  # minutes\n    travel_to_richmond = 25  # minutes\n\n    # Calculate possible meeting window\n    latest_departure_to_meet = sarah_available_end - timedelta(minutes=min_meeting_duration)\n    earliest_arrival_to_meet = sarah_available_start\n\n    # Calculate when to leave Richmond to arrive at Bayview for meeting\n    leave_richmond = earliest_arrival_to_meet - timedelta(minutes=travel_to_bayview)\n    if leave_richmond < arrival_time:\n        leave_richmond = arrival_time\n        arrival_bayview = leave_richmond + timedelta(minutes=travel_to_bayview)\n        if arrival_bayview > latest_departure_to_meet:\n            # Not enough time for meeting\n            return {\n                \"schedule\": [\n                    {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": format_time(arrival_time)},\n                    {\"action\": \"wait\", \"location\": \"Richmond District\", \"time\": format_time(arrival_time)},\n                    {\"action\": \"error\", \"message\": \"Cannot meet Sarah with given constraints\"}\n                ]\n            }\n    else:\n        arrival_bayview = earliest_arrival_to_meet\n\n    # Calculate meeting end time\n    meeting_end = arrival_bayview + timedelta(minutes=min_meeting_duration)\n    if meeting_end > sarah_available_end:\n        meeting_end = sarah_available_end\n        min_meeting_duration = int((meeting_end - arrival_bayview).total_seconds() / 60)\n\n    # Calculate return time\n    return_richmond = meeting_end + timedelta(minutes=travel_to_richmond)\n\n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Richmond District\", \"time\": format_time(arrival_time)}\n    ]\n\n    if leave_richmond > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Richmond District\",\n            \"time\": format_time(arrival_time)\n        })\n\n    schedule.extend([\n        {\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_to_bayview,\n            \"time\": format_time(leave_richmond),\n            \"to\": \"Bayview\"\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": \"Bayview\",\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(arrival_bayview)\n        },\n        {\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_to_richmond,\n            \"time\": format_time(meeting_end),\n            \"to\": \"Richmond District\"\n        }\n    ])\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_49",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    melissa_available_start = datetime.strptime(\"9:30AM\", \"%I:%M%p\")\n    melissa_available_end = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    min_meeting_duration = 75  # minutes\n    travel_to_nob_hill = 7  # minutes\n    travel_to_north_beach = 8  # minutes\n\n    # Calculate earliest possible meeting start\n    earliest_departure = arrival_time\n    travel_end_time = earliest_departure + timedelta(minutes=travel_to_nob_hill)\n    meeting_start = max(travel_end_time, melissa_available_start)\n    \n    # Calculate meeting end time\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if meeting fits within Melissa's availability\n    if meeting_end > melissa_available_end:\n        # Try latest possible meeting that fits\n        meeting_end = melissa_available_end\n        meeting_start = meeting_end - timedelta(minutes=min_meeting_duration)\n        if meeting_start < melissa_available_start:\n            # Not enough time to meet\n            schedule = [\n                {\"action\": \"start\", \"location\": \"North Beach\", \"time\": format_time(arrival_time)},\n                {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_to_nob_hill, \n                 \"time\": format_time(arrival_time), \"to\": \"Nob Hill\"},\n                {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": format_time(travel_end_time)},\n                {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": 0, \"time\": \"Not possible\"}\n            ]\n        else:\n            # Schedule latest possible meeting\n            travel_start_time = meeting_start - timedelta(minutes=travel_to_nob_hill)\n            if travel_start_time < arrival_time:\n                travel_start_time = arrival_time\n            schedule = [\n                {\"action\": \"start\", \"location\": \"North Beach\", \"time\": format_time(arrival_time)},\n                {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_to_nob_hill, \n                 \"time\": format_time(travel_start_time), \"to\": \"Nob Hill\"},\n                {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": min_meeting_duration, \n                 \"time\": format_time(meeting_start)}\n            ]\n    else:\n        # Schedule earliest possible meeting\n        schedule = [\n            {\"action\": \"start\", \"location\": \"North Beach\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_to_nob_hill, \n             \"time\": format_time(arrival_time), \"to\": \"Nob Hill\"},\n            {\"action\": \"wait\", \"location\": \"Nob Hill\", \"time\": format_time(travel_end_time)},\n            {\"action\": \"meet\", \"location\": \"Nob Hill\", \"duration\": min_meeting_duration, \n             \"time\": format_time(meeting_start)}\n        ]\n    \n    # Output as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_50",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "9:22AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:37AM",
                    "duration": 25,
                    "to": "The Castro"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 15,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    arrival_location = \"The Castro\"\n    arrival_time_str = \"9:00AM\"\n    laura_location = \"Embarcadero\"\n    laura_available_start_str = \"8:00AM\"\n    laura_available_end_str = \"11:00AM\"\n    travel_time_to_embarcadero = 22  # minutes\n    travel_time_to_castro = 25  # minutes\n    min_meeting_duration = 15  # minutes\n\n    # Convert times to datetime objects\n    arrival_time = parse_time(arrival_time_str)\n    laura_available_start = parse_time(laura_available_start_str)\n    laura_available_end = parse_time(laura_available_end_str)\n\n    # Calculate earliest possible departure from Castro\n    earliest_departure = arrival_time\n    travel_duration = timedelta(minutes=travel_time_to_embarcadero)\n    arrival_at_embarcadero = earliest_departure + travel_duration\n\n    # Calculate meeting window\n    meeting_start = max(arrival_at_embarcadero, laura_available_start)\n    meeting_end = min(meeting_start + timedelta(minutes=min_meeting_duration), laura_available_end)\n\n    # Check if meeting is possible\n    if meeting_end - meeting_start >= timedelta(minutes=min_meeting_duration):\n        # Build schedule\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": laura_location, \"duration\": travel_time_to_embarcadero,\n             \"time\": format_time(earliest_departure), \"to\": laura_location},\n            {\"action\": \"meet\", \"location\": laura_location, \"duration\": min_meeting_duration,\n             \"time\": format_time(meeting_start)},\n            {\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_time_to_castro,\n             \"time\": format_time(meeting_end), \"to\": arrival_location}\n        ]\n    else:\n        # No meeting possible\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"wait\", \"location\": arrival_location, \"time\": format_time(arrival_time)}\n        ]\n\n    # Output as JSON\n    result = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_51",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "1:01PM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "1:15PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "2:00PM",
                    "duration": 13,
                    "to": "Russian Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_location = \"Russian Hill\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Barbara's availability\n    barbara_start = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    barbara_end = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    min_meet_duration = timedelta(minutes=45)\n    \n    # Travel times\n    travel_to_richmond = timedelta(minutes=14)\n    travel_to_russian = timedelta(minutes=13)\n    \n    # Calculate possible meeting times\n    earliest_departure = barbara_start - travel_to_richmond\n    latest_departure = barbara_end - min_meet_duration - travel_to_richmond\n    \n    # Check if we can make it to meet Barbara\n    if arrival_time > latest_departure:\n        # Can't meet Barbara\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"wait\", \"location\": arrival_location, \"time\": format_time(arrival_time)}\n        ]\n    else:\n        # Determine when to leave Russian Hill\n        depart_time = max(arrival_time, earliest_departure)\n        \n        # Travel to Richmond\n        travel_start = depart_time\n        travel_end = travel_start + travel_to_richmond\n        \n        # Meet Barbara (as early as possible)\n        meet_start = max(travel_end, barbara_start)\n        meet_end = meet_start + min_meet_duration\n        \n        # Travel back to Russian Hill\n        return_start = meet_end\n        return_end = return_start + travel_to_russian\n        \n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"wait\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": 14, \"time\": format_time(travel_start), \"to\": \"Richmond District\"},\n            {\"action\": \"meet\", \"location\": \"Richmond District\", \"duration\": 45, \"time\": format_time(meet_start)},\n            {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": 13, \"time\": format_time(return_start), \"to\": \"Russian Hill\"}\n        ]\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_52",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:13AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "10:15AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "12:15PM",
                    "duration": 12,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 120,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    ashley_start = datetime.strptime(\"10:15AM\", \"%I:%M%p\")\n    ashley_end = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    min_meet_duration = 120\n    travel_to_alamo = 13\n    travel_to_richmond = 12\n\n    current_location = \"Richmond District\"\n    current_time = arrival_time\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": format_time(current_time)}]\n\n    # Calculate earliest possible arrival at Alamo Square\n    travel_start = current_time\n    travel_end = travel_start + timedelta(minutes=travel_to_alamo)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_to_alamo,\n        \"time\": format_time(travel_start),\n        \"to\": \"Alamo Square\"\n    })\n    current_time = travel_end\n    current_location = \"Alamo Square\"\n\n    # Check if we arrive before Ashley is available\n    if current_time < ashley_start:\n        wait_duration = (ashley_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = ashley_start\n\n    # Calculate meeting time\n    meet_end = current_time + timedelta(minutes=min_meet_duration)\n    if meet_end > ashley_end:\n        # Not enough time to meet, adjust to maximum possible\n        meet_duration = (ashley_end - current_time).total_seconds() / 60\n        if meet_duration <= 0:\n            # No time to meet, return empty schedule\n            return {\"schedule\": schedule}\n        meet_end = ashley_end\n    else:\n        meet_duration = min_meet_duration\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": meet_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time = meet_end\n\n    # Travel back to Richmond District\n    travel_start = current_time\n    travel_end = travel_start + timedelta(minutes=travel_to_richmond)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_to_richmond,\n        \"time\": format_time(travel_start),\n        \"to\": \"Richmond District\"\n    })\n\n    return {\"schedule\": schedule}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_53",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "12:58PM",
                    "duration": 17.0,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "1:15PM",
                    "duration": 45.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    william_available_start = datetime.strptime(\"1:15PM\", \"%I:%M%p\")\n    william_available_end = datetime.strptime(\"2:15PM\", \"%I:%M%p\")\n    meeting_duration = timedelta(minutes=45)\n    travel_time_to_mission = timedelta(minutes=17)\n    travel_time_to_financial = timedelta(minutes=17)\n    \n    # Calculate latest possible departure to meet William for 45 minutes\n    latest_departure_for_meeting = william_available_end - meeting_duration\n    latest_departure_from_financial = latest_departure_for_meeting - travel_time_to_mission\n    \n    # Calculate earliest possible arrival to Mission\n    earliest_arrival_at_mission = arrival_time + travel_time_to_mission\n    \n    # Determine when to leave Financial District\n    if earliest_arrival_at_mission <= william_available_start:\n        # Can arrive early and wait\n        departure_time = william_available_start - travel_time_to_mission\n        wait_duration = william_available_start - earliest_arrival_at_mission\n    else:\n        # Need to leave later to arrive right at meeting time\n        departure_time = arrival_time\n        wait_duration = timedelta(0)\n    \n    # Build schedule\n    schedule = []\n    \n    # Start at Financial District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Financial District\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Time until departure\n    if departure_time > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Financial District\",\n            \"time\": format_time(arrival_time)\n        })\n    \n    # Travel to Mission District\n    travel_start_time = max(arrival_time, departure_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Mission District\",\n        \"duration\": travel_time_to_mission.total_seconds() // 60,\n        \"time\": format_time(travel_start_time),\n        \"to\": \"Mission District\"\n    })\n    \n    # Arrival at Mission District\n    arrival_at_mission = travel_start_time + travel_time_to_mission\n    \n    # Waiting time if any\n    if wait_duration.total_seconds() > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Mission District\",\n            \"time\": format_time(arrival_at_mission)\n        })\n    \n    # Meeting with William\n    meeting_start = max(arrival_at_mission, william_available_start)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"duration\": meeting_duration.total_seconds() // 60,\n        \"time\": format_time(meeting_start)\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_54",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "11:22AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef main():\n    # Input parameters\n    start_location = \"Financial District\"\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    helen_location = \"Nob Hill\"\n    helen_available_start = datetime.strptime(\"11:30AM\", \"%I:%M%p\")\n    helen_available_end = datetime.strptime(\"12:15PM\", \"%I:%M%p\")\n    required_meeting_duration = 45  # minutes\n    travel_to_nob_hill = 8  # minutes\n    travel_to_financial = 9  # minutes\n\n    # Calculate possible meeting times\n    latest_departure_to_meet = helen_available_end - timedelta(minutes=required_meeting_duration)\n    latest_departure_from_financial = latest_departure_to_meet - timedelta(minutes=travel_to_nob_hill)\n\n    # Determine when to leave Financial District\n    leave_financial_time = max(start_time, latest_departure_from_financial)\n\n    # Calculate arrival at Nob Hill\n    arrive_nob_hill_time = leave_financial_time + timedelta(minutes=travel_to_nob_hill)\n\n    # Calculate meeting start time (can't be before Helen's availability)\n    meeting_start_time = max(arrive_nob_hill_time, helen_available_start)\n    meeting_end_time = meeting_start_time + timedelta(minutes=required_meeting_duration)\n\n    # Check if meeting is possible\n    if meeting_end_time > helen_available_end:\n        print(json.dumps({\"schedule\": []}))\n        return\n\n    # Build schedule\n    schedule = []\n\n    # Start at Financial District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n\n    # Wait if needed before leaving\n    if leave_financial_time > start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(start_time)\n        })\n\n    # Travel to Nob Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_to_nob_hill,\n        \"time\": format_time(leave_financial_time),\n        \"to\": helen_location\n    })\n\n    # Wait if arrived early\n    if arrive_nob_hill_time < helen_available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": helen_location,\n            \"time\": format_time(arrive_nob_hill_time)\n        })\n\n    # Meet Helen\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": helen_location,\n        \"duration\": required_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n\n    # Output the schedule\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_55",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "10:07AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:15AM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "11:00AM",
                    "duration": 6,
                    "to": "Chinatown"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    arrival_location = \"Chinatown\"\n    arrival_time_str = \"9:00AM\"\n    joshua_location = \"Nob Hill\"\n    joshua_start_str = \"10:15AM\"\n    joshua_end_str = \"1:00PM\"\n    min_meeting_duration = 45\n    travel_times = {\n        (\"Chinatown\", \"Nob Hill\"): 8,\n        (\"Nob Hill\", \"Chinatown\"): 6\n    }\n\n    # Convert times to datetime objects\n    current_time = parse_time(arrival_time_str)\n    joshua_start = parse_time(joshua_start_str)\n    joshua_end = parse_time(joshua_end_str)\n\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": format_time(current_time)\n    })\n\n    # Calculate when to leave Chinatown to arrive at Nob Hill by 10:15AM\n    travel_duration = travel_times[(arrival_location, joshua_location)]\n    departure_time = joshua_start - timedelta(minutes=travel_duration)\n\n    # If we have time before departure, wait in Chinatown\n    if current_time < departure_time:\n        wait_duration = (departure_time - current_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": arrival_location,\n            \"time\": format_time(current_time),\n            \"duration\": wait_duration\n        })\n        current_time = departure_time\n\n    # Travel to Nob Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": joshua_location\n    })\n    current_time += timedelta(minutes=travel_duration)\n\n    # Meet with Joshua for 45 minutes\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > joshua_end:\n        # If we can't meet for full duration, adjust to end at Joshua's availability\n        meeting_duration = (joshua_end - current_time).seconds // 60\n        meeting_end = current_time + timedelta(minutes=meeting_duration)\n    else:\n        meeting_duration = min_meeting_duration\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": joshua_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time = meeting_end\n\n    # Travel back to Chinatown\n    travel_duration = travel_times[(joshua_location, arrival_location)]\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": joshua_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": arrival_location\n    })\n    current_time += timedelta(minutes=travel_duration)\n\n    # Output the schedule as JSON\n    output = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_56",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "10:30AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "11:30AM",
                    "duration": 22,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    arrival_time = parse_time('9:00AM')\n    jessica_start = parse_time('10:30AM')\n    jessica_end = parse_time('5:45PM')\n    min_meet_duration = 60\n    travel_to_sunset = 23\n    travel_to_bayview = 22\n\n    # Calculate possible meeting windows\n    # Earliest we can arrive at Sunset: 9:00AM + 23 min = 9:23AM\n    earliest_arrival_sunset = arrival_time + timedelta(minutes=travel_to_sunset)\n    # But Jessica is only available from 10:30AM\n    meeting_start = max(earliest_arrival_sunset, jessica_start)\n    meeting_end = meeting_start + timedelta(minutes=min_meet_duration)\n\n    if meeting_end > jessica_end:\n        # Not enough time to meet\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Bayview\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_to_sunset, \n             \"time\": format_time(arrival_time), \"to\": \"Sunset District\"},\n            {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": format_time(earliest_arrival_sunset)},\n            {\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_to_bayview, \n             \"time\": format_time(earliest_arrival_sunset), \"to\": \"Bayview\"}\n        ]\n    else:\n        # Can meet Jessica\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Bayview\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": travel_to_sunset, \n             \"time\": format_time(arrival_time), \"to\": \"Sunset District\"},\n            {\"action\": \"wait\", \"location\": \"Sunset District\", \"time\": format_time(earliest_arrival_sunset)},\n            {\"action\": \"meet\", \"location\": \"Sunset District\", \"duration\": min_meet_duration, \n             \"time\": format_time(meeting_start)},\n            {\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_to_bayview, \n             \"time\": format_time(meeting_end), \"to\": \"Bayview\"}\n        ]\n\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_57",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:00AM",
                    "duration": 20,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "9:20AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 30,
                    "time": "9:20AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time_str = \"9:00AM\"\n    arrival_location = \"The Castro\"\n    nancy_start_str = \"9:15AM\"\n    nancy_end_str = \"4:45PM\"\n    nancy_location = \"Financial District\"\n    min_meeting_duration = 30  # minutes\n    travel_to_financial = 20  # minutes\n    travel_to_castro = 23  # minutes\n\n    # Parse times\n    arrival_time = parse_time(arrival_time_str)\n    nancy_start = parse_time(nancy_start_str)\n    nancy_end = parse_time(nancy_end_str)\n\n    # Initialize schedule\n    schedule = []\n    current_time = arrival_time\n    current_location = arrival_location\n\n    # Start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n\n    # Check if we can meet Nancy\n    # Earliest we can arrive at Financial District\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_to_financial)\n    earliest_arrival = travel_end_time\n\n    # Check if we can arrive before Nancy leaves\n    if earliest_arrival < nancy_end:\n        # Add travel action\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_to_financial,\n            \"time\": format_time(travel_start_time),\n            \"to\": nancy_location\n        })\n        current_time = travel_end_time\n        current_location = nancy_location\n\n        # Check if we need to wait\n        if current_time < nancy_start:\n            wait_duration = (nancy_start - current_time).seconds // 60\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": format_time(current_time)\n            })\n            current_time = nancy_start\n\n        # Calculate meeting time (as long as possible, but at least 30 mins)\n        meeting_end = min(current_time + timedelta(minutes=min_meeting_duration), nancy_end)\n        meeting_duration = (meeting_end - current_time).seconds // 60\n\n        if meeting_duration >= min_meeting_duration:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": meeting_duration,\n                \"time\": format_time(current_time)\n            })\n            current_time = meeting_end\n\n    return schedule\n\nschedule = compute_schedule()\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_58",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 105
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "11:04AM",
                    "duration": 18,
                    "to": "Bayview"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 105,
                    "time": "9:19AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"PM\", \"PM\").replace(\"AM\", \"AM\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    richard_start = datetime.strptime(\"7:00AM\", \"%I:%M%p\")\n    richard_end = datetime.strptime(\"3:45PM\", \"%I:%M%p\")\n    meeting_duration = timedelta(minutes=105)\n    travel_to_haight = timedelta(minutes=19)\n    travel_to_bayview = timedelta(minutes=18)\n    \n    # Calculate earliest meeting start\n    earliest_meeting_start = arrival_time + travel_to_haight\n    \n    # Calculate latest meeting start\n    latest_meeting_start = richard_end - meeting_duration\n    \n    # Check if meeting is possible\n    if earliest_meeting_start > latest_meeting_start:\n        return {\"schedule\": []}\n    \n    # Optimal meeting is as early as possible\n    meeting_start = earliest_meeting_start\n    meeting_end = meeting_start + meeting_duration\n    \n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Bayview\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Haight-Ashbury\", \"duration\": 19, \n         \"time\": format_time(arrival_time), \"to\": \"Haight-Ashbury\"},\n        {\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"duration\": 105, \n         \"time\": format_time(meeting_start)},\n        {\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": 18, \n         \"time\": format_time(meeting_end), \"to\": \"Bayview\"}\n    ]\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_59",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "7:08PM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "7:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 45,
                    "time": "6:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    carol_available_start = \"6:30PM\"\n    carol_available_end = \"8:00PM\"\n    travel_time_to_chinatown = 7\n    min_meet_duration = 45\n    \n    # Convert times to datetime objects\n    current_time = str_to_time(arrival_time)\n    carol_start = str_to_time(carol_available_start)\n    carol_end = str_to_time(carol_available_end)\n    \n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Union Square\",\n        \"time\": time_to_str(current_time)\n    })\n    \n    # Calculate when to leave for Chinatown\n    # Need to arrive by carol_end - min_meet_duration\n    latest_arrival_time = carol_end - timedelta(minutes=min_meet_duration)\n    latest_departure_time = latest_arrival_time - timedelta(minutes=travel_time_to_chinatown)\n    \n    # Check if we can meet at all\n    if latest_departure_time < current_time:\n        return {\"schedule\": schedule}  # Can't meet Carol\n    \n    # Wait until departure time (if needed)\n    if current_time < latest_departure_time:\n        wait_duration = (latest_departure_time - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Union Square\",\n            \"time\": time_to_str(current_time),\n            \"duration\": wait_duration\n        })\n        current_time = latest_departure_time\n    \n    # Travel to Chinatown\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Union Square\",\n        \"duration\": travel_time_to_chinatown,\n        \"time\": time_to_str(current_time),\n        \"to\": \"Chinatown\"\n    })\n    current_time += timedelta(minutes=travel_time_to_chinatown)\n    \n    # Wait until Carol arrives if needed\n    if current_time < carol_start:\n        wait_duration = (carol_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Chinatown\",\n            \"time\": time_to_str(current_time),\n            \"duration\": wait_duration\n        })\n        current_time = carol_start\n    \n    # Meet Carol\n    meet_end_time = current_time + timedelta(minutes=min_meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"duration\": min_meet_duration,\n        \"time\": time_to_str(current_time)\n    })\n    current_time = meet_end_time\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_60",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "8:19PM",
                    "duration": 11,
                    "to": "Presidio"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "8:30PM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "10:00PM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 90,
                    "time": "7:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    stephanie_start = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    stephanie_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    min_meet_duration = 90  # minutes\n    travel_to_presidio = 11  # minutes\n    travel_to_park = 12  # minutes\n\n    # Calculate latest possible departure from Golden Gate Park to meet Stephanie for 90 minutes\n    latest_departure_for_meeting = stephanie_end - timedelta(minutes=min_meet_duration)\n    latest_departure_from_park = latest_departure_for_meeting - timedelta(minutes=travel_to_presidio)\n\n    # Calculate possible meeting schedules\n    if latest_departure_from_park >= arrival_time:\n        # We can go anytime between arrival and latest_departure_from_park\n        # For optimal schedule, we'll go as late as possible to maximize time at Golden Gate Park\n        travel_time = latest_departure_from_park\n        meet_start = latest_departure_for_meeting\n    else:\n        # Not enough time to meet for 90 minutes, so we can't meet Stephanie\n        schedule = {\n            \"schedule\": [\n                {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": format_time(arrival_time)},\n                {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": format_time(arrival_time)},\n            ]\n        }\n        print(json.dumps(schedule, indent=2))\n        return\n\n    # Build schedule\n    schedule_entries = [\n        {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": travel_to_presidio, \n         \"time\": format_time(latest_departure_from_park), \"to\": \"Presidio\"},\n        {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": min_meet_duration, \n         \"time\": format_time(meet_start)},\n    ]\n\n    # Check if we have time to return to Golden Gate Park\n    meeting_end = meet_start + timedelta(minutes=min_meet_duration)\n    return_time = meeting_end + timedelta(minutes=travel_to_park)\n    if return_time.time() <= datetime.strptime(\"11:59PM\", \"%I:%M%p\").time():\n        schedule_entries.append(\n            {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_to_park, \n             \"time\": format_time(meeting_end), \"to\": \"Golden Gate Park\"}\n        )\n\n    result = {\n        \"schedule\": schedule_entries\n    }\n\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_61",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "11:16AM",
                    "duration": 14,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = str_to_time('9:00AM')\n    amanda_start = str_to_time('11:30AM')\n    amanda_end = str_to_time('9:15PM')\n    min_meeting_duration = 15  # minutes\n    presidio_to_russian_hill = 14  # minutes\n    current_location = 'Presidio'\n    \n    schedule = []\n    \n    # Initial state\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": time_to_str(arrival_time)\n    })\n    \n    current_time = arrival_time\n    \n    # Calculate earliest possible departure to meet Amanda\n    # Need to arrive at Russian Hill by 11:30AM at earliest\n    travel_start_time = amanda_start - timedelta(minutes=presidio_to_russian_hill)\n    \n    if current_time < travel_start_time:\n        # Wait at Presidio until it's time to leave\n        wait_duration = (travel_start_time - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": time_to_str(current_time),\n            \"duration\": int(wait_duration)\n        })\n        current_time = travel_start_time\n    \n    # Travel to Russian Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": presidio_to_russian_hill,\n        \"time\": time_to_str(current_time),\n        \"to\": \"Russian Hill\"\n    })\n    current_time += timedelta(minutes=presidio_to_russian_hill)\n    current_location = \"Russian Hill\"\n    \n    # Meet Amanda\n    meeting_end = min(current_time + timedelta(minutes=min_meeting_duration), amanda_end)\n    meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": int(meeting_duration),\n        \"time\": time_to_str(current_time)\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_62",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 31,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "9:31AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 31,
                    "time": "9:31AM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "9:31AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time_str = '9:00AM'\n    nancy_available_start_str = '7:15AM'\n    nancy_available_end_str = '5:30PM'\n    travel_time_presidio_to_bayview = 31\n    min_meeting_duration = 30\n    \n    # Parse times\n    arrival_time = parse_time(arrival_time_str)\n    nancy_available_start = parse_time(nancy_available_start_str)\n    nancy_available_end = parse_time(nancy_available_end_str)\n    \n    # Calculate earliest possible meeting\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_presidio_to_bayview)\n    \n    # Check if Nancy is available when we arrive\n    meeting_start_time = max(travel_end_time, nancy_available_start)\n    meeting_end_time = meeting_start_time + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end_time > nancy_available_end:\n        return {\"schedule\": []}  # No possible meeting\n    \n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Presidio\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_time_presidio_to_bayview, \n         \"time\": format_time(travel_start_time), \"to\": \"Bayview\"}\n    ]\n    \n    if travel_end_time < nancy_available_start:\n        wait_duration = (nancy_available_start - travel_end_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\", \"location\": \"Bayview\", \"time\": format_time(travel_end_time)\n        })\n    \n    schedule.append({\n        \"action\": \"meet\", \"location\": \"Bayview\", \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_63",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "3:37PM",
                    "duration": 8,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "3:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "3:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    start_location = \"Nob Hill\"\n    start_time_str = \"9:00AM\"\n    margaret_location = \"Pacific Heights\"\n    margaret_start_str = \"3:45PM\"\n    margaret_end_str = \"7:15PM\"\n    min_meet_duration = 45  # minutes\n    travel_time = 8  # minutes\n\n    # Parse times\n    start_time = parse_time(start_time_str)\n    margaret_start = parse_time(margaret_start_str)\n    margaret_end = parse_time(margaret_end_str)\n\n    # Calculate possible meeting window\n    earliest_arrival = margaret_start\n    latest_departure = margaret_end - timedelta(minutes=min_meet_duration)\n\n    # Calculate when to leave Nob Hill to arrive at earliest possible time\n    travel_start_earliest = earliest_arrival - timedelta(minutes=travel_time)\n    if travel_start_earliest < start_time:\n        # Can't leave before arrival time, must wait until start_time\n        travel_start_earliest = start_time\n        earliest_arrival = travel_start_earliest + timedelta(minutes=travel_time)\n\n    # Calculate when to leave Nob Hill to arrive at latest possible time\n    travel_start_latest = latest_departure - timedelta(minutes=travel_time)\n    if travel_start_latest < start_time:\n        travel_start_latest = start_time\n\n    # Choose the earliest possible meeting time\n    travel_start = travel_start_earliest\n    arrival_time = travel_start + timedelta(minutes=travel_time)\n    meet_end_time = arrival_time + timedelta(minutes=min_meet_duration)\n\n    # Build schedule\n    schedule = []\n\n    # Start at Nob Hill\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n\n    # Wait until travel time (if needed)\n    if start_time < travel_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": start_location,\n            \"time\": format_time(start_time)\n        })\n\n    # Travel to Pacific Heights\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time,\n        \"time\": format_time(travel_start),\n        \"to\": margaret_location\n    })\n\n    # Meet with Margaret\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": margaret_location,\n        \"duration\": min_meet_duration,\n        \"time\": format_time(arrival_time)\n    })\n\n    # Output as JSON\n    result = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_64",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "7:50PM",
                    "duration": 25,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "8:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 45,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    sandra_start = datetime.strptime(\"7:00PM\", \"%I:%M%p\")\n    sandra_end = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    min_meet_duration = 45  # minutes\n    travel_time_park_to_embarcadero = 25  # minutes\n    travel_time_embarcadero_to_park = 25  # minutes\n\n    # Calculate latest departure time to meet Sandra for 45 minutes\n    latest_departure_from_park = sandra_end - timedelta(minutes=min_meet_duration) - timedelta(minutes=travel_time_park_to_embarcadero)\n    \n    # Check if it's possible to meet Sandra\n    if latest_departure_from_park < arrival_time:\n        # Not possible to meet Sandra\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": format_time(arrival_time)},\n            {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": format_time(arrival_time)}\n        ]\n    else:\n        # Possible to meet Sandra\n        travel_start_time = latest_departure_from_park\n        meet_start_time = travel_start_time + timedelta(minutes=travel_time_park_to_embarcadero)\n        meet_end_time = meet_start_time + timedelta(minutes=min_meet_duration)\n        \n        schedule = [\n            {\"action\": \"start\", \"location\": \"Golden Gate Park\", \"time\": format_time(arrival_time)},\n            {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Embarcadero\", \"duration\": travel_time_park_to_embarcadero, \n             \"time\": format_time(travel_start_time), \"to\": \"Embarcadero\"},\n            {\"action\": \"meet\", \"location\": \"Embarcadero\", \"duration\": min_meet_duration, \"time\": format_time(meet_start_time)}\n        ]\n\n    # Output the schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_65",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:15AM",
                    "duration": 120
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "1:15PM",
                    "duration": 18,
                    "to": "Nob Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 120,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    arrival_time = parse_time('9:00AM')\n    robert_start = parse_time('11:15AM')\n    robert_end = parse_time('5:45PM')\n    min_meet_duration = 120\n    travel_to_presidio = 17\n    travel_to_nob_hill = 18\n\n    # Calculate possible meeting windows\n    earliest_departure = arrival_time\n    travel_duration = timedelta(minutes=travel_to_presidio)\n    arrival_at_presidio = earliest_departure + travel_duration\n\n    # Determine meeting start time\n    if arrival_at_presidio < robert_start:\n        wait_duration = robert_start - arrival_at_presidio\n        meet_start = robert_start\n    else:\n        wait_duration = timedelta(0)\n        meet_start = arrival_at_presidio\n\n    # Ensure we have enough time to meet\n    if meet_start + timedelta(minutes=min_meet_duration) > robert_end:\n        # Not enough time to meet\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_to_presidio, \n             \"time\": format_time(earliest_departure), \"to\": \"Presidio\"},\n            {\"action\": \"wait\", \"location\": \"Presidio\", \"time\": format_time(arrival_at_presidio)},\n            {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_to_nob_hill, \n             \"time\": format_time(arrival_at_presidio), \"to\": \"Nob Hill\"}\n        ]\n    else:\n        # Schedule the meeting\n        meet_end = meet_start + timedelta(minutes=min_meet_duration)\n        travel_back_start = meet_end\n        arrival_back_nob_hill = travel_back_start + timedelta(minutes=travel_to_nob_hill)\n\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Nob Hill\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Presidio\", \"duration\": travel_to_presidio, \n             \"time\": format_time(earliest_departure), \"to\": \"Presidio\"},\n        ]\n        \n        if wait_duration.total_seconds() > 0:\n            schedule.append({\n                \"action\": \"wait\", \n                \"location\": \"Presidio\", \n                \"time\": format_time(arrival_at_presidio)\n            })\n        \n        schedule.extend([\n            {\"action\": \"meet\", \"location\": \"Presidio\", \"duration\": min_meet_duration, \n             \"time\": format_time(meet_start)},\n            {\"action\": \"travel\", \"location\": \"Nob Hill\", \"duration\": travel_to_nob_hill, \n             \"time\": format_time(travel_back_start), \"to\": \"Nob Hill\"}\n        ])\n\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_66",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "8:15PM",
                    "duration": 26,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "8:41PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 105,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    kenneth_start = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    kenneth_end = datetime.strptime(\"10:00PM\", \"%I:%M%p\")\n    meet_duration = 105  # minutes\n    travel_to_financial = 26  # minutes\n    travel_to_park = 23  # minutes\n\n    # Calculate latest possible departure to meet Kenneth for required duration\n    latest_departure_from_park = kenneth_end - timedelta(minutes=meet_duration)\n    travel_arrival_at_financial = latest_departure_from_park + timedelta(minutes=travel_to_financial)\n\n    # Check if meeting is possible\n    if travel_arrival_at_financial > kenneth_end:\n        print(json.dumps({\"schedule\": [], \"error\": \"Meeting not possible with given constraints\"}))\n        return\n\n    # Build schedule\n    schedule = []\n\n    # Start at Golden Gate Park\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": format_time(arrival_time)\n    })\n\n    # Travel to Financial District\n    travel_start = latest_departure_from_park\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": travel_to_financial,\n        \"time\": format_time(travel_start),\n        \"to\": \"Financial District\"\n    })\n\n    # Arrive and meet Kenneth\n    meet_start = travel_start + timedelta(minutes=travel_to_financial)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"duration\": meet_duration,\n        \"time\": format_time(meet_start)\n    })\n\n    # Output the schedule\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_67",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "9:17AM",
                    "duration": 30
                },
                {
                    "action": "end",
                    "location": "Russian Hill",
                    "time": "9:47AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 30,
                    "time": "9:17AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    arrival_location = \"Haight-Ashbury\"\n    arrival_time_str = \"9:00AM\"\n    patricia_location = \"Russian Hill\"\n    patricia_available_start_str = \"7:45AM\"\n    patricia_available_end_str = \"2:15PM\"\n    travel_time_to_russian_hill = 17  # minutes\n    min_meeting_duration = 30  # minutes\n\n    # Parse times\n    arrival_time = parse_time(arrival_time_str)\n    patricia_available_start = parse_time(patricia_available_start_str)\n    patricia_available_end = parse_time(patricia_available_end_str)\n\n    # Calculate earliest possible meeting start\n    travel_start_time = arrival_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time_to_russian_hill)\n    \n    # Find meeting window\n    meeting_start = max(travel_end_time, patricia_available_start)\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end > patricia_available_end:\n        # No valid meeting time\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time_str},\n            {\"action\": \"travel\", \"location\": patricia_location, \"duration\": travel_time_to_russian_hill, \n             \"time\": format_time(travel_start_time), \"to\": patricia_location},\n            {\"action\": \"wait\", \"location\": patricia_location, \"time\": format_time(travel_end_time)},\n            {\"action\": \"no_meeting_possible\", \"location\": patricia_location, \"time\": format_time(travel_end_time)}\n        ]\n    else:\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": arrival_time_str},\n            {\"action\": \"travel\", \"location\": patricia_location, \"duration\": travel_time_to_russian_hill, \n             \"time\": format_time(travel_start_time), \"to\": patricia_location},\n            {\"action\": \"meet\", \"location\": patricia_location, \"duration\": min_meeting_duration, \n             \"time\": format_time(meeting_start)},\n            {\"action\": \"end\", \"location\": patricia_location, \"time\": format_time(meeting_end)}\n        ]\n    \n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_68",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:07AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 90,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    mark_start = datetime.strptime(\"8:00AM\", \"%I:%M%p\")\n    mark_end = datetime.strptime(\"12:45PM\", \"%I:%M%p\")\n    min_meet_duration = 90  # minutes\n    travel_time = 7  # minutes\n\n    # Initialize schedule\n    schedule = []\n    current_location = \"Chinatown\"\n    current_time = arrival_time\n\n    # Add start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n\n    # Calculate earliest possible meeting start time\n    travel_start_time = current_time\n    travel_end_time = travel_start_time + timedelta(minutes=travel_time)\n    earliest_meet_start = travel_end_time\n\n    # Find the optimal meeting window\n    meet_start = max(earliest_meet_start, mark_start)\n    meet_end = meet_start + timedelta(minutes=min_meet_duration)\n\n    if meet_end > mark_end:\n        # Not enough time to meet for 90 minutes\n        return {\"schedule\": schedule}\n\n    # Add travel action\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_time,\n        \"time\": format_time(travel_start_time),\n        \"to\": \"Union Square\"\n    })\n\n    # Check if we need to wait\n    if earliest_meet_start < mark_start:\n        wait_duration = (mark_start - earliest_meet_start).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Union Square\",\n            \"time\": format_time(earliest_meet_start),\n            \"duration\": int(wait_duration)\n        })\n\n    # Add meet action\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meet_start)\n    })\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_69",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 24,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:24AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 24,
                    "time": "9:24AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 30,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef compute_optimal_schedule():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    arrival_location = \"Golden Gate Park\"\n    ronald_available_start = \"9:30AM\"\n    ronald_available_end = \"6:30PM\"\n    ronald_location = \"North Beach\"\n    travel_to_north_beach_duration = 24\n    travel_to_golden_gate_duration = 22\n    min_meeting_duration = 30\n\n    # Convert time string to minutes since midnight\n    def time_to_minutes(time_str):\n        time_part, period = time_str[:-2], time_str[-2:]\n        hours, minutes = map(int, time_part.split(':'))\n        if period == \"PM\" and hours != 12:\n            hours += 12\n        elif period == \"AM\" and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n\n    # Convert minutes since midnight to time string\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        mins = minutes % 60\n        period = \"AM\" if hours < 12 else \"PM\"\n        if hours == 0:\n            hours = 12\n        elif hours > 12:\n            hours -= 12\n        return f\"{hours}:{mins:02d}{period}\"\n\n    # Initialize variables\n    current_time = time_to_minutes(arrival_time)\n    current_location = arrival_location\n    schedule = [{\"action\": \"start\", \"location\": current_location, \"time\": arrival_time}]\n\n    # Calculate possible meeting times\n    ronald_start = time_to_minutes(ronald_available_start)\n    ronald_end = time_to_minutes(ronald_available_end)\n\n    # Travel to North Beach\n    if current_location != ronald_location:\n        travel_start_time = current_time\n        travel_end_time = travel_start_time + travel_to_north_beach_duration\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_to_north_beach_duration,\n            \"time\": minutes_to_time(travel_start_time),\n            \"to\": ronald_location\n        })\n        current_time = travel_end_time\n        current_location = ronald_location\n\n    # Check if we can meet Ronald immediately\n    if current_time < ronald_start:\n        wait_duration = ronald_start - current_time\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": minutes_to_time(current_time)\n        })\n        current_time = ronald_start\n\n    # Schedule meeting\n    meeting_end_time = current_time + min_meeting_duration\n    if meeting_end_time <= ronald_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": minutes_to_time(current_time)\n        })\n        current_time = meeting_end_time\n\n    # Travel back to Golden Gate Park if desired (not required in problem statement)\n    # Return the schedule\n    return {\"schedule\": schedule}\n\nresult = compute_optimal_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_70",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "10:42AM",
                    "duration": 18,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "11:00AM",
                    "duration": 90
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "12:30PM",
                    "duration": 19,
                    "to": "Haight-Ashbury"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    paul_available_start = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    paul_available_end = datetime.strptime(\"4:30PM\", \"%I:%M%p\")\n    min_meet_duration = 90  # minutes\n    travel_haight_to_bayview = 18  # minutes\n    travel_bayview_to_haight = 19  # minutes\n\n    # Calculate possible meeting times\n    # Option 1: Leave Haight as early as possible to arrive at Bayview by 11:00AM\n    leave_haight_time = paul_available_start - timedelta(minutes=travel_haight_to_bayview)\n    if leave_haight_time < arrival_time:\n        leave_haight_time = arrival_time\n        arrival_bayview_time = leave_haight_time + timedelta(minutes=travel_haight_to_bayview)\n        meet_start_time = max(arrival_bayview_time, paul_available_start)\n    else:\n        meet_start_time = paul_available_start\n\n    meet_end_time = meet_start_time + timedelta(minutes=min_meet_duration)\n    if meet_end_time > paul_available_end:\n        meet_end_time = paul_available_end\n        meet_start_time = meet_end_time - timedelta(minutes=min_meet_duration)\n        if meet_start_time < paul_available_start:\n            meet_start_time = paul_available_start\n            meet_end_time = meet_start_time + timedelta(minutes=min_meet_duration)\n            if meet_end_time > paul_available_end:\n                # Can't meet for full duration\n                meet_end_time = paul_available_end\n\n    leave_bayview_time = meet_end_time\n    back_to_haight_time = leave_bayview_time + timedelta(minutes=travel_bayview_to_haight)\n\n    # Build schedule\n    schedule = []\n    current_time = arrival_time\n    current_location = \"Haight-Ashbury\"\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n\n    # Time until leaving for Bayview\n    if current_time < leave_haight_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = leave_haight_time\n\n    # Travel to Bayview\n    if current_time == leave_haight_time:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_haight_to_bayview,\n            \"time\": format_time(current_time),\n            \"to\": \"Bayview\"\n        })\n        current_time += timedelta(minutes=travel_haight_to_bayview)\n        current_location = \"Bayview\"\n\n    # Wait until meeting if needed\n    if current_time < meet_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = meet_start_time\n\n    # Meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": (meet_end_time - meet_start_time).seconds // 60,\n        \"time\": format_time(current_time)\n    })\n    current_time = meet_end_time\n\n    # Travel back to Haight\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_bayview_to_haight,\n        \"time\": format_time(current_time),\n        \"to\": \"Haight-Ashbury\"\n    })\n    current_time += timedelta(minutes=travel_bayview_to_haight)\n\n    return {\n        \"schedule\": schedule\n    }\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_71",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:00AM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:10AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:45AM",
                    "duration": 90.0
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "9:45AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule():\n    # Input parameters\n    arrival_location = \"Pacific Heights\"\n    arrival_time_str = \"9:00AM\"\n    john_location = \"Alamo Square\"\n    john_available_start_str = \"9:45AM\"\n    john_available_end_str = \"2:30PM\"\n    min_meeting_duration = 90\n    travel_duration = 10  # minutes\n\n    # Convert times to datetime objects\n    arrival_time = parse_time(arrival_time_str)\n    john_available_start = parse_time(john_available_start_str)\n    john_available_end = parse_time(john_available_end_str)\n\n    # Calculate possible meeting windows\n    # Earliest we can arrive at Alamo Square: arrival_time + travel_duration\n    earliest_arrival = arrival_time + timedelta(minutes=travel_duration)\n    \n    # Determine when meeting can start\n    meeting_start = max(earliest_arrival, john_available_start)\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    # Check if meeting fits within John's availability\n    if meeting_end > john_available_end:\n        # Try to start earlier if possible\n        meeting_end = john_available_end\n        meeting_start = meeting_end - timedelta(minutes=min_meeting_duration)\n        if meeting_start < john_available_start:\n            meeting_start = john_available_start\n            meeting_end = john_available_end\n            actual_duration = (meeting_end - meeting_start).total_seconds() / 60\n            if actual_duration <= 0:\n                return {\"schedule\": []}  # No possible meeting\n\n    # Build schedule\n    schedule = []\n    \n    # Start at Pacific Heights\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Travel to Alamo Square\n    travel_start = arrival_time\n    if earliest_arrival > john_available_start:\n        # Need to wait until John is available\n        travel_start = john_available_start - timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": john_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_start),\n        \"to\": john_location\n    })\n    \n    # Check if we need to wait\n    arrival_at_alamo = travel_start + timedelta(minutes=travel_duration)\n    if arrival_at_alamo < john_available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": john_location,\n            \"time\": format_time(arrival_at_alamo)\n        })\n    \n    # Meeting with John\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": john_location,\n        \"duration\": (meeting_end - meeting_start).total_seconds() / 60,\n        \"time\": format_time(meeting_start)\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_72",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "9:07AM",
                    "duration": 60
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "10:07AM",
                    "duration": 7,
                    "to": "Russian Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 60,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule():\n    # Input parameters\n    arrival_location = \"Russian Hill\"\n    arrival_time_str = \"9:00AM\"\n    arrival_time = parse_time(arrival_time_str)\n    \n    # Barbara's availability\n    barbara_start = parse_time(\"7:15AM\")\n    barbara_end = parse_time(\"10:00PM\")\n    min_meet_duration = 60  # minutes\n    \n    # Travel times\n    travel_to_pacific = 7  # minutes\n    travel_to_russian = 7  # minutes\n    \n    # Calculate possible meeting windows\n    # Earliest you can arrive at Pacific Heights\n    earliest_departure = arrival_time\n    earliest_arrival_pacific = earliest_departure + timedelta(minutes=travel_to_pacific)\n    \n    # Latest you can start meeting to get full duration\n    latest_meet_start = barbara_end - timedelta(minutes=min_meet_duration)\n    latest_departure_pacific = latest_meet_start + timedelta(minutes=min_meet_duration)\n    latest_arrival_russian = latest_departure_pacific + timedelta(minutes=travel_to_russian)\n    \n    # Determine the optimal meeting time (earliest possible)\n    meet_start = max(earliest_arrival_pacific, barbara_start)\n    meet_end = meet_start + timedelta(minutes=min_meet_duration)\n    \n    if meet_end > barbara_end:\n        # No feasible meeting time\n        return {\"schedule\": []}\n    \n    # Build schedule\n    schedule = []\n    \n    # Start at Russian Hill\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Travel to Pacific Heights\n    travel_start = arrival_time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": travel_to_pacific,\n        \"time\": format_time(travel_start),\n        \"to\": \"Pacific Heights\"\n    })\n    \n    # Arrive at Pacific Heights\n    pacific_arrival = travel_start + timedelta(minutes=travel_to_pacific)\n    \n    # Check if need to wait\n    if pacific_arrival < meet_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Pacific Heights\",\n            \"time\": format_time(pacific_arrival)\n        })\n    \n    # Meet Barbara\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meet_start)\n    })\n    \n    # Travel back to Russian Hill\n    travel_back_start = meet_end\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_to_russian,\n        \"time\": format_time(travel_back_start),\n        \"to\": \"Russian Hill\"\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_73",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:00PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "4:45PM",
                    "duration": 14,
                    "to": "Richmond District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input parameters\n    arrival_location = \"Richmond District\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Friend's availability\n    friend_location = \"Nob Hill\"\n    friend_start = datetime.strptime(\"4:00PM\", \"%I:%M%p\")\n    friend_end = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    min_meeting_duration = 45  # minutes\n    \n    # Travel times\n    travel_times = {\n        (\"Richmond District\", \"Nob Hill\"): 17,\n        (\"Nob Hill\", \"Richmond District\"): 14\n    }\n    \n    # Calculate possible meeting options\n    travel_to_friend = travel_times[(arrival_location, friend_location)]\n    travel_back = travel_times[(friend_location, arrival_location)]\n    \n    # Earliest we can arrive at friend's location\n    earliest_arrival = arrival_time + timedelta(minutes=travel_to_friend)\n    \n    # Latest we can leave friend's location to have the minimum meeting\n    latest_departure = friend_end - timedelta(minutes=min_meeting_duration)\n    \n    # Calculate possible meeting start time\n    if earliest_arrival <= friend_start:\n        meeting_start = friend_start\n    else:\n        meeting_start = earliest_arrival\n    \n    if meeting_start + timedelta(minutes=min_meeting_duration) > friend_end:\n        # Can't meet for required duration\n        meeting_start = None\n    \n    if meeting_start is None:\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_to_friend, \n             \"time\": format_time(arrival_time), \"to\": friend_location},\n            {\"action\": \"wait\", \"location\": friend_location, \"time\": format_time(earliest_arrival)},\n            {\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_back, \n             \"time\": format_time(earliest_arrival), \"to\": arrival_location}\n        ]\n    else:\n        # Calculate when to leave for meeting\n        if earliest_arrival <= friend_start:\n            # Need to wait at friend's location\n            travel_departure_time = arrival_time\n            wait_start = earliest_arrival\n            wait_end = friend_start\n            wait_duration = (wait_end - wait_start).total_seconds() / 60\n        else:\n            # Can arrive exactly at meeting time\n            travel_departure_time = meeting_start - timedelta(minutes=travel_to_friend)\n            wait_start = None\n        \n        meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n        return_departure = meeting_end\n        \n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)}\n        ]\n        \n        if arrival_time < travel_departure_time:\n            schedule.append({\n                \"action\": \"wait\", \n                \"location\": arrival_location, \n                \"time\": format_time(arrival_time)\n            })\n        \n        schedule.append({\n            \"action\": \"travel\", \n            \"location\": friend_location, \n            \"duration\": travel_to_friend, \n            \"time\": format_time(travel_departure_time), \n            \"to\": friend_location\n        })\n        \n        if wait_start is not None:\n            schedule.append({\n                \"action\": \"wait\", \n                \"location\": friend_location, \n                \"time\": format_time(wait_start)\n            })\n        \n        schedule.append({\n            \"action\": \"meet\", \n            \"location\": friend_location, \n            \"duration\": min_meeting_duration, \n            \"time\": format_time(meeting_start)\n        })\n        \n        schedule.append({\n            \"action\": \"travel\", \n            \"location\": arrival_location, \n            \"duration\": travel_back, \n            \"time\": format_time(return_departure), \n            \"to\": arrival_location\n        })\n    \n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_74",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = parse_time(\"9:00AM\")\n    david_start = parse_time(\"11:30AM\")\n    david_end = parse_time(\"2:45PM\")\n    min_meet_duration = 15  # minutes\n    ph_to_fw = 13  # minutes\n    fw_to_ph = 12  # minutes\n\n    # Calculate possible meeting windows\n    earliest_departure = arrival_time\n    latest_arrival_fw = david_end - timedelta(minutes=min_meet_duration)\n    \n    # Time needed to go to FW: ph_to_fw minutes\n    earliest_arrival_fw = earliest_departure + timedelta(minutes=ph_to_fw)\n    \n    # If we arrive before David is available, we'd have to wait\n    if earliest_arrival_fw < david_start:\n        wait_time = (david_start - earliest_arrival_fw).total_seconds() / 60\n        meet_start = david_start\n    else:\n        wait_time = 0\n        meet_start = earliest_arrival_fw\n    \n    # Check if we have enough time to meet\n    if meet_start + timedelta(minutes=min_meet_duration) > david_end:\n        return {\"schedule\": []}  # No possible meeting\n    \n    # We'll meet for exactly the minimum duration to maximize flexibility\n    meet_end = meet_start + timedelta(minutes=min_meet_duration)\n    \n    # Build schedule\n    schedule = []\n    \n    # Start at Pacific Heights\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Pacific Heights\",\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Travel to Fisherman's Wharf\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": ph_to_fw,\n        \"time\": format_time(arrival_time),\n        \"to\": \"Fisherman's Wharf\"\n    })\n    \n    # Arrive at Fisherman's Wharf\n    if wait_time > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Fisherman's Wharf\",\n            \"time\": format_time(earliest_arrival_fw)\n        })\n    \n    # Meet with David\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meet_start)\n    })\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_75",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "6:59PM",
                    "duration": 16,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "7:15PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 60,
                    "time": "5:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    timothy_start = datetime.strptime(\"5:00PM\", \"%I:%M%p\")\n    timothy_end = datetime.strptime(\"8:15PM\", \"%I:%M%p\")\n    min_meet_duration = 60  # minutes\n    travel_to_haight = 16  # minutes\n    travel_to_marina = 17  # minutes\n\n    # Calculate possible meeting window\n    latest_departure_from_marina = timothy_end - timedelta(minutes=min_meet_duration)\n    travel_departure_time = latest_departure_from_marina - timedelta(minutes=travel_to_haight)\n\n    # Check if we can meet at all\n    if travel_departure_time < arrival_time:\n        return {\"schedule\": []}\n\n    # Build schedule\n    schedule = []\n\n    # Start at Marina District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Marina District\",\n        \"time\": format_time(arrival_time)\n    })\n\n    # Wait until it's time to travel\n    if arrival_time < travel_departure_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Marina District\",\n            \"time\": format_time(arrival_time)\n        })\n\n    # Travel to Haight-Ashbury\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Marina District\",\n        \"duration\": travel_to_haight,\n        \"time\": format_time(travel_departure_time),\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # Arrive and meet Timothy\n    arrival_at_haight = travel_departure_time + timedelta(minutes=travel_to_haight)\n    meet_start = max(arrival_at_haight, timothy_start)\n    meet_end = meet_start + timedelta(minutes=min_meet_duration)\n\n    if arrival_at_haight < timothy_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Haight-Ashbury\",\n            \"time\": format_time(arrival_at_haight)\n        })\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meet_start)\n    })\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_76",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 9,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:09AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 30,
                    "time": "9:09AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    robert_start = datetime.strptime(\"8:15AM\", \"%I:%M%p\")\n    robert_end = datetime.strptime(\"8:30PM\", \"%I:%M%p\")\n    min_meet_duration = 30  # minutes\n    travel_to_park = 9  # minutes\n    travel_back = 7  # minutes\n\n    # Calculate possible meeting times\n    earliest_departure = arrival_time\n    earliest_arrival_park = earliest_departure + timedelta(minutes=travel_to_park)\n    latest_departure_park = robert_end - timedelta(minutes=min_meet_duration)\n    latest_arrival_park = latest_departure_park - timedelta(minutes=travel_to_park)\n\n    # Determine the actual meeting time\n    if earliest_arrival_park > robert_end:\n        # No possible meeting\n        return None\n\n    meet_start = max(earliest_arrival_park, robert_start)\n    meet_end = meet_start + timedelta(minutes=min_meet_duration)\n\n    if meet_end > robert_end:\n        # Not enough time to meet\n        return None\n\n    # Build schedule\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Richmond District\",\n        \"time\": format_time(arrival_time)\n    })\n\n    # Travel to Golden Gate Park\n    travel_start = arrival_time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Richmond District\",\n        \"duration\": travel_to_park,\n        \"time\": format_time(travel_start),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Check if need to wait\n    if meet_start > earliest_arrival_park:\n        wait_duration = (meet_start - earliest_arrival_park).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Golden Gate Park\",\n            \"time\": format_time(earliest_arrival_park),\n            \"duration\": int(wait_duration)\n        })\n\n    # Meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meet_start)\n    })\n\n    # Travel back (optional, not specified in requirements)\n    # schedule.append({\n    #     \"action\": \"travel\",\n    #     \"location\": \"Golden Gate Park\",\n    #     \"duration\": travel_back,\n    #     \"time\": format_time(meet_end),\n    #     \"to\": \"Richmond District\"\n    # })\n\n    return {\"schedule\": schedule}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_77",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "5:56PM",
                    "duration": 19,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "6:15PM",
                    "duration": 105
                },
                {
                    "action": "end",
                    "location": "The Castro",
                    "time": "8:00PM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 105,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    michelle_start = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    michelle_end = datetime.strptime(\"8:00PM\", \"%I:%M%p\")\n    min_meet_duration = 105  # minutes\n    travel_time = 19  # minutes between locations\n\n    # Calculate latest possible departure time to meet Michelle\n    latest_departure = michelle_end - timedelta(minutes=min_meet_duration)\n    \n    # Calculate latest possible arrival time at The Castro\n    latest_arrival = latest_departure\n    \n    # Calculate when to leave Union Square to arrive at The Castro by latest_arrival\n    departure_from_union = latest_arrival - timedelta(minutes=travel_time)\n    \n    # Check if we have time to wait at Union Square before departing\n    wait_time = (departure_from_union - arrival_time).total_seconds() / 60\n    \n    if wait_time < 0:\n        # Not enough time to make it to the meeting\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Union Square\", \"time\": format_time(arrival_time)},\n            {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": format_time(arrival_time)},\n            {\"action\": \"note\", \"location\": \"Union Square\", \"time\": format_time(arrival_time), \n             \"message\": \"Cannot meet Michelle with given constraints\"}\n        ]\n    else:\n        # Create the schedule\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Union Square\", \"time\": format_time(arrival_time)},\n            {\"action\": \"wait\", \"location\": \"Union Square\", \"time\": format_time(arrival_time), \n             \"duration\": wait_time},\n            {\"action\": \"travel\", \"location\": \"Union Square\", \"duration\": travel_time, \n             \"time\": format_time(departure_from_union), \"to\": \"The Castro\"},\n            {\"action\": \"meet\", \"location\": \"The Castro\", \"duration\": min_meet_duration, \n             \"time\": format_time(latest_arrival)},\n            {\"action\": \"end\", \"location\": \"The Castro\", \"time\": format_time(michelle_end)}\n        ]\n    \n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_78",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "1:08PM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "1:30PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "2:15PM",
                    "duration": 21,
                    "to": "North Beach"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    paul_available_start = \"1:30PM\"\n    paul_available_end = \"7:45PM\"\n    min_meeting_duration = 45  # minutes\n    travel_to_bayview = 22  # minutes\n    travel_to_north_beach = 21  # minutes\n\n    # Convert times to datetime objects for calculations\n    current_time = str_to_time(arrival_time)\n    paul_start = str_to_time(paul_available_start)\n    paul_end = str_to_time(paul_available_end)\n\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"North Beach\",\n        \"time\": time_to_str(current_time)\n    })\n\n    # Calculate the latest we can leave North Beach to arrive at Bayview by 1:30PM\n    latest_departure = paul_start - timedelta(minutes=travel_to_bayview)\n    \n    # If we have time before needing to leave, wait at North Beach\n    if current_time < latest_departure:\n        wait_duration = (latest_departure - current_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": time_to_str(current_time),\n            \"duration\": wait_duration\n        })\n        current_time = latest_departure\n\n    # Travel to Bayview\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"North Beach\",\n        \"duration\": travel_to_bayview,\n        \"time\": time_to_str(current_time),\n        \"to\": \"Bayview\"\n    })\n    current_time += timedelta(minutes=travel_to_bayview)\n\n    # Meet with Paul for 45 minutes\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > paul_end:\n        # If we can't meet for full duration, adjust to max possible\n        min_meeting_duration = (paul_end - current_time).seconds // 60\n        meeting_end = paul_end\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"duration\": min_meeting_duration,\n        \"time\": time_to_str(current_time),\n        \"with\": \"Paul\"\n    })\n    current_time = meeting_end\n\n    # Travel back to North Beach\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Bayview\",\n        \"duration\": travel_to_north_beach,\n        \"time\": time_to_str(current_time),\n        \"to\": \"North Beach\"\n    })\n    current_time += timedelta(minutes=travel_to_north_beach)\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_79",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef format_time(hours, minutes):\n    period = 'AM' if hours < 12 else 'PM'\n    display_hours = hours if hours <= 12 else hours - 12\n    return f\"{display_hours}:{minutes:02d}{period}\"\n\ndef parse_time(time_str):\n    time_part, period = time_str[:-2], time_str[-2:]\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours, minutes\n\ndef add_time(hours, minutes, add_minutes):\n    total_minutes = hours * 60 + minutes + add_minutes\n    new_hours = total_minutes // 60\n    new_minutes = total_minutes % 60\n    return new_hours, new_minutes\n\ndef compute_schedule():\n    # Input parameters\n    arrival_location = \"Mission District\"\n    arrival_time = \"9:00AM\"\n    joshua_location = \"Haight-Ashbury\"\n    joshua_available_start = \"11:30AM\"\n    joshua_available_end = \"10:00PM\"\n    min_meeting_duration = 75\n    travel_to_haight = 12\n    travel_to_mission = 11\n\n    current_hours, current_minutes = parse_time(arrival_time)\n    schedule = [{\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time\n    }]\n\n    # Calculate earliest possible meeting time\n    # Travel to Haight-Ashbury\n    travel_start_time = format_time(current_hours, current_minutes)\n    current_hours, current_minutes = add_time(current_hours, current_minutes, travel_to_haight)\n    travel_end_time = format_time(current_hours, current_minutes)\n\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": travel_to_haight,\n        \"time\": travel_start_time,\n        \"to\": \"Haight-Ashbury\"\n    })\n\n    # Check if we arrived before Joshua is available\n    joshua_start_hours, joshua_start_minutes = parse_time(joshua_available_start)\n    arrival_total = current_hours * 60 + current_minutes\n    joshua_start_total = joshua_start_hours * 60 + joshua_start_minutes\n\n    if arrival_total < joshua_start_total:\n        wait_duration = joshua_start_total - arrival_total\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Haight-Ashbury\",\n            \"time\": travel_end_time\n        })\n        current_hours, current_minutes = joshua_start_hours, joshua_start_minutes\n\n    # Start meeting\n    meeting_start_time = format_time(current_hours, current_minutes)\n    current_hours, current_minutes = add_time(current_hours, current_minutes, min_meeting_duration)\n    meeting_end_time = format_time(current_hours, current_minutes)\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"duration\": min_meeting_duration,\n        \"time\": meeting_start_time\n    })\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_80",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "12:17PM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "12:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = str_to_time(\"9:00AM\")\n    betty_available_start = str_to_time(\"12:30PM\")\n    betty_available_end = str_to_time(\"7:15PM\")\n    min_meeting_duration = 75\n    travel_to_alamo = 13  # minutes\n    travel_to_richmond = 12  # minutes\n    \n    # Calculate possible meeting windows\n    earliest_departure = arrival_time\n    travel_duration = timedelta(minutes=travel_to_alamo)\n    earliest_arrival = earliest_departure + travel_duration\n    \n    # Find the latest we can leave Alamo Square to meet Betty for 75 minutes\n    latest_departure = betty_available_end - timedelta(minutes=min_meeting_duration)\n    latest_arrival = latest_departure - travel_duration\n    \n    # Determine when to leave Richmond\n    if earliest_arrival > betty_available_start:\n        # Can leave immediately and wait\n        depart_richmond = earliest_departure\n        wait_time = (earliest_arrival - betty_available_start).total_seconds() / 60\n    else:\n        # Need to wait until we can arrive exactly at 12:30PM\n        depart_richmond = betty_available_start - travel_duration\n        wait_time = 0\n    \n    # Build schedule\n    schedule = []\n    \n    # Start at Richmond\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Richmond District\",\n        \"time\": time_to_str(arrival_time)\n    })\n    \n    # Travel to Alamo Square\n    travel_start = depart_richmond\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Alamo Square\",\n        \"duration\": travel_to_alamo,\n        \"time\": time_to_str(travel_start),\n        \"to\": \"Alamo Square\"\n    })\n    \n    # Arrive at Alamo Square\n    arrive_alamo = depart_richmond + timedelta(minutes=travel_to_alamo)\n    if wait_time > 0:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": time_to_str(arrive_alamo)\n        })\n    \n    # Meet Betty\n    meeting_start = max(arrive_alamo, betty_available_start)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"duration\": min_meeting_duration,\n        \"time\": time_to_str(meeting_start)\n    })\n    \n    return {\n        \"schedule\": schedule\n    }\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_81",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:00AM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:10AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "5:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "5:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime(\"%-I:%M%p\").replace(\"AM\", \"AM\").replace(\"PM\", \"PM\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time_str = \"9:00AM\"\n    ashley_start_str = \"5:45PM\"\n    ashley_end_str = \"9:30PM\"\n    min_meet_duration = 75\n    gg_to_alamo = 10\n    alamo_to_gg = 9\n\n    # Convert times to datetime objects\n    current_time = str_to_time(arrival_time_str)\n    ashley_start = str_to_time(ashley_start_str)\n    ashley_end = str_to_time(ashley_end_str)\n\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Golden Gate Park\",\n        \"time\": time_to_str(current_time)\n    })\n\n    # Calculate latest departure time to meet Ashley for 75 minutes\n    latest_departure_from_gg = ashley_end - timedelta(minutes=min_meet_duration + gg_to_alamo)\n    \n    # Check if we can leave now and wait at Alamo Square\n    arrival_at_alamo = current_time + timedelta(minutes=gg_to_alamo)\n    if arrival_at_alamo < ashley_start:\n        # Travel to Alamo Square and wait\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": gg_to_alamo,\n            \"time\": time_to_str(current_time),\n            \"to\": \"Alamo Square\"\n        })\n        current_time += timedelta(minutes=gg_to_alamo)\n        \n        # Wait until Ashley arrives\n        wait_duration = (ashley_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Alamo Square\",\n            \"time\": time_to_str(current_time),\n            \"duration\": int(wait_duration)\n        })\n        current_time = ashley_start\n        \n        # Meet Ashley\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Alamo Square\",\n            \"duration\": min_meet_duration,\n            \"time\": time_to_str(current_time)\n        })\n        current_time += timedelta(minutes=min_meet_duration)\n    else:\n        # Can't meet for full duration if we leave now, so leave at latest possible time\n        travel_start_time = latest_departure_from_gg\n        \n        # Wait at Golden Gate Park until departure time\n        wait_duration = (travel_start_time - current_time).total_seconds() / 60\n        if wait_duration > 0:\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": \"Golden Gate Park\",\n                \"time\": time_to_str(current_time),\n                \"duration\": int(wait_duration)\n            })\n            current_time = travel_start_time\n        \n        # Travel to Alamo Square\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Alamo Square\",\n            \"duration\": gg_to_alamo,\n            \"time\": time_to_str(current_time),\n            \"to\": \"Alamo Square\"\n        })\n        current_time += timedelta(minutes=gg_to_alamo)\n        \n        # Meet Ashley\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Alamo Square\",\n            \"duration\": min_meet_duration,\n            \"time\": time_to_str(current_time)\n        })\n        current_time += timedelta(minutes=min_meet_duration)\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_82",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:33PM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    carol_start = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    carol_end = datetime.strptime(\"10:30PM\", \"%I:%M%p\")\n    presidio_to_park = 12\n    park_to_presidio = 11\n    min_meet_duration = 45\n\n    # Calculate possible meeting window\n    meet_window_start = carol_start\n    meet_window_end = carol_end - timedelta(minutes=min_meet_duration)\n\n    # Calculate latest departure time from Presidio to arrive by meet_window_start\n    latest_departure = meet_window_start - timedelta(minutes=presidio_to_park)\n\n    # Calculate earliest departure time from Presidio to not arrive too early\n    earliest_departure = meet_window_end - timedelta(minutes=presidio_to_park)\n\n    # Determine optimal departure time (as late as possible within constraints)\n    if latest_departure >= arrival_time:\n        departure_time = latest_departure\n    else:\n        departure_time = earliest_departure\n\n    # Build schedule\n    schedule = []\n\n    # Start at Presidio\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Presidio\",\n        \"time\": format_time(arrival_time)\n    })\n\n    # Wait at Presidio until departure time (if needed)\n    if departure_time > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"Presidio\",\n            \"time\": format_time(arrival_time)\n        })\n\n    # Travel to Golden Gate Park\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Presidio\",\n        \"duration\": presidio_to_park,\n        \"time\": format_time(departure_time),\n        \"to\": \"Golden Gate Park\"\n    })\n\n    # Meet with Carol\n    arrival_at_park = departure_time + timedelta(minutes=presidio_to_park)\n    meet_time = max(arrival_at_park, carol_start)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"duration\": min_meet_duration,\n        \"time\": format_time(meet_time)\n    })\n\n    # Output as JSON\n    output = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_83",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 5,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:05AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "11:30AM",
                    "duration": 5,
                    "to": "Alamo Square"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 5,
                    "time": "9:05AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    start_location = \"Alamo Square\"\n    start_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    # Thomas's availability\n    thomas_location = \"Haight-Ashbury\"\n    thomas_start = datetime.strptime(\"11:00AM\", \"%I:%M%p\")\n    thomas_end = datetime.strptime(\"1:00PM\", \"%I:%M%p\")\n    min_meet_duration = 30  # minutes\n    \n    # Travel times\n    travel_times = {\n        (\"Alamo Square\", \"Haight-Ashbury\"): 5,\n        (\"Haight-Ashbury\", \"Alamo Square\"): 5\n    }\n    \n    # Calculate possible meeting times\n    travel_to_thomas = travel_times[(start_location, thomas_location)]\n    earliest_arrival = start_time + timedelta(minutes=travel_to_thomas)\n    \n    # Determine when to leave to meet Thomas\n    if earliest_arrival < thomas_start:\n        # Need to wait until Thomas is available\n        wait_time = (thomas_start - earliest_arrival).total_seconds() / 60\n        meet_start = thomas_start\n    else:\n        # Can meet immediately upon arrival\n        wait_time = 0\n        meet_start = earliest_arrival\n    \n    # Check if meeting is possible\n    if meet_start + timedelta(minutes=min_meet_duration) > thomas_end:\n        # Not enough time to meet\n        schedule = [\n            {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n            {\"action\": \"travel\", \"location\": thomas_location, \"duration\": travel_to_thomas, \n             \"time\": format_time(start_time), \"to\": thomas_location},\n            {\"action\": \"wait\", \"location\": thomas_location, \"time\": format_time(earliest_arrival)},\n            {\"action\": \"travel\", \"location\": start_location, \"duration\": travel_times[(thomas_location, start_location)], \n             \"time\": format_time(earliest_arrival), \"to\": start_location}\n        ]\n    else:\n        # Schedule the meeting\n        meet_end = meet_start + timedelta(minutes=min_meet_duration)\n        travel_back_time = meet_end\n        travel_back_duration = travel_times[(thomas_location, start_location)]\n        arrive_back_time = travel_back_time + timedelta(minutes=travel_back_duration)\n        \n        schedule = [\n            {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n            {\"action\": \"travel\", \"location\": thomas_location, \"duration\": travel_to_thomas, \n             \"time\": format_time(start_time), \"to\": thomas_location},\n        ]\n        \n        if wait_time > 0:\n            schedule.append({\"action\": \"wait\", \"location\": thomas_location, \"time\": format_time(earliest_arrival)})\n        \n        schedule.extend([\n            {\"action\": \"meet\", \"location\": thomas_location, \"duration\": min_meet_duration, \"time\": format_time(meet_start)},\n            {\"action\": \"travel\", \"location\": start_location, \"duration\": travel_back_duration, \n             \"time\": format_time(travel_back_time), \"to\": start_location}\n        ])\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_84",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "1:11PM",
                    "duration": 4,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "1:15PM",
                    "duration": 495
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 4,
                    "time": "9:04AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = parse_time(\"9:00AM\")\n    william_start = parse_time(\"1:15PM\")\n    william_end = parse_time(\"9:30PM\")\n    min_meet_duration = 15\n    travel_to_russian_hill = 4\n    travel_to_north_beach = 5\n\n    # Calculate possible meeting window\n    earliest_departure = arrival_time\n    latest_arrival = william_end - timedelta(minutes=min_meet_duration)\n\n    # Calculate when to leave North Beach to arrive at Russian Hill by william_start\n    departure_time = william_start - timedelta(minutes=travel_to_russian_hill)\n    \n    # If we can't make it by william_start, leave as early as possible\n    if departure_time < arrival_time:\n        departure_time = arrival_time\n        arrival_russian_hill = departure_time + timedelta(minutes=travel_to_russian_hill)\n    else:\n        arrival_russian_hill = william_start\n\n    # Calculate meeting duration (until william_end or until we need to leave)\n    meeting_end = william_end\n    meeting_duration = (meeting_end - arrival_russian_hill).seconds // 60\n\n    # Build schedule\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"North Beach\",\n        \"time\": format_time(arrival_time)\n    })\n\n    if departure_time > arrival_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": \"North Beach\",\n            \"time\": format_time(arrival_time)\n        })\n\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": \"Russian Hill\",\n        \"duration\": travel_to_russian_hill,\n        \"time\": format_time(departure_time),\n        \"to\": \"Russian Hill\"\n    })\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"duration\": meeting_duration,\n        \"time\": format_time(arrival_russian_hill)\n    })\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_85",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "8:33PM",
                    "duration": 12,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "8:45PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_schedule():\n    # Input parameters\n    arrival_location = \"Marina District\"\n    arrival_time_str = \"9:00AM\"\n    daniel_location = \"Nob Hill\"\n    daniel_start_str = \"7:45PM\"\n    daniel_end_str = \"9:00PM\"\n    min_meeting_duration = 15  # minutes\n    travel_to_nob_hill = 12  # minutes\n    travel_to_marina = 11  # minutes\n\n    # Convert time strings to datetime objects\n    def parse_time(time_str):\n        return datetime.strptime(time_str, \"%I:%M%p\")\n\n    arrival_time = parse_time(arrival_time_str)\n    daniel_start = parse_time(daniel_start_str)\n    daniel_end = parse_time(daniel_end_str)\n\n    # Calculate possible meeting window\n    # You need to arrive at Nob Hill by daniel_end - min_meeting_duration\n    latest_departure_from_marina = daniel_end - timedelta(minutes=min_meeting_duration + travel_to_nob_hill)\n    # You can't leave Marina before arrival_time\n    departure_from_marina = max(arrival_time, latest_departure_from_marina)\n    arrival_at_nob_hill = departure_from_marina + timedelta(minutes=travel_to_nob_hill)\n    meeting_start = max(arrival_at_nob_hill, daniel_start)\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n\n    # Check if meeting is possible\n    if meeting_end > daniel_end:\n        return {\"schedule\": []}  # No possible meeting\n\n    # Build schedule\n    schedule = []\n\n    # Start at Marina District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": arrival_time.strftime(\"%-I:%M%p\")\n    })\n\n    # Wait at Marina District if needed\n    if departure_from_marina > arrival_time:\n        wait_duration = (departure_from_marina - arrival_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": arrival_location,\n            \"duration\": int(wait_duration),\n            \"time\": arrival_time.strftime(\"%-I:%M%p\")\n        })\n\n    # Travel to Nob Hill\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_to_nob_hill,\n        \"time\": departure_from_marina.strftime(\"%-I:%M%p\"),\n        \"to\": daniel_location\n    })\n\n    # Wait at Nob Hill if needed\n    if meeting_start > arrival_at_nob_hill:\n        wait_duration = (meeting_start - arrival_at_nob_hill).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": daniel_location,\n            \"duration\": int(wait_duration),\n            \"time\": arrival_at_nob_hill.strftime(\"%-I:%M%p\")\n        })\n\n    # Meet Daniel\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": daniel_location,\n        \"duration\": min_meeting_duration,\n        \"time\": meeting_start.strftime(\"%-I:%M%p\")\n    })\n\n    return {\"schedule\": schedule}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_86",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "9:11AM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "10:26AM",
                    "duration": 10,
                    "to": "Embarcadero"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 75,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    james_available_start = datetime.strptime(\"8:30AM\", \"%I:%M%p\")\n    james_available_end = datetime.strptime(\"3:00PM\", \"%I:%M%p\")\n    travel_to_pacific = 11  # minutes\n    travel_to_embarcadero = 10  # minutes\n    min_meeting_duration = 75  # minutes\n\n    # Initialize schedule\n    schedule = []\n    current_time = arrival_time\n    current_location = \"Embarcadero\"\n\n    # Start at Embarcadero\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n\n    # Travel to Pacific Heights to meet James\n    travel_start = current_time\n    travel_end = travel_start + timedelta(minutes=travel_to_pacific)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_to_pacific,\n        \"time\": format_time(travel_start),\n        \"to\": \"Pacific Heights\"\n    })\n    current_time = travel_end\n    current_location = \"Pacific Heights\"\n\n    # Check if James is available when we arrive\n    if current_time < james_available_start:\n        # Wait until James is available\n        wait_duration = (james_available_start - current_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = james_available_start\n\n    # Meet James\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > james_available_end:\n        # Adjust meeting duration to fit within James's availability\n        min_meeting_duration = (james_available_end - current_time).seconds // 60\n        meeting_end = james_available_end\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time = meeting_end\n\n    # Travel back to Embarcadero\n    travel_start = current_time\n    travel_end = travel_start + timedelta(minutes=travel_to_embarcadero)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_to_embarcadero,\n        \"time\": format_time(travel_start),\n        \"to\": \"Embarcadero\"\n    })\n    current_time = travel_end\n    current_location = \"Embarcadero\"\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_87",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "8:45PM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00PM",
                    "duration": 10,
                    "to": "Sunset District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 15,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\").upper()\n\ndef main():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    joshua_start = datetime.strptime(\"8:45PM\", \"%I:%M%p\")\n    joshua_end = datetime.strptime(\"9:45PM\", \"%I:%M%p\")\n    min_meet_duration = 15  # minutes\n    sunset_to_golden_gate = 11  # minutes\n    golden_gate_to_sunset = 10  # minutes\n\n    # Calculate possible meeting window\n    travel_to_golden_gate = arrival_time + timedelta(minutes=sunset_to_golden_gate)\n    earliest_meet_start = max(travel_to_golden_gate, joshua_start)\n    latest_meet_end = joshua_end\n    possible_meet_duration = (latest_meet_end - earliest_meet_start).total_seconds() / 60\n\n    if possible_meet_duration >= min_meet_duration:\n        # We can meet Joshua\n        meet_start = earliest_meet_start\n        meet_end = meet_start + timedelta(minutes=min_meet_duration)\n        travel_back_start = meet_end\n        back_at_sunset = travel_back_start + timedelta(minutes=golden_gate_to_sunset)\n\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Sunset District\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"Golden Gate Park\", \"duration\": sunset_to_golden_gate, \n             \"time\": format_time(arrival_time), \"to\": \"Golden Gate Park\"},\n            {\"action\": \"wait\", \"location\": \"Golden Gate Park\", \"time\": format_time(travel_to_golden_gate)},\n            {\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"duration\": min_meet_duration, \n             \"time\": format_time(meet_start)},\n            {\"action\": \"travel\", \"location\": \"Sunset District\", \"duration\": golden_gate_to_sunset, \n             \"time\": format_time(travel_back_start), \"to\": \"Sunset District\"}\n        ]\n    else:\n        # Cannot meet Joshua\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Sunset District\", \"time\": format_time(arrival_time)},\n            {\"action\": \"note\", \"location\": \"N/A\", \"note\": \"Cannot meet Joshua with given constraints\"}\n        ]\n\n    # Output as JSON\n    output = {\"schedule\": schedule}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_88",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "6:15PM",
                    "duration": 15,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "6:30PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 60,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    patricia_start = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    patricia_end = datetime.strptime(\"7:30PM\", \"%I:%M%p\")\n    travel_to_bayview = 15  # minutes\n    travel_to_mission = 13  # minutes\n    min_meet_duration = 60  # minutes\n\n    # Calculate latest departure time from Mission to meet Patricia for 60 minutes\n    latest_departure_for_meet = patricia_end - timedelta(minutes=min_meet_duration)\n    latest_departure_from_mission = latest_departure_for_meet - timedelta(minutes=travel_to_bayview)\n\n    # Calculate travel to Bayview\n    travel_start_time = latest_departure_from_mission\n    arrival_at_bayview = travel_start_time + timedelta(minutes=travel_to_bayview)\n\n    # Check if we have enough time before Patricia leaves\n    meet_end_time = arrival_at_bayview + timedelta(minutes=min_meet_duration)\n    if meet_end_time > patricia_end:\n        # Adjust meet duration if needed (though in this case constraints say we want 60 min)\n        possible_meet_duration = (patricia_end - arrival_at_bayview).total_seconds() / 60\n        if possible_meet_duration < min_meet_duration:\n            return {\"error\": \"Cannot meet for the required duration\"}\n\n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Mission District\", \"time\": format_time(arrival_time)},\n        {\"action\": \"wait\", \"location\": \"Mission District\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Bayview\", \"duration\": travel_to_bayview, \n         \"time\": format_time(travel_start_time), \"to\": \"Bayview\"},\n        {\"action\": \"meet\", \"location\": \"Bayview\", \"duration\": min_meet_duration, \n         \"time\": format_time(arrival_at_bayview)}\n    ]\n\n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_89",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 15
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:31AM",
                    "duration": 17,
                    "to": "Alamo Square"
                },
                {
                    "action": "end",
                    "location": "Alamo Square",
                    "time": "9:48AM"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = parse_time('9:00AM')\n    laura_available_start = parse_time('8:15AM')\n    laura_available_end = parse_time('6:45PM')\n    min_meeting_duration = 15\n    travel_to_chinatown = 16\n    travel_back_to_alamo = 17\n    \n    # Calculate possible meeting times\n    earliest_departure = arrival_time\n    travel_end_time = earliest_departure + timedelta(minutes=travel_to_chinatown)\n    \n    # Find meeting window\n    meeting_start = max(travel_end_time, laura_available_start)\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end > laura_available_end:\n        return None  # No possible meeting\n    \n    # Calculate return time\n    return_departure = meeting_end\n    return_arrival = return_departure + timedelta(minutes=travel_back_to_alamo)\n    \n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Chinatown\", \"duration\": travel_to_chinatown, \n         \"time\": format_time(earliest_departure), \"to\": \"Chinatown\"},\n    ]\n    \n    if travel_end_time < laura_available_start:\n        wait_duration = (laura_available_start - travel_end_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\", \"location\": \"Chinatown\", \n            \"time\": format_time(travel_end_time), \"duration\": wait_duration\n        })\n    \n    schedule.extend([\n        {\"action\": \"meet\", \"location\": \"Chinatown\", \"duration\": min_meeting_duration, \n         \"time\": format_time(meeting_start)},\n        {\"action\": \"travel\", \"location\": \"Alamo Square\", \"duration\": travel_back_to_alamo, \n         \"time\": format_time(return_departure), \"to\": \"Alamo Square\"},\n        {\"action\": \"end\", \"location\": \"Alamo Square\", \"time\": format_time(return_arrival)}\n    ])\n    \n    return {\"schedule\": schedule}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_90",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "6:46PM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "6:46PM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "7:00PM",
                    "duration": 75
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "8:15PM",
                    "duration": 13,
                    "to": "Russian Hill"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = str_to_time(\"9:00AM\")\n    daniel_available_start = str_to_time(\"7:00PM\")\n    daniel_available_end = str_to_time(\"8:15PM\")\n    min_meeting_duration = 75  # minutes\n    travel_to_richmond = 14  # minutes\n    travel_to_russian = 13  # minutes\n\n    # Calculate possible meeting window\n    latest_departure_from_russian = daniel_available_end - timedelta(minutes=min_meeting_duration)\n    latest_departure_from_russian = min(latest_departure_from_russian, daniel_available_start)\n\n    # Calculate when we need to leave Russian Hill\n    leave_russian_time = latest_departure_from_russian - timedelta(minutes=travel_to_richmond)\n\n    # Calculate arrival in Richmond\n    arrive_richmond_time = leave_russian_time + timedelta(minutes=travel_to_richmond)\n\n    # Calculate meeting end time\n    meeting_end_time = arrive_richmond_time + timedelta(minutes=min_meeting_duration)\n\n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Russian Hill\", \"time\": time_to_str(arrival_time)},\n        {\"action\": \"wait\", \"location\": \"Russian Hill\", \"time\": time_to_str(leave_russian_time)},\n        {\"action\": \"travel\", \"location\": \"Richmond District\", \"duration\": travel_to_richmond, \n         \"time\": time_to_str(leave_russian_time), \"to\": \"Richmond District\"},\n        {\"action\": \"meet\", \"location\": \"Richmond District\", \"duration\": min_meeting_duration,\n         \"time\": time_to_str(arrive_richmond_time)},\n        {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_to_russian,\n         \"time\": time_to_str(meeting_end_time), \"to\": \"Russian Hill\"}\n    ]\n\n    return {\"schedule\": schedule}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_91",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "1:37PM",
                    "duration": 23,
                    "to": "The Castro"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "2:00PM",
                    "duration": 45
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "2:45PM",
                    "duration": 20,
                    "to": "Financial District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 45,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    carol_start = datetime.strptime(\"2:00PM\", \"%I:%M%p\")\n    carol_end = datetime.strptime(\"5:45PM\", \"%I:%M%p\")\n    min_meet_duration = 45  # minutes\n    travel_fd_to_castro = 23  # minutes\n    travel_castro_to_fd = 20  # minutes\n\n    # Calculate possible meeting window\n    meet_start = carol_start\n    meet_end = carol_end - timedelta(minutes=min_meet_duration)\n\n    # Calculate latest departure time from Financial District to arrive by meet_start\n    latest_departure_fd = meet_start - timedelta(minutes=travel_fd_to_castro)\n    \n    # Calculate earliest return time after meeting\n    earliest_return_time = meet_start + timedelta(minutes=min_meet_duration)\n    \n    # Check if we have time to meet\n    if latest_departure_fd < arrival_time:\n        # Not enough time to meet Carol\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Financial District\", \"time\": format_time(arrival_time)},\n            {\"action\": \"wait\", \"location\": \"Financial District\", \"time\": format_time(arrival_time)}\n        ]\n    else:\n        # Can meet Carol\n        schedule = [\n            {\"action\": \"start\", \"location\": \"Financial District\", \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": \"The Castro\", \"duration\": travel_fd_to_castro, \n             \"time\": format_time(latest_departure_fd), \"to\": \"The Castro\"},\n            {\"action\": \"meet\", \"location\": \"The Castro\", \"duration\": min_meet_duration, \n             \"time\": format_time(meet_start)},\n            {\"action\": \"travel\", \"location\": \"Financial District\", \"duration\": travel_castro_to_fd, \n             \"time\": format_time(earliest_return_time), \"to\": \"Financial District\"}\n        ]\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    result = compute_schedule()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_92",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "7:39PM",
                    "duration": 6,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "7:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 6,
                    "time": "9:06AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef calculate_optimal_schedule():\n    # Input parameters\n    arrival_time = \"9:00AM\"\n    emily_available_start = \"7:00PM\"\n    emily_available_end = \"9:00PM\"\n    min_meeting_duration = 75\n    travel_north_to_china = 6\n    travel_china_to_north = 3\n\n    # Convert time strings to minutes since midnight\n    def time_to_minutes(time_str):\n        time_part, period = time_str[:-2], time_str[-2:]\n        hours, minutes = map(int, time_part.split(':'))\n        if period == 'PM' and hours != 12:\n            hours += 12\n        elif period == 'AM' and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n\n    # Convert minutes back to time string\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        mins = minutes % 60\n        period = 'AM' if hours < 12 else 'PM'\n        if hours > 12:\n            hours -= 12\n        elif hours == 0:\n            hours = 12\n        return f\"{hours}:{mins:02d}{period}\"\n\n    arrival_min = time_to_minutes(arrival_time)\n    emily_start_min = time_to_minutes(emily_available_start)\n    emily_end_min = time_to_minutes(emily_available_end)\n\n    # Calculate latest possible departure time from North Beach to meet Emily for 75 mins\n    latest_departure_for_meeting = emily_end_min - min_meeting_duration - travel_north_to_china\n    # Calculate earliest possible arrival time at Chinatown (after travel)\n    earliest_arrival_china = arrival_min + travel_north_to_china\n\n    schedule = []\n    current_time = arrival_min\n    current_location = \"North Beach\"\n\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": minutes_to_time(current_time)\n    })\n\n    # Check if we need to wait before traveling\n    if current_time < latest_departure_for_meeting:\n        # Travel to Chinatown at the optimal time\n        travel_time = latest_departure_for_meeting\n        if current_time < travel_time:\n            # Wait until it's time to travel\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": minutes_to_time(current_time)\n            })\n            current_time = travel_time\n\n        # Travel to Chinatown\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_north_to_china,\n            \"time\": minutes_to_time(current_time),\n            \"to\": \"Chinatown\"\n        })\n        current_time += travel_north_to_china\n        current_location = \"Chinatown\"\n\n        # Meet with Emily\n        meeting_start = max(current_time, emily_start_min)\n        if meeting_start < emily_end_min:\n            meeting_duration = min(min_meeting_duration, emily_end_min - meeting_start)\n            if meeting_duration >= min_meeting_duration:\n                if current_time < meeting_start:\n                    # Wait until meeting starts\n                    schedule.append({\n                        \"action\": \"wait\",\n                        \"location\": current_location,\n                        \"time\": minutes_to_time(current_time)\n                    })\n                    current_time = meeting_start\n\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": current_location,\n                    \"duration\": meeting_duration,\n                    \"time\": minutes_to_time(current_time)\n                })\n                current_time += meeting_duration\n\n    # Convert schedule to JSON\n    result = {\n        \"schedule\": schedule\n    }\n    return json.dumps(result, indent=2)\n\nprint(calculate_optimal_schedule())\n```",
            "count": "meeting_planning_example_93",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "11:32AM",
                    "duration": 13,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:45AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    james_available_start = datetime.strptime(\"11:15AM\", \"%I:%M%p\")\n    james_available_end = datetime.strptime(\"12:00PM\", \"%I:%M%p\")\n    min_meeting_duration = 15  # minutes\n    travel_to_russian_hill = 13  # minutes\n    travel_to_alamo_square = 15  # minutes\n\n    # Calculate possible meeting window\n    latest_departure_from_alamo = james_available_end - timedelta(minutes=min_meeting_duration)\n    latest_departure_from_alamo = min(latest_departure_from_alamo, james_available_end - timedelta(minutes=travel_to_russian_hill))\n\n    # Calculate when to leave Alamo Square\n    leave_alamo_time = latest_departure_from_alamo - timedelta(minutes=travel_to_russian_hill)\n    if leave_alamo_time < arrival_time:\n        leave_alamo_time = arrival_time\n\n    # Calculate arrival at Russian Hill\n    arrive_russian_hill_time = leave_alamo_time + timedelta(minutes=travel_to_russian_hill)\n\n    # Calculate meeting start (can't be before James is available)\n    meeting_start = max(arrive_russian_hill_time, james_available_start)\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n\n    # Check if meeting is possible\n    if meeting_end > james_available_end:\n        return {\"schedule\": []}\n\n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": \"Alamo Square\", \"time\": format_time(arrival_time)},\n        {\"action\": \"travel\", \"location\": \"Russian Hill\", \"duration\": travel_to_russian_hill, \n         \"time\": format_time(leave_alamo_time), \"to\": \"Russian Hill\"},\n    ]\n\n    # Add wait time if needed\n    if arrive_russian_hill_time < james_available_start:\n        schedule.append({\n            \"action\": \"wait\", \n            \"location\": \"Russian Hill\", \n            \"time\": format_time(arrive_russian_hill_time)\n        })\n\n    schedule.append({\n        \"action\": \"meet\", \n        \"location\": \"Russian Hill\", \n        \"duration\": min_meeting_duration, \n        \"time\": format_time(meeting_start)\n    })\n\n    return {\"schedule\": schedule}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_94",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "11:00AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef format_time(hours, minutes):\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{minutes:02d}{period}\"\n\ndef parse_time(time_str):\n    time_part, period = time_str[:-2], time_str[-2:]\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours, minutes\n\ndef add_time(hours, minutes, add_minutes):\n    total_minutes = hours * 60 + minutes + add_minutes\n    new_hours = total_minutes // 60\n    new_minutes = total_minutes % 60\n    return new_hours, new_minutes\n\ndef compute_schedule():\n    # Input parameters\n    start_location = \"North Beach\"\n    start_time_str = \"9:00AM\"\n    travel_to_bayview = 22\n    travel_to_north_beach = 21\n    steven_available_start_str = \"11:00AM\"\n    steven_available_end_str = \"12:45PM\"\n    min_meet_duration = 90\n\n    # Parse times\n    current_h, current_m = parse_time(start_time_str)\n    steven_start_h, steven_start_m = parse_time(steven_available_start_str)\n    steven_end_h, steven_end_m = parse_time(steven_available_end_str)\n\n    # Convert all times to minutes since midnight for easier calculations\n    def to_minutes(h, m):\n        return h * 60 + m\n\n    current_time = to_minutes(current_h, current_m)\n    steven_start = to_minutes(steven_start_h, steven_start_m)\n    steven_end = to_minutes(steven_end_h, steven_end_m)\n\n    # Calculate possible meeting scenarios\n    # Scenario 1: Leave immediately to Bayview\n    arrival_at_bayview = current_time + travel_to_bayview\n    wait_time = max(0, steven_start - arrival_at_bayview)\n    meet_end = min(steven_end, arrival_at_bayview + wait_time + min_meet_duration)\n    meet_duration = meet_end - (arrival_at_bayview + wait_time)\n    if meet_duration < min_meet_duration:\n        meet_duration = 0\n\n    # Check if scenario is valid\n    if meet_duration >= min_meet_duration:\n        # Build schedule for scenario 1\n        schedule = []\n        schedule.append({\n            \"action\": \"start\",\n            \"location\": start_location,\n            \"time\": format_time(current_h, current_m)\n        })\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Bayview\",\n            \"duration\": travel_to_bayview,\n            \"time\": format_time(current_h, current_m),\n            \"to\": \"Bayview\"\n        })\n        arrival_h, arrival_m = add_time(current_h, current_m, travel_to_bayview)\n        if wait_time > 0:\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": \"Bayview\",\n                \"time\": format_time(arrival_h, arrival_m)\n            })\n        meet_start_h, meet_start_m = add_time(arrival_h, arrival_m, wait_time)\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Bayview\",\n            \"duration\": meet_duration,\n            \"time\": format_time(meet_start_h, meet_start_m)\n        })\n        return schedule\n    else:\n        return None\n\ndef main():\n    schedule = compute_schedule()\n    if schedule is None:\n        print(json.dumps({\"error\": \"No valid schedule found\"}))\n    else:\n        print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_95",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 27,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:27AM",
                    "duration": 30
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:57AM",
                    "duration": 25,
                    "to": "Sunset District"
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 27,
                    "time": "9:27AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 30,
                    "time": "9:27AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef main():\n    # Input parameters\n    arrival_location = \"Sunset District\"\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    \n    rebecca_location = \"Nob Hill\"\n    rebecca_available_start = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    rebecca_available_end = datetime.strptime(\"6:15PM\", \"%I:%M%p\")\n    min_meeting_duration = 30  # minutes\n    \n    travel_times = {\n        (\"Sunset District\", \"Nob Hill\"): 27,\n        (\"Nob Hill\", \"Sunset District\"): 25\n    }\n    \n    # Calculate possible meeting times\n    schedule = []\n    current_location = arrival_location\n    current_time = arrival_time\n    \n    # Start at Sunset District\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to Nob Hill\n    travel_duration = travel_times[(current_location, rebecca_location)]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": rebecca_location\n    })\n    \n    current_time = travel_end_time\n    current_location = rebecca_location\n    \n    # Check if we arrived during Rebecca's availability\n    if current_time < rebecca_available_start:\n        # Wait until Rebecca is available\n        wait_duration = (rebecca_available_start - current_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = rebecca_available_start\n    \n    if current_time >= rebecca_available_start and current_time + timedelta(minutes=min_meeting_duration) <= rebecca_available_end:\n        # Meet Rebecca\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n        current_time += timedelta(minutes=min_meeting_duration)\n    \n    # Travel back to Sunset District\n    travel_duration = travel_times[(current_location, arrival_location)]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": arrival_location\n    })\n    \n    current_time = travel_end_time\n    current_location = arrival_location\n    \n    # Output the schedule as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_96",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "7:25PM",
                    "duration": 20,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "7:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%-I:%M%p\")\n\ndef compute_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    charles_start = datetime.strptime(\"6:00PM\", \"%I:%M%p\")\n    charles_end = datetime.strptime(\"9:00PM\", \"%I:%M%p\")\n    travel_time_to_richmond = 20  # minutes\n    travel_time_to_chinatown = 20  # minutes\n    min_meeting_duration = 75  # minutes\n\n    # Initialize schedule\n    schedule = []\n\n    # Start in Chinatown\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": \"Chinatown\",\n        \"time\": format_time(arrival_time)\n    })\n\n    # Calculate latest departure time to meet Charles for 75 minutes\n    latest_departure = charles_end - timedelta(minutes=min_meeting_duration)\n    latest_departure_from_chinatown = latest_departure - timedelta(minutes=travel_time_to_richmond)\n\n    # Decide when to leave Chinatown\n    if arrival_time < latest_departure_from_chinatown:\n        # Can stay in Chinatown until latest departure time\n        wait_duration = (latest_departure_from_chinatown - arrival_time).total_seconds() / 60\n        if wait_duration > 0:\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": \"Chinatown\",\n                \"time\": format_time(arrival_time)\n            })\n\n        # Travel to Richmond\n        travel_start_time = latest_departure_from_chinatown\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time_to_richmond,\n            \"time\": format_time(travel_start_time),\n            \"to\": \"Richmond District\"\n        })\n\n        # Meet Charles\n        meeting_start_time = travel_start_time + timedelta(minutes=travel_time_to_richmond)\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Richmond District\",\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(meeting_start_time)\n        })\n    else:\n        # Need to leave immediately to have any chance of meeting\n        travel_start_time = arrival_time\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": \"Richmond District\",\n            \"duration\": travel_time_to_richmond,\n            \"time\": format_time(travel_start_time),\n            \"to\": \"Richmond District\"\n        })\n\n        arrival_in_richmond = travel_start_time + timedelta(minutes=travel_time_to_richmond)\n        if arrival_in_richmond < charles_end:\n            # Calculate actual meeting duration\n            meeting_duration = (charles_end - arrival_in_richmond).total_seconds() / 60\n            if meeting_duration >= min_meeting_duration:\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Richmond District\",\n                    \"duration\": min_meeting_duration,\n                    \"time\": format_time(arrival_in_richmond)\n                })\n            else:\n                # Can't meet for required duration\n                pass\n\n    return schedule\n\ndef main():\n    schedule = compute_schedule()\n    output = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_97",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "8:33PM",
                    "duration": 12,
                    "to": "Richmond District"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef main():\n    # Input parameters\n    arrival_location = \"Alamo Square\"\n    arrival_time_str = \"9:00AM\"\n    arrival_time = parse_time(arrival_time_str)\n    \n    friend_location = \"Richmond District\"\n    friend_window_start_str = \"8:45PM\"\n    friend_window_end_str = \"9:30PM\"\n    friend_window_start = parse_time(friend_window_start_str)\n    friend_window_end = parse_time(friend_window_end_str)\n    min_meeting_duration = 45  # minutes\n    \n    travel_to_friend = 12  # minutes\n    travel_back = 13  # minutes\n    \n    # Calculate possible meeting times\n    # We need to arrive at friend's location by 8:45PM to meet for 45 minutes\n    latest_departure_to_friend = friend_window_start\n    earliest_arrival_to_friend = latest_departure_to_friend - timedelta(minutes=travel_to_friend)\n    \n    # Check if we can make it from arrival time\n    if earliest_arrival_to_friend >= arrival_time:\n        # We can wait at Alamo Square until departure time\n        wait_duration = (earliest_arrival_to_friend - arrival_time).total_seconds() / 60\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"wait\", \"location\": arrival_location, \"duration\": wait_duration, \"time\": format_time(arrival_time)},\n            {\"action\": \"travel\", \"location\": arrival_location, \"duration\": travel_to_friend, \n             \"time\": format_time(earliest_arrival_to_friend), \"to\": friend_location},\n            {\"action\": \"meet\", \"location\": friend_location, \"duration\": min_meeting_duration, \n             \"time\": format_time(friend_window_start)}\n        ]\n    else:\n        # We can't make it in time - no possible meeting\n        schedule = [\n            {\"action\": \"start\", \"location\": arrival_location, \"time\": format_time(arrival_time)},\n            {\"action\": \"wait\", \"location\": arrival_location, \"duration\": 0, \"time\": format_time(arrival_time)},\n            {\"action\": \"note\", \"message\": \"Cannot meet Timothy given constraints\"}\n        ]\n    \n    # Output as JSON\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_98",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:13AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "1:15PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef main():\n    # Input parameters\n    arrival_location = \"Fisherman's Wharf\"\n    arrival_time_str = \"9:00AM\"\n    arrival_time = parse_time(arrival_time_str)\n    \n    # Kevin's availability\n    kevin_start_str = \"1:15PM\"\n    kevin_end_str = \"7:15PM\"\n    kevin_start = parse_time(kevin_start_str)\n    kevin_end = parse_time(kevin_end_str)\n    kevin_location = \"Union Square\"\n    min_meet_duration = 15  # minutes\n    \n    # Travel times\n    travel_times = {\n        (\"Fisherman's Wharf\", \"Union Square\"): 13,\n        (\"Union Square\", \"Fisherman's Wharf\"): 15\n    }\n    \n    # Calculate possible meeting times\n    # Option 1: Go directly to Union Square and wait for Kevin\n    travel_to_union = travel_times[(arrival_location, kevin_location)]\n    arrival_at_union = arrival_time + timedelta(minutes=travel_to_union)\n    \n    # Option 2: Stay at Fisherman's Wharf until time to travel to meet Kevin\n    # We'll choose option 1 since we want to maximize meeting time\n    \n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": arrival_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Travel to Union Square\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": arrival_location,\n        \"duration\": travel_to_union,\n        \"time\": format_time(arrival_time),\n        \"to\": kevin_location\n    })\n    \n    # Wait until Kevin arrives if needed\n    if arrival_at_union < kevin_start:\n        wait_duration = (kevin_start - arrival_at_union).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": kevin_location,\n            \"time\": format_time(arrival_at_union)\n        })\n    else:\n        wait_duration = 0\n    \n    # Meet Kevin\n    meet_start = max(arrival_at_union, kevin_start)\n    meet_end = min(meet_start + timedelta(minutes=min_meet_duration), kevin_end)\n    actual_meet_duration = (meet_end - meet_start).seconds // 60\n    \n    if actual_meet_duration >= min_meet_duration:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": kevin_location,\n            \"duration\": actual_meet_duration,\n            \"time\": format_time(meet_start)\n        })\n    \n    # Output the schedule\n    print(json.dumps({\"schedule\": schedule}, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_99",
            "is_correct": false
        }
    ],
    "5shot": [
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "10:30AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 120,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt += timedelta(minutes=minutes)\n    return format_time(dt)\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = \"9:00AM\"\n    \n    schedule.append({\"action\": \"start\", \"location\": current_location, \"time\": current_time})\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    if travel_duration > 0:\n        current_time = add_minutes(current_time, travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": current_time,\n            \"to\": friend_location\n        })\n        current_location = friend_location\n    \n    # Wait until friend is available\n    if parse_time(current_time) < parse_time(friend_available_start):\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": friend_available_start\n        })\n        current_time = friend_available_start\n    \n    # Meet friend\n    meeting_end = add_minutes(current_time, min_meeting_duration)\n    if parse_time(meeting_end) > parse_time(friend_available_end):\n        # If we can't meet for full duration, meet as long as possible\n        meeting_end = friend_available_end\n        actual_duration = (parse_time(meeting_end) - parse_time(current_time)).seconds // 60\n    else:\n        actual_duration = min_meeting_duration\n    \n    if actual_duration > 0:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": actual_duration,\n            \"time\": current_time\n        })\n        current_time = add_minutes(current_time, actual_duration)\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"Marina District\"\n    travel_times = {\n        \"Marina District to Mission District\": 20,\n        \"Mission District to Marina District\": 19\n    }\n    friend_location = \"Mission District\"\n    friend_available_start = \"10:30AM\"\n    friend_available_end = \"1:30PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(\n        start_location,\n        travel_times,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_0",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "5:15PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "5:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 60,
                    "time": "5:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end_time\n    current_location = friend_location\n    \n    # Wait until friend is available\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet friend\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    friend_end = parse_time(friend_available_end)\n    if meeting_end_time > friend_end:\n        meeting_end_time = friend_end\n        min_meeting_duration = int((meeting_end_time - current_time).total_seconds() / 60)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    current_time = meeting_end_time\n    \n    return schedule\n\ndef main():\n    travel_times = {\n        \"Richmond District to Financial District\": 22,\n        \"Financial District to Richmond District\": 21\n    }\n    \n    start_location = \"Richmond District\"\n    friend_location = \"Financial District\"\n    friend_available_start = \"5:15PM\"\n    friend_available_end = \"9:45PM\"\n    min_meeting_duration = 60\n    \n    schedule = compute_schedule(\n        start_location,\n        travel_times,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_1",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:15AM",
                    "duration": 15,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "3:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 90,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    if travel_duration > 0:\n        current_time += timedelta(minutes=travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n        current_location = friend_location\n    \n    # Wait until friend is available\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        wait_time = (friend_start - current_time).total_seconds() / 60\n        current_time = friend_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n    \n    # Meet friend\n    friend_end = parse_time(friend_available_end)\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > friend_end:\n        meeting_end = friend_end\n        min_meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"Haight-Ashbury\"\n    travel_times = {\n        \"Haight-Ashbury to Sunset District\": 15,\n        \"Sunset District to Haight-Ashbury\": 15\n    }\n    friend_location = \"Sunset District\"\n    friend_available_start = \"3:15PM\"\n    friend_available_end = \"8:15PM\"\n    min_meeting_duration = 90\n    \n    schedule = calculate_schedule(\n        start_location,\n        travel_times,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_2",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:22AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end_time\n    current_location = friend_location\n    \n    # Wait until friend is available\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet friend\n    meet_end_time = current_time + timedelta(minutes=min_duration)\n    if meet_end_time > parse_time(friend_available_end):\n        # Not enough time to meet, adjust to latest possible\n        current_time = parse_time(friend_available_end) - timedelta(minutes=min_duration)\n        meet_end_time = parse_time(friend_available_end)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Bayview\"\ntravel_times = {\n    \"Bayview to Golden Gate Park\": 22,\n    \"Golden Gate Park to Bayview\": 23\n}\nfriend_location = \"Golden Gate Park\"\nfriend_available_start = \"8:00AM\"\nfriend_available_end = \"11:30AM\"\nmin_duration = 90\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_3",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:10AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "9:15AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 60,
                    "time": "9:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    # Initialize schedule\n    schedule = []\n    \n    # Parse input times\n    current_time = parse_time('9:00AM')\n    available_start = parse_time(friend_available_start)\n    available_end = parse_time(friend_available_end)\n    \n    # Add start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Calculate travel time to friend's location\n    travel_key = f\"{start_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    \n    # Add travel action\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    # If we arrive before available time, add wait action\n    if current_time < available_start:\n        wait_duration = (available_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    # Calculate meeting end time\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    \n    # Ensure we don't exceed friend's available time\n    if meeting_end > available_end:\n        meeting_end = available_end\n        actual_duration = (meeting_end - current_time).total_seconds() / 60\n    else:\n        actual_duration = min_meeting_duration\n    \n    # Add meeting action\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": actual_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"Presidio\"\n    travel_times = {\n        \"Presidio to Marina District\": 10,\n        \"Marina District to Presidio\": 10\n    }\n    friend_location = \"Marina District\"\n    friend_available_start = \"9:15AM\"\n    friend_available_end = \"5:45PM\"\n    min_meeting_duration = 60\n    \n    # Calculate schedule\n    schedule = calculate_schedule(\n        start_location,\n        travel_times,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    # Output as JSON\n    output = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_4",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "12:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 75,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": format_time(current_time)})\n    \n    # Travel to friend's location\n    travel_key = f\"{start_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Check if we need to wait\n    if current_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": format_time(current_time)})\n        current_time = friend_start\n    \n    # Calculate meeting end time\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    \n    # Ensure we don't exceed friend's availability\n    if meeting_end_time > friend_end:\n        meeting_end_time = friend_end\n        actual_meeting_duration = (meeting_end_time - current_time).seconds // 60\n    else:\n        actual_meeting_duration = min_meeting_duration\n    \n    if actual_meeting_duration > 0:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend_location,\n            \"duration\": actual_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Nob Hill\"\ntravel_times = {\n    \"Nob Hill to The Castro\": 17,\n    \"The Castro to Nob Hill\": 16\n}\nfriend_location = \"The Castro\"\nfriend_available_start = \"12:15PM\"\nfriend_available_end = \"10:00PM\"\nmin_meeting_duration = 75\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_5",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "2:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 90,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef compute_schedule(start_location, travel_info, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": format_time(current_time)})\n    \n    # Travel to friend's location\n    travel_key = f\"{start_location} to {friend_location}\"\n    travel_duration = travel_info.get(travel_key, 0)\n    if travel_duration > 0:\n        current_time += timedelta(minutes=travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": start_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n    \n    # Wait until friend is available\n    available_start = parse_time(friend_available_start)\n    if current_time < available_start:\n        wait_time = (available_start - current_time).total_seconds() / 60\n        current_time = available_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time = meeting_end\n    \n    return schedule\n\ndef main():\n    travel_info = {\n        \"Fisherman's Wharf to Nob Hill\": 11,\n        \"Nob Hill to Fisherman's Wharf\": 11\n    }\n    start_location = \"Fisherman's Wharf\"\n    friend_location = \"Nob Hill\"\n    friend_available_start = \"2:15PM\"\n    friend_available_end = \"7:45PM\"\n    min_meeting_duration = 90\n    \n    schedule = compute_schedule(\n        start_location,\n        travel_info,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_6",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "3:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt += timedelta(minutes=minutes)\n    return format_time(dt)\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = \"9:00AM\"\n    current_location = start_location\n    \n    schedule.append({\"action\": \"start\", \"location\": current_location, \"time\": current_time})\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    arrival_time = add_minutes(current_time, travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": current_time,\n        \"to\": friend_location\n    })\n    current_time = arrival_time\n    current_location = friend_location\n    \n    # Check if friend is available\n    if parse_time(current_time) < parse_time(friend_available_start):\n        # Need to wait\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": current_time\n        })\n        current_time = friend_available_start\n    \n    # Check if there's enough time to meet\n    if parse_time(current_time) + timedelta(minutes=min_meeting_duration) <= parse_time(friend_available_end):\n        # Schedule meeting\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": current_time\n        })\n        current_time = add_minutes(current_time, min_meeting_duration)\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"Richmond District\"\n    travel_time = {\n        \"Richmond District\": {\"North Beach\": 17},\n        \"North Beach\": {\"Richmond District\": 18}\n    }\n    friend_location = \"North Beach\"\n    friend_available_start = \"3:15PM\"\n    friend_available_end = \"5:15PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(\n        start_location,\n        travel_time,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_7",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "8:00AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Marina District"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 105,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_loc, arrival_time_str, friend_loc, friend_available_start_str, friend_available_end_str, min_meeting_duration, travel_time):\n    arrival_time = parse_time(arrival_time_str)\n    friend_available_start = parse_time(friend_available_start_str)\n    friend_available_end = parse_time(friend_available_end_str)\n    \n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_loc,\n        \"time\": format_time(arrival_time)\n    })\n    \n    # Travel to friend's location\n    travel_departure = arrival_time\n    travel_arrival = travel_departure + timedelta(minutes=travel_time)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_loc,\n        \"duration\": travel_time,\n        \"time\": format_time(travel_departure),\n        \"to\": friend_loc\n    })\n    \n    # Wait until friend is available\n    wait_start = travel_arrival\n    wait_end = friend_available_start\n    if wait_start < wait_end:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_loc,\n            \"time\": format_time(wait_start)\n        })\n    \n    # Meeting\n    meeting_start = friend_available_start\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    if meeting_end > friend_available_end:\n        meeting_end = friend_available_end\n        meeting_duration = (meeting_end - meeting_start).seconds // 60\n    else:\n        meeting_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_loc,\n        \"duration\": meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    return {\"schedule\": schedule}\n\n# Input parameters\nstart_loc = \"Chinatown\"\narrival_time_str = \"9:00AM\"\nfriend_loc = \"Marina District\"\nfriend_available_start_str = \"8:00AM\"\nfriend_available_end_str = \"3:00PM\"\nmin_meeting_duration = 105\ntravel_time = 12\n\n# Compute schedule\nresult = compute_schedule(\n    start_loc,\n    arrival_time_str,\n    friend_loc,\n    friend_available_start_str,\n    friend_available_end_str,\n    min_meeting_duration,\n    travel_time\n)\n\n# Output JSON\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_8",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 9,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:09AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "12:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "12:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "12:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt += timedelta(minutes=minutes)\n    return format_time(dt)\n\ndef compute_schedule(start_location, travel_info, friend_location, friend_available_from, friend_available_to, min_meeting_duration):\n    schedule = []\n    current_time = \"9:00AM\"\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": current_time\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_info.get(travel_key, 0)\n    if travel_duration > 0:\n        arrival_time = add_minutes(current_time, travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": current_time,\n            \"to\": friend_location\n        })\n        current_time = arrival_time\n        current_location = friend_location\n    \n    # Check if we need to wait\n    if parse_time(current_time) < parse_time(friend_available_from):\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": current_time\n        })\n        current_time = friend_available_from\n    \n    # Schedule meeting\n    meeting_end = add_minutes(current_time, min_meeting_duration)\n    if parse_time(meeting_end) > parse_time(friend_available_to):\n        # Can't meet for full duration, adjust to latest possible\n        meeting_end = friend_available_to\n        current_time = add_minutes(meeting_end, -min_meeting_duration)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": current_time\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Union Square\"\ntravel_info = {\n    \"Union Square to Nob Hill\": 9,\n    \"Nob Hill to Union Square\": 7\n}\nfriend_location = \"Nob Hill\"\nfriend_available_from = \"12:00PM\"\nfriend_available_to = \"4:15PM\"\nmin_meeting_duration = 75\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_info,\n    friend_location,\n    friend_available_from,\n    friend_available_to,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_9",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "10:15AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 15,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_time\n    current_location = friend_location\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Wait if arrived before friend is available\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Calculate meeting time\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > friend_end:\n        # Adjust meeting to fit within friend's availability\n        meeting_end = friend_end\n        meeting_start = meeting_end - timedelta(minutes=min_meeting_duration)\n        if meeting_start < current_time:\n            meeting_start = current_time\n            meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n            if meeting_end > friend_end:\n                meeting_end = friend_end\n        current_time = meeting_start\n    else:\n        meeting_start = current_time\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    return schedule\n\n# Input parameters\ntravel_times = {\n    \"Golden Gate Park to Marina District\": 16,\n    \"Marina District to Golden Gate Park\": 18\n}\n\nstart_location = \"Golden Gate Park\"\nfriend_location = \"Marina District\"\nfriend_available_start = \"10:15AM\"\nfriend_available_end = \"1:30PM\"\nmin_meeting_duration = 15\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_10",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 25,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:25AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_data, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_data.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end_time\n    current_location = friend_location\n    \n    # Check if friend is available now\n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    if current_time < friend_start:\n        # Need to wait\n        wait_time = (friend_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Calculate meeting time\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end > friend_end:\n        # Can't meet for full duration, adjust\n        possible_duration = (friend_end - current_time).total_seconds() / 60\n        if possible_duration <= 0:\n            return None  # Can't meet at all\n        \n        meeting_end = current_time + timedelta(minutes=possible_duration)\n        min_meeting_duration = possible_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Nob Hill\"\ntravel_data = {\n    \"Nob Hill to Sunset District\": 25,\n    \"Sunset District to Nob Hill\": 27\n}\nfriend_location = \"Sunset District\"\nfriend_available_start = \"2:00PM\"\nfriend_available_end = \"8:30PM\"\nmin_meeting_duration = 75\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_data,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\"schedule\": schedule} if schedule else {\"schedule\": []}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_11",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "6:00PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef compute_schedule(start_location, travel_info, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_info.get(travel_key, 0)\n    if travel_duration > 0:\n        current_time = add_minutes(current_time, travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n        current_location = friend_location\n    \n    # Wait until friend is available\n    available_start = parse_time(friend_available_start)\n    if current_time < available_start:\n        wait_until = available_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(wait_until)\n        })\n        current_time = available_start\n    \n    # Meet friend\n    available_end = parse_time(friend_available_end)\n    meeting_end = min(add_minutes(current_time, min_meeting_duration), available_end)\n    meeting_duration = (meeting_end - current_time).seconds // 60\n    if meeting_duration > 0:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": meeting_duration,\n            \"time\": format_time(current_time)\n        })\n        current_time = meeting_end\n    \n    return schedule\n\n# Input parameters for the current scenario\nstart_location = \"North Beach\"\ntravel_info = {\n    \"North Beach to Alamo Square\": 16,\n    \"Alamo Square to North Beach\": 15\n}\nfriend_location = \"Alamo Square\"\nfriend_available_start = \"6:00PM\"\nfriend_available_end = \"9:30PM\"\nmin_meeting_duration = 90\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_info,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_12",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:18AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "6:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "6:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 75,
                    "time": "6:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_info, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    # Initialize schedule\n    schedule = []\n    \n    # Parse times\n    current_time = parse_time('9:00AM')\n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Start at initial location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{start_location} to {friend_location}\"\n    travel_duration = travel_info[travel_key]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time - timedelta(minutes=travel_duration)),\n        \"to\": friend_location\n    })\n    \n    # Wait until friend is available\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > friend_end:\n        # Adjust meeting time if needed\n        current_time = friend_end - timedelta(minutes=min_meeting_duration)\n        meeting_end = friend_end\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"Presidio\"\n    travel_info = {\n        \"Presidio to North Beach\": 18,\n        \"North Beach to Presidio\": 17\n    }\n    friend_location = \"North Beach\"\n    friend_available_start = \"6:45PM\"\n    friend_available_end = \"10:00PM\"\n    min_meeting_duration = 75\n    \n    # Compute schedule\n    schedule = compute_schedule(\n        start_location,\n        travel_info,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    # Output as JSON\n    output = {\n        \"schedule\": schedule\n    }\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_13",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "time": "8:00PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Marina District"
                },
                {
                    "action": "wait",
                    "location": "Marina District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Marina District",
                    "duration": 120,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    if travel_duration > 0:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n    \n    current_time = travel_end_time\n    current_location = friend_location\n    \n    # Friend's available time\n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # If we arrive before friend is available, wait\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Schedule meeting\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > friend_end:\n        # Can't meet for full duration, adjust to max possible\n        possible_duration = (friend_end - current_time).total_seconds() / 60\n        if possible_duration > 0:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": possible_duration,\n                \"time\": format_time(current_time)\n            })\n    else:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"Nob Hill\"\n    travel_times = {\n        \"Nob Hill to Marina District\": 11,\n        \"Marina District to Nob Hill\": 12\n    }\n    friend_location = \"Marina District\"\n    friend_available_start = \"8:00PM\"\n    friend_available_end = \"10:00PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(\n        start_location,\n        travel_times,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_14",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 21,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:21AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "1:00PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 21,
                    "time": "9:21AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 90,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_info, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_info.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_location = friend_location\n    current_time = travel_end_time\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Wait if arrived before friend is available\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Calculate meeting end time\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    \n    # Adjust if meeting would go past friend's availability\n    if meeting_end_time > friend_end:\n        meeting_end_time = friend_end\n        current_time = meeting_end_time - timedelta(minutes=min_meeting_duration)\n    \n    # Add meeting to schedule\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Russian Hill\"\ntravel_info = {\n    \"Russian Hill to Golden Gate Park\": 21,\n    \"Golden Gate Park to Russian Hill\": 19\n}\nfriend_location = \"Golden Gate Park\"\nfriend_available_start = \"1:00PM\"\nfriend_available_end = \"6:15PM\"\nmin_meeting_duration = 90\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_info,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_15",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "3:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "3:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 105,
                    "time": "3:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef compute_schedule():\n    # Input parameters\n    start_location = \"Chinatown\"\n    start_time_str = \"9:00AM\"\n    friend_location = \"Russian Hill\"\n    friend_available_start_str = \"3:15PM\"\n    friend_available_end_str = \"9:30PM\"\n    travel_time_to_friend = 7  # Chinatown to Russian Hill\n    min_meeting_duration = 105  # minutes\n    \n    # Parse times\n    start_time = parse_time(start_time_str)\n    friend_available_start = parse_time(friend_available_start_str)\n    friend_available_end = parse_time(friend_available_end_str)\n    \n    # Calculate arrival time at friend's location\n    travel_end_time = start_time + timedelta(minutes=travel_time_to_friend)\n    \n    # Calculate meeting time\n    meeting_start = friend_available_start\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    \n    # Ensure meeting doesn't exceed friend's availability\n    if meeting_end > friend_available_end:\n        meeting_end = friend_available_end\n        meeting_start = meeting_end - timedelta(minutes=min_meeting_duration)\n    \n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time_to_friend, \n         \"time\": format_time(start_time), \"to\": friend_location},\n        {\"action\": \"wait\", \"location\": friend_location, \"time\": format_time(travel_end_time)},\n        {\"action\": \"meet\", \"location\": friend_location, \"duration\": min_meeting_duration, \n         \"time\": format_time(meeting_start)}\n    ]\n    \n    return {\"schedule\": schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_16",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "1:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 15,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_time\n    current_location = friend_location\n    \n    # Check if we need to wait\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Calculate meeting time\n    friend_end = parse_time(friend_available_end)\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end > friend_end:\n        # Can't meet for full duration, adjust to max possible\n        meeting_end = friend_end\n        actual_duration = (meeting_end - current_time).seconds // 60\n    else:\n        actual_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": actual_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"Alamo Square\"\n    travel_times = {\n        \"Alamo Square to Sunset District\": 16,\n        \"Sunset District to Alamo Square\": 17\n    }\n    friend_location = \"Sunset District\"\n    friend_available_start = \"1:30PM\"\n    friend_available_end = \"2:30PM\"\n    min_meeting_duration = 15\n    \n    schedule = calculate_schedule(\n        start_location,\n        travel_times,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_17",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:30PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "8:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_info, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": format_time(current_time)})\n    \n    # Travel to friend's location\n    travel_key = f\"{start_location} to {friend_location}\"\n    travel_duration = travel_info[travel_key]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    # Wait until friend is available\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        wait_time = (friend_start - current_time).total_seconds() / 60\n        current_time = friend_start\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": format_time(current_time)})\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time = meeting_end\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Marina District\"\ntravel_info = {\n    \"Marina District to Richmond District\": 11,\n    \"Richmond District to Marina District\": 9\n}\nfriend_location = \"Richmond District\"\nfriend_available_start = \"8:30PM\"\nfriend_available_end = \"10:00PM\"\nmin_meeting_duration = 75\n\n# Compute schedule\nschedule = compute_schedule(start_location, travel_info, friend_location, friend_available_start, friend_available_end, min_meeting_duration)\n\n# Output as JSON\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_18",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end_time\n    current_location = friend_location\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # If arrived before friend is available, wait\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Check if enough time to meet\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end <= friend_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n    \n    return schedule\n\n# Input parameters for the specific scenario\nstart_location = \"Golden Gate Park\"\ntravel_times = {\n    \"Golden Gate Park to Pacific Heights\": 16,\n    \"Pacific Heights to Golden Gate Park\": 15\n}\nfriend_location = \"Pacific Heights\"\nfriend_available_start = \"7:45PM\"\nfriend_available_end = \"8:45PM\"\nmin_meeting_duration = 45\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_19",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:08AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef calculate_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Calculate travel time to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    \n    if travel_duration > 0:\n        travel_end_time = current_time + timedelta(minutes=travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n        current_time = travel_end_time\n        current_location = friend_location\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # If we arrive before friend is available, wait\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Calculate meeting time\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end_time > friend_end:\n        # Can't meet for full duration, adjust to max possible\n        possible_duration = (friend_end - current_time).total_seconds() / 60\n        if possible_duration > 0:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": possible_duration,\n                \"time\": format_time(current_time)\n            })\n    else:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n    \n    return schedule\n\ndef main():\n    # Input parameters for the current problem\n    start_location = \"Chinatown\"\n    travel_times = {\n        \"Chinatown to Nob Hill\": 8,\n        \"Nob Hill to Chinatown\": 6\n    }\n    friend_location = \"Nob Hill\"\n    friend_available_start = \"11:30AM\"\n    friend_available_end = \"3:15PM\"\n    min_meeting_duration = 75\n    \n    schedule = calculate_schedule(\n        start_location,\n        travel_times,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_20",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "9:12AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    current_time += timedelta(minutes=travel_duration)\n    current_location = friend_location\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # If we arrive before friend is available, wait\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Calculate meeting end time\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    \n    # If meeting would go past friend's availability, adjust\n    if meeting_end > friend_end:\n        meeting_end = friend_end\n        actual_duration = (meeting_end - current_time).total_seconds() / 60\n    else:\n        actual_duration = min_meeting_duration\n    \n    # Add meeting to schedule\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": actual_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters for the specific scenario\nstart_location = \"Mission District\"\ntravel_time = {\n    \"Mission District\": {\"Haight-Ashbury\": 12},\n    \"Haight-Ashbury\": {\"Mission District\": 11}\n}\nfriend_location = \"Haight-Ashbury\"\nfriend_available_start = \"8:00AM\"\nfriend_available_end = \"3:45PM\"\nmin_meeting_duration = 30\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_21",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "11:15AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 105,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_end = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end\n    current_location = friend_location\n    \n    # Check if we need to wait\n    available_start = parse_time(friend_available_start)\n    if current_time < available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    # Calculate meeting end time\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    available_end = parse_time(friend_available_end)\n    \n    if meeting_end > available_end:\n        # Can't meet for full duration, adjust to max possible\n        meeting_end = available_end\n        actual_duration = (meeting_end - current_time).total_seconds() / 60\n        if actual_duration <= 0:\n            # No time to meet\n            return None\n    else:\n        actual_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": actual_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Presidio\"\ntravel_times = {\n    \"Presidio to Union Square\": 22,\n    \"Union Square to Presidio\": 24\n}\nfriend_location = \"Union Square\"\nfriend_available_start = \"11:15AM\"\nfriend_available_end = \"5:15PM\"\nmin_meeting_duration = 105\n\n# Calculate schedule\nschedule = calculate_schedule(start_location, travel_times, friend_location, \n                             friend_available_start, friend_available_end, \n                             min_meeting_duration)\n\n# Output as JSON\noutput = {\"schedule\": schedule} if schedule else {\"schedule\": []}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_22",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "5:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "5:30PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 75,
                    "time": "5:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    # Start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n    \n    # Check if we need to wait\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meeting\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Bayview\"\ntravel_time = {\n    \"Bayview\": {\"Russian Hill\": 23},\n    \"Russian Hill\": {\"Bayview\": 23}\n}\nfriend_location = \"Russian Hill\"\nfriend_available_start = \"5:30PM\"\nfriend_available_end = \"9:00PM\"\nmin_meeting_duration = 75\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_23",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:00AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    arrival_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    current_time = arrival_time\n    current_location = friend_location\n    \n    # Wait until friend is available\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    friend_end = parse_time(friend_available_end)\n    if meeting_end > friend_end:\n        meeting_end = friend_end\n        actual_duration = (meeting_end - current_time).seconds // 60\n    else:\n        actual_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": actual_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Nob Hill\"\ntravel_time = {\n    \"Nob Hill\": {\"Presidio\": 17},\n    \"Presidio\": {\"Nob Hill\": 18}\n}\nfriend_location = \"Presidio\"\nfriend_available_start = \"11:00AM\"\nfriend_available_end = \"3:15PM\"\nmin_meeting_duration = 30\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_24",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "4:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 105,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end_time\n    current_location = friend_location\n    \n    # Check if we need to wait\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Schedule meeting\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    friend_end = parse_time(friend_available_end)\n    \n    if meeting_end_time > friend_end:\n        # Adjust meeting to fit within friend's availability\n        meeting_end_time = friend_end\n        current_time = friend_end - timedelta(minutes=min_meeting_duration)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"Golden Gate Park\"\n    travel_times = {\n        \"Golden Gate Park to Chinatown\": 23,\n        \"Chinatown to Golden Gate Park\": 23\n    }\n    friend_location = \"Chinatown\"\n    friend_available_start = \"4:00PM\"\n    friend_available_end = \"9:45PM\"\n    min_meeting_duration = 105\n    \n    schedule = compute_schedule(\n        start_location,\n        travel_times,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_25",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:15PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 105,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[start_location][friend_location]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    # Check if friend is available\n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    if current_time < friend_start:\n        # Need to wait\n        wait_duration = (friend_start - current_time).total_seconds() / 60\n        current_time = friend_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n    \n    # Calculate meeting time\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > friend_end:\n        # Can't meet for full duration, adjust to max possible\n        possible_duration = (friend_end - current_time).total_seconds() / 60\n        if possible_duration >= 15:  # Minimum meeting time\n            meeting_end = current_time + timedelta(minutes=possible_duration)\n        else:\n            # Can't meet at all\n            return None\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"Richmond District\"\n    travel_time = {\n        \"Richmond District\": {\n            \"Presidio\": 7\n        },\n        \"Presidio\": {\n            \"Richmond District\": 7\n        }\n    }\n    friend_location = \"Presidio\"\n    friend_available_start = \"1:15PM\"\n    friend_available_end = \"3:15PM\"\n    min_meeting_duration = 105\n    \n    schedule = calculate_schedule(\n        start_location,\n        travel_time,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    if schedule:\n        result = {\n            \"schedule\": schedule\n        }\n    else:\n        result = {\n            \"schedule\": [],\n            \"error\": \"No valid meeting time available\"\n        }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_26",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "7:00PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 15,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef compute_schedule(start_location, start_time_str, friend_location, friend_available_start_str, friend_available_end_str, travel_time_to_friend, travel_time_from_friend, min_meeting_duration):\n    start_time = parse_time(start_time_str)\n    friend_available_start = parse_time(friend_available_start_str)\n    friend_available_end = parse_time(friend_available_end_str)\n    \n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)})\n    \n    # Travel to friend\n    travel_start_time = start_time\n    travel_end_time = add_minutes(travel_start_time, travel_time_to_friend)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_time_to_friend,\n        \"time\": format_time(travel_start_time),\n        \"to\": friend_location\n    })\n    \n    # Arrive at friend's location\n    current_time = travel_end_time\n    \n    # Check if need to wait\n    if current_time < friend_available_start:\n        wait_time = (friend_available_start - current_time).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_available_start\n    \n    # Check if meeting is possible\n    meeting_end_time = add_minutes(current_time, min_meeting_duration)\n    if meeting_end_time > friend_available_end:\n        # Can't meet, return empty schedule\n        return {\"schedule\": []}\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return {\"schedule\": schedule}\n\n# Input parameters for the current scenario\nstart_location = \"Marina District\"\nstart_time = \"9:00AM\"\nfriend_location = \"Pacific Heights\"\nfriend_available_start = \"7:00PM\"\nfriend_available_end = \"7:45PM\"\ntravel_time_to_friend = 7\ntravel_time_from_friend = 6\nmin_meeting_duration = 15\n\n# Compute the schedule\nresult = compute_schedule(\n    start_location,\n    start_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    travel_time_to_friend,\n    travel_time_from_friend,\n    min_meeting_duration\n)\n\n# Output the result as JSON\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_27",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_info, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_info.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_location = friend_location\n    current_time = travel_end_time\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Wait if arrived before friend is available\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Check if there's enough time to meet\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end <= friend_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n    \n    return schedule\n\ndef main():\n    travel_distances = {\n        \"Union Square to Chinatown\": 7,\n        \"Chinatown to Union Square\": 7\n    }\n    \n    start_location = \"Union Square\"\n    friend_location = \"Chinatown\"\n    friend_available_start = \"6:00PM\"\n    friend_available_end = \"9:30PM\"\n    min_meeting_duration = 75\n    \n    schedule = compute_schedule(\n        start_location,\n        travel_distances,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_28",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 15,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end_time\n    current_location = friend_location\n    \n    # Check if friend is available now\n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    if current_time < friend_start:\n        # Need to wait\n        wait_time = (friend_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Check if we can have the meeting\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end <= friend_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n    else:\n        # Can't meet - not enough time\n        pass\n    \n    return {\"schedule\": schedule}\n\n# Input parameters for the specific problem\nstart_location = \"Sunset District\"\ntravel_times = {\n    \"Sunset District to Haight-Ashbury\": 15,\n    \"Haight-Ashbury to Sunset District\": 15\n}\nfriend_location = \"Haight-Ashbury\"\nfriend_available_start = \"7:30PM\"\nfriend_available_end = \"9:45PM\"\nmin_meeting_duration = 75\n\n# Compute the schedule\nresult = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_29",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 120,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    \n    if travel_duration > 0:\n        travel_end_time = current_time + timedelta(minutes=travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n        current_time = travel_end_time\n        current_location = friend_location\n    \n    available_start = parse_time(friend_available_start)\n    available_end = parse_time(friend_available_end)\n    \n    if current_time < available_start:\n        wait_time = (available_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end_time <= available_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n        current_time = meeting_end_time\n    \n    return schedule\n\ndef main():\n    start_location = \"Richmond District\"\n    travel_times = {\n        \"Richmond District to North Beach\": 17,\n        \"North Beach to Richmond District\": 18\n    }\n    friend_location = \"North Beach\"\n    friend_available_start = \"9:30AM\"\n    friend_available_end = \"4:15PM\"\n    min_meeting_duration = 120\n    \n    schedule = compute_schedule(\n        start_location,\n        travel_times,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_30",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:11AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt += timedelta(minutes=minutes)\n    return format_time(dt)\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_available_from, friend_available_to, min_meeting_duration):\n    schedule = []\n    current_time = \"9:00AM\"\n    current_location = start_location\n    \n    schedule.append({\"action\": \"start\", \"location\": current_location, \"time\": current_time})\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    arrival_time = add_minutes(current_time, travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": current_time,\n        \"to\": friend_location\n    })\n    current_time = arrival_time\n    current_location = friend_location\n    \n    # Check if friend is available now\n    if parse_time(current_time) < parse_time(friend_available_from):\n        # Need to wait\n        wait_until = friend_available_from\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": current_time\n        })\n        current_time = wait_until\n    \n    # Calculate meeting end time\n    meeting_end = add_minutes(current_time, min_meeting_duration)\n    \n    # Check if meeting can fit in friend's availability\n    if parse_time(meeting_end) > parse_time(friend_available_to):\n        # Adjust meeting duration to fit\n        available_duration = (parse_time(friend_available_to) - parse_time(current_time)).total_seconds() / 60\n        meeting_end = friend_available_to\n        actual_duration = available_duration\n    else:\n        actual_duration = min_meeting_duration\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": actual_duration,\n        \"time\": current_time\n    })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Nob Hill\"\ntravel_time = {\n    \"Nob Hill\": {\"Alamo Square\": 11},\n    \"Alamo Square\": {\"Nob Hill\": 11}\n}\nfriend_location = \"Alamo Square\"\nfriend_available_from = \"7:15AM\"\nfriend_available_to = \"1:00PM\"\nmin_meeting_duration = 15\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_from,\n    friend_available_to,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_31",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:11AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 105,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    if travel_duration > 0:\n        current_time += timedelta(minutes=travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n        current_location = friend_location\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Wait if needed\n    if current_time < friend_start:\n        wait_time = (friend_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > friend_end:\n        # Can't meet for full duration, adjust to maximum possible\n        possible_duration = (friend_end - current_time).total_seconds() / 60\n        if possible_duration > 0:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": possible_duration,\n                \"time\": format_time(current_time)\n            })\n    else:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"The Castro\"\n    travel_times = {\n        \"The Castro to Golden Gate Park\": 11,\n        \"Golden Gate Park to The Castro\": 13\n    }\n    friend_location = \"Golden Gate Park\"\n    friend_available_start = \"7:00AM\"\n    friend_available_end = \"5:30PM\"\n    min_meeting_duration = 105\n    \n    schedule = calculate_schedule(\n        start_location,\n        travel_times,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_32",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 30,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "12:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 30,
                    "time": "9:30AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt += timedelta(minutes=minutes)\n    return format_time(dt)\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = \"9:00AM\"\n    \n    schedule.append({\"action\": \"start\", \"location\": current_location, \"time\": current_time})\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    if travel_duration > 0:\n        arrival_time = add_minutes(current_time, travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": current_time,\n            \"to\": friend_location\n        })\n        current_time = arrival_time\n        current_location = friend_location\n    \n    # Check if friend is available\n    available_start = friend_available_start\n    available_end = friend_available_end\n    \n    if parse_time(current_time) < parse_time(available_start):\n        # Need to wait\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": current_time\n        })\n        current_time = available_start\n    \n    # Calculate meeting end time\n    meeting_end = add_minutes(current_time, min_meeting_duration)\n    \n    if parse_time(meeting_end) <= parse_time(available_end):\n        # Can meet for required duration\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": current_time\n        })\n    else:\n        # Can't meet for full duration, meet as long as possible\n        possible_duration = (parse_time(available_end) - parse_time(current_time)).total_seconds() / 60\n        if possible_duration > 0:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": int(possible_duration),\n                \"time\": current_time\n            })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Sunset District\"\ntravel_times = {\n    \"Sunset District to Union Square\": 30,\n    \"Union Square to Sunset District\": 26\n}\nfriend_location = \"Union Square\"\nfriend_available_start = \"12:30PM\"\nfriend_available_end = \"9:30PM\"\nmin_meeting_duration = 15\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_33",
            "is_correct": false
        },
        {
            "final_program_plan": null,
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 105,
                    "time": "12:15PM"
                }
            ],
            "type_error": "TypeError",
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    \n    # Convert times to datetime objects\n    current_time = parse_time('9:00AM')\n    available_start = parse_time(friend_available_start)\n    available_end = parse_time(friend_available_end)\n    \n    # Start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel action\n    travel_duration = travel_time[0] if travel_time[0]['from'] == start_location and travel_time[0]['to'] == friend_location else travel_time[1]['duration']\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time - timedelta(minutes=travel_duration)),\n        \"to\": friend_location\n    })\n    \n    # Wait action if needed\n    if current_time < available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    # Meet action\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > available_end:\n        meeting_end = available_end\n        min_meeting_duration = int((meeting_end - current_time).total_seconds() / 60)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Bayview\"\ntravel_time = [\n    {\"from\": \"Bayview\", \"to\": \"Pacific Heights\", \"duration\": 23},\n    {\"from\": \"Pacific Heights\", \"to\": \"Bayview\", \"duration\": 22}\n]\nfriend_location = \"Pacific Heights\"\nfriend_available_start = \"12:15PM\"\nfriend_available_end = \"5:15PM\"\nmin_meeting_duration = 105\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_34",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:18AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 90,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    \n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_location = friend_location\n    current_time = travel_time\n    \n    # Wait until friend is available\n    available_start = parse_time(friend_available_start)\n    if current_time < available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    # Meet friend\n    available_end = parse_time(friend_available_end)\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > available_end:\n        meeting_end = available_end\n        actual_duration = (meeting_end - current_time).seconds // 60\n    else:\n        actual_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": actual_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Bayview\"\ntravel_times = {\n    \"Bayview to Chinatown\": 18,\n    \"Chinatown to Bayview\": 22\n}\nfriend_location = \"Chinatown\"\nfriend_available_start = \"8:30AM\"\nfriend_available_end = \"12:30PM\"\nmin_meeting_duration = 90\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_35",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:14AM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "1:30PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 60,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Wait if needed\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Check if meeting is possible\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > friend_end:\n        # Not enough time to meet\n        return None\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Marina District\"\ntravel_time = {\n    \"Marina District\": {\n        \"Embarcadero\": 14\n    },\n    \"Embarcadero\": {\n        \"Marina District\": 12\n    }\n}\nfriend_location = \"Embarcadero\"\nfriend_available_start = \"1:30PM\"\nfriend_available_end = \"8:45PM\"\nmin_meeting_duration = 60\n\n# Compute schedule\nschedule = compute_schedule(start_location, travel_time, friend_location, \n                           friend_available_start, friend_available_end, \n                           min_meeting_duration)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n} if schedule else {\"error\": \"No valid schedule found\"}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_36",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:19AM",
                    "duration": 19,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:19AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "12:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "12:15PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 90,
                    "time": "12:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    current_time = add_minutes(current_time, travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    current_location = friend_location\n    \n    # Wait until friend is available\n    available_start = parse_time(friend_available_start)\n    if current_time < available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    # Meet friend\n    available_end = parse_time(friend_available_end)\n    meeting_end = add_minutes(current_time, min_meeting_duration)\n    if meeting_end > available_end:\n        meeting_end = available_end\n        actual_duration = (meeting_end - current_time).seconds // 60\n    else:\n        actual_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": actual_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Bayview\"\ntravel_time = {\n    \"Bayview\": {\"Financial District\": 19},\n    \"Financial District\": {\"Bayview\": 19}\n}\nfriend_location = \"Financial District\"\nfriend_available_start = \"12:15PM\"\nfriend_available_end = \"2:00PM\"\nmin_meeting_duration = 90\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_37",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    \n    current_time = parse_time('9:00AM')\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[start_location + \" to \" + friend_location]\n    arrival_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(arrival_time),\n        \"to\": friend_location\n    })\n    \n    current_time = arrival_time\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # If we arrive before friend is available, wait\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(friend_start)\n        })\n        current_time = friend_start\n    \n    # Check if we can have the meeting\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end <= friend_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n    else:\n        # If not enough time, meet for whatever time is left\n        available_duration = (friend_end - current_time).total_seconds() / 60\n        if available_duration > 0:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": friend_location,\n                \"duration\": int(available_duration),\n                \"time\": format_time(current_time)\n            })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Union Square\"\ntravel_time = {\n    \"Union Square to North Beach\": 10,\n    \"North Beach to Union Square\": 7\n}\nfriend_location = \"North Beach\"\nfriend_available_start = \"9:45PM\"\nfriend_available_end = \"10:30PM\"\nmin_meeting_duration = 45\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_38",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:45PM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 120,
                    "time": "4:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[start_location][friend_location]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"from\": start_location,\n        \"to\": friend_location\n    })\n    \n    # Wait until friend is available\n    available_start = parse_time(friend_available_start)\n    if current_time < available_start:\n        wait_duration = (available_start - current_time).total_seconds() / 60\n        current_time = available_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"duration\": wait_duration,\n            \"time\": format_time(current_time)\n        })\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time),\n        \"until\": format_time(meeting_end)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Fisherman's Wharf\"\ntravel_time = {\n    \"Fisherman's Wharf\": {\"Nob Hill\": 11},\n    \"Nob Hill\": {\"Fisherman's Wharf\": 11}\n}\nfriend_location = \"Nob Hill\"\nfriend_available_start = \"4:45PM\"\nfriend_available_end = \"9:45PM\"\nmin_meeting_duration = 120\n\n# Calculate schedule\nschedule = calculate_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_39",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "2:15PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 75,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[0] if friend_location != start_location else 0\n    if travel_duration > 0:\n        current_time += timedelta(minutes=travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": start_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n    \n    # Friend's available time window\n    available_start = parse_time(friend_available_start)\n    available_end = parse_time(friend_available_end)\n    \n    # Wait if needed\n    if current_time < available_start:\n        wait_until = available_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(wait_until)\n        })\n        current_time = wait_until\n    \n    # Schedule meeting\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > available_end:\n        meeting_end = available_end\n        min_meeting_duration = int((meeting_end - current_time).total_seconds() / 60)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"The Castro\"\ntravel_time = (17, 17)  # (to friend's location, return)\nfriend_location = \"Sunset District\"\nfriend_available_start = \"2:15PM\"\nfriend_available_end = \"8:00PM\"\nmin_meeting_duration = 75\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_40",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:18AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 45,
                    "time": "9:18AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Wait if needed\n    if current_time < friend_start:\n        wait_time = (friend_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Check if meeting is possible\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end <= friend_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n    else:\n        # If not enough time, meet as much as possible\n        possible_duration = (friend_end - current_time).total_seconds() / 60\n        if possible_duration > 0:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": int(possible_duration),\n                \"time\": format_time(current_time)\n            })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"North Beach\"\ntravel_time = {\n    \"North Beach\": {\"Haight-Ashbury\": 18},\n    \"Haight-Ashbury\": {\"North Beach\": 19}\n}\nfriend_location = \"Haight-Ashbury\"\nfriend_available_start = \"7:30AM\"\nfriend_available_end = \"1:15PM\"\nmin_meeting_duration = 45\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_41",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "1:00PM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "1:00PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 30,
                    "time": "1:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_time\n    current_location = friend_location\n    \n    # Wait until friend is available\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    friend_end = parse_time(friend_available_end)\n    if meeting_end > friend_end:\n        meeting_end = friend_end\n        min_meeting_duration = int((meeting_end - current_time).total_seconds() / 60)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\ntravel_times = {\n    \"Nob Hill to Presidio\": 17,\n    \"Presidio to Nob Hill\": 18\n}\n\nstart_location = \"Nob Hill\"\nfriend_location = \"Presidio\"\nfriend_available_start = \"1:00PM\"\nfriend_available_end = \"7:00PM\"\nmin_meeting_duration = 30\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_42",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": format_time(current_time)})\n    \n    # Travel to friend's location\n    travel_duration = travel_time[0]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time - timedelta(minutes=travel_duration)),\n        \"to\": friend_location\n    })\n    \n    # Check if friend is available now\n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    if current_time >= friend_start and current_time <= friend_end - timedelta(minutes=min_meeting_duration):\n        # Can meet immediately\n        meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n        current_time = meeting_end\n    else:\n        if current_time < friend_start:\n            # Need to wait\n            wait_time = (friend_start - current_time).total_seconds() / 60\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": friend_location,\n                \"time\": format_time(current_time)\n            })\n            current_time = friend_start\n        \n        # Check if we can meet after waiting\n        if current_time <= friend_end - timedelta(minutes=min_meeting_duration):\n            meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": friend_location,\n                \"duration\": min_meeting_duration,\n                \"time\": format_time(current_time)\n            })\n            current_time = meeting_end\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Marina District\"\ntravel_time = (16, 12)  # Marina District to Chinatown, Chinatown to Marina District\nfriend_location = \"Chinatown\"\nfriend_available_start = \"9:00AM\"\nfriend_available_end = \"11:45AM\"\nmin_meeting_duration = 15\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Prepare the output\noutput = {\n    \"schedule\": schedule\n}\n\n# Print as JSON\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_43",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 105,
                    "time": "9:13AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt += timedelta(minutes=minutes)\n    return format_time(dt)\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available, min_meet_duration):\n    schedule = []\n    \n    # Initial start\n    current_time = \"9:00AM\"\n    current_location = start_location\n    schedule.append({\"action\": \"start\", \"location\": current_location, \"time\": current_time})\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    if travel_duration > 0:\n        arrival_time = add_minutes(current_time, travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": current_time,\n            \"to\": friend_location\n        })\n        current_time = arrival_time\n        current_location = friend_location\n    \n    # Parse friend's available time\n    available_start, available_end = friend_available.split(\" to \")\n    available_start_dt = parse_time(available_start)\n    current_dt = parse_time(current_time)\n    \n    # Wait if needed\n    if current_dt < available_start_dt:\n        wait_until = available_start\n        schedule.append({\"action\": \"wait\", \"location\": current_location, \"time\": current_time})\n        current_time = wait_until\n    \n    # Meet friend\n    meet_end = add_minutes(current_time, min_meet_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meet_duration,\n        \"time\": current_time\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Pacific Heights\"\ntravel_times = {\n    \"Pacific Heights to Fisherman's Wharf\": 13,\n    \"Fisherman's Wharf to Pacific Heights\": 12\n}\nfriend_location = \"Fisherman's Wharf\"\nfriend_available = \"8:45AM to 6:00PM\"\nmin_meet_duration = 105\n\n# Compute schedule\nschedule = compute_schedule(start_location, travel_times, friend_location, friend_available, min_meet_duration)\n\n# Output as JSON\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_44",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:16AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "7:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "7:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 15,
                    "time": "7:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    schedule.append({\"action\": \"start\", \"location\": current_location, \"time\": format_time(current_time)})\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Wait if arrived before friend is available\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Check if enough time to meet\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end_time <= friend_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n    else:\n        # If not enough time, meet as much as possible\n        possible_duration = (friend_end - current_time).total_seconds() / 60\n        if possible_duration > 0:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": possible_duration,\n                \"time\": format_time(current_time)\n            })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"North Beach\"\ntravel_times = {\n    \"North Beach to Alamo Square\": 16,\n    \"Alamo Square to North Beach\": 15\n}\nfriend_location = \"Alamo Square\"\nfriend_available_start = \"7:30PM\"\nfriend_available_end = \"9:00PM\"\nmin_meeting_duration = 15\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_45",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:19AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "4:30PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "4:30PM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 90,
                    "time": "4:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end_time\n    current_location = friend_location\n    \n    # Wait until friend is available\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet friend\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    friend_end = parse_time(friend_available_end)\n    if meeting_end_time > friend_end:\n        # Adjust meeting time to fit within friend's availability\n        meeting_end_time = friend_end\n        current_time = friend_end - timedelta(minutes=min_meeting_duration)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"Haight-Ashbury\"\n    travel_times = {\n        \"Haight-Ashbury to North Beach\": 19,\n        \"North Beach to Haight-Ashbury\": 18\n    }\n    friend_location = \"North Beach\"\n    friend_available_start = \"4:30PM\"\n    friend_available_end = \"9:30PM\"\n    min_meeting_duration = 90\n    \n    schedule = calculate_schedule(\n        start_location,\n        travel_times,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_46",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef calculate_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    \n    # Start at initial location\n    current_time = parse_time('9:00AM')\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{start_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    # Wait until friend is available\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    friend_end = parse_time(friend_available_end)\n    if meeting_end > friend_end:\n        meeting_end = friend_end\n        min_meeting_duration = int((meeting_end - current_time).total_seconds() / 60)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Richmond District\"\ntravel_times = {\n    \"Richmond District to Nob Hill\": 17,\n    \"Nob Hill to Richmond District\": 14\n}\nfriend_location = \"Nob Hill\"\nfriend_available_start = \"9:30AM\"\nfriend_available_end = \"11:15AM\"\nmin_meeting_duration = 15\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_47",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 9,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:09AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:30PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:30PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "9:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_window, min_duration):\n    start_time = parse_time('9:00AM')\n    \n    # Travel to friend's location\n    travel_duration = timedelta(minutes=travel_time)\n    arrive_time = start_time + travel_duration\n    \n    # Parse friend's available window\n    friend_start, friend_end = [parse_time(t) for t in friend_window.split(' to ')]\n    \n    # Calculate meeting time\n    meet_start = max(arrive_time, friend_start)\n    meet_end = meet_start + timedelta(minutes=min_duration)\n    \n    if meet_end > friend_end:\n        meet_end = friend_end\n        meet_start = meet_end - timedelta(minutes=min_duration)\n        if meet_start < friend_start:\n            meet_start = friend_start\n            meet_end = friend_start + timedelta(minutes=min_duration)\n            if meet_end > friend_end:\n                meet_end = friend_end\n    \n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_time, \n         \"time\": format_time(start_time), \"to\": friend_location},\n        {\"action\": \"wait\", \"location\": friend_location, \"time\": format_time(arrive_time)},\n        {\"action\": \"meet\", \"location\": friend_location, \"duration\": min_duration, \n         \"time\": format_time(meet_start)}\n    ]\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Financial District\"\ntravel_time = 9\nfriend_location = \"Union Square\"\nfriend_window = \"9:30PM to 10:00PM\"\nmin_duration = 15\n\nschedule = calculate_schedule(start_location, travel_time, friend_location, friend_window, min_duration)\n\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_48",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 26,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:26AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "2:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "2:15PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "2:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_window, min_duration):\n    start_time = parse_time('9:00AM')\n    \n    # Travel to friend's location\n    travel_duration = travel_time[start_location][friend_location]\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Parse friend's available window\n    window_start, window_end = friend_window.split(' to ')\n    window_start_time = parse_time(window_start)\n    window_end_time = parse_time(window_end)\n    \n    # Determine meeting time\n    if arrival_time > window_end_time:\n        # Can't meet if we arrive after window ends\n        return None\n    \n    meet_start = max(arrival_time, window_start_time)\n    meet_end = meet_start + timedelta(minutes=min_duration)\n    \n    if meet_end > window_end_time:\n        # Not enough time to meet\n        return None\n    \n    # Build schedule\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(start_time),\n        \"to\": friend_location\n    })\n    \n    if arrival_time < window_start_time:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(arrival_time)\n        })\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_duration,\n        \"time\": format_time(meet_start)\n    })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Richmond District\"\ntravel_time = {\n    \"Richmond District\": {\"Bayview\": 26},\n    \"Bayview\": {\"Richmond District\": 25}\n}\nfriend_location = \"Bayview\"\nfriend_window = \"2:15PM to 5:30PM\"\nmin_duration = 45\n\n# Compute the schedule\nschedule = compute_schedule(start_location, travel_time, friend_location, friend_window, min_duration)\n\n# Prepare output\noutput = {\"schedule\": schedule} if schedule else {\"error\": \"No valid schedule found\"}\n\n# Output as JSON\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_49",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 75,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(time_obj):\n    return time_obj.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_info, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{start_location} to {friend_location}\"\n    travel_duration = travel_info.get(travel_key, 0)\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    # Wait until friend is available\n    available_start = parse_time(friend_available_start)\n    if current_time < available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    available_end = parse_time(friend_available_end)\n    if meeting_end > available_end:\n        # Adjust meeting duration to fit within available time\n        meeting_duration = (available_end - current_time).seconds // 60\n        meeting_end = available_end\n    else:\n        meeting_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"North Beach\"\ntravel_info = {\n    \"North Beach to Nob Hill\": 7,\n    \"Nob Hill to North Beach\": 8\n}\nfriend_location = \"Nob Hill\"\nfriend_available_start = \"9:30AM\"\nfriend_available_end = \"8:30PM\"\nmin_meeting_duration = 75\n\n# Compute schedule\nschedule = compute_schedule(start_location, travel_info, friend_location, friend_available_start, friend_available_end, min_meeting_duration)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_50",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:22AM",
                    "duration": 22,
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "9:22AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 15,
                    "time": "9:22AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_to_str(time):\n    return time.strftime(\"%-I:%M%p\")\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = datetime.strptime(\"9:00AM\", \"%I:%M%p\")\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": time_to_str(current_time)})\n    \n    # Travel to friend's location\n    travel_key = f\"{start_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": time_to_str(current_time),\n        \"to\": friend_location\n    })\n    \n    # Wait until friend is available\n    available_start = datetime.strptime(friend_available_start, \"%I:%M%p\")\n    if current_time < available_start:\n        wait_time = (available_start - current_time).total_seconds() / 60\n        current_time = available_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": time_to_str(current_time)\n        })\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": time_to_str(current_time)\n    })\n    \n    return {\"schedule\": schedule}\n\n# Input parameters\nstart_location = \"The Castro\"\ntravel_times = {\n    \"The Castro to Embarcadero\": 22,\n    \"Embarcadero to The Castro\": 25\n}\nfriend_location = \"Embarcadero\"\nfriend_available_start = \"8:00AM\"\nfriend_available_end = \"11:00AM\"\nmin_meeting_duration = 15\n\n# Compute and output schedule\nschedule = compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration)\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_51",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:14AM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end_time\n    current_location = friend_location\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Wait if arrived before friend is available\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Calculate meeting time\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end_time > friend_end:\n        meeting_end_time = friend_end\n        actual_duration = (friend_end - current_time).seconds // 60\n    else:\n        actual_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": actual_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Russian Hill\"\ntravel_time = {\n    \"Russian Hill\": {\"Richmond District\": 14},\n    \"Richmond District\": {\"Russian Hill\": 13}\n}\nfriend_location = \"Richmond District\"\nfriend_available_start = \"1:15PM\"\nfriend_available_end = \"6:15PM\"\nmin_meeting_duration = 45\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_52",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "10:15AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 120,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    \n    # Start at initial location\n    current_time = parse_time('9:00AM')\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[start_location][friend_location]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    # Wait until friend is available\n    available_start = parse_time(friend_available_start)\n    if current_time < available_start:\n        wait_time = (available_start - current_time).total_seconds() / 60\n        current_time = available_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Richmond District\"\ntravel_time = {\n    \"Richmond District\": {\"Alamo Square\": 13},\n    \"Alamo Square\": {\"Richmond District\": 12}\n}\nfriend_location = \"Alamo Square\"\nfriend_available_start = \"10:15AM\"\nfriend_available_end = \"1:00PM\"\nmin_meeting_duration = 120\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_53",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "time": "1:15PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Mission District"
                },
                {
                    "action": "wait",
                    "location": "Mission District",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Mission District",
                    "duration": 45,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meet_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    if travel_duration > 0:\n        travel_end_time = current_time + timedelta(minutes=travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n        current_time = travel_end_time\n        current_location = friend_location\n    \n    # Wait until friend is available\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet friend\n    friend_end = parse_time(friend_available_end)\n    available_duration = (friend_end - current_time).total_seconds() / 60\n    meet_duration = min(min_meet_duration, available_duration)\n    meet_end_time = current_time + timedelta(minutes=meet_duration)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": meet_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return {\"schedule\": schedule}\n\n# Input parameters for the specific scenario\nstart_location = \"Financial District\"\ntravel_times = {\n    \"Financial District to Mission District\": 17,\n    \"Mission District to Financial District\": 17\n}\nfriend_location = \"Mission District\"\nfriend_available_start = \"1:15PM\"\nfriend_available_end = \"2:15PM\"\nmin_meet_duration = 45\n\n# Compute and output the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meet_duration\n)\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_54",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:08AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "11:30AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef calculate_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    if travel_duration > 0:\n        travel_end_time = current_time + timedelta(minutes=travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n        current_time = travel_end_time\n        current_location = friend_location\n    \n    # Wait until friend is available\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet friend\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    friend_end = parse_time(friend_available_end)\n    if meeting_end_time > friend_end:\n        meeting_end_time = friend_end\n        actual_duration = (friend_end - current_time).total_seconds() / 60\n    else:\n        actual_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": actual_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Financial District\"\ntravel_times = {\n    \"Financial District to Nob Hill\": 8,\n    \"Nob Hill to Financial District\": 9\n}\nfriend_location = \"Nob Hill\"\nfriend_available_start = \"11:30AM\"\nfriend_available_end = \"12:15PM\"\nmin_meeting_duration = 45\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_55",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "time": "9:08AM",
                    "duration": 8,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:08AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "10:15AM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "10:15AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "10:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    if travel_duration > 0:\n        current_time += timedelta(minutes=travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n        current_location = friend_location\n    \n    available_start = parse_time(friend_available_start)\n    available_end = parse_time(friend_available_end)\n    \n    # Wait if needed\n    if current_time < available_start:\n        wait_time = (available_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    # Check if we can meet for required duration\n    if current_time + timedelta(minutes=min_duration) <= available_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_duration,\n            \"time\": format_time(current_time)\n        })\n        current_time += timedelta(minutes=min_duration)\n    else:\n        # If we can't meet for full duration, meet as long as possible\n        possible_duration = (available_end - current_time).total_seconds() / 60\n        if possible_duration > 0:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": current_location,\n                \"duration\": possible_duration,\n                \"time\": format_time(current_time)\n            })\n            current_time = available_end\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Chinatown\"\ntravel_times = {\n    \"Chinatown to Nob Hill\": 8,\n    \"Nob Hill to Chinatown\": 6\n}\nfriend_location = \"Nob Hill\"\nfriend_available_start = \"10:15AM\"\nfriend_available_end = \"1:00PM\"\nmin_duration = 45\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_56",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 23,
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "time": "10:30AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "Sunset District"
                },
                {
                    "action": "wait",
                    "location": "Sunset District",
                    "time": "10:30AM"
                },
                {
                    "action": "meet",
                    "location": "Sunset District",
                    "duration": 60,
                    "time": "10:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_info, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_info.get(travel_key, 0)\n    travel_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_time\n    current_location = friend_location\n    \n    # Check if we need to wait\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Schedule meeting\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    friend_end = parse_time(friend_available_end)\n    \n    if meeting_end > friend_end:\n        # Adjust meeting to fit within friend's availability\n        meeting_duration = (friend_end - current_time).seconds // 60\n        meeting_end = friend_end\n    else:\n        meeting_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return {\"schedule\": schedule}\n\n# Input parameters for the current problem\nstart_location = \"Bayview\"\ntravel_info = {\n    \"Bayview to Sunset District\": 23,\n    \"Sunset District to Bayview\": 22\n}\nfriend_location = \"Sunset District\"\nfriend_available_start = \"10:30AM\"\nfriend_available_end = \"5:45PM\"\nmin_meeting_duration = 60\n\n# Calculate and output the schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_info,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_57",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "time": "9:00AM",
                    "duration": 20,
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "9:20AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "The Castro",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Financial District"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 30,
                    "time": "9:20AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef compute_schedule(start_location, arrival_time_str, friend_location, friend_available_start_str, friend_available_end_str, travel_time, min_meeting_duration):\n    arrival_time = parse_time(arrival_time_str)\n    friend_available_start = parse_time(friend_available_start_str)\n    friend_available_end = parse_time(friend_available_end_str)\n    \n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    travel_start_time = arrival_time\n    travel_end_time = add_minutes(travel_start_time, travel_time)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time,\n        \"time\": format_time(travel_start_time),\n        \"to\": friend_location\n    })\n    \n    arrival_at_friend = travel_end_time\n    \n    if arrival_at_friend < friend_available_start:\n        wait_time = (friend_available_start - arrival_at_friend).seconds // 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(arrival_at_friend)\n        })\n        meeting_start_time = friend_available_start\n    else:\n        meeting_start_time = arrival_at_friend\n    \n    meeting_end_time = add_minutes(meeting_start_time, min_meeting_duration)\n    if meeting_end_time > friend_available_end:\n        meeting_end_time = friend_available_end\n        actual_meeting_duration = (meeting_end_time - meeting_start_time).seconds // 60\n    else:\n        actual_meeting_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": actual_meeting_duration,\n        \"time\": format_time(meeting_start_time)\n    })\n    \n    return schedule\n\n# Input parameters for the current scenario\nstart_location = \"The Castro\"\narrival_time_str = \"9:00AM\"\nfriend_location = \"Financial District\"\nfriend_available_start_str = \"9:15AM\"\nfriend_available_end_str = \"4:45PM\"\ntravel_time = 20\nmin_meeting_duration = 30\n\nschedule = compute_schedule(\n    start_location,\n    arrival_time_str,\n    friend_location,\n    friend_available_start_str,\n    friend_available_end_str,\n    travel_time,\n    min_meeting_duration\n)\n\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_58",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "9:19AM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Bayview",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 105,
                    "time": "9:19AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef calculate_schedule(start_location, travel_info, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_info.get(travel_key, 0)\n    travel_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_time\n    current_location = friend_location\n    \n    # Check if friend is available\n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    if current_time < friend_start:\n        # Need to wait\n        wait_time = friend_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = wait_time\n    \n    # Check if there's enough time to meet\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > friend_end:\n        # Not enough time\n        return None\n    \n    # Add meeting\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"Bayview\"\n    travel_info = {\n        \"Bayview to Haight-Ashbury\": 19,\n        \"Haight-Ashbury to Bayview\": 18\n    }\n    friend_location = \"Haight-Ashbury\"\n    friend_available_start = \"7:00AM\"\n    friend_available_end = \"3:45PM\"\n    min_meeting_duration = 105\n    \n    schedule = calculate_schedule(\n        start_location,\n        travel_info,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    if schedule:\n        output = {\n            \"schedule\": schedule\n        }\n    else:\n        output = {\n            \"schedule\": [],\n            \"error\": \"No valid schedule found\"\n        }\n    \n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_59",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 7,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:07AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "6:30PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "6:30PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 45,
                    "time": "6:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end_time\n    current_location = friend_location\n    \n    # Wait until friend is available\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet friend\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    friend_end = parse_time(friend_available_end)\n    if meeting_end_time > friend_end:\n        meeting_end_time = friend_end\n        min_meeting_duration = int((meeting_end_time - current_time).total_seconds() / 60)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\ndef main():\n    travel_times = {\n        \"Union Square to Chinatown\": 7,\n        \"Chinatown to Union Square\": 7\n    }\n    \n    start_location = \"Union Square\"\n    friend_location = \"Chinatown\"\n    friend_available_start = \"6:30PM\"\n    friend_available_end = \"8:00PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(\n        start_location,\n        travel_times,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    result = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_60",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "7:15PM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "7:15PM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 90,
                    "time": "7:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_from, friend_available_to, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    # Start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    current_time += timedelta(minutes=travel_duration)\n    current_location = friend_location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    # Wait until friend is available\n    available_from = parse_time(friend_available_from)\n    if current_time < available_from:\n        wait_time = (available_from - current_time).total_seconds() / 60\n        current_time = available_from\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Golden Gate Park\"\ntravel_time = {\n    \"Golden Gate Park\": {\"Presidio\": 11},\n    \"Presidio\": {\"Golden Gate Park\": 12}\n}\nfriend_location = \"Presidio\"\nfriend_available_from = \"7:15PM\"\nfriend_available_to = \"10:00PM\"\nmin_meeting_duration = 90\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_from,\n    friend_available_to,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_61",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:14AM",
                    "duration": 14,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(time_obj):\n    return time_obj.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, arrival_time_str, friend_location, friend_available_start_str, friend_available_end_str, min_meeting_duration, travel_time_to, travel_time_from):\n    arrival_time = parse_time(arrival_time_str)\n    friend_available_start = parse_time(friend_available_start_str)\n    friend_available_end = parse_time(friend_available_end_str)\n    \n    schedule = []\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": format_time(arrival_time)})\n    \n    # Travel to friend's location\n    travel_duration = travel_time_to\n    travel_end_time = arrival_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(travel_end_time),\n        \"to\": friend_location\n    })\n    \n    # Check if need to wait\n    if travel_end_time < friend_available_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": format_time(friend_available_start)})\n        meeting_start = friend_available_start\n    else:\n        meeting_start = travel_end_time\n    \n    # Calculate meeting end time\n    meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n    if meeting_end > friend_available_end:\n        meeting_end = friend_available_end\n        actual_meeting_duration = (meeting_end - meeting_start).total_seconds() / 60\n        if actual_meeting_duration < min_meeting_duration:\n            return {\"error\": \"Not enough time to meet the minimum duration\"}\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(meeting_start)\n    })\n    \n    return {\"schedule\": schedule}\n\n# Input parameters for the specific scenario\nstart_location = \"Presidio\"\narrival_time_str = \"9:00AM\"\nfriend_location = \"Russian Hill\"\nfriend_available_start_str = \"11:30AM\"\nfriend_available_end_str = \"9:15PM\"\nmin_meeting_duration = 15\ntravel_time_to = 14\ntravel_time_from = 14\n\n# Calculate schedule\nresult = calculate_schedule(\n    start_location,\n    arrival_time_str,\n    friend_location,\n    friend_available_start_str,\n    friend_available_end_str,\n    min_meeting_duration,\n    travel_time_to,\n    travel_time_from\n)\n\n# Output as JSON\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_62",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:31AM",
                    "duration": 31,
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "9:31AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 31,
                    "time": "9:31AM",
                    "to": "Bayview"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 30,
                    "time": "9:31AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[0]\n    current_time = add_minutes(current_time, travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    current_location = friend_location\n    \n    # Wait until friend is available\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        wait_until = friend_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(wait_until)\n        })\n        current_time = wait_until\n    \n    # Check if we can meet the minimum duration\n    friend_end = parse_time(friend_available_end)\n    if current_time >= friend_start and add_minutes(current_time, min_meeting_duration) <= friend_end:\n        meeting_end = add_minutes(current_time, min_meeting_duration)\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n        current_time = meeting_end\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Presidio\"\ntravel_time = (31, 31)  # to Bayview, back to Presidio\nfriend_location = \"Bayview\"\nfriend_available_start = \"7:15AM\"\nfriend_available_end = \"5:30PM\"\nmin_meeting_duration = 30\n\n# Compute schedule\nschedule = compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_63",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 8,
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "9:08AM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "3:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 8,
                    "time": "9:08AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "wait",
                    "location": "Pacific Heights",
                    "time": "3:45PM"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 45,
                    "time": "3:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    \n    # Convert all time strings to datetime objects\n    current_time = parse_time('9:00AM')\n    available_start = parse_time(friend_available_start)\n    available_end = parse_time(friend_available_end)\n    \n    # Start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[0]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time - timedelta(minutes=travel_duration)),\n        \"to\": friend_location\n    })\n    \n    # If we arrive before available time, wait\n    if current_time < available_start:\n        wait_time = (available_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    # Meeting\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > available_end:\n        raise ValueError(\"Not enough time to meet the minimum duration\")\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Nob Hill\"\ntravel_time = (8, 8)  # Nob Hill to Pacific Heights and back\nfriend_location = \"Pacific Heights\"\nfriend_available_start = \"3:45PM\"\nfriend_available_end = \"7:15PM\"\nmin_meeting_duration = 45\n\n# Compute the schedule\ntry:\n    schedule = compute_schedule(\n        start_location,\n        travel_time,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    # Prepare the output JSON\n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=2))\n    \nexcept ValueError as e:\n    print(json.dumps({\"error\": str(e)}, indent=2))\n```",
            "count": "meeting_planning_example_64",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:25AM",
                    "duration": 25,
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "9:25AM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "time": "7:00PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "duration": 25,
                    "time": "9:25AM",
                    "to": "Embarcadero"
                },
                {
                    "action": "wait",
                    "location": "Embarcadero",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Embarcadero",
                    "duration": 45,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[start_location][friend_location]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # If we arrive before friend is available, wait\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > friend_end:\n        # If we can't meet for full duration, meet until friend leaves\n        meeting_end = friend_end\n        actual_duration = (meeting_end - current_time).seconds // 60\n        if actual_duration <= 0:\n            # Can't meet at all\n            return None\n    else:\n        actual_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": actual_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"Golden Gate Park\"\n    travel_time = {\n        \"Golden Gate Park\": {\"Embarcadero\": 25},\n        \"Embarcadero\": {\"Golden Gate Park\": 25}\n    }\n    friend_location = \"Embarcadero\"\n    friend_available_start = \"7:00PM\"\n    friend_available_end = \"9:00PM\"\n    min_meeting_duration = 45\n    \n    schedule = compute_schedule(\n        start_location,\n        travel_time,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    if schedule:\n        result = {\"schedule\": schedule}\n    else:\n        result = {\"schedule\": [], \"error\": \"No valid meeting time found\"}\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_65",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "time": "11:15AM",
                    "duration": 120
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Nob Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Presidio"
                },
                {
                    "action": "wait",
                    "location": "Presidio",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Presidio",
                    "duration": 120,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    schedule.append({\"action\": \"start\", \"location\": start_location, \"time\": format_time(current_time)})\n    \n    # Travel to friend's location\n    travel_duration = travel_time[start_location][friend_location]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    # Wait until friend is available\n    available_start = parse_time(friend_available_start)\n    if current_time < available_start:\n        wait_time = (available_start - current_time).total_seconds() / 60\n        current_time = available_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Nob Hill\"\ntravel_time = {\n    \"Nob Hill\": {\"Presidio\": 17},\n    \"Presidio\": {\"Nob Hill\": 18}\n}\nfriend_location = \"Presidio\"\nfriend_available_start = \"11:15AM\"\nfriend_available_end = \"5:45PM\"\nmin_meeting_duration = 120\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_66",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 26,
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "9:26AM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "time": "8:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "duration": 26,
                    "time": "9:26AM",
                    "to": "Financial District"
                },
                {
                    "action": "wait",
                    "location": "Financial District",
                    "time": "8:00PM"
                },
                {
                    "action": "meet",
                    "location": "Financial District",
                    "duration": 105,
                    "time": "8:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    \n    # Initial start\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end_time\n    current_location = friend_location\n    \n    # Friend's available time\n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # If we arrive before friend is available, wait\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Calculate meeting end time\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    \n    # If meeting would go past friend's availability, adjust\n    if meeting_end_time > friend_end:\n        meeting_end_time = friend_end\n        actual_duration = (meeting_end_time - current_time).total_seconds() / 60\n        if actual_duration < min_meeting_duration:\n            # Can't meet for required duration\n            return None\n    else:\n        actual_duration = min_meeting_duration\n    \n    # Add meeting to schedule\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": actual_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Golden Gate Park\"\ntravel_times = {\n    \"Golden Gate Park to Financial District\": 26,\n    \"Financial District to Golden Gate Park\": 23\n}\nfriend_location = \"Financial District\"\nfriend_available_start = \"8:00PM\"\nfriend_available_end = \"10:00PM\"\nmin_meeting_duration = 105\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\"schedule\": schedule} if schedule else {\"error\": \"No valid schedule found\"}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_67",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "time": "9:17AM",
                    "duration": 17,
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "9:17AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 30,
                    "time": "9:17AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    if travel_duration > 0:\n        current_time = add_minutes(current_time, travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n        current_location = friend_location\n    \n    # Check if we need to wait\n    available_start = parse_time(friend_available_start)\n    available_end = parse_time(friend_available_end)\n    \n    if current_time < available_start:\n        wait_time = (available_start - current_time).seconds // 60\n        current_time = available_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n    \n    # Schedule meeting\n    meeting_end = add_minutes(current_time, min_meeting_duration)\n    if meeting_end <= available_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n        current_time = meeting_end\n    \n    return schedule\n\n# Input parameters for the specific scenario\nstart_location = \"Haight-Ashbury\"\ntravel_times = {\n    \"Haight-Ashbury to Russian Hill\": 17,\n    \"Russian Hill to Haight-Ashbury\": 17\n}\nfriend_location = \"Russian Hill\"\nfriend_available_start = \"7:45AM\"\nfriend_available_end = \"2:15PM\"\nmin_meeting_duration = 30\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_68",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "9:07AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Union Square"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 90,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    # Start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    current_time += timedelta(minutes=travel_duration)\n    current_location = friend_location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    # Friend's available time\n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # If we arrive before friend is available, wait\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Calculate meeting end time\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    \n    # If meeting would exceed friend's availability, adjust\n    if meeting_end > friend_end:\n        meeting_end = friend_end\n        current_time = meeting_end - timedelta(minutes=min_meeting_duration)\n    \n    # Meet action\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Chinatown\"\ntravel_time = {\n    \"Chinatown\": {\"Union Square\": 7},\n    \"Union Square\": {\"Chinatown\": 7}\n}\nfriend_location = \"Union Square\"\nfriend_available_start = \"8:00AM\"\nfriend_available_end = \"12:45PM\"\nmin_meeting_duration = 90\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_69",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:00AM",
                    "duration": 24,
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:24AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "time": "9:30AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "duration": 24,
                    "time": "9:24AM",
                    "to": "North Beach"
                },
                {
                    "action": "wait",
                    "location": "North Beach",
                    "time": "9:30AM"
                },
                {
                    "action": "meet",
                    "location": "North Beach",
                    "duration": 30,
                    "time": "9:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end_time\n    current_location = friend_location\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Wait if needed\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Calculate meeting time\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end_time > friend_end:\n        meeting_end_time = friend_end\n        actual_duration = (friend_end - current_time).seconds // 60\n    else:\n        actual_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": actual_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Golden Gate Park\"\ntravel_times = {\n    \"Golden Gate Park to North Beach\": 24,\n    \"North Beach to Golden Gate Park\": 22\n}\nfriend_location = \"North Beach\"\nfriend_available_start = \"9:30AM\"\nfriend_available_end = \"6:30PM\"\nmin_meeting_duration = 30\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_70",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "time": "9:00AM",
                    "duration": 18,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:18AM"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:18AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "11:00AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Haight-Ashbury",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 18,
                    "time": "9:18AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_window, min_duration):\n    start_time = parse_time('9:00AM')\n    \n    # Travel to friend's location\n    travel_duration = travel_time[start_location][friend_location]\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Parse friend's available window\n    window_start, window_end = [parse_time(t) for t in friend_window.split(' to ')]\n    \n    # Determine meeting time\n    if arrival_time > window_start:\n        meet_start = arrival_time\n    else:\n        meet_start = window_start\n    \n    meet_end = meet_start + timedelta(minutes=min_duration)\n    \n    if meet_end > window_end:\n        meet_start = window_end - timedelta(minutes=min_duration)\n        meet_end = window_end\n    \n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \n         \"time\": format_time(start_time), \"to\": friend_location},\n        {\"action\": \"wait\", \"location\": friend_location, \"time\": format_time(arrival_time)}\n    ]\n    \n    if arrival_time < window_start:\n        schedule.append(\n            {\"action\": \"wait\", \"location\": friend_location, \"time\": format_time(arrival_time)}\n        )\n    \n    schedule.append(\n        {\"action\": \"meet\", \"location\": friend_location, \"duration\": min_duration, \n         \"time\": format_time(meet_start)}\n    )\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Haight-Ashbury\"\ntravel_time = {\n    \"Haight-Ashbury\": {\"Bayview\": 18},\n    \"Bayview\": {\"Haight-Ashbury\": 19}\n}\nfriend_location = \"Bayview\"\nfriend_window = \"11:00AM to 4:30PM\"\nmin_duration = 90\n\n# Compute schedule\nschedule = compute_schedule(start_location, travel_time, friend_location, friend_window, min_duration)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_71",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "time": "9:00AM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:10AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "9:45AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "9:45AM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 90,
                    "time": "9:45AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    # Start\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_location = friend_location\n    current_time = travel_time\n    \n    # Check if we need to wait\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    friend_end = parse_time(friend_available_end)\n    \n    if meeting_end > friend_end:\n        # Can't meet for full duration, adjust\n        meeting_duration = (friend_end - current_time).total_seconds() / 60\n        meeting_end = friend_end\n    else:\n        meeting_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    current_time = meeting_end\n    \n    return schedule\n\n# Input parameters\ntravel_times = {\n    \"Pacific Heights to Alamo Square\": 10,\n    \"Alamo Square to Pacific Heights\": 10\n}\n\nstart_location = \"Pacific Heights\"\nfriend_location = \"Alamo Square\"\nfriend_available_start = \"9:45AM\"\nfriend_available_end = \"2:30PM\"\nmin_meeting_duration = 90\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_72",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:07AM",
                    "duration": 7,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "9:07AM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 7,
                    "time": "9:07AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 60,
                    "time": "9:07AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_available_from, friend_available_to, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    # Wait until friend is available\n    available_from = parse_time(friend_available_from)\n    if current_time < available_from:\n        wait_time = (available_from - current_time).total_seconds() / 60\n        current_time = available_from\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Russian Hill\"\ntravel_time = 7\nfriend_location = \"Pacific Heights\"\nfriend_available_from = \"7:15AM\"\nfriend_available_to = \"10:00PM\"\nmin_meeting_duration = 60\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_from,\n    friend_available_to,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_73",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:00AM",
                    "duration": 17,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:17AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "4:00PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 17,
                    "time": "9:17AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "4:00PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 45,
                    "time": "4:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef compute_schedule(start_location, travel_info, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    # Parse input times\n    current_time = parse_time('9:00AM')\n    available_start = parse_time(friend_available_start)\n    available_end = parse_time(friend_available_end)\n    \n    # Initialize schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(current_time)}\n    ]\n    \n    # Travel to friend's location\n    travel_key = f\"{start_location} to {friend_location}\"\n    travel_duration = travel_info[travel_key]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end_time\n    \n    # Wait until friend is available\n    if current_time < available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    # Calculate meeting time\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end_time > available_end:\n        # If we can't meet for full duration, meet as long as possible\n        meeting_duration = (available_end - current_time).seconds // 60\n        meeting_end_time = available_end\n    else:\n        meeting_duration = min_meeting_duration\n    \n    # Add meeting to schedule\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Richmond District\"\ntravel_info = {\n    \"Richmond District to Nob Hill\": 17,\n    \"Nob Hill to Richmond District\": 14\n}\nfriend_location = \"Nob Hill\"\nfriend_available_start = \"4:00PM\"\nfriend_available_end = \"6:15PM\"\nmin_meeting_duration = 45\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_info,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_74",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "9:13AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Pacific Heights",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Fisherman's Wharf"
                },
                {
                    "action": "wait",
                    "location": "Fisherman's Wharf",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Fisherman's Wharf",
                    "duration": 15,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_window, min_duration):\n    start_time = parse_time('9:00AM')\n    \n    # Travel to friend's location\n    travel_duration = travel_time\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Parse friend's available window\n    friend_start, friend_end = [parse_time(t) for t in friend_window.split(' to ')]\n    \n    # Determine meeting time\n    if arrival_time > friend_start:\n        meet_start = arrival_time\n    else:\n        meet_start = friend_start\n    \n    meet_end = meet_start + timedelta(minutes=min_duration)\n    if meet_end > friend_end:\n        meet_start = friend_end - timedelta(minutes=min_duration)\n        meet_end = friend_end\n    \n    # Build schedule\n    schedule = [\n        {\"action\": \"start\", \"location\": start_location, \"time\": format_time(start_time)},\n        {\"action\": \"travel\", \"location\": friend_location, \"duration\": travel_duration, \n         \"time\": format_time(start_time), \"to\": friend_location},\n    ]\n    \n    if arrival_time < friend_start:\n        schedule.append({\"action\": \"wait\", \"location\": friend_location, \"time\": format_time(arrival_time)})\n    \n    schedule.append({\n        \"action\": \"meet\", \n        \"location\": friend_location, \n        \"duration\": min_duration, \n        \"time\": format_time(meet_start)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Pacific Heights\"\ntravel_time = 13\nfriend_location = \"Fisherman's Wharf\"\nfriend_window = \"11:30AM to 2:45PM\"\nmin_duration = 15\n\n# Calculate schedule\nschedule = calculate_schedule(start_location, travel_time, friend_location, friend_window, min_duration)\n\n# Output as JSON\noutput = {\"schedule\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_75",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Marina District",
                    "time": "9:16AM",
                    "duration": 16,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "5:00PM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 60,
                    "time": "5:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt += timedelta(minutes=minutes)\n    return format_time(dt)\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_from, friend_available_to, min_meeting_duration):\n    schedule = []\n    current_time = \"9:00AM\"\n    current_location = start_location\n    \n    schedule.append({\"action\": \"start\", \"location\": current_location, \"time\": current_time})\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    if travel_duration > 0:\n        current_time = add_minutes(current_time, travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": current_time,\n            \"to\": friend_location\n        })\n        current_location = friend_location\n    \n    # Wait until friend is available\n    available_time = friend_available_from\n    if parse_time(current_time) < parse_time(available_time):\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": available_time\n        })\n        current_time = available_time\n    \n    # Calculate meeting end time\n    meeting_end = add_minutes(current_time, min_meeting_duration)\n    if parse_time(meeting_end) > parse_time(friend_available_to):\n        # Adjust meeting time to fit within friend's availability\n        meeting_end = friend_available_to\n        adjusted_duration = (parse_time(meeting_end) - parse_time(current_time)).total_seconds() / 60\n        min_meeting_duration = int(adjusted_duration)\n    \n    # Meet friend\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": current_time\n    })\n    current_time = add_minutes(current_time, min_meeting_duration)\n    \n    return schedule\n\n# Input parameters for the current scenario\nstart_location = \"Marina District\"\ntravel_times = {\n    \"Marina District to Haight-Ashbury\": 16,\n    \"Haight-Ashbury to Marina District\": 17\n}\nfriend_location = \"Haight-Ashbury\"\nfriend_available_from = \"5:00PM\"\nfriend_available_to = \"8:15PM\"\nmin_meeting_duration = 60\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_from,\n    friend_available_to,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_76",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:00AM",
                    "duration": 9,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:09AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 9,
                    "time": "9:09AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 30,
                    "time": "9:09AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    arrival_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = arrival_time\n    current_location = friend_location\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Wait if arrived before friend is available\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Schedule meeting\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > friend_end:\n        # Adjust meeting time to fit within friend's availability\n        current_time = friend_end - timedelta(minutes=min_meeting_duration)\n        meeting_end = friend_end\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Richmond District\"\ntravel_time = {\n    \"Richmond District\": {\"Golden Gate Park\": 9},\n    \"Golden Gate Park\": {\"Richmond District\": 7}\n}\nfriend_location = \"Golden Gate Park\"\nfriend_available_start = \"8:15AM\"\nfriend_available_end = \"8:30PM\"\nmin_meeting_duration = 30\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_77",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "time": "9:00AM",
                    "duration": 19,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "9:19AM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "6:00PM",
                    "duration": 105
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Union Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 19,
                    "time": "9:19AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 105,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_window, min_duration):\n    # Parse input parameters\n    start_time = parse_time('9:00AM')\n    friend_start, friend_end = [parse_time(t) for t in friend_window.split(' to ')]\n    \n    # Get travel time to friend's location\n    travel_key = f\"{start_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    \n    # Calculate arrival time at friend's location\n    arrival_time = start_time + timedelta(minutes=travel_duration)\n    \n    # Determine meeting time\n    if arrival_time > friend_start:\n        # Can't meet if we arrive after their window starts\n        meet_start = None\n    else:\n        meet_start = friend_start\n    \n    if meet_start:\n        meet_end = meet_start + timedelta(minutes=min_duration)\n        if meet_end > friend_end:\n            # Can't meet for full duration\n            meet_start = friend_end - timedelta(minutes=min_duration)\n            meet_end = friend_end\n    \n    # Build schedule\n    schedule = []\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(start_time)\n    })\n    \n    if travel_duration > 0:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": start_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(start_time),\n            \"to\": friend_location\n        })\n    \n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": friend_location,\n        \"time\": format_time(arrival_time)\n    })\n    \n    if meet_start:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend_location,\n            \"duration\": min_duration,\n            \"time\": format_time(meet_start)\n        })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Union Square\"\ntravel_times = {\n    \"Union Square to The Castro\": 19,\n    \"The Castro to Union Square\": 19\n}\nfriend_location = \"The Castro\"\nfriend_window = \"6:00PM to 8:00PM\"\nmin_duration = 105\n\n# Compute schedule\nschedule = compute_schedule(start_location, travel_times, friend_location, friend_window, min_duration)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_78",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "1:30PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "1:30PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 45,
                    "time": "1:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef compute_schedule(start_location, arrival_time_str, friends):\n    schedule = []\n    current_time = parse_time(arrival_time_str)\n    current_location = start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n\n    for friend in friends:\n        travel_to = friend['location']\n        travel_duration = friend['travel_time']\n        available_from = parse_time(friend['available_from'])\n        available_to = parse_time(friend['available_to'])\n        min_duration = friend['min_duration']\n\n        # Travel to friend's location\n        travel_start = current_time\n        travel_end = add_minutes(travel_start, travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(travel_start),\n            \"to\": travel_to\n        })\n        current_location = travel_to\n        current_time = travel_end\n\n        # Wait until friend is available\n        if current_time < available_from:\n            wait_start = current_time\n            current_time = available_from\n            schedule.append({\n                \"action\": \"wait\",\n                \"location\": current_location,\n                \"time\": format_time(wait_start)\n            })\n\n        # Meet friend\n        meet_start = current_time\n        meet_end = add_minutes(meet_start, min_duration)\n        if meet_end > available_to:\n            meet_end = available_to\n            actual_duration = (available_to - meet_start).seconds // 60\n            if actual_duration <= 0:\n                continue\n        else:\n            actual_duration = min_duration\n\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": actual_duration,\n            \"time\": format_time(meet_start)\n        })\n        current_time = meet_end\n\n    return {\"schedule\": schedule}\n\n# Input parameters\nstart_location = \"North Beach\"\narrival_time = \"9:00AM\"\nfriends = [\n    {\n        \"name\": \"Paul\",\n        \"location\": \"Bayview\",\n        \"available_from\": \"1:30PM\",\n        \"available_to\": \"7:45PM\",\n        \"min_duration\": 45,\n        \"travel_time\": 22\n    }\n]\n\n# Compute schedule\nresult = compute_schedule(start_location, arrival_time, friends)\n\n# Output as JSON\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_79",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:12AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:30AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 75,
                    "time": "11:30AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Wait if needed\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet friend\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end_time > friend_end:\n        meeting_end_time = friend_end\n        min_meeting_duration = int((meeting_end_time - current_time).total_seconds() / 60)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"Mission District\"\n    travel_time = {\n        \"Mission District\": {\n            \"Haight-Ashbury\": 12\n        },\n        \"Haight-Ashbury\": {\n            \"Mission District\": 11\n        }\n    }\n    friend_location = \"Haight-Ashbury\"\n    friend_available_start = \"11:30AM\"\n    friend_available_end = \"10:00PM\"\n    min_meeting_duration = 75\n    \n    schedule = calculate_schedule(\n        start_location,\n        travel_time,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_80",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "12:30PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Richmond District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "12:30PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "12:30PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_to_duration, travel_from_duration, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    \n    # Initial start\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_to_duration\n    current_time += timedelta(minutes=travel_duration)\n    current_location = friend_location\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    # Wait until friend is available\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        wait_duration = (friend_start - current_time).total_seconds() / 60\n        current_time = friend_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    friend_end = parse_time(friend_available_end)\n    if meeting_end > friend_end:\n        meeting_end = friend_end\n        min_meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Richmond District\"\ntravel_to_duration = 13\ntravel_from_duration = 12\nfriend_location = \"Alamo Square\"\nfriend_available_start = \"12:30PM\"\nfriend_available_end = \"7:15PM\"\nmin_meeting_duration = 75\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_to_duration,\n    travel_from_duration,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_81",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "time": "9:10AM",
                    "duration": 10,
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "time": "5:45PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Golden Gate Park",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "duration": 10,
                    "time": "9:10AM",
                    "to": "Alamo Square"
                },
                {
                    "action": "wait",
                    "location": "Alamo Square",
                    "time": "5:45PM"
                },
                {
                    "action": "meet",
                    "location": "Alamo Square",
                    "duration": 75,
                    "time": "5:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    if travel_duration > 0:\n        current_time += timedelta(minutes=travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n        current_location = friend_location\n    \n    # Check if we need to wait\n    available_start = parse_time(friend_available_start)\n    available_end = parse_time(friend_available_end)\n    \n    if current_time < available_start:\n        wait_time = (available_start - current_time).total_seconds() / 60\n        current_time = available_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n    \n    # Schedule meeting\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > available_end:\n        # Can't meet for full duration, adjust\n        meeting_duration = (available_end - current_time).total_seconds() / 60\n        meeting_end = available_end\n    else:\n        meeting_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Golden Gate Park\"\ntravel_times = {\n    \"Golden Gate Park to Alamo Square\": 10,\n    \"Alamo Square to Golden Gate Park\": 9\n}\nfriend_location = \"Alamo Square\"\nfriend_available_start = \"5:45PM\"\nfriend_available_end = \"9:30PM\"\nmin_meeting_duration = 75\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_82",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Presidio",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:12AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "9:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Presidio",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 45,
                    "time": "9:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    if travel_duration > 0:\n        travel_end_time = current_time + timedelta(minutes=travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n        current_time = travel_end_time\n        current_location = friend_location\n    \n    # Check if we need to wait\n    available_start = parse_time(friend_available_start)\n    available_end = parse_time(friend_available_end)\n    \n    if current_time < available_start:\n        wait_time = (available_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    # Check if we can meet\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end_time <= available_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Presidio\"\ntravel_times = {\n    \"Presidio to Golden Gate Park\": 12,\n    \"Golden Gate Park to Presidio\": 11\n}\nfriend_location = \"Golden Gate Park\"\nfriend_available_start = \"9:45PM\"\nfriend_available_end = \"10:30PM\"\nmin_meeting_duration = 45\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_83",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:00AM",
                    "duration": 5,
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "9:05AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Haight-Ashbury",
                    "duration": 5,
                    "time": "9:05AM",
                    "to": "Haight-Ashbury"
                },
                {
                    "action": "wait",
                    "location": "Haight-Ashbury",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Haight-Ashbury",
                    "duration": 30,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time.get((current_location, friend_location), 0)\n    if travel_duration > 0:\n        current_time += timedelta(minutes=travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time - timedelta(minutes=travel_duration)),\n            \"to\": friend_location\n        })\n        current_location = friend_location\n    \n    # Check if we're already at the location\n    if current_location != friend_location:\n        travel_duration = travel_time.get((current_location, friend_location), 0)\n        if travel_duration > 0:\n            current_time += timedelta(minutes=travel_duration)\n            schedule.append({\n                \"action\": \"travel\",\n                \"location\": current_location,\n                \"duration\": travel_duration,\n                \"time\": format_time(current_time - timedelta(minutes=travel_duration)),\n                \"to\": friend_location\n            })\n            current_location = friend_location\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Wait if needed\n    if current_time < friend_start:\n        wait_time = (friend_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > friend_end:\n        # Can't meet for full duration, adjust\n        meeting_duration = (friend_end - current_time).total_seconds() / 60\n        if meeting_duration <= 0:\n            return None\n        meeting_end = friend_end\n    else:\n        meeting_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time = meeting_end\n    \n    return schedule\n\ndef main():\n    # Input parameters\n    start_location = \"Alamo Square\"\n    travel_time = {\n        (\"Alamo Square\", \"Haight-Ashbury\"): 5,\n        (\"Haight-Ashbury\", \"Alamo Square\"): 5\n    }\n    friend_location = \"Haight-Ashbury\"\n    friend_available_start = \"11:00AM\"\n    friend_available_end = \"1:00PM\"\n    min_meeting_duration = 30\n    \n    schedule = calculate_schedule(\n        start_location,\n        travel_time,\n        friend_location,\n        friend_available_start,\n        friend_available_end,\n        min_meeting_duration\n    )\n    \n    if schedule:\n        result = {\"schedule\": schedule}\n    else:\n        result = {\"error\": \"No valid schedule could be found\"}\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_84",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 4,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "9:04AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "1:15PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 4,
                    "time": "9:04AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(time_str, minutes):\n    dt = parse_time(time_str)\n    dt += timedelta(minutes=minutes)\n    return format_time(dt)\n\ndef compute_schedule(start_location, travel_info, friend_constraints):\n    schedule = []\n    current_location = start_location\n    current_time = \"9:00AM\"\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": current_time\n    })\n    \n    friend_location = friend_constraints[\"location\"]\n    available_start = friend_constraints[\"available_start\"]\n    available_end = friend_constraints[\"available_end\"]\n    min_duration = friend_constraints[\"min_duration\"]\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_info.get(travel_key, 0)\n    \n    if travel_duration > 0:\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": current_time,\n            \"to\": friend_location\n        })\n        current_time = add_minutes(current_time, travel_duration)\n        current_location = friend_location\n    \n    # Wait until friend is available if needed\n    if parse_time(current_time) < parse_time(available_start):\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": current_time\n        })\n        current_time = available_start\n    \n    # Meet the friend\n    meet_end = add_minutes(current_time, min_duration)\n    if parse_time(meet_end) > parse_time(available_end):\n        # If we can't meet for full duration, meet as long as possible\n        meet_end = available_end\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": (parse_time(meet_end) - parse_time(current_time)).seconds // 60,\n        \"time\": current_time\n    })\n    \n    return {\"schedule\": schedule}\n\n# Input parameters for the current problem\nstart_location = \"North Beach\"\ntravel_info = {\n    \"North Beach to Russian Hill\": 4,\n    \"Russian Hill to North Beach\": 5\n}\nfriend_constraints = {\n    \"location\": \"Russian Hill\",\n    \"available_start\": \"1:15PM\",\n    \"available_end\": \"9:30PM\",\n    \"min_duration\": 15\n}\n\n# Compute and output the schedule\nresult = compute_schedule(start_location, travel_info, friend_constraints)\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_85",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "time": "9:12AM",
                    "duration": 12,
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "9:12AM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "7:45PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Marina District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "wait",
                    "location": "Nob Hill",
                    "time": "7:45PM"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 15,
                    "time": "7:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    current_time += timedelta(minutes=travel_duration)\n    current_location = friend_location\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Wait if needed\n    if current_time < friend_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Calculate meeting end time\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end > friend_end:\n        # Adjust meeting to fit within friend's availability\n        current_time = friend_end - timedelta(minutes=min_meeting_duration)\n        meeting_end = friend_end\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters for the current scenario\nstart_location = \"Marina District\"\ntravel_time = {\n    \"Marina District\": {\"Nob Hill\": 12},\n    \"Nob Hill\": {\"Marina District\": 11}\n}\nfriend_location = \"Nob Hill\"\nfriend_available_start = \"7:45PM\"\nfriend_available_end = \"9:00PM\"\nmin_meeting_duration = 15\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_86",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Embarcadero",
                    "time": "9:11AM",
                    "duration": 11,
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "time": "9:11AM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Embarcadero",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Pacific Heights",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Pacific Heights"
                },
                {
                    "action": "meet",
                    "location": "Pacific Heights",
                    "duration": 75,
                    "time": "9:11AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    if travel_duration > 0:\n        current_time += timedelta(minutes=travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n        current_location = friend_location\n    \n    # Wait until friend is available\n    available_start = parse_time(friend_available_start)\n    if current_time < available_start:\n        wait_time = (available_start - current_time).total_seconds() / 60\n        current_time = available_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n    \n    # Meet friend\n    available_end = parse_time(friend_available_end)\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end > available_end:\n        meeting_end = available_end\n        min_meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters for the specific scenario\nstart_location = \"Embarcadero\"\ntravel_times = {\n    \"Embarcadero to Pacific Heights\": 11,\n    \"Pacific Heights to Embarcadero\": 10\n}\nfriend_location = \"Pacific Heights\"\nfriend_available_start = \"8:30AM\"\nfriend_available_end = \"3:00PM\"\nmin_meeting_duration = 75\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_87",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 11,
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "9:11AM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "time": "8:45PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Golden Gate Park",
                    "duration": 11,
                    "time": "9:11AM",
                    "to": "Golden Gate Park"
                },
                {
                    "action": "wait",
                    "location": "Golden Gate Park",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Golden Gate Park",
                    "duration": 15,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    # Start action\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n    \n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    # Check if we need to wait\n    if current_time < friend_start:\n        wait_duration = (friend_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Calculate meeting time\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end_time > friend_end:\n        # Can't meet for full duration, adjust to maximum possible\n        possible_duration = (friend_end - current_time).total_seconds() / 60\n        if possible_duration <= 0:\n            return None  # No time to meet\n        meeting_end_time = friend_end\n        min_meeting_duration = possible_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Sunset District\"\ntravel_time = {\n    \"Sunset District\": {\"Golden Gate Park\": 11},\n    \"Golden Gate Park\": {\"Sunset District\": 10}\n}\nfriend_location = \"Golden Gate Park\"\nfriend_available_start = \"8:45PM\"\nfriend_available_end = \"9:45PM\"\nmin_meeting_duration = 15\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\"schedule\": schedule} if schedule else {\"schedule\": []}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_88",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Mission District",
                    "time": "9:00AM",
                    "duration": 15,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:15AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "6:00PM",
                    "duration": 60
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Mission District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 15,
                    "time": "9:15AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 60,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\n\ndef time_to_minutes(time_str):\n    time_str = time_str.upper()\n    if 'AM' in time_str:\n        period = 'AM'\n    else:\n        period = 'PM'\n    time_part = time_str.replace('AM', '').replace('PM', '').strip()\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    period = 'AM' if hours < 12 else 'PM'\n    if hours == 0:\n        hours = 12\n    elif hours > 12:\n        hours -= 12\n    return f\"{hours}:{mins:02d}{period}\"\n\ndef compute_schedule(start_location, friend_location, travel_time, arrival_time, friend_window, min_duration):\n    schedule = []\n    \n    # Convert times to minutes\n    arrival_min = time_to_minutes(arrival_time)\n    friend_start_min = time_to_minutes(friend_window[0])\n    friend_end_min = time_to_minutes(friend_window[1])\n    \n    # Start at initial location\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": arrival_time\n    })\n    \n    # Travel to friend's location\n    travel_departure_min = arrival_min\n    travel_arrival_min = travel_departure_min + travel_time\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_time,\n        \"time\": minutes_to_time(travel_departure_min),\n        \"to\": friend_location\n    })\n    \n    # Wait until friend is available\n    wait_until_min = friend_start_min\n    schedule.append({\n        \"action\": \"wait\",\n        \"location\": friend_location,\n        \"time\": minutes_to_time(travel_arrival_min)\n    })\n    \n    # Meet friend\n    meet_end_min = friend_start_min + min_duration\n    if meet_end_min > friend_end_min:\n        meet_end_min = friend_end_min\n        actual_duration = friend_end_min - friend_start_min\n    else:\n        actual_duration = min_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": actual_duration,\n        \"time\": minutes_to_time(friend_start_min)\n    })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Mission District\"\nfriend_location = \"Bayview\"\ntravel_time = 15  # Mission District to Bayview\narrival_time = \"9:00AM\"\nfriend_window = (\"6:00PM\", \"7:30PM\")\nmin_duration = 60\n\n# Compute the schedule\nschedule = compute_schedule(start_location, friend_location, travel_time, arrival_time, friend_window, min_duration)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_89",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:00AM",
                    "duration": 16,
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "9:16AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 16,
                    "time": "9:16AM",
                    "to": "Chinatown"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 15,
                    "time": "9:16AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Check if friend is already available at current location\n    if current_location == friend_location:\n        available_start = parse_time(friend_available_start)\n        available_end = parse_time(friend_available_end)\n        \n        if current_time <= available_end:\n            meeting_start = max(current_time, available_start)\n            meeting_end = meeting_start + timedelta(minutes=min_meeting_duration)\n            \n            if meeting_end <= available_end:\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": friend_location,\n                    \"duration\": min_meeting_duration,\n                    \"time\": format_time(meeting_start)\n                })\n                return schedule\n    \n    # Need to travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    \n    if travel_duration > 0:\n        travel_start = current_time\n        travel_end = travel_start + timedelta(minutes=travel_duration)\n        \n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(travel_start),\n            \"to\": friend_location\n        })\n        \n        current_time = travel_end\n        current_location = friend_location\n    \n    available_start = parse_time(friend_available_start)\n    available_end = parse_time(friend_available_end)\n    \n    if current_time < available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end <= available_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n    \n    return schedule\n\n# Input parameters for the specific scenario\nstart_location = \"Alamo Square\"\ntravel_times = {\n    \"Alamo Square to Chinatown\": 16,\n    \"Chinatown to Alamo Square\": 17\n}\nfriend_location = \"Chinatown\"\nfriend_available_start = \"8:15AM\"\nfriend_available_end = \"6:45PM\"\nmin_meeting_duration = 15\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Prepare the output\noutput = {\n    \"schedule\": schedule\n}\n\n# Print as JSON\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_90",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "time": "9:00AM",
                    "duration": 14,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:14AM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "7:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Russian Hill",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 14,
                    "time": "9:14AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef add_minutes(dt, minutes):\n    return dt + timedelta(minutes=minutes)\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    travel_end_time = add_minutes(current_time, travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end_time\n    current_location = friend_location\n    \n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        # Need to wait\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Meet friend\n    meeting_end_time = add_minutes(current_time, min_meeting_duration)\n    friend_end = parse_time(friend_available_end)\n    if meeting_end_time > friend_end:\n        # Can't meet for full duration, adjust\n        meeting_end_time = friend_end\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Russian Hill\"\ntravel_time = {\n    \"Russian Hill\": {\n        \"Richmond District\": 14\n    },\n    \"Richmond District\": {\n        \"Russian Hill\": 13\n    }\n}\nfriend_location = \"Richmond District\"\nfriend_available_start = \"7:00PM\"\nfriend_available_end = \"8:15PM\"\nmin_meeting_duration = 75\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Prepare output\noutput = {\n    \"schedule\": schedule\n}\n\n# Print JSON\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_91",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Financial District",
                    "time": "9:23AM",
                    "duration": 23,
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "9:23AM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "time": "2:00PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Financial District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "The Castro",
                    "duration": 23,
                    "time": "9:23AM",
                    "to": "The Castro"
                },
                {
                    "action": "wait",
                    "location": "The Castro",
                    "time": "2:00PM"
                },
                {
                    "action": "meet",
                    "location": "The Castro",
                    "duration": 45,
                    "time": "2:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_time = timedelta(minutes=travel_duration)\n    current_time += travel_time\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_location = friend_location\n    \n    # Wait until friend is available\n    available_start = parse_time(friend_available_start)\n    if current_time < available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    # Check if meeting is possible\n    available_end = parse_time(friend_available_end)\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    if meeting_end <= available_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_meeting_duration,\n            \"time\": format_time(current_time)\n        })\n        current_time = meeting_end\n    else:\n        # Not enough time to meet\n        pass\n    \n    return schedule\n\n# Input parameters\ntravel_times = {\n    \"Financial District to The Castro\": 23,\n    \"The Castro to Financial District\": 20\n}\n\nstart_location = \"Financial District\"\nfriend_location = \"The Castro\"\nfriend_available_start = \"2:00PM\"\nfriend_available_end = \"5:45PM\"\nmin_meeting_duration = 45\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_92",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:06AM",
                    "duration": 6,
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "9:06AM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "time": "7:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Chinatown",
                    "duration": 6,
                    "time": "9:06AM",
                    "to": "Chinatown"
                },
                {
                    "action": "wait",
                    "location": "Chinatown",
                    "time": "7:00PM"
                },
                {
                    "action": "meet",
                    "location": "Chinatown",
                    "duration": 75,
                    "time": "7:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('AM', 'AM').replace('PM', 'PM')\n\ndef compute_schedule(start_location, travel_info, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{start_location} to {friend_location}\"\n    travel_duration = travel_info.get(travel_key, 0)\n    if travel_duration > 0:\n        current_time += timedelta(minutes=travel_duration)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": start_location,\n            \"duration\": travel_duration,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n    \n    # Wait until friend is available\n    available_start = parse_time(friend_available_start)\n    if current_time < available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    # Meet friend\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    available_end = parse_time(friend_available_end)\n    if meeting_end > available_end:\n        meeting_end = available_end\n        min_meeting_duration = int((meeting_end - current_time).total_seconds() / 60)\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"North Beach\"\ntravel_info = {\n    \"North Beach to Chinatown\": 6,\n    \"Chinatown to North Beach\": 3\n}\nfriend_location = \"Chinatown\"\nfriend_available_start = \"7:00PM\"\nfriend_available_end = \"9:00PM\"\nmin_meeting_duration = 75\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_info,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_93",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:13AM",
                    "duration": 13,
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "time": "11:15AM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Russian Hill",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Russian Hill"
                },
                {
                    "action": "wait",
                    "location": "Russian Hill",
                    "time": "11:15AM"
                },
                {
                    "action": "meet",
                    "location": "Russian Hill",
                    "duration": 15,
                    "time": "11:15AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    \n    # Initial start\n    current_time = parse_time('9:00AM')\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[0]\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": start_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    # Wait until friend is available\n    available_start = parse_time(friend_available_start)\n    if current_time < available_start:\n        wait_duration = (available_start - current_time).total_seconds() / 60\n        current_time = available_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n    \n    # Meeting\n    meeting_end = current_time + timedelta(minutes=min_meeting_duration)\n    available_end = parse_time(friend_available_end)\n    if meeting_end > available_end:\n        meeting_end = available_end\n        min_meeting_duration = (meeting_end - current_time).total_seconds() / 60\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Alamo Square\"\ntravel_time = (13, 15)  # to Russian Hill, back to Alamo Square\nfriend_location = \"Russian Hill\"\nfriend_available_start = \"11:15AM\"\nfriend_available_end = \"12:00PM\"\nmin_meeting_duration = 15\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_94",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "North Beach",
                    "time": "9:00AM",
                    "duration": 22,
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "9:22AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "time": "11:00AM",
                    "duration": 90
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "North Beach",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Bayview",
                    "duration": 22,
                    "time": "9:22AM",
                    "to": "Bayview"
                },
                {
                    "action": "wait",
                    "location": "Bayview",
                    "time": "11:00AM"
                },
                {
                    "action": "meet",
                    "location": "Bayview",
                    "duration": 90,
                    "time": "11:00AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p').replace('PM', 'PM').replace('AM', 'AM')\n\ndef compute_schedule(start_location, travel_times, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_duration = travel_times.get(travel_key, 0)\n    travel_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_time\n    current_location = friend_location\n    \n    # Check if friend is available now\n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    if current_time < friend_start:\n        # Need to wait\n        wait_time = friend_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = wait_time\n    \n    # Calculate meeting end time\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end_time > friend_end:\n        # Can't meet for full duration, adjust to max possible\n        meeting_end_time = friend_end\n    \n    meeting_duration = int((meeting_end_time - current_time).total_seconds() / 60)\n    \n    if meeting_duration > 0:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": meeting_duration,\n            \"time\": format_time(current_time)\n        })\n    \n    return schedule\n\n# Input parameters for the current scenario\nstart_location = \"North Beach\"\ntravel_times = {\n    \"North Beach to Bayview\": 22,\n    \"Bayview to North Beach\": 21\n}\nfriend_location = \"Bayview\"\nfriend_available_start = \"11:00AM\"\nfriend_available_end = \"12:45PM\"\nmin_meeting_duration = 90\n\n# Compute the schedule\nschedule = compute_schedule(\n    start_location,\n    travel_times,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_95",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Sunset District",
                    "time": "9:00AM",
                    "duration": 27,
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "time": "9:27AM",
                    "duration": 30
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Sunset District",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Nob Hill",
                    "duration": 27,
                    "time": "9:27AM",
                    "to": "Nob Hill"
                },
                {
                    "action": "meet",
                    "location": "Nob Hill",
                    "duration": 30,
                    "time": "9:27AM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_info, friend_info):\n    schedule = []\n    current_location = start_location\n    current_time = parse_time('9:00AM')\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    friend_location = friend_info['location']\n    available_start = parse_time(friend_info['available_start'])\n    available_end = parse_time(friend_info['available_end'])\n    min_duration = friend_info['min_duration']\n    \n    # Calculate travel time to friend's location\n    travel_key = f\"{current_location} to {friend_location}\"\n    travel_time = travel_info.get(travel_key, 0)\n    \n    # Travel to friend's location\n    if current_location != friend_location:\n        travel_end_time = current_time + timedelta(minutes=travel_time)\n        schedule.append({\n            \"action\": \"travel\",\n            \"location\": current_location,\n            \"duration\": travel_time,\n            \"time\": format_time(current_time),\n            \"to\": friend_location\n        })\n        current_time = travel_end_time\n        current_location = friend_location\n    \n    # Check if we need to wait\n    if current_time < available_start:\n        wait_time = (available_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    # Check if we can meet\n    meeting_end = current_time + timedelta(minutes=min_duration)\n    if meeting_end <= available_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": current_location,\n            \"duration\": min_duration,\n            \"time\": format_time(current_time)\n        })\n        current_time = meeting_end\n    \n    return schedule\n\ndef main():\n    # Input parameters for the current problem\n    start_location = \"Sunset District\"\n    travel_info = {\n        \"Sunset District to Nob Hill\": 27,\n        \"Nob Hill to Sunset District\": 25\n    }\n    friend_info = {\n        \"location\": \"Nob Hill\",\n        \"available_start\": \"9:00AM\",\n        \"available_end\": \"6:15PM\",\n        \"min_duration\": 30\n    }\n    \n    schedule = compute_schedule(start_location, travel_info, friend_info)\n    \n    output = {\n        \"schedule\": schedule\n    }\n    \n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_96",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "time": "9:20AM",
                    "duration": 20,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "6:00PM",
                    "duration": 75
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Chinatown",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 20,
                    "time": "9:20AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "6:00PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 75,
                    "time": "6:00PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meet_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    schedule.append({\n        \"action\": \"start\",\n        \"location\": start_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time\n    current_time += timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": friend_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    # Wait until friend is available\n    friend_start = parse_time(friend_available_start)\n    if current_time < friend_start:\n        wait_duration = (friend_start - current_time).seconds // 60\n        current_time = friend_start\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": friend_location,\n            \"time\": format_time(current_time)\n        })\n    \n    # Meet friend\n    meet_end = current_time + timedelta(minutes=min_meet_duration)\n    friend_end = parse_time(friend_available_end)\n    if meet_end > friend_end:\n        meet_end = friend_end\n        min_meet_duration = (meet_end - current_time).seconds // 60\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": friend_location,\n        \"duration\": min_meet_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Chinatown\"\ntravel_time = 20\nfriend_location = \"Richmond District\"\nfriend_available_start = \"6:00PM\"\nfriend_available_end = \"9:00PM\"\nmin_meet_duration = 75\n\n# Compute schedule\nschedule = compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meet_duration)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_97",
            "is_correct": true
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Alamo Square",
                    "time": "9:00AM",
                    "duration": 12,
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "9:12AM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "time": "8:45PM",
                    "duration": 45
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Alamo Square",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Richmond District",
                    "duration": 12,
                    "time": "9:12AM",
                    "to": "Richmond District"
                },
                {
                    "action": "wait",
                    "location": "Richmond District",
                    "time": "8:45PM"
                },
                {
                    "action": "meet",
                    "location": "Richmond District",
                    "duration": 45,
                    "time": "8:45PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef calculate_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    \n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    \n    current_time = travel_end_time\n    current_location = friend_location\n    \n    # Check if friend is available now\n    friend_start = parse_time(friend_available_start)\n    friend_end = parse_time(friend_available_end)\n    \n    if current_time < friend_start:\n        # Need to wait\n        wait_time = (friend_start - current_time).total_seconds() / 60\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = friend_start\n    \n    # Calculate meeting time\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    \n    if meeting_end_time > friend_end:\n        # Can't meet for full duration, adjust\n        possible_duration = (friend_end - current_time).total_seconds() / 60\n        if possible_duration <= 0:\n            return None  # No time to meet\n        meeting_end_time = friend_end\n    else:\n        possible_duration = min_meeting_duration\n    \n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": possible_duration,\n        \"time\": format_time(current_time)\n    })\n    \n    return schedule\n\n# Input parameters for the current problem\nstart_location = \"Alamo Square\"\ntravel_time = {\n    \"Alamo Square\": {\"Richmond District\": 12},\n    \"Richmond District\": {\"Alamo Square\": 13}\n}\nfriend_location = \"Richmond District\"\nfriend_available_start = \"8:45PM\"\nfriend_available_end = \"9:30PM\"\nmin_meeting_duration = 45\n\n# Calculate schedule\nschedule = calculate_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Prepare output\noutput = {\n    \"schedule\": schedule\n}\n\n# Print JSON output\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_98",
            "is_correct": false
        },
        {
            "final_program_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM",
                    "duration": 13,
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "9:13AM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "time": "1:15PM",
                    "duration": 15
                }
            ],
            "expected_plan": [
                {
                    "action": "start",
                    "location": "Fisherman's Wharf",
                    "time": "9:00AM"
                },
                {
                    "action": "travel",
                    "location": "Union Square",
                    "duration": 13,
                    "time": "9:13AM",
                    "to": "Union Square"
                },
                {
                    "action": "wait",
                    "location": "Union Square",
                    "time": "1:15PM"
                },
                {
                    "action": "meet",
                    "location": "Union Square",
                    "duration": 15,
                    "time": "1:15PM"
                }
            ],
            "type_error": null,
            "full_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%-I:%M%p')\n\ndef compute_schedule(start_location, travel_time, friend_location, friend_available_start, friend_available_end, min_meeting_duration):\n    schedule = []\n    current_time = parse_time('9:00AM')\n    current_location = start_location\n    \n    schedule.append({\n        \"action\": \"start\",\n        \"location\": current_location,\n        \"time\": format_time(current_time)\n    })\n    \n    # Travel to friend's location\n    travel_duration = travel_time[current_location][friend_location]\n    travel_end_time = current_time + timedelta(minutes=travel_duration)\n    schedule.append({\n        \"action\": \"travel\",\n        \"location\": current_location,\n        \"duration\": travel_duration,\n        \"time\": format_time(current_time),\n        \"to\": friend_location\n    })\n    current_time = travel_end_time\n    current_location = friend_location\n    \n    # Wait until friend is available\n    available_start = parse_time(friend_available_start)\n    if current_time < available_start:\n        schedule.append({\n            \"action\": \"wait\",\n            \"location\": current_location,\n            \"time\": format_time(current_time)\n        })\n        current_time = available_start\n    \n    # Meet friend\n    meeting_end_time = current_time + timedelta(minutes=min_meeting_duration)\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": current_location,\n        \"duration\": min_meeting_duration,\n        \"time\": format_time(current_time)\n    })\n    current_time = meeting_end_time\n    \n    return schedule\n\n# Input parameters\nstart_location = \"Fisherman's Wharf\"\ntravel_time = {\n    \"Fisherman's Wharf\": {\"Union Square\": 13},\n    \"Union Square\": {\"Fisherman's Wharf\": 15}\n}\nfriend_location = \"Union Square\"\nfriend_available_start = \"1:15PM\"\nfriend_available_end = \"7:15PM\"\nmin_meeting_duration = 15\n\n# Compute schedule\nschedule = compute_schedule(\n    start_location,\n    travel_time,\n    friend_location,\n    friend_available_start,\n    friend_available_end,\n    min_meeting_duration\n)\n\n# Output as JSON\noutput = {\n    \"schedule\": schedule\n}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_99",
            "is_correct": false
        }
    ]
}