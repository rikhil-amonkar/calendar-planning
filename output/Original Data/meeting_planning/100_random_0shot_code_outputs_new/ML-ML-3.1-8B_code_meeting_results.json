{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Sarah",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Mary",
                        "start_time": "12:00",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Helen",
                        "start_time": "19:15",
                        "end_time": "20:30"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "20:30",
                        "end_time": "23:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Sarah",
                        "start_time": "14:45",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Mary",
                        "start_time": "16:48",
                        "end_time": "18:03"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Helen",
                        "start_time": "21:45",
                        "end_time": "22:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Haight-Ashbury': {'Fisherman\\'s Wharf': 23, 'Richmond District': 10, 'Mission District': 11, 'Bayview': 18},\n    'Fisherman\\'s Wharf': {'Haight-Ashbury': 22, 'Richmond District': 18, 'Mission District': 22, 'Bayview': 26},\n    'Richmond District': {'Haight-Ashbury': 10, 'Fisherman\\'s Wharf': 18, 'Mission District': 20, 'Bayview': 26},\n    'Mission District': {'Haight-Ashbury': 12, 'Fisherman\\'s Wharf': 22, 'Richmond District': 20, 'Bayview': 15},\n    'Bayview': {'Haight-Ashbury': 19, 'Fisherman\\'s Wharf': 25, 'Richmond District': 25, 'Mission District': 13}\n}\n\n# Constraints\nconstraints = {\n    'Sarah': {'location': 'Fisherman\\'s Wharf','start_time': '14:45', 'end_time': '17:30','required_time': 105},\n    'Mary': {'location': 'Richmond District','start_time': '13:00', 'end_time': '19:15','required_time': 75},\n    'Helen': {'location': 'Mission District','start_time': '21:45', 'end_time': '22:30','required_time': 30},\n    'Thomas': {'location': 'Bayview','start_time': '15:15', 'end_time': '18:45','required_time': 120}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Haight-Ashbury', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n               'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```\n\nThis Python program generates an optimal meeting schedule based on the given constraints and travel distances between locations. The schedule is represented as a JSON-formatted dictionary with the specified structure. The program uses logical rules and calculations to determine the best schedule, taking into account travel times and constraints.",
            "count": "meeting_planning_example_389"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Kimberly",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Elizabeth",
                        "start_time": "12:00",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Joshua",
                        "start_time": "16:15",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Joshua",
                        "start_time": "10:30",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Kimberly",
                        "start_time": "15:30",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "16:03",
                        "end_time": "16:33"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Betty",
                        "start_time": "16:57",
                        "end_time": "17:57"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Daniel",
                        "start_time": "18:30",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Elizabeth",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "19:45",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Union Square': {'Presidio': 24, 'Alamo Square': 15, 'Marina District': 18, 'Financial District': 9, 'Nob Hill': 9, 'Sunset District': 27, 'Chinatown': 7, 'Russian Hill': 13, 'North Beach': 10, 'Haight-Ashbury': 18},\n    'Presidio': {'Union Square': 22, 'Alamo Square': 19, 'Marina District': 11, 'Financial District': 23, 'Nob Hill': 18, 'Sunset District': 15, 'Chinatown': 21, 'Russian Hill': 14, 'North Beach': 18, 'Haight-Ashbury': 15},\n    'Alamo Square': {'Union Square': 14, 'Presidio': 17, 'Marina District': 15, 'Financial District': 17, 'Nob Hill': 11, 'Sunset District': 16, 'Chinatown': 15, 'Russian Hill': 13, 'North Beach': 15, 'Haight-Ashbury': 5},\n    'Marina District': {'Union Square': 16, 'Presidio': 10, 'Alamo Square': 15, 'Financial District': 17, 'Nob Hill': 12, 'Sunset District': 19, 'Chinatown': 15, 'Russian Hill': 8, 'North Beach': 11, 'Haight-Ashbury': 16},\n    'Financial District': {'Union Square': 9, 'Presidio': 22, 'Alamo Square': 17, 'Marina District': 15, 'Nob Hill': 8, 'Sunset District': 30, 'Chinatown': 5, 'Russian Hill': 11, 'North Beach': 7, 'Haight-Ashbury': 19},\n    'Nob Hill': {'Union Square': 7, 'Presidio': 17, 'Alamo Square': 11, 'Marina District': 11, 'Financial District': 9, 'Sunset District': 24, 'Chinatown': 6, 'Russian Hill': 5, 'North Beach': 8, 'Haight-Ashbury': 13},\n    'Sunset District': {'Union Square': 30, 'Presidio': 16, 'Alamo Square': 17, 'Marina District': 21, 'Financial District': 30, 'Nob Hill': 27, 'Chinatown': 30, 'Russian Hill': 24, 'North Beach': 28, 'Haight-Ashbury': 15},\n    'Chinatown': {'Union Square': 7, 'Presidio': 19, 'Alamo Square': 17, 'Marina District': 12, 'Financial District': 5, 'Nob Hill': 9, 'Sunset District': 29, 'Russian Hill': 7, 'North Beach': 3, 'Haight-Ashbury': 19},\n    'Russian Hill': {'Union Square': 10, 'Presidio': 14, 'Alamo Square': 15, 'Marina District': 7, 'Financial District': 11, 'Nob Hill': 5, 'Sunset District': 23, 'Chinatown': 9, 'North Beach': 5, 'Haight-Ashbury': 17},\n    'North Beach': {'Union Square': 7, 'Presidio': 17, 'Alamo Square': 16, 'Marina District': 9, 'Financial District': 8, 'Nob Hill': 7, 'Sunset District': 27, 'Chinatown': 6, 'Russian Hill': 4, 'Haight-Ashbury': 18},\n    'Haight-Ashbury': {'Union Square': 19, 'Presidio': 15, 'Alamo Square': 5, 'Marina District': 17, 'Financial District': 21, 'Nob Hill': 15, 'Sunset District': 15, 'Chinatown': 19, 'Russian Hill': 17, 'North Beach': 19}\n}\n\n# Constraints\nconstraints = {\n    'Kimberly': {'location': 'Presidio','start_time': '15:30', 'end_time': '16:00','required_time': 15},\n    'Elizabeth': {'location': 'Alamo Square','start_time': '19:15', 'end_time': '20:15','required_time': 15},\n    'Joshua': {'location': 'Marina District','start_time': '10:30', 'end_time': '14:15','required_time': 45},\n    'Sandra': {'location': 'Financial District','start_time': '19:30', 'end_time': '20:15','required_time': 45},\n    'Kenneth': {'location': 'Nob Hill','start_time': '12:45', 'end_time': '21:45','required_time': 30},\n    'Betty': {'location': 'Sunset District','start_time': '14:00', 'end_time': '19:00','required_time': 60},\n    'Deborah': {'location': 'Chinatown','start_time': '17:15', 'end_time': '20:30','required_time': 15},\n    'Barbara': {'location': 'Russian Hill','start_time': '17:30', 'end_time': '21:15','required_time': 120},\n    'Steven': {'location': 'North Beach','start_time': '17:45', 'end_time': '20:45','required_time': 90},\n    'Daniel': {'location': 'Haight-Ashbury','start_time': '18:30', 'end_time': '18:45','required_time': 15}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Union Square', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n              'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_912"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kimberly",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "12:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "17:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "12:15",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Margaret",
                        "start_time": "12:52",
                        "end_time": "13:22"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kimberly",
                        "start_time": "13:47",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "14:19",
                        "end_time": "15:34"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "19:30",
                        "end_time": "20:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Richmond District': {'Marina District': 9, 'Chinatown': 20, 'Financial District': 22, 'Bayview': 26, 'Union Square': 21},\n    'Marina District': {'Richmond District': 11, 'Chinatown': 16, 'Financial District': 17, 'Bayview': 27, 'Union Square': 16},\n    'Chinatown': {'Richmond District': 20, 'Marina District': 12, 'Financial District': 5, 'Bayview': 22, 'Union Square': 7},\n    'Financial District': {'Richmond District': 21, 'Marina District': 15, 'Chinatown': 5, 'Bayview': 19, 'Union Square': 9},\n    'Bayview': {'Richmond District': 25, 'Marina District': 25, 'Chinatown': 18, 'Financial District': 19, 'Union Square': 17},\n    'Union Square': {'Richmond District': 20, 'Marina District': 18, 'Chinatown': 7, 'Financial District': 9, 'Bayview': 15}\n}\n\n# Constraints\nconstraints = {\n    'Kimberly': {'location': 'Marina District','start_time': '13:15', 'end_time': '16:45','required_time': 15},\n    'Robert': {'location': 'Chinatown','start_time': '12:15', 'end_time': '20:15','required_time': 15},\n    'Rebecca': {'location': 'Financial District','start_time': '13:15', 'end_time': '16:45','required_time': 75},\n    'Margaret': {'location': 'Bayview','start_time': '09:30', 'end_time': '13:30','required_time': 30},\n    'Kenneth': {'location': 'Union Square','start_time': '19:30', 'end_time': '21:15','required_time': 75}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Richmond District', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n             'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_446"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Ronald",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Patricia",
                        "start_time": "12:00",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Laura",
                        "start_time": "19:00",
                        "end_time": "23:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Emily",
                        "start_time": "23:00",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mary",
                        "start_time": "13:00",
                        "end_time": "19:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Patricia",
                        "start_time": "9:31",
                        "end_time": "10:31"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Laura",
                        "start_time": "12:30",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Ronald",
                        "start_time": "13:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Emily",
                        "start_time": "16:15",
                        "end_time": "17:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Financial District': {'Russian Hill': 10, 'Sunset District': 31, 'North Beach': 7, 'The Castro': 23, 'Golden Gate Park': 23},\n    'Russian Hill': {'Financial District': 11, 'Sunset District': 23, 'North Beach': 5, 'The Castro': 21, 'Golden Gate Park': 21},\n    'Sunset District': {'Financial District': 30, 'Russian Hill': 24, 'North Beach': 29, 'The Castro': 17, 'Golden Gate Park': 11},\n    'North Beach': {'Financial District': 8, 'Russian Hill': 4, 'Sunset District': 27, 'The Castro': 22, 'Golden Gate Park': 22},\n    'The Castro': {'Financial District': 20, 'Russian Hill': 18, 'Sunset District': 17, 'North Beach': 20, 'Golden Gate Park': 13},\n    'Golden Gate Park': {'Financial District': 26, 'Russian Hill': 19, 'Sunset District': 10, 'North Beach': 24, 'The Castro': 13}\n}\n\n# Constraints\nconstraints = {\n    'Ronald': {'location': 'Russian Hill','start_time': '13:45', 'end_time': '17:15','required_time': 105},\n    'Patricia': {'location': 'Sunset District','start_time': '09:15', 'end_time': '22:00','required_time': 60},\n    'Laura': {'location': 'North Beach','start_time': '12:30', 'end_time': '12:45','required_time': 15},\n    'Emily': {'location': 'The Castro','start_time': '16:15', 'end_time': '18:30','required_time': 60},\n    'Mary': {'location': 'Golden Gate Park','start_time': '15:00', 'end_time': '16:30','required_time': 60}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Financial District', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n            'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_444"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Mary",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Lisa",
                        "start_time": "12:00",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Betty",
                        "start_time": "19:45",
                        "end_time": "23:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Charles",
                        "start_time": "23:15",
                        "end_time": "18:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Mary",
                        "start_time": "10:00",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Betty",
                        "start_time": "10:56",
                        "end_time": "12:26"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Charles",
                        "start_time": "12:47",
                        "end_time": "14:47"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Lisa",
                        "start_time": "20:30",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Bayview': {'Pacific Heights': 23, 'Mission District': 13, 'Haight-Ashbury': 19, 'Financial District': 19},\n    'Pacific Heights': {'Bayview': 22, 'Mission District': 15, 'Haight-Ashbury': 11, 'Financial District': 13},\n    'Mission District': {'Bayview': 15, 'Pacific Heights': 16, 'Haight-Ashbury': 12, 'Financial District': 17},\n    'Haight-Ashbury': {'Bayview': 18, 'Pacific Heights': 12, 'Mission District': 11, 'Financial District': 21},\n    'Financial District': {'Bayview': 19, 'Pacific Heights': 13, 'Mission District': 17, 'Haight-Ashbury': 19}\n}\n\n# Constraints\nconstraints = {\n    'Mary': {'location': 'Pacific Heights','start_time': '10:00', 'end_time': '19:00','required_time': 45},\n    'Lisa': {'location': 'Mission District','start_time': '20:30', 'end_time': '22:00','required_time': 75},\n    'Betty': {'location': 'Haight-Ashbury','start_time': '07:15', 'end_time': '17:15','required_time': 90},\n    'Charles': {'location': 'Financial District','start_time': '11:15', 'end_time': '15:00','required_time': 120}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Bayview', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n            'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_350"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "12:00",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sandra",
                        "start_time": "9:12",
                        "end_time": "11:12"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Robert",
                        "start_time": "11:25",
                        "end_time": "11:40"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kenneth",
                        "start_time": "11:49",
                        "end_time": "12:34"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "12:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "15:15",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Kimberly",
                        "start_time": "16:27",
                        "end_time": "18:12"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Amanda",
                        "start_time": "18:23",
                        "end_time": "18:38"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Melissa",
                        "start_time": "18:45",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "19:30",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Haight-Ashbury': {'Mission District': 11, 'Union Square': 19, 'Pacific Heights': 12, 'Bayview': 18, 'Fisherman\\'s Wharf': 23, 'Marina District': 17, 'Richmond District': 10, 'Sunset District': 15, 'Golden Gate Park': 7},\n    'Mission District': {'Haight-Ashbury': 12, 'Union Square': 15, 'Pacific Heights': 16, 'Bayview': 14, 'Fisherman\\'s Wharf': 22, 'Marina District': 19, 'Richmond District': 20, 'Sunset District': 24, 'Golden Gate Park': 17},\n    'Union Square': {'Haight-Ashbury': 18, 'Mission District': 14, 'Pacific Heights': 12, 'Bayview': 15, 'Fisherman\\'s Wharf': 15, 'Marina District': 18, 'Richmond District': 20, 'Sunset District': 27, 'Golden Gate Park': 22},\n    'Pacific Heights': {'Haight-Ashbury': 11, 'Mission District': 15, 'Union Square': 12, 'Bayview': 22, 'Fisherman\\'s Wharf': 13, 'Marina District': 6, 'Richmond District': 12, 'Sunset District': 21, 'Golden Gate Park': 15},\n    'Bayview': {'Haight-Ashbury': 19, 'Mission District': 13, 'Union Square': 18, 'Pacific Heights': 23, 'Fisherman\\'s Wharf': 25, 'Marina District': 27, 'Richmond District': 25, 'Sunset District': 23, 'Golden Gate Park': 22},\n    'Fisherman\\'s Wharf': {'Haight-Ashbury': 22, 'Mission District': 22, 'Union Square': 13, 'Pacific Heights': 12, 'Bayview': 26, 'Marina District': 9, 'Richmond District': 18, 'Sunset District': 27, 'Golden Gate Park': 25},\n    'Marina District': {'Haight-Ashbury': 16, 'Mission District': 20, 'Union Square': 16, 'Pacific Heights': 7, 'Bayview': 27, 'Fisherman\\'s Wharf': 10, 'Richmond District': 11, 'Sunset District': 19, 'Golden Gate Park': 18},\n    'Richmond District': {'Haight-Ashbury': 10, 'Mission District': 20, 'Union Square': 21, 'Pacific Heights': 10, 'Bayview': 27, 'Fisherman\\'s Wharf': 18, 'Marina District': 9, 'Sunset District': 11, 'Golden Gate Park': 9},\n    'Sunset District': {'Haight-Ashbury': 15, 'Mission District': 25, 'Union Square': 30, 'Pacific Heights': 21, 'Bayview': 22, 'Fisherman\\'s Wharf': 29, 'Marina District': 21, 'Richmond District': 12, 'Golden Gate Park': 11},\n    'Golden Gate Park': {'Haight-Ashbury': 7, 'Mission District': 17, 'Union Square': 22, 'Pacific Heights': 16, 'Bayview': 23, 'Fisherman\\'s Wharf': 24, 'Marina District': 16, 'Richmond District': 7, 'Sunset District': 10}\n}\n\n# Constraints\nconstraints = {\n    'Elizabeth': {'location': 'Mission District','start_time': '10:30', 'end_time': '20:00','required_time': 90},\n    'David': {'location': 'Union Square','start_time': '15:15', 'end_time': '19:00','required_time': 45},\n    'Sandra': {'location': 'Pacific Heights','start_time': '07:00', 'end_time': '20:00','required_time': 120},\n    'Thomas': {'location': 'Bayview','start_time': '19:30', 'end_time': '20:30','required_time': 30},\n    'Robert': {'location': 'Fisherman\\'s Wharf','start_time': '10:00', 'end_time': '15:00','required_time': 15},\n    'Kenneth': {'location': 'Marina District','start_time': '10:45', 'end_time': '13:00','required_time': 45},\n    'Melissa': {'location': 'Richmond District','start_time': '18:15', 'end_time': '20:00','required_time': 15},\n    'Kimberly': {'location': 'Sunset District','start_time': '10:15', 'end_time': '18:15','required_time': 105},\n    'Amanda': {'location': 'Golden Gate Park','start_time': '07:45', 'end_time': '18:45','required_time': 15}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Haight-Ashbury', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n           'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_867"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Jason",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "12:00",
                        "end_time": "22:15"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Elizabeth",
                        "start_time": "22:15",
                        "end_time": "21:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Laura",
                        "start_time": "21:00",
                        "end_time": "23:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Jason",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Brian",
                        "start_time": "14:52",
                        "end_time": "15:07"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Elizabeth",
                        "start_time": "15:30",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Laura",
                        "start_time": "17:37",
                        "end_time": "18:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "19:02",
                        "end_time": "19:47"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Presidio': {'Richmond District': 7, 'North Beach': 18, 'Financial District': 23, 'Golden Gate Park': 12, 'Union Square': 22},\n    'Richmond District': {'Presidio': 7, 'North Beach': 17, 'Financial District': 22, 'Golden Gate Park': 9, 'Union Square': 21},\n    'North Beach': {'Presidio': 17, 'Richmond District': 18, 'Financial District': 8, 'Golden Gate Park': 22, 'Union Square': 7},\n    'Financial District': {'Presidio': 22, 'Richmond District': 21, 'North Beach': 7, 'Golden Gate Park': 23, 'Union Square': 9},\n    'Golden Gate Park': {'Presidio': 11, 'Richmond District': 7, 'North Beach': 24, 'Financial District': 26, 'Union Square': 22},\n    'Union Square': {'Presidio': 24, 'Richmond District': 20, 'North Beach': 10, 'Financial District': 9, 'Golden Gate Park': 22}\n}\n\n# Constraints\nconstraints = {\n    'Jason': {'location': 'Richmond District','start_time': '13:00', 'end_time': '20:45','required_time': 90},\n    'Melissa': {'location': 'North Beach','start_time': '18:45', 'end_time': '20:15','required_time': 45},\n    'Brian': {'location': 'Financial District','start_time': '09:45', 'end_time': '21:45','required_time': 15},\n    'Elizabeth': {'location': 'Golden Gate Park','start_time': '08:45', 'end_time': '21:30','required_time': 105},\n    'Laura': {'location': 'Union Square','start_time': '14:15', 'end_time': '19:30','required_time': 75}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Presidio', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n          'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_423"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Amanda",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Melissa",
                        "start_time": "12:00",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Melissa",
                        "start_time": "9:30",
                        "end_time": "10:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Matthew",
                        "start_time": "10:19",
                        "end_time": "10:49"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Robert",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Joseph",
                        "start_time": "13:24",
                        "end_time": "15:09"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Amanda",
                        "start_time": "15:25",
                        "end_time": "17:10"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Karen",
                        "start_time": "17:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "19:31",
                        "end_time": "21:16"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Presidio': {'Marina District': 11, 'The Castro': 21, 'Fisherman\\'s Wharf': 19, 'Bayview': 31, 'Pacific Heights': 11, 'Mission District': 26, 'Alamo Square': 19, 'Golden Gate Park': 12},\n    'Marina District': {'Presidio': 10, 'The Castro': 22, 'Fisherman\\'s Wharf': 10, 'Bayview': 27, 'Pacific Heights': 7, 'Mission District': 20, 'Alamo Square': 15, 'Golden Gate Park': 18},\n    'The Castro': {'Presidio': 20, 'Marina District': 21, 'Fisherman\\'s Wharf': 24, 'Bayview': 19, 'Pacific Heights': 16, 'Mission District': 7, 'Alamo Square': 8, 'Golden Gate Park': 11},\n    'Fisherman\\'s Wharf': {'Presidio': 17, 'Marina District': 9, 'The Castro': 27, 'Bayview': 26, 'Pacific Heights': 12, 'Mission District': 22, 'Alamo Square': 21, 'Golden Gate Park': 25},\n    'Bayview': {'Presidio': 32, 'Marina District': 27, 'The Castro': 19, 'Fisherman\\'s Wharf': 25, 'Pacific Heights': 23, 'Mission District': 13, 'Alamo Square': 16, 'Golden Gate Park': 22},\n    'Pacific Heights': {'Presidio': 11, 'Marina District': 6, 'The Castro': 16, 'Fisherman\\'s Wharf': 13, 'Bayview': 22, 'Mission District': 15, 'Alamo Square': 10, 'Golden Gate Park': 15},\n    'Mission District': {'Presidio': 25, 'Marina District': 19, 'The Castro': 7, 'Fisherman\\'s Wharf': 22, 'Bayview': 14, 'Pacific Heights': 16, 'Alamo Square': 11, 'Golden Gate Park': 17},\n    'Alamo Square': {'Presidio': 17, 'Marina District': 15, 'The Castro': 8, 'Fisherman\\'s Wharf': 19, 'Bayview': 16, 'Pacific Heights': 10, 'Mission District': 10, 'Golden Gate Park': 9},\n    'Golden Gate Park': {'Presidio': 11, 'Marina District': 16, 'The Castro': 13, 'Fisherman\\'s Wharf': 24, 'Bayview': 23, 'Pacific Heights': 16, 'Mission District': 17, 'Alamo Square': 9}\n}\n\n# Constraints\nconstraints = {\n    'Amanda': {'location': 'Marina District','start_time': '14:45', 'end_time': '19:30','required_time': 105},\n    'Melissa': {'location': 'The Castro','start_time': '09:30', 'end_time': '17:00','required_time': 30},\n    'Jeffrey': {'location': 'Fisherman\\'s Wharf','start_time': '12:45', 'end_time': '18:45','required_time': 120},\n    'Matthew': {'location': 'Bayview','start_time': '10:15', 'end_time': '13:15','required_time': 30},\n    'Nancy': {'location': 'Pacific Heights','start_time': '17:00', 'end_time': '21:30','required_time': 105},\n    'Karen': {'location': 'Mission District','start_time': '17:30', 'end_time': '20:30','required_time': 105},\n    'Robert': {'location': 'Alamo Square','start_time': '11:15', 'end_time': '17:30','required_time': 120},\n    'Joseph': {'location': 'Golden Gate Park','start_time': '08:30', 'end_time': '21:15','required_time': 105}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Presidio', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n       'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_715"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Stephanie",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Kevin",
                        "start_time": "12:00",
                        "end_time": "21:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Robert",
                        "start_time": "21:00",
                        "end_time": "23:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "23:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Anthony",
                        "start_time": "12:00",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sandra",
                        "start_time": "18:15",
                        "end_time": "20:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "9:07",
                        "end_time": "10:22"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Anthony",
                        "start_time": "10:32",
                        "end_time": "10:47"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sandra",
                        "start_time": "14:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Stephanie",
                        "start_time": "20:00",
                        "end_time": "20:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Kevin",
                        "start_time": "20:22",
                        "end_time": "21:37"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Haight-Ashbury': {'Russian Hill': 17, 'Fisherman\\'s Wharf': 23, 'Nob Hill': 15, 'Golden Gate Park': 7, 'Alamo Square': 5, 'Pacific Heights': 12},\n    'Russian Hill': {'Haight-Ashbury': 17, 'Fisherman\\'s Wharf': 7, 'Nob Hill': 5, 'Golden Gate Park': 21, 'Alamo Square': 15, 'Pacific Heights': 7},\n    'Fisherman\\'s Wharf': {'Haight-Ashbury': 22, 'Russian Hill': 7, 'Nob Hill': 11, 'Golden Gate Park': 25, 'Alamo Square': 20, 'Pacific Heights': 12},\n    'Nob Hill': {'Haight-Ashbury': 13, 'Russian Hill': 5, 'Fisherman\\'s Wharf': 11, 'Golden Gate Park': 17, 'Alamo Square': 11, 'Pacific Heights': 8},\n    'Golden Gate Park': {'Haight-Ashbury': 7, 'Russian Hill': 19, 'Fisherman\\'s Wharf': 24, 'Nob Hill': 20, 'Alamo Square': 10, 'Pacific Heights': 16},\n    'Alamo Square': {'Haight-Ashbury': 5, 'Russian Hill': 13, 'Fisherman\\'s Wharf': 19, 'Nob Hill': 11, 'Golden Gate Park': 9, 'Pacific Heights': 10},\n    'Pacific Heights': {'Haight-Ashbury': 11, 'Russian Hill': 7, 'Fisherman\\'s Wharf': 13, 'Nob Hill': 8, 'Golden Gate Park': 15, 'Alamo Square': 10}\n}\n\n# Constraints\nconstraints = {\n    'Stephanie': {'location': 'Russian Hill','start_time': '20:00', 'end_time': '20:45','required_time': 15},\n    'Kevin': {'location': 'Fisherman\\'s Wharf','start_time': '19:15', 'end_time': '21:45','required_time': 75},\n    'Robert': {'location': 'Nob Hill','start_time': '07:45', 'end_time': '10:30','required_time': 90},\n    'Steven': {'location': 'Golden Gate Park','start_time': '08:30', 'end_time': '17:00','required_time': 75},\n    'Anthony': {'location': 'Alamo Square','start_time': '07:45', 'end_time': '19:45','required_time': 15},\n    'Sandra': {'location': 'Pacific Heights','start_time': '14:45', 'end_time': '21:45','required_time': 45}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Haight-Ashbury', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n      'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_577"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Karen",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "12:00",
                        "end_time": "22:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Joseph",
                        "start_time": "22:30",
                        "end_time": "18:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Elizabeth",
                        "start_time": "10:00",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Joseph",
                        "start_time": "11:45",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "14:30",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kimberly",
                        "start_time": "15:22",
                        "end_time": "17:07"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Karen",
                        "start_time": "17:18",
                        "end_time": "17:48"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Helen",
                        "start_time": "18:12",
                        "end_time": "19:57"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Ashley",
                        "start_time": "20:21",
                        "end_time": "21:06"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Robert",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Marina District': {'Mission District': 20, 'Fisherman\\'s Wharf': 10, 'Presidio': 10, 'Union Square': 16, 'Sunset District': 19, 'Financial District': 17, 'Haight-Ashbury': 16, 'Russian Hill': 8},\n    'Mission District': {'Marina District': 19, 'Fisherman\\'s Wharf': 22, 'Presidio': 25, 'Union Square': 15, 'Sunset District': 24, 'Financial District': 15, 'Haight-Ashbury': 12, 'Russian Hill': 15},\n    'Fisherman\\'s Wharf': {'Marina District': 9, 'Mission District': 22, 'Presidio': 17, 'Union Square': 13, 'Sunset District': 27, 'Financial District': 11, 'Haight-Ashbury': 22, 'Russian Hill': 7},\n    'Presidio': {'Marina District': 11, 'Mission District': 26, 'Fisherman\\'s Wharf': 19, 'Union Square': 22, 'Sunset District': 15, 'Financial District': 23, 'Haight-Ashbury': 15, 'Russian Hill': 14},\n    'Union Square': {'Marina District': 18, 'Mission District': 14, 'Fisherman\\'s Wharf': 15, 'Presidio': 24, 'Sunset District': 27, 'Financial District': 9, 'Haight-Ashbury': 18, 'Russian Hill': 13},\n    'Sunset District': {'Marina District': 21, 'Mission District': 25, 'Fisherman\\'s Wharf': 29, 'Presidio': 16, 'Union Square': 30, 'Financial District': 30, 'Haight-Ashbury': 15, 'Russian Hill': 24},\n    'Financial District': {'Marina District': 15, 'Mission District': 17, 'Fisherman\\'s Wharf': 10, 'Presidio': 22, 'Union Square': 9, 'Sunset District': 30, 'Haight-Ashbury': 19, 'Russian Hill': 11},\n    'Haight-Ashbury': {'Marina District': 17, 'Mission District': 11, 'Fisherman\\'s Wharf': 23, 'Presidio': 15, 'Union Square': 19, 'Sunset District': 15, 'Financial District': 21, 'Russian Hill': 17},\n    'Russian Hill': {'Marina District': 7, 'Mission District': 16, 'Fisherman\\'s Wharf': 7, 'Presidio': 14, 'Union Square': 10, 'Sunset District': 23, 'Financial District': 11, 'Haight-Ashbury': 17}\n}\n\n# Constraints\nconstraints = {\n    'Karen': {'location': 'Mission District','start_time': '14:15', 'end_time': '22:00','required_time': 30},\n    'Richard': {'location': 'Fisherman\\'s Wharf','start_time': '14:30', 'end_time': '17:30','required_time': 30},\n    'Robert': {'location': 'Presidio','start_time': '21:45', 'end_time': '22:45','required_time': 60},\n    'Joseph': {'location': 'Union Square','start_time': '11:45', 'end_time': '14:45','required_time': 120},\n    'Helen': {'location': 'Sunset District','start_time': '14:45', 'end_time': '20:45','required_time': 105},\n    'Elizabeth': {'location': 'Financial District','start_time': '10:00', 'end_time': '12:45','required_time': 75},\n    'Kimberly': {'location': 'Haight-Ashbury','start_time': '14:15', 'end_time': '17:30','required_time': 105},\n    'Ashley': {'location': 'Russian Hill','start_time': '11:30', 'end_time': '21:30','required_time': 45}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Marina District', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n     'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_728"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jeffrey",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Ronald",
                        "start_time": "12:00",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jason",
                        "start_time": "14:30",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Melissa",
                        "start_time": "16:45",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Richard",
                        "start_time": "17:45",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Laura",
                        "start_time": "18:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jeffrey",
                        "start_time": "10:15",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Ronald",
                        "start_time": "12:06",
                        "end_time": "14:06"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Margaret",
                        "start_time": "14:22",
                        "end_time": "15:52"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Richard",
                        "start_time": "15:59",
                        "end_time": "16:14"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Laura",
                        "start_time": "16:34",
                        "end_time": "17:34"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Melissa",
                        "start_time": "17:55",
                        "end_time": "18:10"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "George",
                        "start_time": "19:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Presidio': {'Fisherman\\'s Wharf': 19, 'Alamo Square': 19, 'Financial District': 23, 'Union Square': 22, 'Sunset District': 15, 'Embarcadero': 20, 'Golden Gate Park': 12, 'Chinatown': 21, 'Richmond District': 7},\n    'Fisherman\\'s Wharf': {'Presidio': 17, 'Alamo Square': 21, 'Financial District': 11, 'Union Square': 13, 'Sunset District': 27, 'Embarcadero': 8, 'Golden Gate Park': 25, 'Chinatown': 12, 'Richmond District': 18},\n    'Alamo Square': {'Presidio': 17, 'Fisherman\\'s Wharf': 19, 'Financial District': 17, 'Union Square': 14, 'Sunset District': 16, 'Embarcadero': 16, 'Golden Gate Park': 9, 'Chinatown': 15, 'Richmond District': 11},\n    'Financial District': {'Presidio': 22, 'Fisherman\\'s Wharf': 10, 'Alamo Square': 17, 'Union Square': 9, 'Sunset District': 30, 'Embarcadero': 4, 'Golden Gate Park': 23, 'Chinatown': 5, 'Richmond District': 21},\n    'Union Square': {'Presidio': 24, 'Fisherman\\'s Wharf': 15, 'Alamo Square': 15, 'Financial District': 9, 'Sunset District': 27, 'Embarcadero': 11, 'Golden Gate Park': 22, 'Chinatown': 7, 'Richmond District': 20},\n    'Sunset District': {'Presidio': 16, 'Fisherman\\'s Wharf': 29, 'Alamo Square': 17, 'Financial District': 30, 'Union Square': 30, 'Embarcadero': 30, 'Golden Gate Park': 11, 'Chinatown': 30, 'Richmond District': 12},\n    'Embarcadero': {'Presidio': 20, 'Fisherman\\'s Wharf': 6, 'Alamo Square': 19, 'Financial District': 5, 'Union Square': 10, 'Sunset District': 30, 'Golden Gate Park': 25, 'Chinatown': 7, 'Richmond District': 21},\n    'Golden Gate Park': {'Presidio': 11, 'Fisherman\\'s Wharf': 24, 'Alamo Square': 9, 'Financial District': 26, 'Union Square': 22, 'Sunset District': 10, 'Embarcadero': 25, 'Chinatown': 23, 'Richmond District': 7},\n    'Chinatown': {'Presidio': 19, 'Fisherman\\'s Wharf': 8, 'Alamo Square': 17, 'Financial District': 5, 'Union Square': 7, 'Sunset District': 29, 'Embarcadero': 5, 'Golden Gate Park': 23, 'Richmond District': 20},\n    'Richmond District': {'Presidio': 7, 'Fisherman\\'s Wharf': 18, 'Alamo Square': 13, 'Financial District': 22, 'Union Square': 21, 'Sunset District': 11, 'Embarcadero': 19, 'Golden Gate Park': 9, 'Chinatown': 20}\n}\n\n# Constraints\nconstraints = {\n    'Jeffrey': {'location': 'Fisherman\\'s Wharf','start_time': '10:15', 'end_time': '13:00','required_time': 90},\n    'Ronald': {'location': 'Alamo Square','start_time': '07:45', 'end_time': '14:45','required_time': 120},\n    'Jason': {'location': 'Financial District','start_time': '10:45', 'end_time': '16:00','required_time': 105},\n    'Melissa': {'location': 'Union Square','start_time': '17:45', 'end_time': '18:15','required_time': 15},\n    'Elizabeth': {'location': 'Sunset District','start_time': '14:45', 'end_time': '17:30','required_time': 105},\n    'Margaret': {'location': 'Embarcadero','start_time': '13:15', 'end_time': '19:00','required_time': 90},\n    'George': {'location': 'Golden Gate Park','start_time': '19:00', 'end_time': '22:00','required_time': 75},\n    'Richard': {'location': 'Chinatown','start_time': '09:30', 'end_time': '21:00','required_time': 15},\n    'Laura': {'location': 'Richmond District','start_time': '09:45', 'end_time': '18:00','required_time': 60}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Presidio', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n    'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_831"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Betty",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Melissa",
                        "start_time": "12:00",
                        "end_time": "18:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Betty",
                        "start_time": "9:13",
                        "end_time": "10:58"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Melissa",
                        "start_time": "11:13",
                        "end_time": "12:58"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joshua",
                        "start_time": "13:03",
                        "end_time": "14:33"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Jeffrey",
                        "start_time": "14:50",
                        "end_time": "15:35"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "James",
                        "start_time": "16:02",
                        "end_time": "17:32"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Emily",
                        "start_time": "19:30",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Union Square': {'Russian Hill': 13, 'Alamo Square': 15, 'Haight-Ashbury': 18, 'Marina District': 18, 'Bayview': 15, 'Chinatown': 7, 'Presidio': 24, 'Sunset District': 27},\n    'Russian Hill': {'Union Square': 10, 'Alamo Square': 15, 'Haight-Ashbury': 17, 'Marina District': 7, 'Bayview': 23, 'Chinatown': 9, 'Presidio': 14, 'Sunset District': 23},\n    'Alamo Square': {'Union Square': 14, 'Russian Hill': 13, 'Haight-Ashbury': 5, 'Marina District': 15, 'Bayview': 16, 'Chinatown': 15, 'Presidio': 17, 'Sunset District': 16},\n    'Haight-Ashbury': {'Union Square': 19, 'Russian Hill': 17, 'Alamo Square': 5, 'Marina District': 17, 'Bayview': 18, 'Chinatown': 19, 'Presidio': 15, 'Sunset District': 15},\n    'Marina District': {'Union Square': 16, 'Russian Hill': 8, 'Alamo Square': 15, 'Haight-Ashbury': 16, 'Bayview': 27, 'Chinatown': 15, 'Presidio': 10, 'Sunset District': 19},\n    'Bayview': {'Union Square': 18, 'Russian Hill': 23, 'Alamo Square': 16, 'Haight-Ashbury': 19, 'Marina District': 27, 'Chinatown': 19, 'Presidio': 32, 'Sunset District': 23},\n    'Chinatown': {'Union Square': 7, 'Russian Hill': 7, 'Alamo Square': 17, 'Haight-Ashbury': 19, 'Marina District': 12, 'Bayview': 20, 'Presidio': 19, 'Sunset District': 29},\n    'Presidio': {'Union Square': 22, 'Russian Hill': 14, 'Alamo Square': 19, 'Haight-Ashbury': 15, 'Marina District': 11, 'Bayview': 31, 'Chinatown': 21, 'Sunset District': 15},\n    'Sunset District': {'Union Square': 30, 'Russian Hill': 24, 'Alamo Square': 17, 'Haight-Ashbury': 15, 'Marina District': 21, 'Bayview': 22, 'Chinatown': 30, 'Presidio': 16}\n}\n\n# Constraints\nconstraints = {\n    'Betty': {'location': 'Russian Hill','start_time': '07:00', 'end_time': '16:45','required_time': 105},\n    'Melissa': {'location': 'Alamo Square','start_time': '09:30', 'end_time': '17:15','required_time': 105},\n    'Joshua': {'location': 'Haight-Ashbury','start_time': '12:15', 'end_time': '19:00','required_time': 90},\n    'Jeffrey': {'location': 'Marina District','start_time': '12:15', 'end_time': '18:00','required_time': 45},\n    'James': {'location': 'Bayview','start_time': '07:30', 'end_time': '20:00','required_time': 90},\n    'Anthony': {'location': 'Chinatown','start_time': '11:45', 'end_time': '13:30','required_time': 75},\n    'Timothy': {'location': 'Presidio','start_time': '12:30', 'end_time': '14:45','required_time': 90},\n    'Emily': {'location': 'Sunset District','start_time': '19:30', 'end_time': '21:30','required_time': 120}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Union Square', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n  'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_789"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Emily",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Barbara",
                        "start_time": "12:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "William",
                        "start_time": "17:00",
                        "end_time": "19:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Emily",
                        "start_time": "11:45",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Barbara",
                        "start_time": "16:45",
                        "end_time": "17:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'The Castro': {'Alamo Square': 8, 'Union Square': 19, 'Chinatown': 20},\n    'Alamo Square': {'The Castro': 8, 'Union Square': 14, 'Chinatown': 16},\n    'Union Square': {'The Castro': 19, 'Alamo Square': 15, 'Chinatown': 7},\n    'Chinatown': {'The Castro': 22, 'Alamo Square': 17, 'Union Square': 7}\n}\n\n# Constraints\nconstraints = {\n    'Emily': {'location': 'Alamo Square','start_time': '11:45', 'end_time': '15:15','required_time': 105},\n    'Barbara': {'location': 'Union Square','start_time': '16:45', 'end_time': '18:15','required_time': 60},\n    'William': {'location': 'Chinatown','start_time': '17:15', 'end_time': '19:00','required_time': 105}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('The Castro', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n 'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_219"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Laura",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Daniel",
                        "start_time": "12:00",
                        "end_time": "23:15"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "William",
                        "start_time": "23:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Joseph",
                        "start_time": "11:30",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "14:30",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "15:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Laura",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Fisherman\\'s Wharf': {'The Castro': 26, 'Golden Gate Park': 25, 'Embarcadero': 8, 'Russian Hill': 7, 'Nob Hill': 11, 'Alamo Square': 20, 'North Beach': 6},\n    'The Castro': {'Fisherman\\'s Wharf': 24, 'Golden Gate Park': 11, 'Embarcadero': 22, 'Russian Hill': 18, 'Nob Hill': 16, 'Alamo Square': 8, 'North Beach': 20},\n    'Golden Gate Park': {'Fisherman\\'s Wharf': 24, 'The Castro': 13, 'Embarcadero': 25, 'Russian Hill': 19, 'Nob Hill': 20, 'Alamo Square': 10, 'North Beach': 24},\n    'Embarcadero': {'Fisherman\\'s Wharf': 6, 'The Castro': 25, 'Golden Gate Park': 25, 'Russian Hill': 8, 'Nob Hill': 10, 'Alamo Square': 19, 'North Beach': 5},\n    'Russian Hill': {'Fisherman\\'s Wharf': 7, 'The Castro': 21, 'Golden Gate Park': 21, 'Embarcadero': 8, 'Nob Hill': 5, 'Alamo Square': 15, 'North Beach': 5},\n    'Nob Hill': {'Fisherman\\'s Wharf': 11, 'The Castro': 17, 'Golden Gate Park': 17, 'Embarcadero': 9, 'Russian Hill': 5, 'Alamo Square': 11, 'North Beach': 8},\n    'Alamo Square': {'Fisherman\\'s Wharf': 19, 'The Castro': 8, 'Golden Gate Park': 9, 'Embarcadero': 17, 'Russian Hill': 13, 'Nob Hill': 11, 'North Beach': 16},\n    'North Beach': {'Fisherman\\'s Wharf': 5, 'The Castro': 22, 'Golden Gate Park': 22, 'Embarcadero': 6, 'Russian Hill': 4, 'Nob Hill': 7, 'Alamo Square': 16}\n}\n\n# Constraints\nconstraints = {\n    'Laura': {'location': 'The Castro','start_time': '19:45', 'end_time': '21:30','required_time': 105},\n    'Daniel': {'location': 'Golden Gate Park','start_time': '21:15', 'end_time': '21:45','required_time': 15},\n    'William': {'location': 'Embarcadero','start_time': '07:00', 'end_time': '09:00','required_time': 90},\n    'Karen': {'location': 'Russian Hill','start_time': '14:30', 'end_time': '19:45','required_time': 30},\n    'Stephanie': {'location': 'Nob Hill','start_time': '07:30', 'end_time': '09:30','required_time': 45},\n    'Joseph': {'location': 'Alamo Square','start_time': '11:30', 'end_time': '12:45','required_time': 15},\n    'Kimberly': {'location': 'North Beach','start_time': '15:45', 'end_time': '19:15','required_time': 30}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Fisherman\\'s Wharf', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_604"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Barbara",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Barbara",
                        "start_time": "13:15",
                        "end_time": "14:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Russian Hill': {'Richmond District': 14},\n    'Richmond District': {'Russian Hill': 13}\n}\n\n# Constraints\nconstraints = {\n    'Barbara': {'location': 'Richmond District','start_time': '13:15', 'end_time': '18:15','required_time': 45}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Russian Hill', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_52"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kenneth",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Barbara",
                        "start_time": "12:00",
                        "end_time": "16:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kenneth",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Barbara",
                        "start_time": "13:53",
                        "end_time": "14:38"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Financial District': {'Chinatown': 5, 'Golden Gate Park': 23},\n    'Chinatown': {'Financial District': 5, 'Golden Gate Park': 23},\n    'Golden Gate Park': {'Financial District': 26, 'Chinatown': 23}\n}\n\n# Constraints\nconstraints = {\n    'Kenneth': {'location': 'Chinatown','start_time': '12:00', 'end_time': '15:00','required_time': 90},\n    'Barbara': {'location': 'Golden Gate Park','start_time': '08:15', 'end_time': '19:00','required_time': 45}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Financial District', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_137"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Sarah",
                        "start_time": "12:00",
                        "end_time": "20:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Nancy",
                        "start_time": "9:16",
                        "end_time": "10:46"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Stephanie",
                        "start_time": "10:59",
                        "end_time": "12:14"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Elizabeth",
                        "start_time": "12:33",
                        "end_time": "13:33"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Robert",
                        "start_time": "13:42",
                        "end_time": "14:27"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Melissa",
                        "start_time": "14:48",
                        "end_time": "15:18"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "James",
                        "start_time": "15:25",
                        "end_time": "17:25"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Sarah",
                        "start_time": "17:37",
                        "end_time": "18:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'The Castro': {'North Beach': 20, 'Golden Gate Park': 11, 'Embarcadero': 22, 'Haight-Ashbury': 6, 'Richmond District': 16, 'Nob Hill': 16, 'Marina District': 21, 'Presidio': 20, 'Union Square': 19, 'Financial District': 21},\n    'North Beach': {'The Castro': 23, 'Golden Gate Park': 22, 'Embarcadero': 6, 'Haight-Ashbury': 18, 'Richmond District': 18, 'Nob Hill': 7, 'Marina District': 9, 'Presidio': 17, 'Union Square': 7, 'Financial District': 8},\n    'Golden Gate Park': {'The Castro': 13, 'North Beach': 23, 'Embarcadero': 25, 'Haight-Ashbury': 7, 'Richmond District': 7, 'Nob Hill': 20, 'Marina District': 16, 'Presidio': 11, 'Union Square': 22, 'Financial District': 26},\n    'Embarcadero': {'The Castro': 25, 'North Beach': 5, 'Golden Gate Park': 25, 'Haight-Ashbury': 21, 'Richmond District': 21, 'Nob Hill': 10, 'Marina District': 12, 'Presidio': 20, 'Union Square': 10, 'Financial District': 5},\n    'Haight-Ashbury': {'The Castro': 6, 'North Beach': 19, 'Golden Gate Park': 7, 'Embarcadero': 20, 'Richmond District': 10, 'Nob Hill': 15, 'Marina District': 17, 'Presidio': 15, 'Union Square': 19, 'Financial District': 21},\n    'Richmond District': {'The Castro': 16, 'North Beach': 17, 'Golden Gate Park': 9, 'Embarcadero': 19, 'Haight-Ashbury': 10, 'Nob Hill': 17, 'Marina District': 9, 'Presidio': 7, 'Union Square': 21, 'Financial District': 22},\n    'Nob Hill': {'The Castro': 17, 'North Beach': 8, 'Golden Gate Park': 17, 'Embarcadero': 9, 'Haight-Ashbury': 13, 'Richmond District': 14, 'Marina District': 11, 'Presidio': 18, 'Union Square': 7, 'Financial District': 9},\n    'Marina District': {'The Castro': 22, 'North Beach': 11, 'Golden Gate Park': 18, 'Embarcadero': 14, 'Haight-Ashbury': 16, 'Richmond District': 11, 'Nob Hill': 12, 'Presidio': 10, 'Union Square': 16, 'Financial District': 17},\n    'Presidio': {'The Castro': 21, 'North Beach': 18, 'Golden Gate Park': 12, 'Embarcadero': 20, 'Haight-Ashbury': 15, 'Richmond District': 7, 'Nob Hill': 18, 'Marina District': 11, 'Union Square': 22, 'Financial District': 23},\n    'Union Square': {'The Castro': 17, 'North Beach': 10, 'Golden Gate Park': 22, 'Embarcadero': 11, 'Haight-Ashbury': 18, 'Richmond District': 20, 'Nob Hill': 9, 'Marina District': 18, 'Presidio': 24, 'Financial District': 9},\n    'Financial District': {'The Castro': 20, 'North Beach': 7, 'Golden Gate Park': 23, 'Embarcadero': 4, 'Haight-Ashbury': 19, 'Richmond District': 21, 'Nob Hill': 8, 'Marina District': 15, 'Presidio': 22, 'Union Square': 9}\n}\n\n# Constraints\nconstraints = {\n    'Steven': {'location': 'North Beach','start_time': '17:30', 'end_time': '20:30','required_time': 15},\n    'Sarah': {'location': 'Golden Gate Park','start_time': '17:00', 'end_time': '18:15','required_time': 75},\n    'Brian': {'location': 'Embarcadero','start_time': '14:15', 'end_time': '16:00','required_time': 105},\n    'Stephanie': {'location': 'Haight-Ashbury','start_time': '10:15', 'end_time': '12:15','required_time': 75},\n    'Melissa': {'location': 'Richmond District','start_time': '14:00', 'end_time': '19:30','required_time': 30},\n    'Nancy': {'location': 'Nob Hill','start_time': '08:15', 'end_time': '12:45','required_time': 90},\n    'David': {'location': 'Marina District','start_time': '11:15', 'end_time': '13:15','required_time': 120},\n    'James': {'location': 'Presidio','start_time': '15:00', 'end_time': '18:15','required_time': 120},\n    'Elizabeth': {'location': 'Union Square','start_time': '11:30', 'end_time': '21:00','required_time': 60},\n    'Robert': {'location': 'Financial District','start_time': '13:15', 'end_time': '15:15','required_time': 45}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('The Castro', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_911"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Margaret",
                        "start_time": "12:00",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jeffrey",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Deborah",
                        "start_time": "13:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Margaret",
                        "start_time": "16:30",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Ronald",
                        "start_time": "18:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "19:33",
                        "end_time": "19:48"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Nob Hill': {'Richmond District': 14, 'Financial District': 9, 'North Beach': 8, 'The Castro': 17, 'Golden Gate Park': 17},\n    'Richmond District': {'Nob Hill': 17, 'Financial District': 22, 'North Beach': 17, 'The Castro': 16, 'Golden Gate Park': 9},\n    'Financial District': {'Nob Hill': 8, 'Richmond District': 21, 'North Beach': 7, 'The Castro': 23, 'Golden Gate Park': 23},\n    'North Beach': {'Nob Hill': 7, 'Richmond District': 18, 'Financial District': 8, 'The Castro': 22, 'Golden Gate Park': 22},\n    'The Castro': {'Nob Hill': 16, 'Richmond District': 16, 'Financial District': 20, 'North Beach': 20, 'Golden Gate Park': 11},\n    'Golden Gate Park': {'Nob Hill': 20, 'Richmond District': 7, 'Financial District': 26, 'North Beach': 24, 'The Castro': 13}\n}\n\n# Constraints\nconstraints = {\n    'Emily': {'location': 'Richmond District','start_time': '19:00', 'end_time': '21:00','required_time': 15},\n    'Margaret': {'location': 'Financial District','start_time': '16:30', 'end_time': '20:15','required_time': 75},\n    'Ronald': {'location': 'North Beach','start_time': '18:30', 'end_time': '19:30','required_time': 45},\n    'Deborah': {'location': 'The Castro','start_time': '13:45', 'end_time': '21:15','required_time': 90},\n    'Jeffrey': {'location': 'Golden Gate Park','start_time': '11:15', 'end_time': '14:30','required_time': 120}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Nob Hill', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_433"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "David",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "12:00",
                        "end_time": "15:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "David",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "11:12",
                        "end_time": "12:27"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Robert",
                        "start_time": "12:42",
                        "end_time": "14:12"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Financial District': {'Fisherman\\'s Wharf': 10, 'Pacific Heights': 13, 'Mission District': 17},\n    'Fisherman\\'s Wharf': {'Financial District': 11, 'Pacific Heights': 12, 'Mission District': 22},\n    'Pacific Heights': {'Financial District': 13, 'Fisherman\\'s Wharf': 13, 'Mission District': 15},\n    'Mission District': {'Financial District': 17, 'Fisherman\\'s Wharf': 22, 'Pacific Heights': 16}\n}\n\n# Constraints\nconstraints = {\n    'David': {'location': 'Fisherman\\'s Wharf','start_time': '10:45', 'end_time': '15:30','required_time': 15},\n    'Timothy': {'location': 'Pacific Heights','start_time': '09:00', 'end_time': '15:30','required_time': 75},\n    'Robert': {'location': 'Mission District','start_time': '12:15', 'end_time': '19:45','required_time': 90}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Financial District', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_203"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "12:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "9:25",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Fisherman\\'s Wharf': {'Golden Gate Park': 25, 'Presidio': 17, 'Richmond District': 18},\n    'Golden Gate Park': {'Fisherman\\'s Wharf': 24, 'Presidio': 11, 'Richmond District': 7},\n    'Presidio': {'Fisherman\\'s Wharf': 19, 'Golden Gate Park': 12, 'Richmond District': 7},\n    'Richmond District': {'Fisherman\\'s Wharf': 18, 'Golden Gate Park': 9, 'Presidio': 7}\n}\n\n# Constraints\nconstraints = {\n    'Melissa': {'location': 'Golden Gate Park','start_time': '08:30', 'end_time': '20:00','required_time': 15},\n    'Nancy': {'location': 'Presidio','start_time': '19:45', 'end_time': '22:00','required_time': 105},\n    'Emily': {'location': 'Richmond District','start_time': '16:45', 'end_time': '22:00','required_time': 120}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Fisherman\\'s Wharf', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_224"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joshua",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jeffrey",
                        "start_time": "12:00",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Joseph",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Joseph",
                        "start_time": "9:15",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joshua",
                        "start_time": "11:04",
                        "end_time": "12:49"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jeffrey",
                        "start_time": "13:10",
                        "end_time": "14:25"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "14:43",
                        "end_time": "16:43"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Matthew",
                        "start_time": "17:05",
                        "end_time": "17:50"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Paul",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "19:41",
                        "end_time": "20:26"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Marina District': {'Embarcadero': 14, 'Bayview': 27, 'Union Square': 16, 'Chinatown': 15, 'Sunset District': 19, 'Golden Gate Park': 18, 'Financial District': 17, 'Haight-Ashbury': 16, 'Mission District': 20},\n    'Embarcadero': {'Marina District': 12, 'Bayview': 21, 'Union Square': 10, 'Chinatown': 7, 'Sunset District': 30, 'Golden Gate Park': 25, 'Financial District': 5, 'Haight-Ashbury': 21, 'Mission District': 20},\n    'Bayview': {'Marina District': 27, 'Embarcadero': 19, 'Union Square': 18, 'Chinatown': 19, 'Sunset District': 23, 'Golden Gate Park': 22, 'Financial District': 19, 'Haight-Ashbury': 19, 'Mission District': 13},\n    'Union Square': {'Marina District': 18, 'Embarcadero': 11, 'Bayview': 15, 'Chinatown': 7, 'Sunset District': 27, 'Golden Gate Park': 22, 'Financial District': 9, 'Haight-Ashbury': 18, 'Mission District': 14},\n    'Chinatown': {'Marina District': 12, 'Embarcadero': 5, 'Bayview': 20, 'Union Square': 7, 'Sunset District': 29, 'Golden Gate Park': 23, 'Financial District': 5, 'Haight-Ashbury': 19, 'Mission District': 17},\n    'Sunset District': {'Marina District': 21, 'Embarcadero': 30, 'Bayview': 22, 'Union Square': 30, 'Chinatown': 30, 'Golden Gate Park': 11, 'Financial District': 30, 'Haight-Ashbury': 15, 'Mission District': 25},\n    'Golden Gate Park': {'Marina District': 16, 'Embarcadero': 25, 'Bayview': 23, 'Union Square': 22, 'Chinatown': 23, 'Sunset District': 10, 'Financial District': 26, 'Haight-Ashbury': 7, 'Mission District': 17},\n    'Financial District': {'Marina District': 15, 'Embarcadero': 4, 'Bayview': 19, 'Union Square': 9, 'Chinatown': 5, 'Sunset District': 30, 'Golden Gate Park': 23, 'Haight-Ashbury': 19, 'Mission District': 17},\n    'Haight-Ashbury': {'Marina District': 17, 'Embarcadero': 20, 'Bayview': 18, 'Union Square': 19, 'Chinatown': 19, 'Sunset District': 15, 'Golden Gate Park': 7, 'Financial District': 21, 'Mission District': 11},\n    'Mission District': {'Marina District': 19, 'Embarcadero': 19, 'Bayview': 14, 'Union Square': 15, 'Chinatown': 16, 'Sunset District': 24, 'Golden Gate Park': 17, 'Financial District': 15, 'Haight-Ashbury': 12}\n}\n\n# Constraints\nconstraints = {\n    'Joshua': {'location': 'Embarcadero','start_time': '09:45', 'end_time': '18:00','required_time': 105},\n    'Jeffrey': {'location': 'Bayview','start_time': '09:45', 'end_time': '20:15','required_time': 75},\n    'Charles': {'location': 'Union Square','start_time': '10:45', 'end_time': '20:15','required_time': 120},\n    'Joseph': {'location': 'Chinatown','start_time': '07:00', 'end_time': '15:30','required_time': 60},\n    'Elizabeth': {'location': 'Sunset District','start_time': '09:00', 'end_time': '09:45','required_time': 45},\n    'Matthew': {'location': 'Golden Gate Park','start_time': '11:00', 'end_time': '19:30','required_time': 45},\n    'Carol': {'location': 'Financial District','start_time': '10:45', 'end_time': '11:15','required_time': 15},\n    'Paul': {'location': 'Haight-Ashbury','start_time': '19:15', 'end_time': '20:30','required_time': 15},\n    'Rebecca': {'location': 'Mission District','start_time': '17:00', 'end_time': '22:45','required_time': 45}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Marina District', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_813"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Emily",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "12:00",
                        "end_time": "18:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Emily",
                        "start_time": "16:00",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "19:00",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'North Beach': {'Union Square': 7, 'Russian Hill': 4},\n    'Union Square': {'North Beach': 10, 'Russian Hill': 13},\n    'Russian Hill': {'North Beach': 5, 'Union Square': 11}\n}\n\n# Constraints\nconstraints = {\n    'Emily': {'location': 'Union Square','start_time': '16:00', 'end_time': '17:15','required_time': 45},\n    'Margaret': {'location': 'Russian Hill','start_time': '19:00', 'end_time': '21:00','required_time': 120}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('North Beach', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_170"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Charles",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Robert",
                        "start_time": "12:00",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Karen",
                        "start_time": "15:15",
                        "end_time": "21:30"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Patricia",
                        "start_time": "21:30",
                        "end_time": "22:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Mark",
                        "start_time": "22:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Laura",
                        "start_time": "9:14",
                        "end_time": "10:59"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Charles",
                        "start_time": "11:30",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Margaret",
                        "start_time": "14:15",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Rebecca",
                        "start_time": "16:24",
                        "end_time": "17:54"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Melissa",
                        "start_time": "17:59",
                        "end_time": "18:29"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Patricia",
                        "start_time": "18:46",
                        "end_time": "19:31"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Robert",
                        "start_time": "19:46",
                        "end_time": "20:16"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Karen",
                        "start_time": "20:28",
                        "end_time": "21:28"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Marina District': {'Bayview': 27, 'Sunset District': 19, 'Richmond District': 11, 'Nob Hill': 12, 'Chinatown': 15, 'Haight-Ashbury': 16, 'North Beach': 11, 'Russian Hill': 8, 'Embarcadero': 14},\n    'Bayview': {'Marina District': 27, 'Sunset District': 23, 'Richmond District': 25, 'Nob Hill': 20, 'Chinatown': 19, 'Haight-Ashbury': 19, 'North Beach': 22, 'Russian Hill': 23, 'Embarcadero': 19},\n    'Sunset District': {'Marina District': 21, 'Bayview': 22, 'Richmond District': 12, 'Nob Hill': 27, 'Chinatown': 30, 'Haight-Ashbury': 15, 'North Beach': 28, 'Russian Hill': 24, 'Embarcadero': 30},\n    'Richmond District': {'Marina District': 9, 'Bayview': 27, 'Sunset District': 11, 'Nob Hill': 17, 'Chinatown': 20, 'Haight-Ashbury': 10, 'North Beach': 17, 'Russian Hill': 13, 'Embarcadero': 19},\n    'Nob Hill': {'Marina District': 11, 'Bayview': 19, 'Sunset District': 24, 'Richmond District': 14, 'Chinatown': 6, 'Haight-Ashbury': 13, 'North Beach': 8, 'Russian Hill': 5, 'Embarcadero': 9},\n    'Chinatown': {'Marina District': 12, 'Bayview': 20, 'Sunset District': 29, 'Richmond District': 20, 'Nob Hill': 9, 'Haight-Ashbury': 19, 'North Beach': 3, 'Russian Hill': 7, 'Embarcadero': 5},\n    'Haight-Ashbury': {'Marina District': 17, 'Bayview': 18, 'Sunset District': 15, 'Richmond District': 10, 'Nob Hill': 15, 'Chinatown': 19, 'North Beach': 19, 'Russian Hill': 17, 'Embarcadero': 20},\n    'North Beach': {'Marina District': 9, 'Bayview': 25, 'Sunset District': 27, 'Richmond District': 18, 'Nob Hill': 7, 'Chinatown': 6, 'Haight-Ashbury': 18, 'Russian Hill': 4, 'Embarcadero': 6},\n    'Russian Hill': {'Marina District': 7, 'Bayview': 23, 'Sunset District': 23, 'Richmond District': 14, 'Nob Hill': 5, 'Chinatown': 9, 'Haight-Ashbury': 17, 'North Beach': 5, 'Embarcadero': 8},\n    'Embarcadero': {'Marina District': 12, 'Bayview': 21, 'Sunset District': 30, 'Richmond District': 21, 'Nob Hill': 10, 'Chinatown': 7, 'Haight-Ashbury': 21, 'North Beach': 5, 'Russian Hill': 8}\n}\n\n# Constraints\nconstraints = {\n    'Charles': {'location': 'Bayview','start_time': '11:30', 'end_time': '14:30','required_time': 45},\n    'Robert': {'location': 'Sunset District','start_time': '16:45', 'end_time': '21:00','required_time': 30},\n    'Karen': {'location': 'Richmond District','start_time': '19:15', 'end_time': '21:30','required_time': 60},\n    'Rebecca': {'location': 'Nob Hill','start_time': '16:15', 'end_time': '20:30','required_time': 90},\n    'Margaret': {'location': 'Chinatown','start_time': '14:15', 'end_time': '20:45','required_time': 120},\n    'Patricia': {'location': 'Haight-Ashbury','start_time': '14:30', 'end_time': '20:30','required_time': 45},\n    'Mark': {'location': 'North Beach','start_time': '14:00', 'end_time': '18:30','required_time': 105},\n    'Melissa': {'location': 'Russian Hill','start_time': '13:00', 'end_time': '20:45','required_time': 30},\n    'Laura': {'location': 'Embarcadero','start_time': '07:45', 'end_time': '13:15','required_time': 105}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Marina District', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_892"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Betty",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "David",
                        "start_time": "12:00",
                        "end_time": "22:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "22:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Betty",
                        "start_time": "10:15",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "David",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "14:48",
                        "end_time": "16:48"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Embarcadero': {'Presidio': 20, 'Richmond District': 21, 'Fisherman\\'s Wharf': 6},\n    'Presidio': {'Embarcadero': 20, 'Richmond District': 7, 'Fisherman\\'s Wharf': 19},\n    'Richmond District': {'Embarcadero': 19, 'Presidio': 7, 'Fisherman\\'s Wharf': 18},\n    'Fisherman\\'s Wharf': {'Embarcadero': 8, 'Presidio': 17, 'Richmond District': 18}\n}\n\n# Constraints\nconstraints = {\n    'Betty': {'location': 'Presidio','start_time': '10:15', 'end_time': '21:30','required_time': 45},\n    'David': {'location': 'Richmond District','start_time': '13:00', 'end_time': '20:15','required_time': 90},\n    'Barbara': {'location': 'Fisherman\\'s Wharf','start_time': '09:15', 'end_time': '20:15','required_time': 120}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Embarcadero', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_258"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Kevin",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "11:00",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Emily",
                        "start_time": "16:15",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Mary",
                        "start_time": "17:30",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "18:26",
                        "end_time": "19:41"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "20:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Presidio': {'Pacific Heights': 11, 'Golden Gate Park': 12, 'Fisherman\\'s Wharf': 19, 'Marina District': 11, 'Alamo Square': 19, 'Sunset District': 15, 'Nob Hill': 18, 'North Beach': 18},\n    'Pacific Heights': {'Presidio': 11, 'Golden Gate Park': 15, 'Fisherman\\'s Wharf': 13, 'Marina District': 6, 'Alamo Square': 10, 'Sunset District': 21, 'Nob Hill': 8, 'North Beach': 9},\n    'Golden Gate Park': {'Presidio': 11, 'Pacific Heights': 16, 'Fisherman\\'s Wharf': 24, 'Marina District': 16, 'Alamo Square': 9, 'Sunset District': 10, 'Nob Hill': 20, 'North Beach': 23},\n    'Fisherman\\'s Wharf': {'Presidio': 17, 'Pacific Heights': 12, 'Golden Gate Park': 25, 'Marina District': 9, 'Alamo Square': 21, 'Sunset District': 27, 'Nob Hill': 11, 'North Beach': 6},\n    'Marina District': {'Presidio': 10, 'Pacific Heights': 7, 'Golden Gate Park': 18, 'Fisherman\\'s Wharf': 10, 'Alamo Square': 15, 'Sunset District': 19, 'Nob Hill': 12, 'North Beach': 11},\n    'Alamo Square': {'Presidio': 17, 'Pacific Heights': 10, 'Golden Gate Park': 9, 'Fisherman\\'s Wharf': 19, 'Marina District': 15, 'Sunset District': 16, 'Nob Hill': 11, 'North Beach': 15},\n    'Sunset District': {'Presidio': 16, 'Pacific Heights': 21, 'Golden Gate Park': 11, 'Fisherman\\'s Wharf': 29, 'Marina District': 21, 'Alamo Square': 17, 'Nob Hill': 27, 'North Beach': 28},\n    'Nob Hill': {'Presidio': 17, 'Pacific Heights': 8, 'Golden Gate Park': 17, 'Fisherman\\'s Wharf': 10, 'Marina District': 11, 'Alamo Square': 11, 'Sunset District': 24, 'North Beach': 8},\n    'North Beach': {'Presidio': 17, 'Pacific Heights': 8, 'Golden Gate Park': 22, 'Fisherman\\'s Wharf': 5, 'Marina District': 9, 'Alamo Square': 16, 'Sunset District': 27, 'Nob Hill': 7}\n}\n\n# Constraints\nconstraints = {\n    'Kevin': {'location': 'Pacific Heights','start_time': '07:15', 'end_time': '08:45','required_time': 90},\n    'Michelle': {'location': 'Golden Gate Park','start_time': '20:00', 'end_time': '21:00','required_time': 15},\n    'Emily': {'location': 'Fisherman\\'s Wharf','start_time': '16:15', 'end_time': '19:00','required_time': 30},\n    'Mark': {'location': 'Marina District','start_time': '18:15', 'end_time': '20:45','required_time': 75},\n    'Barbara': {'location': 'Alamo Square','start_time': '17:00', 'end_time': '19:00','required_time': 120},\n    'Laura': {'location': 'Sunset District','start_time': '19:00', 'end_time': '21:15','required_time': 75},\n    'Mary': {'location': 'Nob Hill','start_time': '17:30', 'end_time': '19:00','required_time': 45},\n    'Helen': {'location': 'North Beach','start_time': '11:00', 'end_time': '12:15','required_time': 45}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Presidio', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_700"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Betty",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Karen",
                        "start_time": "12:00",
                        "end_time": "22:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "22:00",
                        "end_time": "15:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Karen",
                        "start_time": "9:25",
                        "end_time": "9:55"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "10:06",
                        "end_time": "11:51"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Betty",
                        "start_time": "19:45",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Bayview': {'Embarcadero': 19, 'Fisherman\\'s Wharf': 25, 'Financial District': 19},\n    'Embarcadero': {'Bayview': 21, 'Fisherman\\'s Wharf': 6, 'Financial District': 5},\n    'Fisherman\\'s Wharf': {'Bayview': 26, 'Embarcadero': 8, 'Financial District': 11},\n    'Financial District': {'Bayview': 19, 'Embarcadero': 4, 'Fisherman\\'s Wharf': 10}\n}\n\n# Constraints\nconstraints = {\n    'Betty': {'location': 'Embarcadero','start_time': '19:45', 'end_time': '21:45','required_time': 15},\n    'Karen': {'location': 'Fisherman\\'s Wharf','start_time': '08:45', 'end_time': '15:00','required_time': 30},\n    'Anthony': {'location': 'Financial District','start_time': '09:15', 'end_time': '21:30','required_time': 105}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Bayview', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_263"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Sarah",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Richard",
                        "start_time": "12:00",
                        "end_time": "19:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Sarah",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Richard",
                        "start_time": "11:45",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "13:26",
                        "end_time": "15:26"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "18:15",
                        "end_time": "19:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Richmond District': {'Sunset District': 11, 'Haight-Ashbury': 10, 'Mission District': 20, 'Golden Gate Park': 9},\n    'Sunset District': {'Richmond District': 12, 'Haight-Ashbury': 15, 'Mission District': 24, 'Golden Gate Park': 11},\n    'Haight-Ashbury': {'Richmond District': 10, 'Sunset District': 15, 'Mission District': 11, 'Golden Gate Park': 7},\n    'Mission District': {'Richmond District': 20, 'Sunset District': 24, 'Haight-Ashbury': 12, 'Golden Gate Park': 17},\n    'Golden Gate Park': {'Richmond District': 7, 'Sunset District': 10, 'Haight-Ashbury': 7, 'Mission District': 17}\n}\n\n# Constraints\nconstraints = {\n    'Sarah': {'location': 'Sunset District','start_time': '10:45', 'end_time': '19:00','required_time': 30},\n    'Richard': {'location': 'Haight-Ashbury','start_time': '11:45', 'end_time': '15:45','required_time': 90},\n    'Elizabeth': {'location': 'Mission District','start_time': '11:00', 'end_time': '17:15','required_time': 120},\n    'Michelle': {'location': 'Golden Gate Park','start_time': '18:15', 'end_time': '20:45','required_time': 90}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Richmond District', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_312"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Ronald",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Sarah",
                        "start_time": "12:00",
                        "end_time": "18:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Ronald",
                        "start_time": "10:00",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Helen",
                        "start_time": "13:30",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Joshua",
                        "start_time": "15:47",
                        "end_time": "17:17"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Margaret",
                        "start_time": "17:32",
                        "end_time": "18:32"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Pacific Heights': {'Nob Hill': 8, 'Russian Hill': 7, 'The Castro': 16, 'Sunset District': 21, 'Haight-Ashbury': 11},\n    'Nob Hill': {'Pacific Heights': 8, 'Russian Hill': 5, 'The Castro': 17, 'Sunset District': 25, 'Haight-Ashbury': 13},\n    'Russian Hill': {'Pacific Heights': 7, 'Nob Hill': 5, 'The Castro': 21, 'Sunset District': 23, 'Haight-Ashbury': 17},\n    'The Castro': {'Pacific Heights': 16, 'Nob Hill': 16, 'Russian Hill': 18, 'Sunset District': 17, 'Haight-Ashbury': 6},\n    'Sunset District': {'Pacific Heights': 21, 'Nob Hill': 27, 'Russian Hill': 24, 'The Castro': 17, 'Haight-Ashbury': 15},\n    'Haight-Ashbury': {'Pacific Heights': 12, 'Nob Hill': 15, 'Russian Hill': 17, 'The Castro': 6, 'Sunset District': 15}\n}\n\n# Constraints\nconstraints = {\n    'Ronald': {'location': 'Nob Hill','start_time': '10:00', 'end_time': '17:00','required_time': 105},\n    'Sarah': {'location': 'Russian Hill','start_time': '07:15', 'end_time': '09:30','required_time': 45},\n    'Helen': {'location': 'The Castro','start_time': '13:30', 'end_time': '17:00','required_time': 120},\n    'Joshua': {'location': 'Sunset District','start_time': '14:15', 'end_time': '20:30','required_time': 90},\n    'Margaret': {'location': 'Haight-Ashbury','start_time': '10:15', 'end_time': '22:00','required_time': 60}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Pacific Heights', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_488"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Jessica",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sandra",
                        "start_time": "12:00",
                        "end_time": "19:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "16:00",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Jessica",
                        "start_time": "16:45",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sandra",
                        "start_time": "18:30",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Bayview': {'Embarcadero': 19, 'Richmond District': 25, 'Fisherman\\'s Wharf': 25},\n    'Embarcadero': {'Bayview': 21, 'Richmond District': 21, 'Fisherman\\'s Wharf': 6},\n    'Richmond District': {'Bayview': 26, 'Embarcadero': 19, 'Fisherman\\'s Wharf': 18},\n    'Fisherman\\'s Wharf': {'Bayview': 26, 'Embarcadero': 8, 'Richmond District': 18}\n}\n\n# Constraints\nconstraints = {\n    'Jessica': {'location': 'Embarcadero','start_time': '16:45', 'end_time': '19:00','required_time': 30},\n    'Sandra': {'location': 'Richmond District','start_time': '18:30', 'end_time': '21:45','required_time': 120},\n    'Jason': {'location': 'Fisherman\\'s Wharf','start_time': '16:00', 'end_time': '16:45','required_time': 30}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Bayview', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_215"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Carol",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Laura",
                        "start_time": "12:00",
                        "end_time": "23:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "23:30",
                        "end_time": "22:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Elizabeth",
                        "start_time": "22:30",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Deborah",
                        "start_time": "15:15",
                        "end_time": "22:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Jason",
                        "start_time": "22:45",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Steven",
                        "start_time": "16:45",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "9:13",
                        "end_time": "10:28"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Laura",
                        "start_time": "11:45",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Deborah",
                        "start_time": "13:05",
                        "end_time": "14:50"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Steven",
                        "start_time": "15:03",
                        "end_time": "17:03"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Jason",
                        "start_time": "17:08",
                        "end_time": "18:38"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Elizabeth",
                        "start_time": "18:44",
                        "end_time": "19:59"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Carol",
                        "start_time": "21:30",
                        "end_time": "22:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Golden Gate Park': {'Haight-Ashbury': 7, 'Fisherman\\'s Wharf': 24, 'The Castro': 13, 'Chinatown': 23, 'Alamo Square': 10, 'North Beach': 24, 'Russian Hill': 19},\n    'Haight-Ashbury': {'Golden Gate Park': 7, 'Fisherman\\'s Wharf': 23, 'The Castro': 6, 'Chinatown': 19, 'Alamo Square': 5, 'North Beach': 19, 'Russian Hill': 17},\n    'Fisherman\\'s Wharf': {'Golden Gate Park': 25, 'Haight-Ashbury': 22, 'The Castro': 26, 'Chinatown': 12, 'Alamo Square': 20, 'North Beach': 6, 'Russian Hill': 7},\n    'The Castro': {'Golden Gate Park': 11, 'Haight-Ashbury': 6, 'Fisherman\\'s Wharf': 24, 'Chinatown': 20, 'Alamo Square': 8, 'North Beach': 20, 'Russian Hill': 18},\n    'Chinatown': {'Golden Gate Park': 23, 'Haight-Ashbury': 19, 'Fisherman\\'s Wharf': 8, 'The Castro': 22, 'Alamo Square': 17, 'North Beach': 3, 'Russian Hill': 7},\n    'Alamo Square': {'Golden Gate Park': 9, 'Haight-Ashbury': 5, 'Fisherman\\'s Wharf': 19, 'The Castro': 8, 'Chinatown': 16, 'North Beach': 15, 'Russian Hill': 13},\n    'North Beach': {'Golden Gate Park': 22, 'Haight-Ashbury': 18, 'Fisherman\\'s Wharf': 5, 'The Castro': 22, 'Chinatown': 6, 'Alamo Square': 16, 'Russian Hill': 4},\n    'Russian Hill': {'Golden Gate Park': 21, 'Haight-Ashbury': 17, 'Fisherman\\'s Wharf': 7, 'The Castro': 21, 'Chinatown': 9, 'Alamo Square': 15, 'North Beach': 5}\n}\n\n# Constraints\nconstraints = {\n    'Carol': {'location': 'Haight-Ashbury','start_time': '21:30', 'end_time': '22:30','required_time': 60},\n    'Laura': {'location': 'Fisherman\\'s Wharf','start_time': '11:45', 'end_time': '21:30','required_time': 60},\n    'Karen': {'location': 'The Castro','start_time': '07:15', 'end_time': '14:00','required_time': 75},\n    'Elizabeth': {'location': 'Chinatown','start_time': '12:15', 'end_time': '21:30','required_time': 75},\n    'Deborah': {'location': 'Alamo Square','start_time': '12:00', 'end_time': '15:00','required_time': 105},\n    'Jason': {'location': 'North Beach','start_time': '14:45', 'end_time': '19:00','required_time': 90},\n    'Steven': {'location': 'Russian Hill','start_time': '14:45', 'end_time': '19:30','required_time': 120}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Golden Gate Park', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_624"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Stephanie",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Lisa",
                        "start_time": "12:00",
                        "end_time": "22:30"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Melissa",
                        "start_time": "22:30",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Betty",
                        "start_time": "17:30",
                        "end_time": "23:45"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sarah",
                        "start_time": "23:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Daniel",
                        "start_time": "15:15",
                        "end_time": "21:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joshua",
                        "start_time": "21:15",
                        "end_time": "22:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "22:45",
                        "end_time": "14:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Lisa",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joshua",
                        "start_time": "11:19",
                        "end_time": "11:34"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joseph",
                        "start_time": "11:49",
                        "end_time": "12:34"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Betty",
                        "start_time": "12:45",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "John",
                        "start_time": "14:07",
                        "end_time": "14:52"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Stephanie",
                        "start_time": "15:30",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Melissa",
                        "start_time": "17:00",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Daniel",
                        "start_time": "19:07",
                        "end_time": "20:07"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "20:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Embarcadero': {'Fisherman\\'s Wharf': 6, 'Financial District': 5, 'Russian Hill': 8, 'Marina District': 12, 'Richmond District': 21, 'Pacific Heights': 11, 'Haight-Ashbury': 21, 'Presidio': 20, 'Nob Hill': 10, 'The Castro': 25},\n    'Fisherman\\'s Wharf': {'Embarcadero': 8, 'Financial District': 11, 'Russian Hill': 7, 'Marina District': 9, 'Richmond District': 18, 'Pacific Heights': 12, 'Haight-Ashbury': 22, 'Presidio': 17, 'Nob Hill': 11, 'The Castro': 27},\n    'Financial District': {'Embarcadero': 4, 'Fisherman\\'s Wharf': 10, 'Russian Hill': 11, 'Marina District': 15, 'Richmond District': 21, 'Pacific Heights': 13, 'Haight-Ashbury': 19, 'Presidio': 22, 'Nob Hill': 8, 'The Castro': 20},\n    'Russian Hill': {'Embarcadero': 8, 'Fisherman\\'s Wharf': 7, 'Financial District': 11, 'Marina District': 7, 'Richmond District': 14, 'Pacific Heights': 7, 'Haight-Ashbury': 17, 'Presidio': 14, 'Nob Hill': 5, 'The Castro': 21},\n    'Marina District': {'Embarcadero': 14, 'Fisherman\\'s Wharf': 10, 'Financial District': 17, 'Russian Hill': 8, 'Richmond District': 11, 'Pacific Heights': 7, 'Haight-Ashbury': 16, 'Presidio': 10, 'Nob Hill': 12, 'The Castro': 22},\n    'Richmond District': {'Embarcadero': 19, 'Fisherman\\'s Wharf': 18, 'Financial District': 22, 'Russian Hill': 13, 'Marina District': 9, 'Pacific Heights': 10, 'Haight-Ashbury': 10, 'Presidio': 7, 'Nob Hill': 17, 'The Castro': 16},\n    'Pacific Heights': {'Embarcadero': 10, 'Fisherman\\'s Wharf': 13, 'Financial District': 13, 'Russian Hill': 7, 'Marina District': 6, 'Richmond District': 12, 'Haight-Ashbury': 11, 'Presidio': 11, 'Nob Hill': 8, 'The Castro': 16},\n    'Haight-Ashbury': {'Embarcadero': 20, 'Fisherman\\'s Wharf': 23, 'Financial District': 21, 'Russian Hill': 17, 'Marina District': 17, 'Richmond District': 10, 'Pacific Heights': 12, 'Presidio': 15, 'Nob Hill': 15, 'The Castro': 6},\n    'Presidio': {'Embarcadero': 20, 'Fisherman\\'s Wharf': 19, 'Financial District': 23, 'Russian Hill': 14, 'Marina District': 11, 'Richmond District': 7, 'Pacific Heights': 11, 'Haight-Ashbury': 15, 'Nob Hill': 18, 'The Castro': 21},\n    'Nob Hill': {'Embarcadero': 9, 'Fisherman\\'s Wharf': 10, 'Financial District': 9, 'Russian Hill': 5, 'Marina District': 11, 'Richmond District': 14, 'Pacific Heights': 8, 'Haight-Ashbury': 13, 'Presidio': 17, 'The Castro': 17},\n    'The Castro': {'Embarcadero': 22, 'Fisherman\\'s Wharf': 24, 'Financial District': 21, 'Russian Hill': 18, 'Marina District': 21, 'Richmond District': 16, 'Pacific Heights': 16, 'Haight-Ashbury': 6, 'Presidio': 20, 'Nob Hill': 16}\n}\n\n# Constraints\nconstraints = {\n    'Stephanie': {'location': 'Fisherman\\'s Wharf','start_time': '15:30', 'end_time': '22:00','required_time': 30},\n    'Lisa': {'location': 'Financial District','start_time': '10:45', 'end_time': '17:15','required_time': 15},\n    'Melissa': {'location': 'Russian Hill','start_time': '17:00', 'end_time': '21:45','required_time': 120},\n    'Betty': {'location': 'Marina District','start_time': '10:45', 'end_time': '14:15','required_time': 60},\n    'Sarah': {'location': 'Richmond District','start_time': '16:15', 'end_time': '19:30','required_time': 105},\n    'Daniel': {'location': 'Pacific Heights','start_time': '18:30', 'end_time': '21:45','required_time': 60},\n    'Joshua': {'location': 'Haight-Ashbury','start_time': '09:00', 'end_time': '14:30','required_time': 15},\n    'Joseph': {'location': 'Presidio','start_time': '07:00', 'end_time': '13:00','required_time': 45},\n    'Andrew': {'location': 'Nob Hill','start_time': '19:45', 'end_time': '22:00','required_time': 105},\n    'John': {'location': 'The Castro','start_time': '13:15', 'end_time': '20:45','required_time': 45}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Embarcadero', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_978"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Mary",
                        "start_time": "9:00",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Joseph",
                        "start_time": "10:45",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Sarah",
                        "start_time": "12:45",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Thomas",
                        "start_time": "14:15",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Daniel",
                        "start_time": "14:30",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Richard",
                        "start_time": "14:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Mark",
                        "start_time": "15:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "David",
                        "start_time": "17:15",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "13:15",
                        "end_time": "15:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Kenneth",
                        "start_time": "11:15",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Sarah",
                        "start_time": "12:04",
                        "end_time": "13:34"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Daniel",
                        "start_time": "13:49",
                        "end_time": "14:04"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Richard",
                        "start_time": "14:15",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "14:52",
                        "end_time": "16:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Thomas",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mary",
                        "start_time": "20:00",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Nob Hill\": {\n        \"Embarcadero\": 9,\n        \"The Castro\": 17,\n        \"Haight-Ashbury\": 13,\n        \"Union Square\": 7,\n        \"North Beach\": 8,\n        \"Pacific Heights\": 8,\n        \"Chinatown\": 6,\n        \"Golden Gate Park\": 17,\n        \"Marina District\": 11,\n        \"Russian Hill\": 5\n    },\n    \"Embarcadero\": {\n        \"Nob Hill\": 10,\n        \"The Castro\": 25,\n        \"Haight-Ashbury\": 21,\n        \"Union Square\": 10,\n        \"North Beach\": 5,\n        \"Pacific Heights\": 11,\n        \"Chinatown\": 7,\n        \"Golden Gate Park\": 25,\n        \"Marina District\": 12,\n        \"Russian Hill\": 8\n    },\n    \"The Castro\": {\n        \"Nob Hill\": 16,\n        \"Embarcadero\": 22,\n        \"Haight-Ashbury\": 6,\n        \"Union Square\": 19,\n        \"North Beach\": 20,\n        \"Pacific Heights\": 16,\n        \"Chinatown\": 22,\n        \"Golden Gate Park\": 11,\n        \"Marina District\": 21,\n        \"Russian Hill\": 18\n    },\n    \"Haight-Ashbury\": {\n        \"Nob Hill\": 15,\n        \"Embarcadero\": 20,\n        \"The Castro\": 6,\n        \"Union Square\": 19,\n        \"North Beach\": 19,\n        \"Pacific Heights\": 12,\n        \"Chinatown\": 19,\n        \"Golden Gate Park\": 7,\n        \"Marina District\": 17,\n        \"Russian Hill\": 17\n    },\n    \"Union Square\": {\n        \"Nob Hill\": 9,\n        \"Embarcadero\": 11,\n        \"The Castro\": 17,\n        \"Haight-Ashbury\": 18,\n        \"North Beach\": 10,\n        \"Pacific Heights\": 15,\n        \"Chinatown\": 7,\n        \"Golden Gate Park\": 22,\n        \"Marina District\": 18,\n        \"Russian Hill\": 13\n    },\n    \"North Beach\": {\n        \"Nob Hill\": 7,\n        \"Embarcadero\": 6,\n        \"The Castro\": 23,\n        \"Haight-Ashbury\": 18,\n        \"Union Square\": 7,\n        \"Pacific Heights\": 8,\n        \"Chinatown\": 6,\n        \"Golden Gate Park\": 22,\n        \"Marina District\": 9,\n        \"Russian Hill\": 4\n    },\n    \"Pacific Heights\": {\n        \"Nob Hill\": 8,\n        \"Embarcadero\": 10,\n        \"The Castro\": 16,\n        \"Haight-Ashbury\": 11,\n        \"Union Square\": 12,\n        \"North Beach\": 9,\n        \"Chinatown\": 11,\n        \"Golden Gate Park\": 15,\n        \"Marina District\": 6,\n        \"Russian Hill\": 7\n    },\n    \"Chinatown\": {\n        \"Nob Hill\": 9,\n        \"Embarcadero\": 5,\n        \"The Castro\": 22,\n        \"Haight-Ashbury\": 19,\n        \"Union Square\": 7,\n        \"North Beach\": 3,\n        \"Pacific Heights\": 10,\n        \"Golden Gate Park\": 23,\n        \"Marina District\": 12,\n        \"Russian Hill\": 7\n    },\n    \"Golden Gate Park\": {\n        \"Nob Hill\": 20,\n        \"Embarcadero\": 25,\n        \"The Castro\": 13,\n        \"Haight-Ashbury\": 7,\n        \"Union Square\": 22,\n        \"North Beach\": 23,\n        \"Pacific Heights\": 16,\n        \"Chinatown\": 23,\n        \"Marina District\": 16,\n        \"Russian Hill\": 19\n    },\n    \"Marina District\": {\n        \"Nob Hill\": 12,\n        \"Embarcadero\": 14,\n        \"The Castro\": 22,\n        \"Haight-Ashbury\": 16,\n        \"Union Square\": 16,\n        \"North Beach\": 11,\n        \"Pacific Heights\": 7,\n        \"Chinatown\": 15,\n        \"Golden Gate Park\": 18,\n        \"Russian Hill\": 8\n    },\n    \"Russian Hill\": {\n        \"Nob Hill\": 5,\n        \"Embarcadero\": 8,\n        \"The Castro\": 21,\n        \"Haight-Ashbury\": 17,\n        \"Union Square\": 10,\n        \"North Beach\": 5,\n        \"Pacific Heights\": 7,\n        \"Chinatown\": 9,\n        \"Golden Gate Park\": 21,\n        \"Marina District\": 7\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Mary\": {\"start\": datetime(2023, 1, 1, 20, 0), \"end\": datetime(2023, 1, 1, 21, 15), \"min_time\": 75},\n    \"Kenneth\": {\"start\": datetime(2023, 1, 1, 11, 15), \"end\": datetime(2023, 1, 1, 19, 15), \"min_time\": 30},\n    \"Joseph\": {\"start\": datetime(2023, 1, 1, 20, 0), \"end\": datetime(2023, 1, 1, 22, 0), \"min_time\": 120},\n    \"Sarah\": {\"start\": datetime(2023, 1, 1, 11, 45), \"end\": datetime(2023, 1, 1, 14, 30), \"min_time\": 90},\n    \"Thomas\": {\"start\": datetime(2023, 1, 1, 19, 15), \"end\": datetime(2023, 1, 1, 19, 45), \"min_time\": 15},\n    \"Daniel\": {\"start\": datetime(2023, 1, 1, 13, 45), \"end\": datetime(2023, 1, 1, 20, 30), \"min_time\": 15},\n    \"Richard\": {\"start\": datetime(2023, 1, 1, 8, 0), \"end\": datetime(2023, 1, 1, 18, 45), \"min_time\": 30},\n    \"Mark\": {\"start\": datetime(2023, 1, 1, 17, 30), \"end\": datetime(2023, 1, 1, 21, 30), \"min_time\": 120},\n    \"David\": {\"start\": datetime(2023, 1, 1, 20, 0), \"end\": datetime(2023, 1, 1, 21, 0), \"min_time\": 60},\n    \"Karen\": {\"start\": datetime(2023, 1, 1, 13, 15), \"end\": datetime(2023, 1, 1, 18, 30), \"min_time\": 120}\n}\n\n# Define start location and time\nstart_location = \"Nob Hill\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Mary\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Embarcadero\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Nob Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Embarcadero\"))\n        elif person == \"Kenneth\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"The Castro\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Nob Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"The Castro\"))\n        elif person == \"Joseph\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Haight-Ashbury\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Nob Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Haight-Ashbury\"))\n        elif person == \"Sarah\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Union Square\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Nob Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Union Square\"))\n        elif person == \"Thomas\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"North Beach\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Nob Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"North Beach\"))\n        elif person == \"Daniel\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Pacific Heights\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Nob Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Pacific Heights\"))\n        elif person == \"Richard\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Chinatown\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Nob Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Chinatown\"))\n        elif person == \"Mark\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Golden Gate Park\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Nob Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Golden Gate Park\"))\n        elif person == \"David\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Marina District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Nob Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Marina District\"))\n        elif person == \"Karen\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Russian Hill\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Nob Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Russian Hill\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_934"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Rebecca",
                        "start_time": "9:00",
                        "end_time": "10:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Linda",
                        "start_time": "10:00",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Elizabeth",
                        "start_time": "10:30",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "William",
                        "start_time": "12:15",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "12:45",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Mark",
                        "start_time": "13:30",
                        "end_time": "14:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "William",
                        "start_time": "13:15",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Robert",
                        "start_time": "14:15",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Mark",
                        "start_time": "15:19",
                        "end_time": "16:34"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Linda",
                        "start_time": "16:57",
                        "end_time": "17:27"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Elizabeth",
                        "start_time": "17:42",
                        "end_time": "19:27"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Rebecca",
                        "start_time": "19:42",
                        "end_time": "20:42"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"The Castro\": {\n        \"Presidio\": 20,\n        \"Sunset District\": 17,\n        \"Haight-Ashbury\": 6,\n        \"Mission District\": 7,\n        \"Golden Gate Park\": 11,\n        \"Russian Hill\": 18\n    },\n    \"Presidio\": {\n        \"The Castro\": 21,\n        \"Sunset District\": 15,\n        \"Haight-Ashbury\": 15,\n        \"Mission District\": 26,\n        \"Golden Gate Park\": 12,\n        \"Russian Hill\": 14\n    },\n    \"Sunset District\": {\n        \"The Castro\": 17,\n        \"Presidio\": 16,\n        \"Haight-Ashbury\": 15,\n        \"Mission District\": 24,\n        \"Golden Gate Park\": 11,\n        \"Russian Hill\": 24\n    },\n    \"Haight-Ashbury\": {\n        \"The Castro\": 6,\n        \"Presidio\": 15,\n        \"Sunset District\": 15,\n        \"Mission District\": 11,\n        \"Golden Gate Park\": 7,\n        \"Russian Hill\": 17\n    },\n    \"Mission District\": {\n        \"The Castro\": 7,\n        \"Presidio\": 25,\n        \"Sunset District\": 24,\n        \"Haight-Ashbury\": 12,\n        \"Golden Gate Park\": 17,\n        \"Russian Hill\": 15\n    },\n    \"Golden Gate Park\": {\n        \"The Castro\": 13,\n        \"Presidio\": 11,\n        \"Sunset District\": 10,\n        \"Haight-Ashbury\": 7,\n        \"Mission District\": 17,\n        \"Russian Hill\": 19\n    },\n    \"Russian Hill\": {\n        \"The Castro\": 21,\n        \"Presidio\": 14,\n        \"Sunset District\": 23,\n        \"Haight-Ashbury\": 17,\n        \"Mission District\": 16,\n        \"Golden Gate Park\": 21\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Rebecca\": {\"start\": datetime(2023, 1, 1, 18, 15), \"end\": datetime(2023, 1, 1, 20, 45), \"min_time\": 60},\n    \"Linda\": {\"start\": datetime(2023, 1, 1, 15, 30), \"end\": datetime(2023, 1, 1, 19, 45), \"min_time\": 30},\n    \"Elizabeth\": {\"start\": datetime(2023, 1, 1, 17, 15), \"end\": datetime(2023, 1, 1, 19, 30), \"min_time\": 105},\n    \"William\": {\"start\": datetime(2023, 1, 1, 13, 15), \"end\": datetime(2023, 1, 1, 19, 30), \"min_time\": 30},\n    \"Robert\": {\"start\": datetime(2023, 1, 1, 14, 15), \"end\": datetime(2023, 1, 1, 21, 30), \"min_time\": 45},\n    \"Mark\": {\"start\": datetime(2023, 1, 1, 10, 0), \"end\": datetime(2023, 1, 1, 21, 15), \"min_time\": 75}\n}\n\n# Define start location and time\nstart_location = \"The Castro\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Rebecca\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Presidio\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Presidio\"))\n        elif person == \"Linda\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Sunset District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Sunset District\"))\n        elif person == \"Elizabeth\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Haight-Ashbury\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Haight-Ashbury\"))\n        elif person == \"William\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Mission District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Mission District\"))\n        elif person == \"Robert\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Golden Gate Park\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Golden Gate Park\"))\n        elif person == \"Mark\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Russian Hill\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Russian Hill\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_575"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Barbara",
                        "start_time": "9:00",
                        "end_time": "10:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Margaret",
                        "start_time": "10:00",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Kevin",
                        "start_time": "10:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Kimberly",
                        "start_time": "11:00",
                        "end_time": "11:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Margaret",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Barbara",
                        "start_time": "13:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kimberly",
                        "start_time": "14:52",
                        "end_time": "15:22"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "20:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Bayview\": {\n        \"North Beach\": 21,\n        \"Presidio\": 31,\n        \"Haight-Ashbury\": 19,\n        \"Union Square\": 17\n    },\n    \"North Beach\": {\n        \"Bayview\": 22,\n        \"Presidio\": 17,\n        \"Haight-Ashbury\": 18,\n        \"Union Square\": 7\n    },\n    \"Presidio\": {\n        \"Bayview\": 31,\n        \"North Beach\": 18,\n        \"Haight-Ashbury\": 15,\n        \"Union Square\": 22\n    },\n    \"Haight-Ashbury\": {\n        \"Bayview\": 18,\n        \"North Beach\": 19,\n        \"Presidio\": 15,\n        \"Union Square\": 17\n    },\n    \"Union Square\": {\n        \"Bayview\": 15,\n        \"North Beach\": 10,\n        \"Presidio\": 24,\n        \"Haight-Ashbury\": 18\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Barbara\": {\"start\": datetime(2023, 1, 1, 14, 45), \"end\": datetime(2023, 1, 1, 20, 15), \"min_time\": 60},\n    \"Margaret\": {\"start\": datetime(2023, 1, 1, 10, 15), \"end\": datetime(2023, 1, 1, 15, 15), \"min_time\": 30},\n    \"Kevin\": {\"start\": datetime(2023, 1, 1, 20, 0), \"end\": datetime(2023, 1, 1, 20, 45), \"min_time\": 30},\n    \"Kimberly\": {\"start\": datetime(2023, 1, 1, 7, 45), \"end\": datetime(2023, 1, 1, 16, 45), \"min_time\": 30}\n}\n\n# Define start location and time\nstart_location = \"Bayview\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Barbara\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"North Beach\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Bayview\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"North Beach\"))\n        elif person == \"Margaret\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Presidio\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Bayview\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Presidio\"))\n        elif person == \"Kevin\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Haight-Ashbury\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Bayview\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Haight-Ashbury\"))\n        elif person == \"Kimberly\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Union Square\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Bayview\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Union Square\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_356"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Rebecca",
                        "start_time": "9:00",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Karen",
                        "start_time": "11:00",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Carol",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Carol",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Karen",
                        "start_time": "12:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "14:58",
                        "end_time": "16:58"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Union Square\": {\n        \"Mission District\": 14,\n        \"Bayview\": 15,\n        \"Sunset District\": 26\n    },\n    \"Mission District\": {\n        \"Union Square\": 15,\n        \"Bayview\": 15,\n        \"Sunset District\": 24\n    },\n    \"Bayview\": {\n        \"Union Square\": 17,\n        \"Mission District\": 13,\n        \"Sunset District\": 23\n    },\n    \"Sunset District\": {\n        \"Union Square\": 30,\n        \"Mission District\": 24,\n        \"Bayview\": 22\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Rebecca\": {\"start\": datetime(2023, 1, 1, 11, 30), \"end\": datetime(2023, 1, 1, 20, 15), \"min_time\": 120},\n    \"Karen\": {\"start\": datetime(2023, 1, 1, 12, 45), \"end\": datetime(2023, 1, 1, 15, 0), \"min_time\": 120},\n    \"Carol\": {\"start\": datetime(2023, 1, 1, 10, 15), \"end\": datetime(2023, 1, 1, 11, 45), \"min_time\": 30}\n}\n\n# Define start location and time\nstart_location = \"Union Square\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Rebecca\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Mission District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Union Square\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Mission District\"))\n        elif person == \"Karen\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Bayview\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Union Square\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Bayview\"))\n        elif person == \"Carol\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Sunset District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Union Square\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Sunset District\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_286"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Emily",
                        "start_time": "9:00",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Joseph",
                        "start_time": "10:45",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Melissa",
                        "start_time": "12:45",
                        "end_time": "14:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Emily",
                        "start_time": "16:15",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Joseph",
                        "start_time": "18:07",
                        "end_time": "20:07"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Melissa",
                        "start_time": "20:29",
                        "end_time": "21:44"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Fisherman's Wharf\": {\n        \"Presidio\": 17,\n        \"Richmond District\": 18,\n        \"Financial District\": 11\n    },\n    \"Presidio\": {\n        \"Fisherman's Wharf\": 19,\n        \"Richmond District\": 7,\n        \"Financial District\": 23\n    },\n    \"Richmond District\": {\n        \"Fisherman's Wharf\": 18,\n        \"Presidio\": 7,\n        \"Financial District\": 22\n    },\n    \"Financial District\": {\n        \"Fisherman's Wharf\": 10,\n        \"Presidio\": 22,\n        \"Richmond District\": 21\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Emily\": {\"start\": datetime(2023, 1, 1, 16, 15), \"end\": datetime(2023, 1, 1, 21, 0), \"min_time\": 105},\n    \"Joseph\": {\"start\": datetime(2023, 1, 1, 17, 15), \"end\": datetime(2023, 1, 1, 22, 0), \"min_time\": 120},\n    \"Melissa\": {\"start\": datetime(2023, 1, 1, 15, 45), \"end\": datetime(2023, 1, 1, 21, 45), \"min_time\": 75}\n}\n\n# Define start location and time\nstart_location = \"Fisherman's Wharf\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Emily\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Presidio\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Fisherman's Wharf\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Presidio\"))\n        elif person == \"Joseph\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Richmond District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Fisherman's Wharf\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Richmond District\"))\n        elif person == \"Melissa\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Financial District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Fisherman's Wharf\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Financial District\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_210"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Emily",
                        "start_time": "9:00",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Mark",
                        "start_time": "10:45",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Deborah",
                        "start_time": "11:45",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Margaret",
                        "start_time": "12:30",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "George",
                        "start_time": "7:30",
                        "end_time": "8:30"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Andrew",
                        "start_time": "8:38",
                        "end_time": "9:53"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Steven",
                        "start_time": "9:53",
                        "end_time": "11:38"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "9:16",
                        "end_time": "10:01"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "George",
                        "start_time": "10:23",
                        "end_time": "11:23"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Emily",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "14:45",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "15:57",
                        "end_time": "17:42"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Margaret",
                        "start_time": "21:30",
                        "end_time": "22:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Alamo Square\": {\n        \"Russian Hill\": 13,\n        \"Presidio\": 18,\n        \"Chinatown\": 16,\n        \"Sunset District\": 16,\n        \"The Castro\": 8,\n        \"Embarcadero\": 17,\n        \"Golden Gate Park\": 9\n    },\n    \"Russian Hill\": {\n        \"Alamo Square\": 15,\n        \"Presidio\": 14,\n        \"Chinatown\": 9,\n        \"Sunset District\": 23,\n        \"The Castro\": 21,\n        \"Embarcadero\": 8,\n        \"Golden Gate Park\": 21\n    },\n    \"Presidio\": {\n        \"Alamo Square\": 18,\n        \"Russian Hill\": 14,\n        \"Chinatown\": 21,\n        \"Sunset District\": 15,\n        \"The Castro\": 21,\n        \"Embarcadero\": 20,\n        \"Golden Gate Park\": 12\n    },\n    \"Chinatown\": {\n        \"Alamo Square\": 17,\n        \"Russian Hill\": 7,\n        \"Presidio\": 19,\n        \"Sunset District\": 29,\n        \"The Castro\": 22,\n        \"Embarcadero\": 5,\n        \"Golden Gate Park\": 23\n    },\n    \"Sunset District\": {\n        \"Alamo Square\": 17,\n        \"Russian Hill\": 24,\n        \"Presidio\": 16,\n        \"Chinatown\": 30,\n        \"The Castro\": 17,\n        \"Embarcadero\": 31,\n        \"Golden Gate Park\": 11\n    },\n    \"The Castro\": {\n        \"Alamo Square\": 8,\n        \"Russian Hill\": 18,\n        \"Presidio\": 20,\n        \"Chinatown\": 20,\n        \"Sunset District\": 17,\n        \"Embarcadero\": 22,\n        \"Golden Gate Park\": 11\n    },\n    \"Embarcadero\": {\n        \"Alamo Square\": 19,\n        \"Russian Hill\": 8,\n        \"Presidio\": 20,\n        \"Chinatown\": 7,\n        \"Sunset District\": 30,\n        \"The Castro\": 25,\n        \"Golden Gate Park\": 25\n    },\n    \"Golden Gate Park\": {\n        \"Alamo Square\": 10,\n        \"Russian Hill\": 19,\n        \"Presidio\": 11,\n        \"Chinatown\": 23,\n        \"Sunset District\": 10,\n        \"The Castro\": 13,\n        \"Embarcadero\": 25\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Emily\": {\"start\": datetime(2023, 1, 1, 12, 15), \"end\": datetime(2023, 1, 1, 14, 15), \"min_time\": 105},\n    \"Mark\": {\"start\": datetime(2023, 1, 1, 14, 45), \"end\": datetime(2023, 1, 1, 19, 30), \"min_time\": 60},\n    \"Deborah\": {\"start\": datetime(2023, 1, 1, 7, 30), \"end\": datetime(2023, 1, 1, 15, 30), \"min_time\": 45},\n    \"Margaret\": {\"start\": datetime(2023, 1, 1, 21, 30), \"end\": datetime(2023, 1, 1, 22, 30), \"min_time\": 60},\n    \"George\": {\"start\": datetime(2023, 1, 1, 7, 30), \"end\": datetime(2023, 1, 1, 14, 15), \"min_time\": 60},\n    \"Andrew\": {\"start\": datetime(2023, 1, 1, 20, 15), \"end\": datetime(2023, 1, 1, 22, 0), \"min_time\": 75},\n    \"Steven\": {\"start\": datetime(2023, 1, 1, 11, 15), \"end\": datetime(2023, 1, 1, 21, 15), \"min_time\": 105}\n}\n\n# Define start location and time\nstart_location = \"Alamo Square\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Emily\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Russian Hill\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Alamo Square\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Russian Hill\"))\n        elif person == \"Mark\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Presidio\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Alamo Square\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Presidio\"))\n        elif person == \"Deborah\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Chinatown\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Alamo Square\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Chinatown\"))\n        elif person == \"Margaret\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Sunset District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Alamo Square\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Sunset District\"))\n        elif person == \"George\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"The Castro\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Alamo Square\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"The Castro\"))\n        elif person == \"Andrew\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Embarcadero\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Alamo Square\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Embarcadero\"))\n        elif person == \"Steven\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Golden Gate Park\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Alamo Square\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Golden Gate Park\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_612"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Emily",
                        "start_time": "9:00",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Helen",
                        "start_time": "11:00",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Kimberly",
                        "start_time": "11:30",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "James",
                        "start_time": "10:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Linda",
                        "start_time": "11:08",
                        "end_time": "11:23"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Paul",
                        "start_time": "11:23",
                        "end_time": "12:53"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Anthony",
                        "start_time": "12:53",
                        "end_time": "14:38"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Nancy",
                        "start_time": "8:30",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "William",
                        "start_time": "10:45",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "12:45",
                        "end_time": "13:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Emily",
                        "start_time": "9:15",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Linda",
                        "start_time": "11:26",
                        "end_time": "11:41"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Anthony",
                        "start_time": "11:52",
                        "end_time": "13:37"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "13:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Paul",
                        "start_time": "14:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "William",
                        "start_time": "17:30",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Kimberly",
                        "start_time": "19:52",
                        "end_time": "21:07"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Russian Hill\": {\n        \"Pacific Heights\": 7,\n        \"North Beach\": 5,\n        \"Golden Gate Park\": 21,\n        \"Embarcadero\": 8,\n        \"Haight-Ashbury\": 17,\n        \"Fisherman's Wharf\": 7,\n        \"Mission District\": 16,\n        \"Alamo Square\": 15,\n        \"Bayview\": 23,\n        \"Richmond District\": 14\n    },\n    \"Pacific Heights\": {\n        \"Russian Hill\": 7,\n        \"North Beach\": 9,\n        \"Golden Gate Park\": 15,\n        \"Embarcadero\": 10,\n        \"Haight-Ashbury\": 11,\n        \"Fisherman's Wharf\": 13,\n        \"Mission District\": 15,\n        \"Alamo Square\": 10,\n        \"Bayview\": 22,\n        \"Richmond District\": 12\n    },\n    \"North Beach\": {\n        \"Russian Hill\": 4,\n        \"Pacific Heights\": 8,\n        \"Golden Gate Park\": 22,\n        \"Embarcadero\": 6,\n        \"Haight-Ashbury\": 18,\n        \"Fisherman's Wharf\": 5,\n        \"Mission District\": 18,\n        \"Alamo Square\": 16,\n        \"Bayview\": 25,\n        \"Richmond District\": 18\n    },\n    \"Golden Gate Park\": {\n        \"Russian Hill\": 19,\n        \"Pacific Heights\": 16,\n        \"North Beach\": 23,\n        \"Embarcadero\": 25,\n        \"Haight-Ashbury\": 7,\n        \"Fisherman's Wharf\": 24,\n        \"Mission District\": 17,\n        \"Alamo Square\": 9,\n        \"Bayview\": 23,\n        \"Richmond District\": 7\n    },\n    \"Embarcadero\": {\n        \"Russian Hill\": 8,\n        \"Pacific Heights\": 11,\n        \"North Beach\": 5,\n        \"Golden Gate Park\": 25,\n        \"Haight-Ashbury\": 21,\n        \"Fisherman's Wharf\": 6,\n        \"Mission District\": 20,\n        \"Alamo Square\": 19,\n        \"Bayview\": 21,\n        \"Richmond District\": 21\n    },\n    \"Haight-Ashbury\": {\n        \"Russian Hill\": 17,\n        \"Pacific Heights\": 12,\n        \"North Beach\": 19,\n        \"Golden Gate Park\": 7,\n        \"Embarcadero\": 20,\n        \"Fisherman's Wharf\": 23,\n        \"Mission District\": 11,\n        \"Alamo Square\": 5,\n        \"Bayview\": 18,\n        \"Richmond District\": 10\n    },\n    \"Fisherman's Wharf\": {\n        \"Russian Hill\": 7,\n        \"Pacific Heights\": 12,\n        \"North Beach\": 6,\n        \"Golden Gate Park\": 25,\n        \"Embarcadero\": 8,\n        \"Haight-Ashbury\": 22,\n        \"Mission District\": 22,\n        \"Alamo Square\": 21,\n        \"Bayview\": 26,\n        \"Richmond District\": 18\n    },\n    \"Mission District\": {\n        \"Russian Hill\": 15,\n        \"Pacific Heights\": 16,\n        \"North Beach\": 17,\n        \"Golden Gate Park\": 17,\n        \"Embarcadero\": 19,\n        \"Haight-Ashbury\": 12,\n        \"Fisherman's Wharf\": 22,\n        \"Alamo Square\": 11,\n        \"Bayview\": 14,\n        \"Richmond District\": 20\n    },\n    \"Alamo Square\": {\n        \"Russian Hill\": 13,\n        \"Pacific Heights\": 10,\n        \"North Beach\": 15,\n        \"Golden Gate Park\": 9,\n        \"Embarcadero\": 16,\n        \"Haight-Ashbury\": 5,\n        \"Fisherman's Wharf\": 19,\n        \"Mission District\": 10,\n        \"Bayview\": 16,\n        \"Richmond District\": 11\n    },\n    \"Bayview\": {\n        \"Russian Hill\": 23,\n        \"Pacific Heights\": 23,\n        \"North Beach\": 22,\n        \"Golden Gate Park\": 22,\n        \"Embarcadero\": 19,\n        \"Haight-Ashbury\": 19,\n        \"Fisherman's Wharf\": 25,\n        \"Mission District\": 13,\n        \"Alamo Square\": 16,\n        \"Richmond District\": 25\n    },\n    \"Richmond District\": {\n        \"Russian Hill\": 13,\n        \"Pacific Heights\": 10,\n        \"North Beach\": 17,\n        \"Golden Gate Park\": 9,\n        \"Embarcadero\": 19,\n        \"Haight-Ashbury\": 10,\n        \"Fisherman's Wharf\": 18,\n        \"Mission District\": 20,\n        \"Alamo Square\": 13,\n        \"Bayview\": 27\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Emily\": {\"start\": datetime(2023, 1, 1, 9, 15), \"end\": datetime(2023, 1, 1, 13, 45), \"min_time\": 120},\n    \"Helen\": {\"start\": datetime(2023, 1, 1, 13, 45), \"end\": datetime(2023, 1, 1, 18, 45), \"min_time\": 30},\n    \"Kimberly\": {\"start\": datetime(2023, 1, 1, 18, 45), \"end\": datetime(2023, 1, 1, 21, 15), \"min_time\": 75},\n    \"James\": {\"start\": datetime(2023, 1, 1, 10, 30), \"end\": datetime(2023, 1, 1, 11, 30), \"min_time\": 30},\n    \"Linda\": {\"start\": datetime(2023, 1, 1, 7, 30), \"end\": datetime(2023, 1, 1, 19, 15), \"min_time\": 15},\n    \"Paul\": {\"start\": datetime(2023, 1, 1, 14, 45), \"end\": datetime(2023, 1, 1, 18, 45), \"min_time\": 90},\n    \"Anthony\": {\"start\": datetime(2023, 1, 1, 8, 0), \"end\": datetime(2023, 1, 1, 14, 45), \"min_time\": 105},\n    \"Nancy\": {\"start\": datetime(2023, 1, 1, 8, 30), \"end\": datetime(2023, 1, 1, 13, 45), \"min_time\": 120},\n    \"William\": {\"start\": datetime(2023, 1, 1, 17, 30), \"end\": datetime(2023, 1, 1, 20, 30), \"min_time\": 120},\n    \"Margaret\": {\"start\": datetime(2023, 1, 1, 15, 15), \"end\": datetime(2023, 1, 1, 18, 15), \"min_time\": 45}\n}\n\n# Define start location and time\nstart_location = \"Russian Hill\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Emily\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Pacific Heights\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Russian Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Pacific Heights\"))\n        elif person == \"Helen\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"North Beach\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Russian Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"North Beach\"))\n        elif person == \"Kimberly\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Golden Gate Park\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Russian Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Golden Gate Park\"))\n        elif person == \"James\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Embarcadero\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Russian Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Embarcadero\"))\n        elif person == \"Linda\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Haight-Ashbury\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Russian Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Haight-Ashbury\"))\n        elif person == \"Paul\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Fisherman's Wharf\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Russian Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Fisherman's Wharf\"))\n        elif person == \"Anthony\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Mission District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Russian Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Mission District\"))\n        elif person == \"Nancy\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Alamo Square\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Russian Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Alamo Square\"))\n        elif person == \"William\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Bayview\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Russian Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Bayview\"))\n        elif person == \"Margaret\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Richmond District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Russian Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Richmond District\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_901"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "William",
                        "start_time": "9:00",
                        "end_time": "10:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Joshua",
                        "start_time": "10:00",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Joseph",
                        "start_time": "10:15",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "David",
                        "start_time": "10:30",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Brian",
                        "start_time": "11:15",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "13:00",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Anthony",
                        "start_time": "7:15",
                        "end_time": "7:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Matthew",
                        "start_time": "7:51",
                        "end_time": "9:51"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Helen",
                        "start_time": "9:51",
                        "end_time": "11:06"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Jeffrey",
                        "start_time": "11:06",
                        "end_time": "12:06"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Joshua",
                        "start_time": "9:16",
                        "end_time": "9:31"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Anthony",
                        "start_time": "9:41",
                        "end_time": "10:11"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Helen",
                        "start_time": "10:23",
                        "end_time": "11:38"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joseph",
                        "start_time": "11:51",
                        "end_time": "12:06"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "William",
                        "start_time": "15:15",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "16:45",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Karen",
                        "start_time": "17:48",
                        "end_time": "18:03"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Brian",
                        "start_time": "18:13",
                        "end_time": "19:58"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jeffrey",
                        "start_time": "20:23",
                        "end_time": "21:23"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"The Castro\": {\n        \"Alamo Square\": 8,\n        \"Richmond District\": 16,\n        \"Financial District\": 21,\n        \"Union Square\": 19,\n        \"Fisherman's Wharf\": 24,\n        \"Marina District\": 21,\n        \"Haight-Ashbury\": 6,\n        \"Mission District\": 7,\n        \"Pacific Heights\": 16,\n        \"Golden Gate Park\": 11\n    },\n    \"Alamo Square\": {\n        \"The Castro\": 8,\n        \"Richmond District\": 11,\n        \"Financial District\": 17,\n        \"Union Square\": 14,\n        \"Fisherman's Wharf\": 19,\n        \"Marina District\": 15,\n        \"Haight-Ashbury\": 5,\n        \"Mission District\": 10,\n        \"Pacific Heights\": 10,\n        \"Golden Gate Park\": 9\n    },\n    \"Richmond District\": {\n        \"The Castro\": 16,\n        \"Alamo Square\": 13,\n        \"Financial District\": 22,\n        \"Union Square\": 21,\n        \"Fisherman's Wharf\": 18,\n        \"Marina District\": 9,\n        \"Haight-Ashbury\": 10,\n        \"Mission District\": 20,\n        \"Pacific Heights\": 10,\n        \"Golden Gate Park\": 9\n    },\n    \"Financial District\": {\n        \"The Castro\": 20,\n        \"Alamo Square\": 17,\n        \"Richmond District\": 21,\n        \"Union Square\": 9,\n        \"Fisherman's Wharf\": 10,\n        \"Marina District\": 15,\n        \"Haight-Ashbury\": 19,\n        \"Mission District\": 17,\n        \"Pacific Heights\": 13,\n        \"Golden Gate Park\": 23\n    },\n    \"Union Square\": {\n        \"The Castro\": 17,\n        \"Alamo Square\": 15,\n        \"Richmond District\": 20,\n        \"Financial District\": 9,\n        \"Fisherman's Wharf\": 15,\n        \"Marina District\": 18,\n        \"Haight-Ashbury\": 18,\n        \"Mission District\": 14,\n        \"Pacific Heights\": 15,\n        \"Golden Gate Park\": 22\n    },\n    \"Fisherman's Wharf\": {\n        \"The Castro\": 27,\n        \"Alamo Square\": 21,\n        \"Richmond District\": 18,\n        \"Financial District\": 11,\n        \"Union Square\": 13,\n        \"Marina District\": 9,\n        \"Haight-Ashbury\": 22,\n        \"Mission District\": 22,\n        \"Pacific Heights\": 12,\n        \"Golden Gate Park\": 25\n    },\n    \"Marina District\": {\n        \"The Castro\": 22,\n        \"Alamo Square\": 15,\n        \"Richmond District\": 11,\n        \"Financial District\": 17,\n        \"Union Square\": 16,\n        \"Fisherman's Wharf\": 10,\n        \"Haight-Ashbury\": 16,\n        \"Mission District\": 20,\n        \"Pacific Heights\": 7,\n        \"Golden Gate Park\": 18\n    },\n    \"Haight-Ashbury\": {\n        \"The Castro\": 6,\n        \"Alamo Square\": 5,\n        \"Richmond District\": 10,\n        \"Financial District\": 21,\n        \"Union Square\": 19,\n        \"Fisherman's Wharf\": 23,\n        \"Marina District\": 17,\n        \"Mission District\": 11,\n        \"Pacific Heights\": 12,\n        \"Golden Gate Park\": 7\n    },\n    \"Mission District\": {\n        \"The Castro\": 7,\n        \"Alamo Square\": 11,\n        \"Richmond District\": 20,\n        \"Financial District\": 15,\n        \"Union Square\": 15,\n        \"Fisherman's Wharf\": 22,\n        \"Marina District\": 19,\n        \"Haight-Ashbury\": 12,\n        \"Pacific Heights\": 16,\n        \"Golden Gate Park\": 17\n    },\n    \"Pacific Heights\": {\n        \"The Castro\": 16,\n        \"Alamo Square\": 10,\n        \"Richmond District\": 12,\n        \"Financial District\": 13,\n        \"Union Square\": 12,\n        \"Fisherman's Wharf\": 13,\n        \"Marina District\": 6,\n        \"Haight-Ashbury\": 11,\n        \"Mission District\": 15,\n        \"Golden Gate Park\": 15\n    },\n    \"Golden Gate Park\": {\n        \"The Castro\": 13,\n        \"Alamo Square\": 9,\n        \"Richmond District\": 7,\n        \"Financial District\": 26,\n        \"Union Square\": 22,\n        \"Fisherman's Wharf\": 24,\n        \"Marina District\": 16,\n        \"Haight-Ashbury\": 7,\n        \"Mission District\": 17,\n        \"Pacific Heights\": 16\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"William\": {\"start\": datetime(2023, 1, 1, 15, 15), \"end\": datetime(2023, 1, 1, 17, 15), \"min_time\": 60},\n    \"Joshua\": {\"start\": datetime(2023, 1, 1, 7, 0), \"end\": datetime(2023, 1, 1, 20, 0), \"min_time\": 15},\n    \"Joseph\": {\"start\": datetime(2023, 1, 1, 11, 15), \"end\": datetime(2023, 1, 1, 13, 30), \"min_time\": 15},\n    \"David\": {\"start\": datetime(2023, 1, 1, 16, 45), \"end\": datetime(2023, 1, 1, 19, 15), \"min_time\": 45},\n    \"Brian\": {\"start\": datetime(2023, 1, 1, 13, 45), \"end\": datetime(2023, 1, 1, 20, 45), \"min_time\": 105},\n    \"Karen\": {\"start\": datetime(2023, 1, 1, 11, 30), \"end\": datetime(2023, 1, 1, 18, 30), \"min_time\": 15},\n    \"Anthony\": {\"start\": datetime(2023, 1, 1, 7, 15), \"end\": datetime(2023, 1, 1, 10, 30), \"min_time\": 30},\n    \"Matthew\": {\"start\": datetime(2023, 1, 1, 17, 15), \"end\": datetime(2023, 1, 1, 19, 15), \"min_time\": 120},\n    \"Helen\": {\"start\": datetime(2023, 1, 1, 8, 0), \"end\": datetime(2023, 1, 1, 12, 0), \"min_time\": 75},\n    \"Jeffrey\": {\"start\": datetime(2023, 1, 1, 19, 0), \"end\": datetime(2023, 1, 1, 21, 30), \"min_time\": 60}\n}\n\n# Define start location and time\nstart_location = \"The Castro\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"William\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Alamo Square\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Alamo Square\"))\n        elif person == \"Joshua\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Richmond District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Richmond District\"))\n        elif person == \"Joseph\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Financial District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Financial District\"))\n        elif person == \"David\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Union Square\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Union Square\"))\n        elif person == \"Brian\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Fisherman's Wharf\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Fisherman's Wharf\"))\n        elif person == \"Karen\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Marina District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Marina District\"))\n        elif person == \"Anthony\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Haight-Ashbury\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Haight-Ashbury\"))\n        elif person == \"Matthew\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Mission District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Mission District\"))\n        elif person == \"Helen\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Pacific Heights\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Pacific Heights\"))\n        elif person == \"Jeffrey\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Golden Gate Park\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Golden Gate Park\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_956"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Barbara",
                        "start_time": "9:00",
                        "end_time": "10:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Barbara",
                        "start_time": "9:07",
                        "end_time": "10:07"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Russian Hill\": {\n        \"Pacific Heights\": 7,\n        \"Pacific Heights\": 7\n    },\n    \"Pacific Heights\": {\n        \"Russian Hill\": 7,\n        \"Russian Hill\": 7\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Barbara\": {\"start\": datetime(2023, 1, 1, 7, 15), \"end\": datetime(2023, 1, 1, 22, 0), \"min_time\": 60}\n}\n\n# Define start location and time\nstart_location = \"Russian Hill\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Barbara\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Pacific Heights\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Russian Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Pacific Heights\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_73"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Helen",
                        "start_time": "9:00",
                        "end_time": "9:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Steven",
                        "start_time": "9:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Deborah",
                        "start_time": "11:30",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Matthew",
                        "start_time": "12:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Joseph",
                        "start_time": "12:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Ronald",
                        "start_time": "14:45",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Robert",
                        "start_time": "15:45",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "14:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Elizabeth",
                        "start_time": "15:28",
                        "end_time": "17:28"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Helen",
                        "start_time": "9:30",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Deborah",
                        "start_time": "10:38",
                        "end_time": "11:08"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Matthew",
                        "start_time": "11:35",
                        "end_time": "12:20"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "14:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Joseph",
                        "start_time": "15:24",
                        "end_time": "17:24"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Ronald",
                        "start_time": "17:51",
                        "end_time": "18:51"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Steven",
                        "start_time": "20:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Pacific Heights\": {\n        \"Golden Gate Park\": 15,\n        \"The Castro\": 16,\n        \"Bayview\": 22,\n        \"Marina District\": 6,\n        \"Union Square\": 12,\n        \"Sunset District\": 21,\n        \"Alamo Square\": 10,\n        \"Financial District\": 13,\n        \"Mission District\": 15\n    },\n    \"Golden Gate Park\": {\n        \"Pacific Heights\": 16,\n        \"The Castro\": 13,\n        \"Bayview\": 23,\n        \"Marina District\": 16,\n        \"Union Square\": 22,\n        \"Sunset District\": 10,\n        \"Alamo Square\": 9,\n        \"Financial District\": 26,\n        \"Mission District\": 17\n    },\n    \"The Castro\": {\n        \"Pacific Heights\": 16,\n        \"Golden Gate Park\": 11,\n        \"Bayview\": 19,\n        \"Marina District\": 21,\n        \"Union Square\": 19,\n        \"Sunset District\": 17,\n        \"Alamo Square\": 8,\n        \"Financial District\": 21,\n        \"Mission District\": 7\n    },\n    \"Bayview\": {\n        \"Pacific Heights\": 23,\n        \"Golden Gate Park\": 22,\n        \"The Castro\": 19,\n        \"Marina District\": 27,\n        \"Union Square\": 18,\n        \"Sunset District\": 23,\n        \"Alamo Square\": 16,\n        \"Financial District\": 19,\n        \"Mission District\": 13\n    },\n    \"Marina District\": {\n        \"Pacific Heights\": 7,\n        \"Golden Gate Park\": 18,\n        \"The Castro\": 22,\n        \"Bayview\": 27,\n        \"Union Square\": 16,\n        \"Sunset District\": 19,\n        \"Alamo Square\": 15,\n        \"Financial District\": 17,\n        \"Mission District\": 20\n    },\n    \"Union Square\": {\n        \"Pacific Heights\": 12,\n        \"Golden Gate Park\": 22,\n        \"The Castro\": 17,\n        \"Bayview\": 15,\n        \"Marina District\": 18,\n        \"Sunset District\": 27,\n        \"Alamo Square\": 15,\n        \"Financial District\": 9,\n        \"Mission District\": 14\n    },\n    \"Sunset District\": {\n        \"Pacific Heights\": 21,\n        \"Golden Gate Park\": 11,\n        \"The Castro\": 17,\n        \"Bayview\": 22,\n        \"Marina District\": 21,\n        \"Union Square\": 30,\n        \"Alamo Square\": 17,\n        \"Financial District\": 30,\n        \"Mission District\": 25\n    },\n    \"Alamo Square\": {\n        \"Pacific Heights\": 10,\n        \"Golden Gate Park\": 9,\n        \"The Castro\": 8,\n        \"Bayview\": 16,\n        \"Marina District\": 15,\n        \"Union Square\": 14,\n        \"Sunset District\": 16,\n        \"Financial District\": 17,\n        \"Mission District\": 10\n    },\n    \"Financial District\": {\n        \"Pacific Heights\": 13,\n        \"Golden Gate Park\": 23,\n        \"The Castro\": 20,\n        \"Bayview\": 19,\n        \"Marina District\": 15,\n        \"Union Square\": 9,\n        \"Sunset District\": 30,\n        \"Alamo Square\": 17,\n        \"Mission District\": 17\n    },\n    \"Mission District\": {\n        \"Pacific Heights\": 16,\n        \"Golden Gate Park\": 17,\n        \"The Castro\": 7,\n        \"Bayview\": 14,\n        \"Marina District\": 19,\n        \"Union Square\": 15,\n        \"Sunset District\": 24,\n        \"Alamo Square\": 11,\n        \"Financial District\": 15\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Helen\": {\"start\": datetime(2023, 1, 1, 9, 30), \"end\": datetime(2023, 1, 1, 12, 15), \"min_time\": 45},\n    \"Steven\": {\"start\": datetime(2023, 1, 1, 20, 15), \"end\": datetime(2023, 1, 1, 22, 0), \"min_time\": 105},\n    \"Deborah\": {\"start\": datetime(2023, 1, 1, 8, 30), \"end\": datetime(2023, 1, 1, 12, 0), \"min_time\": 30},\n    \"Matthew\": {\"start\": datetime(2023, 1, 1, 9, 15), \"end\": datetime(2023, 1, 1, 14, 15), \"min_time\": 45},\n    \"Joseph\": {\"start\": datetime(2023, 1, 1, 14, 15), \"end\": datetime(2023, 1, 1, 19, 45), \"min_time\": 120},\n    \"Ronald\": {\"start\": datetime(2023, 1, 1, 16, 0), \"end\": datetime(2023, 1, 1, 20, 45), \"min_time\": 60},\n    \"Robert\": {\"start\": datetime(2023, 1, 1, 18, 30), \"end\": datetime(2023, 1, 1, 21, 15), \"min_time\": 120},\n    \"Rebecca\": {\"start\": datetime(2023, 1, 1, 14, 45), \"end\": datetime(2023, 1, 1, 16, 15), \"min_time\": 30},\n    \"Elizabeth\": {\"start\": datetime(2023, 1, 1, 18, 30), \"end\": datetime(2023, 1, 1, 21, 0), \"min_time\": 120}\n}\n\n# Define start location and time\nstart_location = \"Pacific Heights\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Helen\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Golden Gate Park\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Pacific Heights\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Golden Gate Park\"))\n        elif person == \"Steven\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"The Castro\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Pacific Heights\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"The Castro\"))\n        elif person == \"Deborah\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Bayview\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Pacific Heights\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Bayview\"))\n        elif person == \"Matthew\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Marina District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Pacific Heights\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Marina District\"))\n        elif person == \"Joseph\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Union Square\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Pacific Heights\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Union Square\"))\n        elif person == \"Ronald\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Sunset District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Pacific Heights\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Sunset District\"))\n        elif person == \"Robert\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Alamo Square\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Pacific Heights\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Alamo Square\"))\n        elif person == \"Rebecca\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Financial District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Pacific Heights\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Financial District\"))\n        elif person == \"Elizabeth\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Mission District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Pacific Heights\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Mission District\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_835"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Stephanie",
                        "start_time": "9:00",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Sandra",
                        "start_time": "10:30",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Richard",
                        "start_time": "7:15",
                        "end_time": "8:30"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Brian",
                        "start_time": "8:42",
                        "end_time": "10:42"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Jason",
                        "start_time": "10:42",
                        "end_time": "11:42"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Sandra",
                        "start_time": "13:00",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "13:38",
                        "end_time": "15:38"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "15:45",
                        "end_time": "16:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Haight-Ashbury\": {\n        \"Mission District\": 11,\n        \"Bayview\": 18,\n        \"Pacific Heights\": 12,\n        \"Russian Hill\": 17,\n        \"Fisherman's Wharf\": 23\n    },\n    \"Mission District\": {\n        \"Haight-Ashbury\": 12,\n        \"Bayview\": 15,\n        \"Pacific Heights\": 16,\n        \"Russian Hill\": 15,\n        \"Fisherman's Wharf\": 22\n    },\n    \"Bayview\": {\n        \"Haight-Ashbury\": 19,\n        \"Mission District\": 13,\n        \"Pacific Heights\": 23,\n        \"Russian Hill\": 23,\n        \"Fisherman's Wharf\": 25\n    },\n    \"Pacific Heights\": {\n        \"Haight-Ashbury\": 11,\n        \"Mission District\": 15,\n        \"Bayview\": 22,\n        \"Russian Hill\": 7,\n        \"Fisherman's Wharf\": 13\n    },\n    \"Russian Hill\": {\n        \"Haight-Ashbury\": 17,\n        \"Mission District\": 16,\n        \"Bayview\": 23,\n        \"Pacific Heights\": 7,\n        \"Fisherman's Wharf\": 7\n    },\n    \"Fisherman's Wharf\": {\n        \"Haight-Ashbury\": 22,\n        \"Mission District\": 22,\n        \"Bayview\": 26,\n        \"Pacific Heights\": 12,\n        \"Russian Hill\": 7\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Stephanie\": {\"start\": datetime(2023, 1, 1, 8, 15), \"end\": datetime(2023, 1, 1, 12, 45), \"min_time\": 90},\n    \"Sandra\": {\"start\": datetime(2023, 1, 1, 13, 0), \"end\": datetime(2023, 1, 1, 19, 30), \"min_time\": 15},\n    \"Richard\": {\"start\": datetime(2023, 1, 1, 7, 15), \"end\": datetime(2023, 1, 1, 10, 15), \"min_time\": 75},\n    \"Brian\": {\"start\": datetime(2023, 1, 1, 12, 15), \"end\": datetime(2023, 1, 1, 16, 0), \"min_time\": 120},\n    \"Jason\": {\"start\": datetime(2023, 1, 1, 8, 30), \"end\": datetime(2023, 1, 1, 17, 45), \"min_time\": 60}\n}\n\n# Define start location and time\nstart_location = \"Haight-Ashbury\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Stephanie\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Mission District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Haight-Ashbury\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Mission District\"))\n        elif person == \"Sandra\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Bayview\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Haight-Ashbury\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Bayview\"))\n        elif person == \"Richard\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Pacific Heights\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Haight-Ashbury\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Pacific Heights\"))\n        elif person == \"Brian\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Russian Hill\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Haight-Ashbury\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Russian Hill\"))\n        elif person == \"Jason\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Fisherman's Wharf\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Haight-Ashbury\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Fisherman's Wharf\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_482"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Stephanie",
                        "start_time": "9:00",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Karen",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Brian",
                        "start_time": "11:00",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "8:00",
                        "end_time": "8:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Joseph",
                        "start_time": "8:15",
                        "end_time": "9:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Steven",
                        "start_time": "9:28",
                        "end_time": "11:28"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "9:10",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "11:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Karen",
                        "start_time": "13:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Brian",
                        "start_time": "15:00",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "15:40",
                        "end_time": "17:40"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Financial District\": {\n        \"Golden Gate Park\": 23,\n        \"Chinatown\": 5,\n        \"Union Square\": 9,\n        \"Fisherman's Wharf\": 10,\n        \"Pacific Heights\": 13,\n        \"North Beach\": 7\n    },\n    \"Golden Gate Park\": {\n        \"Financial District\": 26,\n        \"Chinatown\": 23,\n        \"Union Square\": 22,\n        \"Fisherman's Wharf\": 24,\n        \"Pacific Heights\": 16,\n        \"North Beach\": 24\n    },\n    \"Chinatown\": {\n        \"Financial District\": 5,\n        \"Golden Gate Park\": 23,\n        \"Union Square\": 7,\n        \"Fisherman's Wharf\": 8,\n        \"Pacific Heights\": 10,\n        \"North Beach\": 3\n    },\n    \"Union Square\": {\n        \"Financial District\": 9,\n        \"Golden Gate Park\": 22,\n        \"Chinatown\": 7,\n        \"Fisherman's Wharf\": 15,\n        \"Pacific Heights\": 12,\n        \"North Beach\": 10\n    },\n    \"Fisherman's Wharf\": {\n        \"Financial District\": 11,\n        \"Golden Gate Park\": 25,\n        \"Chinatown\": 12,\n        \"Union Square\": 13,\n        \"Pacific Heights\": 12,\n        \"North Beach\": 6\n    },\n    \"Pacific Heights\": {\n        \"Financial District\": 13,\n        \"Golden Gate Park\": 15,\n        \"Chinatown\": 11,\n        \"Union Square\": 12,\n        \"Fisherman's Wharf\": 13,\n        \"North Beach\": 9\n    },\n    \"North Beach\": {\n        \"Financial District\": 8,\n        \"Golden Gate Park\": 22,\n        \"Chinatown\": 6,\n        \"Union Square\": 7,\n        \"Fisherman's Wharf\": 5,\n        \"Pacific Heights\": 8\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Stephanie\": {\"start\": datetime(2023, 1, 1, 11, 0), \"end\": datetime(2023, 1, 1, 16, 0), \"min_time\": 105},\n    \"Karen\": {\"start\": datetime(2023, 1, 1, 13, 45), \"end\": datetime(2023, 1, 1, 16, 30), \"min_time\": 15},\n    \"Brian\": {\"start\": datetime(2023, 1, 1, 15, 0), \"end\": datetime(2023, 1, 1, 17, 15), \"min_time\": 30},\n    \"Rebecca\": {\"start\": datetime(2023, 1, 1, 8, 0), \"end\": datetime(2023, 1, 1, 11, 15), \"min_time\": 30},\n    \"Joseph\": {\"start\": datetime(2023, 1, 1, 8, 15), \"end\": datetime(2023, 1, 1, 9, 30), \"min_time\": 60},\n    \"Steven\": {\"start\": datetime(2023, 1, 1, 14, 30), \"end\": datetime(2023, 1, 1, 20, 45), \"min_time\": 120}\n}\n\n# Define start location and time\nstart_location = \"Financial District\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Stephanie\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Golden Gate Park\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Financial District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Golden Gate Park\"))\n        elif person == \"Karen\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Chinatown\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Financial District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Chinatown\"))\n        elif person == \"Brian\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Union Square\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Financial District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Union Square\"))\n        elif person == \"Rebecca\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Fisherman's Wharf\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Financial District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Fisherman's Wharf\"))\n        elif person == \"Joseph\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Pacific Heights\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Financial District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Pacific Heights\"))\n        elif person == \"Steven\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"North Beach\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Financial District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"North Beach\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_502"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Sarah",
                        "start_time": "9:00",
                        "end_time": "10:00"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Jeffrey",
                        "start_time": "10:00",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Brian",
                        "start_time": "11:15",
                        "end_time": "12:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sarah",
                        "start_time": "16:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "17:07",
                        "end_time": "18:22"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Sunset District\": {\n        \"North Beach\": 29,\n        \"Union Square\": 30,\n        \"Alamo Square\": 17\n    },\n    \"North Beach\": {\n        \"Sunset District\": 27,\n        \"Union Square\": 7,\n        \"Alamo Square\": 16\n    },\n    \"Union Square\": {\n        \"Sunset District\": 26,\n        \"North Beach\": 10,\n        \"Alamo Square\": 15\n    },\n    \"Alamo Square\": {\n        \"Sunset District\": 16,\n        \"North Beach\": 15,\n        \"Union Square\": 14\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Sarah\": {\"start\": datetime(2023, 1, 1, 16, 0), \"end\": datetime(2023, 1, 1, 18, 15), \"min_time\": 60},\n    \"Jeffrey\": {\"start\": datetime(2023, 1, 1, 15, 0), \"end\": datetime(2023, 1, 1, 22, 0), \"min_time\": 75},\n    \"Brian\": {\"start\": datetime(2023, 1, 1, 16, 0), \"end\": datetime(2023, 1, 1, 17, 30), \"min_time\": 75}\n}\n\n# Define start location and time\nstart_location = \"Sunset District\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Sarah\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"North Beach\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Sunset District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"North Beach\"))\n        elif person == \"Jeffrey\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Union Square\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Sunset District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Union Square\"))\n        elif person == \"Brian\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Alamo Square\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Sunset District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Alamo Square\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_225"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Charles",
                        "start_time": "9:00",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Margaret",
                        "start_time": "10:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Daniel",
                        "start_time": "11:00",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Stephanie",
                        "start_time": "11:15",
                        "end_time": "12:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "9:24",
                        "end_time": "9:54"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Daniel",
                        "start_time": "10:15",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Charles",
                        "start_time": "18:00",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "20:30",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Sunset District\": {\n        \"Alamo Square\": 17,\n        \"Russian Hill\": 24,\n        \"Golden Gate Park\": 11,\n        \"Mission District\": 24\n    },\n    \"Alamo Square\": {\n        \"Sunset District\": 16,\n        \"Russian Hill\": 13,\n        \"Golden Gate Park\": 9,\n        \"Mission District\": 10\n    },\n    \"Russian Hill\": {\n        \"Sunset District\": 23,\n        \"Alamo Square\": 15,\n        \"Golden Gate Park\": 21,\n        \"Mission District\": 16\n    },\n    \"Golden Gate Park\": {\n        \"Sunset District\": 10,\n        \"Alamo Square\": 10,\n        \"Russian Hill\": 19,\n        \"Mission District\": 17\n    },\n    \"Mission District\": {\n        \"Sunset District\": 24,\n        \"Alamo Square\": 11,\n        \"Russian Hill\": 15,\n        \"Golden Gate Park\": 17\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Charles\": {\"start\": datetime(2023, 1, 1, 18, 0), \"end\": datetime(2023, 1, 1, 20, 45), \"min_time\": 90},\n    \"Margaret\": {\"start\": datetime(2023, 1, 1, 9, 0), \"end\": datetime(2023, 1, 1, 16, 0), \"min_time\": 30},\n    \"Daniel\": {\"start\": datetime(2023, 1, 1, 8, 0), \"end\": datetime(2023, 1, 1, 13, 30), \"min_time\": 15},\n    \"Stephanie\": {\"start\": datetime(2023, 1, 1, 20, 30), \"end\": datetime(2023, 1, 1, 22, 0), \"min_time\": 90}\n}\n\n# Define start location and time\nstart_location = \"Sunset District\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Charles\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Alamo Square\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Sunset District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Alamo Square\"))\n        elif person == \"Margaret\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Russian Hill\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Sunset District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Russian Hill\"))\n        elif person == \"Daniel\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Golden Gate Park\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Sunset District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Golden Gate Park\"))\n        elif person == \"Stephanie\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Mission District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Sunset District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Mission District\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_372"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Lisa",
                        "start_time": "9:00",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Daniel",
                        "start_time": "8:15",
                        "end_time": "8:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "8:42",
                        "end_time": "9:27"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Steven",
                        "start_time": "9:27",
                        "end_time": "10:57"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Timothy",
                        "start_time": "10:57",
                        "end_time": "12:27"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Ashley",
                        "start_time": "12:27",
                        "end_time": "13:27"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "13:27",
                        "end_time": "13:57"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Betty",
                        "start_time": "13:57",
                        "end_time": "14:27"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Daniel",
                        "start_time": "9:12",
                        "end_time": "9:27"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kevin",
                        "start_time": "13:41",
                        "end_time": "14:11"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Betty",
                        "start_time": "14:31",
                        "end_time": "15:01"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Steven",
                        "start_time": "16:30",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Lisa",
                        "start_time": "19:15",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Mission District\": {\n        \"The Castro\": 7,\n        \"Nob Hill\": 12,\n        \"Presidio\": 25,\n        \"Marina District\": 19,\n        \"Pacific Heights\": 16,\n        \"Golden Gate Park\": 17,\n        \"Chinatown\": 16,\n        \"Richmond District\": 20\n    },\n    \"The Castro\": {\n        \"Mission District\": 7,\n        \"Nob Hill\": 16,\n        \"Presidio\": 20,\n        \"Marina District\": 21,\n        \"Pacific Heights\": 16,\n        \"Golden Gate Park\": 11,\n        \"Chinatown\": 22,\n        \"Richmond District\": 16\n    },\n    \"Nob Hill\": {\n        \"Mission District\": 13,\n        \"The Castro\": 17,\n        \"Presidio\": 17,\n        \"Marina District\": 11,\n        \"Pacific Heights\": 8,\n        \"Golden Gate Park\": 17,\n        \"Chinatown\": 6,\n        \"Richmond District\": 14\n    },\n    \"Presidio\": {\n        \"Mission District\": 26,\n        \"The Castro\": 21,\n        \"Nob Hill\": 18,\n        \"Marina District\": 11,\n        \"Pacific Heights\": 11,\n        \"Golden Gate Park\": 12,\n        \"Chinatown\": 21,\n        \"Richmond District\": 7\n    },\n    \"Marina District\": {\n        \"Mission District\": 20,\n        \"The Castro\": 22,\n        \"Nob Hill\": 12,\n        \"Presidio\": 10,\n        \"Pacific Heights\": 7,\n        \"Golden Gate Park\": 18,\n        \"Chinatown\": 15,\n        \"Richmond District\": 11\n    },\n    \"Pacific Heights\": {\n        \"Mission District\": 15,\n        \"The Castro\": 16,\n        \"Nob Hill\": 8,\n        \"Presidio\": 11,\n        \"Marina District\": 6,\n        \"Golden Gate Park\": 15,\n        \"Chinatown\": 11,\n        \"Richmond District\": 12\n    },\n    \"Golden Gate Park\": {\n        \"Mission District\": 17,\n        \"The Castro\": 13,\n        \"Nob Hill\": 20,\n        \"Presidio\": 11,\n        \"Marina District\": 16,\n        \"Pacific Heights\": 16,\n        \"Chinatown\": 23,\n        \"Richmond District\": 7\n    },\n    \"Chinatown\": {\n        \"Mission District\": 17,\n        \"The Castro\": 22,\n        \"Nob Hill\": 9,\n        \"Presidio\": 19,\n        \"Marina District\": 12,\n        \"Pacific Heights\": 10,\n        \"Golden Gate Park\": 23,\n        \"Richmond District\": 20\n    },\n    \"Richmond District\": {\n        \"Mission District\": 20,\n        \"The Castro\": 16,\n        \"Nob Hill\": 17,\n        \"Presidio\": 7,\n        \"Marina District\": 9,\n        \"Pacific Heights\": 10,\n        \"Golden Gate Park\": 9,\n        \"Chinatown\": 20\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Lisa\": {\"start\": datetime(2023, 1, 1, 19, 15), \"end\": datetime(2023, 1, 1, 21, 15), \"min_time\": 120},\n    \"Daniel\": {\"start\": datetime(2023, 1, 1, 8, 15), \"end\": datetime(2023, 1, 1, 11, 0), \"min_time\": 15},\n    \"Elizabeth\": {\"start\": datetime(2023, 1, 1, 21, 15), \"end\": datetime(2023, 1, 1, 22, 15), \"min_time\": 45},\n    \"Steven\": {\"start\": datetime(2023, 1, 1, 16, 30), \"end\": datetime(2023, 1, 1, 20, 45), \"min_time\": 90},\n    \"Timothy\": {\"start\": datetime(2023, 1, 1, 12, 0), \"end\": datetime(2023, 1, 1, 18, 0), \"min_time\": 90},\n    \"Ashley\": {\"start\": datetime(2023, 1, 1, 20, 45), \"end\": datetime(2023, 1, 1, 21, 45), \"min_time\": 60},\n    \"Kevin\": {\"start\": datetime(2023, 1, 1, 12, 0), \"end\": datetime(2023, 1, 1, 19, 0), \"min_time\": 30},\n    \"Betty\": {\"start\": datetime(2023, 1, 1, 13, 15), \"end\": datetime(2023, 1, 1, 15, 45), \"min_time\": 30}\n}\n\n# Define start location and time\nstart_location = \"Mission District\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Lisa\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"The Castro\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Mission District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"The Castro\"))\n        elif person == \"Daniel\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Nob Hill\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Mission District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Nob Hill\"))\n        elif person == \"Elizabeth\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Presidio\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Mission District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Presidio\"))\n        elif person == \"Steven\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Marina District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Mission District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Marina District\"))\n        elif person == \"Timothy\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Pacific Heights\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Mission District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Pacific Heights\"))\n        elif person == \"Ashley\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Golden Gate Park\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Mission District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Golden Gate Park\"))\n        elif person == \"Kevin\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Chinatown\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Mission District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Chinatown\"))\n        elif person == \"Betty\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Richmond District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Mission District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Richmond District\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_701"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Elizabeth",
                        "start_time": "9:00",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joshua",
                        "start_time": "8:30",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Timothy",
                        "start_time": "10:35",
                        "end_time": "12:05"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "David",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Kimberly",
                        "start_time": "11:37",
                        "end_time": "12:52"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Lisa",
                        "start_time": "12:52",
                        "end_time": "13:37"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Ronald",
                        "start_time": "8:00",
                        "end_time": "9:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Stephanie",
                        "start_time": "9:46",
                        "end_time": "10:16"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Helen",
                        "start_time": "10:16",
                        "end_time": "11:01"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Laura",
                        "start_time": "11:01",
                        "end_time": "12:31"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joshua",
                        "start_time": "9:20",
                        "end_time": "11:05"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "David",
                        "start_time": "11:25",
                        "end_time": "11:55"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Stephanie",
                        "start_time": "15:30",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kimberly",
                        "start_time": "16:45",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Lisa",
                        "start_time": "18:07",
                        "end_time": "18:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Timothy",
                        "start_time": "19:45",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"The Castro\": {\n        \"Marina District\": 21,\n        \"Presidio\": 20,\n        \"North Beach\": 20,\n        \"Embarcadero\": 22,\n        \"Haight-Ashbury\": 6,\n        \"Golden Gate Park\": 11,\n        \"Richmond District\": 16,\n        \"Alamo Square\": 8,\n        \"Financial District\": 21,\n        \"Sunset District\": 17\n    },\n    \"Marina District\": {\n        \"The Castro\": 22,\n        \"Presidio\": 10,\n        \"North Beach\": 11,\n        \"Embarcadero\": 14,\n        \"Haight-Ashbury\": 16,\n        \"Golden Gate Park\": 18,\n        \"Richmond District\": 11,\n        \"Alamo Square\": 15,\n        \"Financial District\": 17,\n        \"Sunset District\": 19\n    },\n    \"Presidio\": {\n        \"The Castro\": 21,\n        \"Marina District\": 11,\n        \"North Beach\": 18,\n        \"Embarcadero\": 20,\n        \"Haight-Ashbury\": 15,\n        \"Golden Gate Park\": 12,\n        \"Richmond District\": 7,\n        \"Alamo Square\": 19,\n        \"Financial District\": 23,\n        \"Sunset District\": 15\n    },\n    \"North Beach\": {\n        \"The Castro\": 23,\n        \"Marina District\": 9,\n        \"Presidio\": 17,\n        \"Embarcadero\": 6,\n        \"Haight-Ashbury\": 18,\n        \"Golden Gate Park\": 22,\n        \"Richmond District\": 18,\n        \"Alamo Square\": 16,\n        \"Financial District\": 8,\n        \"Sunset District\": 27\n    },\n    \"Embarcadero\": {\n        \"The Castro\": 25,\n        \"Marina District\": 12,\n        \"Presidio\": 20,\n        \"North Beach\": 5,\n        \"Haight-Ashbury\": 21,\n        \"Golden Gate Park\": 25,\n        \"Richmond District\": 21,\n        \"Alamo Square\": 19,\n        \"Financial District\": 5,\n        \"Sunset District\": 30\n    },\n    \"Haight-Ashbury\": {\n        \"The Castro\": 6,\n        \"Marina District\": 17,\n        \"Presidio\": 15,\n        \"North Beach\": 19,\n        \"Embarcadero\": 20,\n        \"Golden Gate Park\": 7,\n        \"Richmond District\": 10,\n        \"Alamo Square\": 5,\n        \"Financial District\": 21,\n        \"Sunset District\": 15\n    },\n    \"Golden Gate Park\": {\n        \"The Castro\": 13,\n        \"Marina District\": 16,\n        \"Presidio\": 11,\n        \"North Beach\": 23,\n        \"Embarcadero\": 25,\n        \"Haight-Ashbury\": 7,\n        \"Richmond District\": 7,\n        \"Alamo Square\": 9,\n        \"Financial District\": 26,\n        \"Sunset District\": 10\n    },\n    \"Richmond District\": {\n        \"The Castro\": 16,\n        \"Marina District\": 9,\n        \"Presidio\": 7,\n        \"North Beach\": 17,\n        \"Embarcadero\": 19,\n        \"Haight-Ashbury\": 10,\n        \"Golden Gate Park\": 9,\n        \"Alamo Square\": 13,\n        \"Financial District\": 22,\n        \"Sunset District\": 11\n    },\n    \"Alamo Square\": {\n        \"The Castro\": 8,\n        \"Marina District\": 15,\n        \"Presidio\": 17,\n        \"North Beach\": 15,\n        \"Embarcadero\": 16,\n        \"Haight-Ashbury\": 5,\n        \"Golden Gate Park\": 9,\n        \"Richmond District\": 11,\n        \"Financial District\": 17,\n        \"Sunset District\": 16\n    },\n    \"Financial District\": {\n        \"The Castro\": 20,\n        \"Marina District\": 15,\n        \"Presidio\": 22,\n        \"North Beach\": 7,\n        \"Embarcadero\": 4,\n        \"Haight-Ashbury\": 19,\n        \"Golden Gate Park\": 23,\n        \"Richmond District\": 21,\n        \"Alamo Square\": 17,\n        \"Sunset District\": 30\n    },\n    \"Sunset District\": {\n        \"The Castro\": 17,\n        \"Marina District\": 21,\n        \"Presidio\": 16,\n        \"North Beach\": 28,\n        \"Embarcadero\": 30,\n        \"Haight-Ashbury\": 15,\n        \"Golden Gate Park\": 11,\n        \"Richmond District\": 12,\n        \"Alamo Square\": 17,\n        \"Financial District\": 30\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Elizabeth\": {\"start\": datetime(2023, 1, 1, 19, 0), \"end\": datetime(2023, 1, 1, 22, 45), \"min_time\": 105},\n    \"Joshua\": {\"start\": datetime(2023, 1, 1, 8, 30), \"end\": datetime(2023, 1, 1, 11, 15), \"min_time\": 105},\n    \"Timothy\": {\"start\": datetime(2023, 1, 1, 19, 45), \"end\": datetime(2023, 1, 1, 22, 0), \"min_time\": 90},\n    \"David\": {\"start\": datetime(2023, 1, 1, 10, 45), \"end\": datetime(2023, 1, 1, 12, 30), \"min_time\": 30},\n    \"Kimberly\": {\"start\": datetime(2023, 1, 1, 16, 45), \"end\": datetime(2023, 1, 1, 21, 30), \"min_time\": 75},\n    \"Lisa\": {\"start\": datetime(2023, 1, 1, 17, 30), \"end\": datetime(2023, 1, 1, 22, 45), \"min_time\": 45},\n    \"Ronald\": {\"start\": datetime(2023, 1, 1, 8, 0), \"end\": datetime(2023, 1, 1, 9, 30), \"min_time\": 90},\n    \"Stephanie\": {\"start\": datetime(2023, 1, 1, 15, 30), \"end\": datetime(2023, 1, 1, 16, 30), \"min_time\": 30},\n    \"Helen\": {\"start\": datetime(2023, 1, 1, 17, 30), \"end\": datetime(2023, 1, 1, 18, 30), \"min_time\": 45},\n    \"Laura\": {\"start\": datetime(2023, 1, 1, 17, 45), \"end\": datetime(2023, 1, 1, 22, 15), \"min_time\": 90}\n}\n\n# Define start location and time\nstart_location = \"The Castro\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Elizabeth\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Marina District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Marina District\"))\n        elif person == \"Joshua\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Presidio\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Presidio\"))\n        elif person == \"Timothy\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"North Beach\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"North Beach\"))\n        elif person == \"David\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Embarcadero\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Embarcadero\"))\n        elif person == \"Kimberly\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Haight-Ashbury\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Haight-Ashbury\"))\n        elif person == \"Lisa\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Golden Gate Park\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Golden Gate Park\"))\n        elif person == \"Ronald\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Richmond District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Richmond District\"))\n        elif person == \"Stephanie\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Alamo Square\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Alamo Square\"))\n        elif person == \"Helen\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Financial District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Financial District\"))\n        elif person == \"Laura\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Sunset District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Sunset District\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_962"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Joshua",
                        "start_time": "9:00",
                        "end_time": "9:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Joshua",
                        "start_time": "20:45",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Sunset District\": {\n        \"Golden Gate Park\": 11,\n        \"Golden Gate Park\": 10\n    },\n    \"Golden Gate Park\": {\n        \"Sunset District\": 10,\n        \"Sunset District\": 11\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Joshua\": {\"start\": datetime(2023, 1, 1, 20, 45), \"end\": datetime(2023, 1, 1, 21, 45), \"min_time\": 15}\n}\n\n# Define start location and time\nstart_location = \"Sunset District\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Joshua\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Golden Gate Park\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Sunset District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Golden Gate Park\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_88"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Jessica",
                        "start_time": "9:00",
                        "end_time": "9:30"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Ashley",
                        "start_time": "9:30",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Ronald",
                        "start_time": "11:15",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "William",
                        "start_time": "12:45",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Daniel",
                        "start_time": "7:00",
                        "end_time": "8:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Daniel",
                        "start_time": "9:26",
                        "end_time": "11:11"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Ronald",
                        "start_time": "11:27",
                        "end_time": "12:57"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jessica",
                        "start_time": "13:45",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Ashley",
                        "start_time": "17:15",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "William",
                        "start_time": "19:21",
                        "end_time": "19:36"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Presidio\": {\n        \"Golden Gate Park\": 12,\n        \"Bayview\": 31,\n        \"Chinatown\": 21,\n        \"North Beach\": 18,\n        \"Mission District\": 26\n    },\n    \"Golden Gate Park\": {\n        \"Presidio\": 11,\n        \"Bayview\": 23,\n        \"Chinatown\": 23,\n        \"North Beach\": 24,\n        \"Mission District\": 17\n    },\n    \"Bayview\": {\n        \"Presidio\": 31,\n        \"Golden Gate Park\": 22,\n        \"Chinatown\": 18,\n        \"North Beach\": 21,\n        \"Mission District\": 13\n    },\n    \"Chinatown\": {\n        \"Presidio\": 19,\n        \"Golden Gate Park\": 23,\n        \"Bayview\": 22,\n        \"North Beach\": 3,\n        \"Mission District\": 18\n    },\n    \"North Beach\": {\n        \"Presidio\": 17,\n        \"Golden Gate Park\": 22,\n        \"Bayview\": 22,\n        \"Chinatown\": 6,\n        \"Mission District\": 17\n    },\n    \"Mission District\": {\n        \"Presidio\": 25,\n        \"Golden Gate Park\": 17,\n        \"Bayview\": 15,\n        \"Chinatown\": 16,\n        \"North Beach\": 17\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Jessica\": {\"start\": datetime(2023, 1, 1, 13, 45), \"end\": datetime(2023, 1, 1, 15, 0), \"min_time\": 30},\n    \"Ashley\": {\"start\": datetime(2023, 1, 1, 17, 15), \"end\": datetime(2023, 1, 1, 20, 0), \"min_time\": 105},\n    \"Ronald\": {\"start\": datetime(2023, 1, 1, 7, 15), \"end\": datetime(2023, 1, 1, 14, 45), \"min_time\": 90},\n    \"William\": {\"start\": datetime(2023, 1, 1, 13, 15), \"end\": datetime(2023, 1, 1, 20, 15), \"min_time\": 15},\n    \"Daniel\": {\"start\": datetime(2023, 1, 1, 7, 0), \"end\": datetime(2023, 1, 1, 11, 15), \"min_time\": 105}\n}\n\n# Define start location and time\nstart_location = \"Presidio\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Jessica\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Golden Gate Park\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Presidio\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Golden Gate Park\"))\n        elif person == \"Ashley\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Bayview\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Presidio\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Bayview\"))\n        elif person == \"Ronald\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Chinatown\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Presidio\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Chinatown\"))\n        elif person == \"William\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"North Beach\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Presidio\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"North Beach\"))\n        elif person == \"Daniel\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Mission District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Presidio\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Mission District\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_454"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Patricia",
                        "start_time": "9:00",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Ashley",
                        "start_time": "10:30",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Timothy",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Timothy",
                        "start_time": "9:45",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "18:30",
                        "end_time": "20:00"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Ashley",
                        "start_time": "20:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Russian Hill\": {\n        \"Nob Hill\": 5,\n        \"Mission District\": 16,\n        \"Embarcadero\": 8\n    },\n    \"Nob Hill\": {\n        \"Russian Hill\": 5,\n        \"Mission District\": 13,\n        \"Embarcadero\": 9\n    },\n    \"Mission District\": {\n        \"Russian Hill\": 15,\n        \"Nob Hill\": 12,\n        \"Embarcadero\": 19\n    },\n    \"Embarcadero\": {\n        \"Russian Hill\": 8,\n        \"Nob Hill\": 10,\n        \"Mission District\": 20\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Patricia\": {\"start\": datetime(2023, 1, 1, 18, 30), \"end\": datetime(2023, 1, 1, 21, 45), \"min_time\": 90},\n    \"Ashley\": {\"start\": datetime(2023, 1, 1, 20, 30), \"end\": datetime(2023, 1, 1, 21, 15), \"min_time\": 45},\n    \"Timothy\": {\"start\": datetime(2023, 1, 1, 9, 45), \"end\": datetime(2023, 1, 1, 17, 45), \"min_time\": 120}\n}\n\n# Define start location and time\nstart_location = \"Russian Hill\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Patricia\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Nob Hill\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Russian Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Nob Hill\"))\n        elif person == \"Ashley\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Mission District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Russian Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Mission District\"))\n        elif person == \"Timothy\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Embarcadero\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Russian Hill\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Embarcadero\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_272"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "James",
                        "start_time": "9:00",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Robert",
                        "start_time": "11:00",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Jeffrey",
                        "start_time": "12:30",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Carol",
                        "start_time": "14:30",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Mark",
                        "start_time": "14:45",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sandra",
                        "start_time": "15:00",
                        "end_time": "15:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "9:30",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "12:15",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mark",
                        "start_time": "14:08",
                        "end_time": "14:23"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Sandra",
                        "start_time": "14:43",
                        "end_time": "14:58"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Carol",
                        "start_time": "18:15",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "James",
                        "start_time": "20:00",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"North Beach\": {\n        \"Pacific Heights\": 8,\n        \"Chinatown\": 6,\n        \"Union Square\": 7,\n        \"Mission District\": 18,\n        \"Golden Gate Park\": 22,\n        \"Nob Hill\": 7\n    },\n    \"Pacific Heights\": {\n        \"North Beach\": 9,\n        \"Chinatown\": 11,\n        \"Union Square\": 12,\n        \"Mission District\": 15,\n        \"Golden Gate Park\": 15,\n        \"Nob Hill\": 8\n    },\n    \"Chinatown\": {\n        \"North Beach\": 3,\n        \"Pacific Heights\": 10,\n        \"Union Square\": 7,\n        \"Mission District\": 18,\n        \"Golden Gate Park\": 23,\n        \"Nob Hill\": 8\n    },\n    \"Union Square\": {\n        \"North Beach\": 10,\n        \"Pacific Heights\": 15,\n        \"Chinatown\": 7,\n        \"Mission District\": 14,\n        \"Golden Gate Park\": 22,\n        \"Nob Hill\": 9\n    },\n    \"Mission District\": {\n        \"North Beach\": 17,\n        \"Pacific Heights\": 16,\n        \"Chinatown\": 16,\n        \"Union Square\": 15,\n        \"Golden Gate Park\": 17,\n        \"Nob Hill\": 12\n    },\n    \"Golden Gate Park\": {\n        \"North Beach\": 24,\n        \"Pacific Heights\": 16,\n        \"Chinatown\": 23,\n        \"Union Square\": 22,\n        \"Mission District\": 17,\n        \"Nob Hill\": 20\n    },\n    \"Nob Hill\": {\n        \"North Beach\": 8,\n        \"Pacific Heights\": 8,\n        \"Chinatown\": 6,\n        \"Union Square\": 7,\n        \"Mission District\": 13,\n        \"Golden Gate Park\": 17\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"James\": {\"start\": datetime(2023, 1, 1, 20, 0), \"end\": datetime(2023, 1, 1, 22, 0), \"min_time\": 120},\n    \"Robert\": {\"start\": datetime(2023, 1, 1, 12, 15), \"end\": datetime(2023, 1, 1, 17, 45), \"min_time\": 90},\n    \"Jeffrey\": {\"start\": datetime(2023, 1, 1, 9, 30), \"end\": datetime(2023, 1, 1, 15, 30), \"min_time\": 120},\n    \"Carol\": {\"start\": datetime(2023, 1, 1, 18, 15), \"end\": datetime(2023, 1, 1, 19, 15), \"min_time\": 15},\n    \"Mark\": {\"start\": datetime(2023, 1, 1, 11, 30), \"end\": datetime(2023, 1, 1, 17, 45), \"min_time\": 15},\n    \"Sandra\": {\"start\": datetime(2023, 1, 1, 8, 0), \"end\": datetime(2023, 1, 1, 15, 30), \"min_time\": 15}\n}\n\n# Define start location and time\nstart_location = \"North Beach\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"James\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Pacific Heights\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"North Beach\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Pacific Heights\"))\n        elif person == \"Robert\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Chinatown\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"North Beach\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Chinatown\"))\n        elif person == \"Jeffrey\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Union Square\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"North Beach\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Union Square\"))\n        elif person == \"Carol\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Mission District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"North Beach\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Mission District\"))\n        elif person == \"Mark\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Golden Gate Park\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"North Beach\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Golden Gate Park\"))\n        elif person == \"Sandra\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Nob Hill\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"North Beach\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Nob Hill\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_592"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Laura",
                        "start_time": "9:00",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Anthony",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Laura",
                        "start_time": "12:15",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "13:47",
                        "end_time": "14:17"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"The Castro\": {\n        \"Mission District\": 7,\n        \"Financial District\": 20\n    },\n    \"Mission District\": {\n        \"The Castro\": 7,\n        \"Financial District\": 17\n    },\n    \"Financial District\": {\n        \"The Castro\": 23,\n        \"Mission District\": 17\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Laura\": {\"start\": datetime(2023, 1, 1, 12, 15), \"end\": datetime(2023, 1, 1, 19, 45), \"min_time\": 75},\n    \"Anthony\": {\"start\": datetime(2023, 1, 1, 12, 30), \"end\": datetime(2023, 1, 1, 14, 45), \"min_time\": 30}\n}\n\n# Define start location and time\nstart_location = \"The Castro\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Laura\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Mission District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Mission District\"))\n        elif person == \"Anthony\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Financial District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"The Castro\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Financial District\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_144"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Matthew",
                        "start_time": "9:00",
                        "end_time": "9:45"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Rebecca",
                        "start_time": "9:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Brian",
                        "start_time": "11:30",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "12:00",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Karen",
                        "start_time": "12:15",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Stephanie",
                        "start_time": "12:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "James",
                        "start_time": "14:00",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Steven",
                        "start_time": "16:00",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Elizabeth",
                        "start_time": "13:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "William",
                        "start_time": "15:13",
                        "end_time": "16:43"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Emily",
                        "start_time": "11:15",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Karen",
                        "start_time": "11:45",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "13:00",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "James",
                        "start_time": "14:31",
                        "end_time": "16:31"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Steven",
                        "start_time": "16:38",
                        "end_time": "17:08"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Matthew",
                        "start_time": "17:29",
                        "end_time": "18:14"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "William",
                        "start_time": "18:33",
                        "end_time": "20:03"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Brian",
                        "start_time": "20:30",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    \"Richmond District\": {\n        \"The Castro\": 16,\n        \"Nob Hill\": 17,\n        \"Marina District\": 9,\n        \"Pacific Heights\": 10,\n        \"Haight-Ashbury\": 10,\n        \"Mission District\": 20,\n        \"Chinatown\": 20,\n        \"Russian Hill\": 13,\n        \"Alamo Square\": 13,\n        \"Bayview\": 27\n    },\n    \"The Castro\": {\n        \"Richmond District\": 16,\n        \"Nob Hill\": 16,\n        \"Marina District\": 21,\n        \"Pacific Heights\": 16,\n        \"Haight-Ashbury\": 6,\n        \"Mission District\": 7,\n        \"Chinatown\": 22,\n        \"Russian Hill\": 18,\n        \"Alamo Square\": 8,\n        \"Bayview\": 19\n    },\n    \"Nob Hill\": {\n        \"Richmond District\": 14,\n        \"The Castro\": 17,\n        \"Marina District\": 11,\n        \"Pacific Heights\": 8,\n        \"Haight-Ashbury\": 13,\n        \"Mission District\": 13,\n        \"Chinatown\": 6,\n        \"Russian Hill\": 5,\n        \"Alamo Square\": 11,\n        \"Bayview\": 19\n    },\n    \"Marina District\": {\n        \"Richmond District\": 11,\n        \"The Castro\": 22,\n        \"Nob Hill\": 12,\n        \"Pacific Heights\": 7,\n        \"Haight-Ashbury\": 16,\n        \"Mission District\": 20,\n        \"Chinatown\": 15,\n        \"Russian Hill\": 8,\n        \"Alamo Square\": 15,\n        \"Bayview\": 27\n    },\n    \"Pacific Heights\": {\n        \"Richmond District\": 12,\n        \"The Castro\": 16,\n        \"Nob Hill\": 8,\n        \"Marina District\": 6,\n        \"Haight-Ashbury\": 11,\n        \"Mission District\": 15,\n        \"Chinatown\": 11,\n        \"Russian Hill\": 7,\n        \"Alamo Square\": 10,\n        \"Bayview\": 22\n    },\n    \"Haight-Ashbury\": {\n        \"Richmond District\": 10,\n        \"The Castro\": 6,\n        \"Nob Hill\": 15,\n        \"Marina District\": 17,\n        \"Pacific Heights\": 12,\n        \"Mission District\": 11,\n        \"Chinatown\": 19,\n        \"Russian Hill\": 17,\n        \"Alamo Square\": 5,\n        \"Bayview\": 18\n    },\n    \"Mission District\": {\n        \"Richmond District\": 20,\n        \"The Castro\": 7,\n        \"Nob Hill\": 12,\n        \"Marina District\": 19,\n        \"Pacific Heights\": 16,\n        \"Haight-Ashbury\": 12,\n        \"Chinatown\": 16,\n        \"Russian Hill\": 15,\n        \"Alamo Square\": 11,\n        \"Bayview\": 14\n    },\n    \"Chinatown\": {\n        \"Richmond District\": 20,\n        \"The Castro\": 22,\n        \"Nob Hill\": 9,\n        \"Marina District\": 12,\n        \"Pacific Heights\": 10,\n        \"Haight-Ashbury\": 19,\n        \"Mission District\": 17,\n        \"Russian Hill\": 7,\n        \"Alamo Square\": 17,\n        \"Bayview\": 20\n    },\n    \"Russian Hill\": {\n        \"Richmond District\": 14,\n        \"The Castro\": 21,\n        \"Nob Hill\": 5,\n        \"Marina District\": 7,\n        \"Pacific Heights\": 7,\n        \"Haight-Ashbury\": 17,\n        \"Mission District\": 16,\n        \"Chinatown\": 9,\n        \"Alamo Square\": 15,\n        \"Bayview\": 23\n    },\n    \"Alamo Square\": {\n        \"Richmond District\": 11,\n        \"The Castro\": 8,\n        \"Nob Hill\": 11,\n        \"Marina District\": 15,\n        \"Pacific Heights\": 10,\n        \"Haight-Ashbury\": 5,\n        \"Mission District\": 10,\n        \"Chinatown\": 15,\n        \"Russian Hill\": 13,\n        \"Bayview\": 16\n    },\n    \"Bayview\": {\n        \"Richmond District\": 25,\n        \"The Castro\": 19,\n        \"Nob Hill\": 20,\n        \"Marina District\": 27,\n        \"Pacific Heights\": 23,\n        \"Haight-Ashbury\": 19,\n        \"Mission District\": 13,\n        \"Chinatown\": 19,\n        \"Russian Hill\": 23,\n        \"Alamo Square\": 16\n    }\n}\n\n# Define constraints\nconstraints = {\n    \"Matthew\": {\"start\": datetime(2023, 1, 1, 16, 30), \"end\": datetime(2023, 1, 1, 20, 0), \"min_time\": 45},\n    \"Rebecca\": {\"start\": datetime(2023, 1, 1, 15, 15), \"end\": datetime(2023, 1, 1, 19, 15), \"min_time\": 105},\n    \"Brian\": {\"start\": datetime(2023, 1, 1, 14, 15), \"end\": datetime(2023, 1, 1, 22, 0), \"min_time\": 30},\n    \"Emily\": {\"start\": datetime(2023, 1, 1, 11, 15), \"end\": datetime(2023, 1, 1, 19, 45), \"min_time\": 15},\n    \"Karen\": {\"start\": datetime(2023, 1, 1, 11, 45), \"end\": datetime(2023, 1, 1, 17, 30), \"min_time\": 30},\n    \"Stephanie\": {\"start\": datetime(2023, 1, 1, 13, 0), \"end\": datetime(2023, 1, 1, 16, 45), \"min_time\": 75},\n    \"James\": {\"start\": datetime(2023, 1, 1, 14, 30), \"end\": datetime(2023, 1, 1, 19, 0), \"min_time\": 120},\n    \"Steven\": {\"start\": datetime(2023, 1, 1, 14, 0), \"end\": datetime(2023, 1, 1, 20, 0), \"min_time\": 30},\n    \"Elizabeth\": {\"start\": datetime(2023, 1, 1, 13, 0), \"end\": datetime(2023, 1, 1, 17, 15), \"min_time\": 120},\n    \"William\": {\"start\": datetime(2023, 1, 1, 18, 15), \"end\": datetime(2023, 1, 1, 20, 15), \"min_time\": 90}\n}\n\n# Define start location and time\nstart_location = \"Richmond District\"\nstart_time = datetime(2023, 1, 1, 9, 0)\n\n# Initialize schedule\nschedule = []\n\n# Function to calculate travel time\ndef calculate_travel_time(location1, location2):\n    return travel_times[location1][location2]\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(person, start_time, end_time, location):\n    return constraints[person][\"start\"] <= start_time and constraints[person][\"end\"] >= end_time and location == constraints[person][\"location\"]\n\n# Function to schedule a meeting\ndef schedule_meeting(person, start_time, end_time, location):\n    schedule.append({\"action\": \"meet\", \"location\": location, \"person\": person, \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n\n# Main function to generate schedule\ndef generate_schedule():\n    current_time = start_time\n    current_location = start_location\n\n    # Schedule meetings\n    for person, constraint in constraints.items():\n        if person == \"Matthew\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"The Castro\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Richmond District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"The Castro\"))\n        elif person == \"Rebecca\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Nob Hill\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Richmond District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Nob Hill\"))\n        elif person == \"Brian\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Marina District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Richmond District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Marina District\"))\n        elif person == \"Emily\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Pacific Heights\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Richmond District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Pacific Heights\"))\n        elif person == \"Karen\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Haight-Ashbury\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Richmond District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Haight-Ashbury\"))\n        elif person == \"Stephanie\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Mission District\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Richmond District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Mission District\"))\n        elif person == \"James\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Chinatown\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Richmond District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Chinatown\"))\n        elif person == \"Steven\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Russian Hill\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Richmond District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Russian Hill\"))\n        elif person == \"Elizabeth\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Alamo Square\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Richmond District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Alamo Square\"))\n        elif person == \"William\":\n            if current_time + timedelta(minutes=constraints[person][\"min_time\"]) <= constraint[\"end\"]:\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n            else:\n                current_location = \"Bayview\"\n                current_time = constraint[\"start\"]\n                schedule_meeting(person, current_time, current_time + timedelta(minutes=constraints[person][\"min_time\"]), current_location)\n                current_time += timedelta(minutes=constraints[person][\"min_time\"])\n                current_location = \"Richmond District\"\n                current_time = current_time + timedelta(minutes=calculate_travel_time(current_location, \"Bayview\"))\n\n    # Return schedule as JSON\n    return json.dumps({\"itinerary\": schedule}, indent=4)\n\n# Generate schedule\nschedule = generate_schedule()\n\n# Print schedule\nprint(schedule)\n```",
            "count": "meeting_planning_example_900"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Jason",
                        "start_time": "9:21",
                        "end_time": "10:36"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kenneth",
                        "start_time": "10:39",
                        "end_time": "11:09"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "11:18",
                        "end_time": "12:33"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Kimberly",
                        "start_time": "12:47",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "14:12",
                        "end_time": "15:42"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "15:47",
                        "end_time": "16:47"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Stephanie",
                        "start_time": "16:57",
                        "end_time": "18:42"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Steven",
                        "start_time": "18:51",
                        "end_time": "19:51"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Karen",
                        "start_time": "21:00",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Define travel distances in minutes\ntravel_distances = {\n    \"Presidio\": {\n        \"Haight-Ashbury\": 15,\n        \"Nob Hill\": 18,\n        \"Russian Hill\": 14,\n        \"North Beach\": 18,\n        \"Chinatown\": 21,\n        \"Union Square\": 22,\n        \"Embarcadero\": 20,\n        \"Financial District\": 23,\n        \"Marina District\": 11\n    },\n    \"Haight-Ashbury\": {\n        \"Presidio\": 15,\n        \"Nob Hill\": 15,\n        \"Russian Hill\": 17,\n        \"North Beach\": 19,\n        \"Chinatown\": 19,\n        \"Union Square\": 19,\n        \"Embarcadero\": 20,\n        \"Financial District\": 21,\n        \"Marina District\": 17\n    },\n    \"Nob Hill\": {\n        \"Presidio\": 17,\n        \"Haight-Ashbury\": 13,\n        \"Russian Hill\": 5,\n        \"North Beach\": 8,\n        \"Chinatown\": 6,\n        \"Union Square\": 7,\n        \"Embarcadero\": 9,\n        \"Financial District\": 9,\n        \"Marina District\": 11\n    },\n    \"Russian Hill\": {\n        \"Presidio\": 14,\n        \"Haight-Ashbury\": 17,\n        \"Nob Hill\": 5,\n        \"North Beach\": 5,\n        \"Chinatown\": 9,\n        \"Union Square\": 10,\n        \"Embarcadero\": 8,\n        \"Financial District\": 11,\n        \"Marina District\": 7\n    },\n    \"North Beach\": {\n        \"Presidio\": 17,\n        \"Haight-Ashbury\": 18,\n        \"Nob Hill\": 7,\n        \"Russian Hill\": 4,\n        \"Chinatown\": 6,\n        \"Union Square\": 7,\n        \"Embarcadero\": 6,\n        \"Financial District\": 8,\n        \"Marina District\": 9\n    },\n    \"Chinatown\": {\n        \"Presidio\": 19,\n        \"Haight-Ashbury\": 19,\n        \"Nob Hill\": 9,\n        \"Russian Hill\": 7,\n        \"North Beach\": 3,\n        \"Union Square\": 7,\n        \"Embarcadero\": 5,\n        \"Financial District\": 5,\n        \"Marina District\": 12\n    },\n    \"Union Square\": {\n        \"Presidio\": 24,\n        \"Haight-Ashbury\": 18,\n        \"Nob Hill\": 9,\n        \"Russian Hill\": 13,\n        \"North Beach\": 10,\n        \"Chinatown\": 7,\n        \"Embarcadero\": 11,\n        \"Financial District\": 9,\n        \"Marina District\": 18\n    },\n    \"Embarcadero\": {\n        \"Presidio\": 20,\n        \"Haight-Ashbury\": 21,\n        \"Nob Hill\": 10,\n        \"Russian Hill\": 8,\n        \"North Beach\": 5,\n        \"Chinatown\": 7,\n        \"Union Square\": 10,\n        \"Financial District\": 5,\n        \"Marina District\": 12\n    },\n    \"Financial District\": {\n        \"Presidio\": 22,\n        \"Haight-Ashbury\": 19,\n        \"Nob Hill\": 8,\n        \"Russian Hill\": 11,\n        \"North Beach\": 7,\n        \"Chinatown\": 5,\n        \"Union Square\": 9,\n        \"Embarcadero\": 4,\n        \"Marina District\": 15\n    },\n    \"Marina District\": {\n        \"Presidio\": 10,\n        \"Haight-Ashbury\": 16,\n        \"Nob Hill\": 12,\n        \"Russian Hill\": 8,\n        \"North Beach\": 11,\n        \"Chinatown\": 15,\n        \"Union Square\": 16,\n        \"Embarcadero\": 14,\n        \"Financial District\": 17\n    }\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Karen\": {\"location\": \"Haight-Ashbury\", \"start_time\": \"21:00\", \"end_time\": \"21:45\", \"duration\": 45},\n    \"Jessica\": {\"location\": \"Nob Hill\", \"start_time\": \"13:45\", \"end_time\": \"21:00\", \"duration\": 90},\n    \"Brian\": {\"location\": \"Russian Hill\", \"start_time\": \"15:30\", \"end_time\": \"21:45\", \"duration\": 60},\n    \"Kenneth\": {\"location\": \"North Beach\", \"start_time\": \"09:45\", \"end_time\": \"21:00\", \"duration\": 30},\n    \"Jason\": {\"location\": \"Chinatown\", \"start_time\": \"08:15\", \"end_time\": \"11:45\", \"duration\": 75},\n    \"Stephanie\": {\"location\": \"Union Square\", \"start_time\": \"14:45\", \"end_time\": \"18:45\", \"duration\": 105},\n    \"Kimberly\": {\"location\": \"Embarcadero\", \"start_time\": \"09:45\", \"end_time\": \"19:30\", \"duration\": 75},\n    \"Steven\": {\"location\": \"Financial District\", \"start_time\": \"07:15\", \"end_time\": \"21:15\", \"duration\": 60},\n    \"Mark\": {\"location\": \"Marina District\", \"start_time\": \"10:15\", \"end_time\": \"13:00\", \"duration\": 75}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef check_constraint(person, start_time, end_time):\n    constraint = constraints[person]\n    if start_time >= constraint[\"start_time\"] and end_time <= constraint[\"end_time\"]:\n        return True\n    return False\n\ndef schedule_meeting(person, start_time, end_time):\n    if check_constraint(person, start_time, end_time):\n        return {\"action\": \"meet\", \"location\": constraints[person][\"location\"], \"person\": person, \"start_time\": start_time, \"end_time\": end_time}\n    return None\n\ndef generate_itinerary():\n    start_time = \"09:00\"\n    end_time = \"21:00\"\n    start_location = \"Presidio\"\n    itinerary = []\n    \n    # Generate all possible meeting times\n    for hour in range(9, 21):\n        for minute in range(0, 60):\n            meeting_time = f\"{hour:02d}:{minute:02d}\"\n            if meeting_time >= constraints[\"Karen\"][\"start_time\"] and meeting_time <= constraints[\"Karen\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Karen\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Jessica\"][\"start_time\"] and meeting_time <= constraints[\"Jessica\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Jessica\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Brian\"][\"start_time\"] and meeting_time <= constraints[\"Brian\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Brian\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Kenneth\"][\"start_time\"] and meeting_time <= constraints[\"Kenneth\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Kenneth\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Jason\"][\"start_time\"] and meeting_time <= constraints[\"Jason\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Jason\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Stephanie\"][\"start_time\"] and meeting_time <= constraints[\"Stephanie\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Stephanie\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Kimberly\"][\"start_time\"] and meeting_time <= constraints[\"Kimberly\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Kimberly\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Steven\"][\"start_time\"] and meeting_time <= constraints[\"Steven\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Steven\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Mark\"][\"start_time\"] and meeting_time <= constraints[\"Mark\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Mark\", meeting_time, meeting_time))\n    \n    # Remove duplicates and sort by start time\n    itinerary = list(set(itinerary))\n    itinerary.sort(key=lambda x: x[\"start_time\"])\n    \n    return itinerary\n\ndef optimize_itinerary(itinerary):\n    optimized_itinerary = []\n    current_location = \"Presidio\"\n    for meeting in itinerary:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"])\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        optimized_itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n        current_location = meeting[\"location\"]\n    return optimized_itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    optimized_itinerary = optimize_itinerary(itinerary)\n    result = {\"itinerary\": optimized_itinerary}\n    print(json.dumps(result, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_872"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Paul",
                        "start_time": "16:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "17:32",
                        "end_time": "18:17"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Matthew",
                        "start_time": "18:35",
                        "end_time": "19:50"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jeffrey",
                        "start_time": "20:00",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "20:56",
                        "end_time": "21:26"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Define travel distances in minutes\ntravel_distances = {\n    \"Bayview\": {\n        \"Nob Hill\": 20,\n        \"Union Square\": 17,\n        \"Chinatown\": 18,\n        \"The Castro\": 20,\n        \"Presidio\": 31,\n        \"Pacific Heights\": 23,\n        \"Russian Hill\": 23\n    },\n    \"Nob Hill\": {\n        \"Bayview\": 19,\n        \"Union Square\": 7,\n        \"Chinatown\": 6,\n        \"The Castro\": 17,\n        \"Presidio\": 17,\n        \"Pacific Heights\": 8,\n        \"Russian Hill\": 5\n    },\n    \"Union Square\": {\n        \"Bayview\": 15,\n        \"Nob Hill\": 9,\n        \"Chinatown\": 7,\n        \"The Castro\": 19,\n        \"Presidio\": 24,\n        \"Pacific Heights\": 15,\n        \"Russian Hill\": 13\n    },\n    \"Chinatown\": {\n        \"Bayview\": 22,\n        \"Nob Hill\": 8,\n        \"Union Square\": 7,\n        \"The Castro\": 22,\n        \"Presidio\": 19,\n        \"Pacific Heights\": 10,\n        \"Russian Hill\": 7\n    },\n    \"The Castro\": {\n        \"Bayview\": 19,\n        \"Nob Hill\": 16,\n        \"Union Square\": 19,\n        \"Chinatown\": 20,\n        \"Presidio\": 20,\n        \"Pacific Heights\": 16,\n        \"Russian Hill\": 18\n    },\n    \"Presidio\": {\n        \"Bayview\": 31,\n        \"Nob Hill\": 18,\n        \"Union Square\": 22,\n        \"Chinatown\": 21,\n        \"The Castro\": 21,\n        \"Pacific Heights\": 11,\n        \"Russian Hill\": 14\n    },\n    \"Pacific Heights\": {\n        \"Bayview\": 22,\n        \"Nob Hill\": 8,\n        \"Union Square\": 12,\n        \"Chinatown\": 11,\n        \"The Castro\": 16,\n        \"Presidio\": 11,\n        \"Russian Hill\": 7\n    },\n    \"Russian Hill\": {\n        \"Bayview\": 23,\n        \"Nob Hill\": 5,\n        \"Union Square\": 11,\n        \"Chinatown\": 9,\n        \"The Castro\": 21,\n        \"Presidio\": 14,\n        \"Pacific Heights\": 7\n    }\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Paul\": {\"location\": \"Nob Hill\", \"start_time\": \"16:15\", \"end_time\": \"21:15\", \"duration\": 60},\n    \"Carol\": {\"location\": \"Union Square\", \"start_time\": \"18:00\", \"end_time\": \"20:15\", \"duration\": 120},\n    \"Patricia\": {\"location\": \"Chinatown\", \"start_time\": \"20:00\", \"end_time\": \"21:30\", \"duration\": 75},\n    \"Karen\": {\"location\": \"The Castro\", \"start_time\": \"17:00\", \"end_time\": \"19:00\", \"duration\": 45},\n    \"Nancy\": {\"location\": \"Presidio\", \"start_time\": \"11:45\", \"end_time\": \"22:00\", \"duration\": 30},\n    \"Jeffrey\": {\"location\": \"Pacific Heights\", \"start_time\": \"20:00\", \"end_time\": \"20:45\", \"duration\": 45},\n    \"Matthew\": {\"location\": \"Russian Hill\", \"start_time\": \"15:45\", \"end_time\": \"21:45\", \"duration\": 75}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef check_constraint(person, start_time, end_time):\n    constraint = constraints[person]\n    if start_time >= constraint[\"start_time\"] and end_time <= constraint[\"end_time\"]:\n        return True\n    return False\n\ndef schedule_meeting(person, start_time, end_time):\n    if check_constraint(person, start_time, end_time):\n        return {\"action\": \"meet\", \"location\": constraints[person][\"location\"], \"person\": person, \"start_time\": start_time, \"end_time\": end_time}\n    return None\n\ndef generate_itinerary():\n    start_time = \"09:00\"\n    end_time = \"21:00\"\n    start_location = \"Bayview\"\n    itinerary = []\n    \n    # Generate all possible meeting times\n    for hour in range(9, 21):\n        for minute in range(0, 60):\n            meeting_time = f\"{hour:02d}:{minute:02d}\"\n            if meeting_time >= constraints[\"Paul\"][\"start_time\"] and meeting_time <= constraints[\"Paul\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Paul\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Carol\"][\"start_time\"] and meeting_time <= constraints[\"Carol\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Carol\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Patricia\"][\"start_time\"] and meeting_time <= constraints[\"Patricia\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Patricia\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Karen\"][\"start_time\"] and meeting_time <= constraints[\"Karen\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Karen\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Nancy\"][\"start_time\"] and meeting_time <= constraints[\"Nancy\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Nancy\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Jeffrey\"][\"start_time\"] and meeting_time <= constraints[\"Jeffrey\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Jeffrey\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Matthew\"][\"start_time\"] and meeting_time <= constraints[\"Matthew\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Matthew\", meeting_time, meeting_time))\n    \n    # Remove duplicates and sort by start time\n    itinerary = list(set(itinerary))\n    itinerary.sort(key=lambda x: x[\"start_time\"])\n    \n    return itinerary\n\ndef optimize_itinerary(itinerary):\n    optimized_itinerary = []\n    current_location = \"Bayview\"\n    for meeting in itinerary:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"])\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        optimized_itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n        current_location = meeting[\"location\"]\n    return optimized_itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    optimized_itinerary = optimize_itinerary(itinerary)\n    result = {\"itinerary\": optimized_itinerary}\n    print(json.dumps(result, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_695"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Timothy",
                        "start_time": "12:00",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "18:45",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "19:59",
                        "end_time": "20:59"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Define travel distances in minutes\ntravel_distances = {\n    \"Golden Gate Park\": {\n        \"Alamo Square\": 10,\n        \"Presidio\": 11,\n        \"Russian Hill\": 19\n    },\n    \"Alamo Square\": {\n        \"Golden Gate Park\": 9,\n        \"Presidio\": 18,\n        \"Russian Hill\": 13\n    },\n    \"Presidio\": {\n        \"Golden Gate Park\": 12,\n        \"Alamo Square\": 18,\n        \"Russian Hill\": 14\n    },\n    \"Russian Hill\": {\n        \"Golden Gate Park\": 21,\n        \"Alamo Square\": 15,\n        \"Presidio\": 14\n    }\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Timothy\": {\"location\": \"Alamo Square\", \"start_time\": \"12:00\", \"end_time\": \"16:15\", \"duration\": 105},\n    \"Mark\": {\"location\": \"Presidio\", \"start_time\": \"18:45\", \"end_time\": \"21:00\", \"duration\": 60},\n    \"Joseph\": {\"location\": \"Russian Hill\", \"start_time\": \"16:45\", \"end_time\": \"21:30\", \"duration\": 60}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef check_constraint(person, start_time, end_time):\n    constraint = constraints[person]\n    if start_time >= constraint[\"start_time\"] and end_time <= constraint[\"end_time\"]:\n        return True\n    return False\n\ndef schedule_meeting(person, start_time, end_time):\n    if check_constraint(person, start_time, end_time):\n        return {\"action\": \"meet\", \"location\": constraints[person][\"location\"], \"person\": person, \"start_time\": start_time, \"end_time\": end_time}\n    return None\n\ndef generate_itinerary():\n    start_time = \"09:00\"\n    end_time = \"21:00\"\n    start_location = \"Golden Gate Park\"\n    itinerary = []\n    \n    # Generate all possible meeting times\n    for hour in range(9, 21):\n        for minute in range(0, 60):\n            meeting_time = f\"{hour:02d}:{minute:02d}\"\n            if meeting_time >= constraints[\"Timothy\"][\"start_time\"] and meeting_time <= constraints[\"Timothy\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Timothy\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Mark\"][\"start_time\"] and meeting_time <= constraints[\"Mark\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Mark\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Joseph\"][\"start_time\"] and meeting_time <= constraints[\"Joseph\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Joseph\", meeting_time, meeting_time))\n    \n    # Remove duplicates and sort by start time\n    itinerary = list(set(itinerary))\n    itinerary.sort(key=lambda x: x[\"start_time\"])\n    \n    return itinerary\n\ndef optimize_itinerary(itinerary):\n    optimized_itinerary = []\n    current_location = \"Golden Gate Park\"\n    for meeting in itinerary:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"])\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        optimized_itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n        current_location = meeting[\"location\"]\n    return optimized_itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    optimized_itinerary = optimize_itinerary(itinerary)\n    result = {\"itinerary\": optimized_itinerary}\n    print(json.dumps(result, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_268"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "14:15",
                        "end_time": "15:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Define travel distances in minutes\ntravel_distances = {\n    \"Fisherman's Wharf\": {\n        \"Nob Hill\": 11\n    },\n    \"Nob Hill\": {\n        \"Fisherman's Wharf\": 11\n    }\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Kenneth\": {\"location\": \"Nob Hill\", \"start_time\": \"14:15\", \"end_time\": \"19:45\", \"duration\": 90}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef check_constraint(person, start_time, end_time):\n    constraint = constraints[person]\n    if start_time >= constraint[\"start_time\"] and end_time <= constraint[\"end_time\"]:\n        return True\n    return False\n\ndef schedule_meeting(person, start_time, end_time):\n    if check_constraint(person, start_time, end_time):\n        return {\"action\": \"meet\", \"location\": constraints[person][\"location\"], \"person\": person, \"start_time\": start_time, \"end_time\": end_time}\n    return None\n\ndef generate_itinerary():\n    start_time = \"09:00\"\n    end_time = \"19:00\"\n    start_location = \"Fisherman's Wharf\"\n    itinerary = []\n    \n    # Generate all possible meeting times\n    for hour in range(9, 19):\n        for minute in range(0, 60):\n            meeting_time = f\"{hour:02d}:{minute:02d}\"\n            if meeting_time >= constraints[\"Kenneth\"][\"start_time\"] and meeting_time <= constraints[\"Kenneth\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Kenneth\", meeting_time, meeting_time))\n    \n    # Remove duplicates and sort by start time\n    itinerary = list(set(itinerary))\n    itinerary.sort(key=lambda x: x[\"start_time\"])\n    \n    return itinerary\n\ndef optimize_itinerary(itinerary):\n    optimized_itinerary = []\n    current_location = \"Fisherman's Wharf\"\n    for meeting in itinerary:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"])\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        optimized_itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n        current_location = meeting[\"location\"]\n    return optimized_itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    optimized_itinerary = optimize_itinerary(itinerary)\n    result = {\"itinerary\": optimized_itinerary}\n    print(json.dumps(result, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_6"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "John",
                        "start_time": "9:08",
                        "end_time": "9:23"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "13:30",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "18:00",
                        "end_time": "18:30"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Define travel distances in minutes\ntravel_distances = {\n    \"Nob Hill\": {\n        \"Presidio\": 17,\n        \"North Beach\": 8,\n        \"Fisherman's Wharf\": 11,\n        \"Pacific Heights\": 8\n    },\n    \"Presidio\": {\n        \"Nob Hill\": 18,\n        \"North Beach\": 18,\n        \"Fisherman's Wharf\": 19,\n        \"Pacific Heights\": 11\n    },\n    \"North Beach\": {\n        \"Nob Hill\": 7,\n        \"Presidio\": 17,\n        \"Fisherman's Wharf\": 5,\n        \"Pacific Heights\": 8\n    },\n    \"Fisherman's Wharf\": {\n        \"Nob Hill\": 11,\n        \"Presidio\": 17,\n        \"North Beach\": 6,\n        \"Pacific Heights\": 12\n    },\n    \"Pacific Heights\": {\n        \"Nob Hill\": 8,\n        \"Presidio\": 11,\n        \"North Beach\": 9,\n        \"Fisherman's Wharf\": 13\n    }\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Jeffrey\": {\"location\": \"Presidio\", \"start_time\": \"08:00\", \"end_time\": \"10:00\", \"duration\": 105},\n    \"Steven\": {\"location\": \"North Beach\", \"start_time\": \"13:30\", \"end_time\": \"22:00\", \"duration\": 45},\n    \"Barbara\": {\"location\": \"Fisherman's Wharf\", \"start_time\": \"18:00\", \"end_time\": \"21:30\", \"duration\": 30},\n    \"John\": {\"location\": \"Pacific Heights\", \"start_time\": \"09:00\", \"end_time\": \"13:30\", \"duration\": 15}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    if start_location == \"Nob Hill\":\n        return travel_distances[\"Nob Hill\"][end_location]\n    elif start_location == \"Presidio\":\n        return travel_distances[\"Presidio\"][end_location]\n    elif start_location == \"North Beach\":\n        return travel_distances[\"North Beach\"][end_location]\n    elif start_location == \"Fisherman's Wharf\":\n        return travel_distances[\"Fisherman's Wharf\"][end_location]\n    elif start_location == \"Pacific Heights\":\n        return travel_distances[\"Pacific Heights\"][end_location]\n\ndef check_constraint(person, start_time, end_time):\n    constraint = constraints[person]\n    if start_time >= constraint[\"start_time\"] and end_time <= constraint[\"end_time\"]:\n        return True\n    return False\n\ndef schedule_meeting(person, start_time, end_time):\n    if check_constraint(person, start_time, end_time):\n        return {\"action\": \"meet\", \"location\": constraints[person][\"location\"], \"person\": person, \"start_time\": start_time, \"end_time\": end_time}\n    return None\n\ndef generate_itinerary():\n    start_time = \"09:00\"\n    end_time = \"22:00\"\n    start_location = \"Nob Hill\"\n    itinerary = []\n    \n    # Generate all possible meeting times\n    for hour in range(9, 22):\n        for minute in range(0, 60):\n            meeting_time = f\"{hour:02d}:{minute:02d}\"\n            if meeting_time >= constraints[\"Jeffrey\"][\"start_time\"] and meeting_time <= constraints[\"Jeffrey\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Jeffrey\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Steven\"][\"start_time\"] and meeting_time <= constraints[\"Steven\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Steven\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Barbara\"][\"start_time\"] and meeting_time <= constraints[\"Barbara\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Barbara\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"John\"][\"start_time\"] and meeting_time <= constraints[\"John\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"John\", meeting_time, meeting_time))\n    \n    # Remove duplicates and sort by start time\n    itinerary = list(set(itinerary))\n    itinerary.sort(key=lambda x: x[\"start_time\"])\n    \n    return itinerary\n\ndef optimize_itinerary(itinerary):\n    optimized_itinerary = []\n    current_location = \"Nob Hill\"\n    for meeting in itinerary:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"])\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        optimized_itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n        current_location = meeting[\"location\"]\n    return optimized_itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    optimized_itinerary = optimize_itinerary(itinerary)\n    result = {\"itinerary\": optimized_itinerary}\n    print(json.dumps(result, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_385"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sandra",
                        "start_time": "9:20",
                        "end_time": "9:50"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Brian",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Stephanie",
                        "start_time": "11:03",
                        "end_time": "12:18"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Helen",
                        "start_time": "12:40",
                        "end_time": "14:40"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Laura",
                        "start_time": "14:49",
                        "end_time": "16:04"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mary",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Deborah",
                        "start_time": "19:00",
                        "end_time": "20:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Define travel distances in minutes\ntravel_distances = {\n    \"Mission District\": {\n        \"Alamo Square\": 11,\n        \"Presidio\": 25,\n        \"Russian Hill\": 15,\n        \"North Beach\": 17,\n        \"Golden Gate Park\": 17,\n        \"Richmond District\": 20,\n        \"Embarcadero\": 19,\n        \"Financial District\": 15,\n        \"Marina District\": 19\n    },\n    \"Alamo Square\": {\n        \"Mission District\": 10,\n        \"Presidio\": 17,\n        \"Russian Hill\": 13,\n        \"North Beach\": 15,\n        \"Golden Gate Park\": 9,\n        \"Richmond District\": 11,\n        \"Embarcadero\": 16,\n        \"Financial District\": 17,\n        \"Marina District\": 15\n    },\n    \"Presidio\": {\n        \"Mission District\": 26,\n        \"Alamo Square\": 19,\n        \"Russian Hill\": 14,\n        \"North Beach\": 18,\n        \"Golden Gate Park\": 12,\n        \"Richmond District\": 7,\n        \"Embarcadero\": 20,\n        \"Financial District\": 23,\n        \"Marina District\": 11\n    },\n    \"Russian Hill\": {\n        \"Mission District\": 16,\n        \"Alamo Square\": 15,\n        \"Presidio\": 14,\n        \"North Beach\": 5,\n        \"Golden Gate Park\": 21,\n        \"Richmond District\": 14,\n        \"Embarcadero\": 8,\n        \"Financial District\": 11,\n        \"Marina District\": 7\n    },\n    \"North Beach\": {\n        \"Mission District\": 18,\n        \"Alamo Square\": 16,\n        \"Presidio\": 17,\n        \"Russian Hill\": 4,\n        \"Golden Gate Park\": 22,\n        \"Richmond District\": 18,\n        \"Embarcadero\": 6,\n        \"Financial District\": 8,\n        \"Marina District\": 9\n    },\n    \"Golden Gate Park\": {\n        \"Mission District\": 17,\n        \"Alamo Square\": 9,\n        \"Presidio\": 11,\n        \"Russian Hill\": 19,\n        \"North Beach\": 23,\n        \"Richmond District\": 7,\n        \"Embarcadero\": 25,\n        \"Financial District\": 26,\n        \"Marina District\": 16\n    },\n    \"Richmond District\": {\n        \"Mission District\": 20,\n        \"Alamo Square\": 13,\n        \"Presidio\": 7,\n        \"Russian Hill\": 13,\n        \"North Beach\": 17,\n        \"Golden Gate Park\": 9,\n        \"Embarcadero\": 19,\n        \"Financial District\": 22,\n        \"Marina District\": 9\n    },\n    \"Embarcadero\": {\n        \"Mission District\": 20,\n        \"Alamo Square\": 19,\n        \"Presidio\": 20,\n        \"Russian Hill\": 8,\n        \"North Beach\": 5,\n        \"Golden Gate Park\": 25,\n        \"Richmond District\": 21,\n        \"Financial District\": 5,\n        \"Marina District\": 12\n    },\n    \"Financial District\": {\n        \"Mission District\": 17,\n        \"Alamo Square\": 17,\n        \"Presidio\": 22,\n        \"Russian Hill\": 11,\n        \"North Beach\": 7,\n        \"Golden Gate Park\": 23,\n        \"Richmond District\": 21,\n        \"Embarcadero\": 4,\n        \"Marina District\": 15\n    },\n    \"Marina District\": {\n        \"Mission District\": 20,\n        \"Alamo Square\": 15,\n        \"Presidio\": 10,\n        \"Russian Hill\": 8,\n        \"North Beach\": 11,\n        \"Golden Gate Park\": 18,\n        \"Richmond District\": 11,\n        \"Embarcadero\": 14,\n        \"Financial District\": 17\n    }\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Laura\": {\"location\": \"Alamo Square\", \"start_time\": \"14:30\", \"end_time\": \"16:15\", \"duration\": 75},\n    \"Brian\": {\"location\": \"Presidio\", \"start_time\": \"10:15\", \"end_time\": \"17:00\", \"duration\": 30},\n    \"Karen\": {\"location\": \"Russian Hill\", \"start_time\": \"18:00\", \"end_time\": \"20:15\", \"duration\": 90},\n    \"Stephanie\": {\"location\": \"North Beach\", \"start_time\": \"10:15\", \"end_time\": \"16:00\", \"duration\": 75},\n    \"Helen\": {\"location\": \"Golden Gate Park\", \"start_time\": \"11:30\", \"end_time\": \"21:45\", \"duration\": 120},\n    \"Sandra\": {\"location\": \"Richmond District\", \"start_time\": \"08:00\", \"end_time\": \"15:15\", \"duration\": 30},\n    \"Mary\": {\"location\": \"Embarcadero\", \"start_time\": \"16:45\", \"end_time\": \"18:45\", \"duration\": 120},\n    \"Deborah\": {\"location\": \"Financial District\", \"start_time\": \"19:00\", \"end_time\": \"20:45\", \"duration\": 105},\n    \"Elizabeth\": {\"location\": \"Marina District\", \"start_time\": \"08:30\", \"end_time\": \"13:15\", \"duration\": 105}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    if start_location == \"Mission District\":\n        return travel_distances[\"Mission District\"][end_location]\n    elif start_location == \"Alamo Square\":\n        return travel_distances[\"Alamo Square\"][end_location]\n    elif start_location == \"Presidio\":\n        return travel_distances[\"Presidio\"][end_location]\n    elif start_location == \"Russian Hill\":\n        return travel_distances[\"Russian Hill\"][end_location]\n    elif start_location == \"North Beach\":\n        return travel_distances[\"North Beach\"][end_location]\n    elif start_location == \"Golden Gate Park\":\n        return travel_distances[\"Golden Gate Park\"][end_location]\n    elif start_location == \"Richmond District\":\n        return travel_distances[\"Richmond District\"][end_location]\n    elif start_location == \"Embarcadero\":\n        return travel_distances[\"Embarcadero\"][end_location]\n    elif start_location == \"Financial District\":\n        return travel_distances[\"Financial District\"][end_location]\n    elif start_location == \"Marina District\":\n        return travel_distances[\"Marina District\"][end_location]\n\ndef check_constraint(person, start_time, end_time):\n    constraint = constraints[person]\n    if start_time >= constraint[\"start_time\"] and end_time <= constraint[\"end_time\"]:\n        return True\n    return False\n\ndef schedule_meeting(person, start_time, end_time):\n    if check_constraint(person, start_time, end_time):\n        return {\"action\": \"meet\", \"location\": constraints[person][\"location\"], \"person\": person, \"start_time\": start_time, \"end_time\": end_time}\n    return None\n\ndef generate_itinerary():\n    start_time = \"09:00\"\n    end_time = \"21:00\"\n    start_location = \"Mission District\"\n    itinerary = []\n    \n    # Generate all possible meeting times\n    for hour in range(9, 21):\n        for minute in range(0, 60):\n            meeting_time = f\"{hour:02d}:{minute:02d}\"\n            if meeting_time >= constraints[\"Laura\"][\"start_time\"] and meeting_time <= constraints[\"Laura\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Laura\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Brian\"][\"start_time\"] and meeting_time <= constraints[\"Brian\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Brian\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Karen\"][\"start_time\"] and meeting_time <= constraints[\"Karen\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Karen\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Stephanie\"][\"start_time\"] and meeting_time <= constraints[\"Stephanie\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Stephanie\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Helen\"][\"start_time\"] and meeting_time <= constraints[\"Helen\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Helen\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Sandra\"][\"start_time\"] and meeting_time <= constraints[\"Sandra\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Sandra\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Mary\"][\"start_time\"] and meeting_time <= constraints[\"Mary\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Mary\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Deborah\"][\"start_time\"] and meeting_time <= constraints[\"Deborah\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Deborah\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Elizabeth\"][\"start_time\"] and meeting_time <= constraints[\"Elizabeth\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Elizabeth\", meeting_time, meeting_time))\n    \n    # Remove duplicates and sort by start time\n    itinerary = list(set(itinerary))\n    itinerary.sort(key=lambda x: x[\"start_time\"])\n    \n    return itinerary\n\ndef optimize_itinerary(itinerary):\n    optimized_itinerary = []\n    current_location = \"Mission District\"\n    for meeting in itinerary:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"])\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        optimized_itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n        current_location = meeting[\"location\"]\n    return optimized_itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    optimized_itinerary = optimize_itinerary(itinerary)\n    result = {\"itinerary\": optimized_itinerary}\n    print(json.dumps(result, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_862"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Lisa",
                        "start_time": "10:53",
                        "end_time": "11:38"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joshua",
                        "start_time": "12:00",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "12:23",
                        "end_time": "13:23"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "John",
                        "start_time": "16:45",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Define travel distances in minutes\ntravel_distances = {\n    \"Embarcadero\": {\n        \"Richmond District\": 21,\n        \"Union Square\": 10,\n        \"Financial District\": 5,\n        \"Pacific Heights\": 11,\n        \"Nob Hill\": 10,\n        \"Bayview\": 21\n    },\n    \"Richmond District\": {\n        \"Embarcadero\": 19,\n        \"Union Square\": 21,\n        \"Financial District\": 22,\n        \"Pacific Heights\": 10,\n        \"Nob Hill\": 17,\n        \"Bayview\": 26\n    },\n    \"Union Square\": {\n        \"Embarcadero\": 11,\n        \"Richmond District\": 20,\n        \"Financial District\": 9,\n        \"Pacific Heights\": 15,\n        \"Nob Hill\": 9,\n        \"Bayview\": 15\n    },\n    \"Financial District\": {\n        \"Embarcadero\": 4,\n        \"Richmond District\": 21,\n        \"Union Square\": 9,\n        \"Pacific Heights\": 13,\n        \"Nob Hill\": 8,\n        \"Bayview\": 19\n    },\n    \"Pacific Heights\": {\n        \"Embarcadero\": 10,\n        \"Richmond District\": 12,\n        \"Union Square\": 12,\n        \"Financial District\": 13,\n        \"Nob Hill\": 8,\n        \"Bayview\": 22\n    },\n    \"Nob Hill\": {\n        \"Embarcadero\": 9,\n        \"Richmond District\": 14,\n        \"Union Square\": 7,\n        \"Financial District\": 9,\n        \"Pacific Heights\": 8,\n        \"Bayview\": 19\n    },\n    \"Bayview\": {\n        \"Embarcadero\": 19,\n        \"Richmond District\": 25,\n        \"Union Square\": 17,\n        \"Financial District\": 19,\n        \"Pacific Heights\": 23,\n        \"Nob Hill\": 20\n    }\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Kenneth\": {\"location\": \"Richmond District\", \"start_time\": \"21:15\", \"end_time\": \"22:00\", \"duration\": 30},\n    \"Lisa\": {\"location\": \"Union Square\", \"start_time\": \"09:00\", \"end_time\": \"16:30\", \"duration\": 45},\n    \"Joshua\": {\"location\": \"Financial District\", \"start_time\": \"12:00\", \"end_time\": \"15:15\", \"duration\": 15},\n    \"Nancy\": {\"location\": \"Pacific Heights\", \"start_time\": \"08:00\", \"end_time\": \"11:30\", \"duration\": 90},\n    \"Andrew\": {\"location\": \"Nob Hill\", \"start_time\": \"11:30\", \"end_time\": \"20:15\", \"duration\": 60},\n    \"John\": {\"location\": \"Bayview\", \"start_time\": \"16:45\", \"end_time\": \"21:30\", \"duration\": 75}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    if start_location == \"Embarcadero\":\n        return travel_distances[\"Embarcadero\"][end_location]\n    elif start_location == \"Richmond District\":\n        return travel_distances[\"Richmond District\"][end_location]\n    elif start_location == \"Union Square\":\n        return travel_distances[\"Union Square\"][end_location]\n    elif start_location == \"Financial District\":\n        return travel_distances[\"Financial District\"][end_location]\n    elif start_location == \"Pacific Heights\":\n        return travel_distances[\"Pacific Heights\"][end_location]\n    elif start_location == \"Nob Hill\":\n        return travel_distances[\"Nob Hill\"][end_location]\n    elif start_location == \"Bayview\":\n        return travel_distances[\"Bayview\"][end_location]\n\ndef check_constraint(person, start_time, end_time):\n    constraint = constraints[person]\n    if start_time >= constraint[\"start_time\"] and end_time <= constraint[\"end_time\"]:\n        return True\n    return False\n\ndef schedule_meeting(person, start_time, end_time):\n    if check_constraint(person, start_time, end_time):\n        return {\"action\": \"meet\", \"location\": constraints[person][\"location\"], \"person\": person, \"start_time\": start_time, \"end_time\": end_time}\n    return None\n\ndef generate_itinerary():\n    start_time = \"09:00\"\n    end_time = \"22:00\"\n    start_location = \"Embarcadero\"\n    itinerary = []\n    \n    # Generate all possible meeting times\n    for hour in range(9, 22):\n        for minute in range(0, 60):\n            meeting_time = f\"{hour:02d}:{minute:02d}\"\n            if meeting_time >= constraints[\"Kenneth\"][\"start_time\"] and meeting_time <= constraints[\"Kenneth\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Kenneth\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Lisa\"][\"start_time\"] and meeting_time <= constraints[\"Lisa\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Lisa\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Joshua\"][\"start_time\"] and meeting_time <= constraints[\"Joshua\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Joshua\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Nancy\"][\"start_time\"] and meeting_time <= constraints[\"Nancy\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Nancy\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Andrew\"][\"start_time\"] and meeting_time <= constraints[\"Andrew\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Andrew\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"John\"][\"start_time\"] and meeting_time <= constraints[\"John\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"John\", meeting_time, meeting_time))\n    \n    # Remove duplicates and sort by start time\n    itinerary = list(set(itinerary))\n    itinerary.sort(key=lambda x: x[\"start_time\"])\n    \n    return itinerary\n\ndef optimize_itinerary(itinerary):\n    optimized_itinerary = []\n    current_location = \"Embarcadero\"\n    for meeting in itinerary:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"])\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        optimized_itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n        current_location = meeting[\"location\"]\n    return optimized_itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    optimized_itinerary = optimize_itinerary(itinerary)\n    result = {\"itinerary\": optimized_itinerary}\n    print(json.dumps(result, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_546"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Daniel",
                        "start_time": "19:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Define travel distances in minutes\ntravel_distances = {\n    \"Russian Hill\": {\n        \"Richmond District\": 14\n    },\n    \"Richmond District\": {\n        \"Russian Hill\": 13\n    }\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Daniel\": {\"location\": \"Richmond District\", \"start_time\": \"19:00\", \"end_time\": \"20:15\", \"duration\": 75}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef check_constraint(person, start_time, end_time):\n    constraint = constraints[person]\n    if start_time >= constraint[\"start_time\"] and end_time <= constraint[\"end_time\"]:\n        return True\n    return False\n\ndef schedule_meeting(person, start_time, end_time):\n    if check_constraint(person, start_time, end_time):\n        return {\"action\": \"meet\", \"location\": constraints[person][\"location\"], \"person\": person, \"start_time\": start_time, \"end_time\": end_time}\n    return None\n\ndef generate_itinerary():\n    start_time = \"09:00\"\n    end_time = \"21:00\"\n    start_location = \"Russian Hill\"\n    itinerary = []\n    \n    # Generate all possible meeting times\n    for hour in range(9, 21):\n        for minute in range(0, 60):\n            meeting_time = f\"{hour:02d}:{minute:02d}\"\n            if meeting_time >= constraints[\"Daniel\"][\"start_time\"] and meeting_time <= constraints[\"Daniel\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Daniel\", meeting_time, meeting_time))\n    \n    # Remove duplicates and sort by start time\n    itinerary = list(set(itinerary))\n    itinerary.sort(key=lambda x: x[\"start_time\"])\n    \n    return itinerary\n\ndef optimize_itinerary(itinerary):\n    optimized_itinerary = []\n    current_location = \"Russian Hill\"\n    for meeting in itinerary:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"])\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        optimized_itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n        current_location = meeting[\"location\"]\n    return optimized_itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    optimized_itinerary = optimize_itinerary(itinerary)\n    result = {\"itinerary\": optimized_itinerary}\n    print(json.dumps(result, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_91"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "David",
                        "start_time": "9:18",
                        "end_time": "10:03"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kenneth",
                        "start_time": "14:00",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Deborah",
                        "start_time": "16:09",
                        "end_time": "17:39"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "John",
                        "start_time": "17:55",
                        "end_time": "18:10"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Karen",
                        "start_time": "18:31",
                        "end_time": "18:46"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Define travel distances in minutes\ntravel_distances = {\n    \"Chinatown\": {\n        \"Mission District\": 18,\n        \"Alamo Square\": 17,\n        \"Pacific Heights\": 10,\n        \"Union Square\": 7,\n        \"Golden Gate Park\": 23,\n        \"Sunset District\": 29,\n        \"Presidio\": 19\n    },\n    \"Mission District\": {\n        \"Chinatown\": 16,\n        \"Alamo Square\": 11,\n        \"Pacific Heights\": 16,\n        \"Union Square\": 15,\n        \"Golden Gate Park\": 17,\n        \"Sunset District\": 24,\n        \"Presidio\": 25\n    },\n    \"Alamo Square\": {\n        \"Chinatown\": 16,\n        \"Mission District\": 10,\n        \"Pacific Heights\": 10,\n        \"Union Square\": 14,\n        \"Golden Gate Park\": 9,\n        \"Sunset District\": 16,\n        \"Presidio\": 18\n    },\n    \"Pacific Heights\": {\n        \"Chinatown\": 11,\n        \"Mission District\": 15,\n        \"Alamo Square\": 10,\n        \"Union Square\": 12,\n        \"Golden Gate Park\": 15,\n        \"Sunset District\": 21,\n        \"Presidio\": 11\n    },\n    \"Union Square\": {\n        \"Chinatown\": 7,\n        \"Mission District\": 14,\n        \"Alamo Square\": 15,\n        \"Pacific Heights\": 15,\n        \"Golden Gate Park\": 22,\n        \"Sunset District\": 26,\n        \"Presidio\": 24\n    },\n    \"Golden Gate Park\": {\n        \"Chinatown\": 23,\n        \"Mission District\": 17,\n        \"Alamo Square\": 10,\n        \"Pacific Heights\": 16,\n        \"Union Square\": 22,\n        \"Sunset District\": 10,\n        \"Presidio\": 11\n    },\n    \"Sunset District\": {\n        \"Chinatown\": 30,\n        \"Mission District\": 24,\n        \"Alamo Square\": 17,\n        \"Pacific Heights\": 21,\n        \"Union Square\": 30,\n        \"Golden Gate Park\": 11,\n        \"Presidio\": 16\n    },\n    \"Presidio\": {\n        \"Chinatown\": 21,\n        \"Mission District\": 26,\n        \"Alamo Square\": 18,\n        \"Pacific Heights\": 11,\n        \"Union Square\": 22,\n        \"Golden Gate Park\": 12,\n        \"Sunset District\": 15\n    }\n}\n\n# Define meeting constraints\nconstraints = {\n    \"David\": {\"location\": \"Mission District\", \"start_time\": \"08:00\", \"end_time\": \"19:45\", \"duration\": 45},\n    \"Kenneth\": {\"location\": \"Alamo Square\", \"start_time\": \"14:00\", \"end_time\": \"19:45\", \"duration\": 120},\n    \"John\": {\"location\": \"Pacific Heights\", \"start_time\": \"17:00\", \"end_time\": \"20:00\", \"duration\": 15},\n    \"Charles\": {\"location\": \"Union Square\", \"start_time\": \"21:45\", \"end_time\": \"22:45\", \"duration\": 60},\n    \"Deborah\": {\"location\": \"Golden Gate Park\", \"start_time\": \"07:00\", \"end_time\": \"18:15\", \"duration\": 90},\n    \"Karen\": {\"location\": \"Sunset District\", \"start_time\": \"17:45\", \"end_time\": \"21:15\", \"duration\": 15},\n    \"Carol\": {\"location\": \"Presidio\", \"start_time\": \"08:15\", \"end_time\": \"09:15\", \"duration\": 30}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    if start_location == \"Chinatown\":\n        return travel_distances[\"Chinatown\"][end_location]\n    elif start_location == \"Mission District\":\n        return travel_distances[\"Mission District\"][end_location]\n    elif start_location == \"Alamo Square\":\n        return travel_distances[\"Alamo Square\"][end_location]\n    elif start_location == \"Pacific Heights\":\n        return travel_distances[\"Pacific Heights\"][end_location]\n    elif start_location == \"Union Square\":\n        return travel_distances[\"Union Square\"][end_location]\n    elif start_location == \"Golden Gate Park\":\n        return travel_distances[\"Golden Gate Park\"][end_location]\n    elif start_location == \"Sunset District\":\n        return travel_distances[\"Sunset District\"][end_location]\n    elif start_location == \"Presidio\":\n        return travel_distances[\"Presidio\"][end_location]\n\ndef check_constraint(person, start_time, end_time):\n    constraint = constraints[person]\n    if start_time >= constraint[\"start_time\"] and end_time <= constraint[\"end_time\"]:\n        return True\n    return False\n\ndef schedule_meeting(person, start_time, end_time):\n    if check_constraint(person, start_time, end_time):\n        return {\"action\": \"meet\", \"location\": constraints[person][\"location\"], \"person\": person, \"start_time\": start_time, \"end_time\": end_time}\n    return None\n\ndef generate_itinerary():\n    start_time = \"09:00\"\n    end_time = \"22:00\"\n    start_location = \"Chinatown\"\n    itinerary = []\n    \n    # Generate all possible meeting times\n    for hour in range(9, 22):\n        for minute in range(0, 60):\n            meeting_time = f\"{hour:02d}:{minute:02d}\"\n            if meeting_time >= constraints[\"David\"][\"start_time\"] and meeting_time <= constraints[\"David\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"David\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Kenneth\"][\"start_time\"] and meeting_time <= constraints[\"Kenneth\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Kenneth\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"John\"][\"start_time\"] and meeting_time <= constraints[\"John\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"John\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Charles\"][\"start_time\"] and meeting_time <= constraints[\"Charles\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Charles\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Deborah\"][\"start_time\"] and meeting_time <= constraints[\"Deborah\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Deborah\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Karen\"][\"start_time\"] and meeting_time <= constraints[\"Karen\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Karen\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Carol\"][\"start_time\"] and meeting_time <= constraints[\"Carol\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Carol\", meeting_time, meeting_time))\n    \n    # Remove duplicates and sort by start time\n    itinerary = list(set(itinerary))\n    itinerary.sort(key=lambda x: x[\"start_time\"])\n    \n    return itinerary\n\ndef optimize_itinerary(itinerary):\n    optimized_itinerary = []\n    current_location = \"Chinatown\"\n    for meeting in itinerary:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"])\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        optimized_itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n        current_location = meeting[\"location\"]\n    return optimized_itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    optimized_itinerary = optimize_itinerary(itinerary)\n    result = {\"itinerary\": optimized_itinerary}\n    print(json.dumps(result, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_609"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Mark",
                        "start_time": "9:10",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Betty",
                        "start_time": "10:06",
                        "end_time": "10:21"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Brian",
                        "start_time": "10:40",
                        "end_time": "11:10"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Joseph",
                        "start_time": "11:31",
                        "end_time": "13:01"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Stephanie",
                        "start_time": "13:11",
                        "end_time": "14:26"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Lisa",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Patricia",
                        "start_time": "16:34",
                        "end_time": "18:34"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "William",
                        "start_time": "18:47",
                        "end_time": "19:47"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Karen",
                        "start_time": "20:10",
                        "end_time": "21:55"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Define travel distances in minutes\ntravel_distances = {\n    \"Financial District\": {\n        \"Fisherman's Wharf\": 10,\n        \"Presidio\": 22,\n        \"Bayview\": 19,\n        \"Haight-Ashbury\": 19,\n        \"Russian Hill\": 11,\n        \"The Castro\": 20,\n        \"Marina District\": 15,\n        \"Richmond District\": 21,\n        \"Union Square\": 9,\n        \"Sunset District\": 30\n    },\n    \"Fisherman's Wharf\": {\n        \"Financial District\": 11,\n        \"Presidio\": 17,\n        \"Bayview\": 26,\n        \"Haight-Ashbury\": 22,\n        \"Russian Hill\": 7,\n        \"The Castro\": 27,\n        \"Marina District\": 9,\n        \"Richmond District\": 18,\n        \"Union Square\": 13,\n        \"Sunset District\": 27\n    },\n    \"Presidio\": {\n        \"Financial District\": 23,\n        \"Fisherman's Wharf\": 19,\n        \"Bayview\": 31,\n        \"Haight-Ashbury\": 15,\n        \"Russian Hill\": 14,\n        \"The Castro\": 21,\n        \"Marina District\": 11,\n        \"Richmond District\": 7,\n        \"Union Square\": 22,\n        \"Sunset District\": 15\n    },\n    \"Bayview\": {\n        \"Financial District\": 19,\n        \"Fisherman's Wharf\": 25,\n        \"Presidio\": 32,\n        \"Haight-Ashbury\": 19,\n        \"Russian Hill\": 23,\n        \"The Castro\": 19,\n        \"Marina District\": 27,\n        \"Richmond District\": 25,\n        \"Union Square\": 18,\n        \"Sunset District\": 23\n    },\n    \"Haight-Ashbury\": {\n        \"Financial District\": 21,\n        \"Fisherman's Wharf\": 23,\n        \"Presidio\": 15,\n        \"Bayview\": 18,\n        \"Russian Hill\": 17,\n        \"The Castro\": 6,\n        \"Marina District\": 17,\n        \"Richmond District\": 10,\n        \"Union Square\": 19,\n        \"Sunset District\": 15\n    },\n    \"Russian Hill\": {\n        \"Financial District\": 11,\n        \"Fisherman's Wharf\": 7,\n        \"Presidio\": 14,\n        \"Bayview\": 23,\n        \"Haight-Ashbury\": 17,\n        \"The Castro\": 21,\n        \"Marina District\": 7,\n        \"Richmond District\": 14,\n        \"Union Square\": 10,\n        \"Sunset District\": 23\n    },\n    \"The Castro\": {\n        \"Financial District\": 21,\n        \"Fisherman's Wharf\": 24,\n        \"Presidio\": 20,\n        \"Bayview\": 19,\n        \"Haight-Ashbury\": 6,\n        \"Russian Hill\": 18,\n        \"Marina District\": 21,\n        \"Richmond District\": 16,\n        \"Union Square\": 19,\n        \"Sunset District\": 17\n    },\n    \"Marina District\": {\n        \"Financial District\": 17,\n        \"Fisherman's Wharf\": 10,\n        \"Presidio\": 10,\n        \"Bayview\": 27,\n        \"Haight-Ashbury\": 16,\n        \"Russian Hill\": 8,\n        \"The Castro\": 22,\n        \"Richmond District\": 11,\n        \"Union Square\": 16,\n        \"Sunset District\": 19\n    },\n    \"Richmond District\": {\n        \"Financial District\": 22,\n        \"Fisherman's Wharf\": 18,\n        \"Presidio\": 7,\n        \"Bayview\": 27,\n        \"Haight-Ashbury\": 10,\n        \"Russian Hill\": 13,\n        \"The Castro\": 16,\n        \"Marina District\": 9,\n        \"Union Square\": 21,\n        \"Sunset District\": 11\n    },\n    \"Union Square\": {\n        \"Financial District\": 9,\n        \"Fisherman's Wharf\": 15,\n        \"Presidio\": 24,\n        \"Bayview\": 15,\n        \"Haight-Ashbury\": 18,\n        \"Russian Hill\": 13,\n        \"The Castro\": 17,\n        \"Marina District\": 18,\n        \"Richmond District\": 20,\n        \"Sunset District\": 27\n    },\n    \"Sunset District\": {\n        \"Financial District\": 30,\n        \"Fisherman's Wharf\": 29,\n        \"Presidio\": 16,\n        \"Bayview\": 22,\n        \"Haight-Ashbury\": 15,\n        \"Russian Hill\": 24,\n        \"The Castro\": 17,\n        \"Marina District\": 21,\n        \"Richmond District\": 12,\n        \"Union Square\": 30\n    }\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Mark\": {\"location\": \"Fisherman's Wharf\", \"start_time\": \"08:15\", \"end_time\": \"10:00\", \"duration\": 30},\n    \"Stephanie\": {\"location\": \"Presidio\", \"start_time\": \"12:15\", \"end_time\": \"15:00\", \"duration\": 75},\n    \"Betty\": {\"location\": \"Bayview\", \"start_time\": \"07:15\", \"end_time\": \"20:30\", \"duration\": 15},\n    \"Lisa\": {\"location\": \"Haight-Ashbury\", \"start_time\": \"15:30\", \"end_time\": \"18:30\", \"duration\": 45},\n    \"William\": {\"location\": \"Russian Hill\", \"start_time\": \"18:45\", \"end_time\": \"20:00\", \"duration\": 60},\n    \"Brian\": {\"location\": \"The Castro\", \"start_time\": \"09:15\", \"end_time\": \"13:15\", \"duration\": 30},\n    \"Joseph\": {\"location\": \"Marina District\", \"start_time\": \"10:45\", \"end_time\": \"15:00\", \"duration\": 90},\n    \"Ashley\": {\"location\": \"Richmond District\", \"start_time\": \"09:45\", \"end_time\": \"11:15\", \"duration\": 45},\n    \"Patricia\": {\"location\": \"Union Square\", \"start_time\": \"16:30\", \"end_time\": \"20:00\", \"duration\": 120},\n    \"Karen\": {\"location\": \"Sunset District\", \"start_time\": \"16:30\", \"end_time\": \"22:00\", \"duration\": 105}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    if start_location == \"Financial District\":\n        return travel_distances[\"Financial District\"][end_location]\n    elif start_location == \"Fisherman's Wharf\":\n        return travel_distances[\"Fisherman's Wharf\"][end_location]\n    elif start_location == \"Presidio\":\n        return travel_distances[\"Presidio\"][end_location]\n    elif start_location == \"Bayview\":\n        return travel_distances[\"Bayview\"][end_location]\n    elif start_location == \"Haight-Ashbury\":\n        return travel_distances[\"Haight-Ashbury\"][end_location]\n    elif start_location == \"Russian Hill\":\n        return travel_distances[\"Russian Hill\"][end_location]\n    elif start_location == \"The Castro\":\n        return travel_distances[\"The Castro\"][end_location]\n    elif start_location == \"Marina District\":\n        return travel_distances[\"Marina District\"][end_location]\n    elif start_location == \"Richmond District\":\n        return travel_distances[\"Richmond District\"][end_location]\n    elif start_location == \"Union Square\":\n        return travel_distances[\"Union Square\"][end_location]\n    elif start_location == \"Sunset District\":\n        return travel_distances[\"Sunset District\"][end_location]\n\ndef check_constraint(person, start_time, end_time):\n    constraint = constraints[person]\n    if start_time >= constraint[\"start_time\"] and end_time <= constraint[\"end_time\"]:\n        return True\n    return False\n\ndef schedule_meeting(person, start_time, end_time):\n    if check_constraint(person, start_time, end_time):\n        return {\"action\": \"meet\", \"location\": constraints[person][\"location\"], \"person\": person, \"start_time\": start_time, \"end_time\": end_time}\n    return None\n\ndef generate_itinerary():\n    start_time = \"09:00\"\n    end_time = \"22:00\"\n    start_location = \"Financial District\"\n    itinerary = []\n    \n    # Generate all possible meeting times\n    for hour in range(9, 22):\n        for minute in range(0, 60):\n            meeting_time = f\"{hour:02d}:{minute:02d}\"\n            if meeting_time >= constraints[\"Mark\"][\"start_time\"] and meeting_time <= constraints[\"Mark\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Mark\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Stephanie\"][\"start_time\"] and meeting_time <= constraints[\"Stephanie\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Stephanie\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Betty\"][\"start_time\"] and meeting_time <= constraints[\"Betty\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Betty\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Lisa\"][\"start_time\"] and meeting_time <= constraints[\"Lisa\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Lisa\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"William\"][\"start_time\"] and meeting_time <= constraints[\"William\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"William\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Brian\"][\"start_time\"] and meeting_time <= constraints[\"Brian\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Brian\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Joseph\"][\"start_time\"] and meeting_time <= constraints[\"Joseph\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Joseph\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Ashley\"][\"start_time\"] and meeting_time <= constraints[\"Ashley\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Ashley\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Patricia\"][\"start_time\"] and meeting_time <= constraints[\"Patricia\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Patricia\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Karen\"][\"start_time\"] and meeting_time <= constraints[\"Karen\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Karen\", meeting_time, meeting_time))\n    \n    # Remove duplicates and sort by start time\n    itinerary = list(set(itinerary))\n    itinerary.sort(key=lambda x: x[\"start_time\"])\n    \n    return itinerary\n\ndef optimize_itinerary(itinerary):\n    optimized_itinerary = []\n    current_location = \"Financial District\"\n    for meeting in itinerary:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"])\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        optimized_itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n        current_location = meeting[\"location\"]\n    return optimized_itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    optimized_itinerary = optimize_itinerary(itinerary)\n    result = {\"itinerary\": optimized_itinerary}\n    print(json.dumps(result, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_908"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "9:09",
                        "end_time": "9:24"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "10:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Betty",
                        "start_time": "19:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Define travel distances in minutes\ntravel_distances = {\n    \"Pacific Heights\": {\n        \"North Beach\": 9,\n        \"Financial District\": 13,\n        \"Alamo Square\": 10,\n        \"Mission District\": 15\n    },\n    \"North Beach\": {\n        \"Pacific Heights\": 8,\n        \"Financial District\": 8,\n        \"Alamo Square\": 16,\n        \"Mission District\": 18\n    },\n    \"Financial District\": {\n        \"Pacific Heights\": 13,\n        \"North Beach\": 7,\n        \"Alamo Square\": 17,\n        \"Mission District\": 17\n    },\n    \"Alamo Square\": {\n        \"Pacific Heights\": 10,\n        \"North Beach\": 15,\n        \"Financial District\": 17,\n        \"Mission District\": 10\n    },\n    \"Mission District\": {\n        \"Pacific Heights\": 16,\n        \"North Beach\": 17,\n        \"Financial District\": 17,\n        \"Alamo Square\": 11\n    }\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Helen\": {\"location\": \"North Beach\", \"start_time\": \"09:00\", \"end_time\": \"17:00\", \"duration\": 15},\n    \"Betty\": {\"location\": \"Financial District\", \"start_time\": \"19:00\", \"end_time\": \"21:45\", \"duration\": 90},\n    \"Amanda\": {\"location\": \"Alamo Square\", \"start_time\": \"19:45\", \"end_time\": \"21:00\", \"duration\": 60},\n    \"Kevin\": {\"location\": \"Mission District\", \"start_time\": \"10:45\", \"end_time\": \"14:45\", \"duration\": 45}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    if start_location == \"Pacific Heights\":\n        return travel_distances[\"Pacific Heights\"][end_location]\n    elif start_location == \"North Beach\":\n        return travel_distances[\"North Beach\"][end_location]\n    elif start_location == \"Financial District\":\n        return travel_distances[\"Financial District\"][end_location]\n    elif start_location == \"Alamo Square\":\n        return travel_distances[\"Alamo Square\"][end_location]\n    elif start_location == \"Mission District\":\n        return travel_distances[\"Mission District\"][end_location]\n\ndef check_constraint(person, start_time, end_time):\n    constraint = constraints[person]\n    if start_time >= constraint[\"start_time\"] and end_time <= constraint[\"end_time\"]:\n        return True\n    return False\n\ndef schedule_meeting(person, start_time, end_time):\n    if check_constraint(person, start_time, end_time):\n        return {\"action\": \"meet\", \"location\": constraints[person][\"location\"], \"person\": person, \"start_time\": start_time, \"end_time\": end_time}\n    return None\n\ndef generate_itinerary():\n    start_time = \"09:00\"\n    end_time = \"22:00\"\n    start_location = \"Pacific Heights\"\n    itinerary = []\n    \n    # Generate all possible meeting times\n    for hour in range(9, 22):\n        for minute in range(0, 60):\n            meeting_time = f\"{hour:02d}:{minute:02d}\"\n            if meeting_time >= constraints[\"Helen\"][\"start_time\"] and meeting_time <= constraints[\"Helen\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Helen\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Betty\"][\"start_time\"] and meeting_time <= constraints[\"Betty\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Betty\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Amanda\"][\"start_time\"] and meeting_time <= constraints[\"Amanda\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Amanda\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Kevin\"][\"start_time\"] and meeting_time <= constraints[\"Kevin\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Kevin\", meeting_time, meeting_time))\n    \n    # Remove duplicates and sort by start time\n    itinerary = list(set(itinerary))\n    itinerary.sort(key=lambda x: x[\"start_time\"])\n    \n    return itinerary\n\ndef optimize_itinerary(itinerary):\n    optimized_itinerary = []\n    current_location = \"Pacific Heights\"\n    for meeting in itinerary:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"])\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        optimized_itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n        current_location = meeting[\"location\"]\n    return optimized_itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    optimized_itinerary = optimize_itinerary(itinerary)\n    result = {\"itinerary\": optimized_itinerary}\n    print(json.dumps(result, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_335"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Matthew",
                        "start_time": "9:12",
                        "end_time": "9:27"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Michelle",
                        "start_time": "10:30",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Carol",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Stephanie",
                        "start_time": "13:37",
                        "end_time": "14:07"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Jessica",
                        "start_time": "15:45",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Linda",
                        "start_time": "16:56",
                        "end_time": "18:26"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "20:45",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Sunset District': {\n        'Russian Hill': 24,\n        'The Castro': 17,\n        'Richmond District': 12,\n        'Marina District': 21,\n        'North Beach': 29,\n        'Union Square': 30,\n        'Golden Gate Park': 11\n    },\n    'Russian Hill': {\n        'Sunset District': 23,\n        'The Castro': 21,\n        'Richmond District': 14,\n        'Marina District': 7,\n        'North Beach': 5,\n        'Union Square': 11,\n        'Golden Gate Park': 21\n    },\n    'The Castro': {\n        'Sunset District': 17,\n        'Russian Hill': 18,\n        'Richmond District': 16,\n        'Marina District': 21,\n        'North Beach': 20,\n        'Union Square': 19,\n        'Golden Gate Park': 11\n    },\n    'Richmond District': {\n        'Sunset District': 11,\n        'Russian Hill': 13,\n        'The Castro': 16,\n        'Marina District': 9,\n        'North Beach': 17,\n        'Union Square': 21,\n        'Golden Gate Park': 9\n    },\n    'Marina District': {\n        'Sunset District': 19,\n        'Russian Hill': 8,\n        'The Castro': 22,\n        'Richmond District': 11,\n        'North Beach': 11,\n        'Union Square': 16,\n        'Golden Gate Park': 18\n    },\n    'North Beach': {\n        'Sunset District': 27,\n        'Russian Hill': 4,\n        'The Castro': 22,\n        'Richmond District': 18,\n        'Marina District': 9,\n        'Union Square': 7,\n        'Golden Gate Park': 22\n    },\n    'Union Square': {\n        'Sunset District': 26,\n        'Russian Hill': 13,\n        'The Castro': 19,\n        'Richmond District': 20,\n        'Marina District': 18,\n        'North Beach': 10,\n        'Golden Gate Park': 22\n    },\n    'Golden Gate Park': {\n        'Sunset District': 10,\n        'Russian Hill': 19,\n        'The Castro': 13,\n        'Richmond District': 7,\n        'Marina District': 16,\n        'North Beach': 24,\n        'Union Square': 22\n    }\n}\n\n# Constraints\nconstraints = {\n    'Karen': {'start_time': datetime(2024, 7, 26, 20, 45), 'end_time': datetime(2024, 7, 26, 21, 45),'min_time': 60},\n    'Jessica': {'start_time': datetime(2024, 7, 26, 15, 45), 'end_time': datetime(2024, 7, 26, 19, 30),'min_time': 60},\n    'Matthew': {'start_time': datetime(2024, 7, 26, 7, 30), 'end_time': datetime(2024, 7, 26, 15, 15),'min_time': 15},\n    'Michelle': {'start_time': datetime(2024, 7, 26, 10, 30), 'end_time': datetime(2024, 7, 26, 18, 45),'min_time': 75},\n    'Carol': {'start_time': datetime(2024, 7, 26, 12, 0), 'end_time': datetime(2024, 7, 26, 17, 0),'min_time': 90},\n    'Stephanie': {'start_time': datetime(2024, 7, 26, 10, 45), 'end_time': datetime(2024, 7, 26, 14, 15),'min_time': 30},\n    'Linda': {'start_time': datetime(2024, 7, 26, 10, 45), 'end_time': datetime(2024, 7, 26, 22, 0),'min_time': 90}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Sunset District', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Sunset District to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Sunset District', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Sunset District\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Sunset District'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_607"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Joseph",
                        "start_time": "9:24",
                        "end_time": "10:54"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "11:16",
                        "end_time": "11:46"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Barbara",
                        "start_time": "12:03",
                        "end_time": "12:18"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jeffrey",
                        "start_time": "17:30",
                        "end_time": "18:30"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Golden Gate Park': {\n        'Fisherman\\'s Wharf': 24,\n        'Bayview': 23,\n        'Mission District': 17,\n        'Embarcadero': 25,\n        'Financial District': 26\n    },\n    'Fisherman\\'s Wharf': {\n        'Golden Gate Park': 25,\n        'Bayview': 26,\n        'Mission District': 22,\n        'Embarcadero': 8,\n        'Financial District': 11\n    },\n    'Bayview': {\n        'Golden Gate Park': 22,\n        'Fisherman\\'s Wharf': 25,\n        'Mission District': 13,\n        'Embarcadero': 19,\n        'Financial District': 19\n    },\n    'Mission District': {\n        'Golden Gate Park': 17,\n        'Fisherman\\'s Wharf': 22,\n        'Bayview': 15,\n        'Embarcadero': 19,\n        'Financial District': 17\n    },\n    'Embarcadero': {\n        'Golden Gate Park': 25,\n        'Fisherman\\'s Wharf': 6,\n        'Bayview': 21,\n        'Mission District': 20,\n        'Financial District': 5\n    },\n    'Financial District': {\n        'Golden Gate Park': 23,\n        'Fisherman\\'s Wharf': 10,\n        'Bayview': 19,\n        'Mission District': 17,\n        'Embarcadero': 4\n    }\n}\n\n# Constraints\nconstraints = {\n    'Joseph': {'start_time': datetime(2024, 7, 26, 8, 0), 'end_time': datetime(2024, 7, 26, 17, 30),'min_time': 90},\n    'Jeffrey': {'start_time': datetime(2024, 7, 26, 17, 30), 'end_time': datetime(2024, 7, 26, 21, 30),'min_time': 60},\n    'Kevin': {'start_time': datetime(2024, 7, 26, 11, 15), 'end_time': datetime(2024, 7, 26, 15, 15),'min_time': 30},\n    'David': {'start_time': datetime(2024, 7, 26, 8, 15), 'end_time': datetime(2024, 7, 26, 9, 0),'min_time': 30},\n    'Barbara': {'start_time': datetime(2024, 7, 26, 10, 30), 'end_time': datetime(2024, 7, 26, 16, 30),'min_time': 15}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Golden Gate Park', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Golden Gate Park to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Golden Gate Park', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Golden Gate Park\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Golden Gate Park'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_432"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Nancy",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Mary",
                        "start_time": "11:17",
                        "end_time": "12:32"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jessica",
                        "start_time": "12:48",
                        "end_time": "13:33"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Financial District': {\n        'Chinatown': 5,\n        'Alamo Square': 17,\n        'Bayview': 19,\n        'Fisherman\\'s Wharf': 10\n    },\n    'Chinatown': {\n        'Financial District': 5,\n        'Alamo Square': 17,\n        'Bayview': 22,\n        'Fisherman\\'s Wharf': 8\n    },\n    'Alamo Square': {\n        'Financial District': 17,\n        'Chinatown': 16,\n        'Bayview': 16,\n        'Fisherman\\'s Wharf': 19\n    },\n    'Bayview': {\n        'Financial District': 19,\n        'Chinatown': 18,\n        'Alamo Square': 16,\n        'Fisherman\\'s Wharf': 25\n    },\n    'Fisherman\\'s Wharf': {\n        'Financial District': 11,\n        'Chinatown': 12,\n        'Alamo Square': 20,\n        'Bayview': 26\n    }\n}\n\n# Constraints\nconstraints = {\n    'Nancy': {'start_time': datetime(2024, 7, 26, 9, 30), 'end_time': datetime(2024, 7, 26, 13, 30),'min_time': 90},\n    'Mary': {'start_time': datetime(2024, 7, 26, 7, 0), 'end_time': datetime(2024, 7, 26, 21, 0),'min_time': 75},\n    'Jessica': {'start_time': datetime(2024, 7, 26, 11, 15), 'end_time': datetime(2024, 7, 26, 14, 45),'min_time': 45},\n    'Rebecca': {'start_time': datetime(2024, 7, 26, 7, 0), 'end_time': datetime(2024, 7, 26, 8, 30),'min_time': 45}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Financial District', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Financial District to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Financial District', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Financial District\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Financial District'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_309"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Michelle",
                        "start_time": "9:30",
                        "end_time": "9:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "George",
                        "start_time": "10:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Robert",
                        "start_time": "11:19",
                        "end_time": "11:49"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "William",
                        "start_time": "18:30",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Sunset District': {\n        'Russian Hill': 24,\n        'Chinatown': 30,\n        'Presidio': 16,\n        'Fisherman\\'s Wharf': 29\n    },\n    'Russian Hill': {\n        'Sunset District': 23,\n        'Chinatown': 9,\n        'Presidio': 14,\n        'Fisherman\\'s Wharf': 7\n    },\n    'Chinatown': {\n        'Sunset District': 29,\n        'Russian Hill': 7,\n        'Presidio': 19,\n        'Fisherman\\'s Wharf': 8\n    },\n    'Presidio': {\n        'Sunset District': 15,\n        'Russian Hill': 14,\n        'Chinatown': 21,\n        'Fisherman\\'s Wharf': 19\n    },\n    'Fisherman\\'s Wharf': {\n        'Sunset District': 27,\n        'Russian Hill': 7,\n        'Chinatown': 12,\n        'Presidio': 17\n    }\n}\n\n# Constraints\nconstraints = {\n    'William': {'start_time': datetime(2024, 7, 26, 18, 30), 'end_time': datetime(2024, 7, 26, 20, 45),'min_time': 105},\n    'Michelle': {'start_time': datetime(2024, 7, 26, 8, 15), 'end_time': datetime(2024, 7, 26, 14, 0),'min_time': 15},\n    'George': {'start_time': datetime(2024, 7, 26, 10, 30), 'end_time': datetime(2024, 7, 26, 18, 45),'min_time': 30},\n    'Robert': {'start_time': datetime(2024, 7, 26, 9, 0), 'end_time': datetime(2024, 7, 26, 14, 45),'min_time': 30}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Sunset District', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Sunset District to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Sunset District', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Sunset District\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Sunset District'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_322"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mary",
                        "start_time": "9:25",
                        "end_time": "10:10"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "10:17",
                        "end_time": "11:47"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Stephanie",
                        "start_time": "12:02",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Deborah",
                        "start_time": "15:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Emily",
                        "start_time": "17:19",
                        "end_time": "19:04"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Embarcadero': {\n        'Golden Gate Park': 25,\n        'Haight-Ashbury': 21,\n        'Bayview': 21,\n        'Presidio': 20,\n        'Financial District': 5\n    },\n    'Golden Gate Park': {\n        'Embarcadero': 25,\n        'Haight-Ashbury': 7,\n        'Bayview': 23,\n        'Presidio': 11,\n        'Financial District': 26\n    },\n    'Haight-Ashbury': {\n        'Embarcadero': 20,\n        'Golden Gate Park': 7,\n        'Bayview': 19,\n        'Presidio': 15,\n        'Financial District': 21\n    },\n    'Bayview': {\n        'Embarcadero': 19,\n        'Golden Gate Park': 22,\n        'Haight-Ashbury': 19,\n        'Presidio': 31,\n        'Financial District': 19\n    },\n    'Presidio': {\n        'Embarcadero': 20,\n        'Golden Gate Park': 12,\n        'Haight-Ashbury': 15,\n        'Bayview': 31,\n        'Financial District': 23\n    },\n    'Financial District': {\n        'Embarcadero': 4,\n        'Golden Gate Park': 23,\n        'Haight-Ashbury': 19,\n        'Bayview': 19,\n        'Presidio': 22\n    }\n}\n\n# Constraints\nconstraints = {\n    'Mary': {'start_time': datetime(2024, 7, 26, 8, 45), 'end_time': datetime(2024, 7, 26, 11, 45),'min_time': 45},\n    'Kevin': {'start_time': datetime(2024, 7, 26, 10, 15), 'end_time': datetime(2024, 7, 26, 16, 15),'min_time': 90},\n    'Deborah': {'start_time': datetime(2024, 7, 26, 15, 0), 'end_time': datetime(2024, 7, 26, 19, 15),'min_time': 120},\n    'Stephanie': {'start_time': datetime(2024, 7, 26, 10, 0), 'end_time': datetime(2024, 7, 26, 17, 15),'min_time': 120},\n    'Emily': {'start_time': datetime(2024, 7, 26, 11, 30), 'end_time': datetime(2024, 7, 26, 21, 45),'min_time': 105}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Embarcadero', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Embarcadero to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Embarcadero', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Embarcadero\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Embarcadero'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_479"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Timothy",
                        "start_time": "20:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Alamo Square': {\n        'Richmond District': 12\n    },\n    'Richmond District': {\n        'Alamo Square': 13\n    }\n}\n\n# Constraints\nconstraints = {\n    'Timothy': {'start_time': datetime(2024, 7, 26, 20, 45), 'end_time': datetime(2024, 7, 26, 21, 30),'min_time': 45}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Alamo Square', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Alamo Square to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Alamo Square', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Alamo Square\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Alamo Square'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_98"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "9:08",
                        "end_time": "11:08"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Kimberly",
                        "start_time": "16:30",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Patricia",
                        "start_time": "18:00",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Nob Hill': {\n        'North Beach': 8,\n        'Fisherman\\'s Wharf': 11,\n        'Bayview': 19\n    },\n    'North Beach': {\n        'Nob Hill': 7,\n        'Fisherman\\'s Wharf': 5,\n        'Bayview': 22\n    },\n    'Fisherman\\'s Wharf': {\n        'Nob Hill': 11,\n        'North Beach': 6,\n        'Bayview': 26\n    },\n    'Bayview': {\n        'Nob Hill': 20,\n        'North Beach': 21,\n        'Fisherman\\'s Wharf': 25\n    }\n}\n\n# Constraints\nconstraints = {\n    'Helen': {'start_time': datetime(2024, 7, 26, 7, 0), 'end_time': datetime(2024, 7, 26, 16, 45),'min_time': 120},\n    'Kimberly': {'start_time': datetime(2024, 7, 26, 16, 30), 'end_time': datetime(2024, 7, 26, 21, 0),'min_time': 45},\n    'Patricia': {'start_time': datetime(2024, 7, 26, 18, 0), 'end_time': datetime(2024, 7, 26, 21, 15),'min_time': 120}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Nob Hill', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Nob Hill to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Nob Hill', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Nob Hill\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Nob Hill'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_222"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Matthew",
                        "start_time": "11:00",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Kimberly",
                        "start_time": "13:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "15:16",
                        "end_time": "15:31"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Kenneth",
                        "start_time": "15:53",
                        "end_time": "16:53"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Margaret",
                        "start_time": "17:11",
                        "end_time": "18:41"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Helen",
                        "start_time": "19:45",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "21:15",
                        "end_time": "22:15"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Russian Hill': {\n        'Presidio': 14,\n        'Chinatown': 9,\n        'Pacific Heights': 7,\n        'Richmond District': 14,\n        'Fisherman\\'s Wharf': 7,\n        'Golden Gate Park': 21,\n        'Bayview': 23\n    },\n    'Presidio': {\n        'Russian Hill': 14,\n        'Chinatown': 21,\n        'Pacific Heights': 11,\n        'Richmond District': 7,\n        'Fisherman\\'s Wharf': 19,\n        'Golden Gate Park': 12,\n        'Bayview': 31\n    },\n    'Chinatown': {\n        'Russian Hill': 7,\n        'Presidio': 19,\n        'Pacific Heights': 10,\n        'Richmond District': 20,\n        'Fisherman\\'s Wharf': 8,\n        'Golden Gate Park': 23,\n        'Bayview': 22\n    },\n    'Pacific Heights': {\n        'Russian Hill': 7,\n        'Presidio': 11,\n        'Chinatown': 11,\n        'Richmond District': 12,\n        'Fisherman\\'s Wharf': 13,\n        'Golden Gate Park': 15,\n        'Bayview': 22\n    },\n    'Richmond District': {\n        'Russian Hill': 13,\n        'Presidio': 7,\n        'Chinatown': 20,\n        'Pacific Heights': 10,\n        'Fisherman\\'s Wharf': 18,\n        'Golden Gate Park': 9,\n        'Bayview': 26\n    },\n    'Fisherman\\'s Wharf': {\n        'Russian Hill': 7,\n        'Presidio': 17,\n        'Chinatown': 12,\n        'Pacific Heights': 12,\n        'Richmond District': 18,\n        'Golden Gate Park': 25,\n        'Bayview': 26\n    },\n    'Golden Gate Park': {\n        'Russian Hill': 19,\n        'Presidio': 11,\n        'Chinatown': 23,\n        'Pacific Heights': 16,\n        'Richmond District': 7,\n        'Fisherman\\'s Wharf': 24,\n        'Bayview': 23\n    },\n    'Bayview': {\n        'Russian Hill': 23,\n        'Presidio': 31,\n        'Chinatown': 18,\n        'Pacific Heights': 23,\n        'Richmond District': 25,\n        'Fisherman\\'s Wharf': 25,\n        'Golden Gate Park': 22\n    }\n}\n\n# Constraints\nconstraints = {\n    'Matthew': {'start_time': datetime(2024, 7, 26, 11, 0), 'end_time': datetime(2024, 7, 26, 21, 0),'min_time': 90},\n    'Margaret': {'start_time': datetime(2024, 7, 26, 9, 15), 'end_time': datetime(2024, 7, 26, 18, 45),'min_time': 90},\n    'Nancy': {'start_time': datetime(2024, 7, 26, 14, 15), 'end_time': datetime(2024, 7, 26, 17, 0),'min_time': 15},\n    'Helen': {'start_time': datetime(2024, 7, 26, 19, 45), 'end_time': datetime(2024, 7, 26, 22, 0),'min_time': 60},\n    'Rebecca': {'start_time': datetime(2024, 7, 26, 21, 15), 'end_time': datetime(2024, 7, 26, 22, 15),'min_time': 60},\n    'Kimberly': {'start_time': datetime(2024, 7, 26, 13, 0), 'end_time': datetime(2024, 7, 26, 16, 30),'min_time': 120},\n    'Kenneth': {'start_time': datetime(2024, 7, 26, 14, 30), 'end_time': datetime(2024, 7, 26, 18, 0),'min_time': 60}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Russian Hill', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Russian Hill to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Russian Hill', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Russian Hill\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Russian Hill'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_629"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Rebecca",
                        "start_time": "9:19",
                        "end_time": "10:49"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "James",
                        "start_time": "11:05",
                        "end_time": "12:35"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Sarah",
                        "start_time": "12:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "14:49",
                        "end_time": "16:19"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Amanda",
                        "start_time": "18:30",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'The Castro': {\n        'Bayview': 19,\n        'Pacific Heights': 16,\n        'Alamo Square': 8,\n        'Fisherman\\'s Wharf': 24,\n        'Golden Gate Park': 11\n    },\n    'Bayview': {\n        'The Castro': 20,\n        'Pacific Heights': 23,\n        'Alamo Square': 16,\n        'Fisherman\\'s Wharf': 25,\n        'Golden Gate Park': 22\n    },\n    'Pacific Heights': {\n        'The Castro': 16,\n        'Bayview': 22,\n        'Alamo Square': 10,\n        'Fisherman\\'s Wharf': 13,\n        'Golden Gate Park': 15\n    },\n    'Alamo Square': {\n        'The Castro': 8,\n        'Bayview': 16,\n        'Pacific Heights': 10,\n        'Fisherman\\'s Wharf': 19,\n        'Golden Gate Park': 9\n    },\n    'Fisherman\\'s Wharf': {\n        'The Castro': 26,\n        'Bayview': 26,\n        'Pacific Heights': 12,\n        'Alamo Square': 20,\n        'Golden Gate Park': 25\n    },\n    'Golden Gate Park': {\n        'The Castro': 13,\n        'Bayview': 23,\n        'Pacific Heights': 16,\n        'Alamo Square': 10,\n        'Fisherman\\'s Wharf': 24\n    }\n}\n\n# Constraints\nconstraints = {\n    'Rebecca': {'start_time': datetime(2024, 7, 26, 9, 0), 'end_time': datetime(2024, 7, 26, 12, 45),'min_time': 90},\n    'Amanda': {'start_time': datetime(2024, 7, 26, 18, 30), 'end_time': datetime(2024, 7, 26, 21, 45),'min_time': 90},\n    'James': {'start_time': datetime(2024, 7, 26, 9, 45), 'end_time': datetime(2024, 7, 26, 21, 15),'min_time': 90},\n    'Sarah': {'start_time': datetime(2024, 7, 26, 8, 0), 'end_time': datetime(2024, 7, 26, 21, 30),'min_time': 90},\n    'Melissa': {'start_time': datetime(2024, 7, 26, 9, 0), 'end_time': datetime(2024, 7, 26, 18, 45),'min_time': 90}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'The Castro', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from The Castro to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('The Castro', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to The Castro\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'The Castro'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_468"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "William",
                        "start_time": "10:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sandra",
                        "start_time": "11:40",
                        "end_time": "11:55"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Elizabeth",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "14:09",
                        "end_time": "15:09"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Anthony",
                        "start_time": "15:32",
                        "end_time": "16:47"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Stephanie",
                        "start_time": "16:54",
                        "end_time": "18:09"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Barbara",
                        "start_time": "19:15",
                        "end_time": "20:30"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Marina District': {\n        'Richmond District': 11,\n        'Union Square': 16,\n        'Nob Hill': 12,\n        'Fisherman\\'s Wharf': 10,\n        'Golden Gate Park': 18,\n        'Embarcadero': 14,\n        'Financial District': 17,\n        'North Beach': 11,\n        'Presidio': 10\n    },\n    'Richmond District': {\n        'Marina District': 9,\n        'Union Square': 21,\n        'Nob Hill': 17,\n        'Fisherman\\'s Wharf': 18,\n        'Golden Gate Park': 9,\n        'Embarcadero': 19,\n        'Financial District': 22,\n        'North Beach': 17,\n        'Presidio': 7\n    },\n    'Union Square': {\n        'Marina District': 18,\n        'Richmond District': 20,\n        'Nob Hill': 9,\n        'Fisherman\\'s Wharf': 15,\n        'Golden Gate Park': 22,\n        'Embarcadero': 11,\n        'Financial District': 9,\n        'North Beach': 10,\n        'Presidio': 24\n    },\n    'Nob Hill': {\n        'Marina District': 11,\n        'Richmond District': 14,\n        'Union Square': 7,\n        'Fisherman\\'s Wharf': 10,\n        'Golden Gate Park': 17,\n        'Embarcadero': 9,\n        'Financial District': 9,\n        'North Beach': 8,\n        'Presidio': 17\n    },\n    'Fisherman\\'s Wharf': {\n        'Marina District': 9,\n        'Richmond District': 18,\n        'Union Square': 13,\n        'Nob Hill': 11,\n        'Golden Gate Park': 25,\n        'Embarcadero': 8,\n        'Financial District': 11,\n        'North Beach': 6,\n        'Presidio': 17\n    },\n    'Golden Gate Park': {\n        'Marina District': 16,\n        'Richmond District': 7,\n        'Union Square': 22,\n        'Nob Hill': 20,\n        'Fisherman\\'s Wharf': 24,\n        'Embarcadero': 25,\n        'Financial District': 26,\n        'North Beach': 23,\n        'Presidio': 11\n    },\n    'Embarcadero': {\n        'Marina District': 12,\n        'Richmond District': 21,\n        'Union Square': 10,\n        'Nob Hill': 10,\n        'Fisherman\\'s Wharf': 6,\n        'Golden Gate Park': 25,\n        'Financial District': 5,\n        'North Beach': 5,\n        'Presidio': 20\n    },\n    'Financial District': {\n        'Marina District': 15,\n        'Richmond District': 21,\n        'Union Square': 9,\n        'Nob Hill': 8,\n        'Fisherman\\'s Wharf': 10,\n        'Golden Gate Park': 23,\n        'Embarcadero': 4,\n        'North Beach': 7,\n        'Presidio': 22\n    },\n    'North Beach': {\n        'Marina District': 9,\n        'Richmond District': 18,\n        'Union Square': 7,\n        'Nob Hill': 7,\n        'Fisherman\\'s Wharf': 5,\n        'Golden Gate Park': 22,\n        'Embarcadero': 6,\n        'Financial District': 8,\n        'Presidio': 17\n    },\n    'Presidio': {\n        'Marina District': 11,\n        'Richmond District': 7,\n        'Union Square': 22,\n        'Nob Hill': 18,\n        'Fisherman\\'s Wharf': 19,\n        'Golden Gate Park': 12,\n        'Embarcadero': 20,\n        'Financial District': 23,\n        'North Beach': 18\n    }\n}\n\n# Constraints\nconstraints = {\n    'Stephanie': {'start_time': datetime(2024, 7, 26, 16, 15), 'end_time': datetime(2024, 7, 26, 21, 30),'min_time': 75},\n    'William': {'start_time': datetime(2024, 7, 26, 10, 45), 'end_time': datetime(2024, 7, 26, 17, 30),'min_time': 45},\n    'Elizabeth': {'start_time': datetime(2024, 7, 26, 12, 15), 'end_time': datetime(2024, 7, 26, 15, 0),'min_time': 105},\n    'Joseph': {'start_time': datetime(2024, 7, 26, 12, 45), 'end_time': datetime(2024, 7, 26, 14, 0),'min_time': 75},\n    'Anthony': {'start_time': datetime(2024, 7, 26, 13, 0), 'end_time': datetime(2024, 7, 26, 20, 30),'min_time': 75},\n    'Barbara': {'start_time': datetime(2024, 7, 26, 19, 15), 'end_time': datetime(2024, 7, 26, 20, 30),'min_time': 75},\n    'Carol': {'start_time': datetime(2024, 7, 26, 11, 45), 'end_time': datetime(2024, 7, 26, 16, 15),'min_time': 60},\n    'Sandra': {'start_time': datetime(2024, 7, 26, 10, 0), 'end_time': datetime(2024, 7, 26, 12, 30),'min_time': 15},\n    'Kenneth': {'start_time': datetime(2024, 7, 26, 21, 15), 'end_time': datetime(2024, 7, 26, 22, 15),'min_time': 45}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Marina District', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Marina District to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Marina District', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Marina District\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Marina District'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_828"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "9:10",
                        "end_time": "9:25"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Brian",
                        "start_time": "14:10",
                        "end_time": "14:55"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joseph",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Betty",
                        "start_time": "19:00",
                        "end_time": "20:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Melissa",
                        "start_time": "20:36",
                        "end_time": "21:06"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "21:14",
                        "end_time": "21:29"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Union Square': {\n        'The Castro': 17,\n        'North Beach': 10,\n        'Embarcadero': 11,\n        'Alamo Square': 15,\n        'Nob Hill': 9,\n        'Presidio': 24,\n        'Fisherman\\'s Wharf': 15,\n        'Mission District': 14,\n        'Haight-Ashbury': 18\n    },\n    'The Castro': {\n        'Union Square': 19,\n        'North Beach': 20,\n        'Embarcadero': 22,\n        'Alamo Square': 8,\n        'Nob Hill': 16,\n        'Presidio': 20,\n        'Fisherman\\'s Wharf': 24,\n        'Mission District': 7,\n        'Haight-Ashbury': 6\n    },\n    'North Beach': {\n        'Union Square': 7,\n        'The Castro': 23,\n        'Embarcadero': 6,\n        'Alamo Square': 16,\n        'Nob Hill': 7,\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 5,\n        'Mission District': 18,\n        'Haight-Ashbury': 18\n    },\n    'Embarcadero': {\n        'Union Square': 10,\n        'The Castro': 25,\n        'North Beach': 5,\n        'Alamo Square': 19,\n        'Nob Hill': 10,\n        'Presidio': 20,\n        'Fisherman\\'s Wharf': 6,\n        'Mission District': 20,\n        'Haight-Ashbury': 21\n    },\n    'Alamo Square': {\n        'Union Square': 14,\n        'The Castro': 8,\n        'North Beach': 15,\n        'Embarcadero': 16,\n        'Nob Hill': 11,\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 19,\n        'Mission District': 10,\n        'Haight-Ashbury': 5\n    },\n    'Nob Hill': {\n        'Union Square': 7,\n        'The Castro': 17,\n        'North Beach': 8,\n        'Embarcadero': 9,\n        'Alamo Square': 11,\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 10,\n        'Mission District': 13,\n        'Haight-Ashbury': 13\n    },\n    'Presidio': {\n        'Union Square': 22,\n        'The Castro': 21,\n        'North Beach': 18,\n        'Embarcadero': 20,\n        'Alamo Square': 19,\n        'Nob Hill': 18,\n        'Fisherman\\'s Wharf': 19,\n        'Mission District': 26,\n        'Haight-Ashbury': 15\n    },\n    'Fisherman\\'s Wharf': {\n        'Union Square': 13,\n        'The Castro': 27,\n        'North Beach': 6,\n        'Embarcadero': 8,\n        'Alamo Square': 21,\n        'Nob Hill': 11,\n        'Presidio': 17,\n        'Mission District': 22,\n        'Haight-Ashbury': 22\n    },\n    'Mission District': {\n        'Union Square': 15,\n        'The Castro': 7,\n        'North Beach': 17,\n        'Embarcadero': 19,\n        'Alamo Square': 11,\n        'Nob Hill': 12,\n        'Presidio': 25,\n        'Fisherman\\'s Wharf': 22,\n        'Haight-Ashbury': 12\n    },\n    'Haight-Ashbury': {\n        'Union Square': 19,\n        'The Castro': 6,\n        'North Beach': 19,\n        'Embarcadero': 20,\n        'Alamo Square': 5,\n        'Nob Hill': 15,\n        'Presidio': 15,\n        'Fisherman\\'s Wharf': 23,\n        'Mission District': 11\n    }\n}\n\n# Constraints\nconstraints = {\n    'Melissa': {'start_time': datetime(2024, 7, 26, 20, 15), 'end_time': datetime(2024, 7, 26, 21, 15),'min_time': 30},\n    'Kimberly': {'start_time': datetime(2024, 7, 26, 7, 0), 'end_time': datetime(2024, 7, 26, 10, 30),'min_time': 15},\n    'Joseph': {'start_time': datetime(2024, 7, 26, 15, 30), 'end_time': datetime(2024, 7, 26, 20, 30),'min_time': 75},\n    'Barbara': {'start_time': datetime(2024, 7, 26, 20, 45), 'end_time': datetime(2024, 7, 26, 21, 45),'min_time': 15},\n    'Kenneth': {'start_time': datetime(2024, 7, 26, 12, 15), 'end_time': datetime(2024, 7, 26, 17, 15),'min_time': 105},\n    'Joshua': {'start_time': datetime(2024, 7, 26, 16, 30), 'end_time': datetime(2024, 7, 26, 18, 15),'min_time': 105},\n    'Brian': {'start_time': datetime(2024, 7, 26, 9, 30), 'end_time': datetime(2024, 7, 26, 15, 30),'min_time': 45},\n    'Steven': {'start_time': datetime(2024, 7, 26, 19, 30), 'end_time': datetime(2024, 7, 26, 21, 0),'min_time': 90},\n    'Betty': {'start_time': datetime(2024, 7, 26, 19, 0), 'end_time': datetime(2024, 7, 26, 20, 30),'min_time': 90}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Union Square', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Union Square to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Union Square', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Union Square\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Union Square'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_800"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Jessica",
                        "start_time": "9:13",
                        "end_time": "11:13"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "John",
                        "start_time": "11:18",
                        "end_time": "11:33"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Nancy",
                        "start_time": "11:40",
                        "end_time": "12:25"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Rebecca",
                        "start_time": "12:49",
                        "end_time": "14:04"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Jason",
                        "start_time": "15:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sarah",
                        "start_time": "17:30",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Mark",
                        "start_time": "18:28",
                        "end_time": "19:58"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "20:45",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Union Square': {\n        'Mission District': 14,\n        'Fisherman\\'s Wharf': 15,\n        'Russian Hill': 13,\n        'Marina District': 18,\n        'North Beach': 10,\n        'Chinatown': 7,\n        'Pacific Heights': 15,\n        'The Castro': 17,\n        'Nob Hill': 9,\n        'Sunset District': 27\n    },\n    'Mission District': {\n        'Union Square': 15,\n        'Fisherman\\'s Wharf': 22,\n        'Russian Hill': 15,\n        'Marina District': 19,\n        'North Beach': 17,\n        'Chinatown': 16,\n        'Pacific Heights': 16,\n        'The Castro': 7,\n        'Nob Hill': 12,\n        'Sunset District': 24\n    },\n    'Fisherman\\'s Wharf': {\n        'Union Square': 13,\n        'Mission District': 22,\n        'Russian Hill': 7,\n        'Marina District': 9,\n        'North Beach': 6,\n        'Chinatown': 12,\n        'Pacific Heights': 12,\n        'The Castro': 27,\n        'Nob Hill': 11,\n        'Sunset District': 27\n    },\n    'Russian Hill': {\n        'Union Square': 10,\n        'Mission District': 16,\n        'Fisherman\\'s Wharf': 7,\n        'Marina District': 7,\n        'North Beach': 5,\n        'Chinatown': 9,\n        'Pacific Heights': 7,\n        'The Castro': 21,\n        'Nob Hill': 5,\n        'Sunset District': 23\n    },\n    'Marina District': {\n        'Union Square': 16,\n        'Mission District': 20,\n        'Fisherman\\'s Wharf': 10,\n        'Russian Hill': 8,\n        'North Beach': 11,\n        'Chinatown': 15,\n        'Pacific Heights': 7,\n        'The Castro': 22,\n        'Nob Hill': 12,\n        'Sunset District': 19\n    },\n    'North Beach': {\n        'Union Square': 7,\n        'Mission District': 18,\n        'Fisherman\\'s Wharf': 5,\n        'Russian Hill': 4,\n        'Marina District': 9,\n        'Chinatown': 6,\n        'Pacific Heights': 8,\n        'The Castro': 23,\n        'Nob Hill': 7,\n        'Sunset District': 27\n    },\n    'Chinatown': {\n        'Union Square': 7,\n        'Mission District': 17,\n        'Fisherman\\'s Wharf': 8,\n        'Russian Hill': 7,\n        'Marina District': 12,\n        'North Beach': 3,\n        'Pacific Heights': 10,\n        'The Castro': 22,\n        'Nob Hill': 9,\n        'Sunset District': 29\n    },\n    'Pacific Heights': {\n        'Union Square': 12,\n        'Mission District': 15,\n        'Fisherman\\'s Wharf': 13,\n        'Russian Hill': 7,\n        'Marina District': 6,\n        'North Beach': 9,\n        'Chinatown': 11,\n        'The Castro': 16,\n        'Nob Hill': 8,\n        'Sunset District': 21\n    },\n    'The Castro': {\n        'Union Square': 19,\n        'Mission District': 7,\n        'Fisherman\\'s Wharf': 24,\n        'Russian Hill': 18,\n        'Marina District': 21,\n        'North Beach': 20,\n        'Chinatown': 22,\n        'Pacific Heights': 16,\n        'Nob Hill': 16,\n        'Sunset District': 17\n    },\n    'Nob Hill': {\n        'Union Square': 7,\n        'Mission District': 13,\n        'Fisherman\\'s Wharf': 10,\n        'Russian Hill': 5,\n        'Marina District': 11,\n        'North Beach': 8,\n        'Chinatown': 6,\n        'Pacific Heights': 8,\n        'The Castro': 17,\n        'Sunset District': 27\n    },\n    'Sunset District': {\n        'Union Square': 30,\n        'Mission District': 25,\n        'Fisherman\\'s Wharf': 29,\n        'Russian Hill': 24,\n        'Marina District': 21,\n        'North Beach': 28,\n        'Chinatown': 30,\n        'Pacific Heights': 21,\n        'The Castro': 17,\n        'Nob Hill': 27\n    }\n}\n\n# Constraints\nconstraints = {\n    'Kevin': {'start_time': datetime(2024, 7, 26, 20, 45), 'end_time': datetime(2024, 7, 26, 21, 45),'min_time': 60},\n    'Mark': {'start_time': datetime(2024, 7, 26, 17, 15), 'end_time': datetime(2024, 7, 26, 20, 0),'min_time': 90},\n    'Jessica': {'start_time': datetime(2024, 7, 26, 9, 0), 'end_time': datetime(2024, 7, 26, 15, 0),'min_time': 120},\n    'Jason': {'start_time': datetime(2024, 7, 26, 15, 15), 'end_time': datetime(2024, 7, 26, 21, 45),'min_time': 120},\n    'John': {'start_time': datetime(2024, 7, 26, 9, 45), 'end_time': datetime(2024, 7, 26, 12, 0),'min_time': 15},\n    'Karen': {'start_time': datetime(2024, 7, 26, 16, 45), 'end_time': datetime(2024, 7, 26, 19, 0),'min_time': 75},\n    'Sarah': {'start_time': datetime(2024, 7, 26, 17, 30), 'end_time': datetime(2024, 7, 26, 18, 15),'min_time': 45},\n    'Amanda': {'start_time': datetime(2024, 7, 26, 20, 0), 'end_time': datetime(2024, 7, 26, 21, 15),'min_time': 60},\n    'Nancy': {'start_time': datetime(2024, 7, 26, 9, 45), 'end_time': datetime(2024, 7, 26, 13, 0),'min_time': 45},\n    'Rebecca': {'start_time': datetime(2024, 7, 26, 8, 45), 'end_time': datetime(2024, 7, 26, 13, 0),'min_time': 75}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Union Square', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Union Square to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Union Square', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Union Square\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Union Square'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_940"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kevin",
                        "start_time": "9:17",
                        "end_time": "10:32"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Kimberly",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joseph",
                        "start_time": "18:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Thomas",
                        "start_time": "19:38",
                        "end_time": "20:23"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Sunset District': {\n        'Alamo Square': 17,\n        'Russian Hill': 24,\n        'Presidio': 16,\n        'Financial District': 30\n    },\n    'Alamo Square': {\n        'Sunset District': 16,\n        'Russian Hill': 13,\n        'Presidio': 18,\n        'Financial District': 17\n    },\n    'Russian Hill': {\n        'Sunset District': 23,\n        'Alamo Square': 15,\n        'Presidio': 14,\n        'Financial District': 11\n    },\n    'Presidio': {\n        'Sunset District': 15,\n        'Alamo Square': 18,\n        'Russian Hill': 14,\n        'Financial District': 23\n    },\n    'Financial District': {\n        'Sunset District': 31,\n        'Alamo Square': 17,\n        'Russian Hill': 10,\n        'Presidio': 22\n    }\n}\n\n# Constraints\nconstraints = {\n    'Kevin': {'start_time': datetime(2024, 7, 26, 8, 15), 'end_time': datetime(2024, 7, 26, 21, 30),'min_time': 75},\n    'Kimberly': {'start_time': datetime(2024, 7, 26, 8, 45), 'end_time': datetime(2024, 7, 26, 12, 30),'min_time': 30},\n    'Joseph': {'start_time': datetime(2024, 7, 26, 18, 30), 'end_time': datetime(2024, 7, 26, 19, 15),'min_time': 45},\n    'Thomas': {'start_time': datetime(2024, 7, 26, 19, 0), 'end_time': datetime(2024, 7, 26, 21, 45),'min_time': 45}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Sunset District', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Sunset District to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Sunset District', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Sunset District\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Sunset District'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_391"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "13:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Karen",
                        "start_time": "18:45",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'North Beach': {\n        'Pacific Heights': 8,\n        'Embarcadero': 6\n    },\n    'Pacific Heights': {\n        'North Beach': 9,\n        'Embarcadero': 10\n    },\n    'Embarcadero': {\n        'North Beach': 5,\n        'Pacific Heights': 11\n    }\n}\n\n# Constraints\nconstraints = {\n    'Karen': {'start_time': datetime(2024, 7, 26, 18, 45), 'end_time': datetime(2024, 7, 26, 20, 15),'min_time': 90},\n    'Mark': {'start_time': datetime(2024, 7, 26, 13, 0), 'end_time': datetime(2024, 7, 26, 17, 45),'min_time': 120}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'North Beach', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from North Beach to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('North Beach', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to North Beach\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'North Beach'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_143"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joseph",
                        "start_time": "12:30",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Sandra",
                        "start_time": "14:19",
                        "end_time": "15:34"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Nancy",
                        "start_time": "15:46",
                        "end_time": "17:31"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Karen",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Union Square': {\n        'Nob Hill': 9,\n        'Haight-Ashbury': 18,\n        'Chinatown': 7,\n        'Marina District': 18\n    },\n    'Nob Hill': {\n        'Union Square': 7,\n        'Haight-Ashbury': 13,\n        'Chinatown': 6,\n        'Marina District': 11\n    },\n    'Haight-Ashbury': {\n        'Union Square': 17,\n        'Nob Hill': 15,\n        'Chinatown': 19,\n        'Marina District': 17\n    },\n    'Chinatown': {\n        'Union Square': 7,\n        'Nob Hill': 8,\n        'Haight-Ashbury': 19,\n        'Marina District': 12\n    },\n    'Marina District': {\n        'Union Square': 16,\n        'Nob Hill': 12,\n        'Haight-Ashbury': 16,\n        'Chinatown': 16\n    }\n}\n\n# Constraints\nconstraints = {\n    'Karen': {'start_time': datetime(2024, 7, 26, 21, 15), 'end_time': datetime(2024, 7, 26, 21, 45),'min_time': 30},\n    'Joseph': {'start_time': datetime(2024, 7, 26, 12, 30), 'end_time': datetime(2024, 7, 26, 19, 45),'min_time': 90},\n    'Sandra': {'start_time': datetime(2024, 7, 26, 7, 15), 'end_time': datetime(2024, 7, 26, 19, 15),'min_time': 75},\n    'Nancy': {'start_time': datetime(2024, 7, 26, 11, 0), 'end_time': datetime(2024, 7, 26, 20, 15),'min_time': 105}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Union Square', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Union Square to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Union Square', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Union Square\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Union Square'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_352"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Laura",
                        "start_time": "9:11",
                        "end_time": "9:41"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "18:30",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Betty",
                        "start_time": "19:16",
                        "end_time": "20:01"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Patricia",
                        "start_time": "20:15",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Fisherman\\'s Wharf': {\n        'Bayview': 26,\n        'Golden Gate Park': 25,\n        'Nob Hill': 11,\n        'Marina District': 9,\n        'Embarcadero': 8\n    },\n    'Bayview': {\n        'Fisherman\\'s Wharf': 25,\n        'Golden Gate Park': 22,\n        'Nob Hill': 20,\n        'Marina District': 25,\n        'Embarcadero': 19\n    },\n    'Golden Gate Park': {\n        'Fisherman\\'s Wharf': 24,\n        'Bayview': 23,\n        'Nob Hill': 20,\n        'Marina District': 16,\n        'Embarcadero': 25\n    },\n    'Nob Hill': {\n        'Fisherman\\'s Wharf': 11,\n        'Bayview': 19,\n        'Golden Gate Park': 17,\n        'Marina District': 11,\n        'Embarcadero': 9\n    },\n    'Marina District': {\n        'Fisherman\\'s Wharf': 10,\n        'Bayview': 27,\n        'Golden Gate Park': 18,\n        'Nob Hill': 12,\n        'Embarcadero': 14\n    },\n    'Embarcadero': {\n        'Fisherman\\'s Wharf': 6,\n        'Bayview': 21,\n        'Golden Gate Park': 25,\n        'Nob Hill': 10,\n        'Marina District': 12\n    }\n}\n\n# Constraints\nconstraints = {\n    'Thomas': {'start_time': datetime(2024, 7, 26, 15, 30), 'end_time': datetime(2024, 7, 26, 18, 30),'min_time': 120},\n    'Stephanie': {'start_time': datetime(2024, 7, 26, 18, 30), 'end_time': datetime(2024, 7, 26, 21, 45),'min_time': 30},\n    'Laura': {'start_time': datetime(2024, 7, 26, 8, 45), 'end_time': datetime(2024, 7, 26, 16, 15),'min_time': 30},\n    'Betty': {'start_time': datetime(2024, 7, 26, 18, 45), 'end_time': datetime(2024, 7, 26, 21, 45),'min_time': 45},\n    'Patricia': {'start_time': datetime(2024, 7, 26, 17, 30), 'end_time': datetime(2024, 7, 26, 22, 0),'min_time': 45}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Fisherman\\'s Wharf', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Fisherman's Wharf to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Fisherman\\'s Wharf', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Fisherman's Wharf\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Fisherman\\'s Wharf'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_409"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "11:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Elizabeth",
                        "start_time": "12:11",
                        "end_time": "13:26"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Brian",
                        "start_time": "13:34",
                        "end_time": "15:04"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Anthony",
                        "start_time": "15:12",
                        "end_time": "15:42"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Ashley",
                        "start_time": "15:53",
                        "end_time": "17:23"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Deborah",
                        "start_time": "17:42",
                        "end_time": "18:42"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kimberly",
                        "start_time": "18:57",
                        "end_time": "19:42"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jessica",
                        "start_time": "20:00",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Bayview': {\n        'North Beach': 22,\n        'Fisherman\\'s Wharf': 25,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 20,\n        'Golden Gate Park': 22,\n        'Union Square': 18,\n        'Alamo Square': 16,\n        'Presidio': 32,\n        'Chinatown': 19,\n        'Pacific Heights': 23\n    },\n    'North Beach': {\n        'Bayview': 25,\n        'Fisherman\\'s Wharf': 5,\n        'Haight-Ashbury': 18,\n        'Nob Hill': 7,\n        'Golden Gate Park': 22,\n        'Union Square': 7,\n        'Alamo Square': 16,\n        'Presidio': 17,\n        'Chinatown': 6,\n        'Pacific Heights': 8\n    },\n    'Fisherman\\'s Wharf': {\n        'Bayview': 26,\n        'North Beach': 6,\n        'Haight-Ashbury': 22,\n        'Nob Hill': 11,\n        'Golden Gate Park': 25,\n        'Union Square': 13,\n        'Alamo Square': 21,\n        'Presidio': 17,\n        'Chinatown': 12,\n        'Pacific Heights': 12\n    },\n    'Haight-Ashbury': {\n        'Bayview': 18,\n        'North Beach': 19,\n        'Fisherman\\'s Wharf': 23,\n        'Nob Hill': 15,\n        'Golden Gate Park': 7,\n        'Union Square': 19,\n        'Alamo Square': 5,\n        'Presidio': 15,\n        'Chinatown': 19,\n        'Pacific Heights': 12\n    },\n    'Nob Hill': {\n        'Bayview': 19,\n        'North Beach': 8,\n        'Fisherman\\'s Wharf': 10,\n        'Haight-Ashbury': 13,\n        'Golden Gate Park': 17,\n        'Union Square': 7,\n        'Alamo Square': 11,\n        'Presidio': 17,\n        'Chinatown': 6,\n        'Pacific Heights': 8\n    },\n    'Golden Gate Park': {\n        'Bayview': 23,\n        'North Beach': 23,\n        'Fisherman\\'s Wharf': 24,\n        'Haight-Ashbury': 7,\n        'Nob Hill': 20,\n        'Union Square': 22,\n        'Alamo Square': 9,\n        'Presidio': 11,\n        'Chinatown': 23,\n        'Pacific Heights': 16\n    },\n    'Union Square': {\n        'Bayview': 15,\n        'North Beach': 10,\n        'Fisherman\\'s Wharf': 15,\n        'Haight-Ashbury': 18,\n        'Nob Hill': 9,\n        'Golden Gate Park': 22,\n        'Alamo Square': 15,\n        'Presidio': 24,\n        'Chinatown': 7,\n        'Pacific Heights': 15\n    },\n    'Alamo Square': {\n        'Bayview': 16,\n        'North Beach': 15,\n        'Fisherman\\'s Wharf': 19,\n        'Haight-Ashbury': 5,\n        'Nob Hill': 11,\n        'Golden Gate Park': 9,\n        'Union Square': 14,\n        'Presidio': 17,\n        'Chinatown': 15,\n        'Pacific Heights': 10\n    },\n    'Presidio': {\n        'Bayview': 31,\n        'North Beach': 18,\n        'Fisherman\\'s Wharf': 19,\n        'Haight-Ashbury': 15,\n        'Nob Hill': 18,\n        'Golden Gate Park': 12,\n        'Union Square': 22,\n        'Alamo Square': 19,\n        'Chinatown': 21,\n        'Pacific Heights': 11\n    },\n    'Chinatown': {\n        'Bayview': 20,\n        'North Beach': 3,\n        'Fisherman\\'s Wharf': 8,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 9,\n        'Golden Gate Park': 23,\n        'Union Square': 7,\n        'Alamo Square': 17,\n        'Presidio': 19,\n        'Pacific Heights': 10\n    },\n    'Pacific Heights': {\n        'Bayview': 22,\n        'North Beach': 9,\n        'Fisherman\\'s Wharf': 13,\n        'Haight-Ashbury': 11,\n        'Nob Hill': 8,\n        'Golden Gate Park': 15,\n        'Union Square': 12,\n        'Alamo Square': 10,\n        'Presidio': 11,\n        'Chinatown': 11\n    }\n}\n\n# Constraints\nconstraints = {\n    'Brian': {'start_time': datetime(2024, 7, 26, 13, 0), 'end_time': datetime(2024, 7, 26, 19, 0),'min_time': 90},\n    'Richard': {'start_time': datetime(2024, 7, 26, 11, 0), 'end_time': datetime(2024, 7, 26, 12, 45),'min_time': 60},\n    'Ashley': {'start_time': datetime(2024, 7, 26, 15, 0), 'end_time': datetime(2024, 7, 26, 20, 30),'min_time': 90},\n    'Elizabeth': {'start_time': datetime(2024, 7, 26, 11, 45), 'end_time': datetime(2024, 7, 26, 17, 30),'min_time': 75},\n    'Jessica': {'start_time': datetime(2024, 7, 26, 20, 0), 'end_time': datetime(2024, 7, 26, 21, 45),'min_time': 105},\n    'Deborah': {'start_time': datetime(2024, 7, 26, 17, 30), 'end_time': datetime(2024, 7, 26, 22, 0),'min_time': 60},\n    'Kimberly': {'start_time': datetime(2024, 7, 26, 17, 30), 'end_time': datetime(2024, 7, 26, 20, 15),'min_time': 45},\n    'Matthew': {'start_time': datetime(2024, 7, 26, 8, 15), 'end_time': datetime(2024, 7, 26, 9, 0),'min_time': 15},\n    'Kenneth': {'start_time': datetime(2024, 7, 26, 13, 45), 'end_time': datetime(2024, 7, 26, 19, 30),'min_time': 105},\n    'Anthony': {'start_time': datetime(2024, 7, 26, 14, 15), 'end_time': datetime(2024, 7, 26, 16, 0),'min_time': 30}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Bayview', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Bayview to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Bayview', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Bayview\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Bayview'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_952"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "10:15",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Kimberly",
                        "start_time": "14:15",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Kenneth",
                        "start_time": "15:01",
                        "end_time": "15:31"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Brian",
                        "start_time": "15:51",
                        "end_time": "17:06"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Sandra",
                        "start_time": "17:24",
                        "end_time": "18:24"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Laura",
                        "start_time": "18:37",
                        "end_time": "19:07"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "19:22",
                        "end_time": "20:37"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Paul",
                        "start_time": "21:00",
                        "end_time": "21:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Linda",
                        "start_time": "21:30",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Pacific Heights': {\n        'Marina District': 6,\n        'The Castro': 16,\n        'Richmond District': 12,\n        'Alamo Square': 10,\n        'Financial District': 13,\n        'Presidio': 11,\n        'Mission District': 15,\n        'Nob Hill': 8,\n        'Russian Hill': 7\n    },\n    'Marina District': {\n        'Pacific Heights': 7,\n        'The Castro': 22,\n        'Richmond District': 11,\n        'Alamo Square': 15,\n        'Financial District': 17,\n        'Presidio': 10,\n        'Mission District': 20,\n        'Nob Hill': 12,\n        'Russian Hill': 8\n    },\n    'The Castro': {\n        'Pacific Heights': 16,\n        'Marina District': 21,\n        'Richmond District': 16,\n        'Alamo Square': 8,\n        'Financial District': 21,\n        'Presidio': 20,\n        'Mission District': 7,\n        'Nob Hill': 16,\n        'Russian Hill': 18\n    },\n    'Richmond District': {\n        'Pacific Heights': 10,\n        'Marina District': 9,\n        'The Castro': 16,\n        'Alamo Square': 13,\n        'Financial District': 22,\n        'Presidio': 7,\n        'Mission District': 20,\n        'Nob Hill': 17,\n        'Russian Hill': 13\n    },\n    'Alamo Square': {\n        'Pacific Heights': 10,\n        'Marina District': 15,\n        'The Castro': 8,\n        'Richmond District': 11,\n        'Financial District': 17,\n        'Presidio': 17,\n        'Mission District': 10,\n        'Nob Hill': 11,\n        'Russian Hill': 13\n    },\n    'Financial District': {\n        'Pacific Heights': 13,\n        'Marina District': 15,\n        'The Castro': 20,\n        'Richmond District': 21,\n        'Alamo Square': 17,\n        'Presidio': 22,\n        'Mission District': 17,\n        'Nob Hill': 8,\n        'Russian Hill': 11\n    },\n    'Presidio': {\n        'Pacific Heights': 11,\n        'Marina District': 11,\n        'The Castro': 21,\n        'Richmond District': 7,\n        'Alamo Square': 19,\n        'Financial District': 23,\n        'Mission District': 26,\n        'Nob Hill': 18,\n        'Russian Hill': 14\n    },\n    'Mission District': {\n        'Pacific Heights': 16,\n        'Marina District': 19,\n        'The Castro': 7,\n        'Richmond District': 20,\n        'Alamo Square': 11,\n        'Financial District': 15,\n        'Presidio': 25,\n        'Nob Hill': 12,\n        'Russian Hill': 15\n    },\n    'Nob Hill': {\n        'Pacific Heights': 8,\n        'Marina District': 11,\n        'The Castro': 17,\n        'Richmond District': 14,\n        'Alamo Square': 11,\n        'Financial District': 9,\n        'Presidio': 17,\n        'Mission District': 13,\n        'Russian Hill': 5\n    },\n    'Russian Hill': {\n        'Pacific Heights': 7,\n        'Marina District': 7,\n        'The Castro': 21,\n        'Richmond District': 14,\n        'Alamo Square': 15,\n        'Financial District': 11,\n        'Presidio': 14,\n        'Mission District': 16,\n        'Nob Hill': 5\n    }\n}\n\n# Constraints\nconstraints = {\n    'Linda': {'start_time': datetime(2024, 7, 26, 18, 0), 'end_time': datetime(2024, 7, 26, 20, 0),'min_time': 30},\n    'Kenneth': {'start_time': datetime(2024, 7, 26, 14, 45), 'end_time': datetime(2024, 7, 26, 16, 15),'min_time': 30},\n    'Kimberly': {'start_time': datetime(2024, 7, 26, 14, 15), 'end_time': datetime(2024, 7, 26, 20, 0),'min_time': 30},\n    'Paul': {'start_time': datetime(2024, 7, 26, 21, 0), 'end_time': datetime(2024, 7, 26, 21, 45),'min_time': 15},\n    'Carol': {'start_time': datetime(2024, 7, 26, 10, 15), 'end_time': datetime(2024, 7, 26, 12, 0),'min_time': 60},\n    'Brian': {'start_time': datetime(2024, 7, 26, 10, 0), 'end_time': datetime(2024, 7, 26, 21, 30),'min_time': 75},\n    'Laura': {'start_time': datetime(2024, 7, 26, 16, 15), 'end_time': datetime(2024, 7, 26, 20, 30),'min_time': 30},\n    'Sandra': {'start_time': datetime(2024, 7, 26, 9, 15), 'end_time': datetime(2024, 7, 26, 18, 30),'min_time': 60},\n    'Karen': {'start_time': datetime(2024, 7, 26, 18, 30), 'end_time': datetime(2024, 7, 26, 20, 30),'min_time': 75}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Pacific Heights', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Pacific Heights to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Pacific Heights', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Pacific Heights\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Pacific Heights'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_870"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "9:20",
                        "end_time": "11:20"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Matthew",
                        "start_time": "11:37",
                        "end_time": "13:07"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "David",
                        "start_time": "13:23",
                        "end_time": "14:08"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "14:36",
                        "end_time": "15:21"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "15:27",
                        "end_time": "16:12"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jessica",
                        "start_time": "16:17",
                        "end_time": "17:02"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Deborah",
                        "start_time": "19:00",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Karen",
                        "start_time": "19:57",
                        "end_time": "21:57"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Richmond District': {\n        'Chinatown': 20,\n        'Sunset District': 11,\n        'Alamo Square': 13,\n        'Financial District': 22,\n        'North Beach': 17,\n        'Embarcadero': 19,\n        'Presidio': 7,\n        'Golden Gate Park': 9,\n        'Bayview': 27\n    },\n    'Chinatown': {\n        'Richmond District': 20,\n        'Sunset District': 29,\n        'Alamo Square': 17,\n        'Financial District': 5,\n        'North Beach': 3,\n        'Embarcadero': 5,\n        'Presidio': 19,\n        'Golden Gate Park': 23,\n        'Bayview': 20\n    },\n    'Sunset District': {\n        'Richmond District': 12,\n        'Chinatown': 30,\n        'Alamo Square': 17,\n        'Financial District': 30,\n        'North Beach': 28,\n        'Embarcadero': 30,\n        'Presidio': 16,\n        'Golden Gate Park': 11,\n        'Bayview': 22\n    },\n    'Alamo Square': {\n        'Richmond District': 11,\n        'Chinatown': 15,\n        'Sunset District': 16,\n        'Financial District': 17,\n        'North Beach': 15,\n        'Embarcadero': 16,\n        'Presidio': 17,\n        'Golden Gate Park': 9,\n        'Bayview': 16\n    },\n    'Financial District': {\n        'Richmond District': 21,\n        'Chinatown': 5,\n        'Sunset District': 30,\n        'Alamo Square': 17,\n        'North Beach': 7,\n        'Embarcadero': 4,\n        'Presidio': 22,\n        'Golden Gate Park': 23,\n        'Bayview': 19\n    },\n    'North Beach': {\n        'Richmond District': 18,\n        'Chinatown': 6,\n        'Sunset District': 27,\n        'Alamo Square': 16,\n        'Financial District': 8,\n        'Embarcadero': 6,\n        'Presidio': 17,\n        'Golden Gate Park': 22,\n        'Bayview': 25\n    },\n    'Embarcadero': {\n        'Richmond District': 21,\n        'Chinatown': 7,\n        'Sunset District': 30,\n        'Alamo Square': 19,\n        'Financial District': 5,\n        'North Beach': 5,\n        'Presidio': 20,\n        'Golden Gate Park': 25,\n        'Bayview': 21\n    },\n    'Presidio': {\n        'Richmond District': 7,\n        'Chinatown': 21,\n        'Sunset District': 15,\n        'Alamo Square': 19,\n        'Financial District': 23,\n        'North Beach': 18,\n        'Embarcadero': 20,\n        'Golden Gate Park': 12,\n        'Bayview': 31\n    },\n    'Golden Gate Park': {\n        'Richmond District': 7,\n        'Chinatown': 23,\n        'Sunset District': 10,\n        'Alamo Square': 9,\n        'Financial District': 26,\n        'North Beach': 23,\n        'Embarcadero': 25,\n        'Presidio': 11,\n        'Bayview': 23\n    },\n    'Bayview': {\n        'Richmond District': 25,\n        'Chinatown': 19,\n        'Sunset District': 23,\n        'Alamo Square': 16,\n        'Financial District': 19,\n        'North Beach': 22,\n        'Embarcadero': 19,\n        'Presidio': 32,\n        'Golden Gate Park': 22\n    }\n}\n\n# Constraints\nconstraints = {\n    'Robert': {'start_time': datetime(2024, 7, 26, 7, 45), 'end_time': datetime(2024, 7, 26, 17, 30),'min_time': 120},\n    'David': {'start_time': datetime(2024, 7, 26, 12, 30), 'end_time': datetime(2024, 7, 26, 19, 45),'min_time': 45},\n    'Matthew': {'start_time': datetime(2024, 7, 26, 8, 45), 'end_time': datetime(2024, 7, 26, 14, 45),'min_time': 90},\n    'Jessica': {'start_time': datetime(2024, 7, 26, 9, 30), 'end_time': datetime(2024, 7, 26, 18, 45),'min_time': 45},\n    'Melissa': {'start_time': datetime(2024, 7, 26, 7, 15), 'end_time': datetime(2024, 7, 26, 16, 45),'min_time': 45},\n    'Mark': {'start_time': datetime(2024, 7, 26, 15, 15), 'end_time': datetime(2024, 7, 26, 17, 0),'min_time': 45},\n    'Deborah': {'start_time': datetime(2024, 7, 26, 19, 0), 'end_time': datetime(2024, 7, 26, 19, 45),'min_time': 45},\n    'Karen': {'start_time': datetime(2024, 7, 26, 19, 30), 'end_time': datetime(2024, 7, 26, 23, 0),'min_time': 120},\n    'Laura': {'start_time': datetime(2024, 7, 26, 21, 15), 'end_time': datetime(2024, 7, 26, 22, 15),'min_time': 15}\n}\n\n# Start time\nstart_time = datetime(2024, 7, 26, 9, 0)\n\n# Function to calculate travel time\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\n# Function to check if a meeting is possible\ndef is_meeting_possible(meeting_start_time, meeting_end_time, person):\n    person_start_time = constraints[person]['start_time']\n    person_end_time = constraints[person]['end_time']\n    min_time = constraints[person]['min_time']\n    return (meeting_start_time >= person_start_time and meeting_start_time <= person_end_time) or \\\n           (meeting_end_time >= person_start_time and meeting_end_time <= person_end_time) or \\\n           (person_start_time <= meeting_start_time and person_end_time >= meeting_end_time and meeting_end_time - meeting_start_time >= timedelta(minutes=min_time))\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n    while current_time < datetime(2024, 7, 26, 23, 59):\n        possible_meetings = []\n        for person in constraints:\n            if is_meeting_possible(current_time, current_time + timedelta(minutes=60), person):\n                possible_meetings.append(person)\n        if possible_meetings:\n            meeting_person = max(possible_meetings, key=lambda person: constraints[person]['min_time'])\n            meeting_time = current_time + timedelta(minutes=constraints[meeting_person]['min_time'])\n            schedule.append({'action':'meet', 'location': 'Richmond District', 'person': meeting_person,'start_time': current_time.strftime('%H:%M'), 'end_time': meeting_time.strftime('%H:%M')})\n            current_time = meeting_time\n        else:\n            current_time += timedelta(minutes=1)\n    return schedule\n\n# Find the optimal meeting schedule\nschedule = find_optimal_schedule()\n\n# Add travel times to the schedule\nfor i in range(len(schedule) - 1):\n    start_location = schedule[i]['location']\n    end_location = schedule[i+1]['location']\n    travel_time = calculate_travel_time(start_location, end_location)\n    schedule[i]['end_time'] = (datetime.strptime(schedule[i]['end_time'], '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    schedule[i+1]['start_time'] = (datetime.strptime(schedule[i+1]['start_time'], '%H:%M') - timedelta(minutes=travel_time)).strftime('%H:%M')\n\n# Add travel time from Richmond District to the first meeting location\nschedule[0]['start_time'] = (datetime.strptime(schedule[0]['start_time'], '%H:%M') - timedelta(minutes=calculate_travel_time('Richmond District', schedule[0]['location']))).strftime('%H:%M')\n\n# Add travel time from the last meeting location to Richmond District\nschedule[-1]['end_time'] = (datetime.strptime(schedule[-1]['end_time'], '%H:%M') + timedelta(minutes=calculate_travel_time(schedule[-1]['location'], 'Richmond District'))).strftime('%H:%M')\n\n# Print the schedule as a JSON-formatted dictionary\nprint(json.dumps({'itinerary': schedule}, indent=4))\n\n```",
            "count": "meeting_planning_example_884"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "James",
                        "start_time": "12:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "14:07",
                        "end_time": "14:37"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!= 'North Beach':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!= 'North Beach' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Mission District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 7.5)).strftime('%H:%M')\n                                                    elif other_location == 'The Castro':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 7)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['North Beach', 'Mission District', 'The Castro']\n    travel_times = [\n        ['North Beach', 'Mission District', 18],\n        ['North Beach', 'The Castro', 22],\n        ['Mission District', 'North Beach', 17],\n        ['Mission District', 'The Castro', 7],\n        ['The Castro', 'North Beach', 20],\n        ['The Castro', 'Mission District', 7]\n    ]\n    constraints = {\n        'James': {'12:45-14:00': 75},\n        'Robert': {'12:45-15:15': 30}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_180"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kenneth",
                        "start_time": "12:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Nob Hill':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Nob Hill' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Pacific Heights':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 8.5)).strftime('%H:%M')\n                                                    elif other_location == 'Mission District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 12.5)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Nob Hill', 'Pacific Heights', 'Mission District']\n    travel_times = [\n        ['Nob Hill', 'Pacific Heights', 8],\n        ['Nob Hill', 'Mission District', 13],\n        ['Pacific Heights', 'Nob Hill', 8],\n        ['Pacific Heights', 'Mission District', 15],\n        ['Mission District', 'Nob Hill', 12],\n        ['Mission District', 'Pacific Heights', 16]\n    ]\n    constraints = {\n        'Thomas': {'15:30-19:15': 75},\n        'Kenneth': {'12:00-15:45': 45}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_174"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Thomas",
                        "start_time": "13:30",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Nancy",
                        "start_time": "14:45",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Brian",
                        "start_time": "15:09",
                        "end_time": "16:09"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "16:30",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Mary",
                        "start_time": "18:37",
                        "end_time": "19:37"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Matthew",
                        "start_time": "19:52",
                        "end_time": "21:52"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Embarcadero':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Embarcadero' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Bayview':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 19)).strftime('%H:%M')\n                                                    elif other_location == 'Chinatown':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 5)).strftime('%H:%M')\n                                                    elif other_location == 'Alamo Square':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 16)).strftime('%H:%M')\n                                                    elif other_location == 'Nob Hill':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 9)).strftime('%H:%M')\n                                                    elif other_location == 'Presidio':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 20)).strftime('%H:%M')\n                                                    elif other_location == 'Union Square':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 11)).strftime('%H:%M')\n                                                    elif other_location == 'The Castro':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 22)).strftime('%H:%M')\n                                                    elif other_location == 'North Beach':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 6)).strftime('%H:%M')\n                                                    elif other_location == 'Fisherman\\'s Wharf':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 8)).strftime('%H:%M')\n                                                    elif other_location == 'Marina District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 14)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Embarcadero', 'Bayview', 'Chinatown', 'Alamo Square', 'Nob Hill', 'Presidio', 'Union Square', 'The Castro', 'North Beach', 'Fisherman\\'s Wharf', 'Marina District']\n    travel_times = [\n        ['Embarcadero', 'Bayview', 21],\n        ['Embarcadero', 'Chinatown', 7],\n        ['Embarcadero', 'Alamo Square', 19],\n        ['Embarcadero', 'Nob Hill', 10],\n        ['Embarcadero', 'Presidio', 20],\n        ['Embarcadero', 'Union Square', 10],\n        ['Embarcadero', 'The Castro', 25],\n        ['Embarcadero', 'North Beach', 5],\n        ['Embarcadero', 'Fisherman\\'s Wharf', 6],\n        ['Embarcadero', 'Marina District', 12],\n        ['Bayview', 'Embarcadero', 19],\n        ['Bayview', 'Chinatown', 19],\n        ['Bayview', 'Alamo Square', 16],\n        ['Bayview', 'Nob Hill', 20],\n        ['Bayview', 'Presidio', 32],\n        ['Bayview', 'Union Square', 18],\n        ['Bayview', 'The Castro', 19],\n        ['Bayview', 'North Beach', 22],\n        ['Bayview', 'Fisherman\\'s Wharf', 25],\n        ['Bayview', 'Marina District', 27],\n        ['Chinatown', 'Embarcadero', 5],\n        ['Chinatown', 'Bayview', 20],\n        ['Chinatown', 'Alamo Square', 17],\n        ['Chinatown', 'Nob Hill', 9],\n        ['Chinatown', 'Presidio', 19],\n        ['Chinatown', 'Union Square', 7],\n        ['Chinatown', 'The Castro', 22],\n        ['Chinatown', 'North Beach', 3],\n        ['Chinatown', 'Fisherman\\'s Wharf', 8],\n        ['Chinatown', 'Marina District', 12],\n        ['Alamo Square', 'Embarcadero', 16],\n        ['Alamo Square', 'Bayview', 16],\n        ['Alamo Square', 'Chinatown', 15],\n        ['Alamo Square', 'Nob Hill', 11],\n        ['Alamo Square', 'Presidio', 17],\n        ['Alamo Square', 'Union Square', 14],\n        ['Alamo Square', 'The Castro', 8],\n        ['Alamo Square', 'North Beach', 15],\n        ['Alamo Square', 'Fisherman\\'s Wharf', 19],\n        ['Alamo Square', 'Marina District', 15],\n        ['Nob Hill', 'Embarcadero', 9],\n        ['Nob Hill', 'Bayview', 19],\n        ['Nob Hill', 'Chinatown', 6],\n        ['Nob Hill', 'Alamo Square', 11],\n        ['Nob Hill', 'Presidio', 17],\n        ['Nob Hill', 'Union Square', 7],\n        ['Nob Hill', 'The Castro', 17],\n        ['Nob Hill', 'North Beach', 8],\n        ['Nob Hill', 'Fisherman\\'s Wharf', 10],\n        ['Nob Hill', 'Marina District', 11],\n        ['Presidio', 'Embarcadero', 20],\n        ['Presidio', 'Bayview', 31],\n        ['Presidio', 'Chinatown', 21],\n        ['Presidio', 'Alamo Square', 19],\n        ['Presidio', 'Nob Hill', 18],\n        ['Presidio', 'Union Square', 22],\n        ['Presidio', 'The Castro', 21],\n        ['Presidio', 'North Beach', 18],\n        ['Presidio', 'Fisherman\\'s Wharf', 19],\n        ['Presidio', 'Marina District', 11],\n        ['Union Square', 'Embarcadero', 11],\n        ['Union Square', 'Bayview', 15],\n        ['Union Square', 'Chinatown', 7],\n        ['Union Square', 'Alamo Square', 15],\n        ['Union Square', 'Nob Hill', 9],\n        ['Union Square', 'Presidio', 24],\n        ['Union Square', 'The Castro', 17],\n        ['Union Square', 'North Beach', 10],\n        ['Union Square', 'Fisherman\\'s Wharf', 15],\n        ['Union Square', 'Marina District', 18],\n        ['The Castro', 'Embarcadero', 22],\n        ['The Castro', 'Bayview', 19],\n        ['The Castro', 'Chinatown', 22],\n        ['The Castro', 'Alamo Square', 8],\n        ['The Castro', 'Nob Hill', 16],\n        ['The Castro', 'Presidio', 20],\n        ['The Castro', 'Union Square', 19],\n        ['The Castro', 'North Beach', 20],\n        ['The Castro', 'Fisherman\\'s Wharf', 24],\n        ['The Castro', 'Marina District', 21],\n        ['North Beach', 'Embarcadero', 6],\n        ['North Beach', 'Bayview', 25],\n        ['North Beach', 'Chinatown', 6],\n        ['North Beach', 'Alamo Square', 16],\n        ['North Beach', 'Nob Hill', 7],\n        ['North Beach', 'Presidio', 17],\n        ['North Beach', 'Union Square', 7],\n        ['North Beach', 'The Castro', 23],\n        ['North Beach', 'Fisherman\\'s Wharf', 5],\n        ['North Beach', 'Marina District', 9],\n        ['Fisherman\\'s Wharf', 'Embarcadero', 8],\n        ['Fisherman\\'s Wharf', 'Bayview', 26],\n        ['Fisherman\\'s Wharf', 'Chinatown', 12],\n        ['Fisherman\\'s Wharf', 'Alamo Square', 21],\n        ['Fisherman\\'s Wharf', 'Nob Hill', 11],\n        ['Fisherman\\'s Wharf', 'Presidio', 17],\n        ['Fisherman\\'s Wharf', 'Union Square', 13],\n        ['Fisherman\\'s Wharf', 'The Castro', 27],\n        ['Fisherman\\'s Wharf', 'North Beach', 6],\n        ['Fisherman\\'s Wharf', 'Marina District', 9],\n        ['Marina District', 'Embarcadero', 14],\n        ['Marina District', 'Bayview', 27],\n        ['Marina District', 'Chinatown', 15],\n        ['Marina District', 'Alamo Square', 15],\n        ['Marina District', 'Nob Hill', 12],\n        ['Marina District', 'Presidio', 10],\n        ['Marina District', 'Union Square', 16],\n        ['Marina District', 'The Castro', 22],\n        ['Marina District', 'North Beach', 11],\n        ['Marina District', 'Fisherman\\'s Wharf', 10]\n    ]\n    constraints = {\n        'Matthew': {'19:15-22:00': 120},\n        'Karen': {'19:15-20:15': 90},\n        'Sarah': {'20:00-21:45': 105},\n        'Jessica': {'16:30-19:45': 120},\n        'Stephanie': {'07:30-10:15': 60},\n        'Mary': {'16:45-22:30': 60},\n        'Charles': {'16:30-22:00': 105},\n        'Nancy': {'14:45-20:00': 15},\n        'Thomas': {'13:30-19:00': 30},\n        'Brian': {'12:15-18:00': 60}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_976"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Karen",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "11:17",
                        "end_time": "12:47"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Matthew",
                        "start_time": "12:52",
                        "end_time": "13:37"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "13:52",
                        "end_time": "15:37"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "David",
                        "start_time": "15:54",
                        "end_time": "17:54"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Linda",
                        "start_time": "18:15",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "19:27",
                        "end_time": "20:57"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Russian Hill':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Russian Hill' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Marina District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 8)).strftime('%H:%M')\n                                                    elif other_location == 'Financial District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 15)).strftime('%H:%M')\n                                                    elif other_location == 'Alamo Square':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 13)).strftime('%H:%M')\n                                                    elif other_location == 'Golden Gate Park':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 19)).strftime('%H:%M')\n                                                    elif other_location == 'The Castro':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 18)).strftime('%H:%M')\n                                                    elif other_location == 'Bayview':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 23)).strftime('%H:%M')\n                                                    elif other_location == 'Sunset District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 24)).strftime('%H:%M')\n                                                    elif other_location == 'Haight-Ashbury':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 17)).strftime('%H:%M')\n                                                    elif other_location == 'Nob Hill':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 5)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Russian Hill', 'Marina District', 'Financial District', 'Alamo Square', 'Golden Gate Park', 'The Castro', 'Bayview', 'Sunset District', 'Haight-Ashbury', 'Nob Hill']\n    travel_times = [\n        ['Russian Hill', 'Marina District', 7],\n        ['Russian Hill', 'Financial District', 11],\n        ['Russian Hill', 'Alamo Square', 15],\n        ['Russian Hill', 'Golden Gate Park', 21],\n        ['Russian Hill', 'The Castro', 21],\n        ['Russian Hill', 'Bayview', 23],\n        ['Russian Hill', 'Sunset District', 23],\n        ['Russian Hill', 'Haight-Ashbury', 17],\n        ['Russian Hill', 'Nob Hill', 5],\n        ['Marina District', 'Russian Hill', 8],\n        ['Marina District', 'Financial District', 17],\n        ['Marina District', 'Alamo Square', 15],\n        ['Marina District', 'Golden Gate Park', 18],\n        ['Marina District', 'The Castro', 22],\n        ['Marina District', 'Bayview', 27],\n        ['Marina District', 'Sunset District', 19],\n        ['Marina District', 'Haight-Ashbury', 16],\n        ['Marina District', 'Nob Hill', 12],\n        ['Financial District', 'Russian Hill', 11],\n        ['Financial District', 'Marina District', 15],\n        ['Financial District', 'Alamo Square', 17],\n        ['Financial District', 'Golden Gate Park', 23],\n        ['Financial District', 'The Castro', 20],\n        ['Financial District', 'Bayview', 19],\n        ['Financial District', 'Sunset District', 30],\n        ['Financial District', 'Haight-Ashbury', 19],\n        ['Financial District', 'Nob Hill', 9],\n        ['Alamo Square', 'Russian Hill', 13],\n        ['Alamo Square', 'Marina District', 15],\n        ['Alamo Square', 'Financial District', 17],\n        ['Alamo Square', 'Golden Gate Park', 9],\n        ['Alamo Square', 'The Castro', 8],\n        ['Alamo Square', 'Bayview', 16],\n        ['Alamo Square', 'Sunset District', 16],\n        ['Alamo Square', 'Haight-Ashbury', 5],\n        ['Alamo Square', 'Nob Hill', 11],\n        ['Golden Gate Park', 'Russian Hill', 19],\n        ['Golden Gate Park', 'Marina District', 16],\n        ['Golden Gate Park', 'Financial District', 26],\n        ['Golden Gate Park', 'Alamo Square', 9],\n        ['Golden Gate Park', 'The Castro', 13],\n        ['Golden Gate Park', 'Bayview', 23],\n        ['Golden Gate Park', 'Sunset District', 10],\n        ['Golden Gate Park', 'Haight-Ashbury', 7],\n        ['Golden Gate Park', 'Nob Hill', 20],\n        ['The Castro', 'Russian Hill', 18],\n        ['The Castro', 'Marina District', 21],\n        ['The Castro', 'Financial District', 21],\n        ['The Castro', 'Alamo Square', 8],\n        ['The Castro', 'Golden Gate Park', 11],\n        ['The Castro', 'Bayview', 19],\n        ['The Castro', 'Sunset District', 17],\n        ['The Castro', 'Haight-Ashbury', 6],\n        ['The Castro', 'Nob Hill', 16],\n        ['Bayview', 'Russian Hill', 23],\n        ['Bayview', 'Marina District', 27],\n        ['Bayview', 'Financial District', 19],\n        ['Bayview', 'Alamo Square', 16],\n        ['Bayview', 'Golden Gate Park', 22],\n        ['Bayview', 'The Castro', 19],\n        ['Bayview', 'Sunset District', 23],\n        ['Bayview', 'Haight-Ashbury', 19],\n        ['Bayview', 'Nob Hill', 20],\n        ['Sunset District', 'Russian Hill', 24],\n        ['Sunset District', 'Marina District', 21],\n        ['Sunset District', 'Financial District', 30],\n        ['Sunset District', 'Alamo Square', 17],\n        ['Sunset District', 'Golden Gate Park', 11],\n        ['Sunset District', 'The Castro', 17],\n        ['Sunset District', 'Bayview', 22],\n        ['Sunset District', 'Haight-Ashbury', 15],\n        ['Sunset District', 'Nob Hill', 27],\n        ['Haight-Ashbury', 'Russian Hill', 17],\n        ['Haight-Ashbury', 'Marina District', 17],\n        ['Haight-Ashbury', 'Financial District', 21],\n        ['Haight-Ashbury', 'Alamo Square', 5],\n        ['Haight-Ashbury', 'Golden Gate Park', 7],\n        ['Haight-Ashbury', 'The Castro', 6],\n        ['Haight-Ashbury', 'Bayview', 18],\n        ['Haight-Ashbury', 'Sunset District', 15],\n        ['Haight-Ashbury', 'Nob Hill', 15],\n        ['Nob Hill', 'Russian Hill', 5],\n        ['Nob Hill', 'Marina District', 11],\n        ['Nob Hill', 'Financial District', 9],\n        ['Nob Hill', 'Alamo Square', 11],\n        ['Nob Hill', 'Golden Gate Park', 17],\n        ['Nob Hill', 'The Castro', 17],\n        ['Nob Hill', 'Bayview', 19],\n        ['Nob Hill', 'Sunset District', 24],\n        ['Nob Hill', 'Haight-Ashbury', 13]\n    ]\n    constraints = {\n        'Mark': {'18:45-21:00': 90},\n        'Karen': {'09:30-12:45': 90},\n        'Barbara': {'10:00-19:30': 90},\n        'Nancy': {'16:45-20:00': 105},\n        'David': {'09:00-18:00': 120},\n        'Linda': {'18:15-20:45': 45},\n        'Kevin': {'10:00-17:45': 120},\n        'Matthew': {'10:15-15:30': 45},\n        'Andrew': {'11:45-16:45': 105}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_885"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "David",
                        "start_time": "9:23",
                        "end_time": "9:38"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "William",
                        "start_time": "9:54",
                        "end_time": "10:54"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kimberly",
                        "start_time": "11:13",
                        "end_time": "12:58"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mary",
                        "start_time": "14:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "15:42",
                        "end_time": "17:42"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Charles",
                        "start_time": "17:56",
                        "end_time": "18:11"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Ronald",
                        "start_time": "18:30",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Russian Hill':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Russian Hill' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Sunset District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 24)).strftime('%H:%M')\n                                                    elif other_location == 'Union Square':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 13)).strftime('%H:%M')\n                                                    elif other_location == 'Nob Hill':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 5)).strftime('%H:%M')\n                                                    elif other_location == 'Marina District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 8)).strftime('%H:%M')\n                                                    elif other_location == 'Richmond District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 13)).strftime('%H:%M')\n                                                    elif other_location == 'Financial District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 11)).strftime('%H:%M')\n                                                    elif other_location == 'Embarcadero':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 8)).strftime('%H:%M')\n                                                    elif other_location == 'The Castro':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 18)).strftime('%H:%M')\n                                                    elif other_location == 'Alamo Square':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 13)).strftime('%H:%M')\n                                                    elif other_location == 'Presidio':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 14)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Russian Hill', 'Sunset District', 'Union Square', 'Nob Hill', 'Marina District', 'Richmond District', 'Financial District', 'Embarcadero', 'The Castro', 'Alamo Square', 'Presidio']\n    travel_times = [\n        ['Russian Hill', 'Sunset District', 23],\n        ['Russian Hill', 'Union Square', 10],\n        ['Russian Hill', 'Nob Hill', 5],\n        ['Russian Hill', 'Marina District', 7],\n        ['Russian Hill', 'Richmond District', 14],\n        ['Russian Hill', 'Financial District', 11],\n        ['Russian Hill', 'Embarcadero', 8],\n        ['Russian Hill', 'The Castro', 21],\n        ['Russian Hill', 'Alamo Square', 15],\n        ['Russian Hill', 'Presidio', 14],\n        ['Sunset District', 'Russian Hill', 24],\n        ['Sunset District', 'Union Square', 30],\n        ['Sunset District', 'Nob Hill', 27],\n        ['Sunset District', 'Marina District', 21],\n        ['Sunset District', 'Richmond District', 12],\n        ['Sunset District', 'Financial District', 30],\n        ['Sunset District', 'Embarcadero', 30],\n        ['Sunset District', 'The Castro', 17],\n        ['Sunset District', 'Alamo Square', 17],\n        ['Sunset District', 'Presidio', 16],\n        ['Union Square', 'Russian Hill', 13],\n        ['Union Square', 'Sunset District', 27],\n        ['Union Square', 'Nob Hill', 9],\n        ['Union Square', 'Marina District', 18],\n        ['Union Square', 'Richmond District', 20],\n        ['Union Square', 'Financial District', 9],\n        ['Union Square', 'Embarcadero', 11],\n        ['Union Square', 'The Castro', 17],\n        ['Union Square', 'Alamo Square', 15],\n        ['Union Square', 'Presidio', 24],\n        ['Nob Hill', 'Russian Hill', 5],\n        ['Nob Hill', 'Sunset District', 24],\n        ['Nob Hill', 'Union Square', 7],\n        ['Nob Hill', 'Marina District', 11],\n        ['Nob Hill', 'Richmond District', 14],\n        ['Nob Hill', 'Financial District', 9],\n        ['Nob Hill', 'Embarcadero', 9],\n        ['Nob Hill', 'The Castro', 17],\n        ['Nob Hill', 'Alamo Square', 11],\n        ['Nob Hill', 'Presidio', 17],\n        ['Marina District', 'Russian Hill', 8],\n        ['Marina District', 'Sunset District', 19],\n        ['Marina District', 'Union Square', 16],\n        ['Marina District', 'Nob Hill', 12],\n        ['Marina District', 'Richmond District', 11],\n        ['Marina District', 'Financial District', 17],\n        ['Marina District', 'Embarcadero', 14],\n        ['Marina District', 'The Castro', 22],\n        ['Marina District', 'Alamo Square', 15],\n        ['Marina District', 'Presidio', 10],\n        ['Richmond District', 'Russian Hill', 13],\n        ['Richmond District', 'Sunset District', 11],\n        ['Richmond District', 'Union Square', 21],\n        ['Richmond District', 'Nob Hill', 17],\n        ['Richmond District', 'Marina District', 9],\n        ['Richmond District', 'Financial District', 22],\n        ['Richmond District', 'Embarcadero', 19],\n        ['Richmond District', 'The Castro', 16],\n        ['Richmond District', 'Alamo Square', 13],\n        ['Richmond District', 'Presidio', 7],\n        ['Financial District', 'Russian Hill', 11],\n        ['Financial District', 'Sunset District', 30],\n        ['Financial District', 'Union Square', 9],\n        ['Financial District', 'Nob Hill', 8],\n        ['Financial District', 'Marina District', 15],\n        ['Financial District', 'Richmond District', 21],\n        ['Financial District', 'Embarcadero', 4],\n        ['Financial District', 'The Castro', 20],\n        ['Financial District', 'Alamo Square', 17],\n        ['Financial District', 'Presidio', 22],\n        ['Embarcadero', 'Russian Hill', 8],\n        ['Embarcadero', 'Sunset District', 30],\n        ['Embarcadero', 'Union Square', 10],\n        ['Embarcadero', 'Nob Hill', 10],\n        ['Embarcadero', 'Marina District', 12],\n        ['Embarcadero', 'Richmond District', 21],\n        ['Embarcadero', 'Financial District', 5],\n        ['Embarcadero', 'The Castro', 25],\n        ['Embarcadero', 'Alamo Square', 19],\n        ['Embarcadero', 'Presidio', 20],\n        ['The Castro', 'Russian Hill', 18],\n        ['The Castro', 'Sunset District', 17],\n        ['The Castro', 'Union Square', 19],\n        ['The Castro', 'Nob Hill', 16],\n        ['The Castro', 'Marina District', 21],\n        ['The Castro', 'Richmond District', 16],\n        ['The Castro', 'Financial District', 21],\n        ['The Castro', 'Embarcadero', 22],\n        ['The Castro', 'Alamo Square', 8],\n        ['The Castro', 'Presidio', 20],\n        ['Alamo Square', 'Russian Hill', 13],\n        ['Alamo Square', 'Sunset District', 16],\n        ['Alamo Square', 'Union Square', 14],\n        ['Alamo Square', 'Nob Hill', 11],\n        ['Alamo Square', 'Marina District', 15],\n        ['Alamo Square', 'Richmond District', 11],\n        ['Alamo Square', 'Financial District', 17],\n        ['Alamo Square', 'Embarcadero', 16],\n        ['Alamo Square', 'The Castro', 8],\n        ['Alamo Square', 'Presidio', 17],\n        ['Presidio', 'Russian Hill', 14],\n        ['Presidio', 'Sunset District', 15],\n        ['Presidio', 'Union Square', 22],\n        ['Presidio', 'Nob Hill', 18],\n        ['Presidio', 'Marina District', 11],\n        ['Presidio', 'Richmond District', 7],\n        ['Presidio', 'Financial District', 23],\n        ['Presidio', 'Embarcadero', 20],\n        ['Presidio', 'The Castro', 21],\n        ['Presidio', 'Alamo Square', 19]\n    ]\n    constraints = {\n        'David': {'09:15-22:00': 15},\n        'Kenneth': {'21:15-21:45': 15},\n        'Patricia': {'15:00-19:15': 120},\n        'Mary': {'14:45-16:45': 45},\n        'Charles': {'17:15-21:00': 15},\n        'Joshua': {'14:30-17:15': 90},\n        'Ronald': {'18:15-21:45': 30},\n        'George': {'14:15-19:00': 105},\n        'Kimberly': {'09:00-14:30': 105},\n        'William': {'07:00-12:45': 60}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_937"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Andrew",
                        "start_time": "11:45",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "13:13",
                        "end_time": "13:43"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sarah",
                        "start_time": "16:15",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "17:30",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Rebecca",
                        "start_time": "18:51",
                        "end_time": "20:21"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Union Square':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Union Square' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Golden Gate Park':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 22)).strftime('%H:%M')\n                                                    elif other_location == 'Pacific Heights':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 12)).strftime('%H:%M')\n                                                    elif other_location == 'Presidio':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 22)).strftime('%H:%M')\n                                                    elif other_location == 'Chinatown':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 7)).strftime('%H:%M')\n                                                    elif other_location == 'The Castro':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 19)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Union Square', 'Golden Gate Park', 'Pacific Heights', 'Presidio', 'Chinatown', 'The Castro']\n    travel_times = [\n        ['Union Square', 'Golden Gate Park', 22],\n        ['Union Square', 'Pacific Heights', 15],\n        ['Union Square', 'Presidio', 24],\n        ['Union Square', 'Chinatown', 7],\n        ['Union Square', 'The Castro', 19],\n        ['Golden Gate Park', 'Union Square', 22],\n        ['Golden Gate Park', 'Pacific Heights', 16],\n        ['Golden Gate Park', 'Presidio', 11],\n        ['Golden Gate Park', 'Chinatown', 23],\n        ['Golden Gate Park', 'The Castro', 13],\n        ['Pacific Heights', 'Union Square', 12],\n        ['Pacific Heights', 'Golden Gate Park', 15],\n        ['Pacific Heights', 'Presidio', 11],\n        ['Pacific Heights', 'Chinatown', 11],\n        ['Pacific Heights', 'The Castro', 16],\n        ['Presidio', 'Union Square', 22],\n        ['Presidio', 'Golden Gate Park', 12],\n        ['Presidio', 'Pacific Heights', 11],\n        ['Presidio', 'Chinatown', 21],\n        ['Presidio', 'The Castro', 21],\n        ['Chinatown', 'Union Square', 7],\n        ['Chinatown', 'Golden Gate Park', 23],\n        ['Chinatown', 'Pacific Heights', 10],\n        ['Chinatown', 'Presidio', 19],\n        ['Chinatown', 'The Castro', 22],\n        ['The Castro', 'Union Square', 19],\n        ['The Castro', 'Golden Gate Park', 11],\n        ['The Castro', 'Pacific Heights', 16],\n        ['The Castro', 'Presidio', 20],\n        ['The Castro', 'Chinatown', 20]\n    ]\n    constraints = {\n        'Andrew': {'11:45-14:30': 75},\n        'Sarah': {'16:15-17:45': 15},\n        'Nancy': {'17:30-19:15': 60},\n        'Rebecca': {'09:45-21:30': 90},\n        'Robert': {'08:30-14:15': 30}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_403"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "David",
                        "start_time": "16:00",
                        "end_time": "17:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Golden Gate Park':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Golden Gate Park' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Chinatown':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 23)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Golden Gate Park', 'Chinatown']\n    travel_times = [\n        ['Golden Gate Park', 'Chinatown', 23],\n        ['Chinatown', 'Golden Gate Park', 23]\n    ]\n    constraints = {\n        'David': {'16:00-21:45': 105}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_25"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Richard",
                        "start_time": "9:17",
                        "end_time": "11:17"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Bayview':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Bayview' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Union Square':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 15)).strftime('%H:%M')\n                                                    elif other_location == 'Presidio':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 31)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Bayview', 'Union Square', 'Presidio']\n    travel_times = [\n        ['Bayview', 'Union Square', 17],\n        ['Bayview', 'Presidio', 31],\n        ['Union Square', 'Bayview', 15],\n        ['Union Square', 'Presidio', 24],\n        ['Presidio', 'Bayview', 31],\n        ['Presidio', 'Union Square', 22]\n    ]\n    constraints = {\n        'Richard': {'08:45-13:00': 120},\n        'Charles': {'09:45-13:00': 120}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_118"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Matthew",
                        "start_time": "9:16",
                        "end_time": "9:31"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Patricia",
                        "start_time": "17:00",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joseph",
                        "start_time": "18:15",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Sarah",
                        "start_time": "19:04",
                        "end_time": "20:49"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Robert",
                        "start_time": "21:06",
                        "end_time": "21:21"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Golden Gate Park':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Golden Gate Park' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Haight-Ashbury':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 7)).strftime('%H:%M')\n                                                    elif other_location == 'Sunset District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 11)).strftime('%H:%M')\n                                                    elif other_location == 'Marina District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 18)).strftime('%H:%M')\n                                                    elif other_location == 'Financial District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 23)).strftime('%H:%M')\n                                                    elif other_location == 'Union Square':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 22)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Golden Gate Park', 'Haight-Ashbury', 'Sunset District', 'Marina District', 'Financial District', 'Union Square']\n    travel_times = [\n        ['Golden Gate Park', 'Haight-Ashbury', 7],\n        ['Golden Gate Park', 'Sunset District', 10],\n        ['Golden Gate Park', 'Marina District', 16],\n        ['Golden Gate Park', 'Financial District', 26],\n        ['Golden Gate Park', 'Union Square', 22],\n        ['Haight-Ashbury', 'Golden Gate Park', 7],\n        ['Haight-Ashbury', 'Sunset District', 15],\n        ['Haight-Ashbury', 'Marina District', 17],\n        ['Haight-Ashbury', 'Financial District', 21],\n        ['Haight-Ashbury', 'Union Square', 17],\n        ['Sunset District', 'Golden Gate Park', 11],\n        ['Sunset District', 'Haight-Ashbury', 15],\n        ['Sunset District', 'Marina District', 21],\n        ['Sunset District', 'Financial District', 30],\n        ['Sunset District', 'Union Square', 30],\n        ['Marina District', 'Golden Gate Park', 18],\n        ['Marina District', 'Haight-Ashbury', 16],\n        ['Marina District', 'Sunset District', 19],\n        ['Marina District', 'Financial District', 17],\n        ['Marina District', 'Union Square', 16],\n        ['Financial District', 'Golden Gate Park', 23],\n        ['Financial District', 'Haight-Ashbury', 19],\n        ['Financial District', 'Sunset District', 31],\n        ['Financial District', 'Marina District', 15],\n        ['Financial District', 'Union Square', 9],\n        ['Union Square', 'Golden Gate Park', 22],\n        ['Union Square', 'Haight-Ashbury', 18],\n        ['Union Square', 'Sunset District', 26],\n        ['Union Square', 'Marina District', 18],\n        ['Union Square', 'Financial District', 9]\n    ]\n    constraints = {\n        'Sarah': {'17:00-21:30': 105},\n        'Patricia': {'17:00-19:45': 45},\n        'Matthew': {'09:15-12:00': 15},\n        'Joseph': {'14:15-19:45': 30},\n        'Robert': {'10:15-21:45': 15}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_402"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "9:23",
                        "end_time": "10:23"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Nancy",
                        "start_time": "11:00",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jeffrey",
                        "start_time": "12:47",
                        "end_time": "13:32"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Jason",
                        "start_time": "16:45",
                        "end_time": "17:00"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Bayview':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Bayview' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Russian Hill':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 23)).strftime('%H:%M')\n                                                    elif other_location == 'Alamo Square':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 16)).strftime('%H:%M')\n                                                    elif other_location == 'North Beach':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 22)).strftime('%H:%M')\n                                                    elif other_location == 'Financial District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 19)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Bayview', 'Russian Hill', 'Alamo Square', 'North Beach', 'Financial District']\n    travel_times = [\n        ['Bayview', 'Russian Hill', 23],\n        ['Bayview', 'Alamo Square', 16],\n        ['Bayview', 'North Beach', 21],\n        ['Bayview', 'Financial District', 19],\n        ['Russian Hill', 'Bayview', 23],\n        ['Russian Hill', 'Alamo Square', 15],\n        ['Russian Hill', 'North Beach', 5],\n        ['Russian Hill', 'Financial District', 11],\n        ['Alamo Square', 'Bayview', 16],\n        ['Alamo Square', 'Russian Hill', 13],\n        ['Alamo Square', 'North Beach', 15],\n        ['Alamo Square', 'Financial District', 17],\n        ['North Beach', 'Bayview', 22],\n        ['North Beach', 'Russian Hill', 4],\n        ['North Beach', 'Alamo Square', 16],\n        ['North Beach', 'Financial District', 8],\n        ['Financial District', 'Bayview', 19],\n        ['Financial District', 'Russian Hill', 10],\n        ['Financial District', 'Alamo Square', 17],\n        ['Financial District', 'North Beach', 7]\n    ]\n    constraints = {\n        'Joseph': {'08:30-19:15': 60},\n        'Nancy': {'11:00-16:00': 90},\n        'Jason': {'16:45-21:45': 15},\n        'Jeffrey': {'10:30-15:45': 45}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_368"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Carol",
                        "start_time": "11:30",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jessica",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Richmond District':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Richmond District' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Pacific Heights':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 12)).strftime('%H:%M')\n                                                    elif other_location == 'Marina District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 11)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Richmond District', 'Pacific Heights', 'Marina District']\n    travel_times = [\n        ['Richmond District', 'Pacific Heights', 10],\n        ['Richmond District', 'Marina District', 9],\n        ['Pacific Heights', 'Richmond District', 12],\n        ['Pacific Heights', 'Marina District', 6],\n        ['Marina District', 'Richmond District', 11],\n        ['Marina District', 'Pacific Heights', 7]\n    ]\n    constraints = {\n        'Jessica': {'15:30-16:45': 45},\n        'Carol': {'11:30-15:00': 60}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_115"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Robert",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Nob Hill':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Nob Hill' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Presidio':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 18)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Nob Hill', 'Presidio']\n    travel_times = [\n        ['Nob Hill', 'Presidio', 17],\n        ['Presidio', 'Nob Hill', 18]\n    ]\n    constraints = {\n        'Robert': {'11:15-17:45': 120}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_66"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Stephanie",
                        "start_time": "9:05",
                        "end_time": "10:35"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "John",
                        "start_time": "10:52",
                        "end_time": "11:22"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Embarcadero':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Embarcadero' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Financial District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 4)).strftime('%H:%M')\n                                                    elif other_location == 'Alamo Square':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 17)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Embarcadero', 'Financial District', 'Alamo Square']\n    travel_times = [\n        ['Embarcadero', 'Financial District', 5],\n        ['Embarcadero', 'Alamo Square', 19],\n        ['Financial District', 'Embarcadero', 4],\n        ['Financial District', 'Alamo Square', 17],\n        ['Alamo Square', 'Embarcadero', 17],\n        ['Alamo Square', 'Financial District', 17]\n    ]\n    constraints = {\n        'Stephanie': {'08:15-11:30': 90},\n        'John': {'10:15-20:45': 30}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_125"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Jason",
                        "start_time": "10:00",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kenneth",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Pacific Heights':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Pacific Heights' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Presidio':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 11)).strftime('%H:%M')\n                                                    elif other_location == 'Marina District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 10)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Pacific Heights', 'Presidio', 'Marina District']\n    travel_times = [\n        ['Pacific Heights', 'Presidio', 11],\n        ['Pacific Heights', 'Marina District', 6],\n        ['Presidio', 'Pacific Heights', 11],\n        ['Presidio', 'Marina District', 10],\n        ['Marina District', 'Pacific Heights', 7],\n        ['Marina District', 'Presidio', 10]\n    ]\n    constraints = {\n        'Jason': {'10:00-16:15': 90},\n        'Kenneth': {'15:30-16:45': 45}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_131"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Jeffrey",
                        "start_time": "12:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Charles",
                        "start_time": "13:15",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Robert",
                        "start_time": "15:18",
                        "end_time": "16:48"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kimberly",
                        "start_time": "17:00",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Karen",
                        "start_time": "18:29",
                        "end_time": "19:29"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Brian",
                        "start_time": "19:49",
                        "end_time": "20:49"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Joshua",
                        "start_time": "21:00",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Sunset District':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Sunset District' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Presidio':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 15)).strftime('%H:%M')\n                                                    elif other_location == 'Nob Hill':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 24)).strftime('%H:%M')\n                                                    elif other_location == 'Pacific Heights':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 21)).strftime('%H:%M')\n                                                    elif other_location == 'Mission District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 24)).strftime('%H:%M')\n                                                    elif other_location == 'Marina District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 19)).strftime('%H:%M')\n                                                    elif other_location == 'North Beach':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 27)).strftime('%H:%M')\n                                                    elif other_location == 'Russian Hill':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 23)).strftime('%H:%M')\n                                                    elif other_location == 'Richmond District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 11)).strftime('%H:%M')\n                                                    elif other_location == 'Embarcadero':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 30)).strftime('%H:%M')\n                                                    elif other_location == 'Alamo Square':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 16)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Sunset District', 'Presidio', 'Nob Hill', 'Pacific Heights', 'Mission District', 'Marina District', 'North Beach', 'Russian Hill', 'Richmond District', 'Embarcadero', 'Alamo Square']\n    travel_times = [\n        ['Sunset District', 'Presidio', 16],\n        ['Sunset District', 'Nob Hill', 27],\n        ['Sunset District', 'Pacific Heights', 21],\n        ['Sunset District', 'Mission District', 25],\n        ['Sunset District', 'Marina District', 21],\n        ['Sunset District', 'North Beach', 28],\n        ['Sunset District', 'Russian Hill', 24],\n        ['Sunset District', 'Richmond District', 12],\n        ['Sunset District', 'Embarcadero', 30],\n        ['Sunset District', 'Alamo Square', 17],\n        ['Presidio', 'Sunset District', 15],\n        ['Presidio', 'Nob Hill', 18],\n        ['Presidio', 'Pacific Heights', 11],\n        ['Presidio', 'Mission District', 26],\n        ['Presidio', 'Marina District', 11],\n        ['Presidio', 'North Beach', 18],\n        ['Presidio', 'Russian Hill', 14],\n        ['Presidio', 'Richmond District', 7],\n        ['Presidio', 'Embarcadero', 20],\n        ['Presidio', 'Alamo Square', 19],\n        ['Nob Hill', 'Sunset District', 24],\n        ['Nob Hill', 'Presidio', 17],\n        ['Nob Hill', 'Pacific Heights', 8],\n        ['Nob Hill', 'Mission District', 13],\n        ['Nob Hill', 'Marina District', 11],\n        ['Nob Hill', 'North Beach', 8],\n        ['Nob Hill', 'Russian Hill', 5],\n        ['Nob Hill', 'Richmond District', 14],\n        ['Nob Hill', 'Embarcadero', 9],\n        ['Nob Hill', 'Alamo Square', 11],\n        ['Pacific Heights', 'Sunset District', 21],\n        ['Pacific Heights', 'Presidio', 11],\n        ['Pacific Heights', 'Nob Hill', 8],\n        ['Pacific Heights', 'Mission District', 15],\n        ['Pacific Heights', 'Marina District', 6],\n        ['Pacific Heights', 'North Beach', 9],\n        ['Pacific Heights', 'Russian Hill', 7],\n        ['Pacific Heights', 'Richmond District', 12],\n        ['Pacific Heights', 'Embarcadero', 10],\n        ['Pacific Heights', 'Alamo Square', 10],\n        ['Mission District', 'Sunset District', 24],\n        ['Mission District', 'Presidio', 25],\n        ['Mission District', 'Nob Hill', 12],\n        ['Mission District', 'Pacific Heights', 16],\n        ['Mission District', 'Marina District', 19],\n        ['Mission District', 'North Beach', 17],\n        ['Mission District', 'Russian Hill', 15],\n        ['Mission District', 'Richmond District', 20],\n        ['Mission District', 'Embarcadero', 19],\n        ['Mission District', 'Alamo Square', 11],\n        ['Marina District', 'Sunset District', 19],\n        ['Marina District', 'Presidio', 10],\n        ['Marina District', 'Nob Hill', 12],\n        ['Marina District', 'Pacific Heights', 7],\n        ['Marina District', 'Mission District', 20],\n        ['Marina District', 'North Beach', 11],\n        ['Marina District', 'Russian Hill', 8],\n        ['Marina District', 'Richmond District', 11],\n        ['Marina District', 'Embarcadero', 14],\n        ['Marina District', 'Alamo Square', 15],\n        ['North Beach', 'Sunset District', 27],\n        ['North Beach', 'Presidio', 17],\n        ['North Beach', 'Nob Hill', 7],\n        ['North Beach', 'Pacific Heights', 8],\n        ['North Beach', 'Mission District', 18],\n        ['North Beach', 'Marina District', 9],\n        ['North Beach', 'Russian Hill', 4],\n        ['North Beach', 'Richmond District', 18],\n        ['North Beach', 'Embarcadero', 6],\n        ['North Beach', 'Alamo Square', 16],\n        ['Russian Hill', 'Sunset District', 23],\n        ['Russian Hill', 'Presidio', 14],\n        ['Russian Hill', 'Nob Hill', 5],\n        ['Russian Hill', 'Pacific Heights', 7],\n        ['Russian Hill', 'Mission District', 16],\n        ['Russian Hill', 'Marina District', 7],\n        ['Russian Hill', 'North Beach', 5],\n        ['Russian Hill', 'Richmond District', 14],\n        ['Russian Hill', 'Embarcadero', 8],\n        ['Russian Hill', 'Alamo Square', 15],\n        ['Richmond District', 'Sunset District', 11],\n        ['Richmond District', 'Presidio', 7],\n        ['Richmond District', 'Nob Hill', 17],\n        ['Richmond District', 'Pacific Heights', 10],\n        ['Richmond District', 'Mission District', 20],\n        ['Richmond District', 'Marina District', 9],\n        ['Richmond District', 'North Beach', 17],\n        ['Richmond District', 'Russian Hill', 13],\n        ['Richmond District', 'Embarcadero', 19],\n        ['Richmond District', 'Alamo Square', 13],\n        ['Embarcadero', 'Sunset District', 30],\n        ['Embarcadero', 'Presidio', 20],\n        ['Embarcadero', 'Nob Hill', 10],\n        ['Embarcadero', 'Pacific Heights', 11],\n        ['Embarcadero', 'Mission District', 20],\n        ['Embarcadero', 'Marina District', 12],\n        ['Embarcadero', 'North Beach', 5],\n        ['Embarcadero', 'Russian Hill', 8],\n        ['Embarcadero', 'Richmond District', 21],\n        ['Embarcadero', 'Alamo Square', 19],\n        ['Alamo Square', 'Sunset District', 16],\n        ['Alamo Square', 'Presidio', 17],\n        ['Alamo Square', 'Nob Hill', 11],\n        ['Alamo Square', 'Pacific Heights', 10],\n        ['Alamo Square', 'Mission District', 10],\n        ['Alamo Square', 'Marina District', 15],\n        ['Alamo Square', 'North Beach', 15],\n        ['Alamo Square', 'Russian Hill', 13],\n        ['Alamo Square', 'Richmond District', 11],\n        ['Alamo Square', 'Embarcadero', 16]\n    ]\n    constraints = {\n        'Charles': {'13:15-15:00': 105},\n        'Robert': {'13:15-17:30': 90},\n        'Nancy': {'14:45-22:00': 105},\n        'Brian': {'15:30-22:00': 60},\n        'Kimberly': {'17:00-19:45': 75},\n        'David': {'14:45-16:30': 75},\n        'William': {'12:30-19:15': 120},\n        'Jeffrey': {'12:00-19:15': 45},\n        'Karen': {'14:15-20:45': 60},\n        'Joshua': {'18:45-22:00': 60}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_974"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Rebecca",
                        "start_time": "14:45",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Mark",
                        "start_time": "15:57",
                        "end_time": "16:42"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Richard",
                        "start_time": "16:52",
                        "end_time": "18:22"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Margaret",
                        "start_time": "18:28",
                        "end_time": "18:43"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Matthew",
                        "start_time": "18:50",
                        "end_time": "20:20"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Chinatown':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Chinatown' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Embarcadero':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 7)).strftime('%H:%M')\n                                                    elif other_location == 'Pacific Heights':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 11)).strftime('%H:%M')\n                                                    elif other_location == 'Russian Hill':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 9)).strftime('%H:%M')\n                                                    elif other_location == 'Haight-Ashbury':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 20)).strftime('%H:%M')\n                                                    elif other_location == 'Golden Gate Park':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 25)).strftime('%H:%M')\n                                                    elif other_location == 'Fisherman\\'s Wharf':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 8)).strftime('%H:%M')\n                                                    elif other_location == 'Sunset District':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 30)).strftime('%H:%M')\n                                                    elif other_location == 'The Castro':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 22)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Chinatown', 'Embarcadero', 'Pacific Heights', 'Russian Hill', 'Haight-Ashbury', 'Golden Gate Park', 'Fisherman\\'s Wharf', 'Sunset District', 'The Castro']\n    travel_times = [\n        ['Chinatown', 'Embarcadero', 7],\n        ['Chinatown', 'Pacific Heights', 10],\n        ['Chinatown', 'Russian Hill', 7],\n        ['Chinatown', 'Haight-Ashbury', 19],\n        ['Chinatown', 'Golden Gate Park', 23],\n        ['Chinatown', 'Fisherman\\'s Wharf', 8],\n        ['Chinatown', 'Sunset District', 29],\n        ['Chinatown', 'The Castro', 22],\n        ['Embarcadero', 'Chinatown', 7],\n        ['Embarcadero', 'Pacific Heights', 11],\n        ['Embarcadero', 'Russian Hill', 8],\n        ['Embarcadero', 'Haight-Ashbury', 21],\n        ['Embarcadero', 'Golden Gate Park', 25],\n        ['Embarcadero', 'Fisherman\\'s Wharf', 6],\n        ['Embarcadero', 'Sunset District', 30],\n        ['Embarcadero', 'The Castro', 25],\n        ['Pacific Heights', 'Chinatown', 11],\n        ['Pacific Heights', 'Embarcadero', 10],\n        ['Pacific Heights', 'Russian Hill', 7],\n        ['Pacific Heights', 'Haight-Ashbury', 11],\n        ['Pacific Heights', 'Golden Gate Park', 15],\n        ['Pacific Heights', 'Fisherman\\'s Wharf', 13],\n        ['Pacific Heights', 'Sunset District', 21],\n        ['Pacific Heights', 'The Castro', 16],\n        ['Russian Hill', 'Chinatown', 9],\n        ['Russian Hill', 'Embarcadero', 8],\n        ['Russian Hill', 'Pacific Heights', 7],\n        ['Russian Hill', 'Haight-Ashbury', 17],\n        ['Russian Hill', 'Golden Gate Park', 21],\n        ['Russian Hill', 'Fisherman\\'s Wharf', 7],\n        ['Russian Hill', 'Sunset District', 23],\n        ['Russian Hill', 'The Castro', 21],\n        ['Haight-Ashbury', 'Chinatown', 19],\n        ['Haight-Ashbury', 'Embarcadero', 20],\n        ['Haight-Ashbury', 'Pacific Heights', 12],\n        ['Haight-Ashbury', 'Russian Hill', 17],\n        ['Haight-Ashbury', 'Golden Gate Park', 7],\n        ['Haight-Ashbury', 'Fisherman\\'s Wharf', 23],\n        ['Haight-Ashbury', 'Sunset District', 15],\n        ['Haight-Ashbury', 'The Castro', 6],\n        ['Golden Gate Park', 'Chinatown', 23],\n        ['Golden Gate Park', 'Embarcadero', 25],\n        ['Golden Gate Park', 'Pacific Heights', 16],\n        ['Golden Gate Park', 'Russian Hill', 19],\n        ['Golden Gate Park', 'Haight-Ashbury', 7],\n        ['Golden Gate Park', 'Fisherman\\'s Wharf', 24],\n        ['Golden Gate Park', 'Sunset District', 10],\n        ['Golden Gate Park', 'The Castro', 13],\n        ['Fisherman\\'s Wharf', 'Chinatown', 12],\n        ['Fisherman\\'s Wharf', 'Embarcadero', 8],\n        ['Fisherman\\'s Wharf', 'Pacific Heights', 12],\n        ['Fisherman\\'s Wharf', 'Russian Hill', 7],\n        ['Fisherman\\'s Wharf', 'Haight-Ashbury', 22],\n        ['Fisherman\\'s Wharf', 'Golden Gate Park', 25],\n        ['Fisherman\\'s Wharf', 'Sunset District', 27],\n        ['Fisherman\\'s Wharf', 'The Castro', 27],\n        ['Sunset District', 'Chinatown', 30],\n        ['Sunset District', 'Embarcadero', 30],\n        ['Sunset District', 'Pacific Heights', 21],\n        ['Sunset District', 'Russian Hill', 24],\n        ['Sunset District', 'Haight-Ashbury', 15],\n        ['Sunset District', 'Golden Gate Park', 11],\n        ['Sunset District', 'Fisherman\\'s Wharf', 29],\n        ['Sunset District', 'The Castro', 17],\n        ['The Castro', 'Chinatown', 22],\n        ['The Castro', 'Embarcadero', 22],\n        ['The Castro', 'Pacific Heights', 16],\n        ['The Castro', 'Russian Hill', 18],\n        ['The Castro', 'Haight-Ashbury', 6],\n        ['The Castro', 'Golden Gate Park', 11],\n        ['The Castro', 'Fisherman\\'s Wharf', 24],\n        ['The Castro', 'Sunset District', 17]\n    ]\n    constraints = {\n        'Richard': {'15:15-18:45': 90},\n        'Mark': {'15:00-17:00': 45},\n        'Matthew': {'17:30-21:00': 90},\n        'Rebecca': {'14:45-16:00': 60},\n        'Melissa': {'13:45-17:30': 90},\n        'Margaret': {'14:45-20:15': 15},\n        'Emily': {'15:45-17:00': 45},\n        'George': {'14:00-16:15': 75}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_763"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "9:29",
                        "end_time": "11:14"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Anthony",
                        "start_time": "13:15",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Rebecca",
                        "start_time": "19:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nimport datetime\nfrom itertools import product\n\ndef calculate_travel_time(distance, start_time):\n    travel_time = distance / 60\n    end_time = start_time + datetime.timedelta(minutes=travel_time)\n    return end_time\n\ndef generate_schedules(locations, travel_times, constraints):\n    schedules = []\n    for start_time in [datetime.datetime.strptime('09:00', '%H:%M')]:\n        for person in constraints:\n            for time in constraints[person]:\n                if time[0] >= start_time and time[1] >= start_time + datetime.timedelta(minutes=constraints[person][time]):\n                    for location in locations:\n                        if location!='Sunset District':\n                            for other_time in constraints:\n                                if other_time!= person:\n                                    for other_location in locations:\n                                        if other_location!='Sunset District' and other_location!= location:\n                                            for travel in travel_times:\n                                                if travel[0] == location and travel[1] == other_location:\n                                                    schedule = {\n                                                        \"action\": \"meet\",\n                                                        \"location\": location,\n                                                        \"person\": person,\n                                                        \"start_time\": start_time.strftime('%H:%M'),\n                                                        \"end_time\": (start_time + datetime.timedelta(minutes=travel[2])).strftime('%H:%M')\n                                                    }\n                                                    if other_location == 'Chinatown':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 29)).strftime('%H:%M')\n                                                    elif other_location == 'Russian Hill':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 23)).strftime('%H:%M')\n                                                    elif other_location == 'North Beach':\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2] + 27)).strftime('%H:%M')\n                                                    else:\n                                                        schedule['end_time'] = (schedule['end_time'] + datetime.timedelta(minutes=constraints[person][time] - travel[2])).strftime('%H:%M')\n                                                    schedules.append(schedule)\n    return schedules\n\ndef find_optimal_schedule(schedules):\n    optimal_schedule = []\n    for schedule in schedules:\n        if len(optimal_schedule) == 0 or len(schedule) > len(optimal_schedule):\n            optimal_schedule = schedule\n    return optimal_schedule\n\ndef main():\n    locations = ['Sunset District', 'Chinatown', 'Russian Hill', 'North Beach']\n    travel_times = [\n        ['Sunset District', 'Chinatown', 30],\n        ['Sunset District', 'Russian Hill', 24],\n        ['Sunset District', 'North Beach', 29],\n        ['Chinatown', 'Sunset District', 29],\n        ['Chinatown', 'Russian Hill', 7],\n        ['Chinatown', 'North Beach', 3],\n        ['Russian Hill', 'Sunset District', 23],\n        ['Russian Hill', 'Chinatown', 9],\n        ['Russian Hill', 'North Beach', 5],\n        ['North Beach', 'Sunset District', 27],\n        ['North Beach', 'Chinatown', 6],\n        ['North Beach', 'Russian Hill', 4]\n    ]\n    constraints = {\n        'Anthony': {'13:15-14:30': 60},\n        'Rebecca': {'19:30-21:15': 105},\n        'Melissa': {'08:15-13:30': 105}\n    }\n    schedules = generate_schedules(locations, travel_times, constraints)\n    optimal_schedule = find_optimal_schedule(schedules)\n    print(json.dumps({'itinerary': optimal_schedule}))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_209"
        }
    ]
}