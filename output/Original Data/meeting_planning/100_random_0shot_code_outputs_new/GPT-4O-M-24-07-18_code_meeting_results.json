{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Mary",
                        "start_time": "13:00",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Sarah",
                        "start_time": "14:45",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Helen",
                        "start_time": "21:45",
                        "end_time": "22:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Sarah",
                        "start_time": "14:45",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Mary",
                        "start_time": "16:48",
                        "end_time": "18:03"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Helen",
                        "start_time": "21:45",
                        "end_time": "22:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    ('Haight-Ashbury', 'Fisherman\\'s Wharf'): 23,\n    ('Haight-Ashbury', 'Richmond District'): 10,\n    ('Haight-Ashbury', 'Mission District'): 11,\n    ('Haight-Ashbury', 'Bayview'): 18,\n    ('Fisherman\\'s Wharf', 'Haight-Ashbury'): 22,\n    ('Fisherman\\'s Wharf', 'Richmond District'): 18,\n    ('Fisherman\\'s Wharf', 'Mission District'): 22,\n    ('Fisherman\\'s Wharf', 'Bayview'): 26,\n    ('Richmond District', 'Haight-Ashbury'): 10,\n    ('Richmond District', 'Fisherman\\'s Wharf'): 18,\n    ('Richmond District', 'Mission District'): 20,\n    ('Richmond District', 'Bayview'): 26,\n    ('Mission District', 'Haight-Ashbury'): 12,\n    ('Mission District', 'Fisherman\\'s Wharf'): 22,\n    ('Mission District', 'Richmond District'): 20,\n    ('Mission District', 'Bayview'): 15,\n    ('Bayview', 'Haight-Ashbury'): 19,\n    ('Bayview', 'Fisherman\\'s Wharf'): 25,\n    ('Bayview', 'Richmond District'): 25,\n    ('Bayview', 'Mission District'): 13,\n}\n\n# Define meeting constraints\nconstraints = {\n    'Sarah': {\"location\": \"Fisherman's Wharf\", \"available_from\": \"14:45\", \"available_to\": \"17:30\", \"duration\": 105},\n    'Mary': {\"location\": \"Richmond District\", \"available_from\": \"13:00\", \"available_to\": \"19:15\", \"duration\": 75},\n    'Helen': {\"location\": \"Mission District\", \"available_from\": \"21:45\", \"available_to\": \"22:30\", \"duration\": 30},\n    'Thomas': {\"location\": \"Bayview\", \"available_from\": \"15:15\", \"available_to\": \"18:45\", \"duration\": 120},\n}\n\ndef time_to_minutes(t):\n    \"\"\"Convert time string 'H:MM' to minutes since midnight.\"\"\"\n    h, m = map(int, t.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(m):\n    \"\"\"Convert minutes since midnight to time string 'H:MM'.\"\"\"\n    return f\"{m // 60}:{m % 60:02}\"\n\ndef schedule_meetings():\n    start_time = \"09:00\"\n    current_time = time_to_minutes(start_time)\n\n    itinerary = []\n    meeting_times = {}\n\n    # Meet Mary first if we can\n    if current_time <= time_to_minutes(constraints['Mary']['available_to']):\n        # Calculate travel time from Haight-Ashbury to Richmond District\n        travel_time = travel_times[('Haight-Ashbury', 'Richmond District')]\n        arrival_time = current_time + travel_time\n        \n        if arrival_time < time_to_minutes(constraints['Mary']['available_from']):\n            arrival_time = time_to_minutes(constraints['Mary']['available_from'])\n        \n        end_time = arrival_time + constraints['Mary']['duration']\n        \n        if end_time <= time_to_minutes(constraints['Mary']['available_to']):\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Richmond District\",\n                \"person\": \"Mary\",\n                \"start_time\": minutes_to_time(arrival_time),\n                \"end_time\": minutes_to_time(end_time)\n            })\n            current_time = end_time\n            meeting_times['Mary'] = (arrival_time, end_time)\n\n    # Meet Sarah\n    if current_time <= time_to_minutes(constraints['Sarah']['available_to']):\n        # Calculate travel time from last location (Richmond District) to Fisherman's Wharf\n        if 'Mary' in meeting_times:\n            travel_time = travel_times[('Richmond District', 'Fisherman\\'s Wharf')]\n        else:\n            travel_time = travel_times[('Haight-Ashbury', 'Fisherman\\'s Wharf')]\n        \n        arrival_time = current_time + travel_time\n        \n        if arrival_time < time_to_minutes(constraints['Sarah']['available_from']):\n            arrival_time = time_to_minutes(constraints['Sarah']['available_from'])\n        \n        end_time = arrival_time + constraints['Sarah']['duration']\n        \n        if end_time <= time_to_minutes(constraints['Sarah']['available_to']):\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Fisherman's Wharf\",\n                \"person\": \"Sarah\",\n                \"start_time\": minutes_to_time(arrival_time),\n                \"end_time\": minutes_to_time(end_time)\n            })\n            current_time = end_time\n            meeting_times['Sarah'] = (arrival_time, end_time)\n\n    # Meet Thomas\n    if current_time <= time_to_minutes(constraints['Thomas']['available_to']):\n        # Calculate travel time from last location to Bayview\n        travel_time = travel_times[('Fisherman\\'s Wharf', 'Bayview')] if 'Sarah' in meeting_times else travel_times[('Richmond District', 'Bayview')]\n        arrival_time = current_time + travel_time\n        \n        if arrival_time < time_to_minutes(constraints['Thomas']['available_from']):\n            arrival_time = time_to_minutes(constraints['Thomas']['available_from'])\n        \n        end_time = arrival_time + constraints['Thomas']['duration']\n        \n        if end_time <= time_to_minutes(constraints['Thomas']['available_to']):\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Bayview\",\n                \"person\": \"Thomas\",\n                \"start_time\": minutes_to_time(arrival_time),\n                \"end_time\": minutes_to_time(end_time)\n            })\n            current_time = end_time\n            meeting_times['Thomas'] = (arrival_time, end_time)\n\n    # Finally meet Helen\n    if current_time <= time_to_minutes(constraints['Helen']['available_to']):\n        travel_time = travel_times[('Bayview', 'Mission District')] if 'Thomas' in meeting_times else travel_times[('Fisherman\\'s Wharf', 'Mission District')]\n        arrival_time = current_time + travel_time\n        \n        if arrival_time < time_to_minutes(constraints['Helen']['available_from']):\n            arrival_time = time_to_minutes(constraints['Helen']['available_from'])\n        \n        end_time = arrival_time + constraints['Helen']['duration']\n        \n        if end_time <= time_to_minutes(constraints['Helen']['available_to']):\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Mission District\",\n                \"person\": \"Helen\",\n                \"start_time\": minutes_to_time(arrival_time),\n                \"end_time\": minutes_to_time(end_time)\n            })\n            current_time = end_time\n            meeting_times['Helen'] = (arrival_time, end_time)\n\n    return {\"itinerary\": itinerary}\n\n# Run the scheduler and print the result in JSON format\nresult = schedule_meetings()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_389"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Joshua",
                        "start_time": "10:30",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Kimberly",
                        "start_time": "15:30",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Betty",
                        "start_time": "16:07",
                        "end_time": "17:07"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "17:37",
                        "end_time": "18:07"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Sandra",
                        "start_time": "19:30",
                        "end_time": "20:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Joshua",
                        "start_time": "10:30",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Kimberly",
                        "start_time": "15:30",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "16:03",
                        "end_time": "16:33"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Betty",
                        "start_time": "16:57",
                        "end_time": "17:57"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Daniel",
                        "start_time": "18:30",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Elizabeth",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "19:45",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Dictionary of travel times in minutes\ntravel_times = {\n    \"Union Square\": {\n        \"Presidio\": 24,\n        \"Alamo Square\": 15,\n        \"Marina District\": 18,\n        \"Financial District\": 9,\n        \"Nob Hill\": 9,\n        \"Sunset District\": 27,\n        \"Chinatown\": 7,\n        \"Russian Hill\": 13,\n        \"North Beach\": 10,\n        \"Haight-Ashbury\": 18,\n    },\n    \"Presidio\": {\n        \"Union Square\": 22,\n        \"Alamo Square\": 19,\n        \"Marina District\": 11,\n        \"Financial District\": 23,\n        \"Nob Hill\": 18,\n        \"Sunset District\": 15,\n        \"Chinatown\": 21,\n        \"Russian Hill\": 14,\n        \"North Beach\": 18,\n        \"Haight-Ashbury\": 15,\n    },\n    \"Alamo Square\": {\n        \"Union Square\": 14,\n        \"Presidio\": 17,\n        \"Marina District\": 15,\n        \"Financial District\": 17,\n        \"Nob Hill\": 11,\n        \"Sunset District\": 16,\n        \"Chinatown\": 15,\n        \"Russian Hill\": 13,\n        \"North Beach\": 15,\n        \"Haight-Ashbury\": 5,\n    },\n    \"Marina District\": {\n        \"Union Square\": 16,\n        \"Presidio\": 10,\n        \"Alamo Square\": 15,\n        \"Financial District\": 17,\n        \"Nob Hill\": 12,\n        \"Sunset District\": 19,\n        \"Chinatown\": 15,\n        \"Russian Hill\": 8,\n        \"North Beach\": 11,\n        \"Haight-Ashbury\": 16,\n    },\n    \"Financial District\": {\n        \"Union Square\": 9,\n        \"Presidio\": 22,\n        \"Alamo Square\": 17,\n        \"Marina District\": 15,\n        \"Nob Hill\": 8,\n        \"Sunset District\": 30,\n        \"Chinatown\": 5,\n        \"Russian Hill\": 11,\n        \"North Beach\": 7,\n        \"Haight-Ashbury\": 19,\n    },\n    \"Nob Hill\": {\n        \"Union Square\": 7,\n        \"Presidio\": 17,\n        \"Alamo Square\": 11,\n        \"Marina District\": 11,\n        \"Financial District\": 9,\n        \"Sunset District\": 24,\n        \"Chinatown\": 6,\n        \"Russian Hill\": 5,\n        \"North Beach\": 8,\n        \"Haight-Ashbury\": 13,\n    },\n    \"Sunset District\": {\n        \"Union Square\": 30,\n        \"Presidio\": 16,\n        \"Alamo Square\": 17,\n        \"Marina District\": 21,\n        \"Financial District\": 30,\n        \"Nob Hill\": 27,\n        \"Chinatown\": 30,\n        \"Russian Hill\": 24,\n        \"North Beach\": 28,\n        \"Haight-Ashbury\": 15,\n    },\n    \"Chinatown\": {\n        \"Union Square\": 7,\n        \"Presidio\": 19,\n        \"Alamo Square\": 17,\n        \"Marina District\": 12,\n        \"Financial District\": 5,\n        \"Nob Hill\": 9,\n        \"Sunset District\": 29,\n        \"Russian Hill\": 7,\n        \"North Beach\": 3,\n        \"Haight-Ashbury\": 19,\n    },\n    \"Russian Hill\": {\n        \"Union Square\": 10,\n        \"Presidio\": 14,\n        \"Alamo Square\": 15,\n        \"Marina District\": 7,\n        \"Financial District\": 11,\n        \"Nob Hill\": 5,\n        \"Sunset District\": 23,\n        \"Chinatown\": 9,\n        \"North Beach\": 5,\n        \"Haight-Ashbury\": 17,\n    },\n    \"North Beach\": {\n        \"Union Square\": 7,\n        \"Presidio\": 17,\n        \"Alamo Square\": 16,\n        \"Marina District\": 9,\n        \"Financial District\": 8,\n        \"Nob Hill\": 7,\n        \"Sunset District\": 27,\n        \"Chinatown\": 6,\n        \"Russian Hill\": 4,\n        \"Haight-Ashbury\": 18,\n    },\n    \"Haight-Ashbury\": {\n        \"Union Square\": 19,\n        \"Presidio\": 15,\n        \"Alamo Square\": 5,\n        \"Marina District\": 17,\n        \"Financial District\": 21,\n        \"Nob Hill\": 15,\n        \"Sunset District\": 15,\n        \"Chinatown\": 19,\n        \"Russian Hill\": 17,\n        \"North Beach\": 19,\n    },\n}\n\n# Meeting constraints\nmeetings = {\n    \"Kimberly\": (\"Presidio\", \"15:30\", \"15:45\"),  # 15:30 to 16:00\n    \"Elizabeth\": (\"Alamo Square\", \"19:15\", \"20:15\"),  # 19:15 to 20:15\n    \"Joshua\": (\"Marina District\", \"10:30\", \"14:15\"),  # 10:30 to 14:15\n    \"Sandra\": (\"Financial District\", \"19:30\", \"20:15\"),  # 19:30 to 20:15\n    \"Kenneth\": (\"Nob Hill\", \"12:45\", \"21:45\"),  # whole day\n    \"Betty\": (\"Sunset District\", \"14:00\", \"19:00\"),  # 14:00 to 19:00\n    \"Deborah\": (\"Chinatown\", \"17:15\", \"20:30\"),  # 17:15 to 20:30\n    \"Barbara\": (\"Russian Hill\", \"17:30\", \"21:15\"),  # 17:30 to 21:15\n    \"Steven\": (\"North Beach\", \"17:45\", \"20:45\"),  # 17:45 to 20:45\n    \"Daniel\": (\"Haight-Ashbury\", \"18:30\", \"18:45\"),  # 18:30 to 18:45\n}\n\n# Define function to compute optimal meeting schedule\ndef compute_schedule():\n    schedule = []\n    current_time = datetime.strptime(\"9:00\", \"%H:%M\")\n    \n    # Meeting requirements in minutes\n    meeting_requirements = {\n        \"Kimberly\": 15,\n        \"Elizabeth\": 15,\n        \"Joshua\": 45,\n        \"Sandra\": 45,\n        \"Kenneth\": 30,\n        \"Betty\": 60,\n        \"Deborah\": 15,\n        \"Barbara\": 120,\n        \"Steven\": 90,\n        \"Daniel\": 15,\n    }\n    \n    # Meeting order based on availability\n    meeting_order = [\n        (\"Joshua\", \"10:30\"), \n        (\"Kimberly\", \"15:30\"),\n        (\"Betty\", \"14:00\"),\n        (\"Kenneth\", \"12:45\"),\n        (\"Sandra\", \"19:30\"), \n        (\"Elizabeth\", \"19:15\"),\n        (\"Deborah\", \"17:15\"), \n        (\"Barbara\", \"17:30\"), \n        (\"Steven\", \"17:45\"),\n        (\"Daniel\", \"18:30\"),\n    ]\n    \n    for person, available_time in meeting_order:\n        location, start_time, end_time = meetings[person]\n        start_time_dt = datetime.strptime(start_time, \"%H:%M\")\n        end_time_dt = datetime.strptime(end_time, \"%H:%M\")\n        \n        # Calculate travel time to the meeting location\n        travel_time = travel_times[\"Union Square\"].get(location, 0)\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        \n        if arrival_time <= start_time_dt:\n            # Wait until the meeting can start\n            current_time = start_time_dt\n\n        # Check if we can meet for the required time\n        meeting_time = meeting_requirements[person]\n        meeting_end_time = current_time + timedelta(minutes=meeting_time)\n\n        if meeting_end_time <= end_time_dt:\n            # Schedule the meeting\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": person,\n                \"start_time\": current_time.strftime(\"%H:%M\"),\n                \"end_time\": meeting_end_time.strftime(\"%H:%M\"),\n            })\n            # Update current time\n            current_time = meeting_end_time\n            \n            # Update current location to the meeting place\n            travel_back_time = travel_times[location][\"Union Square\"]\n            current_time += timedelta(minutes=travel_back_time)\n    \n    return {\"itinerary\": schedule}\n\n# Compute the optimal meeting schedule\nitinerary = compute_schedule()\n\n# Print the result as JSON\nprint(json.dumps(itinerary, indent=2))\n```",
            "count": "meeting_planning_example_912"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Margaret",
                        "start_time": "9:30",
                        "end_time": "10:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "12:15",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kimberly",
                        "start_time": "13:15",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "13:47",
                        "end_time": "15:02"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "19:30",
                        "end_time": "20:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "12:15",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Margaret",
                        "start_time": "12:52",
                        "end_time": "13:22"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kimberly",
                        "start_time": "13:47",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "14:19",
                        "end_time": "15:34"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "19:30",
                        "end_time": "20:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times in a dictionary\ntravel_times = {\n    (\"Richmond District\", \"Marina District\"): 9,\n    (\"Richmond District\", \"Chinatown\"): 20,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"Bayview\"): 26,\n    (\"Richmond District\", \"Union Square\"): 21,\n    (\"Marina District\", \"Richmond District\"): 11,\n    (\"Marina District\", \"Chinatown\"): 16,\n    (\"Marina District\", \"Financial District\"): 17,\n    (\"Marina District\", \"Bayview\"): 27,\n    (\"Marina District\", \"Union Square\"): 16,\n    (\"Chinatown\", \"Richmond District\"): 20,\n    (\"Chinatown\", \"Marina District\"): 12,\n    (\"Chinatown\", \"Financial District\"): 5,\n    (\"Chinatown\", \"Bayview\"): 22,\n    (\"Chinatown\", \"Union Square\"): 7,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Financial District\", \"Marina District\"): 15,\n    (\"Financial District\", \"Chinatown\"): 5,\n    (\"Financial District\", \"Bayview\"): 19,\n    (\"Financial District\", \"Union Square\"): 9,\n    (\"Bayview\", \"Richmond District\"): 25,\n    (\"Bayview\", \"Marina District\"): 25,\n    (\"Bayview\", \"Chinatown\"): 18,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Bayview\", \"Union Square\"): 17,\n    (\"Union Square\", \"Richmond District\"): 20,\n    (\"Union Square\", \"Marina District\"): 18,\n    (\"Union Square\", \"Chinatown\"): 7,\n    (\"Union Square\", \"Financial District\"): 9,\n    (\"Union Square\", \"Bayview\"): 15,\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Kimberly\": {\"location\": \"Marina District\", \"available\": (datetime.strptime(\"13:15\", \"%H:%M\"), datetime.strptime(\"16:45\", \"%H:%M\")), \"duration\": timedelta(minutes=15)},\n    \"Robert\": {\"location\": \"Chinatown\", \"available\": (datetime.strptime(\"12:15\", \"%H:%M\"), datetime.strptime(\"20:15\", \"%H:%M\")), \"duration\": timedelta(minutes=15)},\n    \"Rebecca\": {\"location\": \"Financial District\", \"available\": (datetime.strptime(\"13:15\", \"%H:%M\"), datetime.strptime(\"16:45\", \"%H:%M\")), \"duration\": timedelta(minutes=75)},\n    \"Margaret\": {\"location\": \"Bayview\", \"available\": (datetime.strptime(\"9:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")), \"duration\": timedelta(minutes=30)},\n    \"Kenneth\": {\"location\": \"Union Square\", \"available\": (datetime.strptime(\"19:30\", \"%H:%M\"), datetime.strptime(\"21:15\", \"%H:%M\")), \"duration\": timedelta(minutes=75)},\n}\n\n# Initialize meeting schedule\nitinerary = []\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Function to add meeting to the itinerary\ndef add_meeting(person, location, start, duration):\n    end = start + duration\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": start.strftime(\"%H:%M\"),\n        \"end_time\": end.strftime(\"%H:%M\"),\n    })\n    return end\n\n# Schedule meetings\ncurrent_time = start_time\ncurrent_location = \"Richmond District\"\n\n# Meeting with Margaret first\nif current_time < constraints[\"Margaret\"][\"available\"][1]:\n    travel_time = travel_times[(current_location, \"Bayview\")]\n    current_time += timedelta(minutes=travel_time)\n    if current_time < constraints[\"Margaret\"][\"available\"][1]:\n        meeting_start = max(current_time, constraints[\"Margaret\"][\"available\"][0])\n        current_time = add_meeting(\"Margaret\", \"Bayview\", meeting_start, constraints[\"Margaret\"][\"duration\"])\n        current_location = \"Bayview\"\n\n# Meeting with Robert\nif current_time < constraints[\"Robert\"][\"available\"][1]:\n    travel_time = travel_times[(current_location, \"Chinatown\")]\n    current_time += timedelta(minutes=travel_time)\n    if current_time < constraints[\"Robert\"][\"available\"][1]:\n        meeting_start = max(current_time, constraints[\"Robert\"][\"available\"][0])\n        current_time = add_meeting(\"Robert\", \"Chinatown\", meeting_start, constraints[\"Robert\"][\"duration\"])\n        current_location = \"Chinatown\"\n\n# Meeting with Kimberly\nif current_time < constraints[\"Kimberly\"][\"available\"][1]:\n    travel_time = travel_times[(current_location, \"Marina District\")]\n    current_time += timedelta(minutes=travel_time)\n    if current_time < constraints[\"Kimberly\"][\"available\"][1]:\n        meeting_start = max(current_time, constraints[\"Kimberly\"][\"available\"][0])\n        current_time = add_meeting(\"Kimberly\", \"Marina District\", meeting_start, constraints[\"Kimberly\"][\"duration\"])\n        current_location = \"Marina District\"\n\n# Meeting with Rebecca\nif current_time < constraints[\"Rebecca\"][\"available\"][1]:\n    travel_time = travel_times[(current_location, \"Financial District\")]\n    current_time += timedelta(minutes=travel_time)\n    if current_time < constraints[\"Rebecca\"][\"available\"][1]:\n        meeting_start = max(current_time, constraints[\"Rebecca\"][\"available\"][0])\n        current_time = add_meeting(\"Rebecca\", \"Financial District\", meeting_start, constraints[\"Rebecca\"][\"duration\"])\n        current_location = \"Financial District\"\n\n# Meeting with Kenneth\nif current_time < constraints[\"Kenneth\"][\"available\"][1]:\n    travel_time = travel_times[(current_location, \"Union Square\")]\n    current_time += timedelta(minutes=travel_time)\n    if current_time < constraints[\"Kenneth\"][\"available\"][1]:\n        meeting_start = max(current_time, constraints[\"Kenneth\"][\"available\"][0])\n        current_time = add_meeting(\"Kenneth\", \"Union Square\", meeting_start, constraints[\"Kenneth\"][\"duration\"])\n        current_location = \"Union Square\"\n\n# Convert the itinerary to JSON\noutput = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_446"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Patricia",
                        "start_time": "9:31",
                        "end_time": "10:31"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Laura",
                        "start_time": "12:30",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Ronald",
                        "start_time": "13:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Emily",
                        "start_time": "16:15",
                        "end_time": "17:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nfrom itertools import permutations\n\n# Define travel times between locations\ntravel_times = {\n    (\"Financial District\", \"Russian Hill\"): 10,\n    (\"Financial District\", \"Sunset District\"): 31,\n    (\"Financial District\", \"North Beach\"): 7,\n    (\"Financial District\", \"The Castro\"): 23,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"Russian Hill\", \"Financial District\"): 11,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"Russian Hill\", \"North Beach\"): 5,\n    (\"Russian Hill\", \"The Castro\"): 21,\n    (\"Russian Hill\", \"Golden Gate Park\"): 21,\n    (\"Sunset District\", \"Financial District\"): 30,\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"North Beach\"): 29,\n    (\"Sunset District\", \"The Castro\"): 17,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"North Beach\", \"Financial District\"): 8,\n    (\"North Beach\", \"Russian Hill\"): 4,\n    (\"North Beach\", \"Sunset District\"): 27,\n    (\"North Beach\", \"The Castro\"): 22,\n    (\"North Beach\", \"Golden Gate Park\"): 22,\n    (\"The Castro\", \"Financial District\"): 20,\n    (\"The Castro\", \"Russian Hill\"): 18,\n    (\"The Castro\", \"Sunset District\"): 17,\n    (\"The Castro\", \"North Beach\"): 20,\n    (\"The Castro\", \"Golden Gate Park\"): 11,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Golden Gate Park\", \"Russian Hill\"): 19,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Golden Gate Park\", \"North Beach\"): 24,\n    (\"Golden Gate Park\", \"The Castro\"): 13,\n}\n\n# Meeting constraints\nconstraints = {\n    \"Ronald\": {\"location\": \"Russian Hill\", \"start\": \"13:45\", \"end\": \"17:15\", \"min_duration\": 105},\n    \"Patricia\": {\"location\": \"Sunset District\", \"start\": \"09:15\", \"end\": \"22:00\", \"min_duration\": 60},\n    \"Laura\": {\"location\": \"North Beach\", \"start\": \"12:30\", \"end\": \"12:45\", \"min_duration\": 15},\n    \"Emily\": {\"location\": \"The Castro\", \"start\": \"16:15\", \"end\": \"18:30\", \"min_duration\": 60},\n    \"Mary\": {\"location\": \"Golden Gate Park\", \"start\": \"15:00\", \"end\": \"16:30\", \"min_duration\": 60},\n}\n\n# Meeting schedule\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\ndef convert_to_time_range(start, duration):\n    start_dt = datetime.strptime(start, \"%H:%M\")\n    end_dt = start_dt + timedelta(minutes=duration)\n    return start_dt, end_dt\n\ndef format_time(dt):\n    return dt.strftime(\"%H:%M\")\n\ndef find_schedule():\n    max_meetings = 0\n    best_itinerary = []\n\n    locations = list(constraints.keys())\n    for perm in permutations(locations):\n        current_time = start_time\n        current_itinerary = []\n        meeting_times = {}\n        \n        for person in perm:\n            meeting_info = constraints[person]\n            location = meeting_info[\"location\"]\n            start = meeting_info[\"start\"]\n            end = meeting_info[\"end\"]\n            min_duration = meeting_info[\"min_duration\"]\n            \n            loc_start_dt, loc_end_dt = convert_to_time_range(start, 0)\n            meet_duration = min_duration\n            \n            if location in meeting_times:\n                loc_start_dt = max(loc_start_dt, meeting_times[location][1])\n                \n            if current_time < loc_start_dt:\n                travel_time = travel_times.get((current_itinerary[-1][\"location\"], location)) if current_itinerary else 0\n                arrive_time = current_time + timedelta(minutes=travel_time) if travel_time else current_time\n                \n                if arrive_time < loc_start_dt:\n                    current_time = loc_start_dt\n            \n            travel_time = travel_times.get((current_itinerary[-1][\"location\"], location), 0) if current_itinerary else 0\n            start_meeting_time = current_time + timedelta(minutes=travel_time)\n            \n            if start_meeting_time >= loc_start_dt and start_meeting_time + timedelta(minutes=meet_duration) <= loc_end_dt:\n                end_meeting_time = start_meeting_time + timedelta(minutes=meet_duration)\n                current_itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": location,\n                    \"person\": person,\n                    \"start_time\": format_time(start_meeting_time),\n                    \"end_time\": format_time(end_meeting_time)\n                })\n                current_time = end_meeting_time\n                meeting_times[location] = (start_meeting_time, end_meeting_time)\n        \n        if len(current_itinerary) > max_meetings:\n            max_meetings = len(current_itinerary)\n            best_itinerary = current_itinerary\n\n    return best_itinerary\n\nif __name__ == \"__main__\":\n    itinerary = find_schedule()\n    result = {\"itinerary\": itinerary}\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_444"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Betty",
                        "start_time": "9:19",
                        "end_time": "10:49"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Charles",
                        "start_time": "11:26",
                        "end_time": "13:26"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Mary",
                        "start_time": "14:08",
                        "end_time": "14:53"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Lisa",
                        "start_time": "20:30",
                        "end_time": "21:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Mary",
                        "start_time": "10:00",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Betty",
                        "start_time": "10:56",
                        "end_time": "12:26"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Charles",
                        "start_time": "12:47",
                        "end_time": "14:47"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Lisa",
                        "start_time": "20:30",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define the travel distances in minutes\ntravel_times = {\n    (\"Bayview\", \"Pacific Heights\"): 23,\n    (\"Bayview\", \"Mission District\"): 13,\n    (\"Bayview\", \"Haight-Ashbury\"): 19,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Pacific Heights\", \"Bayview\"): 22,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"Pacific Heights\", \"Haight-Ashbury\"): 11,\n    (\"Pacific Heights\", \"Financial District\"): 13,\n    (\"Mission District\", \"Bayview\"): 15,\n    (\"Mission District\", \"Pacific Heights\"): 16,\n    (\"Mission District\", \"Haight-Ashbury\"): 12,\n    (\"Mission District\", \"Financial District\"): 17,\n    (\"Haight-Ashbury\", \"Bayview\"): 18,\n    (\"Haight-Ashbury\", \"Pacific Heights\"): 12,\n    (\"Haight-Ashbury\", \"Mission District\"): 11,\n    (\"Haight-Ashbury\", \"Financial District\"): 21,\n    (\"Financial District\", \"Bayview\"): 19,\n    (\"Financial District\", \"Pacific Heights\"): 13,\n    (\"Financial District\", \"Mission District\"): 17,\n    (\"Financial District\", \"Haight-Ashbury\"): 19,\n}\n\n# Define meeting constraints\nmeetings = {\n    \"Mary\": {\n        \"location\": \"Pacific Heights\",\n        \"start\": datetime.strptime(\"10:00\", \"%H:%M\"),\n        \"end\": datetime.strptime(\"19:00\", \"%H:%M\"),\n        \"duration\": timedelta(minutes=45)\n    },\n    \"Lisa\": {\n        \"location\": \"Mission District\",\n        \"start\": datetime.strptime(\"20:30\", \"%H:%M\"),\n        \"end\": datetime.strptime(\"22:00\", \"%H:%M\"),\n        \"duration\": timedelta(minutes=75)\n    },\n    \"Betty\": {\n        \"location\": \"Haight-Ashbury\",\n        \"start\": datetime.strptime(\"07:15\", \"%H:%M\"),\n        \"end\": datetime.strptime(\"17:15\", \"%H:%M\"),\n        \"duration\": timedelta(minutes=90)\n    },\n    \"Charles\": {\n        \"location\": \"Financial District\",\n        \"start\": datetime.strptime(\"11:15\", \"%H:%M\"),\n        \"end\": datetime.strptime(\"15:00\", \"%H:%M\"),\n        \"duration\": timedelta(minutes=120)\n    }\n}\n\n# Initialize\ncurrent_time = datetime.strptime(\"09:00\", \"%H:%M\")\nitinerary = []\n\n# Function to schedule a meeting\ndef schedule_meeting(person, meeting_info):\n    global current_time\n    location = meeting_info[\"location\"]\n    meeting_duration = meeting_info[\"duration\"]\n\n    travel_time = travel_times.get((\"Bayview\", location), None)\n    if travel_time is not None:\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if we can meet\n        if arrival_time < meeting_info[\"start\"]:\n            start_time = meeting_info[\"start\"]\n        else:\n            start_time = max(arrival_time, meeting_info[\"start\"])\n\n        end_time = start_time + meeting_duration\n\n        # Check if end time is within the allowable meeting time\n        if end_time <= meeting_info[\"end\"]:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": person,\n                \"start_time\": start_time.strftime(\"%H:%M\"),\n                \"end_time\": end_time.strftime(\"%H:%M\"),\n            })\n            current_time = end_time + timedelta(minutes=travel_times.get((location, \"Bayview\"), 0))\n\n# Schedule meetings one by one\nschedule_meeting(\"Betty\", meetings[\"Betty\"])\nschedule_meeting(\"Charles\", meetings[\"Charles\"])\nschedule_meeting(\"Mary\", meetings[\"Mary\"])\nschedule_meeting(\"Lisa\", meetings[\"Lisa\"])\n\n# Output the result as JSON\noutput = {\"itinerary\": itinerary}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_350"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sandra",
                        "start_time": "9:11",
                        "end_time": "11:11"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Robert",
                        "start_time": "11:44",
                        "end_time": "11:59"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "12:33",
                        "end_time": "14:03"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "14:33",
                        "end_time": "15:18"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Kimberly",
                        "start_time": "15:51",
                        "end_time": "17:36"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Melissa",
                        "start_time": "18:01",
                        "end_time": "18:16"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "18:45",
                        "end_time": "19:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sandra",
                        "start_time": "9:12",
                        "end_time": "11:12"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Robert",
                        "start_time": "11:25",
                        "end_time": "11:40"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kenneth",
                        "start_time": "11:49",
                        "end_time": "12:34"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "12:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "15:15",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Kimberly",
                        "start_time": "16:27",
                        "end_time": "18:12"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Amanda",
                        "start_time": "18:23",
                        "end_time": "18:38"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Melissa",
                        "start_time": "18:45",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "19:30",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel times in minutes\ntravel_times = {\n    \"Haight-Ashbury\": {\n        \"Mission District\": 12,\n        \"Union Square\": 18,\n        \"Pacific Heights\": 11,\n        \"Bayview\": 19,\n        \"Fisherman's Wharf\": 22,\n        \"Marina District\": 16,\n        \"Richmond District\": 10,\n        \"Sunset District\": 15,\n        \"Golden Gate Park\": 7,\n    },\n    \"Mission District\": {\n        \"Haight-Ashbury\": 12,\n        \"Union Square\": 14,\n        \"Pacific Heights\": 15,\n        \"Bayview\": 13,\n        \"Fisherman's Wharf\": 22,\n        \"Marina District\": 20,\n        \"Richmond District\": 20,\n        \"Sunset District\": 24,\n        \"Golden Gate Park\": 17,\n    },\n    \"Union Square\": {\n        \"Haight-Ashbury\": 18,\n        \"Mission District\": 14,\n        \"Pacific Heights\": 12,\n        \"Bayview\": 18,\n        \"Fisherman's Wharf\": 13,\n        \"Marina District\": 16,\n        \"Richmond District\": 21,\n        \"Sunset District\": 30,\n        \"Golden Gate Park\": 22,\n    },\n    \"Pacific Heights\": {\n        \"Haight-Ashbury\": 11,\n        \"Mission District\": 15,\n        \"Union Square\": 12,\n        \"Bayview\": 23,\n        \"Fisherman's Wharf\": 12,\n        \"Marina District\": 7,\n        \"Richmond District\": 10,\n        \"Sunset District\": 21,\n        \"Golden Gate Park\": 15,\n    },\n    \"Bayview\": {\n        \"Haight-Ashbury\": 19,\n        \"Mission District\": 13,\n        \"Union Square\": 18,\n        \"Pacific Heights\": 23,\n        \"Fisherman's Wharf\": 26,\n        \"Marina District\": 27,\n        \"Richmond District\": 27,\n        \"Sunset District\": 22,\n        \"Golden Gate Park\": 22,\n    },\n    \"Fisherman's Wharf\": {\n        \"Haight-Ashbury\": 22,\n        \"Mission District\": 22,\n        \"Union Square\": 13,\n        \"Pacific Heights\": 12,\n        \"Bayview\": 26,\n        \"Marina District\": 10,\n        \"Richmond District\": 18,\n        \"Sunset District\": 29,\n        \"Golden Gate Park\": 25,\n    },\n    \"Marina District\": {\n        \"Haight-Ashbury\": 16,\n        \"Mission District\": 20,\n        \"Union Square\": 16,\n        \"Pacific Heights\": 7,\n        \"Bayview\": 27,\n        \"Fisherman's Wharf\": 10,\n        \"Richmond District\": 11,\n        \"Sunset District\": 19,\n        \"Golden Gate Park\": 18,\n    },\n    \"Richmond District\": {\n        \"Haight-Ashbury\": 10,\n        \"Mission District\": 20,\n        \"Union Square\": 21,\n        \"Pacific Heights\": 10,\n        \"Bayview\": 27,\n        \"Fisherman's Wharf\": 18,\n        \"Marina District\": 9,\n        \"Sunset District\": 12,\n        \"Golden Gate Park\": 9,\n    },\n    \"Sunset District\": {\n        \"Haight-Ashbury\": 15,\n        \"Mission District\": 25,\n        \"Union Square\": 30,\n        \"Pacific Heights\": 21,\n        \"Bayview\": 22,\n        \"Fisherman's Wharf\": 29,\n        \"Marina District\": 21,\n        \"Richmond District\": 12,\n        \"Golden Gate Park\": 11,\n    },\n    \"Golden Gate Park\": {\n        \"Haight-Ashbury\": 7,\n        \"Mission District\": 17,\n        \"Union Square\": 22,\n        \"Pacific Heights\": 15,\n        \"Bayview\": 23,\n        \"Fisherman's Wharf\": 24,\n        \"Marina District\": 16,\n        \"Richmond District\": 7,\n        \"Sunset District\": 10,\n    },\n}\n\n# Constraints\nconstraints = {\n    \"Elizabeth\": {\"location\": \"Mission District\", \"start\": \"10:30\", \"end\": \"20:00\", \"duration\": 90},\n    \"David\": {\"location\": \"Union Square\", \"start\": \"15:15\", \"end\": \"19:00\", \"duration\": 45},\n    \"Sandra\": {\"location\": \"Pacific Heights\", \"start\": \"07:00\", \"end\": \"20:00\", \"duration\": 120},\n    \"Thomas\": {\"location\": \"Bayview\", \"start\": \"19:30\", \"end\": \"20:30\", \"duration\": 30},\n    \"Robert\": {\"location\": \"Fisherman's Wharf\", \"start\": \"10:00\", \"end\": \"15:00\", \"duration\": 15},\n    \"Kenneth\": {\"location\": \"Marina District\", \"start\": \"10:45\", \"end\": \"13:00\", \"duration\": 45},\n    \"Melissa\": {\"location\": \"Richmond District\", \"start\": \"18:15\", \"end\": \"20:00\", \"duration\": 15},\n    \"Kimberly\": {\"location\": \"Sunset District\", \"start\": \"10:15\", \"end\": \"18:15\", \"duration\": 105},\n    \"Amanda\": {\"location\": \"Golden Gate Park\", \"start\": \"07:45\", \"end\": \"18:45\", \"duration\": 15},\n}\n\n# Function to convert string time to datetime object\ndef to_time_obj(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Function to convert datetime object to string\ndef to_time_str(time_obj):\n    return time_obj.strftime(\"%H:%M\")\n\n# Initialize the itinerary\nitinerary = []\n\n# Calculate schedule\navailable_time = to_time_obj(\"09:00\")\n\n# Helper function to meet a person\ndef schedule_meeting(person, location, duration):\n    global available_time\n    start_meeting = available_time + timedelta(minutes=travel_times[\"Haight-Ashbury\"][location])\n    end_meeting = start_meeting + timedelta(minutes=duration)\n    if end_meeting.time() <= to_time_obj(constraints[person][\"end\"]).time():\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": location,\n            \"person\": person,\n            \"start_time\": to_time_str(start_meeting),\n            \"end_time\": to_time_str(end_meeting),\n        })\n        available_time = end_meeting + timedelta(minutes=travel_times[location][\"Haight-Ashbury\"])\n\n# Meeting schedule\n# Meeting Sandra first\nschedule_meeting(\"Sandra\", \"Pacific Heights\", constraints[\"Sandra\"][\"duration\"])\n\n# Meeting Robert next\nschedule_meeting(\"Robert\", \"Fisherman's Wharf\", constraints[\"Robert\"][\"duration\"])\n\n# Meeting Kenneth next\nschedule_meeting(\"Kenneth\", \"Marina District\", constraints[\"Kenneth\"][\"duration\"])\n\n# Meeting Elizabeth next\nschedule_meeting(\"Elizabeth\", \"Mission District\", constraints[\"Elizabeth\"][\"duration\"])\n\n# Meeting David next\nschedule_meeting(\"David\", \"Union Square\", constraints[\"David\"][\"duration\"])\n\n# Meeting Kimberly next\nschedule_meeting(\"Kimberly\", \"Sunset District\", constraints[\"Kimberly\"][\"duration\"])\n\n# Meeting Melissa last\nschedule_meeting(\"Melissa\", \"Richmond District\", constraints[\"Melissa\"][\"duration\"])\n\n# Meeting Thomas\nschedule_meeting(\"Thomas\", \"Bayview\", constraints[\"Thomas\"][\"duration\"])\n\n# Prepare output\nresult = {\n    \"itinerary\": itinerary\n}\n\n# Print result as JSON\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_867"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Jason",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Brian",
                        "start_time": "14:52",
                        "end_time": "15:07"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Elizabeth",
                        "start_time": "15:30",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Laura",
                        "start_time": "17:37",
                        "end_time": "18:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "19:02",
                        "end_time": "19:47"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_times = {\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Presidio\", \"North Beach\"): 18,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Richmond District\", \"North Beach\"): 17,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Richmond District\", \"Union Square\"): 21,\n    (\"North Beach\", \"Financial District\"): 7,\n    (\"North Beach\", \"Golden Gate Park\"): 22,\n    (\"North Beach\", \"Union Square\"): 7,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"Financial District\", \"Union Square\"): 9,\n    (\"Golden Gate Park\", \"Union Square\"): 22,\n}\n\ndef add_minutes(start_time, minutes):\n    return start_time + timedelta(minutes=minutes)\n\n# Meeting constraints\nmeetings = {\n    \"Jason\": {\"location\": \"Richmond District\", \"available_from\": \"13:00\", \"available_to\": \"20:45\", \"min_duration\": 90},\n    \"Melissa\": {\"location\": \"North Beach\", \"available_from\": \"18:45\", \"available_to\": \"20:15\", \"min_duration\": 45},\n    \"Brian\": {\"location\": \"Financial District\", \"available_from\": \"09:45\", \"available_to\": \"21:45\", \"min_duration\": 15},\n    \"Elizabeth\": {\"location\": \"Golden Gate Park\", \"available_from\": \"08:45\", \"available_to\": \"21:30\", \"min_duration\": 105},\n    \"Laura\": {\"location\": \"Union Square\", \"available_from\": \"14:15\", \"available_to\": \"19:30\", \"min_duration\": 75},\n}\n\ndef generate_itinerary():\n    itinerary = []\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    \n    # Meet Brian first since he is available right after our arrival\n    brian_start = add_minutes(current_time, travel_times[(\"Presidio\", \"Financial District\")])\n    if brian_start < datetime.strptime(meetings[\"Brian\"][\"available_from\"], \"%H:%M\"):\n        brian_start = datetime.strptime(meetings[\"Brian\"][\"available_from\"], \"%H:%M\")\n    \n    brian_end = add_minutes(brian_start, meetings[\"Brian\"][\"min_duration\"])\n    if brian_end > datetime.strptime(meetings[\"Brian\"][\"available_to\"], \"%H:%M\"):\n        raise Exception(\"Unable to meet Brian in available time\")\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Brian\"][\"location\"],\n        \"person\": \"Brian\",\n        \"start_time\": brian_start.strftime(\"%H:%M\"),\n        \"end_time\": brian_end.strftime(\"%H:%M\"),\n    })\n    \n    # Meet Elizabeth next\n    current_time = brian_end\n    elizabeth_start = add_minutes(current_time, travel_times[(\"Financial District\", \"Golden Gate Park\")])\n    \n    if elizabeth_start < datetime.strptime(meetings[\"Elizabeth\"][\"available_from\"], \"%H:%M\"):\n        elizabeth_start = datetime.strptime(meetings[\"Elizabeth\"][\"available_from\"], \"%H:%M\")\n    \n    elizabeth_end = add_minutes(elizabeth_start, meetings[\"Elizabeth\"][\"min_duration\"])\n    if elizabeth_end > datetime.strptime(meetings[\"Elizabeth\"][\"available_to\"], \"%H:%M\"):\n        raise Exception(\"Unable to meet Elizabeth in available time\")\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Elizabeth\"][\"location\"],\n        \"person\": \"Elizabeth\",\n        \"start_time\": elizabeth_start.strftime(\"%H:%M\"),\n        \"end_time\": elizabeth_end.strftime(\"%H:%M\"),\n    })\n    \n    # Meet Jason next\n    current_time = elizabeth_end\n    jason_start = add_minutes(current_time, travel_times[(\"Golden Gate Park\", \"Richmond District\")])\n    \n    if jason_start < datetime.strptime(meetings[\"Jason\"][\"available_from\"], \"%H:%M\"):\n        jason_start = datetime.strptime(meetings[\"Jason\"][\"available_from\"], \"%H:%M\")\n    \n    jason_end = add_minutes(jason_start, meetings[\"Jason\"][\"min_duration\"])\n    if jason_end > datetime.strptime(meetings[\"Jason\"][\"available_to\"], \"%H:%M\"):\n        raise Exception(\"Unable to meet Jason in available time\")\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Jason\"][\"location\"],\n        \"person\": \"Jason\",\n        \"start_time\": jason_start.strftime(\"%H:%M\"),\n        \"end_time\": jason_end.strftime(\"%H:%M\"),\n    })\n    \n    # Meet Laura next\n    current_time = jason_end\n    laura_start = add_minutes(current_time, travel_times[(\"Richmond District\", \"Union Square\")])\n    \n    if laura_start < datetime.strptime(meetings[\"Laura\"][\"available_from\"], \"%H:%M\"):\n        laura_start = datetime.strptime(meetings[\"Laura\"][\"available_from\"], \"%H:%M\")\n    \n    laura_end = add_minutes(laura_start, meetings[\"Laura\"][\"min_duration\"])\n    if laura_end > datetime.strptime(meetings[\"Laura\"][\"available_to\"], \"%H:%M\"):\n        raise Exception(\"Unable to meet Laura in available time\")\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Laura\"][\"location\"],\n        \"person\": \"Laura\",\n        \"start_time\": laura_start.strftime(\"%H:%M\"),\n        \"end_time\": laura_end.strftime(\"%H:%M\"),\n    })\n    \n    # Meet Melissa last\n    current_time = laura_end\n    melissa_start = add_minutes(current_time, travel_times[(\"Union Square\", \"North Beach\")])\n    \n    if melissa_start < datetime.strptime(meetings[\"Melissa\"][\"available_from\"], \"%H:%M\"):\n        melissa_start = datetime.strptime(meetings[\"Melissa\"][\"available_from\"], \"%H:%M\")\n    \n    melissa_end = add_minutes(melissa_start, meetings[\"Melissa\"][\"min_duration\"])\n    if melissa_end > datetime.strptime(meetings[\"Melissa\"][\"available_to\"], \"%H:%M\"):\n        raise Exception(\"Unable to meet Melissa in available time\")\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Melissa\"][\"location\"],\n        \"person\": \"Melissa\",\n        \"start_time\": melissa_start.strftime(\"%H:%M\"),\n        \"end_time\": melissa_end.strftime(\"%H:%M\"),\n    })\n    \n    return {\"itinerary\": itinerary}\n\nif __name__ == \"__main__\":\n    schedule = generate_itinerary()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_423"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Melissa",
                        "start_time": "9:30",
                        "end_time": "10:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Matthew",
                        "start_time": "10:19",
                        "end_time": "10:49"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Robert",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Joseph",
                        "start_time": "13:24",
                        "end_time": "15:09"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Amanda",
                        "start_time": "15:25",
                        "end_time": "17:10"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Karen",
                        "start_time": "17:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "19:31",
                        "end_time": "21:16"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    ('Presidio', 'Marina District'): 11,\n    ('Presidio', 'The Castro'): 21,\n    ('Presidio', 'Fisherman\\'s Wharf'): 19,\n    ('Presidio', 'Bayview'): 31,\n    ('Presidio', 'Pacific Heights'): 11,\n    ('Presidio', 'Mission District'): 26,\n    ('Presidio', 'Alamo Square'): 19,\n    ('Presidio', 'Golden Gate Park'): 12,\n    ('Marina District', 'Presidio'): 10,\n    ('Marina District', 'The Castro'): 22,\n    ('Marina District', 'Fisherman\\'s Wharf'): 10,\n    ('Marina District', 'Bayview'): 27,\n    ('Marina District', 'Pacific Heights'): 7,\n    ('Marina District', 'Mission District'): 20,\n    ('Marina District', 'Alamo Square'): 15,\n    ('Marina District', 'Golden Gate Park'): 18,\n    ('The Castro', 'Presidio'): 20,\n    ('The Castro', 'Marina District'): 21,\n    ('The Castro', 'Fisherman\\'s Wharf'): 24,\n    ('The Castro', 'Bayview'): 19,\n    ('The Castro', 'Pacific Heights'): 16,\n    ('The Castro', 'Mission District'): 7,\n    ('The Castro', 'Alamo Square'): 8,\n    ('The Castro', 'Golden Gate Park'): 11,\n    ('Fisherman\\'s Wharf', 'Presidio'): 17,\n    ('Fisherman\\'s Wharf', 'Marina District'): 9,\n    ('Fisherman\\'s Wharf', 'The Castro'): 27,\n    ('Fisherman\\'s Wharf', 'Bayview'): 26,\n    ('Fisherman\\'s Wharf', 'Pacific Heights'): 12,\n    ('Fisherman\\'s Wharf', 'Mission District'): 22,\n    ('Fisherman\\'s Wharf', 'Alamo Square'): 21,\n    ('Fisherman\\'s Wharf', 'Golden Gate Park'): 25,\n    ('Bayview', 'Presidio'): 32,\n    ('Bayview', 'Marina District'): 27,\n    ('Bayview', 'The Castro'): 19,\n    ('Bayview', 'Fisherman\\'s Wharf'): 25,\n    ('Bayview', 'Pacific Heights'): 23,\n    ('Bayview', 'Mission District'): 13,\n    ('Bayview', 'Alamo Square'): 16,\n    ('Bayview', 'Golden Gate Park'): 22,\n    ('Pacific Heights', 'Presidio'): 11,\n    ('Pacific Heights', 'Marina District'): 6,\n    ('Pacific Heights', 'The Castro'): 16,\n    ('Pacific Heights', 'Fisherman\\'s Wharf'): 13,\n    ('Pacific Heights', 'Bayview'): 22,\n    ('Pacific Heights', 'Mission District'): 15,\n    ('Pacific Heights', 'Alamo Square'): 10,\n    ('Pacific Heights', 'Golden Gate Park'): 15,\n    ('Mission District', 'Presidio'): 25,\n    ('Mission District', 'Marina District'): 19,\n    ('Mission District', 'The Castro'): 7,\n    ('Mission District', 'Fisherman\\'s Wharf'): 22,\n    ('Mission District', 'Bayview'): 14,\n    ('Mission District', 'Pacific Heights'): 16,\n    ('Mission District', 'Alamo Square'): 11,\n    ('Mission District', 'Golden Gate Park'): 17,\n    ('Alamo Square', 'Presidio'): 17,\n    ('Alamo Square', 'Marina District'): 15,\n    ('Alamo Square', 'The Castro'): 8,\n    ('Alamo Square', 'Fisherman\\'s Wharf'): 19,\n    ('Alamo Square', 'Bayview'): 16,\n    ('Alamo Square', 'Pacific Heights'): 10,\n    ('Alamo Square', 'Mission District'): 10,\n    ('Alamo Square', 'Golden Gate Park'): 9,\n    ('Golden Gate Park', 'Presidio'): 11,\n    ('Golden Gate Park', 'Marina District'): 16,\n    ('Golden Gate Park', 'The Castro'): 13,\n    ('Golden Gate Park', 'Fisherman\\'s Wharf'): 24,\n    ('Golden Gate Park', 'Bayview'): 23,\n    ('Golden Gate Park', 'Pacific Heights'): 16,\n    ('Golden Gate Park', 'Mission District'): 17,\n    ('Golden Gate Park', 'Alamo Square'): 9,\n}\n\n# Meeting constraints\nmeetings = {\n    'Amanda': {'location': 'Marina District', 'start': '14:45', 'end': '19:30', 'duration': 105},\n    'Melissa': {'location': 'The Castro', 'start': '09:30', 'end': '17:00', 'duration': 30},\n    'Jeffrey': {'location': 'Fisherman\\'s Wharf', 'start': '12:45', 'end': '18:45', 'duration': 120},\n    'Matthew': {'location': 'Bayview', 'start': '10:15', 'end': '13:15', 'duration': 30},\n    'Nancy': {'location': 'Pacific Heights', 'start': '17:00', 'end': '21:30', 'duration': 105},\n    'Karen': {'location': 'Mission District', 'start': '17:30', 'end': '20:30', 'duration': 105},\n    'Robert': {'location': 'Alamo Square', 'start': '11:15', 'end': '17:30', 'duration': 120},\n    'Joseph': {'location': 'Golden Gate Park', 'start': '08:30', 'end': '21:15', 'duration': 105},\n}\n\n# Convert string time to datetime object\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\n# Check if a meeting can occur between two time periods and includes travel time\ndef can_meet(start_a, end_a, start_b, end_b, travel_time):\n    return not (end_a + timedelta(minutes=travel_time) > start_b or end_b < start_a)\n\n# Planning the itinerary\nitinerary = []\ncurrent_time = str_to_time('09:00')  # starting at Presidio\ncurrent_location = 'Presidio'\n\nwhile True:\n    if current_location == 'Marina District':\n        person = 'Amanda'\n    elif current_location == 'The Castro':\n        person = 'Melissa'\n    elif current_location == 'Fisherman\\'s Wharf':\n        person = 'Jeffrey'\n    elif current_location == 'Bayview':\n        person = 'Matthew'\n    elif current_location == 'Pacific Heights':\n        person = 'Nancy'\n    elif current_location == 'Mission District':\n        person = 'Karen'\n    elif current_location == 'Alamo Square':\n        person = 'Robert'\n    elif current_location == 'Golden Gate Park':\n        person = 'Joseph'\n    else:\n        break\n    \n    meeting_info = meetings[person]\n    meeting_start = str_to_time(meeting_info['start'])\n    meeting_end = str_to_time(meeting_info['end'])\n\n    if current_time < meeting_start:\n        current_time = meeting_start\n\n    # If we can meet\n    if can_meet(current_time, meeting_end, meeting_start, meeting_end, travel_times[(current_location, meeting_info['location'])]):\n        duration = meeting_info['duration']\n        end_meeting_time = current_time + timedelta(minutes=duration)\n\n        # Schedule the meeting\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting_info['location'],\n            \"person\": person,\n            \"start_time\": current_time.strftime('%H:%M'),\n            \"end_time\": end_meeting_time.strftime('%H:%M')\n        })\n\n        current_time = end_meeting_time + timedelta(minutes=travel_times[(current_location, meeting_info['location'])])\n        current_location = meeting_info['location']\n        \n        # Remove the meeting from the list (to not meet twice)\n        del meetings[person]\n    else:\n        # Move to the next meeting in a location where currently not scheduled\n        if not meetings:\n            break\n        \n        # Sort and choose the closest location we can still meet\n        next_location = min(meetings.items(), key=lambda x: travel_times[(current_location, x[1]['location'])])[1]\n        travel_time = travel_times[(current_location, next_location['location'])]\n        current_time += timedelta(minutes=travel_time)\n        current_location = next_location['location']\n        \n# Output JSON\noutput = json.dumps({\"itinerary\": itinerary}, indent=2)\nprint(output)\n```",
            "count": "meeting_planning_example_715"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "9:07",
                        "end_time": "10:22"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Anthony",
                        "start_time": "10:32",
                        "end_time": "10:47"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sandra",
                        "start_time": "14:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Stephanie",
                        "start_time": "20:00",
                        "end_time": "20:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Kevin",
                        "start_time": "20:22",
                        "end_time": "21:37"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Travel times in minutes\ntravel_times = {\n    (\"Haight-Ashbury\", \"Russian Hill\"): 17,\n    (\"Haight-Ashbury\", \"Fisherman's Wharf\"): 23,\n    (\"Haight-Ashbury\", \"Nob Hill\"): 15,\n    (\"Haight-Ashbury\", \"Golden Gate Park\"): 7,\n    (\"Haight-Ashbury\", \"Alamo Square\"): 5,\n    (\"Haight-Ashbury\", \"Pacific Heights\"): 12,\n    (\"Russian Hill\", \"Haight-Ashbury\"): 17,\n    (\"Russian Hill\", \"Fisherman's Wharf\"): 7,\n    (\"Russian Hill\", \"Nob Hill\"): 5,\n    (\"Russian Hill\", \"Golden Gate Park\"): 21,\n    (\"Russian Hill\", \"Alamo Square\"): 15,\n    (\"Russian Hill\", \"Pacific Heights\"): 7,\n    (\"Fisherman's Wharf\", \"Haight-Ashbury\"): 22,\n    (\"Fisherman's Wharf\", \"Russian Hill\"): 7,\n    (\"Fisherman's Wharf\", \"Nob Hill\"): 11,\n    (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n    (\"Fisherman's Wharf\", \"Alamo Square\"): 20,\n    (\"Fisherman's Wharf\", \"Pacific Heights\"): 12,\n    (\"Nob Hill\", \"Haight-Ashbury\"): 13,\n    (\"Nob Hill\", \"Russian Hill\"): 5,\n    (\"Nob Hill\", \"Fisherman's Wharf\"): 11,\n    (\"Nob Hill\", \"Golden Gate Park\"): 17,\n    (\"Nob Hill\", \"Alamo Square\"): 11,\n    (\"Nob Hill\", \"Pacific Heights\"): 8,\n    (\"Golden Gate Park\", \"Haight-Ashbury\"): 7,\n    (\"Golden Gate Park\", \"Russian Hill\"): 19,\n    (\"Golden Gate Park\", \"Fisherman's Wharf\"): 24,\n    (\"Golden Gate Park\", \"Nob Hill\"): 20,\n    (\"Golden Gate Park\", \"Alamo Square\"): 10,\n    (\"Golden Gate Park\", \"Pacific Heights\"): 16,\n    (\"Alamo Square\", \"Haight-Ashbury\"): 5,\n    (\"Alamo Square\", \"Russian Hill\"): 13,\n    (\"Alamo Square\", \"Fisherman's Wharf\"): 19,\n    (\"Alamo Square\", \"Nob Hill\"): 11,\n    (\"Alamo Square\", \"Golden Gate Park\"): 9,\n    (\"Alamo Square\", \"Pacific Heights\"): 10,\n    (\"Pacific Heights\", \"Haight-Ashbury\"): 11,\n    (\"Pacific Heights\", \"Russian Hill\"): 7,\n    (\"Pacific Heights\", \"Fisherman's Wharf\"): 13,\n    (\"Pacific Heights\", \"Nob Hill\"): 8,\n    (\"Pacific Heights\", \"Golden Gate Park\"): 15,\n    (\"Pacific Heights\", \"Alamo Square\"): 10,\n}\n\n# Meeting constraints\nmeetings = {\n    \"Stephanie\": {\n        \"location\": \"Russian Hill\",\n        \"start\": \"20:00\",\n        \"end\": \"20:45\",\n        \"duration\": 15,\n    },\n    \"Kevin\": {\n        \"location\": \"Fisherman's Wharf\",\n        \"start\": \"19:15\",\n        \"end\": \"21:45\",\n        \"duration\": 75,\n    },\n    \"Robert\": {\n        \"location\": \"Nob Hill\",\n        \"start\": \"07:45\",\n        \"end\": \"10:30\",\n        \"duration\": 90,\n    },\n    \"Steven\": {\n        \"location\": \"Golden Gate Park\",\n        \"start\": \"08:30\",\n        \"end\": \"17:00\",\n        \"duration\": 75,\n    },\n    \"Anthony\": {\n        \"location\": \"Alamo Square\",\n        \"start\": \"07:45\",\n        \"end\": \"19:45\",\n        \"duration\": 15,\n    },\n    \"Sandra\": {\n        \"location\": \"Pacific Heights\",\n        \"start\": \"14:45\",\n        \"end\": \"21:45\",\n        \"duration\": 45,\n    },\n}\n\n# Convert time string to datetime\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Convert datetime to string\ndef format_time(dt):\n    return dt.strftime(\"%H:%M\")\n\ndef compute_schedule():\n    start_time = parse_time(\"09:00\")\n    itinerary = []\n    \n    def can_meet(start, end, duration):\n        return (end - start).total_seconds() / 60 >= duration\n    \n    # Try to meet all friends in a feasible order\n    locations = [\"Haight-Ashbury\", \"Russian Hill\", \"Fisherman's Wharf\", \"Nob Hill\", \n                 \"Golden Gate Park\", \"Alamo Square\", \"Pacific Heights\"]\n    \n    # Generate all permutations of locations to attempt\n    for order in itertools.permutations(locations[1:]):  # excluding \"Haight-Ashbury\"\n        current_time = start_time\n        current_location = \"Haight-Ashbury\"\n        temp_itinerary = []\n        \n        for friend in order:\n            meeting_info = meetings[friend]\n            travel_time = travel_times[(current_location, meeting_info['location'])]\n            arrival_time = current_time + timedelta(minutes=travel_time)\n            meeting_start = max(arrival_time, parse_time(meeting_info['start']))\n            meeting_end = meeting_start + timedelta(minutes=meeting_info['duration'])\n            \n            if can_meet(meeting_start, parse_time(meeting_info['end']), meeting_info['duration']):\n                temp_itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": meeting_info['location'],\n                    \"person\": friend,\n                    \"start_time\": format_time(meeting_start),\n                    \"end_time\": format_time(meeting_end),\n                })\n                current_time = meeting_end\n                current_location = meeting_info['location']\n            else:\n                break  # can't meet this friend in this order\n        \n        if len(temp_itinerary) == len(order):\n            itinerary = temp_itinerary\n            break  # found a complete valid itinerary\n    \n    return {\"itinerary\": itinerary}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_577"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Elizabeth",
                        "start_time": "10:00",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Joseph",
                        "start_time": "11:45",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Karen",
                        "start_time": "14:15",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "14:55",
                        "end_time": "15:25"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kimberly",
                        "start_time": "15:41",
                        "end_time": "17:26"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Helen",
                        "start_time": "17:45",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Robert",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Elizabeth",
                        "start_time": "10:00",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Joseph",
                        "start_time": "11:45",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "14:30",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kimberly",
                        "start_time": "15:22",
                        "end_time": "17:07"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Karen",
                        "start_time": "17:18",
                        "end_time": "17:48"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Helen",
                        "start_time": "18:12",
                        "end_time": "19:57"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Ashley",
                        "start_time": "20:21",
                        "end_time": "21:06"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Robert",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel times in minutes\ntravel_times = {\n    ('Marina District', 'Mission District'): 20,\n    ('Marina District', 'Fisherman\\'s Wharf'): 10,\n    ('Marina District', 'Presidio'): 10,\n    ('Marina District', 'Union Square'): 16,\n    ('Marina District', 'Sunset District'): 19,\n    ('Marina District', 'Financial District'): 17,\n    ('Marina District', 'Haight-Ashbury'): 16,\n    ('Marina District', 'Russian Hill'): 8,\n    ('Mission District', 'Fisherman\\'s Wharf'): 22,\n    ('Mission District', 'Presidio'): 25,\n    ('Mission District', 'Union Square'): 15,\n    ('Mission District', 'Sunset District'): 24,\n    ('Mission District', 'Financial District'): 15,\n    ('Mission District', 'Haight-Ashbury'): 12,\n    ('Mission District', 'Russian Hill'): 15,\n    ('Fisherman\\'s Wharf', 'Presidio'): 19,\n    ('Fisherman\\'s Wharf', 'Union Square'): 13,\n    ('Fisherman\\'s Wharf', 'Sunset District'): 27,\n    ('Fisherman\\'s Wharf', 'Financial District'): 11,\n    ('Fisherman\\'s Wharf', 'Haight-Ashbury'): 22,\n    ('Fisherman\\'s Wharf', 'Russian Hill'): 7,\n    ('Presidio', 'Union Square'): 22,\n    ('Presidio', 'Sunset District'): 15,\n    ('Presidio', 'Financial District'): 23,\n    ('Union Square', 'Sunset District'): 27,\n    ('Union Square', 'Financial District'): 9,\n    ('Union Square', 'Haight-Ashbury'): 18,\n    ('Union Square', 'Russian Hill'): 13,\n    ('Sunset District', 'Financial District'): 30,\n    ('Sunset District', 'Haight-Ashbury'): 15,\n    ('Sunset District', 'Russian Hill'): 24,\n    ('Financial District', 'Haight-Ashbury'): 19,\n    ('Financial District', 'Russian Hill'): 11,\n    ('Haight-Ashbury', 'Russian Hill'): 17,\n}\n\n# Meeting constraints\nconstraints = {\n    \"Karen\": {\"location\": \"Mission District\", \"start\": \"14:15\", \"end\": \"22:00\", \"duration\": 30},\n    \"Richard\": {\"location\": \"Fisherman's Wharf\", \"start\": \"14:30\", \"end\": \"17:30\", \"duration\": 30},\n    \"Robert\": {\"location\": \"Presidio\", \"start\": \"21:45\", \"end\": \"22:45\", \"duration\": 60},\n    \"Joseph\": {\"location\": \"Union Square\", \"start\": \"11:45\", \"end\": \"14:45\", \"duration\": 120},\n    \"Helen\": {\"location\": \"Sunset District\", \"start\": \"14:45\", \"end\": \"20:45\", \"duration\": 105},\n    \"Elizabeth\": {\"location\": \"Financial District\", \"start\": \"10:00\", \"end\": \"12:45\", \"duration\": 75},\n    \"Kimberly\": {\"location\": \"Haight-Ashbury\", \"start\": \"14:15\", \"end\": \"17:30\", \"duration\": 105},\n    \"Ashley\": {\"location\": \"Russian Hill\", \"start\": \"11:30\", \"end\": \"21:30\", \"duration\": 45},\n}\n\n# Start time\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Schedule itinerary\nitinerary = []\n\n# Meet Elizabeth first since her time constraint is the tightest\ndef add_meeting(person, duration, location, start, end):\n    start_time = max(start, arrival_time + timedelta(minutes=travel_times.get(('Marina District', location), 0)))\n    end_time = start_time + timedelta(minutes=duration)\n    \n    if end_time <= end:\n        itinerary.append({\"action\": \"meet\", \"location\": location, \"person\": person, \n                          \"start_time\": start_time.strftime(\"%H:%M\"), \n                          \"end_time\": end_time.strftime(\"%H:%M\")})\n        return end_time\n    return None\n\n# Meeting with Elizabeth\nelizabeth_start = datetime.strptime(\"10:00\", \"%H:%M\")\nelizabeth_end = datetime.strptime(\"12:45\", \"%H:%M\")\narrival_time = add_meeting(\"Elizabeth\", constraints[\"Elizabeth\"][\"duration\"], \n                            constraints[\"Elizabeth\"][\"location\"], elizabeth_start, elizabeth_end)\n\n# Meeting with Joseph\njoseph_start = datetime.strptime(\"11:45\", \"%H:%M\")\njoseph_end = datetime.strptime(\"14:45\", \"%H:%M\")\narrival_time = add_meeting(\"Joseph\", constraints[\"Joseph\"][\"duration\"], \n                            constraints[\"Joseph\"][\"location\"], joseph_start, joseph_end)\n\n# Meeting with Karen\nkaren_start = datetime.strptime(\"14:15\", \"%H:%M\")\nkaren_end = datetime.strptime(\"22:00\", \"%H:%M\")\narrival_time = add_meeting(\"Karen\", constraints[\"Karen\"][\"duration\"], \n                            constraints[\"Karen\"][\"location\"], karen_start, karen_end)\n\n# Meeting with Richard\nrichard_start = datetime.strptime(\"14:30\", \"%H:%M\")\nrichard_end = datetime.strptime(\"17:30\", \"%H:%M\")\narrival_time = add_meeting(\"Richard\", constraints[\"Richard\"][\"duration\"], \n                            constraints[\"Richard\"][\"location\"], richard_start, richard_end)\n\n# Meeting with Kimberly\nkimberly_start = datetime.strptime(\"14:15\", \"%H:%M\")\nkimberly_end = datetime.strptime(\"17:30\", \"%H:%M\")\narrival_time = add_meeting(\"Kimberly\", constraints[\"Kimberly\"][\"duration\"], \n                            constraints[\"Kimberly\"][\"location\"], kimberly_start, kimberly_end)\n\n# Meeting with Helen\nhelen_start = datetime.strptime(\"14:45\", \"%H:%M\")\nhelen_end = datetime.strptime(\"20:45\", \"%H:%M\")\narrival_time = add_meeting(\"Helen\", constraints[\"Helen\"][\"duration\"], \n                            constraints[\"Helen\"][\"location\"], helen_start, helen_end)\n\n# Meeting with Robert\nrobert_start = datetime.strptime(\"21:45\", \"%H:%M\")\nrobert_end = datetime.strptime(\"22:45\", \"%H:%M\")\narrival_time = add_meeting(\"Robert\", constraints[\"Robert\"][\"duration\"], \n                            constraints[\"Robert\"][\"location\"], robert_start, robert_end)\n\n# Meeting with Ashley\nashley_start = datetime.strptime(\"11:30\", \"%H:%M\")\nashley_end = datetime.strptime(\"21:30\", \"%H:%M\")\narrival_time = add_meeting(\"Ashley\", constraints[\"Ashley\"][\"duration\"], \n                            constraints[\"Ashley\"][\"location\"], ashley_start, ashley_end)\n\n# Create the JSON output\noutput = {\"itinerary\": itinerary}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_728"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jeffrey",
                        "start_time": "11:00",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Elizabeth",
                        "start_time": "15:30",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Margaret",
                        "start_time": "13:15",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "George",
                        "start_time": "19:45",
                        "end_time": "21:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jeffrey",
                        "start_time": "10:15",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Ronald",
                        "start_time": "12:06",
                        "end_time": "14:06"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Margaret",
                        "start_time": "14:22",
                        "end_time": "15:52"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Richard",
                        "start_time": "15:59",
                        "end_time": "16:14"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Laura",
                        "start_time": "16:34",
                        "end_time": "17:34"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Melissa",
                        "start_time": "17:55",
                        "end_time": "18:10"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "George",
                        "start_time": "19:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nfrom itertools import permutations\n\n# Travel distances between locations in minutes\ntravel_times = {\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Presidio\", \"Alamo Square\"): 19,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Presidio\", \"Sunset District\"): 15,\n    (\"Presidio\", \"Embarcadero\"): 20,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Chinatown\"): 21,\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Fisherman's Wharf\", \"Alamo Square\"): 21,\n    (\"Fisherman's Wharf\", \"Financial District\"): 11,\n    (\"Fisherman's Wharf\", \"Union Square\"): 13,\n    (\"Fisherman's Wharf\", \"Sunset District\"): 27,\n    (\"Fisherman's Wharf\", \"Embarcadero\"): 8,\n    (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n    (\"Fisherman's Wharf\", \"Chinatown\"): 12,\n    (\"Fisherman's Wharf\", \"Richmond District\"): 18,\n    (\"Alamo Square\", \"Financial District\"): 17,\n    (\"Alamo Square\", \"Union Square\"): 14,\n    (\"Alamo Square\", \"Sunset District\"): 16,\n    (\"Alamo Square\", \"Embarcadero\"): 16,\n    (\"Alamo Square\", \"Golden Gate Park\"): 9,\n    (\"Alamo Square\", \"Chinatown\"): 15,\n    (\"Alamo Square\", \"Richmond District\"): 11,\n    (\"Financial District\", \"Union Square\"): 9,\n    (\"Financial District\", \"Sunset District\"): 30,\n    (\"Financial District\", \"Embarcadero\"): 4,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"Financial District\", \"Chinatown\"): 5,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Union Square\", \"Sunset District\"): 27,\n    (\"Union Square\", \"Embarcadero\"): 11,\n    (\"Union Square\", \"Golden Gate Park\"): 22,\n    (\"Union Square\", \"Chinatown\"): 7,\n    (\"Union Square\", \"Richmond District\"): 20,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"Golden Gate Park\", \"Chinatown\"): 23,\n    (\"Chinatown\", \"Richmond District\"): 20,\n}\n\n# Meeting constraints with time windows and required meeting durations\nmeetings = {\n    \"Jeffrey\": {\"location\": \"Fisherman's Wharf\", \"available\": (datetime.strptime('10:15', '%H:%M'), datetime.strptime('13:00', '%H:%M')), \"duration\": 90},\n    \"Ronald\": {\"location\": \"Alamo Square\", \"available\": (datetime.strptime('7:45', '%H:%M'), datetime.strptime('14:45', '%H:%M')), \"duration\": 120},\n    \"Jason\": {\"location\": \"Financial District\", \"available\": (datetime.strptime('10:45', '%H:%M'), datetime.strptime('16:00', '%H:%M')), \"duration\": 105},\n    \"Melissa\": {\"location\": \"Union Square\", \"available\": (datetime.strptime('17:45', '%H:%M'), datetime.strptime('18:15', '%H:%M')), \"duration\": 15},\n    \"Elizabeth\": {\"location\": \"Sunset District\", \"available\": (datetime.strptime('14:45', '%H:%M'), datetime.strptime('17:30', '%H:%M')), \"duration\": 105},\n    \"Margaret\": {\"location\": \"Embarcadero\", \"available\": (datetime.strptime('13:15', '%H:%M'), datetime.strptime('19:00', '%H:%M')), \"duration\": 90},\n    \"George\": {\"location\": \"Golden Gate Park\", \"available\": (datetime.strptime('19:00', '%H:%M'), datetime.strptime('22:00', '%H:%M')), \"duration\": 75},\n    \"Richard\": {\"location\": \"Chinatown\", \"available\": (datetime.strptime('9:30', '%H:%M'), datetime.strptime('21:00', '%H:%M')), \"duration\": 15},\n    \"Laura\": {\"location\": \"Richmond District\", \"available\": (datetime.strptime('9:45', '%H:%M'), datetime.strptime('18:00', '%H:%M')), \"duration\": 60},\n}\n\n# Starting point and schedule parameters\nstart_time = datetime.strptime('9:00', '%H:%M')\nitinerary = []\n\ndef can_meet(current_time, travel_time, meeting_start, meeting_duration):\n    return current_time + timedelta(minutes=travel_time) <= meeting_start and current_time + timedelta(minutes=travel_time + meeting_duration) <= meeting_start + timedelta(minutes=60)\n\ndef schedule_meeting(person):\n    meeting_data = meetings[person]\n    location = meeting_data[\"location\"]\n    available_start, available_end = meeting_data[\"available\"]\n    duration = meeting_data[\"duration\"]\n    \n    for i in range(10):  # Check next 10 hours\n        time_to_meet = start_time + timedelta(hours=i)\n        if (available_start <= time_to_meet <= available_end) and (time_to_meet + timedelta(minutes=duration) <= available_end):\n            travel_time = travel_times.get((start_time.strftime('%H:%M'), location), 0)\n            if can_meet(start_time, travel_time, available_start, duration):\n                return {\"action\": \"meet\", \"location\": location, \"person\": person, \n                        \"start_time\": (time_to_meet + timedelta(minutes=travel_time)).strftime('%H:%M'), \n                        \"end_time\": (time_to_meet + timedelta(minutes=travel_time + duration)).strftime('%H:%M')}\n    return None\n\nfor person in meetings:\n    meeting = schedule_meeting(person)\n    if meeting:\n        itinerary.append(meeting)\n        travel_time = travel_times.get((start_time.strftime('%H:%M'), meeting['location']), 0)\n        start_time += timedelta(minutes=travel_time + meetings[person]['duration'])\n\nresult = {\"itinerary\": itinerary}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_831"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Betty",
                        "start_time": "9:13",
                        "end_time": "10:58"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Melissa",
                        "start_time": "11:13",
                        "end_time": "12:58"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joshua",
                        "start_time": "13:03",
                        "end_time": "14:33"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Jeffrey",
                        "start_time": "14:50",
                        "end_time": "15:35"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "James",
                        "start_time": "16:02",
                        "end_time": "17:32"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Emily",
                        "start_time": "19:30",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nfrom itertools import permutations\n\n# Travel distances (in minutes)\ntravel_times = {\n    (\"Union Square\", \"Russian Hill\"): 13,\n    (\"Union Square\", \"Alamo Square\"): 15,\n    (\"Union Square\", \"Haight-Ashbury\"): 18,\n    (\"Union Square\", \"Marina District\"): 18,\n    (\"Union Square\", \"Bayview\"): 15,\n    (\"Union Square\", \"Chinatown\"): 7,\n    (\"Union Square\", \"Presidio\"): 24,\n    (\"Union Square\", \"Sunset District\"): 27,\n    (\"Russian Hill\", \"Union Square\"): 10,\n    (\"Russian Hill\", \"Alamo Square\"): 15,\n    (\"Russian Hill\", \"Haight-Ashbury\"): 17,\n    (\"Russian Hill\", \"Marina District\"): 7,\n    (\"Russian Hill\", \"Bayview\"): 23,\n    (\"Russian Hill\", \"Chinatown\"): 9,\n    (\"Russian Hill\", \"Presidio\"): 14,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"Alamo Square\", \"Union Square\"): 14,\n    (\"Alamo Square\", \"Russian Hill\"): 13,\n    (\"Alamo Square\", \"Haight-Ashbury\"): 5,\n    (\"Alamo Square\", \"Marina District\"): 15,\n    (\"Alamo Square\", \"Bayview\"): 16,\n    (\"Alamo Square\", \"Chinatown\"): 15,\n    (\"Alamo Square\", \"Presidio\"): 17,\n    (\"Alamo Square\", \"Sunset District\"): 16,\n    (\"Haight-Ashbury\", \"Union Square\"): 19,\n    (\"Haight-Ashbury\", \"Russian Hill\"): 17,\n    (\"Haight-Ashbury\", \"Alamo Square\"): 5,\n    (\"Haight-Ashbury\", \"Marina District\"): 17,\n    (\"Haight-Ashbury\", \"Bayview\"): 18,\n    (\"Haight-Ashbury\", \"Chinatown\"): 19,\n    (\"Haight-Ashbury\", \"Presidio\"): 15,\n    (\"Haight-Ashbury\", \"Sunset District\"): 15,\n    (\"Marina District\", \"Union Square\"): 16,\n    (\"Marina District\", \"Russian Hill\"): 8,\n    (\"Marina District\", \"Alamo Square\"): 15,\n    (\"Marina District\", \"Haight-Ashbury\"): 16,\n    (\"Marina District\", \"Bayview\"): 27,\n    (\"Marina District\", \"Chinatown\"): 15,\n    (\"Marina District\", \"Presidio\"): 10,\n    (\"Marina District\", \"Sunset District\"): 19,\n    (\"Bayview\", \"Union Square\"): 18,\n    (\"Bayview\", \"Russian Hill\"): 23,\n    (\"Bayview\", \"Alamo Square\"): 16,\n    (\"Bayview\", \"Haight-Ashbury\"): 19,\n    (\"Bayview\", \"Marina District\"): 27,\n    (\"Bayview\", \"Chinatown\"): 19,\n    (\"Bayview\", \"Presidio\"): 32,\n    (\"Bayview\", \"Sunset District\"): 23,\n    (\"Chinatown\", \"Union Square\"): 7,\n    (\"Chinatown\", \"Russian Hill\"): 7,\n    (\"Chinatown\", \"Alamo Square\"): 17,\n    (\"Chinatown\", \"Haight-Ashbury\"): 19,\n    (\"Chinatown\", \"Marina District\"): 12,\n    (\"Chinatown\", \"Bayview\"): 20,\n    (\"Chinatown\", \"Presidio\"): 19,\n    (\"Chinatown\", \"Sunset District\"): 29,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Presidio\", \"Alamo Square\"): 19,\n    (\"Presidio\", \"Haight-Ashbury\"): 15,\n    (\"Presidio\", \"Marina District\"): 11,\n    (\"Presidio\", \"Bayview\"): 31,\n    (\"Presidio\", \"Chinatown\"): 21,\n    (\"Presidio\", \"Sunset District\"): 15,\n    (\"Sunset District\", \"Union Square\"): 30,\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"Alamo Square\"): 17,\n    (\"Sunset District\", \"Haight-Ashbury\"): 15,\n    (\"Sunset District\", \"Marina District\"): 21,\n    (\"Sunset District\", \"Bayview\"): 22,\n    (\"Sunset District\", \"Chinatown\"): 30,\n    (\"Sunset District\", \"Presidio\"): 16,\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Betty\", \"location\": \"Russian Hill\", \"start\": \"07:00\", \"end\": \"16:45\", \"duration\": 105},\n    {\"name\": \"Melissa\", \"location\": \"Alamo Square\", \"start\": \"09:30\", \"end\": \"17:15\", \"duration\": 105},\n    {\"name\": \"Joshua\", \"location\": \"Haight-Ashbury\", \"start\": \"12:15\", \"end\": \"19:00\", \"duration\": 90},\n    {\"name\": \"Jeffrey\", \"location\": \"Marina District\", \"start\": \"12:15\", \"end\": \"18:00\", \"duration\": 45},\n    {\"name\": \"James\", \"location\": \"Bayview\", \"start\": \"07:30\", \"end\": \"20:00\", \"duration\": 90},\n    {\"name\": \"Anthony\", \"location\": \"Chinatown\", \"start\": \"11:45\", \"end\": \"13:30\", \"duration\": 75},\n    {\"name\": \"Timothy\", \"location\": \"Presidio\", \"start\": \"12:30\", \"end\": \"14:45\", \"duration\": 90},\n    {\"name\": \"Emily\", \"location\": \"Sunset District\", \"start\": \"19:30\", \"end\": \"21:30\", \"duration\": 120},\n]\n\ndef time_to_minutes(t):\n    return int(t[:2]) * 60 + int(t[3:5])\n\ndef minutes_to_time(m):\n    return f\"{m // 60}:{m % 60:02d}\"\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times.get((from_loc, to_loc), travel_times.get((to_loc, from_loc), float('inf')))\n\ndef schedule_meetings(start_time, end_time, meetings):\n    available_slots = []\n    for meeting in meetings:\n        start = time_to_minutes(meeting[\"start\"])\n        end = time_to_minutes(meeting[\"end\"])\n        available_slots.append((meeting[\"name\"], meeting[\"location\"], start, end, meeting[\"duration\"]))\n\n    best_itinerary = []\n    max_meetings = 0\n\n    for perm in permutations(available_slots):\n        current_time = start_time\n        current_itinerary = []\n        valid_schedule = True\n\n        for name, location, start, end, duration in perm:\n            travel_time = get_travel_time(\"Union Square\", location)\n            start_meeting = max(current_time + travel_time, start)\n            if start_meeting + duration > end:\n                valid_schedule = False\n                break\n            \n            current_itinerary.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": name,\n                \"start_time\": minutes_to_time(start_meeting),\n                \"end_time\": minutes_to_time(start_meeting + duration)\n            })\n            current_time = start_meeting + duration + get_travel_time(location, \"Union Square\")\n\n        if valid_schedule and len(current_itinerary) > max_meetings:\n            max_meetings = len(current_itinerary)\n            best_itinerary = current_itinerary\n\n    return best_itinerary\n\n# The day starts at 9:00 AM (9:00 in minutes)\nstart_time = time_to_minutes(\"09:00\")\nend_time = time_to_minutes(\"21:30\")\n\nitinerary = schedule_meetings(start_time, end_time, meetings)\n\nresult = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_789"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Emily",
                        "start_time": "11:45",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Barbara",
                        "start_time": "16:45",
                        "end_time": "17:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Emily",
                        "start_time": "11:45",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Barbara",
                        "start_time": "16:45",
                        "end_time": "17:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants\nTRAVEL_TIMES = {\n    (\"The Castro\", \"Alamo Square\"): 8,\n    (\"The Castro\", \"Union Square\"): 19,\n    (\"The Castro\", \"Chinatown\"): 20,\n    (\"Alamo Square\", \"The Castro\"): 8,\n    (\"Alamo Square\", \"Union Square\"): 14,\n    (\"Alamo Square\", \"Chinatown\"): 16,\n    (\"Union Square\", \"The Castro\"): 19,\n    (\"Union Square\", \"Alamo Square\"): 15,\n    (\"Union Square\", \"Chinatown\"): 7,\n    (\"Chinatown\", \"The Castro\"): 22,\n    (\"Chinatown\", \"Alamo Square\"): 17,\n    (\"Chinatown\", \"Union Square\"): 7,\n}\n\n# Meeting constraints\nconstraints = {\n    \"Emily\": {\n        \"location\": \"Alamo Square\",\n        \"start_time\": \"11:45\",\n        \"end_time\": \"15:15\",\n        \"min_duration\": 105,\n    },\n    \"Barbara\": {\n        \"location\": \"Union Square\",\n        \"start_time\": \"16:45\",\n        \"end_time\": \"18:15\",\n        \"min_duration\": 60,\n    },\n    \"William\": {\n        \"location\": \"Chinatown\",\n        \"start_time\": \"17:15\",\n        \"end_time\": \"19:00\",\n        \"min_duration\": 105,\n    },\n}\n\ndef time_to_minutes(t):\n    \"\"\"Convert 'HH:MM' time format to minutes since 00:00.\"\"\"\n    h, m = map(int, t.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(m):\n    \"\"\"Convert minutes since 00:00 back to 'HH:MM' format.\"\"\"\n    h, m = divmod(m, 60)\n    return f\"{h}:{m:02d}\"\n\n# Meeting schedule computation\ndef compute_schedule():\n    start_time = time_to_minutes(\"09:00\")\n    itinerary = []\n    \n    # Meeting Emily\n    emily_start = time_to_minutes(constraints[\"Emily\"][\"start_time\"])\n    emily_end = time_to_minutes(constraints[\"Emily\"][\"end_time\"])\n\n    # Time after traveling from Castro to Alamo Square\n    travel_to_emily = TRAVEL_TIMES[(\"The Castro\", \"Alamo Square\")]\n    travel_to_emily_end_time = start_time + travel_to_emily\n    \n    if travel_to_emily_end_time <= emily_end:\n        meeting_time_with_emily = max(emily_start, travel_to_emily_end_time)\n        emily_meeting_end = meeting_time_with_emily + constraints[\"Emily\"][\"min_duration\"]\n        \n        if emily_meeting_end <= emily_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Alamo Square\",\n                \"person\": \"Emily\",\n                \"start_time\": minutes_to_time(meeting_time_with_emily),\n                \"end_time\": minutes_to_time(emily_meeting_end),\n            })\n    \n            # Travel to Union Square\n            travel_to_barbara = TRAVEL_TIMES[(\"Alamo Square\", \"Union Square\")]\n            travel_to_barbara_end_time = emily_meeting_end + travel_to_barbara\n            \n            # Meeting Barbara\n            barbara_start = time_to_minutes(constraints[\"Barbara\"][\"start_time\"])\n            barbara_end = time_to_minutes(constraints[\"Barbara\"][\"end_time\"])\n\n            if travel_to_barbara_end_time <= barbara_end:\n                meeting_time_with_barbara = max(barbara_start, travel_to_barbara_end_time)\n                barbara_meeting_end = meeting_time_with_barbara + constraints[\"Barbara\"][\"min_duration\"]\n                \n                if barbara_meeting_end <= barbara_end:\n                    itinerary.append({\n                        \"action\": \"meet\",\n                        \"location\": \"Union Square\",\n                        \"person\": \"Barbara\",\n                        \"start_time\": minutes_to_time(meeting_time_with_barbara),\n                        \"end_time\": minutes_to_time(barbara_meeting_end),\n                    })\n\n                    # Travel to Chinatown\n                    travel_to_william = TRAVEL_TIMES[(\"Union Square\", \"Chinatown\")]\n                    travel_to_william_end_time = barbara_meeting_end + travel_to_william\n                    \n                    # Meeting William\n                    william_start = time_to_minutes(constraints[\"William\"][\"start_time\"])\n                    william_end = time_to_minutes(constraints[\"William\"][\"end_time\"])\n\n                    if travel_to_william_end_time <= william_end:\n                        meeting_time_with_william = max(william_start, travel_to_william_end_time)\n                        william_meeting_end = meeting_time_with_william + constraints[\"William\"][\"min_duration\"]\n                        \n                        if william_meeting_end <= william_end:\n                            itinerary.append({\n                                \"action\": \"meet\",\n                                \"location\": \"Chinatown\",\n                                \"person\": \"William\",\n                                \"start_time\": minutes_to_time(meeting_time_with_william),\n                                \"end_time\": minutes_to_time(william_meeting_end),\n                            })\n\n    return {\"itinerary\": itinerary}\n\n# Generating the meeting schedule\nschedule = compute_schedule()\n\n# Print the output as JSON\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_219"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Joseph",
                        "start_time": "11:30",
                        "end_time": "12:05"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "14:30",
                        "end_time": "15:07"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Joseph",
                        "start_time": "11:30",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "14:30",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "15:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Laura",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define the travel times in minutes as a dictionary\ntravel_times = {\n    (\"Fisherman's Wharf\", \"The Castro\"): 26,\n    (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n    (\"Fisherman's Wharf\", \"Embarcadero\"): 8,\n    (\"Fisherman's Wharf\", \"Russian Hill\"): 7,\n    (\"Fisherman's Wharf\", \"Nob Hill\"): 11,\n    (\"Fisherman's Wharf\", \"Alamo Square\"): 20,\n    (\"Fisherman's Wharf\", \"North Beach\"): 6,\n    (\"The Castro\", \"Golden Gate Park\"): 13,\n    (\"The Castro\", \"Embarcadero\"): 22,\n    (\"The Castro\", \"Russian Hill\"): 18,\n    (\"The Castro\", \"Nob Hill\"): 16,\n    (\"The Castro\", \"Alamo Square\"): 8,\n    (\"The Castro\", \"North Beach\"): 20,\n    (\"Golden Gate Park\", \"Embarcadero\"): 25,\n    (\"Golden Gate Park\", \"Russian Hill\"): 19,\n    (\"Golden Gate Park\", \"Nob Hill\"): 20,\n    (\"Golden Gate Park\", \"Alamo Square\"): 10,\n    (\"Golden Gate Park\", \"North Beach\"): 24,\n    (\"Embarcadero\", \"Russian Hill\"): 8,\n    (\"Embarcadero\", \"Nob Hill\"): 10,\n    (\"Embarcadero\", \"Alamo Square\"): 19,\n    (\"Embarcadero\", \"North Beach\"): 5,\n    (\"Russian Hill\", \"Nob Hill\"): 5,\n    (\"Russian Hill\", \"Alamo Square\"): 15,\n    (\"Russian Hill\", \"North Beach\"): 5,\n    (\"Nob Hill\", \"Alamo Square\"): 11,\n    (\"Nob Hill\", \"North Beach\"): 8,\n    (\"Alamo Square\", \"North Beach\"): 15,\n}\n\n# Define the meeting constraints\nmeetings = {\n    \"Laura\": {\n        \"location\": \"The Castro\",\n        \"available\": (\"19:45\", \"21:30\"),\n        \"duration\": 105,\n    },\n    \"Daniel\": {\n        \"location\": \"Golden Gate Park\",\n        \"available\": (\"21:15\", \"21:45\"),\n        \"duration\": 15,\n    },\n    \"William\": {\n        \"location\": \"Embarcadero\",\n        \"available\": (\"07:00\", \"09:00\"),\n        \"duration\": 90,\n    },\n    \"Karen\": {\n        \"location\": \"Russian Hill\",\n        \"available\": (\"14:30\", \"19:45\"),\n        \"duration\": 30,\n    },\n    \"Stephanie\": {\n        \"location\": \"Nob Hill\",\n        \"available\": (\"07:30\", \"09:30\"),\n        \"duration\": 45,\n    },\n    \"Joseph\": {\n        \"location\": \"Alamo Square\",\n        \"available\": (\"11:30\", \"12:45\"),\n        \"duration\": 15,\n    },\n    \"Kimberly\": {\n        \"location\": \"North Beach\",\n        \"available\": (\"15:45\", \"19:15\"),\n        \"duration\": 30,\n    },\n}\n\n# Start from Fisherman's Wharf at 9:00 AM\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nitinerary = []\ncurrent_time = start_time\n\n# Function to meet a person if the time constraints allow\ndef can_meet(person, start_time, current_time):\n    end_time_limit = datetime.strptime(meetings[person][\"available\"][1], \"%H:%M\")\n    available_start = datetime.strptime(meetings[person][\"available\"][0], \"%H:%M\")\n    duration = meetings[person][\"duration\"]\n    \n    travel_duration = travel_times.get((\"Fisherman's Wharf\", meetings[person][\"location\"]), 0)\n    \n    if current_time + timedelta(minutes=travel_duration) >= available_start:\n        meeting_end_time = current_time + timedelta(minutes=travel_duration) + timedelta(minutes=duration)\n        if meeting_end_time <= end_time_limit:\n            return meeting_end_time\n    return None\n\n# Attempt to schedule meetings in a reasonable order based on availability and preference\ndef schedule_meetings():\n    global current_time\n    \n    # Meet William first since he is available before 9:00\n    if current_time <= datetime.strptime(\"09:00\", \"%H:%M\"):\n        meeting_time = can_meet(\"William\", current_time, current_time)\n        if meeting_time:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": meetings[\"William\"][\"location\"],\n                \"person\": \"William\",\n                \"start_time\": current_time.strftime(\"%H:%M\"),\n                \"end_time\": meeting_time.strftime(\"%H:%M\"),\n            })\n            current_time = meeting_time\n    \n    # Meet Stephanie next\n    meeting_time = can_meet(\"Stephanie\", current_time, current_time)\n    if meeting_time:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meetings[\"Stephanie\"][\"location\"],\n            \"person\": \"Stephanie\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_time.strftime(\"%H:%M\"),\n        })\n        current_time = meeting_time\n\n    # Meet Joseph afterward\n    if current_time < datetime.strptime(\"11:30\", \"%H:%M\"):\n        current_time = datetime.strptime(\"11:30\", \"%H:%M\")  # Wait until 11:30\n    meeting_time = can_meet(\"Joseph\", current_time, current_time)\n    if meeting_time:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meetings[\"Joseph\"][\"location\"],\n            \"person\": \"Joseph\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_time.strftime(\"%H:%M\"),\n        })\n        current_time = meeting_time\n\n    # Meet Karen next\n    if current_time < datetime.strptime(\"14:30\", \"%H:%M\"):\n        current_time = datetime.strptime(\"14:30\", \"%H:%M\")  # Wait until 14:30\n    meeting_time = can_meet(\"Karen\", current_time, current_time)\n    if meeting_time:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meetings[\"Karen\"][\"location\"],\n            \"person\": \"Karen\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_time.strftime(\"%H:%M\"),\n        })\n        current_time = meeting_time\n\n    # Meet Kimberly next\n    meeting_time = can_meet(\"Kimberly\", current_time, current_time)\n    if meeting_time:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meetings[\"Kimberly\"][\"location\"],\n            \"person\": \"Kimberly\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_time.strftime(\"%H:%M\"),\n        })\n        current_time = meeting_time\n\n    # Finally, meet Laura at The Castro\n    if current_time < datetime.strptime(\"19:45\", \"%H:%M\"):\n        current_time = datetime.strptime(\"19:45\", \"%H:%M\")  # Wait until Laura is available\n    meeting_time = can_meet(\"Laura\", current_time, current_time)\n    if meeting_time:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meetings[\"Laura\"][\"location\"],\n            \"person\": \"Laura\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_time.strftime(\"%H:%M\"),\n        })\n        current_time = meeting_time\n\n    # Meet Daniel last if time allows\n    if current_time < datetime.strptime(\"21:15\", \"%H:%M\"):\n        current_time = datetime.strptime(\"21:15\", \"%H:%M\")  # Wait until Daniel is available\n    meeting_time = can_meet(\"Daniel\", current_time, current_time)\n    if meeting_time:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meetings[\"Daniel\"][\"location\"],\n            \"person\": \"Daniel\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_time.strftime(\"%H:%M\"),\n        })\n\nschedule_meetings()\n\n# Output the final itinerary in JSON format\noutput = {\"itinerary\": itinerary}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_604"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Barbara",
                        "start_time": "13:15",
                        "end_time": "14:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Barbara",
                        "start_time": "13:15",
                        "end_time": "14:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants for travel distances\nTRAVEL_TIME_RH_TO_RD = 14  # minutes\nTRAVEL_TIME_RD_TO_RH = 13  # minutes\n\n# Meeting constraints\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\nbarbara_start_time = datetime.strptime(\"13:15\", \"%H:%M\")\nbarbara_end_time = datetime.strptime(\"18:15\", \"%H:%M\")\nminimum_meeting_duration = timedelta(minutes=45)\n\n# Function to calculate the meeting schedule\ndef compute_meeting_schedule():\n    # Calculate possible meeting time window\n    meeting_start_time = max(barbara_start_time, arrival_time + timedelta(minutes=TRAVEL_TIME_RH_TO_RD))\n    meeting_end_time = barbara_end_time - minimum_meeting_duration\n    \n    # Check if meeting is possible within the constraints\n    if meeting_start_time + minimum_meeting_duration > meeting_end_time:\n        return None  # No feasible time for the meeting\n    \n    # Schedule the meeting\n    actual_meeting_start_time = meeting_start_time\n    actual_meeting_end_time = actual_meeting_start_time + minimum_meeting_duration\n    \n    itinerary = [\n        {\n            \"action\": \"meet\",\n            \"location\": \"Richmond District\",\n            \"person\": \"Barbara\",\n            \"start_time\": actual_meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": actual_meeting_end_time.strftime(\"%H:%M\"),\n        }\n    ]\n    \n    return {\"itinerary\": itinerary}\n\n# Compute the schedule\nschedule = compute_meeting_schedule()\n\n# Print the output in JSON format\nif schedule is not None:\n    print(json.dumps(schedule, indent=4))\nelse:\n    print(json.dumps({\"itinerary\": []}, indent=4))\n```",
            "count": "meeting_planning_example_52"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Barbara",
                        "start_time": "9:23",
                        "end_time": "10:08"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kenneth",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kenneth",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Barbara",
                        "start_time": "13:53",
                        "end_time": "14:38"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    (\"Financial District\", \"Chinatown\"): 5,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"Chinatown\", \"Financial District\"): 5,\n    (\"Chinatown\", \"Golden Gate Park\"): 23,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Golden Gate Park\", \"Chinatown\"): 23,\n}\n\n# Meeting constraints\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\nkenneth_start = datetime.strptime(\"12:00\", \"%H:%M\")\nkenneth_end = datetime.strptime(\"15:00\", \"%H:%M\")\nbarbara_start = datetime.strptime(\"08:15\", \"%H:%M\")\nbarbara_end = datetime.strptime(\"19:00\", \"%H:%M\")\n\n# Meeting duration requirements\nkenneth_meet_duration = timedelta(minutes=90)\nbarbara_meet_duration = timedelta(minutes=45)\n\n# Schedule\nitinerary = []\n\n# Helper function to schedule a meeting\ndef schedule_meeting(person, location, start_time, duration):\n    end_time = start_time + duration\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": start_time.strftime(\"%H:%M\"),\n        \"end_time\": end_time.strftime(\"%H:%M\"),\n    })\n    return end_time\n\n# Visit Barbara first\n# Travel from Financial District to Golden Gate Park\ndeparture_time = arrival_time + timedelta(minutes=travel_times[(\"Financial District\", \"Golden Gate Park\")])\nif departure_time < barbara_start:\n    departure_time = barbara_start\n\n# Meeting with Barbara\nend_time_barbara = schedule_meeting(\"Barbara\", \"Golden Gate Park\", departure_time, barbara_meet_duration)\n\n# After meeting Barbara, travel to Chinatown\n# Travel from Golden Gate Park to Chinatown\ndeparture_time = end_time_barbara + timedelta(minutes=travel_times[(\"Golden Gate Park\", \"Chinatown\")])\n\n# Meeting with Kenneth\nif departure_time < kenneth_start:\n    departure_time = kenneth_start\nend_time_kenneth = schedule_meeting(\"Kenneth\", \"Chinatown\", departure_time, kenneth_meet_duration)\n\n# Convert the itinerary to JSON format\noutput = {\n    \"itinerary\": itinerary\n}\n\n# Print the JSON output\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_137"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Nancy",
                        "start_time": "9:00",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Stephanie",
                        "start_time": "10:46",
                        "end_time": "12:01"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "David",
                        "start_time": "12:14",
                        "end_time": "14:14"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Brian",
                        "start_time": "14:31",
                        "end_time": "16:16"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Robert",
                        "start_time": "16:30",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "James",
                        "start_time": "15:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Sarah",
                        "start_time": "17:00",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "17:30",
                        "end_time": "17:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Nancy",
                        "start_time": "9:16",
                        "end_time": "10:46"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Stephanie",
                        "start_time": "10:59",
                        "end_time": "12:14"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Elizabeth",
                        "start_time": "12:33",
                        "end_time": "13:33"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Robert",
                        "start_time": "13:42",
                        "end_time": "14:27"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Melissa",
                        "start_time": "14:48",
                        "end_time": "15:18"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "James",
                        "start_time": "15:25",
                        "end_time": "17:25"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Sarah",
                        "start_time": "17:37",
                        "end_time": "18:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel times (in minutes) represented as a dictionary of dictionaries\ntravel_times = {\n    \"The Castro\": {\n        \"North Beach\": 20,\n        \"Golden Gate Park\": 11,\n        \"Embarcadero\": 22,\n        \"Haight-Ashbury\": 6,\n        \"Richmond District\": 16,\n        \"Nob Hill\": 16,\n        \"Marina District\": 21,\n        \"Presidio\": 20,\n        \"Union Square\": 19,\n        \"Financial District\": 21,\n    },\n    \"North Beach\": {\n        \"The Castro\": 23,\n        \"Golden Gate Park\": 22,\n        \"Embarcadero\": 6,\n        \"Haight-Ashbury\": 18,\n        \"Richmond District\": 18,\n        \"Nob Hill\": 7,\n        \"Marina District\": 9,\n        \"Presidio\": 17,\n        \"Union Square\": 7,\n        \"Financial District\": 8,\n    },\n    \"Golden Gate Park\": {\n        \"The Castro\": 13,\n        \"North Beach\": 23,\n        \"Embarcadero\": 25,\n        \"Haight-Ashbury\": 7,\n        \"Richmond District\": 7,\n        \"Nob Hill\": 20,\n        \"Marina District\": 16,\n        \"Presidio\": 11,\n        \"Union Square\": 22,\n        \"Financial District\": 26,\n    },\n    \"Embarcadero\": {\n        \"The Castro\": 25,\n        \"North Beach\": 5,\n        \"Golden Gate Park\": 25,\n        \"Haight-Ashbury\": 21,\n        \"Richmond District\": 21,\n        \"Nob Hill\": 10,\n        \"Marina District\": 12,\n        \"Presidio\": 20,\n        \"Union Square\": 10,\n        \"Financial District\": 5,\n    },\n    \"Haight-Ashbury\": {\n        \"The Castro\": 6,\n        \"North Beach\": 19,\n        \"Golden Gate Park\": 7,\n        \"Embarcadero\": 20,\n        \"Richmond District\": 10,\n        \"Nob Hill\": 15,\n        \"Marina District\": 17,\n        \"Presidio\": 15,\n        \"Union Square\": 19,\n        \"Financial District\": 21,\n    },\n    \"Richmond District\": {\n        \"The Castro\": 16,\n        \"North Beach\": 17,\n        \"Golden Gate Park\": 9,\n        \"Embarcadero\": 19,\n        \"Haight-Ashbury\": 10,\n        \"Nob Hill\": 17,\n        \"Marina District\": 9,\n        \"Presidio\": 7,\n        \"Union Square\": 21,\n        \"Financial District\": 22,\n    },\n    \"Nob Hill\": {\n        \"The Castro\": 17,\n        \"North Beach\": 8,\n        \"Golden Gate Park\": 17,\n        \"Embarcadero\": 9,\n        \"Haight-Ashbury\": 13,\n        \"Richmond District\": 14,\n        \"Marina District\": 11,\n        \"Presidio\": 17,\n        \"Union Square\": 7,\n        \"Financial District\": 9,\n    },\n    \"Marina District\": {\n        \"The Castro\": 22,\n        \"North Beach\": 11,\n        \"Golden Gate Park\": 18,\n        \"Embarcadero\": 14,\n        \"Haight-Ashbury\": 16,\n        \"Richmond District\": 11,\n        \"Nob Hill\": 12,\n        \"Presidio\": 10,\n        \"Union Square\": 16,\n        \"Financial District\": 17,\n    },\n    \"Presidio\": {\n        \"The Castro\": 21,\n        \"North Beach\": 18,\n        \"Golden Gate Park\": 12,\n        \"Embarcadero\": 20,\n        \"Haight-Ashbury\": 15,\n        \"Richmond District\": 7,\n        \"Nob Hill\": 18,\n        \"Marina District\": 11,\n        \"Union Square\": 22,\n        \"Financial District\": 23,\n    },\n    \"Union Square\": {\n        \"The Castro\": 17,\n        \"North Beach\": 10,\n        \"Golden Gate Park\": 22,\n        \"Embarcadero\": 11,\n        \"Haight-Ashbury\": 18,\n        \"Richmond District\": 20,\n        \"Nob Hill\": 9,\n        \"Marina District\": 18,\n        \"Presidio\": 24,\n        \"Financial District\": 9,\n    },\n    \"Financial District\": {\n        \"The Castro\": 20,\n        \"North Beach\": 7,\n        \"Golden Gate Park\": 23,\n        \"Embarcadero\": 4,\n        \"Haight-Ashbury\": 19,\n        \"Richmond District\": 21,\n        \"Nob Hill\": 8,\n        \"Marina District\": 15,\n        \"Presidio\": 22,\n        \"Union Square\": 9,\n    },\n}\n\n# Schedule constraints\nconstraints = {\n    \"Steven\": {\n        \"location\": \"North Beach\",\n        \"start\": \"17:30\",\n        \"end\": \"20:30\",\n        \"duration\": 15,\n    },\n    \"Sarah\": {\n        \"location\": \"Golden Gate Park\",\n        \"start\": \"17:00\",\n        \"end\": \"19:15\",\n        \"duration\": 75,\n    },\n    \"Brian\": {\n        \"location\": \"Embarcadero\",\n        \"start\": \"14:15\",\n        \"end\": \"16:00\",\n        \"duration\": 105,\n    },\n    \"Stephanie\": {\n        \"location\": \"Haight-Ashbury\",\n        \"start\": \"10:15\",\n        \"end\": \"12:15\",\n        \"duration\": 75,\n    },\n    \"Melissa\": {\n        \"location\": \"Richmond District\",\n        \"start\": \"14:00\",\n        \"end\": \"19:30\",\n        \"duration\": 30,\n    },\n    \"Nancy\": {\n        \"location\": \"Nob Hill\",\n        \"start\": \"08:15\",\n        \"end\": \"12:45\",\n        \"duration\": 90,\n    },\n    \"David\": {\n        \"location\": \"Marina District\",\n        \"start\": \"11:15\",\n        \"end\": \"13:15\",\n        \"duration\": 120,\n    },\n    \"James\": {\n        \"location\": \"Presidio\",\n        \"start\": \"15:00\",\n        \"end\": \"18:15\",\n        \"duration\": 120,\n    },\n    \"Elizabeth\": {\n        \"location\": \"Union Square\",\n        \"start\": \"11:30\",\n        \"end\": \"21:00\",\n        \"duration\": 60,\n    },\n    \"Robert\": {\n        \"location\": \"Financial District\",\n        \"start\": \"13:15\",\n        \"end\": \"15:15\",\n        \"duration\": 45,\n    },\n}\n\n# Function to convert time string to a datetime object\ndef time_to_datetime(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Function to convert datetime object to a time string\ndef datetime_to_time(dt):\n    return dt.strftime(\"%H:%M\")\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    current_time = time_to_datetime(\"9:00\")\n    itinerary = []\n\n    # Meeting with Nancy\n    nancy_end_time = current_time + timedelta(minutes=90)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"person\": \"Nancy\",\n        \"start_time\": datetime_to_time(current_time),\n        \"end_time\": datetime_to_time(nancy_end_time),\n    })\n    current_time = nancy_end_time + timedelta(minutes=travel_times[\"The Castro\"][\"Nob Hill\"])\n\n    # Meeting with Stephanie\n    stephanie_end_time = current_time + timedelta(minutes=75)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"person\": \"Stephanie\",\n        \"start_time\": datetime_to_time(current_time),\n        \"end_time\": datetime_to_time(stephanie_end_time),\n    })\n    current_time = stephanie_end_time + timedelta(minutes=travel_times[\"Nob Hill\"][\"Haight-Ashbury\"])\n\n    # Meeting with David\n    david_end_time = current_time + timedelta(minutes=120)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"person\": \"David\",\n        \"start_time\": datetime_to_time(current_time),\n        \"end_time\": datetime_to_time(david_end_time),\n    })\n    current_time = david_end_time + timedelta(minutes=travel_times[\"Haight-Ashbury\"][\"Marina District\"])\n\n    # Meeting with Brian\n    brian_end_time = current_time + timedelta(minutes=105)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"person\": \"Brian\",\n        \"start_time\": datetime_to_time(current_time),\n        \"end_time\": datetime_to_time(brian_end_time),\n    })\n    current_time = brian_end_time + timedelta(minutes=travel_times[\"Marina District\"][\"Embarcadero\"])\n\n    # Meeting with Robert\n    robert_end_time = current_time + timedelta(minutes=45)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"person\": \"Robert\",\n        \"start_time\": datetime_to_time(current_time),\n        \"end_time\": datetime_to_time(robert_end_time),\n    })\n    current_time = robert_end_time + timedelta(minutes=travel_times[\"Embarcadero\"][\"Financial District\"])\n\n    # Meeting with James\n    # Arrive at Presidio by 15:00\n    current_time = time_to_datetime(\"15:00\")\n    james_end_time = current_time + timedelta(minutes=120)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"person\": \"James\",\n        \"start_time\": datetime_to_time(current_time),\n        \"end_time\": datetime_to_time(james_end_time),\n    })\n    current_time = james_end_time + timedelta(minutes=travel_times[\"Presidio\"][\"Financial District\"])\n\n    # Meeting with Sarah\n    current_time = time_to_datetime(\"17:00\")\n    sarah_end_time = current_time + timedelta(minutes=75)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"person\": \"Sarah\",\n        \"start_time\": datetime_to_time(current_time),\n        \"end_time\": datetime_to_time(sarah_end_time),\n    })\n    current_time = sarah_end_time + timedelta(minutes=travel_times[\"Golden Gate Park\"][\"Nob Hill\"])\n\n    # Meeting with Steven\n    current_time = time_to_datetime(\"17:30\")\n    steven_end_time = current_time + timedelta(minutes=15)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"person\": \"Steven\",\n        \"start_time\": datetime_to_time(current_time),\n        \"end_time\": datetime_to_time(steven_end_time),\n    })\n\n    return {\"itinerary\": itinerary}\n\n# Find the optimal schedule\noptimal_schedule = find_optimal_schedule()\n\n# Output the result in JSON format\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_911"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "19:00",
                        "end_time": "19:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jeffrey",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Deborah",
                        "start_time": "13:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Margaret",
                        "start_time": "16:30",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Ronald",
                        "start_time": "18:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "19:33",
                        "end_time": "19:48"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel times between locations (in minutes)\ntravel_times = {\n    (\"Nob Hill\", \"Richmond District\"): 14,\n    (\"Nob Hill\", \"Financial District\"): 9,\n    (\"Nob Hill\", \"North Beach\"): 8,\n    (\"Nob Hill\", \"The Castro\"): 17,\n    (\"Nob Hill\", \"Golden Gate Park\"): 17,\n    (\"Richmond District\", \"Nob Hill\"): 17,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"North Beach\"): 17,\n    (\"Richmond District\", \"The Castro\"): 16,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Financial District\", \"Nob Hill\"): 8,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Financial District\", \"North Beach\"): 7,\n    (\"Financial District\", \"The Castro\"): 23,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"North Beach\", \"Nob Hill\"): 7,\n    (\"North Beach\", \"Richmond District\"): 18,\n    (\"North Beach\", \"Financial District\"): 8,\n    (\"North Beach\", \"The Castro\"): 22,\n    (\"North Beach\", \"Golden Gate Park\"): 22,\n    (\"The Castro\", \"Nob Hill\"): 16,\n    (\"The Castro\", \"Richmond District\"): 16,\n    (\"The Castro\", \"Financial District\"): 20,\n    (\"The Castro\", \"North Beach\"): 20,\n    (\"The Castro\", \"Golden Gate Park\"): 11,\n    (\"Golden Gate Park\", \"Nob Hill\"): 20,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Golden Gate Park\", \"North Beach\"): 24,\n    (\"Golden Gate Park\", \"The Castro\"): 13,\n}\n\n# Meeting constraints\nmeetings = [\n    {\"person\": \"Emily\", \"location\": \"Richmond District\", \"min_duration\": 15, \"available_from\": \"19:00\", \"available_to\": \"21:00\"},\n    {\"person\": \"Margaret\", \"location\": \"Financial District\", \"min_duration\": 75, \"available_from\": \"16:30\", \"available_to\": \"20:15\"},\n    {\"person\": \"Ronald\", \"location\": \"North Beach\", \"min_duration\": 45, \"available_from\": \"18:30\", \"available_to\": \"19:30\"},\n    {\"person\": \"Deborah\", \"location\": \"The Castro\", \"min_duration\": 90, \"available_from\": \"13:45\", \"available_to\": \"21:15\"},\n    {\"person\": \"Jeffrey\", \"location\": \"Golden Gate Park\", \"min_duration\": 120, \"available_from\": \"11:15\", \"available_to\": \"14:30\"},\n]\n\n# Start time at Nob Hill\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Store the final itinerary\nitinerary = []\n\n# Function to schedule meetings\ndef schedule_meetings(itinerary, start_time, meetings):\n    current_time = start_time\n    for meeting in meetings:\n        available_from = datetime.strptime(meeting['available_from'], \"%H:%M\")\n        available_to = datetime.strptime(meeting['available_to'], \"%H:%M\")\n        duration = timedelta(minutes=meeting['min_duration'])\n        \n        # Calculate the travel time to the meeting location\n        travel_time = travel_times.get((\"Nob Hill\", meeting['location']), 0)\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        \n        # Check if we can meet this person\n        if arrival_time < available_from:\n            arrival_time = available_from\n        \n        meeting_end_time = arrival_time + duration\n        travel_back_time = travel_times.get((meeting['location'], \"Nob Hill\"), 0)\n        \n        # Check if the meeting can fit into the available window\n        if meeting_end_time <= available_to and arrival_time < available_to:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": meeting['location'],\n                \"person\": meeting['person'],\n                \"start_time\": arrival_time.strftime(\"%H:%M\"),\n                \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n            })\n            # Update current time after returning to Nob Hill\n            current_time = meeting_end_time + timedelta(minutes=travel_back_time)\n\n# Schedule the meetings\nschedule_meetings(itinerary, start_time, meetings)\n\n# Output the itinerary in JSON format\noutput = {\"itinerary\": itinerary}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_433"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "9:13",
                        "end_time": "10:28"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "David",
                        "start_time": "10:51",
                        "end_time": "11:06"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Robert",
                        "start_time": "12:15",
                        "end_time": "13:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "David",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "11:12",
                        "end_time": "12:27"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Robert",
                        "start_time": "12:42",
                        "end_time": "14:12"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times (in minutes)\ntravel_times = {\n    (\"Financial District\", \"Fisherman's Wharf\"): 10,\n    (\"Financial District\", \"Pacific Heights\"): 13,\n    (\"Financial District\", \"Mission District\"): 17,\n    (\"Fisherman's Wharf\", \"Financial District\"): 11,\n    (\"Fisherman's Wharf\", \"Pacific Heights\"): 12,\n    (\"Fisherman's Wharf\", \"Mission District\"): 22,\n    (\"Pacific Heights\", \"Financial District\"): 13,\n    (\"Pacific Heights\", \"Fisherman's Wharf\"): 13,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"Mission District\", \"Financial District\"): 17,\n    (\"Mission District\", \"Fisherman's Wharf\"): 22,\n    (\"Mission District\", \"Pacific Heights\"): 16,\n}\n\n# Define constraints\nconstraints = {\n    \"David\": {\"location\": \"Fisherman's Wharf\", \"start\": \"10:45\", \"end\": \"15:30\", \"duration\": 15},\n    \"Timothy\": {\"location\": \"Pacific Heights\", \"start\": \"9:00\", \"end\": \"15:30\", \"duration\": 75},\n    \"Robert\": {\"location\": \"Mission District\", \"start\": \"12:15\", \"end\": \"19:45\", \"duration\": 90},\n}\n\n# Convert time strings to datetime objects for easier manipulation\ndef str_to_time(s):\n    return datetime.strptime(s, '%H:%M')\n\n# Travel and meeting scheduling logic\ndef compute_schedule():\n    itinerary = []\n    \n    # Start at Financial District at 9:00\n    current_time = str_to_time(\"9:00\")\n    \n    # Meet Timothy at Pacific Heights\n    travel_time = travel_times[(\"Financial District\", \"Pacific Heights\")]\n    arrive_time = current_time + timedelta(minutes=travel_time)\n    \n    if arrive_time <= str_to_time(constraints[\"Timothy\"][\"end\"]):\n        meeting_start = max(arrive_time, str_to_time(constraints[\"Timothy\"][\"start\"]))\n        meeting_end = meeting_start + timedelta(minutes=constraints[\"Timothy\"][\"duration\"])\n        \n        if meeting_end <= str_to_time(constraints[\"Timothy\"][\"end\"]):\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": constraints[\"Timothy\"][\"location\"],\n                \"person\": \"Timothy\",\n                \"start_time\": meeting_start.strftime('%H:%M'),\n                \"end_time\": meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end + timedelta(minutes=travel_time)  # Travel time back\n    \n    # Meet David at Fisherman's Wharf\n    travel_time = travel_times[(\"Financial District\", \"Fisherman's Wharf\")]\n    arrive_time = current_time + timedelta(minutes=travel_time)\n    \n    if arrive_time <= str_to_time(constraints[\"David\"][\"end\"]):\n        meeting_start = max(arrive_time, str_to_time(constraints[\"David\"][\"start\"]))\n        meeting_end = meeting_start + timedelta(minutes=constraints[\"David\"][\"duration\"])\n        \n        if meeting_end <= str_to_time(constraints[\"David\"][\"end\"]):\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": constraints[\"David\"][\"location\"],\n                \"person\": \"David\",\n                \"start_time\": meeting_start.strftime('%H:%M'),\n                \"end_time\": meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end + timedelta(minutes=travel_time)  # Travel time back\n    \n    # Meet Robert at Mission District\n    travel_time = travel_times[(\"Financial District\", \"Mission District\")]\n    arrive_time = current_time + timedelta(minutes=travel_time)\n\n    if arrive_time <= str_to_time(constraints[\"Robert\"][\"end\"]):\n        meeting_start = max(arrive_time, str_to_time(constraints[\"Robert\"][\"start\"]))\n        meeting_end = meeting_start + timedelta(minutes=constraints[\"Robert\"][\"duration\"])\n\n        if meeting_end <= str_to_time(constraints[\"Robert\"][\"end\"]):\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": constraints[\"Robert\"][\"location\"],\n                \"person\": \"Robert\",\n                \"start_time\": meeting_start.strftime('%H:%M'),\n                \"end_time\": meeting_end.strftime('%H:%M')\n            })\n    \n    return {\"itinerary\": itinerary}\n\n# Execute the meeting schedule computation\nschedule = compute_schedule()\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_203"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "9:25",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "9:25",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel times between locations in minutes\ntravel_times = {\n    (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n    (\"Fisherman's Wharf\", \"Presidio\"): 17,\n    (\"Fisherman's Wharf\", \"Richmond District\"): 18,\n    (\"Golden Gate Park\", \"Fisherman's Wharf\"): 24,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Richmond District\", \"Fisherman's Wharf\"): 18,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Richmond District\", \"Presidio\"): 7,\n}\n\n# Constraints for meeting\nfriends = {\n    \"Melissa\": {\n        \"location\": \"Golden Gate Park\",\n        \"start\": \"08:30\",\n        \"end\": \"20:00\",\n        \"min_duration\": 15\n    },\n    \"Nancy\": {\n        \"location\": \"Presidio\",\n        \"start\": \"19:45\",\n        \"end\": \"22:00\",\n        \"min_duration\": 105\n    },\n    \"Emily\": {\n        \"location\": \"Richmond District\",\n        \"start\": \"16:45\",\n        \"end\": \"22:00\",\n        \"min_duration\": 120\n    }\n}\n\narrival_time = \"09:00\"\narrival_datetime = datetime.strptime(arrival_time, \"%H:%M\")\n\n# Find the optimal schedule\nitinerary = []\n\n# Meeting with Melissa\nmelissa_start = max(arrival_datetime + timedelta(minutes=travel_times[(\"Fisherman's Wharf\", \"Golden Gate Park\")]), \n                    datetime.strptime(friends[\"Melissa\"][\"start\"], \"%H:%M\"))\nmelissa_end = melissa_start + timedelta(minutes=friends[\"Melissa\"][\"min_duration\"])\n\nif melissa_end <= datetime.strptime(friends[\"Melissa\"][\"end\"], \"%H:%M\"):\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"person\": \"Melissa\",\n        \"start_time\": melissa_start.strftime(\"%H:%M\"),\n        \"end_time\": melissa_end.strftime(\"%H:%M\")\n    })\n\n# Meeting with Emily\ntravel_time_to_emily = travel_times[(\"Fisherman's Wharf\", \"Richmond District\")]\ndeparture_after_melissa = melissa_end + timedelta(minutes=travel_time_to_emily)\nemily_start = max(departure_after_melissa, \n                  datetime.strptime(friends[\"Emily\"][\"start\"], \"%H:%M\"))\nemily_end = emily_start + timedelta(minutes=friends[\"Emily\"][\"min_duration\"])\n\nif emily_end <= datetime.strptime(friends[\"Emily\"][\"end\"], \"%H:%M\"):\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"person\": \"Emily\",\n        \"start_time\": emily_start.strftime(\"%H:%M\"),\n        \"end_time\": emily_end.strftime(\"%H:%M\")\n    })\n\n# Meeting with Nancy\ntravel_time_to_nancy = travel_times[(\"Richmond District\", \"Presidio\")]\ndeparture_after_emily = emily_end + timedelta(minutes=travel_time_to_nancy)\nnancy_start = max(departure_after_emily, \n                  datetime.strptime(friends[\"Nancy\"][\"start\"], \"%H:%M\"))\nnancy_end = nancy_start + timedelta(minutes=friends[\"Nancy\"][\"min_duration\"])\n\nif nancy_end <= datetime.strptime(friends[\"Nancy\"][\"end\"], \"%H:%M\"):\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"person\": \"Nancy\",\n        \"start_time\": nancy_start.strftime(\"%H:%M\"),\n        \"end_time\": nancy_end.strftime(\"%H:%M\")\n    })\n\n# Output the itinerary in JSON format\noutput = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_224"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Elizabeth",
                        "start_time": "9:00",
                        "end_time": "9:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Joseph",
                        "start_time": "9:45",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joshua",
                        "start_time": "10:45",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "12:30",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Matthew",
                        "start_time": "14:30",
                        "end_time": "15:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Joseph",
                        "start_time": "9:15",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joshua",
                        "start_time": "11:04",
                        "end_time": "12:49"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jeffrey",
                        "start_time": "13:10",
                        "end_time": "14:25"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "14:43",
                        "end_time": "16:43"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Matthew",
                        "start_time": "17:05",
                        "end_time": "17:50"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Paul",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "19:41",
                        "end_time": "20:26"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict\n\nclass MeetingScheduler:\n    def __init__(self):\n        self.travel_times = {\n            ('Marina District', 'Embarcadero'): 14,\n            ('Marina District', 'Bayview'): 27,\n            ('Marina District', 'Union Square'): 16,\n            ('Marina District', 'Chinatown'): 15,\n            ('Marina District', 'Sunset District'): 19,\n            ('Marina District', 'Golden Gate Park'): 18,\n            ('Marina District', 'Financial District'): 17,\n            ('Marina District', 'Haight-Ashbury'): 16,\n            ('Marina District', 'Mission District'): 20,\n            ('Embarcadero', 'Marina District'): 12,\n            ('Embarcadero', 'Bayview'): 21,\n            ('Embarcadero', 'Union Square'): 10,\n            ('Embarcadero', 'Chinatown'): 7,\n            ('Embarcadero', 'Sunset District'): 30,\n            ('Embarcadero', 'Golden Gate Park'): 25,\n            ('Embarcadero', 'Financial District'): 5,\n            ('Embarcadero', 'Haight-Ashbury'): 21,\n            ('Embarcadero', 'Mission District'): 20,\n            ('Bayview', 'Marina District'): 27,\n            ('Bayview', 'Embarcadero'): 19,\n            ('Bayview', 'Union Square'): 18,\n            ('Bayview', 'Chinatown'): 19,\n            ('Bayview', 'Sunset District'): 23,\n            ('Bayview', 'Golden Gate Park'): 22,\n            ('Bayview', 'Financial District'): 19,\n            ('Bayview', 'Haight-Ashbury'): 19,\n            ('Bayview', 'Mission District'): 13,\n            ('Union Square', 'Marina District'): 18,\n            ('Union Square', 'Embarcadero'): 11,\n            ('Union Square', 'Bayview'): 15,\n            ('Union Square', 'Chinatown'): 7,\n            ('Union Square', 'Sunset District'): 27,\n            ('Union Square', 'Golden Gate Park'): 22,\n            ('Union Square', 'Financial District'): 9,\n            ('Union Square', 'Haight-Ashbury'): 18,\n            ('Union Square', 'Mission District'): 14,\n            ('Chinatown', 'Marina District'): 12,\n            ('Chinatown', 'Embarcadero'): 5,\n            ('Chinatown', 'Bayview'): 20,\n            ('Chinatown', 'Union Square'): 7,\n            ('Chinatown', 'Sunset District'): 29,\n            ('Chinatown', 'Golden Gate Park'): 23,\n            ('Chinatown', 'Financial District'): 5,\n            ('Chinatown', 'Haight-Ashbury'): 19,\n            ('Chinatown', 'Mission District'): 17,\n            ('Sunset District', 'Marina District'): 21,\n            ('Sunset District', 'Embarcadero'): 30,\n            ('Sunset District', 'Bayview'): 22,\n            ('Sunset District', 'Union Square'): 30,\n            ('Sunset District', 'Chinatown'): 30,\n            ('Sunset District', 'Golden Gate Park'): 11,\n            ('Sunset District', 'Financial District'): 30,\n            ('Sunset District', 'Haight-Ashbury'): 15,\n            ('Sunset District', 'Mission District'): 25,\n            ('Golden Gate Park', 'Marina District'): 16,\n            ('Golden Gate Park', 'Embarcadero'): 25,\n            ('Golden Gate Park', 'Bayview'): 23,\n            ('Golden Gate Park', 'Union Square'): 22,\n            ('Golden Gate Park', 'Chinatown'): 23,\n            ('Golden Gate Park', 'Sunset District'): 10,\n            ('Golden Gate Park', 'Financial District'): 26,\n            ('Golden Gate Park', 'Haight-Ashbury'): 7,\n            ('Golden Gate Park', 'Mission District'): 17,\n            ('Financial District', 'Marina District'): 15,\n            ('Financial District', 'Embarcadero'): 4,\n            ('Financial District', 'Bayview'): 19,\n            ('Financial District', 'Union Square'): 9,\n            ('Financial District', 'Chinatown'): 5,\n            ('Financial District', 'Sunset District'): 30,\n            ('Financial District', 'Golden Gate Park'): 23,\n            ('Financial District', 'Haight-Ashbury'): 19,\n            ('Financial District', 'Mission District'): 17,\n            ('Haight-Ashbury', 'Marina District'): 17,\n            ('Haight-Ashbury', 'Embarcadero'): 20,\n            ('Haight-Ashbury', 'Bayview'): 18,\n            ('Haight-Ashbury', 'Union Square'): 19,\n            ('Haight-Ashbury', 'Chinatown'): 19,\n            ('Haight-Ashbury', 'Sunset District'): 15,\n            ('Haight-Ashbury', 'Golden Gate Park'): 7,\n            ('Haight-Ashbury', 'Financial District'): 21,\n            ('Haight-Ashbury', 'Mission District'): 11,\n            ('Mission District', 'Marina District'): 19,\n            ('Mission District', 'Embarcadero'): 19,\n            ('Mission District', 'Bayview'): 14,\n            ('Mission District', 'Union Square'): 15,\n            ('Mission District', 'Chinatown'): 16,\n            ('Mission District', 'Sunset District'): 24,\n            ('Mission District', 'Golden Gate Park'): 17,\n            ('Mission District', 'Financial District'): 15,\n            ('Mission District', 'Haight-Ashbury'): 12,\n        }\n\n        self.meeting_requirements = {\n            \"Joshua\": {\"location\": \"Embarcadero\", \"min_time\": 105, \"available\": [datetime(2023,1,1,9,45), datetime(2023,1,1,18,0)]},\n            \"Jeffrey\": {\"location\": \"Bayview\", \"min_time\": 75, \"available\": [datetime(2023,1,1,9,45), datetime(2023,1,1,20,15)]},\n            \"Charles\": {\"location\": \"Union Square\", \"min_time\": 120, \"available\": [datetime(2023,1,1,10,45), datetime(2023,1,1,20,15)]},\n            \"Joseph\": {\"location\": \"Chinatown\", \"min_time\": 60, \"available\": [datetime(2023,1,1,7,0), datetime(2023,1,1,15,30)]},\n            \"Elizabeth\": {\"location\": \"Sunset District\", \"min_time\": 45, \"available\": [datetime(2023,1,1,9,0), datetime(2023,1,1,9,45)]},\n            \"Matthew\": {\"location\": \"Golden Gate Park\", \"min_time\": 45, \"available\": [datetime(2023,1,1,11,0), datetime(2023,1,1,19,30)]},\n            \"Carol\": {\"location\": \"Financial District\", \"min_time\": 15, \"available\": [datetime(2023,1,1,10,45), datetime(2023,1,1,11,15)]},\n            \"Paul\": {\"location\": \"Haight-Ashbury\", \"min_time\": 15, \"available\": [datetime(2023,1,1,19,15), datetime(2023,1,1,20,30)]},\n            \"Rebecca\": {\"location\": \"Mission District\", \"min_time\": 45, \"available\": [datetime(2023,1,1,17,0), datetime(2023,1,1,21,15)]},\n        }\n        \n        self.init_times()\n\n    def init_times(self):\n        self.start_time = datetime(2023, 1, 1, 9, 0)\n        self.itinerary = []\n    \n    def add_meeting(self, person, start, duration):\n        location = self.meeting_requirements[person][\"location\"]\n        end = start + timedelta(minutes=duration)\n        self.itinerary.append({\n            \"action\": \"meet\",\n            \"location\": location,\n            \"person\": person,\n            \"start_time\": start.strftime(\"%H:%M\"),\n            \"end_time\": end.strftime(\"%H:%M\"),\n        })\n    \n    def can_meet(self, person, start, duration):\n        end = start + timedelta(minutes=duration)\n        available_start, available_end = self.meeting_requirements[person][\"available\"]\n        return (available_start <= start <= available_end) and (available_start <= end <= available_end)\n\n    def schedule_meetings(self):\n        current_time = self.start_time\n        locations_visited = set()\n        \n        # Meet Elizabeth first because time is limited\n        if self.can_meet(\"Elizabeth\", current_time, 45):\n            self.add_meeting(\"Elizabeth\", current_time, 45)\n            current_time += timedelta(minutes=45)\n\n        # Meet Joseph\n        if self.can_meet(\"Joseph\", current_time, 60):\n            self.add_meeting(\"Joseph\", current_time, 60)\n            current_time += timedelta(minutes=60)\n\n        # Meet Joshua\n        if self.can_meet(\"Joshua\", current_time, 105):\n            self.add_meeting(\"Joshua\", current_time, 105)\n            current_time += timedelta(minutes=105)\n\n        # Meet Carol\n        if self.can_meet(\"Carol\", current_time, 15):\n            self.add_meeting(\"Carol\", current_time, 15)\n            current_time += timedelta(minutes=15)\n\n        # Meet Charles\n        if self.can_meet(\"Charles\", current_time, 120):\n            self.add_meeting(\"Charles\", current_time, 120)\n            current_time += timedelta(minutes=120)\n\n        # Meet Matthew\n        if self.can_meet(\"Matthew\", current_time, 45):\n            self.add_meeting(\"Matthew\", current_time, 45)\n            current_time += timedelta(minutes=45)\n\n        # Meet Rebecca\n        if self.can_meet(\"Rebecca\", current_time, 45):\n            self.add_meeting(\"Rebecca\", current_time, 45)\n            current_time += timedelta(minutes=45)\n\n        # Meet Paul\n        if self.can_meet(\"Paul\", current_time, 15):\n            self.add_meeting(\"Paul\", current_time, 15)\n\n        # Print output in the required JSON format\n        print(json.dumps({\"itinerary\": self.itinerary}, indent=2))\n\nif __name__ == '__main__':\n    scheduler = MeetingScheduler()\n    scheduler.schedule_meetings()\n```",
            "count": "meeting_planning_example_813"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Emily",
                        "start_time": "16:00",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "19:00",
                        "end_time": "21:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Emily",
                        "start_time": "16:00",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "19:00",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting constraints and travel times\narrival_time = datetime.strptime('9:00', '%H:%M')\nemily_start = datetime.strptime('16:00', '%H:%M')\nemily_end = datetime.strptime('17:15', '%H:%M')\nmargaret_start = datetime.strptime('19:00', '%H:%M')\nmargaret_end = datetime.strptime('21:00', '%H:%M')\n\nrequired_emily_duration = timedelta(minutes=45)\nrequired_margaret_duration = timedelta(minutes=120)\n\n# Travel distances in minutes\ntravel_times = {\n    (\"North Beach\", \"Union Square\"): 7,\n    (\"North Beach\", \"Russian Hill\"): 4,\n    (\"Union Square\", \"North Beach\"): 10,\n    (\"Union Square\", \"Russian Hill\"): 13,\n    (\"Russian Hill\", \"North Beach\"): 5,\n    (\"Russian Hill\", \"Union Square\"): 11,\n}\n\ndef calculate_meeting_schedule():\n    itinerary = []\n\n    # First, meeting Emily at Union Square\n    travel_to_emily = travel_times[(\"North Beach\", \"Union Square\")]\n    meet_start = max(arrival_time + timedelta(minutes=travel_to_emily), emily_start)\n    meet_end = meet_start + required_emily_duration\n\n    if meet_end <= emily_end:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Union Square\",\n            \"person\": \"Emily\",\n            \"start_time\": meet_start.strftime(\"%H:%M\"),\n            \"end_time\": meet_end.strftime(\"%H:%M\")\n        })\n\n        # Travel to Margaret at Russian Hill\n        travel_to_margaret = travel_times[(\"Union Square\", \"Russian Hill\")]\n        departure_to_margaret = meet_end + timedelta(minutes=travel_to_margaret)\n\n        # Meeting Margaret at Russian Hill\n        if departure_to_margaret < margaret_start:\n            departure_to_margaret = margaret_start  # Wait if necessary\n\n        meet_start_margaret = departure_to_margaret\n        meet_end_margaret = meet_start_margaret + required_margaret_duration\n        \n        if meet_end_margaret <= margaret_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Russian Hill\",\n                \"person\": \"Margaret\",\n                \"start_time\": meet_start_margaret.strftime(\"%H:%M\"),\n                \"end_time\": meet_end_margaret.strftime(\"%H:%M\")\n            })\n\n    return {\"itinerary\": itinerary}\n\n# Calculate and output the optimal meeting schedule\noptimal_schedule = calculate_meeting_schedule()\noutput_json = json.dumps(optimal_schedule, indent=2)\nprint(output_json)\n```",
            "count": "meeting_planning_example_170"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Laura",
                        "start_time": "9:14",
                        "end_time": "10:59"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Charles",
                        "start_time": "11:30",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Margaret",
                        "start_time": "14:15",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Rebecca",
                        "start_time": "16:24",
                        "end_time": "17:54"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Melissa",
                        "start_time": "17:59",
                        "end_time": "18:29"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Patricia",
                        "start_time": "18:46",
                        "end_time": "19:31"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Robert",
                        "start_time": "19:46",
                        "end_time": "20:16"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Karen",
                        "start_time": "20:28",
                        "end_time": "21:28"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    'Marina District': {\n        'Bayview': 27, 'Sunset District': 19, 'Richmond District': 11, \n        'Nob Hill': 12, 'Chinatown': 15, 'Haight-Ashbury': 16, \n        'North Beach': 11, 'Russian Hill': 8, 'Embarcadero': 14\n    },\n    'Bayview': {\n        'Marina District': 27, 'Sunset District': 23, 'Richmond District': 25, \n        'Nob Hill': 20, 'Chinatown': 19, 'Haight-Ashbury': 19, \n        'North Beach': 22, 'Russian Hill': 23, 'Embarcadero': 19\n    },\n    'Sunset District': {\n        'Marina District': 21, 'Bayview': 22, 'Richmond District': 12, \n        'Nob Hill': 27, 'Chinatown': 30, 'Haight-Ashbury': 15, \n        'North Beach': 28, 'Russian Hill': 24, 'Embarcadero': 30\n    },\n    'Richmond District': {\n        'Marina District': 9, 'Bayview': 27, 'Sunset District': 11, \n        'Nob Hill': 17, 'Chinatown': 20, 'Haight-Ashbury': 10, \n        'North Beach': 17, 'Russian Hill': 13, 'Embarcadero': 19\n    },\n    'Nob Hill': {\n        'Marina District': 11, 'Bayview': 19, 'Sunset District': 24, \n        'Richmond District': 14, 'Chinatown': 9, 'Haight-Ashbury': 13, \n        'North Beach': 8, 'Russian Hill': 5, 'Embarcadero': 9\n    },\n    'Chinatown': {\n        'Marina District': 12, 'Bayview': 20, 'Sunset District': 29, \n        'Richmond District': 20, 'Nob Hill': 9, 'Haight-Ashbury': 19, \n        'North Beach': 3, 'Russian Hill': 7, 'Embarcadero': 5\n    },\n    'Haight-Ashbury': {\n        'Marina District': 17, 'Bayview': 18, 'Sunset District': 15, \n        'Richmond District': 10, 'Nob Hill': 15, 'Chinatown': 19, \n        'North Beach': 19, 'Russian Hill': 17, 'Embarcadero': 20\n    },\n    'North Beach': {\n        'Marina District': 9, 'Bayview': 25, 'Sunset District': 27, \n        'Richmond District': 18, 'Nob Hill': 7, 'Chinatown': 6, \n        'Haight-Ashbury': 18, 'Russian Hill': 4, 'Embarcadero': 6\n    },\n    'Russian Hill': {\n        'Marina District': 7, 'Bayview': 23, 'Sunset District': 23, \n        'Richmond District': 14, 'Nob Hill': 5, 'Chinatown': 9, \n        'Haight-Ashbury': 17, 'North Beach': 5, 'Embarcadero': 8\n    },\n    'Embarcadero': {\n        'Marina District': 12, 'Bayview': 21, 'Sunset District': 30, \n        'Richmond District': 21, 'Nob Hill': 10, 'Chinatown': 7, \n        'Haight-Ashbury': 21, 'North Beach': 5, 'Russian Hill': 8\n    },\n}\n\n# Meeting constraints\nmeetings = [\n    {'name': 'Charles', 'location': 'Bayview', 'start': '11:30', 'end': '14:30', 'minimum_time': 45},\n    {'name': 'Robert', 'location': 'Sunset District', 'start': '16:45', 'end': '21:00', 'minimum_time': 30},\n    {'name': 'Karen', 'location': 'Richmond District', 'start': '19:15', 'end': '21:30', 'minimum_time': 60},\n    {'name': 'Rebecca', 'location': 'Nob Hill', 'start': '16:15', 'end': '20:30', 'minimum_time': 90},\n    {'name': 'Margaret', 'location': 'Chinatown', 'start': '14:15', 'end': '19:45', 'minimum_time': 120},\n    {'name': 'Patricia', 'location': 'Haight-Ashbury', 'start': '14:30', 'end': '20:30', 'minimum_time': 45},\n    {'name': 'Mark', 'location': 'North Beach', 'start': '14:00', 'end': '18:30', 'minimum_time': 105},\n    {'name': 'Melissa', 'location': 'Russian Hill', 'start': '13:00', 'end': '19:45', 'minimum_time': 30},\n    {'name': 'Laura', 'location': 'Embarcadero', 'start': '7:45', 'end': '13:15', 'minimum_time': 105}\n]\n\n# Itinerary\nitinerary = []\ncurrent_time = datetime.strptime(\"09:00\", \"%H:%M\")\nstart_of_day = current_time\nvisit_location = 'Marina District'\n\n# Function to find meeting schedule\ndef schedule_meetings(current_time, meetings, itinerary, travel_times):\n    for meeting in meetings:\n        start_time = datetime.strptime(meeting['start'], \"%H:%M\")\n        end_time = datetime.strptime(meeting['end'], \"%H:%M\")\n        minimum_time = timedelta(minutes=meeting['minimum_time'])\n        \n        # Travel to meeting location\n        travel_time = travel_times[visit_location][meeting['location']]\n        arrive_time = current_time + timedelta(minutes=travel_time)\n\n        if arrive_time <= start_time:\n            start_meeting_time = start_time\n        else:\n            start_meeting_time = arrive_time\n\n        if start_meeting_time + minimum_time <= end_time:\n            end_meeting_time = start_meeting_time + minimum_time\n            itinerary.append({\n                'action': 'meet',\n                'location': meeting['location'],\n                'person': meeting['name'],\n                'start_time': start_meeting_time.strftime(\"%H:%M\"),\n                'end_time': end_meeting_time.strftime(\"%H:%M\")\n            })\n            current_time = end_meeting_time\n\n            # Update travel location\n            visit_location = meeting['location']\n            # Current time after travel time to next meeting\n            current_time += timedelta(minutes=travel_time)\n\n# Schedule meetings\nschedule_meetings(current_time, meetings, itinerary, travel_times)\n\n# Output the result as JSON\noutput = {\"itinerary\": itinerary}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_892"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "9:15",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Betty",
                        "start_time": "11:35",
                        "end_time": "12:20"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "David",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Betty",
                        "start_time": "10:15",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "David",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "14:48",
                        "end_time": "16:48"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    (\"Embarcadero\", \"Presidio\"): 20,\n    (\"Embarcadero\", \"Richmond District\"): 21,\n    (\"Embarcadero\", \"Fisherman's Wharf\"): 6,\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Richmond District\", \"Fisherman's Wharf\"): 18\n}\n\n# Meeting constraints\nmeetings = {\n    \"Betty\": {\"location\": \"Presidio\", \"available_from\": \"10:15\", \"available_to\": \"21:30\", \"min_duration\": 45},\n    \"David\": {\"location\": \"Richmond District\", \"available_from\": \"13:00\", \"available_to\": \"20:15\", \"min_duration\": 90},\n    \"Barbara\": {\"location\": \"Fisherman's Wharf\", \"available_from\": \"09:15\", \"available_to\": \"20:15\", \"min_duration\": 120},\n}\n\n# Arrival time\narriving_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Function to calculate potential meeting times\ndef calculate_meeting(person, start_time):\n    available_start = datetime.strptime(meetings[person][\"available_from\"], \"%H:%M\")\n    available_end = datetime.strptime(meetings[person][\"available_to\"], \"%H:%M\")\n    min_duration = timedelta(minutes=meetings[person][\"min_duration\"])\n    \n    travel_time_to_location = travel_times[(\"Embarcadero\", meetings[person][\"location\"])]\n    travel_time = timedelta(minutes=travel_time_to_location)\n    \n    meeting_start = max(start_time + travel_time, available_start)\n    meeting_end = meeting_start + min_duration\n    \n    if meeting_end <= available_end:\n        return (meeting_start, meeting_end)\n    return None\n\n# Itinerary to hold the meetings\nitinerary = []\n\n# Compute the schedule\ncurrent_time = arriving_time\n# Meeting Barbara first as she's available earliest after you arrive\nbarbara_meeting = calculate_meeting(\"Barbara\", current_time)\nif barbara_meeting:\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"person\": \"Barbara\",\n        \"start_time\": barbara_meeting[0].strftime(\"%H:%M\"),\n        \"end_time\": barbara_meeting[1].strftime(\"%H:%M\"),\n    })\n    current_time = barbara_meeting[1]\n\n# After meeting Barbara, check for Betty\nbetty_meeting = calculate_meeting(\"Betty\", current_time)\nif betty_meeting:\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"person\": \"Betty\",\n        \"start_time\": betty_meeting[0].strftime(\"%H:%M\"),\n        \"end_time\": betty_meeting[1].strftime(\"%H:%M\"),\n    })\n    current_time = betty_meeting[1]\n\n# Finally, check for David\ndavid_meeting = calculate_meeting(\"David\", current_time)\nif david_meeting:\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"person\": \"David\",\n        \"start_time\": david_meeting[0].strftime(\"%H:%M\"),\n        \"end_time\": david_meeting[1].strftime(\"%H:%M\"),\n    })\n\n# Output result as JSON\nresult = {\"itinerary\": itinerary}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_258"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "11:00",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Emily",
                        "start_time": "16:15",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "18:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Mary",
                        "start_time": "19:41",
                        "end_time": "20:26"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Laura",
                        "start_time": "20:44",
                        "end_time": "21:59"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "20:44",
                        "end_time": "20:59"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "11:00",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Emily",
                        "start_time": "16:15",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Mary",
                        "start_time": "17:30",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "18:26",
                        "end_time": "19:41"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "20:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances between locations in minutes\ntravel_times = {\n    \"Presidio\": {\"Pacific Heights\": 11, \"Golden Gate Park\": 12, \"Fisherman's Wharf\": 19, \"Marina District\": 11,\n                 \"Alamo Square\": 19, \"Sunset District\": 15, \"Nob Hill\": 18, \"North Beach\": 18},\n    \"Pacific Heights\": {\"Presidio\": 11, \"Golden Gate Park\": 15, \"Fisherman's Wharf\": 13, \"Marina District\": 6,\n                        \"Alamo Square\": 10, \"Sunset District\": 21, \"Nob Hill\": 8, \"North Beach\": 9},\n    \"Golden Gate Park\": {\"Presidio\": 11, \"Pacific Heights\": 16, \"Fisherman's Wharf\": 24, \"Marina District\": 18,\n                         \"Alamo Square\": 9, \"Sunset District\": 10, \"Nob Hill\": 20, \"North Beach\": 23},\n    \"Fisherman's Wharf\": {\"Presidio\": 17, \"Pacific Heights\": 12, \"Golden Gate Park\": 25, \"Marina District\": 9,\n                          \"Alamo Square\": 21, \"Sunset District\": 27, \"Nob Hill\": 11, \"North Beach\": 6},\n    \"Marina District\": {\"Presidio\": 10, \"Pacific Heights\": 7, \"Golden Gate Park\": 18, \"Fisherman's Wharf\": 10,\n                        \"Alamo Square\": 15, \"Sunset District\": 19, \"Nob Hill\": 12, \"North Beach\": 11},\n    \"Alamo Square\": {\"Presidio\": 17, \"Pacific Heights\": 10, \"Golden Gate Park\": 9, \"Fisherman's Wharf\": 19,\n                     \"Marina District\": 15, \"Sunset District\": 16, \"Nob Hill\": 11, \"North Beach\": 15},\n    \"Sunset District\": {\"Presidio\": 16, \"Pacific Heights\": 21, \"Golden Gate Park\": 11, \"Fisherman's Wharf\": 29,\n                        \"Marina District\": 21, \"Alamo Square\": 17, \"Nob Hill\": 27, \"North Beach\": 28},\n    \"Nob Hill\": {\"Presidio\": 17, \"Pacific Heights\": 8, \"Golden Gate Park\": 17, \"Fisherman's Wharf\": 10,\n                  \"Marina District\": 11, \"Alamo Square\": 11, \"Sunset District\": 24, \"North Beach\": 8},\n    \"North Beach\": {\"Presidio\": 17, \"Pacific Heights\": 8, \"Golden Gate Park\": 22, \"Fisherman's Wharf\": 5,\n                    \"Marina District\": 9, \"Alamo Square\": 16, \"Sunset District\": 27, \"Nob Hill\": 7}\n}\n\n# Meeting constraints as input\nmeetings = {\n    \"Kevin\": {\"location\": \"Pacific Heights\", \"start\": \"7:15\", \"end\": \"8:45\", \"duration\": 90},\n    \"Michelle\": {\"location\": \"Golden Gate Park\", \"start\": \"20:00\", \"end\": \"21:00\", \"duration\": 15},\n    \"Emily\": {\"location\": \"Fisherman's Wharf\", \"start\": \"16:15\", \"end\": \"19:00\", \"duration\": 30},\n    \"Mark\": {\"location\": \"Marina District\", \"start\": \"18:15\", \"end\": \"19:45\", \"duration\": 75},\n    \"Barbara\": {\"location\": \"Alamo Square\", \"start\": \"17:00\", \"end\": \"19:00\", \"duration\": 120},\n    \"Laura\": {\"location\": \"Sunset District\", \"start\": \"19:00\", \"end\": \"21:15\", \"duration\": 75},\n    \"Mary\": {\"location\": \"Nob Hill\", \"start\": \"17:30\", \"end\": \"19:00\", \"duration\": 45},\n    \"Helen\": {\"location\": \"North Beach\", \"start\": \"11:00\", \"end\": \"12:15\", \"duration\": 45}\n}\n\n# Starting point and time\nstart_location = \"Presidio\"\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Function to check if a meeting can be scheduled\ndef can_schedule_meeting(meeting_start, meeting_end, required_duration, current_time, travel_time):\n    available_time = (meeting_end - meeting_start).total_seconds() / 60\n    return available_time >= required_duration + travel_time\n\ndef schedule_meetings():\n    current_time = start_time\n    itinerary = []\n\n    # Meeting with Helen\n    helen_start_time = datetime.strptime(meetings[\"Helen\"][\"start\"], \"%H:%M\")\n    helen_end_time = datetime.strptime(meetings[\"Helen\"][\"end\"], \"%H:%M\")\n    travel_time_to_helen = travel_times[start_location][meetings[\"Helen\"][\"location\"]]\n    \n    if current_time <= helen_start_time and can_schedule_meeting(helen_start_time, helen_end_time, meetings[\"Helen\"][\"duration\"], current_time, travel_time_to_helen):\n        meeting_start = helen_start_time\n        meeting_end = meeting_start + timedelta(minutes=meetings[\"Helen\"][\"duration\"])\n        itinerary.append({\"action\": \"meet\", \"location\": meetings[\"Helen\"][\"location\"], \"person\": \"Helen\", \"start_time\": meeting_start.strftime(\"%H:%M\"), \"end_time\": meeting_end.strftime(\"%H:%M\")})\n        current_time = meeting_end + timedelta(minutes=travel_time_to_helen)\n\n    # Meeting with Kevin\n    kevin_start_time = datetime.strptime(meetings[\"Kevin\"][\"start\"], \"%H:%M\")\n    kevin_end_time = datetime.strptime(meetings[\"Kevin\"][\"end\"], \"%H:%M\")\n    travel_time_to_kevin = travel_times[start_location][meetings[\"Kevin\"][\"location\"]]\n    \n    if current_time < kevin_start_time:\n        current_time = kevin_start_time\n\n    if can_schedule_meeting(kevin_start_time, kevin_end_time, meetings[\"Kevin\"][\"duration\"], current_time, travel_time_to_kevin):\n        meeting_start = current_time\n        meeting_end = meeting_start + timedelta(minutes=meetings[\"Kevin\"][\"duration\"])\n        itinerary.append({\"action\": \"meet\", \"location\": meetings[\"Kevin\"][\"location\"], \"person\": \"Kevin\", \"start_time\": meeting_start.strftime(\"%H:%M\"), \"end_time\": meeting_end.strftime(\"%H:%M\")})\n        current_time = meeting_end + timedelta(minutes=travel_time_to_kevin)\n\n    # Meeting with Emily\n    emily_start_time = datetime.strptime(meetings[\"Emily\"][\"start\"], \"%H:%M\")\n    emily_end_time = datetime.strptime(meetings[\"Emily\"][\"end\"], \"%H:%M\")\n    travel_time_to_emily = travel_times[start_location][meetings[\"Emily\"][\"location\"]]\n    \n    current_time = max(current_time, emily_start_time)\n    \n    if can_schedule_meeting(emily_start_time, emily_end_time, meetings[\"Emily\"][\"duration\"], current_time, travel_time_to_emily):\n        meeting_start = current_time\n        meeting_end = meeting_start + timedelta(minutes=meetings[\"Emily\"][\"duration\"])\n        itinerary.append({\"action\": \"meet\", \"location\": meetings[\"Emily\"][\"location\"], \"person\": \"Emily\", \"start_time\": meeting_start.strftime(\"%H:%M\"), \"end_time\": meeting_end.strftime(\"%H:%M\")})\n        current_time = meeting_end + timedelta(minutes=travel_time_to_emily)\n    \n    # Meeting with Mark\n    mark_start_time = datetime.strptime(meetings[\"Mark\"][\"start\"], \"%H:%M\")\n    mark_end_time = datetime.strptime(meetings[\"Mark\"][\"end\"], \"%H:%M\")\n    travel_time_to_mark = travel_times[start_location][meetings[\"Mark\"][\"location\"]]\n    \n    current_time = max(current_time, mark_start_time)\n    \n    if can_schedule_meeting(mark_start_time, mark_end_time, meetings[\"Mark\"][\"duration\"], current_time, travel_time_to_mark):\n        meeting_start = current_time\n        meeting_end = meeting_start + timedelta(minutes=meetings[\"Mark\"][\"duration\"])\n        itinerary.append({\"action\": \"meet\", \"location\": meetings[\"Mark\"][\"location\"], \"person\": \"Mark\", \"start_time\": meeting_start.strftime(\"%H:%M\"), \"end_time\": meeting_end.strftime(\"%H:%M\")})\n        current_time = meeting_end + timedelta(minutes=travel_time_to_mark)\n\n    # Meeting with Barbara\n    barbara_start_time = datetime.strptime(meetings[\"Barbara\"][\"start\"], \"%H:%M\")\n    barbara_end_time = datetime.strptime(meetings[\"Barbara\"][\"end\"], \"%H:%M\")\n    travel_time_to_barbara = travel_times[start_location][meetings[\"Barbara\"][\"location\"]]\n    \n    current_time = max(current_time, barbara_start_time)\n    \n    if can_schedule_meeting(barbara_start_time, barbara_end_time, meetings[\"Barbara\"][\"duration\"], current_time, travel_time_to_barbara):\n        meeting_start = current_time\n        meeting_end = meeting_start + timedelta(minutes=meetings[\"Barbara\"][\"duration\"])\n        itinerary.append({\"action\": \"meet\", \"location\": meetings[\"Barbara\"][\"location\"], \"person\": \"Barbara\", \"start_time\": meeting_start.strftime(\"%H:%M\"), \"end_time\": meeting_end.strftime(\"%H:%M\")})\n        current_time = meeting_end + timedelta(minutes=travel_time_to_barbara)\n\n    # Meeting with Mary\n    mary_start_time = datetime.strptime(meetings[\"Mary\"][\"start\"], \"%H:%M\")\n    mary_end_time = datetime.strptime(meetings[\"Mary\"][\"end\"], \"%H:%M\")\n    travel_time_to_mary = travel_times[start_location][meetings[\"Mary\"][\"location\"]]\n\n    current_time = max(current_time, mary_start_time)\n\n    if can_schedule_meeting(mary_start_time, mary_end_time, meetings[\"Mary\"][\"duration\"], current_time, travel_time_to_mary):\n        meeting_start = current_time\n        meeting_end = meeting_start + timedelta(minutes=meetings[\"Mary\"][\"duration\"])\n        itinerary.append({\"action\": \"meet\", \"location\": meetings[\"Mary\"][\"location\"], \"person\": \"Mary\", \"start_time\": meeting_start.strftime(\"%H:%M\"), \"end_time\": meeting_end.strftime(\"%H:%M\")})\n        current_time = meeting_end + timedelta(minutes=travel_time_to_mary)\n\n    # Meeting with Laura\n    laura_start_time = datetime.strptime(meetings[\"Laura\"][\"start\"], \"%H:%M\")\n    laura_end_time = datetime.strptime(meetings[\"Laura\"][\"end\"], \"%H:%M\")\n    travel_time_to_laura = travel_times[start_location][meetings[\"Laura\"][\"location\"]]\n\n    current_time = max(current_time, laura_start_time)\n\n    if can_schedule_meeting(laura_start_time, laura_end_time, meetings[\"Laura\"][\"duration\"], current_time, travel_time_to_laura):\n        meeting_start = current_time\n        meeting_end = meeting_start + timedelta(minutes=meetings[\"Laura\"][\"duration\"])\n        itinerary.append({\"action\": \"meet\", \"location\": meetings[\"Laura\"][\"location\"], \"person\": \"Laura\", \"start_time\": meeting_start.strftime(\"%H:%M\"), \"end_time\": meeting_end.strftime(\"%H:%M\")})\n\n    # Meeting with Michelle\n    michelle_start_time = datetime.strptime(meetings[\"Michelle\"][\"start\"], \"%H:%M\")\n    michelle_end_time = datetime.strptime(meetings[\"Michelle\"][\"end\"], \"%H:%M\")\n    travel_time_to_michelle = travel_times[start_location][meetings[\"Michelle\"][\"location\"]]\n\n    current_time = max(current_time, michelle_start_time)\n\n    if can_schedule_meeting(michelle_start_time, michelle_end_time, meetings[\"Michelle\"][\"duration\"], current_time, travel_time_to_michelle):\n        meeting_start = current_time\n        meeting_end = meeting_start + timedelta(minutes=meetings[\"Michelle\"][\"duration\"])\n        itinerary.append({\"action\": \"meet\", \"location\": meetings[\"Michelle\"][\"location\"], \"person\": \"Michelle\", \"start_time\": meeting_start.strftime(\"%H:%M\"), \"end_time\": meeting_end.strftime(\"%H:%M\")})\n\n    return {\"itinerary\": itinerary}\n\nif __name__ == \"__main__\":\n    schedule = schedule_meetings()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_700"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Karen",
                        "start_time": "9:25",
                        "end_time": "9:55"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "10:06",
                        "end_time": "11:51"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Betty",
                        "start_time": "19:45",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    (\"Bayview\", \"Embarcadero\"): 19,\n    (\"Bayview\", \"Fisherman's Wharf\"): 25,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Embarcadero\", \"Fisherman's Wharf\"): 6,\n    (\"Embarcadero\", \"Financial District\"): 5,\n    (\"Fisherman's Wharf\", \"Financial District\"): 11,\n}\n\n# Meeting constraints\nconstraints = {\n    \"Betty\": {\n        \"location\": \"Embarcadero\",\n        \"available_from\": datetime.strptime(\"19:45\", \"%H:%M\"),\n        \"available_until\": datetime.strptime(\"21:45\", \"%H:%M\"),\n        \"min_meeting_duration\": timedelta(minutes=15)\n    },\n    \"Karen\": {\n        \"location\": \"Fisherman's Wharf\",\n        \"available_from\": datetime.strptime(\"08:45\", \"%H:%M\"),\n        \"available_until\": datetime.strptime(\"15:00\", \"%H:%M\"),\n        \"min_meeting_duration\": timedelta(minutes=30)\n    },\n    \"Anthony\": {\n        \"location\": \"Financial District\",\n        \"available_from\": datetime.strptime(\"09:15\", \"%H:%M\"),\n        \"available_until\": datetime.strptime(\"21:30\", \"%H:%M\"),\n        \"min_meeting_duration\": timedelta(minutes=105)\n    }\n}\n\n# Start time\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Itinerary to store meetings\nitinerary = []\n\n# Function to schedule meetings\ndef schedule_meetings():\n    current_time = start_time\n\n    # Meet Karen first\n    travel_time_to_karen = travel_times[(\"Bayview\", \"Fisherman's Wharf\")]\n    current_time += timedelta(minutes=travel_time_to_karen)\n    \n    # Calculate meeting time for Karen\n    if current_time < constraints[\"Karen\"][\"available_from\"]:\n        current_time = constraints[\"Karen\"][\"available_from\"]\n    \n    # Schedule meeting with Karen\n    end_time_karen = current_time + constraints[\"Karen\"][\"min_meeting_duration\"]\n    if end_time_karen > constraints[\"Karen\"][\"available_until\"]:\n        end_time_karen = constraints[\"Karen\"][\"available_until\"]\n\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": constraints[\"Karen\"][\"location\"],\n        \"person\": \"Karen\",\n        \"start_time\": current_time.strftime(\"%H:%M\"),\n        \"end_time\": end_time_karen.strftime(\"%H:%M\")\n    })\n\n    # Move to Embarcadero to meet Betty\n    travel_time_to_betty = travel_times[(\"Fisherman's Wharf\", \"Embarcadero\")]\n    current_time = end_time_karen + timedelta(minutes=travel_time_to_betty)\n\n    # Calculate meeting time for Betty\n    if current_time < constraints[\"Betty\"][\"available_from\"]:\n        current_time = constraints[\"Betty\"][\"available_from\"]\n\n    # Schedule meeting with Betty\n    end_time_betty = current_time + constraints[\"Betty\"][\"min_meeting_duration\"]\n    if end_time_betty > constraints[\"Betty\"][\"available_until\"]:\n        end_time_betty = constraints[\"Betty\"][\"available_until\"]\n\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": constraints[\"Betty\"][\"location\"],\n        \"person\": \"Betty\",\n        \"start_time\": current_time.strftime(\"%H:%M\"),\n        \"end_time\": end_time_betty.strftime(\"%H:%M\"),\n    })\n\n    # Move to Financial District to meet Anthony\n    travel_time_to_anthony = travel_times[(\"Embarcadero\", \"Financial District\")]\n    current_time = end_time_betty + timedelta(minutes=travel_time_to_anthony)\n\n    # Calculate meeting time for Anthony\n    if current_time < constraints[\"Anthony\"][\"available_from\"]:\n        current_time = constraints[\"Anthony\"][\"available_from\"]\n\n    # Schedule meeting with Anthony\n    end_time_anthony = current_time + constraints[\"Anthony\"][\"min_meeting_duration\"]\n    if end_time_anthony > constraints[\"Anthony\"][\"available_until\"]:\n        end_time_anthony = constraints[\"Anthony\"][\"available_until\"]\n\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": constraints[\"Anthony\"][\"location\"],\n        \"person\": \"Anthony\",\n        \"start_time\": current_time.strftime(\"%H:%M\"),\n        \"end_time\": end_time_anthony.strftime(\"%H:%M\"),\n    })\n\nschedule_meetings()\n\n# Convert itinerary to JSON format\nresult = {\"itinerary\": itinerary}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_263"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Sarah",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Richard",
                        "start_time": "11:45",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "13:26",
                        "end_time": "15:26"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "18:15",
                        "end_time": "19:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Sarah",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Richard",
                        "start_time": "11:45",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "13:26",
                        "end_time": "15:26"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "18:15",
                        "end_time": "19:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    (\"Richmond District\", \"Sunset District\"): 11,\n    (\"Richmond District\", \"Haight-Ashbury\"): 10,\n    (\"Richmond District\", \"Mission District\"): 20,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Sunset District\", \"Richmond District\"): 12,\n    (\"Sunset District\", \"Haight-Ashbury\"): 15,\n    (\"Sunset District\", \"Mission District\"): 24,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"Haight-Ashbury\", \"Richmond District\"): 10,\n    (\"Haight-Ashbury\", \"Sunset District\"): 15,\n    (\"Haight-Ashbury\", \"Mission District\"): 11,\n    (\"Haight-Ashbury\", \"Golden Gate Park\"): 7,\n    (\"Mission District\", \"Richmond District\"): 20,\n    (\"Mission District\", \"Sunset District\"): 24,\n    (\"Mission District\", \"Haight-Ashbury\"): 12,\n    (\"Mission District\", \"Golden Gate Park\"): 17,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Golden Gate Park\", \"Haight-Ashbury\"): 7,\n    (\"Golden Gate Park\", \"Mission District\"): 17\n}\n\n# Meeting constraints\nconstraints = {\n    \"Sarah\": {\"location\": \"Sunset District\", \"start\": \"10:45\", \"end\": \"19:00\", \"duration\": 30},\n    \"Richard\": {\"location\": \"Haight-Ashbury\", \"start\": \"11:45\", \"end\": \"15:45\", \"duration\": 90},\n    \"Elizabeth\": {\"location\": \"Mission District\", \"start\": \"11:00\", \"end\": \"17:15\", \"duration\": 120},\n    \"Michelle\": {\"location\": \"Golden Gate Park\", \"start\": \"18:15\", \"end\": \"20:45\", \"duration\": 90},\n}\n\n# Initial time\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Function to calculate the optimal meeting schedule\ndef compute_schedule():\n    itinerary = []\n    current_time = arrival_time\n\n    # Meeting Sarah first if possible\n    if current_time < datetime.strptime(constraints[\"Sarah\"][\"start\"], \"%H:%M\"):\n        travel_time = travel_times[(\"Richmond District\", \"Sunset District\")]\n        current_time += timedelta(minutes=travel_time)\n    \n    if current_time < datetime.strptime(constraints[\"Sarah\"][\"end\"], \"%H:%M\") - timedelta(minutes=30):\n        meet_start = max(current_time, datetime.strptime(constraints[\"Sarah\"][\"start\"], \"%H:%M\"))\n        meet_end = meet_start + timedelta(minutes=constraints[\"Sarah\"][\"duration\"])\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": constraints[\"Sarah\"][\"location\"],\n            \"person\": \"Sarah\",\n            \"start_time\": meet_start.strftime(\"%H:%M\"),\n            \"end_time\": meet_end.strftime(\"%H:%M\")\n        })\n        current_time = meet_end\n        \n        # Travel to Richard\n        travel_time = travel_times[(\"Sunset District\", \"Haight-Ashbury\")]\n        current_time += timedelta(minutes=travel_time)\n    \n    # Meeting Richard next if time allows\n    if current_time < datetime.strptime(constraints[\"Richard\"][\"end\"], \"%H:%M\") - timedelta(minutes=90):\n        meet_start = max(current_time, datetime.strptime(constraints[\"Richard\"][\"start\"], \"%H:%M\"))\n        meet_end = meet_start + timedelta(minutes=constraints[\"Richard\"][\"duration\"])\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": constraints[\"Richard\"][\"location\"],\n            \"person\": \"Richard\",\n            \"start_time\": meet_start.strftime(\"%H:%M\"),\n            \"end_time\": meet_end.strftime(\"%H:%M\")\n        })\n        current_time = meet_end\n        \n        # Travel to Elizabeth\n        travel_time = travel_times[(\"Haight-Ashbury\", \"Mission District\")]\n        current_time += timedelta(minutes=travel_time)\n    \n    # Meeting Elizabeth next if time allows\n    if current_time < datetime.strptime(constraints[\"Elizabeth\"][\"end\"], \"%H:%M\") - timedelta(minutes=120):\n        meet_start = max(current_time, datetime.strptime(constraints[\"Elizabeth\"][\"start\"], \"%H:%M\"))\n        meet_end = meet_start + timedelta(minutes=constraints[\"Elizabeth\"][\"duration\"])\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": constraints[\"Elizabeth\"][\"location\"],\n            \"person\": \"Elizabeth\",\n            \"start_time\": meet_start.strftime(\"%H:%M\"),\n            \"end_time\": meet_end.strftime(\"%H:%M\")\n        })\n        current_time = meet_end\n        \n        # Travel to Michelle\n        travel_time = travel_times[(\"Mission District\", \"Golden Gate Park\")]\n        current_time += timedelta(minutes=travel_time)\n    \n    # Meeting Michelle if time allows\n    if current_time < datetime.strptime(constraints[\"Michelle\"][\"end\"], \"%H:%M\") - timedelta(minutes=90):\n        meet_start = max(current_time, datetime.strptime(constraints[\"Michelle\"][\"start\"], \"%H:%M\"))\n        meet_end = meet_start + timedelta(minutes=constraints[\"Michelle\"][\"duration\"])\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": constraints[\"Michelle\"][\"location\"],\n            \"person\": \"Michelle\",\n            \"start_time\": meet_start.strftime(\"%H:%M\"),\n            \"end_time\": meet_end.strftime(\"%H:%M\")\n        })\n    \n    return {\"itinerary\": itinerary}\n\n# Compute the schedule and output as JSON\noptimal_schedule = compute_schedule()\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_312"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Ronald",
                        "start_time": "9:08",
                        "end_time": "10:53"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Helen",
                        "start_time": "11:26",
                        "end_time": "13:26"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Joshua",
                        "start_time": "14:00",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Margaret",
                        "start_time": "13:58",
                        "end_time": "14:58"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Ronald",
                        "start_time": "10:00",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Helen",
                        "start_time": "13:30",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Joshua",
                        "start_time": "15:47",
                        "end_time": "17:17"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Margaret",
                        "start_time": "17:32",
                        "end_time": "18:32"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    (\"Pacific Heights\", \"Nob Hill\"): 8,\n    (\"Pacific Heights\", \"Russian Hill\"): 7,\n    (\"Pacific Heights\", \"The Castro\"): 16,\n    (\"Pacific Heights\", \"Sunset District\"): 21,\n    (\"Pacific Heights\", \"Haight-Ashbury\"): 11,\n    (\"Nob Hill\", \"Pacific Heights\"): 8,\n    (\"Nob Hill\", \"Russian Hill\"): 5,\n    (\"Nob Hill\", \"The Castro\"): 17,\n    (\"Nob Hill\", \"Sunset District\"): 25,\n    (\"Nob Hill\", \"Haight-Ashbury\"): 13,\n    (\"Russian Hill\", \"Pacific Heights\"): 7,\n    (\"Russian Hill\", \"Nob Hill\"): 5,\n    (\"Russian Hill\", \"The Castro\"): 21,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"Russian Hill\", \"Haight-Ashbury\"): 17,\n    (\"The Castro\", \"Pacific Heights\"): 16,\n    (\"The Castro\", \"Nob Hill\"): 16,\n    (\"The Castro\", \"Russian Hill\"): 18,\n    (\"The Castro\", \"Sunset District\"): 17,\n    (\"The Castro\", \"Haight-Ashbury\"): 6,\n    (\"Sunset District\", \"Pacific Heights\"): 21,\n    (\"Sunset District\", \"Nob Hill\"): 27,\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"The Castro\"): 17,\n    (\"Sunset District\", \"Haight-Ashbury\"): 15,\n    (\"Haight-Ashbury\", \"Pacific Heights\"): 12,\n    (\"Haight-Ashbury\", \"Nob Hill\"): 15,\n    (\"Haight-Ashbury\", \"Russian Hill\"): 17,\n    (\"Haight-Ashbury\", \"The Castro\"): 6,\n    (\"Haight-Ashbury\", \"Sunset District\"): 15,\n}\n\n# Meeting constraints\nconstraints = {\n    \"Ronald\": {\"location\": \"Nob Hill\", \"available_from\": \"10:00\", \"available_to\": \"17:00\", \"min_time\": 105},\n    \"Sarah\": {\"location\": \"Russian Hill\", \"available_from\": \"07:15\", \"available_to\": \"09:30\", \"min_time\": 45},\n    \"Helen\": {\"location\": \"The Castro\", \"available_from\": \"13:30\", \"available_to\": \"17:00\", \"min_time\": 120},\n    \"Joshua\": {\"location\": \"Sunset District\", \"available_from\": \"14:15\", \"available_to\": \"19:30\", \"min_time\": 90},\n    \"Margaret\": {\"location\": \"Haight-Ashbury\", \"available_from\": \"10:15\", \"available_to\": \"22:00\", \"min_time\": 60},\n}\n\n# Starting time\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\ncurrent_time = start_time\n\nitinerary = []\n\n# Meeting Sarah first since she is available before everyone else\nif current_time < datetime.strptime(constraints[\"Sarah\"][\"available_to\"], \"%H:%M\"):\n    meet_time = current_time + timedelta(minutes=travel_times[(\"Pacific Heights\", \"Russian Hill\")])\n    if meet_time + timedelta(minutes=constraints[\"Sarah\"][\"min_time\"]) <= datetime.strptime(constraints[\"Sarah\"][\"available_to\"], \"%H:%M\"):\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Russian Hill\",\n            \"person\": \"Sarah\",\n            \"start_time\": meet_time.strftime(\"%H:%M\"),\n            \"end_time\": (meet_time + timedelta(minutes=constraints[\"Sarah\"][\"min_time\"])).strftime(\"%H:%M\"),\n        })\n        current_time = meet_time + timedelta(minutes=constraints[\"Sarah\"][\"min_time\"] + travel_times[(\"Russian Hill\", \"Nob Hill\")])\n\n# Meeting Ronald next \nif current_time < datetime.strptime(constraints[\"Ronald\"][\"available_to\"], \"%H:%M\"):\n    meet_time = current_time + timedelta(minutes=travel_times[(\"Nob Hill\", \"Pacific Heights\")])\n    if meet_time + timedelta(minutes=constraints[\"Ronald\"][\"min_time\"]) <= datetime.strptime(constraints[\"Ronald\"][\"available_to\"], \"%H:%M\"):\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"person\": \"Ronald\",\n            \"start_time\": meet_time.strftime(\"%H:%M\"),\n            \"end_time\": (meet_time + timedelta(minutes=constraints[\"Ronald\"][\"min_time\"])).strftime(\"%H:%M\"),\n        })\n        current_time = meet_time + timedelta(minutes=constraints[\"Ronald\"][\"min_time\"] + travel_times[(\"Nob Hill\", \"The Castro\")])\n\n# Meeting Helen next\nif current_time < datetime.strptime(constraints[\"Helen\"][\"available_to\"], \"%H:%M\"):\n    meet_time = current_time + timedelta(minutes=travel_times[(\"The Castro\", \"Nob Hill\")])\n    if meet_time + timedelta(minutes=constraints[\"Helen\"][\"min_time\"]) <= datetime.strptime(constraints[\"Helen\"][\"available_to\"], \"%H:%M\"):\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"The Castro\",\n            \"person\": \"Helen\",\n            \"start_time\": meet_time.strftime(\"%H:%M\"),\n            \"end_time\": (meet_time + timedelta(minutes=constraints[\"Helen\"][\"min_time\"])).strftime(\"%H:%M\"),\n        })\n        current_time = meet_time + timedelta(minutes=constraints[\"Helen\"][\"min_time\"] + travel_times[(\"The Castro\", \"Sunset District\")])\n\n# Meeting Joshua finally\nif current_time < datetime.strptime(constraints[\"Joshua\"][\"available_to\"], \"%H:%M\"):\n    meet_time = current_time + timedelta(minutes=travel_times[(\"Sunset District\", \"The Castro\")])\n    if meet_time + timedelta(minutes=constraints[\"Joshua\"][\"min_time\"]) <= datetime.strptime(constraints[\"Joshua\"][\"available_to\"], \"%H:%M\"):\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Sunset District\",\n            \"person\": \"Joshua\",\n            \"start_time\": meet_time.strftime(\"%H:%M\"),\n            \"end_time\": (meet_time + timedelta(minutes=constraints[\"Joshua\"][\"min_time\"])).strftime(\"%H:%M\"),\n        })\n\n# Meeting Margaret last\nif current_time < datetime.strptime(constraints[\"Margaret\"][\"available_to\"], \"%H:%M\"):\n    meet_time = current_time + timedelta(minutes=travel_times[(\"Haight-Ashbury\", \"Sunset District\")])\n    if meet_time + timedelta(minutes=constraints[\"Margaret\"][\"min_time\"]) <= datetime.strptime(constraints[\"Margaret\"][\"available_to\"], \"%H:%M\"):\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Haight-Ashbury\",\n            \"person\": \"Margaret\",\n            \"start_time\": meet_time.strftime(\"%H:%M\"),\n            \"end_time\": (meet_time + timedelta(minutes=constraints[\"Margaret\"][\"min_time\"])).strftime(\"%H:%M\"),\n        })\n\n# Output in JSON format\noutput = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_488"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "16:00",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Jessica",
                        "start_time": "16:45",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sandra",
                        "start_time": "18:30",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "16:00",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Jessica",
                        "start_time": "16:45",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sandra",
                        "start_time": "18:30",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    (\"Bayview\", \"Embarcadero\"): 19,\n    (\"Bayview\", \"Richmond District\"): 25,\n    (\"Bayview\", \"Fisherman's Wharf\"): 25,\n    (\"Embarcadero\", \"Bayview\"): 21,\n    (\"Embarcadero\", \"Richmond District\"): 21,\n    (\"Embarcadero\", \"Fisherman's Wharf\"): 6,\n    (\"Richmond District\", \"Bayview\"): 26,\n    (\"Richmond District\", \"Embarcadero\"): 19,\n    (\"Richmond District\", \"Fisherman's Wharf\"): 18,\n    (\"Fisherman's Wharf\", \"Bayview\"): 26,\n    (\"Fisherman's Wharf\", \"Embarcadero\"): 8,\n    (\"Fisherman's Wharf\", \"Richmond District\"): 18,\n}\n\n# Meeting constraints\nmeetings = {\n    \"Jessica\": {\"location\": \"Embarcadero\", \"start\": \"16:45\", \"end\": \"19:00\", \"duration\": 30},\n    \"Sandra\": {\"location\": \"Richmond District\", \"start\": \"18:30\", \"end\": \"21:45\", \"duration\": 120},\n    \"Jason\": {\"location\": \"Fisherman's Wharf\", \"start\": \"16:00\", \"end\": \"16:45\", \"duration\": 30},\n}\n\n# Start time upon arrival at Bayview\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\nschedule = []\n\ndef can_schedule_meeting(start_time, end_time):\n    return start_time >= arrival_time and end_time <= datetime.strptime(\"21:45\", \"%H:%M\")\n\n# Schedule meetings\ndef schedule_meetings():\n    global arrival_time\n    \n    # Meeting with Jason first\n    jason_start = datetime.strptime(meetings[\"Jason\"][\"start\"], \"%H:%M\")\n    jason_end = jason_start + timedelta(minutes=meetings[\"Jason\"][\"duration\"])\n    travel_time_to_jason = travel_times[(\"Bayview\", \"Fisherman's Wharf\")]\n    \n    if can_schedule_meeting(jason_start, jason_end):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Fisherman's Wharf\",\n            \"person\": \"Jason\",\n            \"start_time\": jason_start.strftime(\"%H:%M\"),\n            \"end_time\": jason_end.strftime(\"%H:%M\")\n        })\n        arrival_time = jason_end + timedelta(minutes=travel_times[(\"Fisherman's Wharf\", \"Embarcadero\")])\n        \n        # Meeting with Jessica next\n        jessica_start = max(arrival_time, datetime.strptime(meetings[\"Jessica\"][\"start\"], \"%H:%M\"))\n        jessica_end = jessica_start + timedelta(minutes=meetings[\"Jessica\"][\"duration\"])\n        \n        travel_time_to_jessica = travel_times[(\"Fisherman's Wharf\", \"Embarcadero\")]\n        \n        if jessica_start + timedelta(minutes=travel_time_to_jessica) <= datetime.strptime(meetings[\"Jessica\"][\"end\"], \"%H:%M\"):\n            arrival_time = jessica_start + timedelta(minutes=travel_time_to_jessica)\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Embarcadero\",\n                \"person\": \"Jessica\",\n                \"start_time\": jessica_start.strftime(\"%H:%M\"),\n                \"end_time\": jessica_end.strftime(\"%H:%M\")\n            })\n            arrival_time = jessica_end + timedelta(minutes=travel_times[(\"Embarcadero\", \"Richmond District\")])\n            \n            # Meeting with Sandra next\n            sandra_start = max(arrival_time, datetime.strptime(meetings[\"Sandra\"][\"start\"], \"%H:%M\"))\n            sandra_end = sandra_start + timedelta(minutes=meetings[\"Sandra\"][\"duration\"])\n            \n            travel_time_to_sandra = travel_times[(\"Richmond District\", \"Bayview\")]\n            \n            if sandra_start + timedelta(minutes=travel_time_to_sandra) <= datetime.strptime(meetings[\"Sandra\"][\"end\"], \"%H:%M\"):\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Richmond District\",\n                    \"person\": \"Sandra\",\n                    \"start_time\": sandra_start.strftime(\"%H:%M\"),\n                    \"end_time\": sandra_end.strftime(\"%H:%M\")\n                })\n\nschedule_meetings()\n\n# JSON formatted output\noutput = {\"itinerary\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_215"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "9:13",
                        "end_time": "10:28"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Laura",
                        "start_time": "11:45",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Deborah",
                        "start_time": "13:05",
                        "end_time": "14:50"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Steven",
                        "start_time": "15:03",
                        "end_time": "17:03"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Jason",
                        "start_time": "17:08",
                        "end_time": "18:38"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Elizabeth",
                        "start_time": "18:44",
                        "end_time": "19:59"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Carol",
                        "start_time": "21:30",
                        "end_time": "22:30"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants for travel times\ntravel_times = {\n    ('Golden Gate Park', 'Haight-Ashbury'): 7,\n    ('Golden Gate Park', 'Fisherman\\'s Wharf'): 24,\n    ('Golden Gate Park', 'The Castro'): 13,\n    ('Golden Gate Park', 'Chinatown'): 23,\n    ('Golden Gate Park', 'Alamo Square'): 10,\n    ('Golden Gate Park', 'North Beach'): 24,\n    ('Golden Gate Park', 'Russian Hill'): 19,\n    ('Haight-Ashbury', 'Fisherman\\'s Wharf'): 23,\n    ('Haight-Ashbury', 'The Castro'): 6,\n    ('Haight-Ashbury', 'Chinatown'): 19,\n    ('Haight-Ashbury', 'Alamo Square'): 5,\n    ('Haight-Ashbury', 'North Beach'): 19,\n    ('Haight-Ashbury', 'Russian Hill'): 17,\n    ('Fisherman\\'s Wharf', 'The Castro'): 26,\n    ('Fisherman\\'s Wharf', 'Chinatown'): 12,\n    ('Fisherman\\'s Wharf', 'Alamo Square'): 20,\n    ('Fisherman\\'s Wharf', 'North Beach'): 6,\n    ('Fisherman\\'s Wharf', 'Russian Hill'): 7,\n    ('The Castro', 'Chinatown'): 22,\n    ('The Castro', 'Alamo Square'): 8,\n    ('The Castro', 'North Beach'): 20,\n    ('The Castro', 'Russian Hill'): 18,\n    ('Chinatown', 'North Beach'): 3,\n    ('Chinatown', 'Russian Hill'): 7,\n    ('Alamo Square', 'North Beach'): 15,\n    ('Alamo Square', 'Russian Hill'): 13,\n    ('North Beach', 'Russian Hill'): 5,\n}\n\n# Meeting constraints\nparticipants = {\n    \"Carol\": {\"location\": \"Haight-Ashbury\", \"available\": (datetime.strptime(\"21:30\", \"%H:%M\"), datetime.strptime(\"22:30\", \"%H:%M\")), \"duration\": 60},\n    \"Laura\": {\"location\": \"Fisherman\\'s Wharf\", \"available\": (datetime.strptime(\"11:45\", \"%H:%M\"), datetime.strptime(\"21:30\", \"%H:%M\")), \"duration\": 60},\n    \"Karen\": {\"location\": \"The Castro\", \"available\": (datetime.strptime(\"07:15\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")), \"duration\": 75},\n    \"Elizabeth\": {\"location\": \"Chinatown\", \"available\": (datetime.strptime(\"12:15\", \"%H:%M\"), datetime.strptime(\"21:30\", \"%H:%M\")), \"duration\": 75},\n    \"Deborah\": {\"location\": \"Alamo Square\", \"available\": (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")), \"duration\": 105},\n    \"Jason\": {\"location\": \"North Beach\", \"available\": (datetime.strptime(\"14:45\", \"%H:%M\"), datetime.strptime(\"19:00\", \"%H:%M\")), \"duration\": 90},\n    \"Steven\": {\"location\": \"Russian Hill\", \"available\": (datetime.strptime(\"14:45\", \"%H:%M\"), datetime.strptime(\"18:30\", \"%H:%M\")), \"duration\": 120},\n}\n\n# Start time\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nitinerary = []\n\n# Function to add a meeting to the itinerary\ndef add_meeting(location, person, start, duration):\n    end = start + timedelta(minutes=duration)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": start.strftime(\"%H:%M\"),\n        \"end_time\": end.strftime(\"%H:%M\")\n    })\n    return end\n\n# Meeting logic\ncurrent_time = start_time\n\n# Meeting Karen\nif current_time < participants[\"Karen\"][\"available\"][1]:\n    travel_time = travel_times[('Golden Gate Park', 'The Castro')]\n    current_time += timedelta(minutes=travel_time)\n    if current_time < participants[\"Karen\"][\"available\"][0]:\n        current_time = participants[\"Karen\"][\"available\"][0]\n    current_time = add_meeting(\"The Castro\", \"Karen\", current_time, participants[\"Karen\"][\"duration\"])\n\n# Meeting Deborah\nif current_time < participants[\"Deborah\"][\"available\"][1]:\n    travel_time = travel_times[('The Castro', 'Alamo Square')]\n    current_time += timedelta(minutes=travel_time)\n    if current_time < participants[\"Deborah\"][\"available\"][0]:\n        current_time = participants[\"Deborah\"][\"available\"][0]\n    current_time = add_meeting(\"Alamo Square\", \"Deborah\", current_time, participants[\"Deborah\"][\"duration\"])\n\n# Meeting Jason\nif current_time < participants[\"Jason\"][\"available\"][1]:\n    travel_time = travel_times[('Alamo Square', 'North Beach')]\n    current_time += timedelta(minutes=travel_time)\n    if current_time < participants[\"Jason\"][\"available\"][0]:\n        current_time = participants[\"Jason\"][\"available\"][0]\n    current_time = add_meeting(\"North Beach\", \"Jason\", current_time, participants[\"Jason\"][\"duration\"])\n\n# Meeting Steven\nif current_time < participants[\"Steven\"][\"available\"][1]:\n    travel_time = travel_times[('North Beach', 'Russian Hill')]\n    current_time += timedelta(minutes=travel_time)\n    if current_time < participants[\"Steven\"][\"available\"][0]:\n        current_time = participants[\"Steven\"][\"available\"][0]\n    current_time = add_meeting(\"Russian Hill\", \"Steven\", current_time, participants[\"Steven\"][\"duration\"])\n\n# Meeting Elizabeth\nif current_time < participants[\"Elizabeth\"][\"available\"][1]:\n    travel_time = travel_times[('Russian Hill', 'Chinatown')]\n    current_time += timedelta(minutes=travel_time)\n    if current_time < participants[\"Elizabeth\"][\"available\"][0]:\n        current_time = participants[\"Elizabeth\"][\"available\"][0]\n    current_time = add_meeting(\"Chinatown\", \"Elizabeth\", current_time, participants[\"Elizabeth\"][\"duration\"])\n\n# Meeting Laura\nif current_time < participants[\"Laura\"][\"available\"][1]:\n    travel_time = travel_times[('Chinatown', 'Fisherman\\'s Wharf')]\n    current_time += timedelta(minutes=travel_time)\n    if current_time < participants[\"Laura\"][\"available\"][0]:\n        current_time = participants[\"Laura\"][\"available\"][0]\n    current_time = add_meeting(\"Fisherman\\'s Wharf\", \"Laura\", current_time, participants[\"Laura\"][\"duration\"])\n\n# Meeting Carol\nif current_time < participants[\"Carol\"][\"available\"][1]:\n    travel_time = travel_times[('Fisherman\\'s Wharf', 'Haight-Ashbury')]\n    current_time += timedelta(minutes=travel_time)\n    if current_time < participants[\"Carol\"][\"available\"][0]:\n        current_time = participants[\"Carol\"][\"available\"][0]\n    current_time = add_meeting(\"Haight-Ashbury\", \"Carol\", current_time, participants[\"Carol\"][\"duration\"])\n\n# Output the result in JSON format\nresult = {\"itinerary\": itinerary}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_624"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joshua",
                        "start_time": "9:00",
                        "end_time": "9:36"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Stephanie",
                        "start_time": "9:57",
                        "end_time": "10:33"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Lisa",
                        "start_time": "10:39",
                        "end_time": "10:59"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Melissa",
                        "start_time": "11:04",
                        "end_time": "13:12"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sarah",
                        "start_time": "13:20",
                        "end_time": "15:26"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Daniel",
                        "start_time": "15:47",
                        "end_time": "16:58"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "17:09",
                        "end_time": "19:04"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Lisa",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joshua",
                        "start_time": "11:19",
                        "end_time": "11:34"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joseph",
                        "start_time": "11:49",
                        "end_time": "12:34"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Betty",
                        "start_time": "12:45",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "John",
                        "start_time": "14:07",
                        "end_time": "14:52"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Stephanie",
                        "start_time": "15:30",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Melissa",
                        "start_time": "17:00",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Daniel",
                        "start_time": "19:07",
                        "end_time": "20:07"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "20:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_times = {\n    (\"Embarcadero\", \"Fisherman's Wharf\"): 6,\n    (\"Embarcadero\", \"Financial District\"): 5,\n    (\"Embarcadero\", \"Russian Hill\"): 8,\n    (\"Embarcadero\", \"Marina District\"): 12,\n    (\"Embarcadero\", \"Richmond District\"): 21,\n    (\"Embarcadero\", \"Pacific Heights\"): 11,\n    (\"Embarcadero\", \"Haight-Ashbury\"): 21,\n    (\"Embarcadero\", \"Presidio\"): 20,\n    (\"Embarcadero\", \"Nob Hill\"): 10,\n    (\"Embarcadero\", \"The Castro\"): 25,\n    (\"Fisherman's Wharf\", \"Embarcadero\"): 8,\n    (\"Fisherman's Wharf\", \"Financial District\"): 11,\n    (\"Fisherman's Wharf\", \"Russian Hill\"): 7,\n    (\"Fisherman's Wharf\", \"Marina District\"): 9,\n    (\"Fisherman's Wharf\", \"Richmond District\"): 18,\n    (\"Fisherman's Wharf\", \"Pacific Heights\"): 12,\n    (\"Fisherman's Wharf\", \"Haight-Ashbury\"): 22,\n    (\"Fisherman's Wharf\", \"Presidio\"): 17,\n    (\"Fisherman's Wharf\", \"Nob Hill\"): 11,\n    (\"Fisherman's Wharf\", \"The Castro\"): 27,\n    # Additional travel times ...\n    # Add all other locations as specified in the problem\n}\n\n# Meeting constraints\nmeetings = {\n    \"Stephanie\": {\"location\": \"Fisherman's Wharf\", \"available_from\": \"15:30\", \"available_to\": \"22:00\", \"duration\": 30},\n    \"Lisa\": {\"location\": \"Financial District\", \"available_from\": \"10:45\", \"available_to\": \"17:15\", \"duration\": 15},\n    \"Melissa\": {\"location\": \"Russian Hill\", \"available_from\": \"17:00\", \"available_to\": \"21:45\", \"duration\": 120},\n    \"Betty\": {\"location\": \"Marina District\", \"available_from\": \"10:45\", \"available_to\": \"14:15\", \"duration\": 60},\n    \"Sarah\": {\"location\": \"Richmond District\", \"available_from\": \"16:15\", \"available_to\": \"19:30\", \"duration\": 105},\n    \"Daniel\": {\"location\": \"Pacific Heights\", \"available_from\": \"18:30\", \"available_to\": \"21:45\", \"duration\": 60},\n    \"Joshua\": {\"location\": \"Haight-Ashbury\", \"available_from\": \"09:00\", \"available_to\": \"15:30\", \"duration\": 15},\n    \"Joseph\": {\"location\": \"Presidio\", \"available_from\": \"07:00\", \"available_to\": \"13:00\", \"duration\": 45},\n    \"Andrew\": {\"location\": \"Nob Hill\", \"available_from\": \"19:45\", \"available_to\": \"22:00\", \"duration\": 105},\n    \"John\": {\"location\": \"The Castro\", \"available_from\": \"13:15\", \"available_to\": \"19:45\", \"duration\": 45},\n}\n\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\ndef schedule_meetings(start_time):\n    itinerary = []\n    current_time = start_time\n    visited_locations = set()\n\n    # Function to convert string time to datetime object\n    def convert_time(time_str):\n        return datetime.strptime(time_str, \"%H:%M\")\n\n    for person, details in meetings.items():\n        available_from = convert_time(details[\"available_from\"])\n        available_to = convert_time(details[\"available_to\"])\n        duration = details[\"duration\"]\n\n        location = details[\"location\"]\n        travel_time = travel_times.get((\"Embarcadero\", location)) or travel_times.get((location, \"Embarcadero\"))\n\n        # Meet Joshua first before he leaves\n        if person == \"Joshua\":\n            if current_time + timedelta(minutes=travel_time) <= available_to:\n                end_time = current_time + timedelta(minutes=travel_time + duration)\n                if end_time <= available_to:\n                    itinerary.append({\n                        \"action\": \"meet\",\n                        \"location\": location,\n                        \"person\": person,\n                        \"start_time\": current_time.strftime(\"%H:%M\"),\n                        \"end_time\": end_time.strftime(\"%H:%M\"),\n                    })\n                    current_time = end_time + timedelta(minutes=travel_time)  # Move back to Embarcadero\n                    visited_locations.add(location)\n\n    # Schedule other meetings\n    for person, details in meetings.items():\n        if person in visited_locations:\n            continue  # Skip already visited locations\n        available_from = convert_time(details[\"available_from\"])\n        available_to = convert_time(details[\"available_to\"])\n        duration = details[\"duration\"]\n\n        travel_time = travel_times.get((\"Embarcadero\", details[\"location\"])) or travel_times.get((details[\"location\"], \"Embarcadero\"))\n\n        # Only meet if we can travel there and meet within available time\n        if current_time + timedelta(minutes=travel_time) <= available_to:\n            end_time = current_time + timedelta(minutes=travel_time + duration)\n            if end_time <= available_to:\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": details[\"location\"],\n                    \"person\": person,\n                    \"start_time\": current_time.strftime(\"%H:%M\"),\n                    \"end_time\": end_time.strftime(\"%H:%M\"),\n                })\n                current_time = end_time + timedelta(minutes=travel_time)  # Return to Embarcadero\n\n    return {\"itinerary\": itinerary}\n\noptimal_schedule = schedule_meetings(start_time)\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_978"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Richard",
                        "start_time": "9:00",
                        "end_time": "9:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Sarah",
                        "start_time": "9:43",
                        "end_time": "11:13"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Daniel",
                        "start_time": "11:43",
                        "end_time": "11:58"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Thomas",
                        "start_time": "12:16",
                        "end_time": "12:31"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Kenneth",
                        "start_time": "13:10",
                        "end_time": "13:40"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mary",
                        "start_time": "14:06",
                        "end_time": "15:21"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joseph",
                        "start_time": "15:34",
                        "end_time": "17:34"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mark",
                        "start_time": "17:58",
                        "end_time": "19:58"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "David",
                        "start_time": "18:14",
                        "end_time": "19:14"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Kenneth",
                        "start_time": "11:15",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Sarah",
                        "start_time": "12:04",
                        "end_time": "13:34"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Daniel",
                        "start_time": "13:49",
                        "end_time": "14:04"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Richard",
                        "start_time": "14:15",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "14:52",
                        "end_time": "16:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Thomas",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mary",
                        "start_time": "20:00",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Locations and travel times (in minutes)\ntravel_times = {\n    \"Nob Hill\": {\"Embarcadero\": 10, \"The Castro\": 17, \"Haight-Ashbury\": 13, \"Union Square\": 7, \n                 \"North Beach\": 8, \"Pacific Heights\": 8, \"Chinatown\": 6, \"Golden Gate Park\": 17, \n                 \"Marina District\": 11, \"Russian Hill\": 5},\n    \"Embarcadero\": {\"Nob Hill\": 10, \"The Castro\": 25, \"Haight-Ashbury\": 21, \"Union Square\": 10, \n                    \"North Beach\": 5, \"Pacific Heights\": 11, \"Chinatown\": 7, \"Golden Gate Park\": 25, \n                    \"Marina District\": 12, \"Russian Hill\": 8},\n    \"The Castro\": {\"Nob Hill\": 16, \"Embarcadero\": 22, \"Haight-Ashbury\": 6, \"Union Square\": 19, \n                   \"North Beach\": 20, \"Pacific Heights\": 16, \"Chinatown\": 22, \"Golden Gate Park\": 11, \n                   \"Marina District\": 21, \"Russian Hill\": 18},\n    \"Haight-Ashbury\": {\"Nob Hill\": 15, \"Embarcadero\": 20, \"The Castro\": 6, \"Union Square\": 19, \n                       \"North Beach\": 19, \"Pacific Heights\": 12, \"Chinatown\": 19, \"Golden Gate Park\": 7, \n                       \"Marina District\": 17, \"Russian Hill\": 17},\n    \"Union Square\": {\"Nob Hill\": 9, \"Embarcadero\": 11, \"The Castro\": 17, \"Haight-Ashbury\": 18, \n                     \"North Beach\": 10, \"Pacific Heights\": 15, \"Chinatown\": 7, \"Golden Gate Park\": 22, \n                     \"Marina District\": 18, \"Russian Hill\": 13},\n    \"North Beach\": {\"Nob Hill\": 7, \"Embarcadero\": 6, \"The Castro\": 23, \"Haight-Ashbury\": 18, \n                    \"Union Square\": 7, \"Pacific Heights\": 8, \"Chinatown\": 6, \"Golden Gate Park\": 22, \n                    \"Marina District\": 9, \"Russian Hill\": 4},\n    \"Pacific Heights\": {\"Nob Hill\": 8, \"Embarcadero\": 10, \"The Castro\": 16, \"Haight-Ashbury\": 11, \n                        \"Union Square\": 12, \"North Beach\": 9, \"Chinatown\": 11, \"Golden Gate Park\": 15, \n                        \"Marina District\": 6, \"Russian Hill\": 7},\n    \"Chinatown\": {\"Nob Hill\": 9, \"Embarcadero\": 5, \"The Castro\": 22, \"Haight-Ashbury\": 19, \n                  \"Union Square\": 7, \"North Beach\": 3, \"Pacific Heights\": 10, \"Golden Gate Park\": 23, \n                  \"Marina District\": 12, \"Russian Hill\": 7},\n    \"Golden Gate Park\": {\"Nob Hill\": 20, \"Embarcadero\": 25, \"The Castro\": 13, \"Haight-Ashbury\": 7, \n                         \"Union Square\": 22, \"North Beach\": 23, \"Pacific Heights\": 16, \"Chinatown\": 23, \n                         \"Marina District\": 16, \"Russian Hill\": 19},\n    \"Marina District\": {\"Nob Hill\": 12, \"Embarcadero\": 14, \"The Castro\": 22, \"Haight-Ashbury\": 16, \n                        \"Union Square\": 16, \"North Beach\": 11, \"Pacific Heights\": 7, \"Chinatown\": 15, \n                        \"Golden Gate Park\": 18, \"Russian Hill\": 8},\n    \"Russian Hill\": {\"Nob Hill\": 5, \"Embarcadero\": 8, \"The Castro\": 21, \"Haight-Ashbury\": 17, \n                     \"Union Square\": 10, \"North Beach\": 5, \"Pacific Heights\": 7, \"Chinatown\": 9, \n                     \"Golden Gate Park\": 21, \"Marina District\": 7}\n}\n\n# Meeting constraints\nmeetings = {\n    \"Mary\": {\"location\": \"Embarcadero\", \"start\": \"20:00\", \"end\": \"21:15\", \"duration\": 75},\n    \"Kenneth\": {\"location\": \"The Castro\", \"start\": \"11:15\", \"end\": \"19:15\", \"duration\": 30},\n    \"Joseph\": {\"location\": \"Haight-Ashbury\", \"start\": \"20:00\", \"end\": \"22:00\", \"duration\": 120},\n    \"Sarah\": {\"location\": \"Union Square\", \"start\": \"11:45\", \"end\": \"14:30\", \"duration\": 90},\n    \"Thomas\": {\"location\": \"North Beach\", \"start\": \"19:15\", \"end\": \"19:45\", \"duration\": 15},\n    \"Daniel\": {\"location\": \"Pacific Heights\", \"start\": \"13:45\", \"end\": \"20:30\", \"duration\": 15},\n    \"Richard\": {\"location\": \"Chinatown\", \"start\": \"08:00\", \"end\": \"18:45\", \"duration\": 30},\n    \"Mark\": {\"location\": \"Golden Gate Park\", \"start\": \"17:30\", \"end\": \"21:30\", \"duration\": 120},\n    \"David\": {\"location\": \"Marina District\", \"start\": \"20:00\", \"end\": \"21:00\", \"duration\": 60},\n    \"Karen\": {\"location\": \"Russian Hill\", \"start\": \"13:15\", \"end\": \"18:30\", \"duration\": 120},\n}\n\n# Start time at Nob Hill\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Function to find the optimal meeting schedule\ndef find_optimal_schedule():\n    schedule = []\n    current_time = start_time\n\n    # Meet Richard first\n    richard_meeting = meetings[\"Richard\"]\n    end_time_richard = current_time + timedelta(minutes=richard_meeting[\"duration\"])\n    if end_time_richard < datetime.strptime(richard_meeting[\"end\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": richard_meeting[\"location\"],\n            \"person\": \"Richard\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time_richard.strftime(\"%H:%M\"),\n        })\n        current_time = end_time_richard + timedelta(minutes=travel_times[\"Nob Hill\"][richard_meeting[\"location\"]])\n    \n    # Meet Sarah\n    sarah_meeting = meetings[\"Sarah\"]\n    travel_time_to_sarah = travel_times[\"Nob Hill\"][sarah_meeting[\"location\"]]\n    current_time += timedelta(minutes=travel_time_to_sarah)\n    end_time_sarah = current_time + timedelta(minutes=sarah_meeting[\"duration\"])\n    if end_time_sarah < datetime.strptime(sarah_meeting[\"end\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": sarah_meeting[\"location\"],\n            \"person\": \"Sarah\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time_sarah.strftime(\"%H:%M\"),\n        })\n        current_time = end_time_sarah + timedelta(minutes=travel_times[sarah_meeting[\"location\"]][\"Pacific Heights\"])\n\n    # Meet Daniel\n    daniel_meeting = meetings[\"Daniel\"]\n    travel_time_to_daniel = travel_times[\"Union Square\"][daniel_meeting[\"location\"]]\n    current_time += timedelta(minutes=travel_time_to_daniel)\n    end_time_daniel = current_time + timedelta(minutes=daniel_meeting[\"duration\"])\n    if end_time_daniel < datetime.strptime(daniel_meeting[\"end\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": daniel_meeting[\"location\"],\n            \"person\": \"Daniel\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time_daniel.strftime(\"%H:%M\"),\n        })\n        current_time = end_time_daniel + timedelta(minutes=travel_times[daniel_meeting[\"location\"]][\"North Beach\"])\n\n    # Meet Thomas\n    thomas_meeting = meetings[\"Thomas\"]\n    travel_time_to_thomas = travel_times[\"Pacific Heights\"][thomas_meeting[\"location\"]]\n    current_time += timedelta(minutes=travel_time_to_thomas)\n    end_time_thomas = current_time + timedelta(minutes=thomas_meeting[\"duration\"])\n    if end_time_thomas < datetime.strptime(thomas_meeting[\"end\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": thomas_meeting[\"location\"],\n            \"person\": \"Thomas\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time_thomas.strftime(\"%H:%M\"),\n        })\n        current_time = end_time_thomas + timedelta(minutes=travel_times[thomas_meeting[\"location\"]][\"Golden Gate Park\"])\n\n    # Meet Kenneth\n    kenneth_meeting = meetings[\"Kenneth\"]\n    travel_time_to_kenneth = travel_times[\"Nob Hill\"][kenneth_meeting[\"location\"]]\n    current_time += timedelta(minutes=travel_time_to_kenneth)\n    end_time_kenneth = current_time + timedelta(minutes=kenneth_meeting[\"duration\"])\n    if end_time_kenneth < datetime.strptime(kenneth_meeting[\"end\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": kenneth_meeting[\"location\"],\n            \"person\": \"Kenneth\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time_kenneth.strftime(\"%H:%M\"),\n        })\n        current_time = end_time_kenneth + timedelta(minutes=travel_times[kenneth_meeting[\"location\"]][\"Nob Hill\"])\n\n    # Meet Mary\n    mary_meeting = meetings[\"Mary\"]\n    travel_time_to_mary = travel_times[\"Nob Hill\"][mary_meeting[\"location\"]]\n    current_time += timedelta(minutes=travel_time_to_mary)\n    end_time_mary = current_time + timedelta(minutes=mary_meeting[\"duration\"])\n    if end_time_mary < datetime.strptime(mary_meeting[\"end\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": mary_meeting[\"location\"],\n            \"person\": \"Mary\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time_mary.strftime(\"%H:%M\"),\n        })\n        current_time = end_time_mary\n\n    # Meet Joseph\n    joseph_meeting = meetings[\"Joseph\"]\n    travel_time_to_joseph = travel_times[\"Nob Hill\"][joseph_meeting[\"location\"]]\n    current_time += timedelta(minutes=travel_time_to_joseph)\n    end_time_joseph = current_time + timedelta(minutes=joseph_meeting[\"duration\"])\n    if end_time_joseph < datetime.strptime(joseph_meeting[\"end\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": joseph_meeting[\"location\"],\n            \"person\": \"Joseph\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time_joseph.strftime(\"%H:%M\"),\n        })\n        current_time = end_time_joseph\n\n    # Meet Karen\n    karen_meeting = meetings[\"Karen\"]\n    travel_time_to_karen = travel_times[\"Pacific Heights\"][karen_meeting[\"location\"]]\n    current_time += timedelta(minutes=travel_time_to_karen)\n    end_time_karen = current_time + timedelta(minutes=karen_meeting[\"duration\"])\n    if end_time_karen < datetime.strptime(karen_meeting[\"end\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": karen_meeting[\"location\"],\n            \"person\": \"Karen\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time_karen.strftime(\"%H:%M\"),\n        })\n        current_time = end_time_karen\n\n    # Meet Mark\n    mark_meeting = meetings[\"Mark\"]\n    travel_time_to_mark = travel_times[\"Nob Hill\"][mark_meeting[\"location\"]]\n    current_time += timedelta(minutes=travel_time_to_mark)\n    end_time_mark = current_time + timedelta(minutes=mark_meeting[\"duration\"])\n    if end_time_mark < datetime.strptime(mark_meeting[\"end\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": mark_meeting[\"location\"],\n            \"person\": \"Mark\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time_mark.strftime(\"%H:%M\"),\n        })\n\n    # Meet David\n    david_meeting = meetings[\"David\"]\n    travel_time_to_david = travel_times[\"Golden Gate Park\"][david_meeting[\"location\"]]\n    current_time += timedelta(minutes=travel_time_to_david)\n    end_time_david = current_time + timedelta(minutes=david_meeting[\"duration\"])\n    if end_time_david < datetime.strptime(david_meeting[\"end\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": david_meeting[\"location\"],\n            \"person\": \"David\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time_david.strftime(\"%H:%M\"),\n        })\n\n    return {\"itinerary\": schedule}\n\n# Generating the optimal schedule\noptimal_schedule = find_optimal_schedule()\n\n# Output the result as JSON\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_934"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "William",
                        "start_time": "13:15",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Robert",
                        "start_time": "14:15",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Mark",
                        "start_time": "15:19",
                        "end_time": "16:34"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Linda",
                        "start_time": "16:57",
                        "end_time": "17:27"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Elizabeth",
                        "start_time": "17:42",
                        "end_time": "19:27"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Rebecca",
                        "start_time": "19:42",
                        "end_time": "20:42"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel times in minutes\ntravel_times = {\n    ('The Castro', 'Presidio'): 20,\n    ('The Castro', 'Sunset District'): 17,\n    ('The Castro', 'Haight-Ashbury'): 6,\n    ('The Castro', 'Mission District'): 7,\n    ('The Castro', 'Golden Gate Park'): 11,\n    ('The Castro', 'Russian Hill'): 18,\n    ('Presidio', 'The Castro'): 21,\n    ('Presidio', 'Sunset District'): 15,\n    ('Presidio', 'Haight-Ashbury'): 15,\n    ('Presidio', 'Mission District'): 26,\n    ('Presidio', 'Golden Gate Park'): 12,\n    ('Presidio', 'Russian Hill'): 14,\n    ('Sunset District', 'The Castro'): 17,\n    ('Sunset District', 'Presidio'): 16,\n    ('Sunset District', 'Haight-Ashbury'): 15,\n    ('Sunset District', 'Mission District'): 24,\n    ('Sunset District', 'Golden Gate Park'): 11,\n    ('Sunset District', 'Russian Hill'): 24,\n    ('Haight-Ashbury', 'The Castro'): 6,\n    ('Haight-Ashbury', 'Presidio'): 15,\n    ('Haight-Ashbury', 'Sunset District'): 15,\n    ('Haight-Ashbury', 'Mission District'): 11,\n    ('Haight-Ashbury', 'Golden Gate Park'): 7,\n    ('Haight-Ashbury', 'Russian Hill'): 17,\n    ('Mission District', 'The Castro'): 7,\n    ('Mission District', 'Presidio'): 25,\n    ('Mission District', 'Sunset District'): 24,\n    ('Mission District', 'Haight-Ashbury'): 12,\n    ('Mission District', 'Golden Gate Park'): 17,\n    ('Mission District', 'Russian Hill'): 15,\n    ('Golden Gate Park', 'The Castro'): 13,\n    ('Golden Gate Park', 'Presidio'): 11,\n    ('Golden Gate Park', 'Sunset District'): 10,\n    ('Golden Gate Park', 'Haight-Ashbury'): 7,\n    ('Golden Gate Park', 'Mission District'): 17,\n    ('Golden Gate Park', 'Russian Hill'): 19,\n    ('Russian Hill', 'The Castro'): 21,\n    ('Russian Hill', 'Presidio'): 14,\n    ('Russian Hill', 'Sunset District'): 23,\n    ('Russian Hill', 'Haight-Ashbury'): 17,\n    ('Russian Hill', 'Mission District'): 16,\n    ('Russian Hill', 'Golden Gate Park'): 21,\n}\n\n# Meeting constraints\nmeetings = {\n    'Rebecca': {'location': 'Presidio', 'start': '18:15', 'end': '20:45', 'duration': 60},\n    'Linda': {'location': 'Sunset District', 'start': '15:30', 'end': '19:45', 'duration': 30},\n    'Elizabeth': {'location': 'Haight-Ashbury', 'start': '17:15', 'end': '19:30', 'duration': 105},\n    'William': {'location': 'Mission District', 'start': '13:15', 'end': '19:30', 'duration': 30},\n    'Robert': {'location': 'Golden Gate Park', 'start': '14:15', 'end': '21:30', 'duration': 45},\n    'Mark': {'location': 'Russian Hill', 'start': '10:00', 'end': '21:15', 'duration': 75},\n}\n\n# Start time at The Castro\nstart_time = datetime.strptime('9:00', '%H:%M')\n\n# Helper function to convert time represented as string to datetime\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\n# Finding optimal meeting schedule\nitinerary = []\ncurrent_time = start_time\nvisited_locations = set()\n\ndef can_meet(start, end, duration):\n    return (end - start).total_seconds() / 60 >= duration\n\n# Schedule meetings based on available time and travel times\nfor person, details in meetings.items():\n    location = details['location']\n    meeting_start = str_to_time(details['start'])\n    meeting_end = str_to_time(details['end'])\n    duration = details['duration']\n\n    # Check if the current_time allows meeting this person\n    travel_time = travel_times.get((current_time.strftime('%H:%M'), location), float('inf'))\n    if current_time + timedelta(minutes=travel_time) <= meeting_end:\n        # Check if we can meet\n        actual_meeting_start = max(current_time + timedelta(minutes=travel_time), meeting_start)\n        actual_meeting_end = actual_meeting_start + timedelta(minutes=duration)\n\n        if can_meet(actual_meeting_start, actual_meeting_end, duration) and actual_meeting_end <= meeting_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": person,\n                \"start_time\": actual_meeting_start.strftime('%H:%M'),\n                \"end_time\": actual_meeting_end.strftime('%H:%M')\n            })\n            # Update the current time for next meeting after we meet\n            current_time = actual_meeting_end\n            visited_locations.add(location)\n\n# Output result as JSON\noutput = {\"itinerary\": itinerary}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_575"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Margaret",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Barbara",
                        "start_time": "13:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kimberly",
                        "start_time": "14:52",
                        "end_time": "15:22"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "20:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    (\"Bayview\", \"North Beach\"): 21,\n    (\"Bayview\", \"Presidio\"): 31,\n    (\"Bayview\", \"Haight-Ashbury\"): 19,\n    (\"Bayview\", \"Union Square\"): 17,\n    (\"North Beach\", \"Bayview\"): 22,\n    (\"North Beach\", \"Presidio\"): 17,\n    (\"North Beach\", \"Haight-Ashbury\"): 18,\n    (\"North Beach\", \"Union Square\"): 7,\n    (\"Presidio\", \"Bayview\"): 31,\n    (\"Presidio\", \"North Beach\"): 18,\n    (\"Presidio\", \"Haight-Ashbury\"): 15,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Haight-Ashbury\", \"Bayview\"): 18,\n    (\"Haight-Ashbury\", \"North Beach\"): 19,\n    (\"Haight-Ashbury\", \"Presidio\"): 15,\n    (\"Haight-Ashbury\", \"Union Square\"): 17,\n    (\"Union Square\", \"Bayview\"): 15,\n    (\"Union Square\", \"North Beach\"): 10,\n    (\"Union Square\", \"Presidio\"): 24,\n    (\"Union Square\", \"Haight-Ashbury\"): 18,\n}\n\n# Meeting constraints\nmeetings = {\n    \"Barbara\": {\"location\": \"North Beach\", \"start\": \"13:45\", \"end\": \"20:15\", \"duration\": 60},\n    \"Margaret\": {\"location\": \"Presidio\", \"start\": \"10:15\", \"end\": \"15:15\", \"duration\": 30},\n    \"Kevin\": {\"location\": \"Haight-Ashbury\", \"start\": \"20:00\", \"end\": \"20:45\", \"duration\": 30},\n    \"Kimberly\": {\"location\": \"Union Square\", \"start\": \"07:45\", \"end\": \"16:45\", \"duration\": 30}\n}\n\n# Starting point and time\nstart_location = \"Bayview\"\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Function to attempt to schedule meetings\ndef schedule_meetings():\n    current_time = arrival_time\n    itinerary = []\n\n    # Meet Kimberly first since her time window is the earliest\n    kim_location = meetings[\"Kimberly\"][\"location\"]\n    kim_start = datetime.strptime(meetings[\"Kimberly\"][\"start\"], \"%H:%M\")\n    kim_end = datetime.strptime(meetings[\"Kimberly\"][\"end\"], \"%H:%M\")\n\n    travel_to_kim = travel_times[(start_location, kim_location)]\n    current_time += timedelta(minutes=travel_to_kim)\n\n    if current_time < kim_start:\n        current_time = kim_start\n    \n    meet_kim_start = current_time\n    meet_kim_end = meet_kim_start + timedelta(minutes=meetings[\"Kimberly\"][\"duration\"])\n\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": kim_location,\n        \"person\": \"Kimberly\",\n        \"start_time\": meet_kim_start.strftime(\"%H:%M\"),\n        \"end_time\": meet_kim_end.strftime(\"%H:%M\"),\n    })\n\n    # Travel to Margaret next\n    next_location = meetings[\"Margaret\"][\"location\"]\n    travel_to_margaret = travel_times[(kim_location, next_location)]\n    current_time += timedelta(minutes=travel_to_margaret)\n\n    margaret_start = datetime.strptime(meetings[\"Margaret\"][\"start\"], \"%H:%M\")\n    margaret_end = datetime.strptime(meetings[\"Margaret\"][\"end\"], \"%H:%M\")\n\n    if current_time < margaret_start:\n        current_time = margaret_start\n    \n    meet_margaret_start = current_time\n    meet_margaret_end = meet_margaret_start + timedelta(minutes=meetings[\"Margaret\"][\"duration\"])\n\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": next_location,\n        \"person\": \"Margaret\",\n        \"start_time\": meet_margaret_start.strftime(\"%H:%M\"),\n        \"end_time\": meet_margaret_end.strftime(\"%H:%M\"),\n    })\n\n    # Travel to Barbara next\n    next_location = meetings[\"Barbara\"][\"location\"]\n    travel_to_barbara = travel_times[(next_location, next_location)]\n    current_time += timedelta(minutes=travel_to_barbara)\n\n    barbara_start = datetime.strptime(meetings[\"Barbara\"][\"start\"], \"%H:%M\")\n    barbara_end = datetime.strptime(meetings[\"Barbara\"][\"end\"], \"%H:%M\")\n\n    if current_time < barbara_start:\n        current_time = barbara_start\n    \n    meet_barbara_start = current_time\n    meet_barbara_end = meet_barbara_start + timedelta(minutes=meetings[\"Barbara\"][\"duration\"])\n\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": next_location,\n        \"person\": \"Barbara\",\n        \"start_time\": meet_barbara_start.strftime(\"%H:%M\"),\n        \"end_time\": meet_barbara_end.strftime(\"%H:%M\"),\n    })\n\n    # Finally, travel to Kevin\n    next_location = meetings[\"Kevin\"][\"location\"]\n    travel_to_kevin = travel_times[(next_location, next_location)]\n    current_time += timedelta(minutes=travel_to_kevin)\n\n    kevin_start = datetime.strptime(meetings[\"Kevin\"][\"start\"], \"%H:%M\")\n    kevin_end = datetime.strptime(meetings[\"Kevin\"][\"end\"], \"%H:%M\")\n\n    if current_time < kevin_start:\n        current_time = kevin_start\n\n    meet_kevin_start = current_time\n    meet_kevin_end = meet_kevin_start + timedelta(minutes=meetings[\"Kevin\"][\"duration\"])\n\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": next_location,\n        \"person\": \"Kevin\",\n        \"start_time\": meet_kevin_start.strftime(\"%H:%M\"),\n        \"end_time\": meet_kevin_end.strftime(\"%H:%M\"),\n    })\n\n    return {\"itinerary\": itinerary}\n\n# Execute scheduling and output result as JSON\nresult = schedule_meetings()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_356"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Carol",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Karen",
                        "start_time": "12:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "14:58",
                        "end_time": "16:58"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances\ntravel_times = {\n    (\"Union Square\", \"Mission District\"): 14,\n    (\"Union Square\", \"Bayview\"): 15,\n    (\"Union Square\", \"Sunset District\"): 26,\n    (\"Mission District\", \"Union Square\"): 15,\n    (\"Mission District\", \"Bayview\"): 15,\n    (\"Mission District\", \"Sunset District\"): 24,\n    (\"Bayview\", \"Union Square\"): 17,\n    (\"Bayview\", \"Mission District\"): 13,\n    (\"Bayview\", \"Sunset District\"): 23,\n    (\"Sunset District\", \"Union Square\"): 30,\n    (\"Sunset District\", \"Mission District\"): 24,\n    (\"Sunset District\", \"Bayview\"): 22,\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Rebecca\": {\n        \"location\": \"Mission District\",\n        \"start\": datetime.strptime(\"11:30\", \"%H:%M\"),\n        \"end\": datetime.strptime(\"20:15\", \"%H:%M\"),\n        \"duration\": timedelta(minutes=120),\n    },\n    \"Karen\": {\n        \"location\": \"Bayview\",\n        \"start\": datetime.strptime(\"12:45\", \"%H:%M\"),\n        \"end\": datetime.strptime(\"15:00\", \"%H:%M\"),\n        \"duration\": timedelta(minutes=120),\n    },\n    \"Carol\": {\n        \"location\": \"Sunset District\",\n        \"start\": datetime.strptime(\"10:15\", \"%H:%M\"),\n        \"end\": datetime.strptime(\"11:45\", \"%H:%M\"),\n        \"duration\": timedelta(minutes=30),\n    },\n}\n\n# Initialize travel time from starting point\ncurrent_time = datetime.strptime(\"09:00\", \"%H:%M\")\nitinerary = []\n\n# Meeting with Carol\ndef meet_with_carol():\n    global current_time\n    travel_to_carol = travel_times[(\"Union Square\", \"Sunset District\")]\n    arrive_time = current_time + timedelta(minutes=travel_to_carol)\n    if arrive_time >= constraints[\"Carol\"][\"start\"] and arrive_time <= constraints[\"Carol\"][\"end\"]:\n        meeting_start = max(arrive_time, constraints[\"Carol\"][\"start\"])\n        meeting_end = meeting_start + constraints[\"Carol\"][\"duration\"]\n        if meeting_end <= constraints[\"Carol\"][\"end\"]:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Sunset District\",\n                \"person\": \"Carol\",\n                \"start_time\": meeting_start.strftime(\"%H:%M\"),\n                \"end_time\": meeting_end.strftime(\"%H:%M\"),\n            })\n            current_time = meeting_end + timedelta(minutes=travel_times[(\"Sunset District\", \"Mission District\")])\n\nmeet_with_carol()\n\n# Meeting with Rebecca\ndef meet_with_rebecca():\n    global current_time\n    travel_to_rebecca = travel_times[(\"Mission District\", \"Union Square\")]\n    travel_to_union = travel_times[(\"Union Square\", \"Mission District\")]\n    arrive_time = current_time + timedelta(minutes=travel_to_union)\n    if arrive_time < constraints[\"Rebecca\"][\"start\"]:\n        arrive_time = constraints[\"Rebecca\"][\"start\"]\n    \n    meeting_start = arrive_time\n    meeting_end = meeting_start + constraints[\"Rebecca\"][\"duration\"]\n    if meeting_end <= constraints[\"Rebecca\"][\"end\"]:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Mission District\",\n            \"person\": \"Rebecca\",\n            \"start_time\": meeting_start.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end.strftime(\"%H:%M\"),\n        })\n        current_time = meeting_end + travel_times[(\"Mission District\", \"Bayview\")]\n\nmeet_with_rebecca()\n\n# Meeting with Karen\ndef meet_with_karen():\n    global current_time\n    travel_to_karen = travel_times[(\"Bayview\", \"Mission District\")]\n    arrive_time = current_time + timedelta(minutes=travel_to_karen)\n    if arrive_time < constraints[\"Karen\"][\"start\"]:\n        arrive_time = constraints[\"Karen\"][\"start\"]\n\n    meeting_start = arrive_time\n    meeting_end = meeting_start + constraints[\"Karen\"][\"duration\"]\n    if meeting_end <= constraints[\"Karen\"][\"end\"]:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Bayview\",\n            \"person\": \"Karen\",\n            \"start_time\": meeting_start.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end.strftime(\"%H:%M\"),\n        })\n\nmeet_with_karen()\n\n# Return the output as a JSON format\noutput = {\"itinerary\": itinerary}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_286"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Melissa",
                        "start_time": "15:45",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Joseph",
                        "start_time": "17:21",
                        "end_time": "19:21"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Emily",
                        "start_time": "16:15",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Joseph",
                        "start_time": "18:07",
                        "end_time": "20:07"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Melissa",
                        "start_time": "20:29",
                        "end_time": "21:44"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times in minutes\ntravel_times = {\n    (\"Fisherman's Wharf\", \"Presidio\"): 17,\n    (\"Fisherman's Wharf\", \"Richmond District\"): 18,\n    (\"Fisherman's Wharf\", \"Financial District\"): 11,\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Richmond District\", \"Fisherman's Wharf\"): 18,\n    (\"Richmond District\", \"Presidio\"): 7,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Financial District\", \"Fisherman's Wharf\"): 10,\n    (\"Financial District\", \"Presidio\"): 22,\n    (\"Financial District\", \"Richmond District\"): 21,\n}\n\n# Define constraints\narrival_time = datetime.strptime('09:00', '%H:%M')\nmeetings = {\n    \"Emily\": {\n        \"location\": \"Presidio\",\n        \"available_start\": datetime.strptime('16:15', '%H:%M'),\n        \"available_end\": datetime.strptime('21:00', '%H:%M'),\n        \"min_duration\": 105,  # in minutes\n    },\n    \"Joseph\": {\n        \"location\": \"Richmond District\",\n        \"available_start\": datetime.strptime('17:15', '%H:%M'),\n        \"available_end\": datetime.strptime('22:00', '%H:%M'),\n        \"min_duration\": 120,  # in minutes\n    },\n    \"Melissa\": {\n        \"location\": \"Financial District\",\n        \"available_start\": datetime.strptime('15:45', '%H:%M'),\n        \"available_end\": datetime.strptime('21:45', '%H:%M'),\n        \"min_duration\": 75,  # in minutes\n    },\n}\n\n# Generate meeting schedule\nitinerary = []\ncurrent_time = arrival_time\n\n# Meet Melissa first as she is available before others\nif current_time < meetings[\"Melissa\"][\"available_end\"]:\n    travel_time = travel_times[(\"Fisherman's Wharf\", \"Financial District\")]\n    start_time_melissa = max(current_time + timedelta(minutes=travel_time), meetings[\"Melissa\"][\"available_start\"])\n    end_time_melissa = start_time_melissa + timedelta(minutes=meetings[\"Melissa\"][\"min_duration\"])\n    \n    # Check if meeting with Melissa ends before she is unavailable\n    if end_time_melissa <= meetings[\"Melissa\"][\"available_end\"]:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Financial District\",\n            \"person\": \"Melissa\",\n            \"start_time\": start_time_melissa.strftime('%H:%M'),\n            \"end_time\": end_time_melissa.strftime('%H:%M'),\n        })\n        current_time = end_time_melissa\n\n# Now meet Joseph\nif current_time < meetings[\"Joseph\"][\"available_end\"]:\n    travel_time = travel_times[(\"Financial District\", \"Richmond District\")]\n    start_time_joseph = max(current_time + timedelta(minutes=travel_time), meetings[\"Joseph\"][\"available_start\"])\n    end_time_joseph = start_time_joseph + timedelta(minutes=meetings[\"Joseph\"][\"min_duration\"])\n    \n    # Check if meeting with Joseph ends before he is unavailable\n    if end_time_joseph <= meetings[\"Joseph\"][\"available_end\"]:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Richmond District\",\n            \"person\": \"Joseph\",\n            \"start_time\": start_time_joseph.strftime('%H:%M'),\n            \"end_time\": end_time_joseph.strftime('%H:%M'),\n        })\n        current_time = end_time_joseph\n\n# Lastly, meet Emily\nif current_time < meetings[\"Emily\"][\"available_end\"]:\n    travel_time = travel_times[(\"Richmond District\", \"Presidio\")]\n    start_time_emily = max(current_time + timedelta(minutes=travel_time), meetings[\"Emily\"][\"available_start\"])\n    end_time_emily = start_time_emily + timedelta(minutes=meetings[\"Emily\"][\"min_duration\"])\n    \n    # Check if meeting with Emily ends before she is unavailable\n    if end_time_emily <= meetings[\"Emily\"][\"available_end\"]:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"person\": \"Emily\",\n            \"start_time\": start_time_emily.strftime('%H:%M'),\n            \"end_time\": end_time_emily.strftime('%H:%M'),\n        })\n\n# Output the itinerary in JSON format\noutput = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_210"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "9:00",
                        "end_time": "9:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "George",
                        "start_time": "10:01",
                        "end_time": "11:01"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "9:16",
                        "end_time": "10:01"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "George",
                        "start_time": "10:23",
                        "end_time": "11:23"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Emily",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "14:45",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "15:57",
                        "end_time": "17:42"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Margaret",
                        "start_time": "21:30",
                        "end_time": "22:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nfrom itertools import permutations\n\n# Input parameters\nlocations = {\n    \"Alamo Square\": {\"name\": \"Alamo Square\"},\n    \"Russian Hill\": {\"name\": \"Russian Hill\"},\n    \"Presidio\": {\"name\": \"Presidio\"},\n    \"Chinatown\": {\"name\": \"Chinatown\"},\n    \"Sunset District\": {\"name\": \"Sunset District\"},\n    \"The Castro\": {\"name\": \"The Castro\"},\n    \"Embarcadero\": {\"name\": \"Embarcadero\"},\n    \"Golden Gate Park\": {\"name\": \"Golden Gate Park\"}\n}\n\ntravel_times = {\n    (\"Alamo Square\", \"Russian Hill\"): 13,\n    (\"Alamo Square\", \"Presidio\"): 18,\n    (\"Alamo Square\", \"Chinatown\"): 16,\n    (\"Alamo Square\", \"Sunset District\"): 16,\n    (\"Alamo Square\", \"The Castro\"): 8,\n    (\"Alamo Square\", \"Embarcadero\"): 17,\n    (\"Alamo Square\", \"Golden Gate Park\"): 9,\n    (\"Russian Hill\", \"Alamo Square\"): 15,\n    (\"Russian Hill\", \"Presidio\"): 14,\n    (\"Russian Hill\", \"Chinatown\"): 9,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"Russian Hill\", \"The Castro\"): 21,\n    (\"Russian Hill\", \"Embarcadero\"): 8,\n    (\"Russian Hill\", \"Golden Gate Park\"): 21,\n    (\"Presidio\", \"Alamo Square\"): 18,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Presidio\", \"Chinatown\"): 21,\n    (\"Presidio\", \"Sunset District\"): 15,\n    (\"Presidio\", \"The Castro\"): 21,\n    (\"Presidio\", \"Embarcadero\"): 20,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Chinatown\", \"Alamo Square\"): 17,\n    (\"Chinatown\", \"Russian Hill\"): 7,\n    (\"Chinatown\", \"Presidio\"): 19,\n    (\"Chinatown\", \"Sunset District\"): 29,\n    (\"Chinatown\", \"The Castro\"): 22,\n    (\"Chinatown\", \"Embarcadero\"): 5,\n    (\"Chinatown\", \"Golden Gate Park\"): 23,\n    (\"Sunset District\", \"Alamo Square\"): 17,\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"Presidio\"): 16,\n    (\"Sunset District\", \"Chinatown\"): 30,\n    (\"Sunset District\", \"The Castro\"): 17,\n    (\"Sunset District\", \"Embarcadero\"): 31,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"The Castro\", \"Alamo Square\"): 8,\n    (\"The Castro\", \"Russian Hill\"): 18,\n    (\"The Castro\", \"Presidio\"): 20,\n    (\"The Castro\", \"Chinatown\"): 20,\n    (\"The Castro\", \"Sunset District\"): 17,\n    (\"The Castro\", \"Embarcadero\"): 22,\n    (\"The Castro\", \"Golden Gate Park\"): 11,\n    (\"Embarcadero\", \"Alamo Square\"): 19,\n    (\"Embarcadero\", \"Russian Hill\"): 8,\n    (\"Embarcadero\", \"Presidio\"): 20,\n    (\"Embarcadero\", \"Chinatown\"): 7,\n    (\"Embarcadero\", \"Sunset District\"): 30,\n    (\"Embarcadero\", \"The Castro\"): 25,\n    (\"Embarcadero\", \"Golden Gate Park\"): 25,\n    (\"Golden Gate Park\", \"Alamo Square\"): 10,\n    (\"Golden Gate Park\", \"Russian Hill\"): 19,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"Chinatown\"): 23,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Golden Gate Park\", \"The Castro\"): 13,\n}\n\nconstraints = {\n    \"Emily\": {\"location\": \"Russian Hill\", \"start\": \"12:15\", \"end\": \"14:15\", \"duration\": 105},\n    \"Mark\": {\"location\": \"Presidio\", \"start\": \"14:45\", \"end\": \"19:30\", \"duration\": 60},\n    \"Deborah\": {\"location\": \"Chinatown\", \"start\": \"7:30\", \"end\": \"15:30\", \"duration\": 45},\n    \"Margaret\": {\"location\": \"Sunset District\", \"start\": \"21:30\", \"end\": \"22:30\", \"duration\": 60},\n    \"George\": {\"location\": \"The Castro\", \"start\": \"7:30\", \"end\": \"14:15\", \"duration\": 60},\n    \"Andrew\": {\"location\": \"Embarcadero\", \"start\": \"20:15\", \"end\": \"22:00\", \"duration\": 75},\n    \"Steven\": {\"location\": \"Golden Gate Park\", \"start\": \"11:15\", \"end\": \"21:15\", \"duration\": 105},\n}\n\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\nitinerary = []\n\n# Helper function to check if time overlaps\ndef overlaps(start1, end1, start2, end2):\n    return not (end1 <= start2 or end2 <= start1)\n\n# Helper function to try scheduling meetings\ndef schedule_meeting(person, start_time):\n    location = constraints[person]['location']\n    meet_duration = constraints[person]['duration']\n    \n    start_time_dt = datetime.combine(start_time.date(), start_time.time())\n    end_time_dt = start_time_dt + timedelta(minutes=meet_duration)\n\n    if start_time_dt.time() >= datetime.strptime(constraints[person]['start'], \"%H:%M\").time() and \\\n       end_time_dt.time() <= datetime.strptime(constraints[person]['end'], \"%H:%M\").time():\n        return start_time_dt, end_time_dt, location\n    return None\n\n# Main scheduling routine\ndef schedule_visits(current_time, visited):\n    for person in constraints.keys():\n        if person not in visited:\n            meeting = schedule_meeting(person, current_time)\n            if meeting:\n                start_time, end_time, location = meeting \n                travel_time = travel_times.get((locations[location][\"name\"], locations[\"Alamo Square\"][\"name\"]), 0)\n                travel_back_time = travel_times.get((locations[\"Alamo Square\"][\"name\"], locations[location][\"name\"]), 0)\n                \n                # Adding to itinerary\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": location,\n                    \"person\": person,\n                    \"start_time\": start_time.strftime(\"%H:%M\"),\n                    \"end_time\": end_time.strftime(\"%H:%M\")\n                })\n                \n                # Move current time to after meeting plus return to previous location\n                current_time = end_time + timedelta(minutes=travel_back_time)\n                visited.add(person)\n\n                # Schedule next visits\n                schedule_visits(current_time, visited)\n\n# Start scheduling from Alamo Square\nschedule_visits(arrival_time, set())\n\n# Preparing output\nresult = {\n    \"itinerary\": itinerary,\n}\n\n# Print the result as JSON\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_612"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "James",
                        "start_time": "11:00",
                        "end_time": "11:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Emily",
                        "start_time": "9:15",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Linda",
                        "start_time": "11:26",
                        "end_time": "11:41"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Anthony",
                        "start_time": "11:52",
                        "end_time": "13:37"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "13:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Paul",
                        "start_time": "14:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "William",
                        "start_time": "17:30",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Kimberly",
                        "start_time": "19:52",
                        "end_time": "21:07"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times (in minutes) between locations\ntravel_times = {\n    (\"Russian Hill\", \"Pacific Heights\"): 7,\n    (\"Russian Hill\", \"North Beach\"): 5,\n    (\"Russian Hill\", \"Golden Gate Park\"): 21,\n    (\"Russian Hill\", \"Embarcadero\"): 8,\n    (\"Russian Hill\", \"Haight-Ashbury\"): 17,\n    (\"Russian Hill\", \"Fisherman's Wharf\"): 7,\n    (\"Russian Hill\", \"Mission District\"): 16,\n    (\"Russian Hill\", \"Alamo Square\"): 15,\n    (\"Russian Hill\", \"Bayview\"): 23,\n    (\"Russian Hill\", \"Richmond District\"): 14,\n    (\"Pacific Heights\", \"North Beach\"): 9,\n    (\"Pacific Heights\", \"Golden Gate Park\"): 15,\n    (\"Pacific Heights\", \"Embarcadero\"): 10,\n    (\"Pacific Heights\", \"Haight-Ashbury\"): 11,\n    (\"Pacific Heights\", \"Fisherman's Wharf\"): 13,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"Pacific Heights\", \"Alamo Square\"): 10,\n    (\"Pacific Heights\", \"Bayview\"): 22,\n    (\"Pacific Heights\", \"Richmond District\"): 12,\n    (\"North Beach\", \"Golden Gate Park\"): 22,\n    (\"North Beach\", \"Embarcadero\"): 6,\n    (\"North Beach\", \"Haight-Ashbury\"): 18,\n    (\"North Beach\", \"Fisherman's Wharf\"): 5,\n    (\"North Beach\", \"Mission District\"): 18,\n    (\"North Beach\", \"Alamo Square\"): 16,\n    (\"North Beach\", \"Bayview\"): 25,\n    (\"North Beach\", \"Richmond District\"): 18,\n    (\"Golden Gate Park\", \"Embarcadero\"): 25,\n    (\"Golden Gate Park\", \"Haight-Ashbury\"): 7,\n    (\"Golden Gate Park\", \"Fisherman's Wharf\"): 24,\n    (\"Golden Gate Park\", \"Mission District\"): 17,\n    (\"Golden Gate Park\", \"Alamo Square\"): 9,\n    (\"Golden Gate Park\", \"Bayview\"): 23,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Embarcadero\", \"Haight-Ashbury\"): 20,\n    (\"Embarcadero\", \"Fisherman's Wharf\"): 6,\n    (\"Embarcadero\", \"Mission District\"): 20,\n    (\"Embarcadero\", \"Alamo Square\"): 19,\n    (\"Embarcadero\", \"Bayview\"): 21,\n    (\"Embarcadero\", \"Richmond District\"): 21,\n    (\"Haight-Ashbury\", \"Golden Gate Park\"): 7,\n    (\"Haight-Ashbury\", \"Fisherman's Wharf\"): 23,\n    (\"Haight-Ashbury\", \"Mission District\"): 11,\n    (\"Haight-Ashbury\", \"Alamo Square\"): 5,\n    (\"Haight-Ashbury\", \"Bayview\"): 18,\n    (\"Haight-Ashbury\", \"Richmond District\"): 10,\n    (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n    (\"Fisherman's Wharf\", \"Mission District\"): 22,\n    (\"Fisherman's Wharf\", \"Alamo Square\"): 21,\n    (\"Fisherman's Wharf\", \"Bayview\"): 26,\n    (\"Fisherman's Wharf\", \"Richmond District\"): 18,\n    (\"Mission District\", \"Golden Gate Park\"): 17,\n    (\"Mission District\", \"Haight-Ashbury\"): 12,\n    (\"Mission District\", \"Alamo Square\"): 10,\n    (\"Mission District\", \"Bayview\"): 14,\n    (\"Mission District\", \"Richmond District\"): 20,\n    (\"Alamo Square\", \"Golden Gate Park\"): 9,\n    (\"Alamo Square\", \"Bayview\"): 16,\n    (\"Alamo Square\", \"Richmond District\"): 11,\n    (\"Bayview\", \"Richmond District\"): 25,\n}\n\n# Define meeting constraints\nmeetings = [\n    {\"name\": \"Emily\", \"location\": \"Pacific Heights\", \"start\": \"9:15\", \"end\": \"13:45\", \"min_time\": 120},\n    {\"name\": \"Helen\", \"location\": \"North Beach\", \"start\": \"13:45\", \"end\": \"18:45\", \"min_time\": 30},\n    {\"name\": \"Kimberly\", \"location\": \"Golden Gate Park\", \"start\": \"18:45\", \"end\": \"21:15\", \"min_time\": 75},\n    {\"name\": \"James\", \"location\": \"Embarcadero\", \"start\": \"10:30\", \"end\": \"11:30\", \"min_time\": 30},\n    {\"name\": \"Linda\", \"location\": \"Haight-Ashbury\", \"start\": \"7:30\", \"end\": \"19:15\", \"min_time\": 15},\n    {\"name\": \"Paul\", \"location\": \"Fisherman's Wharf\", \"start\": \"14:45\", \"end\": \"18:45\", \"min_time\": 90},\n    {\"name\": \"Anthony\", \"location\": \"Mission District\", \"start\": \"8:00\", \"end\": \"14:45\", \"min_time\": 105},\n    {\"name\": \"Nancy\", \"location\": \"Alamo Square\", \"start\": \"8:30\", \"end\": \"13:45\", \"min_time\": 120},\n    {\"name\": \"William\", \"location\": \"Bayview\", \"start\": \"17:30\", \"end\": \"20:30\", \"min_time\": 120},\n    {\"name\": \"Margaret\", \"location\": \"Richmond District\", \"start\": \"15:15\", \"end\": \"18:15\", \"min_time\": 45},\n]\n\nstart_time = datetime.strptime(\"9:00\", \"%H:%M\")\nitinerary = []\n\n# Helper function to compute available meeting slots\ndef find_meeting(start, end, location, duration):\n    duration = timedelta(minutes=duration)\n    available_slots = []\n    \n    for meeting in meetings:\n        if meeting[\"location\"] == location:\n            meeting_start = datetime.strptime(meeting[\"start\"], \"%H:%M\")\n            meeting_end = datetime.strptime(meeting[\"end\"], \"%H:%M\")\n            meeting_start = meeting_start.replace(year=start.year, month=start.month, day=start.day)\n            meeting_end = meeting_end.replace(year=start.year, month=start.month, day=start.day)\n            \n            if meeting_start >= start and meeting_end <= end:\n                available_slots.append((meeting_start, meeting_end, meeting[\"name\"], meeting[\"min_time\"]))\n    \n    return available_slots\n\n# Initial schedule calculation\ndef schedule_meetings():\n    current_time = start_time\n    # Check for each person based on availability\n    for meeting in meetings:\n        location = meeting[\"location\"]\n        available_times = find_meeting(current_time, current_time + timedelta(hours=3), location, meeting[\"min_time\"])\n        \n        for start, end, person_name, min_time in available_times:\n            if (end - start) >= timedelta(minutes=min_time):\n                end_time = start + timedelta(minutes=min_time)\n                travel_time = travel_times.get((current_time.strftime(\"%H:%M\"), location), 0)\n                current_time += timedelta(minutes=travel_time)\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": location,\n                    \"person\": person_name,\n                    \"start_time\": end_time.strftime(\"%H:%M\"),\n                    \"end_time\": (end_time + timedelta(minutes=min_time)).strftime(\"%H:%M\")\n                })\n                current_time = end_time + timedelta(minutes=travel_time)\n\nschedule_meetings()\n\n# Generate final itinerary\nresult = {\n    \"itinerary\": itinerary\n}\n\n# Output result in JSON format\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_901"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "William",
                        "start_time": "15:23",
                        "end_time": "16:23"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Joshua",
                        "start_time": "16:34",
                        "end_time": "16:49"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "17:10",
                        "end_time": "17:55"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Brian",
                        "start_time": "18:10",
                        "end_time": "19:55"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jeffrey",
                        "start_time": "20:20",
                        "end_time": "21:20"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Joshua",
                        "start_time": "9:16",
                        "end_time": "9:31"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Anthony",
                        "start_time": "9:41",
                        "end_time": "10:11"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Helen",
                        "start_time": "10:23",
                        "end_time": "11:38"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joseph",
                        "start_time": "11:51",
                        "end_time": "12:06"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "William",
                        "start_time": "15:15",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "David",
                        "start_time": "16:45",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Karen",
                        "start_time": "17:48",
                        "end_time": "18:03"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Brian",
                        "start_time": "18:13",
                        "end_time": "19:58"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jeffrey",
                        "start_time": "20:23",
                        "end_time": "21:23"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_times = {\n    (\"The Castro\", \"Alamo Square\"): 8,\n    (\"The Castro\", \"Richmond District\"): 16,\n    (\"The Castro\", \"Financial District\"): 21,\n    (\"The Castro\", \"Union Square\"): 19,\n    (\"The Castro\", \"Fisherman's Wharf\"): 24,\n    (\"The Castro\", \"Marina District\"): 21,\n    (\"The Castro\", \"Haight-Ashbury\"): 6,\n    (\"The Castro\", \"Mission District\"): 7,\n    (\"The Castro\", \"Pacific Heights\"): 16,\n    (\"The Castro\", \"Golden Gate Park\"): 11,\n    (\"Alamo Square\", \"The Castro\"): 8,\n    (\"Alamo Square\", \"Richmond District\"): 11,\n    (\"Alamo Square\", \"Financial District\"): 17,\n    (\"Alamo Square\", \"Union Square\"): 14,\n    (\"Alamo Square\", \"Fisherman's Wharf\"): 19,\n    (\"Alamo Square\", \"Marina District\"): 15,\n    (\"Alamo Square\", \"Haight-Ashbury\"): 5,\n    (\"Alamo Square\", \"Mission District\"): 10,\n    (\"Alamo Square\", \"Pacific Heights\"): 10,\n    (\"Alamo Square\", \"Golden Gate Park\"): 9,\n    (\"Richmond District\", \"The Castro\"): 16,\n    (\"Richmond District\", \"Alamo Square\"): 13,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"Union Square\"): 21,\n    (\"Richmond District\", \"Fisherman's Wharf\"): 18,\n    (\"Richmond District\", \"Marina District\"): 9,\n    (\"Richmond District\", \"Haight-Ashbury\"): 10,\n    (\"Richmond District\", \"Mission District\"): 20,\n    (\"Richmond District\", \"Pacific Heights\"): 10,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Financial District\", \"The Castro\"): 20,\n    (\"Financial District\", \"Alamo Square\"): 17,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Financial District\", \"Union Square\"): 9,\n    (\"Financial District\", \"Fisherman's Wharf\"): 10,\n    (\"Financial District\", \"Marina District\"): 15,\n    (\"Financial District\", \"Haight-Ashbury\"): 19,\n    (\"Financial District\", \"Mission District\"): 17,\n    (\"Financial District\", \"Pacific Heights\"): 13,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"Union Square\", \"The Castro\"): 17,\n    (\"Union Square\", \"Alamo Square\"): 15,\n    (\"Union Square\", \"Richmond District\"): 20,\n    (\"Union Square\", \"Financial District\"): 9,\n    (\"Union Square\", \"Fisherman's Wharf\"): 15,\n    (\"Union Square\", \"Marina District\"): 18,\n    (\"Union Square\", \"Haight-Ashbury\"): 18,\n    (\"Union Square\", \"Mission District\"): 14,\n    (\"Union Square\", \"Pacific Heights\"): 15,\n    (\"Union Square\", \"Golden Gate Park\"): 22,\n    (\"Fisherman's Wharf\", \"The Castro\"): 27,\n    (\"Fisherman's Wharf\", \"Alamo Square\"): 21,\n    (\"Fisherman's Wharf\", \"Richmond District\"): 18,\n    (\"Fisherman's Wharf\", \"Financial District\"): 11,\n    (\"Fisherman's Wharf\", \"Union Square\"): 13,\n    (\"Fisherman's Wharf\", \"Marina District\"): 9,\n    (\"Fisherman's Wharf\", \"Haight-Ashbury\"): 22,\n    (\"Fisherman's Wharf\", \"Mission District\"): 22,\n    (\"Fisherman's Wharf\", \"Pacific Heights\"): 12,\n    (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n    (\"Marina District\", \"The Castro\"): 22,\n    (\"Marina District\", \"Alamo Square\"): 15,\n    (\"Marina District\", \"Richmond District\"): 11,\n    (\"Marina District\", \"Financial District\"): 17,\n    (\"Marina District\", \"Union Square\"): 16,\n    (\"Marina District\", \"Fisherman's Wharf\"): 10,\n    (\"Marina District\", \"Haight-Ashbury\"): 16,\n    (\"Marina District\", \"Mission District\"): 20,\n    (\"Marina District\", \"Pacific Heights\"): 7,\n    (\"Marina District\", \"Golden Gate Park\"): 18,\n    (\"Haight-Ashbury\", \"The Castro\"): 6,\n    (\"Haight-Ashbury\", \"Alamo Square\"): 5,\n    (\"Haight-Ashbury\", \"Richmond District\"): 10,\n    (\"Haight-Ashbury\", \"Financial District\"): 21,\n    (\"Haight-Ashbury\", \"Union Square\"): 19,\n    (\"Haight-Ashbury\", \"Fisherman's Wharf\"): 23,\n    (\"Haight-Ashbury\", \"Marina District\"): 17,\n    (\"Haight-Ashbury\", \"Mission District\"): 11,\n    (\"Haight-Ashbury\", \"Pacific Heights\"): 12,\n    (\"Haight-Ashbury\", \"Golden Gate Park\"): 7,\n    (\"Mission District\", \"The Castro\"): 7,\n    (\"Mission District\", \"Alamo Square\"): 11,\n    (\"Mission District\", \"Richmond District\"): 20,\n    (\"Mission District\", \"Financial District\"): 15,\n    (\"Mission District\", \"Union Square\"): 15,\n    (\"Mission District\", \"Fisherman's Wharf\"): 22,\n    (\"Mission District\", \"Marina District\"): 19,\n    (\"Mission District\", \"Haight-Ashbury\"): 12,\n    (\"Mission District\", \"Pacific Heights\"): 16,\n    (\"Mission District\", \"Golden Gate Park\"): 17,\n    (\"Pacific Heights\", \"The Castro\"): 16,\n    (\"Pacific Heights\", \"Alamo Square\"): 10,\n    (\"Pacific Heights\", \"Richmond District\"): 12,\n    (\"Pacific Heights\", \"Financial District\"): 13,\n    (\"Pacific Heights\", \"Union Square\"): 12,\n    (\"Pacific Heights\", \"Fisherman's Wharf\"): 13,\n    (\"Pacific Heights\", \"Marina District\"): 6,\n    (\"Pacific Heights\", \"Haight-Ashbury\"): 11,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"Pacific Heights\", \"Golden Gate Park\"): 15,\n    (\"Golden Gate Park\", \"The Castro\"): 13,\n    (\"Golden Gate Park\", \"Alamo Square\"): 9,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Golden Gate Park\", \"Union Square\"): 22,\n    (\"Golden Gate Park\", \"Fisherman's Wharf\"): 24,\n    (\"Golden Gate Park\", \"Marina District\"): 16,\n    (\"Golden Gate Park\", \"Haight-Ashbury\"): 7,\n    (\"Golden Gate Park\", \"Mission District\"): 17,\n    (\"Golden Gate Park\", \"Pacific Heights\"): 16,\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"William\", \"location\": \"Alamo Square\", \"start\": \"15:15\", \"end\": \"17:15\", \"min_duration\": 60},\n    {\"name\": \"Joshua\", \"location\": \"Richmond District\", \"start\": \"07:00\", \"end\": \"20:00\", \"min_duration\": 15},\n    {\"name\": \"Joseph\", \"location\": \"Financial District\", \"start\": \"11:15\", \"end\": \"13:30\", \"min_duration\": 15},\n    {\"name\": \"David\", \"location\": \"Union Square\", \"start\": \"16:45\", \"end\": \"19:15\", \"min_duration\": 45},\n    {\"name\": \"Brian\", \"location\": \"Fisherman's Wharf\", \"start\": \"13:45\", \"end\": \"20:45\", \"min_duration\": 105},\n    {\"name\": \"Karen\", \"location\": \"Marina District\", \"start\": \"11:30\", \"end\": \"18:30\", \"min_duration\": 15},\n    {\"name\": \"Anthony\", \"location\": \"Haight-Ashbury\", \"start\": \"07:15\", \"end\": \"10:30\", \"min_duration\": 30},\n    {\"name\": \"Matthew\", \"location\": \"Mission District\", \"start\": \"17:15\", \"end\": \"19:15\", \"min_duration\": 120},\n    {\"name\": \"Helen\", \"location\": \"Pacific Heights\", \"start\": \"08:00\", \"end\": \"12:00\", \"min_duration\": 75},\n    {\"name\": \"Jeffrey\", \"location\": \"Golden Gate Park\", \"start\": \"19:00\", \"end\": \"21:30\", \"min_duration\": 60},\n]\n\n# Function to convert time strings to datetime objects\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\").time()\n\n# Function to find available slots for meetings\ndef find_meeting_schedule(start_location, arrival_time, meetings):\n    schedule = []\n    current_time = datetime.combine(datetime.today(), arrival_time)\n\n    for meeting in meetings:\n        name = meeting[\"name\"]\n        location = meeting[\"location\"]\n        start_time = parse_time(meeting[\"start\"])\n        end_time = parse_time(meeting[\"end\"])\n        duration = meeting[\"min_duration\"]\n\n        # Calculate time window for the meeting\n        start_window = datetime.combine(datetime.today(), start_time)\n        end_window = datetime.combine(datetime.today(), end_time)\n\n        # Ensure the current time falls within the available window for the meeting\n        if current_time < start_window:\n            # Move to the earliest start\n            current_time = start_window\n\n        # Calculate travel time to the meeting location\n        travel_time = travel_times.get((start_location, location), 0)\n        meeting_start = current_time + timedelta(minutes=travel_time)\n\n        # Check if there's enough time for the meeting\n        if meeting_start.time() < end_time and (datetime.combine(datetime.today(), end_time) - meeting_start).seconds >= duration * 60:\n            meeting_end = meeting_start + timedelta(minutes=duration)\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": name,\n                \"start_time\": meeting_start.strftime(\"%H:%M\"),\n                \"end_time\": meeting_end.strftime(\"%H:%M\")\n            })\n            # Update current time to the end of the meeting\n            current_time = meeting_end\n            # Change location to the new meeting place for future travel\n            start_location = location\n\n    return schedule\n\n# Starting itinerary\narrival_time = parse_time(\"09:00\")\nitinerary = find_meeting_schedule(\"The Castro\", arrival_time, meetings)\n\n# Convert result to JSON format\nresult = {\"itinerary\": itinerary}\n\n# Print the JSON output\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_956"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Barbara",
                        "start_time": "9:07",
                        "end_time": "10:07"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Barbara",
                        "start_time": "9:07",
                        "end_time": "10:07"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define input parameters\narrival_time_russian_hill = datetime.strptime(\"09:00\", \"%H:%M\")\nbarbara_availability_start = datetime.strptime(\"07:15\", \"%H:%M\")\nbarbara_availability_end = datetime.strptime(\"22:00\", \"%H:%M\")\nminimum_meeting_duration = timedelta(minutes=60)\ntravel_time_russian_hill_to_pacific_heights = timedelta(minutes=7)\ntravel_time_pacific_heights_to_russian_hill = timedelta(minutes=7)\n\n# Compute the potential meeting time window\nlatest_start_meeting_time = barbara_availability_end - minimum_meeting_duration\nearliest_end_meeting_time = barbara_availability_start + minimum_meeting_duration\n\n# Check if a valid meeting time is possible\nif arrival_time_russian_hill >= latest_start_meeting_time or arrival_time_russian_hill >= barbara_availability_end:\n    itinerary = []\nelse:\n    # Calculate the latest possible start time from Russian Hill\n    first_possible_meeting_time = arrival_time_russian_hill + travel_time_russian_hill_to_pacific_heights\n    if first_possible_meeting_time < barbara_availability_start:\n        first_possible_meeting_time = barbara_availability_start\n\n    # Calculate the end time for the meeting\n    meeting_end_time = first_possible_meeting_time + minimum_meeting_duration\n    \n    # Verify if the meeting end time is within Barbara's availability\n    if meeting_end_time <= barbara_availability_end:\n        itinerary = [\n            {\n                \"action\": \"meet\",\n                \"location\": \"Pacific Heights\",\n                \"person\": \"Barbara\",\n                \"start_time\": first_possible_meeting_time.strftime(\"%H:%M\"),\n                \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n            }\n        ]\n    else:\n        itinerary = []\n\n# Output the result in JSON format\nresult = {\"itinerary\": itinerary}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_73"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Helen",
                        "start_time": "9:30",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Steven",
                        "start_time": "20:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Helen",
                        "start_time": "9:30",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Deborah",
                        "start_time": "10:38",
                        "end_time": "11:08"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Matthew",
                        "start_time": "11:35",
                        "end_time": "12:20"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "14:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Joseph",
                        "start_time": "15:24",
                        "end_time": "17:24"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Ronald",
                        "start_time": "17:51",
                        "end_time": "18:51"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Steven",
                        "start_time": "20:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define the travel distances between locations (in minutes)\ntravel_times = {\n    (\"Pacific Heights\", \"Golden Gate Park\"): 15,\n    (\"Pacific Heights\", \"The Castro\"): 16,\n    (\"Pacific Heights\", \"Bayview\"): 22,\n    (\"Pacific Heights\", \"Marina District\"): 6,\n    (\"Pacific Heights\", \"Union Square\"): 12,\n    (\"Pacific Heights\", \"Sunset District\"): 21,\n    (\"Pacific Heights\", \"Alamo Square\"): 10,\n    (\"Pacific Heights\", \"Financial District\"): 13,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"Golden Gate Park\", \"The Castro\"): 13,\n    (\"Golden Gate Park\", \"Bayview\"): 23,\n    (\"Golden Gate Park\", \"Marina District\"): 16,\n    (\"Golden Gate Park\", \"Union Square\"): 22,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Golden Gate Park\", \"Alamo Square\"): 9,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Golden Gate Park\", \"Mission District\"): 17,\n    (\"The Castro\", \"Bayview\"): 19,\n    (\"The Castro\", \"Marina District\"): 21,\n    (\"The Castro\", \"Union Square\"): 19,\n    (\"The Castro\", \"Sunset District\"): 17,\n    (\"The Castro\", \"Alamo Square\"): 8,\n    (\"The Castro\", \"Financial District\"): 21,\n    (\"The Castro\", \"Mission District\"): 7,\n    (\"Bayview\", \"Marina District\"): 27,\n    (\"Bayview\", \"Union Square\"): 18,\n    (\"Bayview\", \"Sunset District\"): 23,\n    (\"Bayview\", \"Alamo Square\"): 16,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Bayview\", \"Mission District\"): 13,\n    (\"Marina District\", \"Union Square\"): 16,\n    (\"Marina District\", \"Sunset District\"): 19,\n    (\"Marina District\", \"Alamo Square\"): 15,\n    (\"Marina District\", \"Financial District\"): 17,\n    (\"Marina District\", \"Mission District\"): 20,\n    (\"Union Square\", \"Sunset District\"): 27,\n    (\"Union Square\", \"Alamo Square\"): 15,\n    (\"Union Square\", \"Financial District\"): 9,\n    (\"Union Square\", \"Mission District\"): 14,\n    (\"Sunset District\", \"Alamo Square\"): 17,\n    (\"Sunset District\", \"Financial District\"): 30,\n    (\"Sunset District\", \"Mission District\"): 25,\n    (\"Alamo Square\", \"Financial District\"): 17,\n}\n\n# Define meeting constraints\nmeetings = {\n    \"Helen\": {\"location\": \"Golden Gate Park\", \"start\": \"09:30\", \"end\": \"12:15\", \"duration\": 45},\n    \"Steven\": {\"location\": \"The Castro\", \"start\": \"20:15\", \"end\": \"22:00\", \"duration\": 105},\n    \"Deborah\": {\"location\": \"Bayview\", \"start\": \"08:30\", \"end\": \"12:00\", \"duration\": 30},\n    \"Matthew\": {\"location\": \"Marina District\", \"start\": \"09:15\", \"end\": \"14:15\", \"duration\": 45},\n    \"Joseph\": {\"location\": \"Union Square\", \"start\": \"14:15\", \"end\": \"18:45\", \"duration\": 120},\n    \"Ronald\": {\"location\": \"Sunset District\", \"start\": \"16:00\", \"end\": \"20:45\", \"duration\": 60},\n    \"Robert\": {\"location\": \"Alamo Square\", \"start\": \"18:30\", \"end\": \"21:15\", \"duration\": 120},\n    \"Rebecca\": {\"location\": \"Financial District\", \"start\": \"14:45\", \"end\": \"16:15\", \"duration\": 30},\n    \"Elizabeth\": {\"location\": \"Mission District\", \"start\": \"18:30\", \"end\": \"21:00\", \"duration\": 120},\n}\n\n# Start planning from Pacific Heights at 9:00AM\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Create a list to hold the meeting schedule\nitinerary = []\n\n# Function to check if meeting is possible\ndef can_meet(start, end, duration):\n    available_time = end - start\n    return available_time >= timedelta(minutes=duration)\n\n# Function to schedule meetings\ndef schedule_meetings(initial_time):\n    current_time = initial_time\n    for friend, details in meetings.items():\n        location = details[\"location\"]\n        meeting_start = datetime.strptime(details[\"start\"], \"%H:%M\")\n        meeting_end = datetime.strptime(details[\"end\"], \"%H:%M\")\n        duration = details[\"duration\"]\n        \n        # Adjusted meeting start time considering travel time and previous meetings\n        travel_time = travel_times.get((\"Pacific Heights\", location), float('inf'))\n        adjusted_start_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if we can start meeting\n        if adjusted_start_time < meeting_start:\n            adjusted_start_time = meeting_start\n        \n        adjusted_end_time = adjusted_start_time + timedelta(minutes=duration)\n\n        if adjusted_end_time <= meeting_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": friend,\n                \"start_time\": adjusted_start_time.strftime(\"%H:%M\"),\n                \"end_time\": adjusted_end_time.strftime(\"%H:%M\")\n            })\n            # Update the current time to reflect travel time to the next location\n            current_time = adjusted_end_time\n            # Traveling time to set next location to Pacific Heights after meeting\n            current_time += timedelta(minutes=travel_times.get((location, \"Pacific Heights\"), 0))\n\n# Schedule the meetings\nschedule_meetings(start_time)\n\n# Output JSON result\nresult = {\"itinerary\": itinerary}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_835"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Sandra",
                        "start_time": "13:00",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "13:38",
                        "end_time": "15:38"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "15:45",
                        "end_time": "16:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times (in minutes)\ntravel_times = {\n    (\"Haight-Ashbury\", \"Mission District\"): 11,\n    (\"Haight-Ashbury\", \"Bayview\"): 18,\n    (\"Haight-Ashbury\", \"Pacific Heights\"): 12,\n    (\"Haight-Ashbury\", \"Russian Hill\"): 17,\n    (\"Haight-Ashbury\", \"Fisherman's Wharf\"): 23,\n    (\"Mission District\", \"Haight-Ashbury\"): 12,\n    (\"Mission District\", \"Bayview\"): 15,\n    (\"Mission District\", \"Pacific Heights\"): 16,\n    (\"Mission District\", \"Russian Hill\"): 15,\n    (\"Mission District\", \"Fisherman's Wharf\"): 22,\n    (\"Bayview\", \"Haight-Ashbury\"): 19,\n    (\"Bayview\", \"Mission District\"): 13,\n    (\"Bayview\", \"Pacific Heights\"): 23,\n    (\"Bayview\", \"Russian Hill\"): 23,\n    (\"Bayview\", \"Fisherman's Wharf\"): 25,\n    (\"Pacific Heights\", \"Haight-Ashbury\"): 11,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"Pacific Heights\", \"Bayview\"): 22,\n    (\"Pacific Heights\", \"Russian Hill\"): 7,\n    (\"Pacific Heights\", \"Fisherman's Wharf\"): 13,\n    (\"Russian Hill\", \"Haight-Ashbury\"): 17,\n    (\"Russian Hill\", \"Mission District\"): 16,\n    (\"Russian Hill\", \"Bayview\"): 23,\n    (\"Russian Hill\", \"Pacific Heights\"): 7,\n    (\"Russian Hill\", \"Fisherman's Wharf\"): 7,\n    (\"Fisherman's Wharf\", \"Haight-Ashbury\"): 22,\n    (\"Fisherman's Wharf\", \"Mission District\"): 22,\n    (\"Fisherman's Wharf\", \"Bayview\"): 26,\n    (\"Fisherman's Wharf\", \"Pacific Heights\"): 12,\n    (\"Fisherman's Wharf\", \"Russian Hill\"): 7,\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Stephanie\": {\"location\": \"Mission District\", \"available\": (datetime(2023, 1, 1, 8, 15), datetime(2023, 1, 1, 13, 45)), \"duration\": 90},\n    \"Sandra\": {\"location\": \"Bayview\", \"available\": (datetime(2023, 1, 1, 13, 0), datetime(2023, 1, 1, 19, 30)), \"duration\": 15},\n    \"Richard\": {\"location\": \"Pacific Heights\", \"available\": (datetime(2023, 1, 1, 7, 15), datetime(2023, 1, 1, 10, 15)), \"duration\": 75},\n    \"Brian\": {\"location\": \"Russian Hill\", \"available\": (datetime(2023, 1, 1, 12, 15), datetime(2023, 1, 1, 16, 0)), \"duration\": 120},\n    \"Jason\": {\"location\": \"Fisherman's Wharf\", \"available\": (datetime(2023, 1, 1, 8, 30), datetime(2023, 1, 1, 17, 45)), \"duration\": 60},\n}\n\n# Helper function to add minutes to a time\ndef add_minutes(start_time, minutes):\n    return start_time + timedelta(minutes=minutes)\n\n# Starting point\ncurrent_time = datetime(2023, 1, 1, 9, 0)  # Start at Haight-Ashbury at 9:00 AM\nitinerary = []\n\ndef schedule_meeting(person, current_time):\n    meeting_info = constraints[person]\n    location = meeting_info[\"location\"]\n    start_time_window, end_time_window = meeting_info[\"available\"]\n    duration = meeting_info[\"duration\"]\n    \n    travel_time = travel_times[(current_time.strftime(\"%A\"), location)] if (current_time.strftime(\"%A\"), location) in travel_times else None\n    if travel_time is None:\n        # Reverse travel time lookup\n        travel_time = travel_times.get((location, current_time.strftime(\"%A\")), None)\n    \n    if travel_time is not None:\n        arrival_time = current_time + timedelta(minutes=travel_time)\n        meeting_start_time = max(arrival_time, start_time_window)\n        meeting_end_time = meeting_start_time + timedelta(minutes=duration)\n        \n        if meeting_end_time <= end_time_window:\n            # Add meeting to itinerary\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": person,\n                \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n                \"end_time\": meeting_end_time.strftime(\"%H:%M\"),\n            })\n            # Update the current time\n            return meeting_end_time\n    return current_time\n\n# Schedule meetings\ncurrent_time = schedule_meeting(\"Richard\", current_time)  # Meet Richard first\ncurrent_time = schedule_meeting(\"Stephanie\", current_time)  # Meet Stephanie next\ncurrent_time = schedule_meeting(\"Jason\", current_time)      # Meet Jason next\ncurrent_time = schedule_meeting(\"Brian\", current_time)      # Meet Brian next\ncurrent_time = schedule_meeting(\"Sandra\", current_time)     # Meet Sandra last\n\n# Output the final itinerary as JSON\noutput = {\"itinerary\": itinerary}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_482"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "11:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Karen",
                        "start_time": "13:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Brian",
                        "start_time": "15:00",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "15:40",
                        "end_time": "17:40"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "9:10",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "11:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Karen",
                        "start_time": "13:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Brian",
                        "start_time": "15:00",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "15:40",
                        "end_time": "17:40"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nfrom itertools import permutations\n\n# Travel times in minutes\ntravel_times = {\n    ('Financial District', 'Golden Gate Park'): 23,\n    ('Financial District', 'Chinatown'): 5,\n    ('Financial District', 'Union Square'): 9,\n    ('Financial District', 'Fisherman\\'s Wharf'): 10,\n    ('Financial District', 'Pacific Heights'): 13,\n    ('Financial District', 'North Beach'): 7,\n    ('Golden Gate Park', 'Chinatown'): 23,\n    ('Golden Gate Park', 'Union Square'): 22,\n    ('Golden Gate Park', 'Fisherman\\'s Wharf'): 24,\n    ('Golden Gate Park', 'Pacific Heights'): 16,\n    ('Golden Gate Park', 'North Beach'): 24,\n    ('Chinatown', 'Union Square'): 7,\n    ('Chinatown', 'Fisherman\\'s Wharf'): 8,\n    ('Chinatown', 'Pacific Heights'): 10,\n    ('Chinatown', 'North Beach'): 3,\n    ('Union Square', 'Fisherman\\'s Wharf'): 15,\n    ('Union Square', 'Pacific Heights'): 15,\n    ('Union Square', 'North Beach'): 10,\n    ('Fisherman\\'s Wharf', 'Pacific Heights'): 12,\n    ('Fisherman\\'s Wharf', 'North Beach'): 6,\n    ('Pacific Heights', 'North Beach'): 8,\n}\n\n# Meeting constraints and times\nmeetings = {\n    \"Stephanie\": {\n        \"location\": \"Golden Gate Park\",\n        \"start\": \"11:00\",\n        \"end\": \"15:00\",\n        \"duration\": 105,\n    },\n    \"Karen\": {\n        \"location\": \"Chinatown\",\n        \"start\": \"13:45\",\n        \"end\": \"16:30\",\n        \"duration\": 15,\n    },\n    \"Brian\": {\n        \"location\": \"Union Square\",\n        \"start\": \"15:00\",\n        \"end\": \"17:15\",\n        \"duration\": 30,\n    },\n    \"Rebecca\": {\n        \"location\": \"Fisherman's Wharf\",\n        \"start\": \"08:00\",\n        \"end\": \"11:15\",\n        \"duration\": 30,\n    },\n    \"Joseph\": {\n        \"location\": \"Pacific Heights\",\n        \"start\": \"08:15\",\n        \"end\": \"09:30\",\n        \"duration\": 60,\n    },\n    \"Steven\": {\n        \"location\": \"North Beach\",\n        \"start\": \"14:30\",\n        \"end\": \"20:45\",\n        \"duration\": 120,\n    },\n}\n\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nitinerary = []\ncurrent_time = start_time\ncurrent_location = 'Financial District'\n\ndef can_meet(current_time, current_location, person):\n    travel_time = travel_times.get((current_location, person['location']))\n    if travel_time is None:\n        return False\n    \n    arrival_time = current_time + timedelta(minutes=travel_time)\n    start_time = datetime.strptime(person['start'], \"%H:%M\")\n    end_time = datetime.strptime(person['end'], \"%H:%M\")\n\n    if arrival_time < start_time:\n        # Wait until meeting starts\n        arrival_time = start_time\n    \n    meeting_end_time = arrival_time + timedelta(minutes=person['duration'])\n\n    # Check if the meeting can fit in the available time\n    return arrival_time <= end_time and meeting_end_time <= end_time\n\ndef schedule_meeting(current_time, current_location, person):\n    travel_time = travel_times[(current_location, person['location'])]\n    arrival_time = current_time + timedelta(minutes=travel_time)\n    start_meeting_time = max(arrival_time, datetime.strptime(person['start'], \"%H:%M\"))\n    end_meeting_time = start_meeting_time + timedelta(minutes=person['duration'])\n    \n    return start_meeting_time, end_meeting_time\n\n# Visit friends based on their available times\ndef visit_friends():\n    global current_time, current_location\n    for friend in meetings:\n        person = meetings[friend]\n        if can_meet(current_time, current_location, person):\n            start_meeting_time, end_meeting_time = schedule_meeting(current_time, current_location, person)\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": person['location'],\n                \"person\": friend,\n                \"start_time\": start_meeting_time.strftime(\"%H:%M\"),\n                \"end_time\": end_meeting_time.strftime(\"%H:%M\"),\n            })\n            # Update the current time and location\n            current_time = end_meeting_time\n            current_location = person['location']\n\nvisit_friends()\n\nprint(json.dumps({\"itinerary\": itinerary}, indent=2))\n```",
            "count": "meeting_planning_example_502"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sarah",
                        "start_time": "16:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "17:07",
                        "end_time": "18:22"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sarah",
                        "start_time": "16:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "17:07",
                        "end_time": "18:22"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel times in minutes\ntravel_times = {\n    (\"Sunset District\", \"North Beach\"): 29,\n    (\"Sunset District\", \"Union Square\"): 30,\n    (\"Sunset District\", \"Alamo Square\"): 17,\n    (\"North Beach\", \"Sunset District\"): 27,\n    (\"North Beach\", \"Union Square\"): 7,\n    (\"North Beach\", \"Alamo Square\"): 16,\n    (\"Union Square\", \"Sunset District\"): 26,\n    (\"Union Square\", \"North Beach\"): 10,\n    (\"Union Square\", \"Alamo Square\"): 15,\n    (\"Alamo Square\", \"Sunset District\"): 16,\n    (\"Alamo Square\", \"North Beach\"): 15,\n    (\"Alamo Square\", \"Union Square\"): 14,\n}\n\n# Meeting windows and minimum durations\nmeetings = {\n    \"Sarah\": {\"location\": \"North Beach\", \"available\": (16 * 60, 18 * 60 + 15), \"min_duration\": 60},\n    \"Jeffrey\": {\"location\": \"Union Square\", \"available\": (15 * 60, 22 * 60), \"min_duration\": 75},\n    \"Brian\": {\"location\": \"Alamo Square\", \"available\": (16 * 60, 17 * 60 + 30), \"min_duration\": 75}\n}\n\n# Starting time\nstart_time = 9 * 60  # 9:00 AM in minutes\nend_time = 22 * 60   # 10:00 PM in minutes\n\n# Function to add time in minutes to a time\ndef add_time(base_time, minutes):\n    return base_time + minutes\n\n# Function to convert minutes to HH:MM format\ndef minutes_to_time(minutes):\n    hour = minutes // 60\n    minute = minutes % 60\n    return f\"{hour}:{minute:02}\"\n\n# Function to calculate the optimal meeting schedule\ndef calculate_schedule(travel_times, meetings, start_time):\n    schedule = []\n    current_time = start_time\n    \n    # Meeting Sarah\n    if current_time <= meetings[\"Sarah\"][\"available\"][1]:\n        travel_time = travel_times[(\"Sunset District\", \"North Beach\")]\n        available_start = max(meetings[\"Sarah\"][\"available\"][0], current_time + travel_time)\n        meeting_end = available_start + meetings[\"Sarah\"][\"min_duration\"]\n        \n        if meeting_end <= meetings[\"Sarah\"][\"available\"][1]:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": meetings[\"Sarah\"][\"location\"],\n                \"person\": \"Sarah\",\n                \"start_time\": minutes_to_time(available_start),\n                \"end_time\": minutes_to_time(meeting_end)\n            })\n            current_time = meeting_end + travel_times[(\"North Beach\", \"Union Square\")]\n    \n    # Meeting Jeffrey\n    if current_time <= meetings[\"Jeffrey\"][\"available\"][1]:\n        travel_time = travel_times[(\"Sunset District\", \"Union Square\")]\n        available_start = max(meetings[\"Jeffrey\"][\"available\"][0], current_time)\n        meeting_end = available_start + meetings[\"Jeffrey\"][\"min_duration\"]\n        \n        if meeting_end <= meetings[\"Jeffrey\"][\"available\"][1]:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": meetings[\"Jeffrey\"][\"location\"],\n                \"person\": \"Jeffrey\",\n                \"start_time\": minutes_to_time(available_start),\n                \"end_time\": minutes_to_time(meeting_end)\n            })\n            current_time = meeting_end\n\n    # Meeting Brian\n    if current_time <= meetings[\"Brian\"][\"available\"][1]:\n        travel_time = travel_times[(\"Union Square\", \"Alamo Square\")]\n        available_start = max(meetings[\"Brian\"][\"available\"][0], current_time)\n        meeting_end = available_start + meetings[\"Brian\"][\"min_duration\"]\n        \n        if meeting_end <= meetings[\"Brian\"][\"available\"][1]:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": meetings[\"Brian\"][\"location\"],\n                \"person\": \"Brian\",\n                \"start_time\": minutes_to_time(available_start),\n                \"end_time\": minutes_to_time(meeting_end)\n            })\n\n    return {\"itinerary\": schedule}\n\n# Calculate the schedule\noptimal_schedule = calculate_schedule(travel_times, meetings, start_time)\n\n# Output the result as JSON\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_225"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Daniel",
                        "start_time": "9:00",
                        "end_time": "9:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "9:20",
                        "end_time": "9:50"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Charles",
                        "start_time": "18:00",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "20:30",
                        "end_time": "22:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Margaret",
                        "start_time": "9:24",
                        "end_time": "9:54"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Daniel",
                        "start_time": "10:15",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Charles",
                        "start_time": "18:00",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "20:30",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nfrom itertools import permutations\n\n# Define travel distances in minutes\ntravel_times = {\n    (\"Sunset District\", \"Alamo Square\"): 17,\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"Sunset District\", \"Mission District\"): 24,\n    (\"Alamo Square\", \"Sunset District\"): 16,\n    (\"Alamo Square\", \"Russian Hill\"): 13,\n    (\"Alamo Square\", \"Golden Gate Park\"): 9,\n    (\"Alamo Square\", \"Mission District\"): 10,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"Russian Hill\", \"Alamo Square\"): 15,\n    (\"Russian Hill\", \"Golden Gate Park\"): 21,\n    (\"Russian Hill\", \"Mission District\"): 16,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Golden Gate Park\", \"Alamo Square\"): 10,\n    (\"Golden Gate Park\", \"Russian Hill\"): 19,\n    (\"Golden Gate Park\", \"Mission District\"): 17,\n    (\"Mission District\", \"Sunset District\"): 24,\n    (\"Mission District\", \"Alamo Square\"): 11,\n    (\"Mission District\", \"Russian Hill\"): 15,\n    (\"Mission District\", \"Golden Gate Park\"): 17,\n}\n\n# Define participant availability and required time\nparticipants = {\n    \"Charles\": {\"location\": \"Alamo Square\", \"available\": (datetime.strptime(\"18:00\", \"%H:%M\"), datetime.strptime(\"20:45\", \"%H:%M\")), \"min_time\": 90},\n    \"Margaret\": {\"location\": \"Russian Hill\", \"available\": (datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")), \"min_time\": 30},\n    \"Daniel\": {\"location\": \"Golden Gate Park\", \"available\": (datetime.strptime(\"8:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")), \"min_time\": 15},\n    \"Stephanie\": {\"location\": \"Mission District\", \"available\": (datetime.strptime(\"20:30\", \"%H:%M\"), datetime.strptime(\"22:00\", \"%H:%M\")), \"min_time\": 90},\n}\n\n# Define the initial time at Sunset District\nstart_time = datetime.strptime(\"9:00\", \"%H:%M\")\nitinerary = []\n\n# Create a function to schedule meetings\ndef schedule_meetings():\n    global itinerary\n    current_time = start_time\n    locations_to_visit = list(participants.keys())\n    \n    # Order participants for scheduling based on ending time of their availability\n    locations_to_visit.sort(key=lambda x: participants[x][\"available\"][1])\n    \n    # Loop through each schedule option and check constraints\n    for perm in permutations(locations_to_visit):\n        temp_time = current_time\n        temp_itinerary = []\n        is_valid_schedule = True\n        \n        for person in perm:\n            loc = participants[person][\"location\"]\n            visit_start, visit_end = participants[person][\"available\"]\n            min_duration = timedelta(minutes=participants[person][\"min_time\"])\n            \n            # Travel time to the location\n            if temp_time < visit_start:\n                temp_time = visit_start\n            \n            travel_time = travel_times.get((current_time.strftime(\"%H:%M\"), loc)) or travel_times.get((loc, current_time.strftime(\"%H:%M\")))\n            if travel_time:\n                temp_time += timedelta(minutes=travel_time)\n            \n            # Calculate end time for meeting\n            meeting_end_time = temp_time + min_duration\n            \n            # Check if the meeting can fit in the participant's available time\n            if meeting_end_time <= visit_end:\n                temp_itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": loc,\n                    \"person\": person,\n                    \"start_time\": temp_time.strftime(\"%H:%M\"),\n                    \"end_time\": meeting_end_time.strftime(\"%H:%M\"),\n                })\n                temp_time = meeting_end_time + timedelta(minutes=5)  # Add 5 mins to transition to the next meeting\n            else:\n                is_valid_schedule = False\n                break\n        \n        if is_valid_schedule and len(temp_itinerary) > len(itinerary):\n            itinerary = temp_itinerary\n\nschedule_meetings()\n\n# Convert the result to the required JSON format\nresult = {\n    \"itinerary\": itinerary\n}\n\n# Output the result as JSON\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_372"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Daniel",
                        "start_time": "9:12",
                        "end_time": "9:27"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Kevin",
                        "start_time": "13:41",
                        "end_time": "14:11"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Betty",
                        "start_time": "14:31",
                        "end_time": "15:01"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Steven",
                        "start_time": "16:30",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Lisa",
                        "start_time": "19:15",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_times = {\n    ('Mission District', 'The Castro'): 7,\n    ('Mission District', 'Nob Hill'): 12,\n    ('Mission District', 'Presidio'): 25,\n    ('Mission District', 'Marina District'): 19,\n    ('Mission District', 'Pacific Heights'): 16,\n    ('Mission District', 'Golden Gate Park'): 17,\n    ('Mission District', 'Chinatown'): 16,\n    ('Mission District', 'Richmond District'): 20,\n    ('The Castro', 'Nob Hill'): 16,\n    ('The Castro', 'Presidio'): 20,\n    ('The Castro', 'Marina District'): 21,\n    ('The Castro', 'Pacific Heights'): 16,\n    ('The Castro', 'Golden Gate Park'): 11,\n    ('The Castro', 'Chinatown'): 22,\n    ('The Castro', 'Richmond District'): 16,\n    ('Nob Hill', 'Presidio'): 17,\n    ('Nob Hill', 'Marina District'): 11,\n    ('Nob Hill', 'Pacific Heights'): 8,\n    ('Nob Hill', 'Golden Gate Park'): 17,\n    ('Nob Hill', 'Chinatown'): 6,\n    ('Nob Hill', 'Richmond District'): 14,\n    ('Presidio', 'Marina District'): 11,\n    ('Presidio', 'Pacific Heights'): 11,\n    ('Presidio', 'Golden Gate Park'): 12,\n    ('Presidio', 'Chinatown'): 21,\n    ('Presidio', 'Richmond District'): 7,\n    ('Marina District', 'Pacific Heights'): 6,\n    ('Marina District', 'Golden Gate Park'): 18,\n    ('Marina District', 'Chinatown'): 15,\n    ('Marina District', 'Richmond District'): 11,\n    ('Pacific Heights', 'Golden Gate Park'): 15,\n    ('Pacific Heights', 'Chinatown'): 11,\n    ('Golden Gate Park', 'Chinatown'): 23,\n}\n\n# Meeting constraints\nmeetings = {\n    'Lisa': {'location': 'The Castro', 'start': '19:15', 'end': '21:15', 'duration': 120},\n    'Daniel': {'location': 'Nob Hill', 'start': '08:15', 'end': '11:00', 'duration': 15},\n    'Elizabeth': {'location': 'Presidio', 'start': '21:15', 'end': '22:15', 'duration': 45},\n    'Steven': {'location': 'Marina District', 'start': '16:30', 'end': '20:45', 'duration': 90},\n    'Timothy': {'location': 'Pacific Heights', 'start': '12:00', 'end': '18:00', 'duration': 90},\n    'Ashley': {'location': 'Golden Gate Park', 'start': '20:45', 'end': '21:45', 'duration': 60},\n    'Kevin': {'location': 'Chinatown', 'start': '12:00', 'end': '19:00', 'duration': 30},\n    'Betty': {'location': 'Richmond District', 'start': '13:15', 'end': '15:45', 'duration': 30},\n}\n\n# Initial time in Mission District\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nitinerary = []\n\n# Function to add meeting to itinerary\ndef add_meeting(person, location, start, duration):\n    end = start + timedelta(minutes=duration)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": start.strftime(\"%H:%M\"),\n        \"end_time\": end.strftime(\"%H:%M\"),\n    })\n    return end\n\ncurrent_time = start_time\n\n# Function to compute schedule considering all constraints\nfor person, details in meetings.items():\n    location = details['location']\n    duration = details['duration']\n    start_window = datetime.strptime(details['start'], \"%H:%M\")\n    end_window = datetime.strptime(details['end'], \"%H:%M\")\n\n    travel_back = travel_times.get(('Mission District', location), 0)\n    travel_to = travel_times.get((location, 'Mission District'), 0)\n\n    # Check meeting time in the window\n    if current_time < start_window:\n        current_time = start_window\n\n    if current_time + timedelta(minutes=duration + travel_back) > end_window:\n        continue  # Not enough time for this meeting\n\n    # Move to the location for the meeting\n    current_time += timedelta(minutes=travel_back)\n\n    # Schedule the meeting\n    current_time = add_meeting(person, location, current_time, duration)\n\n    # Travel back to Mission District\n    current_time += timedelta(minutes=travel_to)\n\n# Output the resulting itinerary in JSON format\nresult = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_701"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joshua",
                        "start_time": "9:21",
                        "end_time": "11:06"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "David",
                        "start_time": "11:26",
                        "end_time": "11:56"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joshua",
                        "start_time": "9:20",
                        "end_time": "11:05"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "David",
                        "start_time": "11:25",
                        "end_time": "11:55"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Stephanie",
                        "start_time": "15:30",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kimberly",
                        "start_time": "16:45",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Lisa",
                        "start_time": "18:07",
                        "end_time": "18:52"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Timothy",
                        "start_time": "19:45",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\ntravel_times = {\n    (\"The Castro\", \"Marina District\"): 22,\n    (\"The Castro\", \"Presidio\"): 21,\n    (\"The Castro\", \"North Beach\"): 23,\n    (\"The Castro\", \"Embarcadero\"): 25,\n    (\"The Castro\", \"Haight-Ashbury\"): 6,\n    (\"The Castro\", \"Golden Gate Park\"): 13,\n    (\"The Castro\", \"Richmond District\"): 16,\n    (\"The Castro\", \"Alamo Square\"): 8,\n    (\"The Castro\", \"Financial District\"): 20,\n    (\"The Castro\", \"Sunset District\"): 17,\n    (\"Marina District\", \"The Castro\"): 22,\n    (\"Marina District\", \"Presidio\"): 10,\n    (\"Marina District\", \"North Beach\"): 11,\n    (\"Marina District\", \"Embarcadero\"): 12,\n    (\"Marina District\", \"Haight-Ashbury\"): 17,\n    (\"Marina District\", \"Golden Gate Park\"): 16,\n    (\"Marina District\", \"Richmond District\"): 9,\n    (\"Marina District\", \"Alamo Square\"): 15,\n    (\"Marina District\", \"Financial District\"): 15,\n    (\"Marina District\", \"Sunset District\"): 21,\n    (\"Presidio\", \"The Castro\"): 21,\n    (\"Presidio\", \"Marina District\"): 10,\n    (\"Presidio\", \"North Beach\"): 17,\n    (\"Presidio\", \"Embarcadero\"): 20,\n    (\"Presidio\", \"Haight-Ashbury\"): 15,\n    (\"Presidio\", \"Golden Gate Park\"): 11,\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Presidio\", \"Alamo Square\"): 19,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Presidio\", \"Sunset District\"): 15,\n    (\"North Beach\", \"The Castro\"): 23,\n    (\"North Beach\", \"Marina District\"): 9,\n    (\"North Beach\", \"Presidio\"): 17,\n    (\"North Beach\", \"Embarcadero\"): 6,\n    (\"North Beach\", \"Haight-Ashbury\"): 19,\n    (\"North Beach\", \"Golden Gate Park\"): 22,\n    (\"North Beach\", \"Richmond District\"): 18,\n    (\"North Beach\", \"Alamo Square\"): 16,\n    (\"North Beach\", \"Financial District\"): 8,\n    (\"North Beach\", \"Sunset District\"): 27,\n    (\"Embarcadero\", \"The Castro\"): 25,\n    (\"Embarcadero\", \"Marina District\"): 12,\n    (\"Embarcadero\", \"Presidio\"): 20,\n    (\"Embarcadero\", \"North Beach\"): 5,\n    (\"Embarcadero\", \"Haight-Ashbury\"): 21,\n    (\"Embarcadero\", \"Golden Gate Park\"): 25,\n    (\"Embarcadero\", \"Richmond District\"): 21,\n    (\"Embarcadero\", \"Alamo Square\"): 19,\n    (\"Embarcadero\", \"Financial District\"): 5,\n    (\"Embarcadero\", \"Sunset District\"): 30,\n    (\"Haight-Ashbury\", \"The Castro\"): 6,\n    (\"Haight-Ashbury\", \"Marina District\"): 17,\n    (\"Haight-Ashbury\", \"Presidio\"): 15,\n    (\"Haight-Ashbury\", \"North Beach\"): 19,\n    (\"Haight-Ashbury\", \"Embarcadero\"): 20,\n    (\"Haight-Ashbury\", \"Golden Gate Park\"): 7,\n    (\"Haight-Ashbury\", \"Richmond District\"): 10,\n    (\"Haight-Ashbury\", \"Alamo Square\"): 5,\n    (\"Haight-Ashbury\", \"Financial District\"): 19,\n    (\"Haight-Ashbury\", \"Sunset District\"): 15,\n    (\"Golden Gate Park\", \"The Castro\"): 13,\n    (\"Golden Gate Park\", \"Marina District\"): 16,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"North Beach\"): 23,\n    (\"Golden Gate Park\", \"Embarcadero\"): 25,\n    (\"Golden Gate Park\", \"Haight-Ashbury\"): 7,\n    (\"Golden Gate Park\", \"Richmond District\"): 9,\n    (\"Golden Gate Park\", \"Alamo Square\"): 9,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Richmond District\", \"The Castro\"): 16,\n    (\"Richmond District\", \"Marina District\"): 9,\n    (\"Richmond District\", \"Presidio\"): 7,\n    (\"Richmond District\", \"North Beach\"): 17,\n    (\"Richmond District\", \"Embarcadero\"): 19,\n    (\"Richmond District\", \"Haight-Ashbury\"): 10,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Richmond District\", \"Alamo Square\"): 13,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"Sunset District\"): 11,\n    (\"Alamo Square\", \"The Castro\"): 8,\n    (\"Alamo Square\", \"Marina District\"): 15,\n    (\"Alamo Square\", \"Presidio\"): 17,\n    (\"Alamo Square\", \"North Beach\"): 15,\n    (\"Alamo Square\", \"Embarcadero\"): 16,\n    (\"Alamo Square\", \"Haight-Ashbury\"): 5,\n    (\"Alamo Square\", \"Golden Gate Park\"): 9,\n    (\"Alamo Square\", \"Richmond District\"): 11,\n    (\"Alamo Square\", \"Financial District\"): 17,\n    (\"Alamo Square\", \"Sunset District\"): 16,\n    (\"Financial District\", \"The Castro\"): 20,\n    (\"Financial District\", \"Marina District\"): 15,\n    (\"Financial District\", \"Presidio\"): 22,\n    (\"Financial District\", \"North Beach\"): 7,\n    (\"Financial District\", \"Embarcadero\"): 4,\n    (\"Financial District\", \"Haight-Ashbury\"): 19,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Financial District\", \"Alamo Square\"): 17,\n    (\"Financial District\", \"Sunset District\"): 30,\n    (\"Sunset District\", \"The Castro\"): 17,\n    (\"Sunset District\", \"Marina District\"): 21,\n    (\"Sunset District\", \"Presidio\"): 16,\n    (\"Sunset District\", \"North Beach\"): 28,\n    (\"Sunset District\", \"Embarcadero\"): 30,\n    (\"Sunset District\", \"Haight-Ashbury\"): 15,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"Sunset District\", \"Richmond District\"): 12,\n    (\"Sunset District\", \"Alamo Square\"): 17,\n    (\"Sunset District\", \"Financial District\"): 30,\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Elizabeth\", \"location\": \"Marina District\", \"available_from\": \"19:00\", \"available_to\": \"20:45\", \"min_duration\": 105},\n    {\"name\": \"Joshua\", \"location\": \"Presidio\", \"available_from\": \"08:30\", \"available_to\": \"13:15\", \"min_duration\": 105},\n    {\"name\": \"Timothy\", \"location\": \"North Beach\", \"available_from\": \"19:45\", \"available_to\": \"22:00\", \"min_duration\": 90},\n    {\"name\": \"David\", \"location\": \"Embarcadero\", \"available_from\": \"10:45\", \"available_to\": \"12:30\", \"min_duration\": 30},\n    {\"name\": \"Kimberly\", \"location\": \"Haight-Ashbury\", \"available_from\": \"16:45\", \"available_to\": \"21:30\", \"min_duration\": 75},\n    {\"name\": \"Lisa\", \"location\": \"Golden Gate Park\", \"available_from\": \"17:30\", \"available_to\": \"21:45\", \"min_duration\": 45},\n    {\"name\": \"Ronald\", \"location\": \"Richmond District\", \"available_from\": \"08:00\", \"available_to\": \"09:30\", \"min_duration\": 90},\n    {\"name\": \"Stephanie\", \"location\": \"Alamo Square\", \"available_from\": \"15:30\", \"available_to\": \"16:30\", \"min_duration\": 30},\n    {\"name\": \"Helen\", \"location\": \"Financial District\", \"available_from\": \"17:30\", \"available_to\": \"18:30\", \"min_duration\": 45},\n    {\"name\": \"Laura\", \"location\": \"Sunset District\", \"available_from\": \"17:45\", \"available_to\": \"21:15\", \"min_duration\": 90},\n]\n\n# Function to parse time\ndef parse_time(t):\n    return datetime.strptime(t, \"%H:%M\")\n\n# Function to compute the meeting schedule\ndef compute_meeting_schedule():\n    itinerary = []\n    current_time = parse_time(\"09:00\")\n    current_location = \"The Castro\"\n\n    # Meeting each person as per constraints\n    for meeting in meetings:\n        start_time = parse_time(meeting[\"available_from\"])\n        end_time = parse_time(meeting[\"available_to\"])\n        min_duration = timedelta(minutes=meeting[\"min_duration\"])\n\n        # Calculate travel to the meeting location\n        travel_time = travel_times[(current_location, meeting[\"location\"])]\n        travel_duration = timedelta(minutes=travel_time)\n\n        # Determine the latest possible start time\n        latest_start = end_time - min_duration\n\n        # Check if current_time and travel time allows meeting\n        if current_time + travel_duration >= start_time and current_time + travel_duration <= latest_start:\n            # Start meeting\n            meeting_start_time = max(start_time, current_time + travel_duration)\n            meeting_end_time = meeting_start_time + min_duration\n\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": meeting[\"location\"],\n                \"person\": meeting[\"name\"],\n                \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n                \"end_time\": meeting_end_time.strftime(\"%H:%M\"),\n            })\n\n            # Update current_time and location\n            current_time = meeting_end_time\n            current_location = meeting[\"location\"]\n\n        # Handle end point where we need to head back to previous or other meeting points\n        if current_time > end_time:  # If we exceed person's end time\n            current_time = end_time # Reset current_time for next meetings\n\n    return itinerary\n\n# Generate the optimal meeting schedule\noptimal_schedule = compute_meeting_schedule()\n\n# Convert to JSON format\noutput = {\"itinerary\": optimal_schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_962"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Joshua",
                        "start_time": "20:45",
                        "end_time": "21:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Joshua",
                        "start_time": "20:45",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef compute_meeting_schedule():\n    # Input parameters\n    arrival_time = datetime.strptime('09:00', '%H:%M')\n    travel_to_park = timedelta(minutes=11)\n    travel_back = timedelta(minutes=10)\n    joshua_start = datetime.strptime('20:45', '%H:%M')\n    joshua_end = datetime.strptime('21:45', '%H:%M')\n    minimum_meeting_duration = timedelta(minutes=15)\n\n    # Calculate times\n    depart_for_park_time = arrival_time + travel_to_park\n    meeting_start_time = max(depart_for_park_time, joshua_start)\n    meeting_end_time = meeting_start_time + minimum_meeting_duration\n\n    # Check if the meeting can happen\n    if meeting_end_time <= joshua_end:\n        # Create itinerary\n        itinerary = [\n            {\n                \"action\": \"meet\",\n                \"location\": \"Golden Gate Park\",\n                \"person\": \"Joshua\",\n                \"start_time\": meeting_start_time.strftime('%H:%M'),\n                \"end_time\": meeting_end_time.strftime('%H:%M')\n            }\n        ]\n    else:\n        # No feasible meeting can be arranged\n        itinerary = []\n\n    result = {\n        \"itinerary\": itinerary\n    }\n\n    return json.dumps(result, indent=2)\n\n# Run the function and print the output\nif __name__ == \"__main__\":\n    output = compute_meeting_schedule()\n    print(output)\n```",
            "count": "meeting_planning_example_88"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Ronald",
                        "start_time": "9:21",
                        "end_time": "10:51"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jessica",
                        "start_time": "13:45",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "William",
                        "start_time": "14:45",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Ashley",
                        "start_time": "17:15",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Daniel",
                        "start_time": "7:26",
                        "end_time": "9:11"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Daniel",
                        "start_time": "9:26",
                        "end_time": "11:11"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Ronald",
                        "start_time": "11:27",
                        "end_time": "12:57"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jessica",
                        "start_time": "13:45",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Ashley",
                        "start_time": "17:15",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "William",
                        "start_time": "19:21",
                        "end_time": "19:36"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times in minutes\ntravel_times = {\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Bayview\"): 31,\n    (\"Presidio\", \"Chinatown\"): 21,\n    (\"Presidio\", \"North Beach\"): 18,\n    (\"Presidio\", \"Mission District\"): 26,\n    (\"Golden Gate Park\", \"Bayview\"): 23,\n    (\"Golden Gate Park\", \"Chinatown\"): 23,\n    (\"Golden Gate Park\", \"North Beach\"): 24,\n    (\"Golden Gate Park\", \"Mission District\"): 17,\n    (\"Bayview\", \"Chinatown\"): 22,\n    (\"Bayview\", \"North Beach\"): 21,\n    (\"Bayview\", \"Mission District\"): 13,\n    (\"Chinatown\", \"North Beach\"): 6,\n    (\"Chinatown\", \"Mission District\"): 18,\n    (\"North Beach\", \"Mission District\"): 17,\n}\n\n# Define meeting constraints\nmeetings = {\n    \"Jessica\": {\n        \"location\": \"Golden Gate Park\",\n        \"available_from\": \"13:45\",\n        \"available_to\": \"15:00\",\n        \"duration\": 30\n    },\n    \"Ashley\": {\n        \"location\": \"Bayview\",\n        \"available_from\": \"17:15\",\n        \"available_to\": \"20:00\",\n        \"duration\": 105\n    },\n    \"Ronald\": {\n        \"location\": \"Chinatown\",\n        \"available_from\": \"07:15\",\n        \"available_to\": \"14:45\",\n        \"duration\": 90\n    },\n    \"William\": {\n        \"location\": \"North Beach\",\n        \"available_from\": \"13:15\",\n        \"available_to\": \"20:15\",\n        \"duration\": 15\n    },\n    \"Daniel\": {\n        \"location\": \"Mission District\",\n        \"available_from\": \"07:00\",\n        \"available_to\": \"11:15\",\n        \"duration\": 105\n    }\n}\n\n# Convert time strings to datetime objects for easier manipulation\ndef time_str_to_datetime(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\ndef datetime_to_time_str(time_dt):\n    return time_dt.strftime('%H:%M')\n\n# Function to find meeting schedule\ndef find_schedule():\n    start_time = time_str_to_datetime(\"09:00\")\n    itinerary = []\n    \n    # Meeting with Ronald first (as he's available from morning)\n    ronald_avail_from = time_str_to_datetime(meetings[\"Ronald\"][\"available_from\"])\n    ronald_avail_to = time_str_to_datetime(meetings[\"Ronald\"][\"available_to\"])\n    \n    # Calculate travel time to Chinatown from Presidio\n    travel_time_to_ronald = travel_times[(\"Presidio\", \"Chinatown\")]\n    time_to_meet_ronald = start_time + timedelta(minutes=travel_time_to_ronald)\n    \n    if time_to_meet_ronald <= ronald_avail_to - timedelta(minutes=meetings[\"Ronald\"][\"duration\"]):\n        meet_ronald_start = max(time_to_meet_ronald, ronald_avail_from)\n        meet_ronald_end = meet_ronald_start + timedelta(minutes=meetings[\"Ronald\"][\"duration\"])\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"person\": \"Ronald\",\n            \"start_time\": datetime_to_time_str(meet_ronald_start),\n            \"end_time\": datetime_to_time_str(meet_ronald_end),\n        })\n        start_time = meet_ronald_end + timedelta(minutes=travel_time_to_ronald)  # travel back to Presidio\n\n    # Meeting with Jessica next\n    jessica_avail_from = time_str_to_datetime(meetings[\"Jessica\"][\"available_from\"])\n    jessica_avail_to = time_str_to_datetime(meetings[\"Jessica\"][\"available_to\"])\n\n    travel_time_to_jessica = travel_times[(\"Presidio\", \"Golden Gate Park\")]\n    time_to_meet_jessica = start_time + timedelta(minutes=travel_time_to_jessica)\n\n    if time_to_meet_jessica <= jessica_avail_to - timedelta(minutes=meetings[\"Jessica\"][\"duration\"]):\n        meet_jessica_start = max(time_to_meet_jessica, jessica_avail_from)\n        meet_jessica_end = meet_jessica_start + timedelta(minutes=meetings[\"Jessica\"][\"duration\"])\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Golden Gate Park\",\n            \"person\": \"Jessica\",\n            \"start_time\": datetime_to_time_str(meet_jessica_start),\n            \"end_time\": datetime_to_time_str(meet_jessica_end),\n        })\n        start_time = meet_jessica_end + timedelta(minutes=travel_time_to_jessica)  # travel back to Presidio\n\n    # Meeting with William\n    william_avail_from = time_str_to_datetime(meetings[\"William\"][\"available_from\"])\n    william_avail_to = time_str_to_datetime(meetings[\"William\"][\"available_to\"])\n\n    travel_time_to_william = travel_times[(\"Presidio\", \"North Beach\")]\n    time_to_meet_william = start_time + timedelta(minutes=travel_time_to_william)\n\n    if time_to_meet_william <= william_avail_to - timedelta(minutes=meetings[\"William\"][\"duration\"]):\n        meet_william_start = max(time_to_meet_william, william_avail_from)\n        meet_william_end = meet_william_start + timedelta(minutes=meetings[\"William\"][\"duration\"])\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"North Beach\",\n            \"person\": \"William\",\n            \"start_time\": datetime_to_time_str(meet_william_start),\n            \"end_time\": datetime_to_time_str(meet_william_end),\n        })\n        start_time = meet_william_end + timedelta(minutes=travel_time_to_william)  # travel back to Presidio\n\n    # Meeting with Ashley last\n    ashley_avail_from = time_str_to_datetime(meetings[\"Ashley\"][\"available_from\"])\n    ashley_avail_to = time_str_to_datetime(meetings[\"Ashley\"][\"available_to\"])\n\n    travel_time_to_ashley = travel_times[(\"Presidio\", \"Bayview\")]\n    time_to_meet_ashley = start_time + timedelta(minutes=travel_time_to_ashley)\n\n    if time_to_meet_ashley <= ashley_avail_to - timedelta(minutes=meetings[\"Ashley\"][\"duration\"]):\n        meet_ashley_start = max(time_to_meet_ashley, ashley_avail_from)\n        meet_ashley_end = meet_ashley_start + timedelta(minutes=meetings[\"Ashley\"][\"duration\"])\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Bayview\",\n            \"person\": \"Ashley\",\n            \"start_time\": datetime_to_time_str(meet_ashley_start),\n            \"end_time\": datetime_to_time_str(meet_ashley_end),\n        })\n\n    # Meeting with Daniel\n    daniel_avail_from = time_str_to_datetime(meetings[\"Daniel\"][\"available_from\"])\n    daniel_avail_to = time_str_to_datetime(meetings[\"Daniel\"][\"available_to\"])\n\n    time_to_meet_daniel = datetime.strptime(\"07:00\", \"%H:%M\") + timedelta(minutes=travel_times[(\"Presidio\", \"Mission District\")])\n    \n    if time_to_meet_daniel <= daniel_avail_to - timedelta(minutes=meetings[\"Daniel\"][\"duration\"]):\n        meet_daniel_start = max(time_to_meet_daniel, daniel_avail_from)\n        meet_daniel_end = meet_daniel_start + timedelta(minutes=meetings[\"Daniel\"][\"duration\"])\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Mission District\",\n            \"person\": \"Daniel\",\n            \"start_time\": datetime_to_time_str(meet_daniel_start),\n            \"end_time\": datetime_to_time_str(meet_daniel_end),\n        })\n\n    return json.dumps({\"itinerary\": itinerary}, indent=2)\n\n# Run the schedule computation\nif __name__ == \"__main__\":\n    schedule = find_schedule()\n    print(\"SOLUTION:\")\n    print(schedule)\n```",
            "count": "meeting_planning_example_454"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Timothy",
                        "start_time": "9:45",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "18:30",
                        "end_time": "20:00"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Ashley",
                        "start_time": "20:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Timothy",
                        "start_time": "9:45",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "18:30",
                        "end_time": "20:00"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Ashley",
                        "start_time": "20:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    ('Russian Hill', 'Nob Hill'): 5,\n    ('Russian Hill', 'Mission District'): 16,\n    ('Russian Hill', 'Embarcadero'): 8,\n    ('Nob Hill', 'Russian Hill'): 5,\n    ('Nob Hill', 'Mission District'): 13,\n    ('Nob Hill', 'Embarcadero'): 9,\n    ('Mission District', 'Russian Hill'): 15,\n    ('Mission District', 'Nob Hill'): 12,\n    ('Mission District', 'Embarcadero'): 19,\n    ('Embarcadero', 'Russian Hill'): 8,\n    ('Embarcadero', 'Nob Hill'): 10,\n    ('Embarcadero', 'Mission District'): 20,\n}\n\n# Meeting constraints\nparticipants = {\n    'Patricia': {\n        'location': 'Nob Hill',\n        'available_from': '18:30',\n        'available_to': '21:45',\n        'min_meeting_duration': 90\n    },\n    'Ashley': {\n        'location': 'Mission District',\n        'available_from': '20:30',\n        'available_to': '21:15',\n        'min_meeting_duration': 45\n    },\n    'Timothy': {\n        'location': 'Embarcadero',\n        'available_from': '09:45',\n        'available_to': '17:45',\n        'min_meeting_duration': 120\n    },\n}\n\narrival_time = '09:00'\ndeparture_time = '21:45'\n\n# Function to convert time strings to datetime objects\ndef time_to_datetime(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\n# Function to compute end time based on start time and duration\ndef compute_end_time(start_time, duration):\n    return start_time + timedelta(minutes=duration)\n\n# Generate meeting schedule\nschedule = []\ncurrent_time = time_to_datetime(arrival_time)\n\n# Schedule for Timothy\ntimothy_start = time_to_datetime(participants['Timothy']['available_from'])\ntimothy_end = time_to_datetime(participants['Timothy']['available_to'])\n\n# Try to meet Timothy first\nif current_time < timothy_start:\n    current_time = timothy_start\n\ntimothy_meeting_duration = participants['Timothy']['min_meeting_duration']\ntimothy_meeting_end = compute_end_time(current_time, timothy_meeting_duration)\n\nif timothy_meeting_end <= timothy_end:\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": participants['Timothy']['location'],\n        \"person\": \"Timothy\",\n        \"start_time\": current_time.strftime('%H:%M'),\n        \"end_time\": timothy_meeting_end.strftime('%H:%M')\n    })\n    current_time = timothy_meeting_end + timedelta(minutes=travel_times[('Embarcadero', 'Nob Hill')])\n\n# Schedule for Patricia\npatricia_start = time_to_datetime(participants['Patricia']['available_from'])\npatricia_end = time_to_datetime(participants['Patricia']['available_to'])\n\nif current_time < patricia_start:\n    current_time = patricia_start\n\npatricia_meeting_duration = participants['Patricia']['min_meeting_duration']\npatricia_meeting_end = compute_end_time(current_time, patricia_meeting_duration)\n\nif patricia_meeting_end <= patricia_end:\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": participants['Patricia']['location'],\n        \"person\": \"Patricia\",\n        \"start_time\": current_time.strftime('%H:%M'),\n        \"end_time\": patricia_meeting_end.strftime('%H:%M'),\n    })\n    current_time = patricia_meeting_end + timedelta(minutes=travel_times[('Nob Hill', 'Mission District')])\n\n# Schedule for Ashley\nashley_start = time_to_datetime(participants['Ashley']['available_from'])\nashley_end = time_to_datetime(participants['Ashley']['available_to'])\n\nif current_time < ashley_start:\n    current_time = ashley_start\n\nashley_meeting_duration = participants['Ashley']['min_meeting_duration']\nashley_meeting_end = compute_end_time(current_time, ashley_meeting_duration)\n\nif ashley_meeting_end <= ashley_end:\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": participants['Ashley']['location'],\n        \"person\": \"Ashley\",\n        \"start_time\": current_time.strftime('%H:%M'),\n        \"end_time\": ashley_meeting_end.strftime('%H:%M'),\n    })\n\n# Output the schedule as a JSON formatted dictionary\noutput = {\"itinerary\": schedule}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_272"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Sandra",
                        "start_time": "9:00",
                        "end_time": "9:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "9:30",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "12:22",
                        "end_time": "13:52"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mark",
                        "start_time": "14:15",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "James",
                        "start_time": "20:16",
                        "end_time": "22:16"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Carol",
                        "start_time": "18:30",
                        "end_time": "18:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "9:30",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "12:15",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mark",
                        "start_time": "14:08",
                        "end_time": "14:23"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Sandra",
                        "start_time": "14:43",
                        "end_time": "14:58"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Carol",
                        "start_time": "18:15",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "James",
                        "start_time": "20:00",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times in minutes\ntravel_times = {\n    ('North Beach', 'Pacific Heights'): 8,\n    ('North Beach', 'Chinatown'): 6,\n    ('North Beach', 'Union Square'): 7,\n    ('North Beach', 'Mission District'): 18,\n    ('North Beach', 'Golden Gate Park'): 22,\n    ('North Beach', 'Nob Hill'): 7,\n    ('Pacific Heights', 'North Beach'): 9,\n    ('Pacific Heights', 'Chinatown'): 11,\n    ('Pacific Heights', 'Union Square'): 12,\n    ('Pacific Heights', 'Mission District'): 15,\n    ('Pacific Heights', 'Golden Gate Park'): 15,\n    ('Pacific Heights', 'Nob Hill'): 8,\n    ('Chinatown', 'North Beach'): 3,\n    ('Chinatown', 'Pacific Heights'): 10,\n    ('Chinatown', 'Union Square'): 7,\n    ('Chinatown', 'Mission District'): 18,\n    ('Chinatown', 'Golden Gate Park'): 23,\n    ('Chinatown', 'Nob Hill'): 8,\n    ('Union Square', 'North Beach'): 10,\n    ('Union Square', 'Pacific Heights'): 15,\n    ('Union Square', 'Chinatown'): 7,\n    ('Union Square', 'Mission District'): 14,\n    ('Union Square', 'Golden Gate Park'): 22,\n    ('Union Square', 'Nob Hill'): 9,\n    ('Mission District', 'North Beach'): 17,\n    ('Mission District', 'Pacific Heights'): 16,\n    ('Mission District', 'Chinatown'): 16,\n    ('Mission District', 'Union Square'): 15,\n    ('Mission District', 'Golden Gate Park'): 17,\n    ('Mission District', 'Nob Hill'): 12,\n    ('Golden Gate Park', 'North Beach'): 24,\n    ('Golden Gate Park', 'Pacific Heights'): 16,\n    ('Golden Gate Park', 'Chinatown'): 23,\n    ('Golden Gate Park', 'Union Square'): 22,\n    ('Golden Gate Park', 'Mission District'): 17,\n    ('Golden Gate Park', 'Nob Hill'): 20,\n    ('Nob Hill', 'North Beach'): 8,\n    ('Nob Hill', 'Pacific Heights'): 8,\n    ('Nob Hill', 'Chinatown'): 6,\n    ('Nob Hill', 'Union Square'): 7,\n    ('Nob Hill', 'Mission District'): 13,\n    ('Nob Hill', 'Golden Gate Park'): 17,\n}\n\n# Define meeting times and constraints\nmeetings = {\n    \"James\": {\"location\": \"Pacific Heights\", \"start\": \"20:00\", \"end\": \"22:00\", \"min_duration\": 120},\n    \"Robert\": {\"location\": \"Chinatown\", \"start\": \"12:15\", \"end\": \"16:45\", \"min_duration\": 90},\n    \"Jeffrey\": {\"location\": \"Union Square\", \"start\": \"09:30\", \"end\": \"15:30\", \"min_duration\": 120},\n    \"Carol\": {\"location\": \"Mission District\", \"start\": \"18:15\", \"end\": \"21:15\", \"min_duration\": 15},\n    \"Mark\": {\"location\": \"Golden Gate Park\", \"start\": \"11:30\", \"end\": \"17:45\", \"min_duration\": 15},\n    \"Sandra\": {\"location\": \"Nob Hill\", \"start\": \"08:00\", \"end\": \"15:30\", \"min_duration\": 15},\n}\n\n# Define arrival time\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\nitinerary = []\n\n# Function to add a meeting to the itinerary\ndef schedule_meeting(person, location, start_time, end_time):\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": start_time.strftime(\"%H:%M\"),\n        \"end_time\": end_time.strftime(\"%H:%M\"),\n    })\n\n# Helper function to calculate available time slots\ndef available_time_slots(person):\n    constraints = meetings[person]\n    start = datetime.strptime(constraints['start'], \"%H:%M\")\n    end = datetime.strptime(constraints['end'], \"%H:%M\")\n    duration = timedelta(minutes=constraints['min_duration'])\n    return (start, end, duration)\n\n# Schedule meetings based on constraints and travel times\ncurrent_time = arrival_time\n# Meet Sandra first\nif current_time < datetime.strptime(meetings[\"Sandra\"][\"start\"], \"%H:%M\"):\n    current_time = datetime.strptime(meetings[\"Sandra\"][\"start\"], \"%H:%M\")\nschedule_meeting(\"Sandra\", \"Nob Hill\", current_time, current_time + timedelta(minutes=15))\ncurrent_time += timedelta(minutes=15)\n\n# Meet Jeffrey next\njeffrey_start, jeffrey_end, jeffrey_duration = available_time_slots(\"Jeffrey\")\njeffrey_meeting_start = max(current_time, jeffrey_start)  # After current time\njeffrey_meeting_end = jeffrey_meeting_start + jeffrey_duration\nif jeffrey_meeting_end <= jeffrey_end:\n    schedule_meeting(\"Jeffrey\", \"Union Square\", jeffrey_meeting_start, jeffrey_meeting_end)\n    current_time = jeffrey_meeting_end\n\n# Meet Robert next\nrobert_start, robert_end, robert_duration = available_time_slots(\"Robert\")\nrobert_meeting_start = max(current_time, robert_start)  # After current time\nrobert_meeting_end = robert_meeting_start + robert_duration\nif robert_meeting_end <= robert_end:\n    travel_time = travel_times[(\"Union Square\", \"Chinatown\")]\n    robert_meeting_start += timedelta(minutes=travel_time)\n    robert_meeting_end += timedelta(minutes=travel_time)\n    schedule_meeting(\"Robert\", \"Chinatown\", robert_meeting_start, robert_meeting_end)\n    current_time = robert_meeting_end\n\n# Meet Mark next\nmark_start, mark_end, mark_duration = available_time_slots(\"Mark\")\nmark_meeting_start = max(current_time, mark_start)  # After current time\nmark_meeting_end = mark_meeting_start + mark_duration\nif mark_meeting_end <= mark_end:\n    travel_time = travel_times[(\"Chinatown\", \"Golden Gate Park\")]\n    mark_meeting_start += timedelta(minutes=travel_time)\n    mark_meeting_end += timedelta(minutes=travel_time)\n    schedule_meeting(\"Mark\", \"Golden Gate Park\", mark_meeting_start, mark_meeting_end)\n    current_time = mark_meeting_end\n\n# Meet James last\njames_start, james_end, james_duration = available_time_slots(\"James\")\njames_meeting_start = max(current_time, james_start)  # After current time\njames_meeting_end = james_meeting_start + james_duration\nif james_meeting_end <= james_end:\n    travel_time = travel_times[(\"Golden Gate Park\", \"Pacific Heights\")]\n    james_meeting_start += timedelta(minutes=travel_time)\n    james_meeting_end += timedelta(minutes=travel_time)\n    schedule_meeting(\"James\", \"Pacific Heights\", james_meeting_start, james_meeting_end)\n\n# Meet Carol before finishing\ncarol_start, carol_end, carol_duration = available_time_slots(\"Carol\")\ncarol_meeting_start = max(current_time, carol_start)  # After current time\ncarol_meeting_end = carol_meeting_start + carol_duration\nif carol_meeting_end <= carol_end:\n    travel_time = travel_times[(\"Pacific Heights\", \"Mission District\")]\n    carol_meeting_start += timedelta(minutes=travel_time)\n    carol_meeting_end += timedelta(minutes=travel_time)\n    schedule_meeting(\"Carol\", \"Mission District\", carol_meeting_start, carol_meeting_end)\n\n# Output the final itinerary in JSON format\nprint(json.dumps({\"itinerary\": itinerary}, indent=2))\n```",
            "count": "meeting_planning_example_592"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "12:30",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Laura",
                        "start_time": "13:07",
                        "end_time": "14:22"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Laura",
                        "start_time": "12:15",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "13:47",
                        "end_time": "14:17"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants\nTRAVEL_TIMES = {\n    (\"The Castro\", \"Mission District\"): 7,\n    (\"The Castro\", \"Financial District\"): 20,\n    (\"Mission District\", \"The Castro\"): 7,\n    (\"Mission District\", \"Financial District\"): 17,\n    (\"Financial District\", \"The Castro\"): 23,\n    (\"Financial District\", \"Mission District\"): 17,\n}\n\n# Meeting constraints\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\nlaura_start = datetime.strptime(\"12:15\", \"%H:%M\")\nlaura_end = datetime.strptime(\"19:45\", \"%H:%M\")\nanthony_start = datetime.strptime(\"12:30\", \"%H:%M\")\nanthony_end = datetime.strptime(\"14:45\", \"%H:%M\")\nlaura_meeting_duration = timedelta(minutes=75)\nanthony_meeting_duration = timedelta(minutes=30)\n\n# Initialize meeting schedule\nitinerary = []\n\n# Define a function to add meetings to the itinerary\ndef add_meeting(location, person, start_time, duration):\n    end_time = start_time + duration\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": start_time.strftime(\"%H:%M\"),\n        \"end_time\": end_time.strftime(\"%H:%M\"),\n    })\n    return end_time\n\n# Meeting with Anthony\n# From Castro to Financial District\ntravel_to_anthony = TRAVEL_TIMES[(\"The Castro\", \"Financial District\")]\ntime_after_travel_to_anthony = arrival_time + timedelta(minutes=travel_to_anthony)\n\nif time_after_travel_to_anthony <= anthony_start:\n    start_time_anthony = anthony_start\nelse:\n    start_time_anthony = time_after_travel_to_anthony\n\nend_time_anthony = start_time_anthony + anthony_meeting_duration\n\n# Ensure the meeting with Anthony ends before he leaves\nif end_time_anthony > anthony_end:\n    end_time_anthony = anthony_end\n    start_time_anthony = end_time_anthony - anthony_meeting_duration\n\nadd_meeting(\"Financial District\", \"Anthony\", start_time_anthony, anthony_meeting_duration)\n\n# Travel back to Castro or to Mission District directly\nif end_time_anthony < laura_start:\n    travel_to_castro = TRAVEL_TIMES[(\"Financial District\", \"The Castro\")]\n    end_time_anthony += timedelta(minutes=travel_to_castro)\n\n# Meeting with Laura\n# From Castro to Mission District\ntravel_to_laura = TRAVEL_TIMES[(\"The Castro\", \"Mission District\")]\nstart_time_laura = end_time_anthony + timedelta(minutes=travel_to_laura)\n\nif start_time_laura < laura_start:\n    start_time_laura = laura_start\n\nend_time_laura = start_time_laura + laura_meeting_duration\n\n# Ensure the meeting with Laura ends before she leaves\nif end_time_laura > laura_end:\n    end_time_laura = laura_end\n    start_time_laura = end_time_laura - laura_meeting_duration\n\nadd_meeting(\"Mission District\", \"Laura\", start_time_laura, laura_meeting_duration)\n\n# Generate output\noutput = {\"itinerary\": itinerary}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_144"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Emily",
                        "start_time": "11:15",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Karen",
                        "start_time": "11:45",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "13:00",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "James",
                        "start_time": "14:31",
                        "end_time": "16:31"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Steven",
                        "start_time": "16:38",
                        "end_time": "17:08"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Matthew",
                        "start_time": "17:29",
                        "end_time": "18:14"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "William",
                        "start_time": "18:33",
                        "end_time": "20:03"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Brian",
                        "start_time": "20:30",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in a dictionary\ntravel_times = {\n    \"Richmond District\": {\n        \"The Castro\": 16,\n        \"Nob Hill\": 17,\n        \"Marina District\": 9,\n        \"Pacific Heights\": 10,\n        \"Haight-Ashbury\": 10,\n        \"Mission District\": 20,\n        \"Chinatown\": 20,\n        \"Russian Hill\": 13,\n        \"Alamo Square\": 13,\n        \"Bayview\": 27\n    },\n    \"The Castro\": {\n        \"Richmond District\": 16,\n        \"Nob Hill\": 16,\n        \"Marina District\": 21,\n        \"Pacific Heights\": 16,\n        \"Haight-Ashbury\": 6,\n        \"Mission District\": 7,\n        \"Chinatown\": 22,\n        \"Russian Hill\": 18,\n        \"Alamo Square\": 8,\n        \"Bayview\": 19\n    },\n    \"Nob Hill\": {\n        \"Richmond District\": 14,\n        \"The Castro\": 17,\n        \"Marina District\": 11,\n        \"Pacific Heights\": 8,\n        \"Haight-Ashbury\": 13,\n        \"Mission District\": 13,\n        \"Chinatown\": 6,\n        \"Russian Hill\": 5,\n        \"Alamo Square\": 11,\n        \"Bayview\": 19\n    },\n    # ... continue defining other locations similarly,\n    # This full structure should include all locations and their travel times.\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Matthew\": {\"location\": \"The Castro\", \"start\": \"16:30\", \"end\": \"20:00\", \"duration\": 45},\n    \"Rebecca\": {\"location\": \"Nob Hill\", \"start\": \"15:15\", \"end\": \"19:15\", \"duration\": 105},\n    \"Brian\": {\"location\": \"Marina District\", \"start\": \"14:15\", \"end\": \"22:00\", \"duration\": 30},\n    \"Emily\": {\"location\": \"Pacific Heights\", \"start\": \"11:15\", \"end\": \"19:45\", \"duration\": 15},\n    \"Karen\": {\"location\": \"Haight-Ashbury\", \"start\": \"11:45\", \"end\": \"17:30\", \"duration\": 30},\n    \"Stephanie\": {\"location\": \"Mission District\", \"start\": \"13:00\", \"end\": \"15:45\", \"duration\": 75},\n    \"James\": {\"location\": \"Chinatown\", \"start\": \"14:30\", \"end\": \"19:00\", \"duration\": 120},\n    \"Steven\": {\"location\": \"Russian Hill\", \"start\": \"14:00\", \"end\": \"20:00\", \"duration\": 30},\n    \"Elizabeth\": {\"location\": \"Alamo Square\", \"start\": \"13:00\", \"end\": \"17:15\", \"duration\": 120},\n    \"William\": {\"location\": \"Bayview\", \"start\": \"18:15\", \"end\": \"20:15\", \"duration\": 90},\n}\n\n# Function to calculate the meeting schedule\ndef calculate_schedule(travel_times, constraints):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    schedule = []\n    current_time = start_time\n    current_location = \"Richmond District\"\n    \n    for person, info in constraints.items():\n        location = info[\"location\"]\n        person's_start_time = datetime.strptime(info[\"start\"], \"%H:%M\")\n        person's_end_time = datetime.strptime(info[\"end\"], \"%H:%M\")\n\n        # Calculate travel time to the person's location\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if we can meet the person\n        if arrival_time >= person's_start_time and arrival_time + timedelta(minutes=info[\"duration\"]) <= person\u2019s_end_time:\n            meet_start_time = arrival_time\n            meet_end_time = meet_start_time + timedelta(minutes=info[\"duration\"])\n            \n            # Append the meeting to the schedule\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": person,\n                \"start_time\": meet_start_time.strftime(\"%H:%M\"),\n                \"end_time\": meet_end_time.strftime(\"%H:%M\")\n            })\n            \n            # Update current time and location\n            current_time = meet_end_time\n            current_location = location\n\n            # Include travel time to next constraint in the loop\n            next_person_location = next(iter(constraints.values()))['location']\n            travel_time_to_next = travel_times[current_location][next_person_location]\n            current_time += timedelta(minutes=travel_time_to_next)\n\n    return {\"itinerary\": schedule}\n\n# Get the meeting schedule\nitinerary = calculate_schedule(travel_times, constraints)\n\n# Output the result as JSON\nprint(json.dumps(itinerary, indent=2))\n```",
            "count": "meeting_planning_example_900"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Jason",
                        "start_time": "9:21",
                        "end_time": "10:36"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kenneth",
                        "start_time": "10:39",
                        "end_time": "11:09"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "11:18",
                        "end_time": "12:33"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Kimberly",
                        "start_time": "12:47",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "14:12",
                        "end_time": "15:42"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "15:47",
                        "end_time": "16:47"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Stephanie",
                        "start_time": "16:57",
                        "end_time": "18:42"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Steven",
                        "start_time": "18:51",
                        "end_time": "19:51"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Karen",
                        "start_time": "21:00",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    (\"Presidio\", \"Haight-Ashbury\"): 15,\n    (\"Presidio\", \"Nob Hill\"): 18,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Presidio\", \"North Beach\"): 18,\n    (\"Presidio\", \"Chinatown\"): 21,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Presidio\", \"Embarcadero\"): 20,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Presidio\", \"Marina District\"): 11,\n    (\"Haight-Ashbury\", \"Nob Hill\"): 15,\n    (\"Haight-Ashbury\", \"Russian Hill\"): 17,\n    (\"Haight-Ashbury\", \"North Beach\"): 19,\n    (\"Haight-Ashbury\", \"Chinatown\"): 19,\n    (\"Haight-Ashbury\", \"Union Square\"): 19,\n    (\"Haight-Ashbury\", \"Embarcadero\"): 20,\n    (\"Haight-Ashbury\", \"Financial District\"): 21,\n    (\"Haight-Ashbury\", \"Marina District\"): 17,\n    (\"Nob Hill\", \"Russian Hill\"): 5,\n    (\"Nob Hill\", \"North Beach\"): 8,\n    (\"Nob Hill\", \"Chinatown\"): 6,\n    (\"Nob Hill\", \"Union Square\"): 7,\n    (\"Nob Hill\", \"Embarcadero\"): 9,\n    (\"Nob Hill\", \"Financial District\"): 9,\n    (\"Nob Hill\", \"Marina District\"): 11,\n    (\"Russian Hill\", \"North Beach\"): 5,\n    (\"Russian Hill\", \"Chinatown\"): 9,\n    (\"Russian Hill\", \"Union Square\"): 10,\n    (\"Russian Hill\", \"Embarcadero\"): 8,\n    (\"Russian Hill\", \"Financial District\"): 11,\n    (\"North Beach\", \"Chinatown\"): 3,\n    (\"North Beach\", \"Union Square\"): 7,\n    (\"North Beach\", \"Embarcadero\"): 6,\n    (\"North Beach\", \"Financial District\"): 8,\n    (\"Chinatown\", \"Union Square\"): 7,\n    (\"Chinatown\", \"Embarcadero\"): 5,\n    (\"Union Square\", \"Embarcadero\"): 10,\n    (\"Financial District\", \"Embarcadero\"): 4,\n    (\"Marina District\", \"Presidio\"): 10,\n    (\"Marina District\", \"Nob Hill\"): 12,\n    (\"Marina District\", \"Russian Hill\"): 8,\n    (\"Marina District\", \"North Beach\"): 11,\n    (\"Marina District\", \"Chinatown\"): 15,\n    (\"Marina District\", \"Union Square\"): 16,\n    (\"Marina District\", \"Embarcadero\"): 14,\n    (\"Marina District\", \"Financial District\"): 17\n}\n\n# Meeting constraints as tuples (person, location, start_time, end_time, min_duration)\nconstraints = [\n    (\"Karen\", \"Haight-Ashbury\", \"21:00\", \"21:45\", 45),\n    (\"Jessica\", \"Nob Hill\", \"13:45\", \"21:00\", 90),\n    (\"Brian\", \"Russian Hill\", \"15:30\", \"21:45\", 60),\n    (\"Kenneth\", \"North Beach\", \"09:45\", \"21:00\", 30),\n    (\"Jason\", \"Chinatown\", \"08:15\", \"11:45\", 75),\n    (\"Stephanie\", \"Union Square\", \"14:45\", \"18:45\", 105),\n    (\"Kimberly\", \"Embarcadero\", \"09:45\", \"19:30\", 75),\n    (\"Steven\", \"Financial District\", \"07:15\", \"21:15\", 60),\n    (\"Mark\", \"Marina District\", \"10:15\", \"13:00\", 75)\n]\n\ndef time_to_minutes(time_str):\n    time = datetime.strptime(time_str, \"%H:%M\")\n    return time.hour * 60 + time.minute\n\ndef minutes_to_time(minutes):\n    hour, minute = divmod(minutes, 60)\n    return f\"{hour}:{minute:02}\"\n\n# Main scheduling algorithm\ndef schedule_meetings():\n    start_time = time_to_minutes(\"9:00\")\n    end_time = time_to_minutes(\"21:45\")\n    \n    # Resulting itinerary\n    itinerary = []\n\n    # Meeting Jason\n    jason_start = time_to_minutes(\"08:15\")\n    jason_end = jason_start + 75\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"person\": \"Jason\",\n        \"start_time\": minutes_to_time(jason_start),\n        \"end_time\": minutes_to_time(jason_end)\n    })\n    \n    # Travel to Presidio from Chinatown\n    travel_time = travel_times[(\"Chinatown\", \"Presidio\")]\n    presido_start_time = jason_end + travel_time\n    if presido_start_time < start_time:\n        presido_start_time = start_time\n\n    # Meeting Kenneth\n    kenneth_start = time_to_minutes(\"09:45\")\n    kenneth_end = kenneth_start + 30\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"North Beach\",\n        \"person\": \"Kenneth\",\n        \"start_time\": minutes_to_time(kenneth_start),\n        \"end_time\": minutes_to_time(kenneth_end)\n    })\n\n    # Travel to Haight-Ashbury to meet Karen\n    travel_time = travel_times[(\"North Beach\", \"Haight-Ashbury\")]\n    karen_start = max(21 * 60, presido_start_time + travel_time)  # arrive at the earliest allowed time\n    karen_end = karen_start + 45\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"person\": \"Karen\",\n        \"start_time\": minutes_to_time(karen_start),\n        \"end_time\": minutes_to_time(karen_end)\n    })\n\n    # Travel to Nob Hill for Jessica\n    travel_time = travel_times[(\"Haight-Ashbury\", \"Nob Hill\")]\n    jessica_start = max(13 * 60 + 45, karen_end + travel_time)\n    jessica_end = jessica_start + 90\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Nob Hill\",\n        \"person\": \"Jessica\",\n        \"start_time\": minutes_to_time(jessica_start),\n        \"end_time\": minutes_to_time(jessica_end)\n    })\n\n    # Travel to Russian Hill to meet Brian\n    travel_time = travel_times[(\"Nob Hill\", \"Russian Hill\")]\n    brian_start = max(15 * 60 + 30, jessica_end + travel_time)\n    brian_end = brian_start + 60\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Russian Hill\",\n        \"person\": \"Brian\",\n        \"start_time\": minutes_to_time(brian_start),\n        \"end_time\": minutes_to_time(brian_end)\n    })\n\n    # Travel to Union Square to meet Stephanie\n    travel_time = travel_times[(\"Russian Hill\", \"Union Square\")]\n    stephanie_start = max(14 * 60 + 45, brian_end + travel_time)\n    stephanie_end = stephanie_start + 105\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"person\": \"Stephanie\",\n        \"start_time\": minutes_to_time(stephanie_start),\n        \"end_time\": minutes_to_time(stephanie_end)\n    })\n\n    # Travel to Embarcadero to meet Kimberly\n    travel_time = travel_times[(\"Union Square\", \"Embarcadero\")]\n    kimberly_start = max(9 * 60 + 45, stephanie_end + travel_time)\n    kimberly_end = kimberly_start + 75\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"person\": \"Kimberly\",\n        \"start_time\": minutes_to_time(kimberly_start),\n        \"end_time\": minutes_to_time(kimberly_end)\n    })\n\n    # Travel to Financial District to meet Steven\n    travel_time = travel_times[(\"Embarcadero\", \"Financial District\")]\n    steven_start = max(7 * 60 + 15, kimberly_end + travel_time)\n    steven_end = steven_start + 60\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"person\": \"Steven\",\n        \"start_time\": minutes_to_time(steven_start),\n        \"end_time\": minutes_to_time(steven_end)\n    })\n\n    # Meeting Mark\n    travel_time = travel_times[(\"Financial District\", \"Marina District\")]\n    mark_start = max(10 * 60 + 15, steven_end + travel_time)\n    mark_end = mark_start + 75\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"person\": \"Mark\",\n        \"start_time\": minutes_to_time(mark_start),\n        \"end_time\": minutes_to_time(mark_end)\n    })\n\n    return {\"itinerary\": itinerary}\n\nsolution = schedule_meetings()\nprint(json.dumps(solution, indent=2))\n```",
            "count": "meeting_planning_example_872"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Paul",
                        "start_time": "16:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "17:32",
                        "end_time": "18:17"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Matthew",
                        "start_time": "18:35",
                        "end_time": "19:50"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jeffrey",
                        "start_time": "20:00",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "20:56",
                        "end_time": "21:26"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\nclass SchedulePlanner:\n    def __init__(self):\n        self.travel_times = {\n            ('Bayview', 'Nob Hill'): 20,\n            ('Bayview', 'Union Square'): 17,\n            ('Bayview', 'Chinatown'): 18,\n            ('Bayview', 'The Castro'): 20,\n            ('Bayview', 'Presidio'): 31,\n            ('Bayview', 'Pacific Heights'): 23,\n            ('Bayview', 'Russian Hill'): 23,\n            ('Nob Hill', 'Union Square'): 7,\n            ('Nob Hill', 'Chinatown'): 6,\n            ('Nob Hill', 'The Castro'): 17,\n            ('Nob Hill', 'Presidio'): 17,\n            ('Nob Hill', 'Pacific Heights'): 8,\n            ('Nob Hill', 'Russian Hill'): 5,\n            ('Union Square', 'Chinatown'): 7,\n            ('Union Square', 'The Castro'): 19,\n            ('Union Square', 'Presidio'): 24,\n            ('Union Square', 'Pacific Heights'): 15,\n            ('Union Square', 'Russian Hill'): 13,\n            ('Chinatown', 'The Castro'): 20,\n            ('Chinatown', 'Presidio'): 19,\n            ('Chinatown', 'Pacific Heights'): 10,\n            ('Chinatown', 'Russian Hill'): 7,\n            ('The Castro', 'Presidio'): 20,\n            ('The Castro', 'Pacific Heights'): 16,\n            ('The Castro', 'Russian Hill'): 18,\n            ('Presidio', 'Pacific Heights'): 11,\n            ('Presidio', 'Russian Hill'): 14,\n            ('Pacific Heights', 'Russian Hill'): 7,\n        }\n\n        # Meeting constraints (start_time, end_time, minimum_meeting_time)\n        self.meetings = {\n            'Paul': ('16:15', '21:15', 60),\n            'Carol': ('18:00', '20:15', 120),\n            'Patricia': ('20:00', '21:30', 75),\n            'Karen': ('17:00', '19:00', 45),\n            'Nancy': ('11:45', '22:00', 30),\n            'Jeffrey': ('20:00', '20:45', 45),\n            'Matthew': ('15:45', '21:45', 75),\n        }\n\n        self.start_location = 'Bayview'\n        self.start_time = datetime.strptime('09:00', '%H:%M')\n\n        self.schedule = []\n\n    def convert_to_minutes(self, time_str):\n        time_obj = datetime.strptime(time_str, '%H:%M')\n        return time_obj.hour * 60 + time_obj.minute\n\n    def convert_to_time_str(self, total_minutes):\n        hours = total_minutes // 60\n        minutes = total_minutes % 60\n        return f\"{hours}:{minutes:02d}\"\n\n    def plan_schedule(self):\n        available_meetings = {\n            person: (self.convert_to_minutes(start), \n                      self.convert_to_minutes(end), \n                      min_time)\n            for person, (start, end, min_time) in self.meetings.items()\n        }\n\n        current_time = self.start_time\n        current_location = self.start_location\n\n        # Visit Nancy first since it has the longest availability\n        nancy_start, nancy_end, nancy_minutes = available_meetings['Nancy']\n        travel_time_to_nancy = self.travel_times[(current_location, 'Presidio')]\n        nancy_meeting_time = max(current_time + timedelta(minutes=travel_time_to_nancy), \n                                  datetime.strptime('11:45', '%H:%M'))\n\n        # If we arrive after Nancy's meeting, skip to next\n        if nancy_meeting_time < datetime.strptime('11:45', '%H:%M'):\n            nancy_meeting_time = datetime.strptime('11:45', '%H:%M')\n\n        self.schedule.append({\n            'action': 'meet',\n            'location': 'Presidio',\n            'person': 'Nancy',\n            'start_time': nancy_meeting_time.strftime('%H:%M'),\n            'end_time': (nancy_meeting_time + timedelta(minutes=nancy_minutes)).strftime('%H:%M')\n        })\n\n        # Update current time and location\n        current_time = nancy_meeting_time + timedelta(minutes=nancy_minutes)\n        current_location = 'Presidio'\n\n        # Meeting sequence based on available time\n        for person in ['Matthew', 'Paul', 'Karen', 'Carol', 'Jeffrey', 'Patricia']:\n            start, end, min_time = available_meetings[person]\n            end_time = datetime.strptime(end, '%H:%M')\n\n            while current_time.hour * 60 + current_time.minute < end:\n                travel_time = self.travel_times.get((current_location, 'Nob Hill' if person == 'Paul' else \n                                                     'Union Square' if person == 'Carol' else \n                                                     'Chinatown' if person == 'Patricia' else\n                                                     'The Castro' if person == 'Karen' else \n                                                     'Pacific Heights' if person == 'Jeffrey' else \n                                                     'Russian Hill' if person == 'Matthew' else 'Bayview'), float('inf'))\n\n                meeting_start = current_time + timedelta(minutes=travel_time)\n                if meeting_start.hour * 60 + meeting_start.minute <= end and (meeting_start + timedelta(minutes=min_time)).hour * 60 + (meeting_start + timedelta(minutes=min_time)).minute <= end:\n                    self.schedule.append({\n                        'action': 'meet',\n                        'location': ('Nob Hill' if person == 'Paul' else\n                                     'Union Square' if person == 'Carol' else \n                                     'Chinatown' if person == 'Patricia' else \n                                     'The Castro' if person == 'Karen' else \n                                     'Pacific Heights' if person == 'Jeffrey' else \n                                     'Russian Hill' if person == 'Matthew' else 'Bayview'),\n                        'person': person,\n                        'start_time': meeting_start.strftime('%H:%M'),\n                        'end_time': (meeting_start + timedelta(minutes=min_time)).strftime('%H:%M')\n                    })\n\n                    # Update current time and location\n                    current_time = meeting_start + timedelta(minutes=min_time)\n                    current_location = ('Nob Hill' if person == 'Paul' else\n                                        'Union Square' if person == 'Carol' else\n                                        'Chinatown' if person == 'Patricia' else\n                                        'The Castro' if person == 'Karen' else\n                                        'Pacific Heights' if person == 'Jeffrey' else\n                                        'Russian Hill' if person == 'Matthew' else 'Bayview')\n                    if current_time.hour * 60 + current_time.minute >= 21 * 60:  # 21:00\n                        break\n                else:\n                    break\n\n        return self.schedule\n\nif __name__ == \"__main__\":\n    planner = SchedulePlanner()\n    optimal_schedule = planner.plan_schedule()\n\n    result = {\n        \"itinerary\": optimal_schedule\n    }\n\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_695"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Timothy",
                        "start_time": "12:10",
                        "end_time": "13:55"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "14:13",
                        "end_time": "15:13"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "15:27",
                        "end_time": "16:27"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Timothy",
                        "start_time": "12:00",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "18:45",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "19:59",
                        "end_time": "20:59"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times in minutes\ntravel_times = {\n    (\"Golden Gate Park\", \"Alamo Square\"): 10,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"Russian Hill\"): 19,\n    (\"Alamo Square\", \"Golden Gate Park\"): 9,\n    (\"Alamo Square\", \"Presidio\"): 18,\n    (\"Alamo Square\", \"Russian Hill\"): 13,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Alamo Square\"): 18,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Russian Hill\", \"Golden Gate Park\"): 21,\n    (\"Russian Hill\", \"Alamo Square\"): 15,\n    (\"Russian Hill\", \"Presidio\"): 14,\n}\n\n# Meeting constraints\nmeetings = {\n    \"Timothy\": {\n        \"location\": \"Alamo Square\",\n        \"available_from\": datetime.strptime(\"12:00\", \"%H:%M\"),\n        \"available_to\": datetime.strptime(\"16:15\", \"%H:%M\"),\n        \"min_duration\": timedelta(minutes=105)\n    },\n    \"Mark\": {\n        \"location\": \"Presidio\",\n        \"available_from\": datetime.strptime(\"18:45\", \"%H:%M\"),\n        \"available_to\": datetime.strptime(\"21:00\", \"%H:%M\"),\n        \"min_duration\": timedelta(minutes=60)\n    },\n    \"Joseph\": {\n        \"location\": \"Russian Hill\",\n        \"available_from\": datetime.strptime(\"16:45\", \"%H:%M\"),\n        \"available_to\": datetime.strptime(\"21:30\", \"%H:%M\"),\n        \"min_duration\": timedelta(minutes=60)\n    }\n}\n\n# Start time at Golden Gate Park\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nitinerary = []\n\n# Function to calculate the optimal schedule\ndef calculate_schedule(start_time, travel_times, meetings):\n    current_time = start_time\n\n    # Meeting with Timothy\n    if current_time < meetings[\"Timothy\"][\"available_from\"]:\n        current_time = meetings[\"Timothy\"][\"available_from\"]\n    \n    travel_to_timothy = travel_times[(\"Golden Gate Park\", \"Alamo Square\")]\n    \n    if current_time + timedelta(minutes=travel_to_timothy) < meetings[\"Timothy\"][\"available_to\"]:\n        meet_start_time = current_time + timedelta(minutes=travel_to_timothy)\n        meet_end_time = meet_start_time + meetings[\"Timothy\"][\"min_duration\"]\n        if meet_end_time <= meetings[\"Timothy\"][\"available_to\"]:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Alamo Square\",\n                \"person\": \"Timothy\",\n                \"start_time\": meet_start_time.strftime(\"%H:%M\"),\n                \"end_time\": meet_end_time.strftime(\"%H:%M\"),\n            })\n            \n            # Update current time after meeting Timothy\n            current_time = meet_end_time\n    \n    # Travel to Presidio to meet Mark\n    travel_to_mark = travel_times[(\"Alamo Square\", \"Presidio\")]\n    if current_time + timedelta(minutes=travel_to_mark) < meetings[\"Mark\"][\"available_to\"]:\n        current_time += timedelta(minutes=travel_to_mark)\n        meet_start_time = current_time\n        meet_end_time = meet_start_time + meetings[\"Mark\"][\"min_duration\"]\n        \n        if meet_end_time <= meetings[\"Mark\"][\"available_to\"]:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Presidio\",\n                \"person\": \"Mark\",\n                \"start_time\": meet_start_time.strftime(\"%H:%M\"),\n                \"end_time\": meet_end_time.strftime(\"%H:%M\"),\n            })\n            \n            # Update current time after meeting Mark\n            current_time = meet_end_time\n\n    # Travel to Russian Hill to meet Joseph\n    travel_to_joseph = travel_times[(\"Presidio\", \"Russian Hill\")]\n    if current_time + timedelta(minutes=travel_to_joseph) < meetings[\"Joseph\"][\"available_to\"]:\n        current_time += timedelta(minutes=travel_to_joseph)\n        meet_start_time = current_time\n        meet_end_time = meet_start_time + meetings[\"Joseph\"][\"min_duration\"]\n        \n        if meet_end_time <= meetings[\"Joseph\"][\"available_to\"]:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Russian Hill\",\n                \"person\": \"Joseph\",\n                \"start_time\": meet_start_time.strftime(\"%H:%M\"),\n                \"end_time\": meet_end_time.strftime(\"%H:%M\"),\n            })\n\n# Calculate the schedule\ncalculate_schedule(start_time, travel_times, meetings)\n\n# Output the result as JSON\noutput = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_268"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "12:45",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Friend",
                        "start_time": "14:26",
                        "end_time": "15:26"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "14:15",
                        "end_time": "15:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Input parameters\narrival_time = datetime.strptime(\"9:00\", \"%H:%M\")\ntravel_time_wharf_to_nobhill = timedelta(minutes=11)\ntravel_time_nobhill_to_wharf = timedelta(minutes=11)\nken_start_time = datetime.strptime(\"14:15\", \"%H:%M\")\nken_end_time = datetime.strptime(\"19:45\", \"%H:%M\")\nmin_meeting_duration = timedelta(minutes=90)\n\n# Calculate available meeting windows\ndef compute_meeting_schedule():\n    itinerary = []\n    current_time = arrival_time\n    \n    # Check if we can meet Kenneth after arriving at Fisherman's Wharf\n    if ken_start_time - travel_time_nobhill_to_wharf >= current_time:\n        # Calculate when we can meet Kenneth considering the minimum duration\n        meeting_start = max(ken_start_time - min_meeting_duration, current_time + travel_time_wharf_to_nobhill)\n        \n        # Ensure the meeting cannot exceed Kenneth's availability\n        meeting_end = min(meeting_start + min_meeting_duration, ken_end_time)\n\n        if meeting_end > meeting_start:  # Valid meeting time found\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Nob Hill\",\n                \"person\": \"Kenneth\",\n                \"start_time\": meeting_start.strftime(\"%H:%M\"),\n                \"end_time\": meeting_end.strftime(\"%H:%M\")\n            })\n            current_time = meeting_end  # Update current time after meeting\n\n    # Consider meeting other friends; assume they can meet after Kenneth\n    # For simplicity, we assume 1 hour meeting with another friend nearby\n    if current_time + travel_time_nobhill_to_wharf <= ken_end_time:  # Still time for another meeting\n        other_meeting_start = current_time + travel_time_nobhill_to_wharf\n        other_meeting_end = other_meeting_start + timedelta(hours=1)\n        \n        if other_meeting_end <= ken_end_time:  # Ensure it fits into Kenneth's availability\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Fisherman's Wharf\",\n                \"person\": \"Friend\",\n                \"start_time\": other_meeting_start.strftime(\"%H:%M\"),\n                \"end_time\": other_meeting_end.strftime(\"%H:%M\")\n            })\n\n    return {\n        \"itinerary\": itinerary\n    }\n\n# Compute the meeting schedule\nschedule = compute_meeting_schedule()\n\n# Output result as JSON\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_6"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "13:38",
                        "end_time": "14:23"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "18:11",
                        "end_time": "18:41"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "John",
                        "start_time": "9:08",
                        "end_time": "9:23"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "13:30",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "18:00",
                        "end_time": "18:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Function to calculate the end time after adding duration (in minutes) to a given start time\ndef add_minutes(start_time, minutes):\n    return start_time + timedelta(minutes=minutes)\n\n# Class to represent a meeting\nclass Meeting:\n    def __init__(self, person, location, start_time, duration):\n        self.person = person\n        self.location = location\n        self.start_time = start_time\n        self.end_time = add_minutes(self.start_time, duration)\n\n    def to_dict(self):\n        return {\n            \"action\": \"meet\",\n            \"location\": self.location,\n            \"person\": self.person,\n            \"start_time\": self.start_time.strftime(\"%H:%M\"),\n            \"end_time\": self.end_time.strftime(\"%H:%M\"),\n        }\n\n# Travel distances in minutes\ntravel_times = {\n    (\"Nob Hill\", \"Presidio\"): 17,\n    (\"Nob Hill\", \"North Beach\"): 8,\n    (\"Nob Hill\", \"Fisherman's Wharf\"): 11,\n    (\"Nob Hill\", \"Pacific Heights\"): 8,\n    (\"Presidio\", \"Nob Hill\"): 18,\n    (\"Presidio\", \"North Beach\"): 18,\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Presidio\", \"Pacific Heights\"): 11,\n    (\"North Beach\", \"Nob Hill\"): 7,\n    (\"North Beach\", \"Presidio\"): 17,\n    (\"North Beach\", \"Fisherman's Wharf\"): 5,\n    (\"North Beach\", \"Pacific Heights\"): 8,\n    (\"Fisherman's Wharf\", \"Nob Hill\"): 11,\n    (\"Fisherman's Wharf\", \"Presidio\"): 17,\n    (\"Fisherman's Wharf\", \"North Beach\"): 6,\n    (\"Fisherman's Wharf\", \"Pacific Heights\"): 12,\n    (\"Pacific Heights\", \"Nob Hill\"): 8,\n    (\"Pacific Heights\", \"Presidio\"): 11,\n    (\"Pacific Heights\", \"North Beach\"): 9,\n    (\"Pacific Heights\", \"Fisherman's Wharf\"): 13,\n}\n\n# Meeting constraints\nmeetings = {\n    \"Jeffrey\": {\"location\": \"Presidio\", \"available\": (datetime.strptime(\"08:00\", \"%H:%M\"),\n                                                      datetime.strptime(\"10:00\", \"%H:%M\")), \n                \"duration\": 105},\n    \"Steven\": {\"location\": \"North Beach\", \"available\": (datetime.strptime(\"13:30\", \"%H:%M\"),\n                                                       datetime.strptime(\"22:00\", \"%H:%M\")), \n               \"duration\": 45},\n    \"Barbara\": {\"location\": \"Fisherman's Wharf\", \"available\": (datetime.strptime(\"18:00\", \"%H:%M\"),\n                                                             datetime.strptime(\"21:30\", \"%H:%M\")), \n                \"duration\": 30},\n    \"John\": {\"location\": \"Pacific Heights\", \"available\": (datetime.strptime(\"09:00\", \"%H:%M\"),\n                                                          datetime.strptime(\"13:30\", \"%H:%M\")), \n             \"duration\": 15},\n}\n\n# Start time\ncurrent_time = datetime.strptime(\"09:00\", \"%H:%M\")\nitinerary = []\n\n# Meeting sequence\ndef schedule_meetings(current_time):\n    for person, info in meetings.items():\n        start = info[\"available\"][0]\n        end = info[\"available\"][1]\n        duration = info[\"duration\"]\n        \n        # Check if we can meet this person\n        if current_time < start:\n            current_time = start  # Wait until they are available\n            \n        # Calculate travel time to meeting location\n        travel_time = travel_times.get((\"Nob Hill\", info[\"location\"]), 0)\n        start_meeting_time = add_minutes(current_time, travel_time)\n        \n        # Check if we can fit the meeting in the available window\n        if start_meeting_time + timedelta(minutes=duration) <= end:\n            meeting = Meeting(person, info[\"location\"], start_meeting_time, duration)\n            itinerary.append(meeting.to_dict())\n            # Update current time to the end of the meeting + travel back\n            current_time = add_minutes(meeting.end_time, travel_times.get((info[\"location\"], \"Nob Hill\"), 0))\n\n# Call the scheduling function\nschedule_meetings(current_time)\n\n# Convert output to JSON\nresult = {\"itinerary\": itinerary}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_385"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sandra",
                        "start_time": "9:20",
                        "end_time": "9:50"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Brian",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Stephanie",
                        "start_time": "11:03",
                        "end_time": "12:18"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Helen",
                        "start_time": "12:40",
                        "end_time": "14:40"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Laura",
                        "start_time": "14:49",
                        "end_time": "16:04"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mary",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Deborah",
                        "start_time": "19:00",
                        "end_time": "20:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Setup travel times\ntravel_times = {\n    ('Mission District', 'Alamo Square'): 11,\n    ('Mission District', 'Presidio'): 25,\n    ('Mission District', 'Russian Hill'): 15,\n    ('Mission District', 'North Beach'): 17,\n    ('Mission District', 'Golden Gate Park'): 17,\n    ('Mission District', 'Richmond District'): 20,\n    ('Mission District', 'Embarcadero'): 19,\n    ('Mission District', 'Financial District'): 15,\n    ('Mission District', 'Marina District'): 19,\n    ('Alamo Square', 'Presidio'): 17,\n    ('Alamo Square', 'Russian Hill'): 13,\n    ('Alamo Square', 'North Beach'): 15,\n    ('Alamo Square', 'Golden Gate Park'): 9,\n    ('Alamo Square', 'Richmond District'): 11,\n    ('Alamo Square', 'Embarcadero'): 16,\n    ('Alamo Square', 'Financial District'): 17,\n    ('Alamo Square', 'Marina District'): 15,\n    ('Presidio', 'Russian Hill'): 14,\n    ('Presidio', 'North Beach'): 18,\n    ('Presidio', 'Golden Gate Park'): 12,\n    ('Presidio', 'Richmond District'): 7,\n    ('Presidio', 'Embarcadero'): 20,\n    ('Presidio', 'Financial District'): 23,\n    ('Presidio', 'Marina District'): 11,\n    ('Russian Hill', 'North Beach'): 5,\n    ('Russian Hill', 'Golden Gate Park'): 21,\n    ('Russian Hill', 'Richmond District'): 14,\n    ('Russian Hill', 'Embarcadero'): 8,\n    ('Russian Hill', 'Financial District'): 11,\n    ('Russian Hill', 'Marina District'): 7,\n    ('North Beach', 'Golden Gate Park'): 22,\n    ('North Beach', 'Richmond District'): 18,\n    ('North Beach', 'Embarcadero'): 6,\n    ('North Beach', 'Financial District'): 8,\n    ('North Beach', 'Marina District'): 9,\n    ('Golden Gate Park', 'Richmond District'): 9,\n    ('Golden Gate Park', 'Embarcadero'): 25,\n    ('Golden Gate Park', 'Financial District'): 26,\n    ('Golden Gate Park', 'Marina District'): 16,\n    ('Richmond District', 'Embarcadero'): 19,\n    ('Richmond District', 'Financial District'): 22,\n    ('Richmond District', 'Marina District'): 9,\n    ('Embarcadero', 'Financial District'): 4,\n    ('Embarcadero', 'Marina District'): 12,\n    ('Marina District', 'Presidio'): 10,\n    ('Marina District', 'Russian Hill'): 8,\n}\n\n# Setup constraints\nconstraints = {\n    'Laura': ('Alamo Square', '14:30', '16:15', 75),\n    'Brian': ('Presidio', '10:15', '17:00', 30),\n    'Karen': ('Russian Hill', '18:00', '20:15', 90),\n    'Stephanie': ('North Beach', '10:15', '16:00', 75),\n    'Helen': ('Golden Gate Park', '11:30', '21:45', 120),\n    'Sandra': ('Richmond District', '08:00', '15:15', 30),\n    'Mary': ('Embarcadero', '16:45', '18:45', 120),\n    'Deborah': ('Financial District', '19:00', '20:45', 105),\n    'Elizabeth': ('Marina District', '08:30', '13:15', 105),\n}\n\n# Convert times to datetime\ndef get_time_in_minutes(time_str):\n    # Convert \"HH:MM\" string to total minutes\n    hour, minute = map(int, time_str.split(':'))\n    return hour * 60 + minute\n\n# Get the travel time between two locations\ndef travel_time(from_location, to_location):\n    return travel_times.get((from_location, to_location), 0)\n\n# Check if a meeting can be scheduled\ndef can_schedule_meeting(start_time, duration, available_start, available_end):\n    return start_time >= available_start and (start_time + duration) <= available_end\n\ndef schedule_meetings():\n    # Starting point at Mission District\n    starting_time = get_time_in_minutes(\"9:00\")\n    current_time = starting_time\n    itinerary = []\n\n    # Meeting order based on constraints, planning for maximum meet-ups\n    meeting_order = ['Elizabeth', 'Sandra', 'Brian', 'Stephanie', 'Laura', 'Helen', 'Mary', 'Deborah', 'Karen']\n\n    for person in meeting_order:\n        location, start, end, duration = constraints[person]\n        available_start = get_time_in_minutes(start)\n        available_end = get_time_in_minutes(end)\n        \n        travel_to_location = travel_time(\"Mission District\", location)\n        meeting_start_time = current_time + travel_to_location\n        \n        if can_schedule_meeting(meeting_start_time, duration, available_start, available_end):\n            meeting_end_time = meeting_start_time + duration\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": person,\n                \"start_time\": f\"{meeting_start_time // 60}:{meeting_start_time % 60:02d}\",\n                \"end_time\": f\"{meeting_end_time // 60}:{meeting_end_time % 60:02d}\"\n            })\n            current_time = meeting_end_time + travel_time(location, \"Mission District\")  # Travel back to Mission District\n        else:\n            print(f\"Cannot schedule meeting with {person}.\")\n    \n    return itinerary\n\ndef main():\n    itinerary = schedule_meetings()\n    output = {\"itinerary\": itinerary}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_862"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "9:00",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joshua",
                        "start_time": "12:00",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "12:23",
                        "end_time": "13:23"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Lisa",
                        "start_time": "13:42",
                        "end_time": "14:27"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Lisa",
                        "start_time": "10:53",
                        "end_time": "11:38"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joshua",
                        "start_time": "12:00",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "12:23",
                        "end_time": "13:23"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "John",
                        "start_time": "16:45",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define locations and travel times\ntravel_times = {\n    (\"Embarcadero\", \"Richmond District\"): 21,\n    (\"Embarcadero\", \"Union Square\"): 10,\n    (\"Embarcadero\", \"Financial District\"): 5,\n    (\"Embarcadero\", \"Pacific Heights\"): 11,\n    (\"Embarcadero\", \"Nob Hill\"): 10,\n    (\"Embarcadero\", \"Bayview\"): 21,\n    (\"Richmond District\", \"Embarcadero\"): 19,\n    (\"Richmond District\", \"Union Square\"): 21,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"Pacific Heights\"): 10,\n    (\"Richmond District\", \"Nob Hill\"): 17,\n    (\"Richmond District\", \"Bayview\"): 26,\n    (\"Union Square\", \"Embarcadero\"): 11,\n    (\"Union Square\", \"Richmond District\"): 20,\n    (\"Union Square\", \"Financial District\"): 9,\n    (\"Union Square\", \"Pacific Heights\"): 15,\n    (\"Union Square\", \"Nob Hill\"): 9,\n    (\"Union Square\", \"Bayview\"): 15,\n    (\"Financial District\", \"Embarcadero\"): 4,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Financial District\", \"Union Square\"): 9,\n    (\"Financial District\", \"Pacific Heights\"): 13,\n    (\"Financial District\", \"Nob Hill\"): 8,\n    (\"Financial District\", \"Bayview\"): 19,\n    (\"Pacific Heights\", \"Embarcadero\"): 10,\n    (\"Pacific Heights\", \"Richmond District\"): 12,\n    (\"Pacific Heights\", \"Union Square\"): 12,\n    (\"Pacific Heights\", \"Financial District\"): 13,\n    (\"Pacific Heights\", \"Nob Hill\"): 8,\n    (\"Pacific Heights\", \"Bayview\"): 22,\n    (\"Nob Hill\", \"Embarcadero\"): 9,\n    (\"Nob Hill\", \"Richmond District\"): 14,\n    (\"Nob Hill\", \"Union Square\"): 7,\n    (\"Nob Hill\", \"Financial District\"): 9,\n    (\"Nob Hill\", \"Pacific Heights\"): 8,\n    (\"Nob Hill\", \"Bayview\"): 19,\n    (\"Bayview\", \"Embarcadero\"): 19,\n    (\"Bayview\", \"Richmond District\"): 25,\n    (\"Bayview\", \"Union Square\"): 17,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Bayview\", \"Pacific Heights\"): 23,\n    (\"Bayview\", \"Nob Hill\"): 20,\n}\n\n# Define meeting constraints\nmeetings = {\n    \"Kenneth\": {\"location\": \"Richmond District\", \"start\": \"21:15\", \"end\": \"22:00\", \"duration\": 30},\n    \"Lisa\": {\"location\": \"Union Square\", \"start\": \"09:00\", \"end\": \"16:30\", \"duration\": 45},\n    \"Joshua\": {\"location\": \"Financial District\", \"start\": \"12:00\", \"end\": \"15:15\", \"duration\": 15},\n    \"Nancy\": {\"location\": \"Pacific Heights\", \"start\": \"08:00\", \"end\": \"11:30\", \"duration\": 90},\n    \"Andrew\": {\"location\": \"Nob Hill\", \"start\": \"11:30\", \"end\": \"20:15\", \"duration\": 60},\n    \"John\": {\"location\": \"Bayview\", \"start\": \"16:45\", \"end\": \"21:30\", \"duration\": 75},\n}\n\n# Function to compute schedule\ndef compute_schedule():\n    itinerary = []\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n    # Meet Nancy first as she is only available until 11:30\n    if current_time < datetime.strptime(meetings[\"Nancy\"][\"end\"], \"%H:%M\"):\n        start_time = max(current_time, datetime.strptime(meetings[\"Nancy\"][\"start\"], \"%H:%M\"))\n        end_time = start_time + timedelta(minutes=meetings[\"Nancy\"][\"duration\"])\n        \n        # Calculate travel time to the next location after Nancy\n        travel_time = travel_times[(\"Pacific Heights\", \"Nob Hill\")]\n        current_time = end_time + timedelta(minutes=travel_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meetings[\"Nancy\"][\"location\"],\n            \"person\": \"Nancy\",\n            \"start_time\": start_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time.strftime(\"%H:%M\")\n        })\n\n    # Meet Joshua next\n    if current_time < datetime.strptime(meetings[\"Joshua\"][\"end\"], \"%H:%M\"):\n        start_time = max(current_time, datetime.strptime(meetings[\"Joshua\"][\"start\"], \"%H:%M\"))\n        end_time = start_time + timedelta(minutes=meetings[\"Joshua\"][\"duration\"])\n\n        # Calculate travel time to the next location after Joshua\n        travel_time = travel_times[(\"Financial District\", \"Nob Hill\")]\n        current_time = end_time + timedelta(minutes=travel_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meetings[\"Joshua\"][\"location\"],\n            \"person\": \"Joshua\",\n            \"start_time\": start_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time.strftime(\"%H:%M\")\n        })\n\n    # Meet Andrew next\n    if current_time < datetime.strptime(meetings[\"Andrew\"][\"end\"], \"%H:%M\"):\n        start_time = max(current_time, datetime.strptime(meetings[\"Andrew\"][\"start\"], \"%H:%M\"))\n        end_time = start_time + timedelta(minutes=meetings[\"Andrew\"][\"duration\"])\n\n        # Calculate travel time to the next location after Andrew\n        travel_time = travel_times[(\"Nob Hill\", \"Bayview\")]\n        current_time = end_time + timedelta(minutes=travel_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meetings[\"Andrew\"][\"location\"],\n            \"person\": \"Andrew\",\n            \"start_time\": start_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time.strftime(\"%H:%M\")\n        })\n\n    # Meet Lisa next\n    if current_time < datetime.strptime(meetings[\"Lisa\"][\"end\"], \"%H:%M\"):\n        start_time = max(current_time, datetime.strptime(meetings[\"Lisa\"][\"start\"], \"%H:%M\"))\n        end_time = start_time + timedelta(minutes=meetings[\"Lisa\"][\"duration\"])\n\n        # Calculate travel time to the next location after Lisa\n        travel_time = travel_times[(\"Union Square\", \"Bayview\")]\n        current_time = end_time + timedelta(minutes=travel_time)\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meetings[\"Lisa\"][\"location\"],\n            \"person\": \"Lisa\",\n            \"start_time\": start_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time.strftime(\"%H:%M\")\n        })\n\n    # Meet Kenneth last\n    if current_time < datetime.strptime(meetings[\"Kenneth\"][\"end\"], \"%H:%M\"):\n        start_time = max(current_time, datetime.strptime(meetings[\"Kenneth\"][\"start\"], \"%H:%M\"))\n        end_time = start_time + timedelta(minutes=meetings[\"Kenneth\"][\"duration\"])\n\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meetings[\"Kenneth\"][\"location\"],\n            \"person\": \"Kenneth\",\n            \"start_time\": start_time.strftime(\"%H:%M\"),\n            \"end_time\": end_time.strftime(\"%H:%M\")\n        })\n\n    return json.dumps({\"itinerary\": itinerary}, indent=2)\n\n# Execute the program\nif __name__ == \"__main__\":\n    solution = compute_schedule()\n    print(solution)\n```",
            "count": "meeting_planning_example_546"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Daniel",
                        "start_time": "17:45",
                        "end_time": "19:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Daniel",
                        "start_time": "19:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define the meeting constraints and travel distances\narrive_time_russian_hill = datetime.strptime(\"09:00\", \"%H:%M\")\ntravel_time_russian_to_richmond = 14  # in minutes\ntravel_time_richmond_to_russian = 13  # in minutes\ndaniel_avail_start = datetime.strptime(\"19:00\", \"%H:%M\")\ndaniel_avail_end = datetime.strptime(\"20:15\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=75)\n\n# Calculate the optimal meeting schedule\nitinerary = []\ncurrent_time = arrive_time_russian_hill\n\n# Meeting with Daniel at Richmond District\n# Calculate the time we need to leave Russian Hill to meet Daniel\nlatest_departure_from_richmond = daniel_avail_end - meeting_duration\n\n# Determine the latest time we can leave Russian Hill\nif latest_departure_from_richmond < arrive_time_russian_hill:\n    # If current time is already past the latest departure, we cannot meet Daniel\n    print(json.dumps({\"itinerary\": []}))\n    exit()\n\n# Ensure we have time to meet Daniel\ncurrent_time = latest_departure_from_richmond - timedelta(minutes=travel_time_russian_to_richmond)\n\n# Schedule meeting with Daniel\nmeet_start_time = latest_departure_from_richmond - meeting_duration\nmeet_end_time = latest_departure_from_richmond\n\nitinerary.append({\n    \"action\": \"meet\",\n    \"location\": \"Richmond District\",\n    \"person\": \"Daniel\",\n    \"start_time\": meet_start_time.strftime(\"%H:%M\"),\n    \"end_time\": meet_end_time.strftime(\"%H:%M\")\n})\n\n# Return JSON output\noutput = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_91"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "David",
                        "start_time": "9:18",
                        "end_time": "10:03"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kenneth",
                        "start_time": "14:00",
                        "end_time": "16:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Deborah",
                        "start_time": "16:09",
                        "end_time": "17:39"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "John",
                        "start_time": "17:55",
                        "end_time": "18:10"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Karen",
                        "start_time": "18:31",
                        "end_time": "18:46"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nfrom itertools import permutations\n\n# Travel distances in minutes\ntravel_times = {\n    (\"Chinatown\", \"Mission District\"): 18,\n    (\"Chinatown\", \"Alamo Square\"): 17,\n    (\"Chinatown\", \"Pacific Heights\"): 10,\n    (\"Chinatown\", \"Union Square\"): 7,\n    (\"Chinatown\", \"Golden Gate Park\"): 23,\n    (\"Chinatown\", \"Sunset District\"): 29,\n    (\"Chinatown\", \"Presidio\"): 19,\n    (\"Mission District\", \"Chinatown\"): 16,\n    (\"Mission District\", \"Alamo Square\"): 11,\n    (\"Mission District\", \"Pacific Heights\"): 16,\n    (\"Mission District\", \"Union Square\"): 15,\n    (\"Mission District\", \"Golden Gate Park\"): 17,\n    (\"Mission District\", \"Sunset District\"): 24,\n    (\"Mission District\", \"Presidio\"): 25,\n    (\"Alamo Square\", \"Chinatown\"): 16,\n    (\"Alamo Square\", \"Mission District\"): 10,\n    (\"Alamo Square\", \"Pacific Heights\"): 10,\n    (\"Alamo Square\", \"Union Square\"): 14,\n    (\"Alamo Square\", \"Golden Gate Park\"): 9,\n    (\"Alamo Square\", \"Sunset District\"): 16,\n    (\"Alamo Square\", \"Presidio\"): 18,\n    (\"Pacific Heights\", \"Chinatown\"): 11,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"Pacific Heights\", \"Alamo Square\"): 10,\n    (\"Pacific Heights\", \"Union Square\"): 12,\n    (\"Pacific Heights\", \"Golden Gate Park\"): 15,\n    (\"Pacific Heights\", \"Sunset District\"): 21,\n    (\"Pacific Heights\", \"Presidio\"): 11,\n    (\"Union Square\", \"Chinatown\"): 7,\n    (\"Union Square\", \"Mission District\"): 14,\n    (\"Union Square\", \"Alamo Square\"): 15,\n    (\"Union Square\", \"Pacific Heights\"): 15,\n    (\"Union Square\", \"Golden Gate Park\"): 22,\n    (\"Union Square\", \"Sunset District\"): 26,\n    (\"Union Square\", \"Presidio\"): 24,\n    (\"Golden Gate Park\", \"Chinatown\"): 23,\n    (\"Golden Gate Park\", \"Mission District\"): 17,\n    (\"Golden Gate Park\", \"Alamo Square\"): 10,\n    (\"Golden Gate Park\", \"Pacific Heights\"): 16,\n    (\"Golden Gate Park\", \"Union Square\"): 22,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Sunset District\", \"Chinatown\"): 30,\n    (\"Sunset District\", \"Mission District\"): 24,\n    (\"Sunset District\", \"Alamo Square\"): 17,\n    (\"Sunset District\", \"Pacific Heights\"): 21,\n    (\"Sunset District\", \"Union Square\"): 30,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"Sunset District\", \"Presidio\"): 16,\n    (\"Presidio\", \"Chinatown\"): 21,\n    (\"Presidio\", \"Mission District\"): 26,\n    (\"Presidio\", \"Alamo Square\"): 18,\n    (\"Presidio\", \"Pacific Heights\"): 11,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Sunset District\"): 15,\n}\n\n# Meeting constraints\nconstraints = {\n    \"David\": {\"location\": \"Mission District\", \"start\": \"08:00\", \"end\": \"19:45\", \"duration\": 45},\n    \"Kenneth\": {\"location\": \"Alamo Square\", \"start\": \"14:00\", \"end\": \"19:45\", \"duration\": 120},\n    \"John\": {\"location\": \"Pacific Heights\", \"start\": \"17:00\", \"end\": \"20:00\", \"duration\": 15},\n    \"Charles\": {\"location\": \"Union Square\", \"start\": \"21:45\", \"end\": \"22:45\", \"duration\": 60},\n    \"Deborah\": {\"location\": \"Golden Gate Park\", \"start\": \"07:00\", \"end\": \"18:15\", \"duration\": 90},\n    \"Karen\": {\"location\": \"Sunset District\", \"start\": \"17:45\", \"end\": \"21:15\", \"duration\": 15},\n    \"Carol\": {\"location\": \"Presidio\", \"start\": \"08:15\", \"end\": \"09:15\", \"duration\": 30},\n}\n\narrival_time = datetime.strptime('09:00', '%H:%M')\n\n# Function to convert time string to minutes since midnight\ndef to_minutes(time_str):\n    time = datetime.strptime(time_str, '%H:%M')\n    return time.hour * 60 + time.minute\n\n# Function to check if a meeting can be scheduled\ndef can_schedule(meeting_start, meeting_end, travel_time):\n    return (meeting_start + travel_time <= to_minutes(constraints[meeting_person][\"end\"])\n            and meeting_end >= to_minutes(constraints[meeting_person][\"start\"]))\n\n# Function to get meeting schedule\ndef get_meeting_schedule():\n    best_schedule = []\n    best_schedule_length = 0\n    possible_meetings = {}\n\n    # Create a list of all possible meetings\n    for person, info in constraints.items():\n        possible_meetings[person] = (info[\"location\"], info[\"duration\"], to_minutes(info[\"start\"]), to_minutes(info[\"end\"]))\n\n    # Check all permutations of meetings to find a valid schedule\n    for order in permutations(possible_meetings.keys()):\n        current_time = to_minutes('09:00')  # Start time\n        current_schedule = []\n        \n        for person in order:\n            location, duration, start_time, end_time = possible_meetings[person]\n            meeting_start = max(start_time, current_time)  # When we can actually start the meeting\n            meeting_end = meeting_start + duration\n\n            if meeting_end <= end_time and can_schedule(meeting_start, meeting_end, travel_times.get((current_item['location'], location), 0)):\n                travel_time = travel_times.get(('Chinatown', location), 0)\n                current_time = meeting_end + travel_time\n                current_schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": location,\n                    \"person\": person,\n                    \"start_time\": f\"{meeting_start // 60}:{meeting_start % 60:02}\",\n                    \"end_time\": f\"{meeting_end // 60}:{meeting_end % 60:02}\"\n                })\n\n        if len(current_schedule) > best_schedule_length:\n            best_schedule_length = len(current_schedule)\n            best_schedule = current_schedule\n\n    return best_schedule\n\n# Constructing the final output\nfinal_schedule = get_meeting_schedule()\nitinerary = {\"itinerary\": final_schedule}\n\n# Output the final schedule as JSON\nprint(json.dumps(itinerary, indent=2))\n```",
            "count": "meeting_planning_example_609"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Mark",
                        "start_time": "9:00",
                        "end_time": "9:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Brian",
                        "start_time": "9:40",
                        "end_time": "10:10"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Joseph",
                        "start_time": "10:45",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Stephanie",
                        "start_time": "12:36",
                        "end_time": "13:51"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Lisa",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "William",
                        "start_time": "18:45",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Karen",
                        "start_time": "20:02",
                        "end_time": "21:47"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Mark",
                        "start_time": "9:10",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Betty",
                        "start_time": "10:06",
                        "end_time": "10:21"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Brian",
                        "start_time": "10:40",
                        "end_time": "11:10"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Joseph",
                        "start_time": "11:31",
                        "end_time": "13:01"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Stephanie",
                        "start_time": "13:11",
                        "end_time": "14:26"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Lisa",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Patricia",
                        "start_time": "16:34",
                        "end_time": "18:34"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "William",
                        "start_time": "18:47",
                        "end_time": "19:47"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Karen",
                        "start_time": "20:10",
                        "end_time": "21:55"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting parameters\ntravel_times = {\n    (\"Financial District\", \"Fisherman's Wharf\"): 10,\n    (\"Financial District\", \"Presidio\"): 22,\n    (\"Financial District\", \"Bayview\"): 19,\n    (\"Financial District\", \"Haight-Ashbury\"): 19,\n    (\"Financial District\", \"Russian Hill\"): 11,\n    (\"Financial District\", \"The Castro\"): 20,\n    (\"Financial District\", \"Marina District\"): 15,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Financial District\", \"Union Square\"): 9,\n    (\"Financial District\", \"Sunset District\"): 30,\n    (\"Fisherman's Wharf\", \"Financial District\"): 11,\n    (\"Fisherman's Wharf\", \"Presidio\"): 17,\n    (\"Fisherman's Wharf\", \"Bayview\"): 26,\n    (\"Fisherman's Wharf\", \"Haight-Ashbury\"): 22,\n    (\"Fisherman's Wharf\", \"Russian Hill\"): 7,\n    (\"Fisherman's Wharf\", \"The Castro\"): 27,\n    (\"Fisherman's Wharf\", \"Marina District\"): 9,\n    (\"Fisherman's Wharf\", \"Richmond District\"): 18,\n    (\"Fisherman's Wharf\", \"Union Square\"): 13,\n    (\"Fisherman's Wharf\", \"Sunset District\"): 27,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Presidio\", \"Bayview\"): 31,\n    (\"Presidio\", \"Haight-Ashbury\"): 15,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Presidio\", \"The Castro\"): 21,\n    (\"Presidio\", \"Marina District\"): 11,\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Presidio\", \"Sunset District\"): 15,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Bayview\", \"Fisherman's Wharf\"): 25,\n    (\"Bayview\", \"Presidio\"): 32,\n    (\"Bayview\", \"Haight-Ashbury\"): 19,\n    (\"Bayview\", \"Russian Hill\"): 23,\n    (\"Bayview\", \"The Castro\"): 19,\n    (\"Bayview\", \"Marina District\"): 27,\n    (\"Bayview\", \"Richmond District\"): 25,\n    (\"Bayview\", \"Union Square\"): 18,\n    (\"Bayview\", \"Sunset District\"): 23,\n    (\"Haight-Ashbury\", \"Financial District\"): 21,\n    (\"Haight-Ashbury\", \"Fisherman's Wharf\"): 23,\n    (\"Haight-Ashbury\", \"Presidio\"): 15,\n    (\"Haight-Ashbury\", \"Bayview\"): 18,\n    (\"Haight-Ashbury\", \"Russian Hill\"): 17,\n    (\"Haight-Ashbury\", \"The Castro\"): 6,\n    (\"Haight-Ashbury\", \"Marina District\"): 17,\n    (\"Haight-Ashbury\", \"Richmond District\"): 10,\n    (\"Haight-Ashbury\", \"Union Square\"): 19,\n    (\"Haight-Ashbury\", \"Sunset District\"): 15,\n    (\"Russian Hill\", \"Financial District\"): 11,\n    (\"Russian Hill\", \"Fisherman's Wharf\"): 7,\n    (\"Russian Hill\", \"Presidio\"): 14,\n    (\"Russian Hill\", \"Bayview\"): 23,\n    (\"Russian Hill\", \"Haight-Ashbury\"): 17,\n    (\"Russian Hill\", \"The Castro\"): 21,\n    (\"Russian Hill\", \"Marina District\"): 7,\n    (\"Russian Hill\", \"Richmond District\"): 14,\n    (\"Russian Hill\", \"Union Square\"): 10,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"The Castro\", \"Financial District\"): 21,\n    (\"The Castro\", \"Fisherman's Wharf\"): 24,\n    (\"The Castro\", \"Presidio\"): 20,\n    (\"The Castro\", \"Bayview\"): 19,\n    (\"The Castro\", \"Haight-Ashbury\"): 6,\n    (\"The Castro\", \"Russian Hill\"): 18,\n    (\"The Castro\", \"Marina District\"): 21,\n    (\"The Castro\", \"Richmond District\"): 16,\n    (\"The Castro\", \"Union Square\"): 19,\n    (\"The Castro\", \"Sunset District\"): 17,\n    (\"Marina District\", \"Financial District\"): 17,\n    (\"Marina District\", \"Fisherman's Wharf\"): 10,\n    (\"Marina District\", \"Presidio\"): 10,\n    (\"Marina District\", \"Bayview\"): 27,\n    (\"Marina District\", \"Haight-Ashbury\"): 16,\n    (\"Marina District\", \"Russian Hill\"): 8,\n    (\"Marina District\", \"The Castro\"): 22,\n    (\"Marina District\", \"Richmond District\"): 11,\n    (\"Marina District\", \"Union Square\"): 16,\n    (\"Marina District\", \"Sunset District\"): 19,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"Fisherman's Wharf\"): 18,\n    (\"Richmond District\", \"Presidio\"): 7,\n    (\"Richmond District\", \"Bayview\"): 27,\n    (\"Richmond District\", \"Haight-Ashbury\"): 10,\n    (\"Richmond District\", \"Russian Hill\"): 13,\n    (\"Richmond District\", \"The Castro\"): 16,\n    (\"Richmond District\", \"Marina District\"): 9,\n    (\"Richmond District\", \"Union Square\"): 21,\n    (\"Richmond District\", \"Sunset District\"): 11,\n    (\"Union Square\", \"Financial District\"): 9,\n    (\"Union Square\", \"Fisherman's Wharf\"): 15,\n    (\"Union Square\", \"Presidio\"): 24,\n    (\"Union Square\", \"Bayview\"): 15,\n    (\"Union Square\", \"Haight-Ashbury\"): 18,\n    (\"Union Square\", \"Russian Hill\"): 13,\n    (\"Union Square\", \"The Castro\"): 17,\n    (\"Union Square\", \"Marina District\"): 18,\n    (\"Union Square\", \"Richmond District\"): 20,\n    (\"Union Square\", \"Sunset District\"): 27,\n    (\"Sunset District\", \"Financial District\"): 30,\n    (\"Sunset District\", \"Fisherman's Wharf\"): 29,\n    (\"Sunset District\", \"Presidio\"): 16,\n    (\"Sunset District\", \"Bayview\"): 22,\n    (\"Sunset District\", \"Haight-Ashbury\"): 15,\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"The Castro\"): 17,\n    (\"Sunset District\", \"Marina District\"): 21,\n    (\"Sunset District\", \"Richmond District\"): 12,\n    (\"Sunset District\", \"Union Square\"): 30,\n}\n\nmeetings_constraints = {\n    \"Mark\": {\"location\": \"Fisherman's Wharf\", \"start\": \"08:15\", \"end\": \"10:00\", \"duration\": 30},\n    \"Stephanie\": {\"location\": \"Presidio\", \"start\": \"12:15\", \"end\": \"15:00\", \"duration\": 75},\n    \"Betty\": {\"location\": \"Bayview\", \"start\": \"07:15\", \"end\": \"20:30\", \"duration\": 15},\n    \"Lisa\": {\"location\": \"Haight-Ashbury\", \"start\": \"15:30\", \"end\": \"18:30\", \"duration\": 45},\n    \"William\": {\"location\": \"Russian Hill\", \"start\": \"18:45\", \"end\": \"20:00\", \"duration\": 60},\n    \"Brian\": {\"location\": \"The Castro\", \"start\": \"09:15\", \"end\": \"13:15\", \"duration\": 30},\n    \"Joseph\": {\"location\": \"Marina District\", \"start\": \"10:45\", \"end\": \"15:00\", \"duration\": 90},\n    \"Ashley\": {\"location\": \"Richmond District\", \"start\": \"09:45\", \"end\": \"11:15\", \"duration\": 45},\n    \"Patricia\": {\"location\": \"Union Square\", \"start\": \"16:30\", \"end\": \"20:00\", \"duration\": 120},\n    \"Karen\": {\"location\": \"Sunset District\", \"start\": \"16:30\", \"end\": \"22:00\", \"duration\": 105},\n}\n\n# Initial parameters\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nitinerary = []\n\n# Function to add meeting to itinerary\ndef add_meeting(person, location, start, end):\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": start.strftime(\"%H:%M\"),\n        \"end_time\": end.strftime(\"%H:%M\")\n    })\n\ndef schedule_meetings():\n    current_time = start_time\n\n    # Meeting Mark\n    mark_end = datetime.strptime(meetings_constraints[\"Mark\"][\"end\"], \"%H:%M\")\n    mark_duration = timedelta(minutes=meetings_constraints[\"Mark\"][\"duration\"])\n    mark_meeting_start = max(current_time, datetime.strptime(meetings_constraints[\"Mark\"][\"start\"], \"%H:%M\"))\n    mark_meeting_end = mark_meeting_start + mark_duration\n\n    if mark_meeting_end <= mark_end:\n        add_meeting(\"Mark\", \"Fisherman's Wharf\", mark_meeting_start, mark_meeting_end)\n        travel_time = travel_times[(\"Financial District\", \"Fisherman's Wharf\")]\n        current_time = mark_meeting_end + timedelta(minutes=travel_time)\n\n    # Meeting Brian\n    brian_end = datetime.strptime(meetings_constraints[\"Brian\"][\"end\"], \"%H:%M\")\n    brian_duration = timedelta(minutes=meetings_constraints[\"Brian\"][\"duration\"])\n    brian_meeting_start = max(current_time, datetime.strptime(meetings_constraints[\"Brian\"][\"start\"], \"%H:%M\"))\n    brian_meeting_end = brian_meeting_start + brian_duration\n\n    if brian_meeting_end <= brian_end:\n        add_meeting(\"Brian\", \"The Castro\", brian_meeting_start, brian_meeting_end)\n        travel_time = travel_times[(\"Fisherman's Wharf\", \"The Castro\")]\n        current_time = brian_meeting_end + timedelta(minutes=travel_time)\n\n    # Meeting Joseph\n    joseph_end = datetime.strptime(meetings_constraints[\"Joseph\"][\"end\"], \"%H:%M\")\n    joseph_duration = timedelta(minutes=meetings_constraints[\"Joseph\"][\"duration\"])\n    joseph_meeting_start = max(current_time, datetime.strptime(meetings_constraints[\"Joseph\"][\"start\"], \"%H:%M\"))\n    joseph_meeting_end = joseph_meeting_start + joseph_duration\n\n    if joseph_meeting_end <= joseph_end:\n        add_meeting(\"Joseph\", \"Marina District\", joseph_meeting_start, joseph_meeting_end)\n        travel_time = travel_times[(\"The Castro\", \"Marina District\")]\n        current_time = joseph_meeting_end + timedelta(minutes=travel_time)\n\n    # Meeting Ashley\n    ashley_end = datetime.strptime(meetings_constraints[\"Ashley\"][\"end\"], \"%H:%M\")\n    ashley_duration = timedelta(minutes=meetings_constraints[\"Ashley\"][\"duration\"])\n    ashley_meeting_start = max(current_time, datetime.strptime(meetings_constraints[\"Ashley\"][\"start\"], \"%H:%M\"))\n    ashley_meeting_end = ashley_meeting_start + ashley_duration\n\n    if ashley_meeting_end <= ashley_end:\n        add_meeting(\"Ashley\", \"Richmond District\", ashley_meeting_start, ashley_meeting_end)\n        travel_time = travel_times[(\"Marina District\", \"Richmond District\")]\n        current_time = ashley_meeting_end + timedelta(minutes=travel_time)\n\n    # Meeting Stephanie\n    stephanie_end = datetime.strptime(meetings_constraints[\"Stephanie\"][\"end\"], \"%H:%M\")\n    stephanie_duration = timedelta(minutes=meetings_constraints[\"Stephanie\"][\"duration\"])\n    stephanie_meeting_start = max(current_time, datetime.strptime(meetings_constraints[\"Stephanie\"][\"start\"], \"%H:%M\"))\n    stephanie_meeting_end = stephanie_meeting_start + stephanie_duration\n\n    if stephanie_meeting_end <= stephanie_end:\n        add_meeting(\"Stephanie\", \"Presidio\", stephanie_meeting_start, stephanie_meeting_end)\n        travel_time = travel_times[(\"Richmond District\", \"Presidio\")]\n        current_time = stephanie_meeting_end + timedelta(minutes=travel_time)\n\n    # Meeting Lisa\n    lisa_end = datetime.strptime(meetings_constraints[\"Lisa\"][\"end\"], \"%H:%M\")\n    lisa_duration = timedelta(minutes=meetings_constraints[\"Lisa\"][\"duration\"])\n    lisa_meeting_start = max(current_time, datetime.strptime(meetings_constraints[\"Lisa\"][\"start\"], \"%H:%M\"))\n    lisa_meeting_end = lisa_meeting_start + lisa_duration\n\n    if lisa_meeting_end <= lisa_end:\n        add_meeting(\"Lisa\", \"Haight-Ashbury\", lisa_meeting_start, lisa_meeting_end)\n        travel_time = travel_times[(\"Presidio\", \"Haight-Ashbury\")]\n        current_time = lisa_meeting_end + timedelta(minutes=travel_time)\n\n    # Meeting William\n    william_end = datetime.strptime(meetings_constraints[\"William\"][\"end\"], \"%H:%M\")\n    william_duration = timedelta(minutes=meetings_constraints[\"William\"][\"duration\"])\n    william_meeting_start = max(current_time, datetime.strptime(meetings_constraints[\"William\"][\"start\"], \"%H:%M\"))\n    william_meeting_end = william_meeting_start + william_duration\n\n    if william_meeting_end <= william_end:\n        add_meeting(\"William\", \"Russian Hill\", william_meeting_start, william_meeting_end)\n        travel_time = travel_times[(\"Haight-Ashbury\", \"Russian Hill\")]\n        current_time = william_meeting_end + timedelta(minutes=travel_time)\n\n    # Meeting Patricia\n    patricia_end = datetime.strptime(meetings_constraints[\"Patricia\"][\"end\"], \"%H:%M\")\n    patricia_duration = timedelta(minutes=meetings_constraints[\"Patricia\"][\"duration\"])\n    patricia_meeting_start = max(current_time, datetime.strptime(meetings_constraints[\"Patricia\"][\"start\"], \"%H:%M\"))\n    patricia_meeting_end = patricia_meeting_start + patricia_duration\n\n    if patricia_meeting_end <= patricia_end:\n        add_meeting(\"Patricia\", \"Union Square\", patricia_meeting_start, patricia_meeting_end)\n        travel_time = travel_times[(\"Russian Hill\", \"Union Square\")]\n        current_time = patricia_meeting_end + timedelta(minutes=travel_time)\n\n    # Meeting Karen\n    karen_end = datetime.strptime(meetings_constraints[\"Karen\"][\"end\"], \"%H:%M\")\n    karen_duration = timedelta(minutes=meetings_constraints[\"Karen\"][\"duration\"])\n    karen_meeting_start = max(current_time, datetime.strptime(meetings_constraints[\"Karen\"][\"start\"], \"%H:%M\"))\n    karen_meeting_end = karen_meeting_start + karen_duration\n\n    if karen_meeting_end <= karen_end:\n        add_meeting(\"Karen\", \"Sunset District\", karen_meeting_start, karen_meeting_end)\n\n# Schedule all meetings based on constraints\nschedule_meetings()\n\n# Format result to JSON\nresult = {\"itinerary\": itinerary}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_908"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "9:00",
                        "end_time": "9:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "10:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Amanda",
                        "start_time": "19:45",
                        "end_time": "20:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "9:09",
                        "end_time": "9:24"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "10:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Betty",
                        "start_time": "19:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    (\"Pacific Heights\", \"North Beach\"): 9,\n    (\"Pacific Heights\", \"Financial District\"): 13,\n    (\"Pacific Heights\", \"Alamo Square\"): 10,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"North Beach\", \"Pacific Heights\"): 8,\n    (\"North Beach\", \"Financial District\"): 8,\n    (\"North Beach\", \"Alamo Square\"): 16,\n    (\"North Beach\", \"Mission District\"): 18,\n    (\"Financial District\", \"Pacific Heights\"): 13,\n    (\"Financial District\", \"North Beach\"): 7,\n    (\"Financial District\", \"Alamo Square\"): 17,\n    (\"Financial District\", \"Mission District\"): 17,\n    (\"Alamo Square\", \"Pacific Heights\"): 10,\n    (\"Alamo Square\", \"North Beach\"): 15,\n    (\"Alamo Square\", \"Financial District\"): 17,\n    (\"Alamo Square\", \"Mission District\"): 10,\n    (\"Mission District\", \"Pacific Heights\"): 16,\n    (\"Mission District\", \"North Beach\"): 17,\n    (\"Mission District\", \"Financial District\"): 17,\n    (\"Mission District\", \"Alamo Square\"): 11\n}\n\n# Meeting constraints and available times\nmeetings = {\n    \"Helen\": {\"location\": \"North Beach\", \"start\": \"09:00\", \"end\": \"17:00\", \"duration\": 15},\n    \"Betty\": {\"location\": \"Financial District\", \"start\": \"19:00\", \"end\": \"21:45\", \"duration\": 90},\n    \"Amanda\": {\"location\": \"Alamo Square\", \"start\": \"19:45\", \"end\": \"21:00\", \"duration\": 60},\n    \"Kevin\": {\"location\": \"Mission District\", \"start\": \"10:45\", \"end\": \"14:45\", \"duration\": 45},\n}\n\n# Function to convert time string to datetime object\ndef time_str_to_dt(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Function to convert datetime object to time string\ndef dt_to_time_str(dt):\n    return dt.strftime(\"%H:%M\")\n\n# Start at Pacific Heights at 09:00\ncurrent_time = time_str_to_dt(\"09:00\")\nitinerary = []\n\n# Meeting Helen\nhelen_meeting_start = current_time\nhelen_meeting_end = helen_meeting_start + timedelta(minutes=meetings[\"Helen\"][\"duration\"])\n\nif helen_meeting_end <= time_str_to_dt(meetings[\"Helen\"][\"end\"]):\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Helen\"][\"location\"],\n        \"person\": \"Helen\",\n        \"start_time\": dt_to_time_str(helen_meeting_start),\n        \"end_time\": dt_to_time_str(helen_meeting_end)\n    })\n    current_time = helen_meeting_end + timedelta(minutes=travel_times[(\"North Beach\", \"Mission District\")])\n\n# Meeting Kevin\nkevin_meeting_start = max(current_time, time_str_to_dt(meetings[\"Kevin\"][\"start\"]))\nkevin_meeting_end = kevin_meeting_start + timedelta(minutes=meetings[\"Kevin\"][\"duration\"])\n\nif kevin_meeting_end <= time_str_to_dt(meetings[\"Kevin\"][\"end\"]):\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Kevin\"][\"location\"],\n        \"person\": \"Kevin\",\n        \"start_time\": dt_to_time_str(kevin_meeting_start),\n        \"end_time\": dt_to_time_str(kevin_meeting_end)\n    })\n    current_time = kevin_meeting_end + timedelta(minutes=travel_times[(\"Mission District\", \"Alamo Square\")])\n\n# Meeting Amanda\namanda_meeting_start = max(current_time, time_str_to_dt(meetings[\"Amanda\"][\"start\"]))\namanda_meeting_end = amanda_meeting_start + timedelta(minutes=meetings[\"Amanda\"][\"duration\"])\n\nif amanda_meeting_end <= time_str_to_dt(meetings[\"Amanda\"][\"end\"]):\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Amanda\"][\"location\"],\n        \"person\": \"Amanda\",\n        \"start_time\": dt_to_time_str(amanda_meeting_start),\n        \"end_time\": dt_to_time_str(amanda_meeting_end)\n    })\n    current_time = amanda_meeting_end + timedelta(minutes=travel_times[(\"Alamo Square\", \"Financial District\")])\n\n# Meeting Betty\nbetty_meeting_start = max(current_time, time_str_to_dt(meetings[\"Betty\"][\"start\"]))\nbetty_meeting_end = betty_meeting_start + timedelta(minutes=meetings[\"Betty\"][\"duration\"])\n\nif betty_meeting_end <= time_str_to_dt(meetings[\"Betty\"][\"end\"]):\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Betty\"][\"location\"],\n        \"person\": \"Betty\",\n        \"start_time\": dt_to_time_str(betty_meeting_start),\n        \"end_time\": dt_to_time_str(betty_meeting_end)\n    })\n\n# Outputting the itinerary as JSON\noutput = {\"itinerary\": itinerary}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_335"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Matthew",
                        "start_time": "9:12",
                        "end_time": "9:27"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Stephanie",
                        "start_time": "9:48",
                        "end_time": "10:18"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Michelle",
                        "start_time": "10:36",
                        "end_time": "11:51"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Carol",
                        "start_time": "12:02",
                        "end_time": "13:32"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Jessica",
                        "start_time": "13:54",
                        "end_time": "14:54"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Linda",
                        "start_time": "15:05",
                        "end_time": "16:35"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Matthew",
                        "start_time": "9:12",
                        "end_time": "9:27"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Michelle",
                        "start_time": "10:30",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Carol",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Stephanie",
                        "start_time": "13:37",
                        "end_time": "14:07"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Jessica",
                        "start_time": "15:45",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Linda",
                        "start_time": "16:56",
                        "end_time": "18:26"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "20:45",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel times in minutes\ntravel_times = {\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"The Castro\"): 17,\n    (\"Sunset District\", \"Richmond District\"): 12,\n    (\"Sunset District\", \"Marina District\"): 21,\n    (\"Sunset District\", \"North Beach\"): 29,\n    (\"Sunset District\", \"Union Square\"): 30,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"Russian Hill\", \"The Castro\"): 21,\n    (\"Russian Hill\", \"Richmond District\"): 14,\n    (\"Russian Hill\", \"Marina District\"): 7,\n    (\"Russian Hill\", \"North Beach\"): 5,\n    (\"Russian Hill\", \"Union Square\"): 11,\n    (\"Russian Hill\", \"Golden Gate Park\"): 21,\n    (\"The Castro\", \"Sunset District\"): 17,\n    (\"The Castro\", \"Russian Hill\"): 18,\n    (\"The Castro\", \"Richmond District\"): 16,\n    (\"The Castro\", \"Marina District\"): 21,\n    (\"The Castro\", \"North Beach\"): 20,\n    (\"The Castro\", \"Union Square\"): 19,\n    (\"The Castro\", \"Golden Gate Park\"): 11,\n    (\"Richmond District\", \"Sunset District\"): 11,\n    (\"Richmond District\", \"Russian Hill\"): 13,\n    (\"Richmond District\", \"The Castro\"): 16,\n    (\"Richmond District\", \"Marina District\"): 9,\n    (\"Richmond District\", \"North Beach\"): 17,\n    (\"Richmond District\", \"Union Square\"): 21,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Marina District\", \"Sunset District\"): 19,\n    (\"Marina District\", \"Russian Hill\"): 8,\n    (\"Marina District\", \"The Castro\"): 22,\n    (\"Marina District\", \"Richmond District\"): 11,\n    (\"Marina District\", \"North Beach\"): 11,\n    (\"Marina District\", \"Union Square\"): 16,\n    (\"Marina District\", \"Golden Gate Park\"): 18,\n    (\"North Beach\", \"Sunset District\"): 27,\n    (\"North Beach\", \"Russian Hill\"): 4,\n    (\"North Beach\", \"The Castro\"): 22,\n    (\"North Beach\", \"Richmond District\"): 18,\n    (\"North Beach\", \"Marina District\"): 9,\n    (\"North Beach\", \"Union Square\"): 7,\n    (\"North Beach\", \"Golden Gate Park\"): 22,\n    (\"Union Square\", \"Sunset District\"): 26,\n    (\"Union Square\", \"Russian Hill\"): 13,\n    (\"Union Square\", \"The Castro\"): 19,\n    (\"Union Square\", \"Richmond District\"): 20,\n    (\"Union Square\", \"Marina District\"): 18,\n    (\"Union Square\", \"North Beach\"): 10,\n    (\"Union Square\", \"Golden Gate Park\"): 22,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Golden Gate Park\", \"Russian Hill\"): 19,\n    (\"Golden Gate Park\", \"The Castro\"): 13,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Golden Gate Park\", \"Marina District\"): 16,\n    (\"Golden Gate Park\", \"North Beach\"): 24,\n    (\"Golden Gate Park\", \"Union Square\"): 22,\n}\n\n# Meeting constraints\nconstraints = {\n    \"Karen\": {\"location\": \"Russian Hill\", \"start\": \"21:45\", \"end\": \"22:45\", \"duration\": 60},\n    \"Jessica\": {\"location\": \"The Castro\", \"start\": \"15:45\", \"end\": \"19:30\", \"duration\": 60},\n    \"Matthew\": {\"location\": \"Richmond District\", \"start\": \"07:30\", \"end\": \"15:15\", \"duration\": 15},\n    \"Michelle\": {\"location\": \"Marina District\", \"start\": \"10:30\", \"end\": \"18:45\", \"duration\": 75},\n    \"Carol\": {\"location\": \"North Beach\", \"start\": \"12:00\", \"end\": \"17:00\", \"duration\": 90},\n    \"Stephanie\": {\"location\": \"Union Square\", \"start\": \"10:45\", \"end\": \"14:15\", \"duration\": 30},\n    \"Linda\": {\"location\": \"Golden Gate Park\", \"start\": \"10:45\", \"end\": \"22:00\", \"duration\": 90},\n}\n\n# Starting time\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Resulting itinerary\nitinerary = []\n\n# Meeting strategy\ndef book_meeting(person, location, start_time, duration):\n    end_time = start_time + timedelta(minutes=duration)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": location,\n        \"person\": person,\n        \"start_time\": start_time.strftime(\"%H:%M\"),\n        \"end_time\": end_time.strftime(\"%H:%M\"),\n    })\n    return end_time\n\n# Schedule the meetings based on constraints\nstart_time = arrival_time\n\n# Meet Matthew\nif start_time < datetime.strptime(constraints[\"Matthew\"][\"end\"], \"%H:%M\"):\n    travel_time = travel_times[(\"Sunset District\", \"Richmond District\")]\n    start_time += timedelta(minutes=travel_time)\n    book_meeting(\"Matthew\", \"Richmond District\", start_time, constraints[\"Matthew\"][\"duration\"])\n    start_time += timedelta(minutes=constraints[\"Matthew\"][\"duration\"])\n\n# Meet Stephanie\nif start_time < datetime.strptime(constraints[\"Stephanie\"][\"end\"], \"%H:%M\"):\n    travel_time = travel_times[(\"Richmond District\", \"Union Square\")]\n    start_time += timedelta(minutes=travel_time)\n    book_meeting(\"Stephanie\", \"Union Square\", start_time, constraints[\"Stephanie\"][\"duration\"])\n    start_time += timedelta(minutes=constraints[\"Stephanie\"][\"duration\"])\n\n# Meet Michelle\nif start_time < datetime.strptime(constraints[\"Michelle\"][\"end\"], \"%H:%M\"):\n    travel_time = travel_times[(\"Union Square\", \"Marina District\")]\n    start_time += timedelta(minutes=travel_time)\n    book_meeting(\"Michelle\", \"Marina District\", start_time, constraints[\"Michelle\"][\"duration\"])\n    start_time += timedelta(minutes=constraints[\"Michelle\"][\"duration\"])\n\n# Meet Carol\nif start_time < datetime.strptime(constraints[\"Carol\"][\"end\"], \"%H:%M\"):\n    travel_time = travel_times[(\"Marina District\", \"North Beach\")]\n    start_time += timedelta(minutes=travel_time)\n    book_meeting(\"Carol\", \"North Beach\", start_time, constraints[\"Carol\"][\"duration\"])\n    start_time += timedelta(minutes=constraints[\"Carol\"][\"duration\"])\n\n# Meet Jessica\nif start_time < datetime.strptime(constraints[\"Jessica\"][\"end\"], \"%H:%M\"):\n    travel_time = travel_times[(\"North Beach\", \"The Castro\")]\n    start_time += timedelta(minutes=travel_time)\n    book_meeting(\"Jessica\", \"The Castro\", start_time, constraints[\"Jessica\"][\"duration\"])\n    start_time += timedelta(minutes=constraints[\"Jessica\"][\"duration\"])\n\n# Meet Linda\nif start_time < datetime.strptime(constraints[\"Linda\"][\"end\"], \"%H:%M\"):\n    travel_time = travel_times[(\"The Castro\", \"Golden Gate Park\")]\n    start_time += timedelta(minutes=travel_time)\n    book_meeting(\"Linda\", \"Golden Gate Park\", start_time, constraints[\"Linda\"][\"duration\"])\n    start_time += timedelta(minutes=constraints[\"Linda\"][\"duration\"])\n\n# Meet Karen\nif start_time < datetime.strptime(constraints[\"Karen\"][\"end\"], \"%H:%M\"):\n    travel_time = travel_times[(\"Golden Gate Park\", \"Russian Hill\")]\n    start_time += timedelta(minutes=travel_time)\n    start_time = datetime.strptime(constraints[\"Karen\"][\"start\"], \"%H:%M\")  # Align with Karen's time\n    book_meeting(\"Karen\", \"Russian Hill\", start_time, constraints[\"Karen\"][\"duration\"])\n\n# Output the JSON result\nresult = {\"itinerary\": itinerary}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_607"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "David",
                        "start_time": "9:00",
                        "end_time": "9:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Barbara",
                        "start_time": "9:35",
                        "end_time": "9:50"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "10:07",
                        "end_time": "10:37"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Joseph",
                        "start_time": "10:59",
                        "end_time": "12:29"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jeffrey",
                        "start_time": "12:55",
                        "end_time": "13:55"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Joseph",
                        "start_time": "9:24",
                        "end_time": "10:54"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "11:16",
                        "end_time": "11:46"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Barbara",
                        "start_time": "12:03",
                        "end_time": "12:18"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jeffrey",
                        "start_time": "17:30",
                        "end_time": "18:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    ('Golden Gate Park', 'Fisherman\\'s Wharf'): 24,\n    ('Golden Gate Park', 'Bayview'): 23,\n    ('Golden Gate Park', 'Mission District'): 17,\n    ('Golden Gate Park', 'Embarcadero'): 25,\n    ('Golden Gate Park', 'Financial District'): 26,\n    ('Fisherman\\'s Wharf', 'Golden Gate Park'): 25,\n    ('Fisherman\\'s Wharf', 'Bayview'): 26,\n    ('Fisherman\\'s Wharf', 'Mission District'): 22,\n    ('Fisherman\\'s Wharf', 'Embarcadero'): 8,\n    ('Fisherman\\'s Wharf', 'Financial District'): 11,\n    ('Bayview', 'Golden Gate Park'): 22,\n    ('Bayview', 'Fisherman\\'s Wharf'): 25,\n    ('Bayview', 'Mission District'): 13,\n    ('Bayview', 'Embarcadero'): 19,\n    ('Bayview', 'Financial District'): 19,\n    ('Mission District', 'Golden Gate Park'): 17,\n    ('Mission District', 'Fisherman\\'s Wharf'): 22,\n    ('Mission District', 'Bayview'): 15,\n    ('Mission District', 'Embarcadero'): 19,\n    ('Mission District', 'Financial District'): 17,\n    ('Embarcadero', 'Golden Gate Park'): 25,\n    ('Embarcadero', 'Fisherman\\'s Wharf'): 6,\n    ('Embarcadero', 'Bayview'): 21,\n    ('Embarcadero', 'Mission District'): 20,\n    ('Embarcadero', 'Financial District'): 5,\n    ('Financial District', 'Golden Gate Park'): 23,\n    ('Financial District', 'Fisherman\\'s Wharf'): 10,\n    ('Financial District', 'Bayview'): 19,\n    ('Financial District', 'Mission District'): 17,\n    ('Financial District', 'Embarcadero'): 4,\n}\n\n# Meeting constraints\nconstraints = {\n    'Joseph': {'location': 'Fisherman\\'s Wharf', 'start': '08:00', 'end': '17:30', 'duration': 90},\n    'Jeffrey': {'location': 'Bayview', 'start': '17:30', 'end': '21:30', 'duration': 60},\n    'Kevin': {'location': 'Mission District', 'start': '11:15', 'end': '15:15', 'duration': 30},\n    'David': {'location': 'Embarcadero', 'start': '08:15', 'end': '09:00', 'duration': 30},\n    'Barbara': {'location': 'Financial District', 'start': '10:30', 'end': '16:30', 'duration': 15},\n}\n\ndef schedule_meetings():\n    itinerary = []\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    \n    # Meeting David at Embarcadero first, as it's close by and available early\n    end_time = start_time + timedelta(minutes=30)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Embarcadero\",\n        \"person\": \"David\",\n        \"start_time\": start_time.strftime(\"%H:%M\"),\n        \"end_time\": end_time.strftime(\"%H:%M\")\n    })\n    \n    # After meeting David, head to Financial District to meet Barbara\n    travel_time = travel_times[('Embarcadero', 'Financial District')]\n    start_time = end_time + timedelta(minutes=travel_time)\n    end_time = start_time + timedelta(minutes=15)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"person\": \"Barbara\",\n        \"start_time\": start_time.strftime(\"%H:%M\"),\n        \"end_time\": end_time.strftime(\"%H:%M\")\n    })\n    \n    # Next, go to Mission District to meet Kevin\n    travel_time = travel_times[('Financial District', 'Mission District')]\n    start_time = end_time + timedelta(minutes=travel_time)\n    end_time = start_time + timedelta(minutes=30)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Mission District\",\n        \"person\": \"Kevin\",\n        \"start_time\": start_time.strftime(\"%H:%M\"),\n        \"end_time\": end_time.strftime(\"%H:%M\")\n    })\n\n    # Next, head to Fisherman's Wharf to meet Joseph\n    travel_time = travel_times[('Mission District', 'Fisherman\\'s Wharf')]\n    start_time = end_time + timedelta(minutes=travel_time)\n    end_time = start_time + timedelta(minutes=90)  # Meet Joseph for 90 minutes\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman\\'s Wharf\",\n        \"person\": \"Joseph\",\n        \"start_time\": start_time.strftime(\"%H:%M\"),\n        \"end_time\": end_time.strftime(\"%H:%M\")\n    })\n\n    # Finally, go to Bayview to meet Jeffrey\n    travel_time = travel_times[('Fisherman\\'s Wharf', 'Bayview')]\n    start_time = end_time + timedelta(minutes=travel_time)\n    end_time = start_time + timedelta(minutes=60)  # Meet Jeffrey for 60 minutes\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"person\": \"Jeffrey\",\n        \"start_time\": start_time.strftime(\"%H:%M\"),\n        \"end_time\": end_time.strftime(\"%H:%M\")\n    })\n    \n    # Return the schedule as a JSON object\n    return json.dumps({\"itinerary\": itinerary}, indent=2)\n\nif __name__ == \"__main__\":\n    print(schedule_meetings())\n```",
            "count": "meeting_planning_example_432"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Nancy",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Mary",
                        "start_time": "11:17",
                        "end_time": "12:32"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jessica",
                        "start_time": "12:48",
                        "end_time": "13:33"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Nancy",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Mary",
                        "start_time": "11:17",
                        "end_time": "12:32"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jessica",
                        "start_time": "12:48",
                        "end_time": "13:33"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel times in minutes\ntravel_times = {\n    (\"Financial District\", \"Chinatown\"): 5,\n    (\"Financial District\", \"Alamo Square\"): 17,\n    (\"Financial District\", \"Bayview\"): 19,\n    (\"Financial District\", \"Fisherman's Wharf\"): 10,\n    (\"Chinatown\", \"Financial District\"): 5,\n    (\"Chinatown\", \"Alamo Square\"): 17,\n    (\"Chinatown\", \"Bayview\"): 22,\n    (\"Chinatown\", \"Fisherman's Wharf\"): 8,\n    (\"Alamo Square\", \"Financial District\"): 17,\n    (\"Alamo Square\", \"Chinatown\"): 16,\n    (\"Alamo Square\", \"Bayview\"): 16,\n    (\"Alamo Square\", \"Fisherman's Wharf\"): 19,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Bayview\", \"Chinatown\"): 18,\n    (\"Bayview\", \"Alamo Square\"): 16,\n    (\"Bayview\", \"Fisherman's Wharf\"): 25,\n    (\"Fisherman's Wharf\", \"Financial District\"): 11,\n    (\"Fisherman's Wharf\", \"Chinatown\"): 12,\n    (\"Fisherman's Wharf\", \"Alamo Square\"): 20,\n    (\"Fisherman's Wharf\", \"Bayview\"): 26,\n}\n\n# Meeting constraints\nconstraints = {\n    \"Nancy\": {\"location\": \"Chinatown\", \"available_from\": \"9:30\", \"available_to\": \"13:30\", \"min_duration\": 90},\n    \"Mary\": {\"location\": \"Alamo Square\", \"available_from\": \"7:00\", \"available_to\": \"21:00\", \"min_duration\": 75},\n    \"Jessica\": {\"location\": \"Bayview\", \"available_from\": \"11:15\", \"available_to\": \"13:45\", \"min_duration\": 45},\n    \"Rebecca\": {\"location\": \"Fisherman's Wharf\", \"available_from\": \"7:00\", \"available_to\": \"8:30\", \"min_duration\": 45},\n}\n\n# Start time\narrival_time = datetime.strptime('09:00', '%H:%M')\n\n# Function to calculate meeting time\ndef schedule_meeting(start, duration):\n    end = start + timedelta(minutes=duration)\n    return start, end\n\n# List to hold the itinerary\nitinerary = []\n\n# Meeting with Rebecca\nrebecca_start = datetime.strptime(constraints[\"Rebecca\"][\"available_from\"], '%H:%M')\nrebecca_end = datetime.strptime(constraints[\"Rebecca\"][\"available_to\"], '%H:%M')\nif rebecca_end >= arrival_time + timedelta(minutes=10):\n    rebecca_meet_start = max(rebecca_start, arrival_time + timedelta(minutes=10))\n    rebecca_meet_end = rebecca_meet_start + timedelta(minutes=constraints[\"Rebecca\"][\"min_duration\"])\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"person\": \"Rebecca\",\n        \"start_time\": rebecca_meet_start.strftime('%H:%M'),\n        \"end_time\": rebecca_meet_end.strftime('%H:%M')\n    })\n    travel_to_chinatown = travel_times[(\"Fisherman's Wharf\", \"Chinatown\")]\n    arrival_time = rebecca_meet_end + timedelta(minutes=travel_to_chinatown)\n\n# Meeting with Nancy\nnancy_start = datetime.strptime(constraints[\"Nancy\"][\"available_from\"], '%H:%M')\nnancy_end = datetime.strptime(constraints[\"Nancy\"][\"available_to\"], '%H:%M')\nif arrival_time < nancy_end and arrival_time + timedelta(minutes=constraints[\"Nancy\"][\"min_duration\"]) <= nancy_end:\n    nancy_meet_start = max(arrival_time, nancy_start)\n    nancy_meet_end = nancy_meet_start + timedelta(minutes=constraints[\"Nancy\"][\"min_duration\"])\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Chinatown\",\n        \"person\": \"Nancy\",\n        \"start_time\": nancy_meet_start.strftime('%H:%M'),\n        \"end_time\": nancy_meet_end.strftime('%H:%M')\n    })\n    travel_to_alamo_square = travel_times[(\"Chinatown\", \"Alamo Square\")]\n    arrival_time = nancy_meet_end + timedelta(minutes=travel_to_alamo_square)\n\n# Meeting with Mary\nmary_start = datetime.strptime(constraints[\"Mary\"][\"available_from\"], '%H:%M')\nmary_end = datetime.strptime(constraints[\"Mary\"][\"available_to\"], '%H:%M')\nif arrival_time < mary_end and arrival_time + timedelta(minutes=constraints[\"Mary\"][\"min_duration\"]) <= mary_end:\n    mary_meet_start = max(arrival_time, mary_start)\n    mary_meet_end = mary_meet_start + timedelta(minutes=constraints[\"Mary\"][\"min_duration\"])\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Alamo Square\",\n        \"person\": \"Mary\",\n        \"start_time\": mary_meet_start.strftime('%H:%M'),\n        \"end_time\": mary_meet_end.strftime('%H:%M')\n    })\n    travel_to_bayview = travel_times[(\"Alamo Square\", \"Bayview\")]\n    arrival_time = mary_meet_end + timedelta(minutes=travel_to_bayview)\n\n# Meeting with Jessica\njessica_start = datetime.strptime(constraints[\"Jessica\"][\"available_from\"], '%H:%M')\njessica_end = datetime.strptime(constraints[\"Jessica\"][\"available_to\"], '%H:%M')\nif arrival_time < jessica_end and arrival_time + timedelta(minutes=constraints[\"Jessica\"][\"min_duration\"]) <= jessica_end:\n    jessica_meet_start = max(arrival_time, jessica_start)\n    jessica_meet_end = jessica_meet_start + timedelta(minutes=constraints[\"Jessica\"][\"min_duration\"])\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"person\": \"Jessica\",\n        \"start_time\": jessica_meet_start.strftime('%H:%M'),\n        \"end_time\": jessica_meet_end.strftime('%H:%M')\n    })\n\n# Output the resulting itinerary as JSON\nresult = {\"itinerary\": itinerary}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_309"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Robert",
                        "start_time": "9:29",
                        "end_time": "9:59"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Michelle",
                        "start_time": "10:29",
                        "end_time": "10:44"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "George",
                        "start_time": "11:00",
                        "end_time": "11:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Michelle",
                        "start_time": "9:30",
                        "end_time": "9:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "George",
                        "start_time": "10:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Robert",
                        "start_time": "11:19",
                        "end_time": "11:49"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "William",
                        "start_time": "18:30",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define meeting locations and travel times\ntravel_times = {\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"Chinatown\"): 30,\n    (\"Sunset District\", \"Presidio\"): 16,\n    (\"Sunset District\", \"Fisherman's Wharf\"): 29,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"Russian Hill\", \"Chinatown\"): 9,\n    (\"Russian Hill\", \"Presidio\"): 14,\n    (\"Russian Hill\", \"Fisherman's Wharf\"): 7,\n    (\"Chinatown\", \"Sunset District\"): 29,\n    (\"Chinatown\", \"Russian Hill\"): 7,\n    (\"Chinatown\", \"Presidio\"): 19,\n    (\"Chinatown\", \"Fisherman's Wharf\"): 8,\n    (\"Presidio\", \"Sunset District\"): 15,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Presidio\", \"Chinatown\"): 21,\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Fisherman's Wharf\", \"Sunset District\"): 27,\n    (\"Fisherman's Wharf\", \"Russian Hill\"): 7,\n    (\"Fisherman's Wharf\", \"Chinatown\"): 12,\n    (\"Fisherman's Wharf\", \"Presidio\"): 17,\n}\n\n# Define participants with their availability and required meeting time\nparticipants = {\n    \"William\": {\"location\": \"Russian Hill\", \"available\": (datetime.strptime(\"18:30\", \"%H:%M\"), datetime.strptime(\"20:45\", \"%H:%M\")), \"min_meeting_time\": timedelta(minutes=105)},\n    \"Michelle\": {\"location\": \"Chinatown\", \"available\": (datetime.strptime(\"08:15\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")), \"min_meeting_time\": timedelta(minutes=15)},\n    \"George\": {\"location\": \"Presidio\", \"available\": (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"18:45\", \"%H:%M\")), \"min_meeting_time\": timedelta(minutes=30)},\n    \"Robert\": {\"location\": \"Fisherman's Wharf\", \"available\": (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:45\", \"%H:%M\")), \"min_meeting_time\": timedelta(minutes=30)},\n}\n\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nitinerary = []\n\n# Create a method to calculate meeting time slots\ndef can_meet(person, start_time, duration):\n    end_time = start_time + duration\n    av_start, av_end = participants[person][\"available\"]\n    return start_time >= av_start and end_time <= av_end\n\n# Function to compute the meeting schedule\ndef schedule_meetings(start_time, current_location):\n    meetings = []\n\n    # Try to meet each participant in order of priority\n    if can_meet(\"Robert\", start_time + timedelta(minutes=travel_times[(current_location, \"Fisherman's Wharf\")]), participants[\"Robert\"][\"min_meeting_time\"]):\n        meet_start = start_time + timedelta(minutes=travel_times[(current_location, \"Fisherman's Wharf\")])\n        meetings.append({\n            \"action\": \"meet\",\n            \"location\": \"Fisherman's Wharf\",\n            \"person\": \"Robert\",\n            \"start_time\": meet_start.strftime(\"%H:%M\"),\n            \"end_time\": (meet_start + participants[\"Robert\"][\"min_meeting_time\"]).strftime(\"%H:%M\"),\n        })\n        start_time = meet_start + participants[\"Robert\"][\"min_meeting_time\"]\n\n    if can_meet(\"Michelle\", start_time + timedelta(minutes=travel_times[(current_location, \"Chinatown\")]), participants[\"Michelle\"][\"min_meeting_time\"]):\n        meet_start = start_time + timedelta(minutes=travel_times[(current_location, \"Chinatown\")])\n        meetings.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"person\": \"Michelle\",\n            \"start_time\": meet_start.strftime(\"%H:%M\"),\n            \"end_time\": (meet_start + participants[\"Michelle\"][\"min_meeting_time\"]).strftime(\"%H:%M\"),\n        })\n        start_time = meet_start + participants[\"Michelle\"][\"min_meeting_time\"]\n\n    if can_meet(\"George\", start_time + timedelta(minutes=travel_times[(current_location, \"Presidio\")]), participants[\"George\"][\"min_meeting_time\"]):\n        meet_start = start_time + timedelta(minutes=travel_times[(current_location, \"Presidio\")])\n        meetings.append({\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"person\": \"George\",\n            \"start_time\": meet_start.strftime(\"%H:%M\"),\n            \"end_time\": (meet_start + participants[\"George\"][\"min_meeting_time\"]).strftime(\"%H:%M\"),\n        })\n        start_time = meet_start + participants[\"George\"][\"min_meeting_time\"]\n\n    if can_meet(\"William\", start_time + timedelta(minutes=travel_times[(current_location, \"Russian Hill\")]), participants[\"William\"][\"min_meeting_time\"]):\n        meet_start = start_time + timedelta(minutes=travel_times[(current_location, \"Russian Hill\")])\n        meetings.append({\n            \"action\": \"meet\",\n            \"location\": \"Russian Hill\",\n            \"person\": \"William\",\n            \"start_time\": meet_start.strftime(\"%H:%M\"),\n            \"end_time\": (meet_start + participants[\"William\"][\"min_meeting_time\"]).strftime(\"%H:%M\"),\n        })\n\n    return meetings\n\n# Compute the optimal schedule starting from Sunset District\nitinerary = schedule_meetings(start_time, \"Sunset District\")\n\n# Output in JSON format\noutput = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_322"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Mary",
                        "start_time": "9:25",
                        "end_time": "10:10"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "10:17",
                        "end_time": "11:47"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Stephanie",
                        "start_time": "12:02",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Deborah",
                        "start_time": "15:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Emily",
                        "start_time": "17:19",
                        "end_time": "19:04"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define the travel times (in minutes)\ntravel_times = {\n    (\"Embarcadero\", \"Golden Gate Park\"): 25,\n    (\"Embarcadero\", \"Haight-Ashbury\"): 21,\n    (\"Embarcadero\", \"Bayview\"): 21,\n    (\"Embarcadero\", \"Presidio\"): 20,\n    (\"Embarcadero\", \"Financial District\"): 5,\n    (\"Golden Gate Park\", \"Haight-Ashbury\"): 7,\n    (\"Golden Gate Park\", \"Bayview\"): 23,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Haight-Ashbury\", \"Bayview\"): 19,\n    (\"Haight-Ashbury\", \"Presidio\"): 15,\n    (\"Haight-Ashbury\", \"Financial District\"): 21,\n    (\"Bayview\", \"Presidio\"): 31,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Presidio\", \"Financial District\"): 22,\n}\n\n# Meeting Constraints\nconstraints = {\n    \"Mary\": {\n        \"location\": \"Golden Gate Park\",\n        \"available_from\": \"08:45\",\n        \"available_to\": \"11:45\",\n        \"min_meeting_time\": 45\n    },\n    \"Kevin\": {\n        \"location\": \"Haight-Ashbury\",\n        \"available_from\": \"10:15\",\n        \"available_to\": \"16:15\",\n        \"min_meeting_time\": 90\n    },\n    \"Deborah\": {\n        \"location\": \"Bayview\",\n        \"available_from\": \"15:00\",\n        \"available_to\": \"19:15\",\n        \"min_meeting_time\": 120\n    },\n    \"Stephanie\": {\n        \"location\": \"Presidio\",\n        \"available_from\": \"10:00\",\n        \"available_to\": \"17:15\",\n        \"min_meeting_time\": 120\n    },\n    \"Emily\": {\n        \"location\": \"Financial District\",\n        \"available_from\": \"11:30\",\n        \"available_to\": \"21:45\",\n        \"min_meeting_time\": 105\n    },\n}\n\n# Arrival time at Embarcadero\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Convert available time strings to datetime objects\nfor key, value in constraints.items():\n    value[\"available_from\"] = datetime.strptime(value[\"available_from\"], \"%H:%M\")\n    value[\"available_to\"] = datetime.strptime(value[\"available_to\"], \"%H:%M\")\n\n# Initialize the itinerary\nitinerary = []\ncurrent_time = arrival_time\n\n# Function to calculate end time after travel and meeting\ndef add_meeting(start_time, duration):\n    return start_time + timedelta(minutes=duration)\n\n# Meeting Mary\nif current_time <= constraints[\"Mary\"][\"available_to\"] and current_time + timedelta(minutes=travel_times[(\"Embarcadero\", \"Golden Gate Park\")]) <= constraints[\"Mary\"][\"available_from\"]:\n    travel_time = travel_times[(\"Embarcadero\", \"Golden Gate Park\")]\n    current_time = add_meeting(current_time, travel_time)  # Travel to Golden Gate Park\n    meeting_start = add_meeting(current_time, 0)  # Start meeting right after arrival\n    meeting_end = add_meeting(meeting_start, constraints[\"Mary\"][\"min_meeting_time\"])\n    itinerary.append({\"action\": \"meet\", \"location\": \"Golden Gate Park\", \"person\": \"Mary\", \"start_time\": meeting_start.strftime(\"%H:%M\"), \"end_time\": meeting_end.strftime(\"%H:%M\")})\n    current_time = meeting_end  # Update current time after meeting\n\n# Meeting Kevin\nif current_time <= constraints[\"Kevin\"][\"available_to\"]:\n    travel_time = travel_times[(\"Golden Gate Park\", \"Haight-Ashbury\")]\n    current_time = add_meeting(current_time, travel_time)  # Travel to Haight-Ashbury\n    meeting_start = max(current_time, constraints[\"Kevin\"][\"available_from\"])\n    meeting_end = add_meeting(meeting_start, constraints[\"Kevin\"][\"min_meeting_time\"])\n    itinerary.append({\"action\": \"meet\", \"location\": \"Haight-Ashbury\", \"person\": \"Kevin\", \"start_time\": meeting_start.strftime(\"%H:%M\"), \"end_time\": meeting_end.strftime(\"%H:%M\")})\n    current_time = meeting_end  # Update current time after meeting\n\n# Meeting Stephanie\nif current_time <= constraints[\"Stephanie\"][\"available_to\"]:\n    travel_time = travel_times[(\"Haight-Ashbury\", \"Presidio\")]\n    current_time = add_meeting(current_time, travel_time)  # Travel to Presidio\n    meeting_start = max(current_time, constraints[\"Stephanie\"][\"available_from\"])\n    meeting_end = add_meeting(meeting_start, constraints[\"Stephanie\"][\"min_meeting_time\"])\n    itinerary.append({\"action\": \"meet\", \"location\": \"Presidio\", \"person\": \"Stephanie\", \"start_time\": meeting_start.strftime(\"%H:%M\"), \"end_time\": meeting_end.strftime(\"%H:%M\")})\n    current_time = meeting_end  # Update current time after meeting\n\n# Meeting Deborah\nif current_time <= constraints[\"Deborah\"][\"available_to\"]:\n    travel_time = travel_times[(\"Presidio\", \"Bayview\")]\n    current_time = add_meeting(current_time, travel_time)  # Travel to Bayview\n    meeting_start = max(current_time, constraints[\"Deborah\"][\"available_from\"])\n    meeting_end = add_meeting(meeting_start, constraints[\"Deborah\"][\"min_meeting_time\"])\n    itinerary.append({\"action\": \"meet\", \"location\": \"Bayview\", \"person\": \"Deborah\", \"start_time\": meeting_start.strftime(\"%H:%M\"), \"end_time\": meeting_end.strftime(\"%H:%M\")})\n    current_time = meeting_end  # Update current time after meeting\n\n# Meeting Emily\nif current_time <= constraints[\"Emily\"][\"available_to\"]:\n    travel_time = travel_times[(\"Bayview\", \"Financial District\")]\n    current_time = add_meeting(current_time, travel_time)  # Travel to Financial District\n    meeting_start = max(current_time, constraints[\"Emily\"][\"available_from\"])\n    meeting_end = add_meeting(meeting_start, constraints[\"Emily\"][\"min_meeting_time\"])\n    itinerary.append({\"action\": \"meet\", \"location\": \"Financial District\", \"person\": \"Emily\", \"start_time\": meeting_start.strftime(\"%H:%M\"), \"end_time\": meeting_end.strftime(\"%H:%M\")})\n    current_time = meeting_end  # Update current time after meeting\n\n# Output the schedule as a JSON-formatted dictionary\noutput = {\"itinerary\": itinerary}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_479"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Timothy",
                        "start_time": "20:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Timothy",
                        "start_time": "20:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants\nTRAVEL_TIME_ALAMO_TO_RICHMOND = 12  # in minutes\nTRAVEL_TIME_RICHMOND_TO_ALAMO = 13  # in minutes\nMEETING_DURATION_MINUTES = 45\nARRIVAL_TIME_ALAMO = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Timothy's availability\ntimothy_start = datetime.strptime(\"20:45\", \"%H:%M\")\ntimothy_end = datetime.strptime(\"21:30\", \"%H:%M\")\n\n# Calculate the optimal meeting time considering travel and meeting constraints\ndef find_optimal_meeting_time():\n    # The latest start time for the meeting with Timothy considering travel and meeting duration\n    latest_meeting_start_time = timothy_end - timedelta(minutes=MEETING_DURATION_MINUTES)\n    \n    # Travel from Alamo Square to Richmond District\n    travel_to_timothy = ARRIVAL_TIME_ALAMO + timedelta(minutes=TRAVEL_TIME_ALAMO_TO_RICHMOND)\n    \n    # Check if we can meet Timothy\n    if travel_to_timothy <= latest_meeting_start_time:\n        meeting_start_time = max(travel_to_timothy, timothy_start)\n        meeting_end_time = meeting_start_time + timedelta(minutes=MEETING_DURATION_MINUTES)\n        \n        return [{\n            \"action\": \"meet\",\n            \"location\": \"Richmond District\",\n            \"person\": \"Timothy\",\n            \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end_time.strftime(\"%H:%M\"),\n        }]\n    \n    return []\n\n# Main execution\ndef main():\n    itinerary = find_optimal_meeting_time()\n    result = {\"itinerary\": itinerary}\n    print(json.dumps(result, indent=2))\n\n# Run the program\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_98"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "9:08",
                        "end_time": "11:08"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "9:08",
                        "end_time": "11:08"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Kimberly",
                        "start_time": "16:30",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Patricia",
                        "start_time": "18:00",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Defining travel times in minutes\ntravel_times = {\n    (\"Nob Hill\", \"North Beach\"): 8,\n    (\"Nob Hill\", \"Fisherman's Wharf\"): 11,\n    (\"Nob Hill\", \"Bayview\"): 19,\n    (\"North Beach\", \"Nob Hill\"): 7,\n    (\"North Beach\", \"Fisherman's Wharf\"): 5,\n    (\"North Beach\", \"Bayview\"): 22,\n    (\"Fisherman's Wharf\", \"Nob Hill\"): 11,\n    (\"Fisherman's Wharf\", \"North Beach\"): 6,\n    (\"Fisherman's Wharf\", \"Bayview\"): 26,\n    (\"Bayview\", \"Nob Hill\"): 20,\n    (\"Bayview\", \"North Beach\"): 21,\n    (\"Bayview\", \"Fisherman's Wharf\"): 25,\n}\n\n# Defining meeting constraints\nconstraints = {\n    \"Helen\": {\n        \"location\": \"North Beach\",\n        \"start_time\": \"7:00\",\n        \"end_time\": \"16:45\",\n        \"duration\": 120\n    },\n    \"Kimberly\": {\n        \"location\": \"Fisherman's Wharf\",\n        \"start_time\": \"16:30\",\n        \"end_time\": \"21:00\",\n        \"duration\": 45\n    },\n    \"Patricia\": {\n        \"location\": \"Bayview\",\n        \"start_time\": \"18:00\",\n        \"end_time\": \"21:15\",\n        \"duration\": 120\n    },\n}\n\n# Start time at Nob Hill\narrival_time_nob_hill = datetime.strptime(\"9:00\", \"%H:%M\")\n\n# Calculating the optimal schedule\ndef calculate_schedule():\n    schedule = []\n    \n    # Meeting Helen\n    start_meeting_helen = arrival_time_nob_hill + timedelta(minutes=travel_times[(\"Nob Hill\", \"North Beach\")])\n    end_meeting_helen = start_meeting_helen + timedelta(minutes=constraints[\"Helen\"][\"duration\"])\n\n    if start_meeting_helen.time() >= datetime.strptime(constraints[\"Helen\"][\"start_time\"], \"%H:%M\").time() and \\\n       end_meeting_helen.time() <= datetime.strptime(constraints[\"Helen\"][\"end_time\"], \"%H:%M\").time():\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": constraints[\"Helen\"][\"location\"],\n            \"person\": \"Helen\",\n            \"start_time\": start_meeting_helen.strftime(\"%H:%M\"),\n            \"end_time\": end_meeting_helen.strftime(\"%H:%M\"),\n        })\n        \n        # Travel to Fisherman's Wharf to meet Kimberly after meeting Helen\n        travel_to_kimberly = travel_times[(\"North Beach\", \"Fisherman's Wharf\")]\n        start_meeting_kimberly = end_meeting_helen + timedelta(minutes=travel_to_kimberly)\n        end_meeting_kimberly = start_meeting_kimberly + timedelta(minutes=constraints[\"Kimberly\"][\"duration\"])\n\n        if start_meeting_kimberly.time() >= datetime.strptime(constraints[\"Kimberly\"][\"start_time\"], \"%H:%M\").time() and \\\n           end_meeting_kimberly.time() <= datetime.strptime(constraints[\"Kimberly\"][\"end_time\"], \"%H:%M\").time():\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": constraints[\"Kimberly\"][\"location\"],\n                \"person\": \"Kimberly\",\n                \"start_time\": start_meeting_kimberly.strftime(\"%H:%M\"),\n                \"end_time\": end_meeting_kimberly.strftime(\"%H:%M\"),\n            })\n\n            # Travel to Bayview to meet Patricia after meeting Kimberly\n            travel_to_patricia = travel_times[(\"Fisherman's Wharf\", \"Bayview\")]\n            start_meeting_patricia = end_meeting_kimberly + timedelta(minutes=travel_to_patricia)\n            end_meeting_patricia = start_meeting_patricia + timedelta(minutes=constraints[\"Patricia\"][\"duration\"])\n\n            if start_meeting_patricia.time() >= datetime.strptime(constraints[\"Patricia\"][\"start_time\"], \"%H:%M\").time() and \\\n               end_meeting_patricia.time() <= datetime.strptime(constraints[\"Patricia\"][\"end_time\"], \"%H:%M\").time():\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": constraints[\"Patricia\"][\"location\"],\n                    \"person\": \"Patricia\",\n                    \"start_time\": start_meeting_patricia.strftime(\"%H:%M\"),\n                    \"end_time\": end_meeting_patricia.strftime(\"%H:%M\"),\n                })\n\n    return schedule\n\n# Create the itinerary\nitinerary = calculate_schedule()\n\n# Format into JSON output\noutput = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_222"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Matthew",
                        "start_time": "11:00",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Kimberly",
                        "start_time": "13:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "15:16",
                        "end_time": "15:31"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Kenneth",
                        "start_time": "15:53",
                        "end_time": "16:53"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Margaret",
                        "start_time": "17:11",
                        "end_time": "18:41"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Helen",
                        "start_time": "19:45",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "21:15",
                        "end_time": "22:15"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances\ntravel_times = {\n    (\"Russian Hill\", \"Presidio\"): 14,\n    (\"Russian Hill\", \"Chinatown\"): 9,\n    (\"Russian Hill\", \"Pacific Heights\"): 7,\n    (\"Russian Hill\", \"Richmond District\"): 14,\n    (\"Russian Hill\", \"Fisherman's Wharf\"): 7,\n    (\"Russian Hill\", \"Golden Gate Park\"): 21,\n    (\"Russian Hill\", \"Bayview\"): 23,\n    (\"Presidio\", \"Chinatown\"): 21,\n    (\"Presidio\", \"Pacific Heights\"): 11,\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Bayview\"): 31,\n    (\"Chinatown\", \"Pacific Heights\"): 10,\n    (\"Chinatown\", \"Richmond District\"): 20,\n    (\"Chinatown\", \"Fisherman's Wharf\"): 8,\n    (\"Chinatown\", \"Golden Gate Park\"): 23,\n    (\"Chinatown\", \"Bayview\"): 22,\n    (\"Pacific Heights\", \"Richmond District\"): 12,\n    (\"Pacific Heights\", \"Fisherman's Wharf\"): 13,\n    (\"Pacific Heights\", \"Golden Gate Park\"): 15,\n    (\"Pacific Heights\", \"Bayview\"): 22,\n    (\"Richmond District\", \"Chinatown\"): 20,\n    (\"Richmond District\", \"Fisherman's Wharf\"): 18,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Richmond District\", \"Bayview\"): 26,\n    (\"Fisherman's Wharf\", \"Chinatown\"): 12,\n    (\"Fisherman's Wharf\", \"Pacific Heights\"): 12,\n    (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n    (\"Fisherman's Wharf\", \"Bayview\"): 26,\n    (\"Golden Gate Park\", \"Bayview\"): 22,\n}\n\n# Meeting constraints\nconstraints = {\n    \"Matthew\": {\"location\": \"Presidio\", \"start\": \"11:00\", \"end\": \"21:00\", \"duration\": 90},\n    \"Margaret\": {\"location\": \"Chinatown\", \"start\": \"09:15\", \"end\": \"18:45\", \"duration\": 90},\n    \"Nancy\": {\"location\": \"Pacific Heights\", \"start\": \"14:15\", \"end\": \"17:00\", \"duration\": 15},\n    \"Helen\": {\"location\": \"Richmond District\", \"start\": \"19:45\", \"end\": \"22:00\", \"duration\": 60},\n    \"Rebecca\": {\"location\": \"Fisherman's Wharf\", \"start\": \"21:15\", \"end\": \"22:15\", \"duration\": 60},\n    \"Kimberly\": {\"location\": \"Golden Gate Park\", \"start\": \"13:00\", \"end\": \"16:30\", \"duration\": 120},\n    \"Kenneth\": {\"location\": \"Bayview\", \"start\": \"14:30\", \"end\": \"18:00\", \"duration\": 60},\n}\n\n# Convert time string to datetime object\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Create a function to compute the optimal meeting schedule\ndef compute_schedule():\n    current_time = str_to_time(\"9:00\")\n    schedule = []\n    \n    # Meet Margaret first\n    margaret_start = str_to_time(\"9:15\")\n    travel_to_margaret = travel_times[(\"Russian Hill\", \"Chinatown\")]\n    time_after_travel = current_time + timedelta(minutes=travel_to_margaret)\n\n    if time_after_travel <= margaret_start:\n        free_time = margaret_start - time_after_travel\n        if free_time.total_seconds() >= 0:\n            actual_start = margaret_start\n        else:\n            actual_start = time_after_travel\n\n        meet_duration = timedelta(minutes=constraints[\"Margaret\"][\"duration\"])\n        actual_end = actual_start + meet_duration\n\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"person\": \"Margaret\",\n            \"start_time\": actual_start.strftime(\"%H:%M\"),\n            \"end_time\": actual_end.strftime(\"%H:%M\")\n        })\n\n        # Update current time after meeting Margaret\n        current_time = actual_end\n\n    # Meet Matthew next\n    travel_to_matthew = travel_times[(\"Chinatown\", \"Presidio\")]\n    time_after_travel = current_time + timedelta(minutes=travel_to_matthew)\n    matthew_start = str_to_time(\"11:00\")\n    if time_after_travel < matthew_start:\n        current_time = matthew_start\n\n    meet_duration = timedelta(minutes=constraints[\"Matthew\"][\"duration\"])\n    actual_end = current_time + meet_duration\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Presidio\",\n        \"person\": \"Matthew\",\n        \"start_time\": current_time.strftime(\"%H:%M\"),\n        \"end_time\": actual_end.strftime(\"%H:%M\")\n    })\n\n    current_time = actual_end\n\n    # Meet Kimberly next\n    travel_to_kimberly = travel_times[(\"Presidio\", \"Golden Gate Park\")]\n    time_after_travel = current_time + timedelta(minutes=travel_to_kimberly)\n    kimberly_start = str_to_time(\"13:00\")\n    if time_after_travel < kimberly_start:\n        current_time = kimberly_start\n\n    meet_duration = timedelta(minutes=constraints[\"Kimberly\"][\"duration\"])\n    actual_end = current_time + meet_duration\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Golden Gate Park\",\n        \"person\": \"Kimberly\",\n        \"start_time\": current_time.strftime(\"%H:%M\"),\n        \"end_time\": actual_end.strftime(\"%H:%M\")\n    })\n\n    current_time = actual_end\n\n    # Meet Kenneth next\n    travel_to_kenneth = travel_times[(\"Golden Gate Park\", \"Bayview\")]\n    time_after_travel = current_time + timedelta(minutes=travel_to_kenneth)\n    kenneth_start = str_to_time(\"14:30\")\n    if time_after_travel < kenneth_start:\n        current_time = kenneth_start\n\n    meet_duration = timedelta(minutes=constraints[\"Kenneth\"][\"duration\"])\n    actual_end = current_time + meet_duration\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Bayview\",\n        \"person\": \"Kenneth\",\n        \"start_time\": current_time.strftime(\"%H:%M\"),\n        \"end_time\": actual_end.strftime(\"%H:%M\")\n    })\n\n    current_time = actual_end\n\n    # Meet Nancy next\n    travel_to_nancy = travel_times[(\"Bayview\", \"Pacific Heights\")]\n    time_after_travel = current_time + timedelta(minutes=travel_to_nancy)\n    nancy_start = str_to_time(\"14:15\")\n    if time_after_travel < nancy_start:\n        current_time = nancy_start\n\n    meet_duration = timedelta(minutes=constraints[\"Nancy\"][\"duration\"])\n    actual_end = current_time + meet_duration\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"person\": \"Nancy\",\n        \"start_time\": current_time.strftime(\"%H:%M\"),\n        \"end_time\": actual_end.strftime(\"%H:%M\")\n    })\n\n    current_time = actual_end\n\n    # Meet Helen next\n    travel_to_helen = travel_times[(\"Pacific Heights\", \"Richmond District\")]\n    time_after_travel = current_time + timedelta(minutes=travel_to_helen)\n    helen_start = str_to_time(\"19:45\")\n    if time_after_travel < helen_start:\n        current_time = helen_start\n\n    meet_duration = timedelta(minutes=constraints[\"Helen\"][\"duration\"])\n    actual_end = current_time + meet_duration\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Richmond District\",\n        \"person\": \"Helen\",\n        \"start_time\": current_time.strftime(\"%H:%M\"),\n        \"end_time\": actual_end.strftime(\"%H:%M\")\n    })\n\n    current_time = actual_end\n\n    # Meet Rebecca last\n    travel_to_rebecca = travel_times[(\"Richmond District\", \"Fisherman's Wharf\")]\n    time_after_travel = current_time + timedelta(minutes=travel_to_rebecca)\n    rebecca_start = str_to_time(\"21:15\")\n    if time_after_travel < rebecca_start:\n        current_time = rebecca_start\n\n    meet_duration = timedelta(minutes=constraints[\"Rebecca\"][\"duration\"])\n    actual_end = current_time + meet_duration\n\n    schedule.append({\n        \"action\": \"meet\",\n        \"location\": \"Fisherman's Wharf\",\n        \"person\": \"Rebecca\",\n        \"start_time\": current_time.strftime(\"%H:%M\"),\n        \"end_time\": actual_end.strftime(\"%H:%M\")\n    })\n\n    return {\"itinerary\": schedule}\n\n# Generate the schedule and output as JSON\noptimal_schedule = compute_schedule()\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_629"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Rebecca",
                        "start_time": "9:19",
                        "end_time": "10:49"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "James",
                        "start_time": "11:05",
                        "end_time": "12:35"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "12:44",
                        "end_time": "14:14"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Sarah",
                        "start_time": "14:38",
                        "end_time": "16:08"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Rebecca",
                        "start_time": "9:19",
                        "end_time": "10:49"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "James",
                        "start_time": "11:05",
                        "end_time": "12:35"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Sarah",
                        "start_time": "12:54",
                        "end_time": "14:24"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "14:49",
                        "end_time": "16:19"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Amanda",
                        "start_time": "18:30",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef travel_time(from_location, to_location):\n    times = {\n        (\"The Castro\", \"Bayview\"): 19,\n        (\"The Castro\", \"Pacific Heights\"): 16,\n        (\"The Castro\", \"Alamo Square\"): 8,\n        (\"The Castro\", \"Fisherman's Wharf\"): 24,\n        (\"The Castro\", \"Golden Gate Park\"): 11,\n        (\"Bayview\", \"The Castro\"): 20,\n        (\"Bayview\", \"Pacific Heights\"): 23,\n        (\"Bayview\", \"Alamo Square\"): 16,\n        (\"Bayview\", \"Fisherman's Wharf\"): 25,\n        (\"Bayview\", \"Golden Gate Park\"): 22,\n        (\"Pacific Heights\", \"The Castro\"): 16,\n        (\"Pacific Heights\", \"Bayview\"): 22,\n        (\"Pacific Heights\", \"Alamo Square\"): 10,\n        (\"Pacific Heights\", \"Fisherman's Wharf\"): 13,\n        (\"Pacific Heights\", \"Golden Gate Park\"): 15,\n        (\"Alamo Square\", \"The Castro\"): 8,\n        (\"Alamo Square\", \"Bayview\"): 16,\n        (\"Alamo Square\", \"Pacific Heights\"): 10,\n        (\"Alamo Square\", \"Fisherman's Wharf\"): 19,\n        (\"Alamo Square\", \"Golden Gate Park\"): 9,\n        (\"Fisherman's Wharf\", \"The Castro\"): 26,\n        (\"Fisherman's Wharf\", \"Bayview\"): 26,\n        (\"Fisherman's Wharf\", \"Pacific Heights\"): 12,\n        (\"Fisherman's Wharf\", \"Alamo Square\"): 20,\n        (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n        (\"Golden Gate Park\", \"The Castro\"): 13,\n        (\"Golden Gate Park\", \"Bayview\"): 23,\n        (\"Golden Gate Park\", \"Pacific Heights\"): 16,\n        (\"Golden Gate Park\", \"Alamo Square\"): 10,\n        (\"Golden Gate Park\", \"Fisherman's Wharf\"): 24,\n    }\n    \n    return times.get((from_location, to_location), 0)\n\ndef schedule_meetings():\n    now = datetime.strptime(\"9:00\", \"%H:%M\")\n    schedule = []\n    \n    # Define the time windows for each person with the travel time included\n    time_windows = {\n        \"Rebecca\": {\"location\": \"Bayview\", \"start\": now, \"end\": now + timedelta(minutes=165)},  # 9:00 to 12:45\n        \"Amanda\": {\"location\": \"Pacific Heights\", \"start\": datetime.strptime(\"18:30\", \"%H:%M\"), \n                   \"end\": datetime.strptime(\"21:45\", \"%H:%M\")},  # 6:30PM to 9:45PM\n        \"James\": {\"location\": \"Alamo Square\", \"start\": datetime.strptime(\"9:45\", \"%H:%M\"), \n                  \"end\": datetime.strptime(\"21:15\", \"%H:%M\")},  # 9:45AM to 9:15PM\n        \"Sarah\": {\"location\": \"Fisherman's Wharf\", \"start\": datetime.strptime(\"8:00\", \"%H:%M\"), \n                  \"end\": datetime.strptime(\"21:30\", \"%H:%M\")},  # 8:00AM to 9:30PM\n        \"Melissa\": {\"location\": \"Golden Gate Park\", \"start\": now, \n                    \"end\": datetime.strptime(\"18:45\", \"%H:%M\")},  # 9:00AM to 6:45PM\n    }\n    \n    meetings = {\n        \"Rebecca\": {\"duration\": 90},\n        \"Amanda\": {\"duration\": 90},\n        \"James\": {\"duration\": 90},\n        \"Sarah\": {\"duration\": 90},\n        \"Melissa\": {\"duration\": 90},\n    }\n    \n    def can_meet(person, start, end):\n        travel = travel_time(\"The Castro\", time_windows[person][\"location\"])\n        meeting_start = start + timedelta(minutes=travel)\n        meeting_end = meeting_start + timedelta(minutes=meetings[person][\"duration\"])\n        return (meeting_start >= time_windows[person][\"start\"] and \n                meeting_end <= time_windows[person][\"end\"])\n    \n    # Scheduling meetings\n    current_time = now\n    current_location = \"The Castro\"\n    \n    # Meeting Rebecca\n    if can_meet(\"Rebecca\", current_time, current_time):\n        travel = travel_time(current_location, \"Bayview\")\n        start_time = current_time + timedelta(minutes=travel)\n        current_time = start_time + timedelta(minutes=meetings[\"Rebecca\"][\"duration\"])\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Bayview\",\n            \"person\": \"Rebecca\",\n            \"start_time\": start_time.strftime(\"%H:%M\"),\n            \"end_time\": current_time.strftime(\"%H:%M\")\n        })\n        current_location = \"Bayview\"\n    \n    # Meeting James\n    if can_meet(\"James\", current_time, current_time):\n        travel = travel_time(current_location, \"Alamo Square\")\n        start_time = current_time + timedelta(minutes=travel)\n        current_time = start_time + timedelta(minutes=meetings[\"James\"][\"duration\"])\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Alamo Square\",\n            \"person\": \"James\",\n            \"start_time\": start_time.strftime(\"%H:%M\"),\n            \"end_time\": current_time.strftime(\"%H:%M\")\n        })\n        current_location = \"Alamo Square\"\n\n    # Meeting Melissa\n    if can_meet(\"Melissa\", current_time, current_time):\n        travel = travel_time(current_location, \"Golden Gate Park\")\n        start_time = current_time + timedelta(minutes=travel)\n        current_time = start_time + timedelta(minutes=meetings[\"Melissa\"][\"duration\"])\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Golden Gate Park\",\n            \"person\": \"Melissa\",\n            \"start_time\": start_time.strftime(\"%H:%M\"),\n            \"end_time\": current_time.strftime(\"%H:%M\")\n        })\n        current_location = \"Golden Gate Park\"\n\n    # Meeting Amanda\n    if can_meet(\"Amanda\", current_time, current_time):\n        travel = travel_time(current_location, \"Pacific Heights\")\n        start_time = current_time + timedelta(minutes=travel)\n        current_time = start_time + timedelta(minutes=meetings[\"Amanda\"][\"duration\"])\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Pacific Heights\",\n            \"person\": \"Amanda\",\n            \"start_time\": start_time.strftime(\"%H:%M\"),\n            \"end_time\": current_time.strftime(\"%H:%M\")\n        })\n        current_location = \"Pacific Heights\"\n\n    # Meeting Sarah\n    if can_meet(\"Sarah\", current_time, current_time):\n        travel = travel_time(current_location, \"Fisherman's Wharf\")\n        start_time = current_time + timedelta(minutes=travel)\n        current_time = start_time + timedelta(minutes=meetings[\"Sarah\"][\"duration\"])\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Fisherman's Wharf\",\n            \"person\": \"Sarah\",\n            \"start_time\": start_time.strftime(\"%H:%M\"),\n            \"end_time\": current_time.strftime(\"%H:%M\")\n        })\n    \n    return json.dumps({\"itinerary\": schedule}, indent=2)\n\nif __name__ == \"__main__\":\n    print(\"SOLUTION:\")\n    print(schedule_meetings())\n```",
            "count": "meeting_planning_example_468"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "William",
                        "start_time": "10:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sandra",
                        "start_time": "11:40",
                        "end_time": "11:55"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Elizabeth",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "14:09",
                        "end_time": "15:09"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Anthony",
                        "start_time": "15:32",
                        "end_time": "16:47"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Stephanie",
                        "start_time": "16:54",
                        "end_time": "18:09"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Barbara",
                        "start_time": "19:15",
                        "end_time": "20:30"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Meeting locations and travel times (in minutes)\ntravel_times = {\n    (\"Marina District\", \"Richmond District\"): 11,\n    (\"Marina District\", \"Union Square\"): 16,\n    (\"Marina District\", \"Nob Hill\"): 12,\n    (\"Marina District\", \"Fisherman's Wharf\"): 10,\n    (\"Marina District\", \"Golden Gate Park\"): 18,\n    (\"Marina District\", \"Embarcadero\"): 14,\n    (\"Marina District\", \"Financial District\"): 17,\n    (\"Marina District\", \"North Beach\"): 11,\n    (\"Marina District\", \"Presidio\"): 10,\n    (\"Richmond District\", \"Marina District\"): 9,\n    (\"Richmond District\", \"Union Square\"): 21,\n    (\"Richmond District\", \"Nob Hill\"): 17,\n    (\"Richmond District\", \"Fisherman's Wharf\"): 18,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Richmond District\", \"Embarcadero\"): 19,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"North Beach\"): 17,\n    (\"Richmond District\", \"Presidio\"): 7,\n    (\"Union Square\", \"Marina District\"): 18,\n    (\"Union Square\", \"Richmond District\"): 20,\n    (\"Union Square\", \"Nob Hill\"): 9,\n    (\"Union Square\", \"Fisherman's Wharf\"): 15,\n    (\"Union Square\", \"Golden Gate Park\"): 22,\n    (\"Union Square\", \"Embarcadero\"): 11,\n    (\"Union Square\", \"Financial District\"): 9,\n    (\"Union Square\", \"North Beach\"): 10,\n    (\"Union Square\", \"Presidio\"): 24,\n    (\"Nob Hill\", \"Marina District\"): 11,\n    (\"Nob Hill\", \"Richmond District\"): 14,\n    (\"Nob Hill\", \"Union Square\"): 7,\n    (\"Nob Hill\", \"Fisherman's Wharf\"): 10,\n    (\"Nob Hill\", \"Golden Gate Park\"): 17,\n    (\"Nob Hill\", \"Embarcadero\"): 9,\n    (\"Nob Hill\", \"Financial District\"): 9,\n    (\"Nob Hill\", \"North Beach\"): 8,\n    (\"Nob Hill\", \"Presidio\"): 17,\n    (\"Fisherman's Wharf\", \"Marina District\"): 9,\n    (\"Fisherman's Wharf\", \"Richmond District\"): 18,\n    (\"Fisherman's Wharf\", \"Union Square\"): 13,\n    (\"Fisherman's Wharf\", \"Nob Hill\"): 11,\n    (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n    (\"Fisherman's Wharf\", \"Embarcadero\"): 8,\n    (\"Fisherman's Wharf\", \"Financial District\"): 11,\n    (\"Fisherman's Wharf\", \"North Beach\"): 6,\n    (\"Fisherman's Wharf\", \"Presidio\"): 17,\n    (\"Golden Gate Park\", \"Marina District\"): 16,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Golden Gate Park\", \"Union Square\"): 22,\n    (\"Golden Gate Park\", \"Nob Hill\"): 20,\n    (\"Golden Gate Park\", \"Fisherman's Wharf\"): 24,\n    (\"Golden Gate Park\", \"Embarcadero\"): 25,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Golden Gate Park\", \"North Beach\"): 23,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Embarcadero\", \"Marina District\"): 12,\n    (\"Embarcadero\", \"Richmond District\"): 21,\n    (\"Embarcadero\", \"Union Square\"): 10,\n    (\"Embarcadero\", \"Nob Hill\"): 10,\n    (\"Embarcadero\", \"Fisherman's Wharf\"): 6,\n    (\"Embarcadero\", \"Golden Gate Park\"): 25,\n    (\"Embarcadero\", \"Financial District\"): 5,\n    (\"Embarcadero\", \"North Beach\"): 5,\n    (\"Embarcadero\", \"Presidio\"): 20,\n    (\"Financial District\", \"Marina District\"): 15,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Financial District\", \"Union Square\"): 9,\n    (\"Financial District\", \"Nob Hill\"): 8,\n    (\"Financial District\", \"Fisherman's Wharf\"): 10,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"Financial District\", \"Embarcadero\"): 4,\n    (\"Financial District\", \"North Beach\"): 7,\n    (\"Financial District\", \"Presidio\"): 22,\n    (\"North Beach\", \"Marina District\"): 9,\n    (\"North Beach\", \"Richmond District\"): 18,\n    (\"North Beach\", \"Union Square\"): 7,\n    (\"North Beach\", \"Nob Hill\"): 7,\n    (\"North Beach\", \"Fisherman's Wharf\"): 5,\n    (\"North Beach\", \"Golden Gate Park\"): 22,\n    (\"North Beach\", \"Embarcadero\"): 6,\n    (\"North Beach\", \"Financial District\"): 8,\n    (\"North Beach\", \"Presidio\"): 17,\n    (\"Presidio\", \"Marina District\"): 11,\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Presidio\", \"Nob Hill\"): 18,\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Embarcadero\"): 20,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Presidio\", \"North Beach\"): 18,\n}\n\n# Meeting constraints\nconstraints = {\n    \"Stephanie\": {\"location\": \"Richmond District\", \"start\": \"16:15\", \"end\": \"21:30\", \"duration\": 75},\n    \"William\": {\"location\": \"Union Square\", \"start\": \"10:45\", \"end\": \"17:30\", \"duration\": 45},\n    \"Elizabeth\": {\"location\": \"Nob Hill\", \"start\": \"12:15\", \"end\": \"15:00\", \"duration\": 105},\n    \"Joseph\": {\"location\": \"Fisherman's Wharf\", \"start\": \"12:45\", \"end\": \"14:00\", \"duration\": 75},\n    \"Anthony\": {\"location\": \"Golden Gate Park\", \"start\": \"13:00\", \"end\": \"20:30\", \"duration\": 75},\n    \"Barbara\": {\"location\": \"Embarcadero\", \"start\": \"19:15\", \"end\": \"20:30\", \"duration\": 75},\n    \"Carol\": {\"location\": \"Financial District\", \"start\": \"11:45\", \"end\": \"16:15\", \"duration\": 60},\n    \"Sandra\": {\"location\": \"North Beach\", \"start\": \"10:00\", \"end\": \"12:30\", \"duration\": 15},\n    \"Kenneth\": {\"location\": \"Presidio\", \"start\": \"21:15\", \"end\": \"22:15\", \"duration\": 45},\n}\n\n# Convert time strings to datetime objects\ndef time_to_dt(t):\n    return datetime.strptime(t, '%H:%M')\n\n# Function to calculate meeting schedules\ndef calculate_meetings(travel_times, constraints):\n    itinerary = []\n    current_time = time_to_dt(\"9:00\")\n\n    for name, info in constraints.items():\n        location = info['location']\n        start_time = time_to_dt(info['start'])\n        end_time = time_to_dt(info['end'])\n        duration = info['duration']\n\n        # Check if we can schedule the meeting\n        travel_time = travel_times.get((current_time.strftime('%I:%M %p'), location), None)\n        if travel_time is not None:\n            arrival = current_time + timedelta(minutes=travel_time)\n            # Adjust arrival time within the availability of the person\n            if arrival < start_time:\n                arrival = start_time\n            departure = arrival + timedelta(minutes=duration)\n\n            if departure <= end_time:\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": location,\n                    \"person\": name,\n                    \"start_time\": arrival.strftime(\"%H:%M\"),\n                    \"end_time\": departure.strftime(\"%H:%M\"),\n                })\n                # Update current time after meeting\n                current_time = departure + timedelta(minutes=travel_times.get((location, 'Marina District'), 0))\n\n    return {\"itinerary\": itinerary}\n\n# Calculate meeting schedules\noptimal_schedule = calculate_meetings(travel_times, constraints)\n\n# Output the result in JSON format\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_828"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "9:10",
                        "end_time": "9:25"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Brian",
                        "start_time": "9:47",
                        "end_time": "10:32"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joseph",
                        "start_time": "15:41",
                        "end_time": "16:56"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Melissa",
                        "start_time": "20:32",
                        "end_time": "21:02"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "9:10",
                        "end_time": "9:25"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Brian",
                        "start_time": "14:10",
                        "end_time": "14:55"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joseph",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Betty",
                        "start_time": "19:00",
                        "end_time": "20:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Melissa",
                        "start_time": "20:36",
                        "end_time": "21:06"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "21:14",
                        "end_time": "21:29"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    'Union Square': {\n        'The Castro': 17,\n        'North Beach': 10,\n        'Embarcadero': 11,\n        'Alamo Square': 15,\n        'Nob Hill': 9,\n        'Presidio': 24,\n        'Fisherman\\'s Wharf': 15,\n        'Mission District': 14,\n        'Haight-Ashbury': 18,\n    },\n    'The Castro': {\n        'Union Square': 19,\n        'North Beach': 20,\n        'Embarcadero': 22,\n        'Alamo Square': 8,\n        'Nob Hill': 16,\n        'Presidio': 20,\n        'Fisherman\\'s Wharf': 24,\n        'Mission District': 7,\n        'Haight-Ashbury': 6,\n    },\n    'North Beach': {\n        'Union Square': 7,\n        'The Castro': 23,\n        'Embarcadero': 6,\n        'Alamo Square': 16,\n        'Nob Hill': 7,\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 5,\n        'Mission District': 18,\n        'Haight-Ashbury': 18,\n    },\n    'Embarcadero': {\n        'Union Square': 10,\n        'The Castro': 25,\n        'North Beach': 5,\n        'Alamo Square': 19,\n        'Nob Hill': 10,\n        'Presidio': 20,\n        'Fisherman\\'s Wharf': 6,\n        'Mission District': 20,\n        'Haight-Ashbury': 21,\n    },\n    'Alamo Square': {\n        'Union Square': 14,\n        'The Castro': 8,\n        'North Beach': 15,\n        'Embarcadero': 16,\n        'Nob Hill': 11,\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 19,\n        'Mission District': 10,\n        'Haight-Ashbury': 5,\n    },\n    'Nob Hill': {\n        'Union Square': 7,\n        'The Castro': 17,\n        'North Beach': 8,\n        'Embarcadero': 9,\n        'Alamo Square': 11,\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 10,\n        'Mission District': 13,\n        'Haight-Ashbury': 13,\n    },\n    'Presidio': {\n        'Union Square': 22,\n        'The Castro': 21,\n        'North Beach': 18,\n        'Embarcadero': 20,\n        'Alamo Square': 19,\n        'Nob Hill': 18,\n        'Fisherman\\'s Wharf': 19,\n        'Mission District': 26,\n        'Haight-Ashbury': 15,\n    },\n    'Fisherman\\'s Wharf': {\n        'Union Square': 13,\n        'The Castro': 27,\n        'North Beach': 6,\n        'Embarcadero': 8,\n        'Alamo Square': 21,\n        'Nob Hill': 11,\n        'Presidio': 17,\n        'Mission District': 22,\n        'Haight-Ashbury': 22,\n    },\n    'Mission District': {\n        'Union Square': 15,\n        'The Castro': 7,\n        'North Beach': 17,\n        'Embarcadero': 19,\n        'Alamo Square': 11,\n        'Nob Hill': 12,\n        'Presidio': 25,\n        'Fisherman\\'s Wharf': 22,\n        'Haight-Ashbury': 12,\n    },\n    'Haight-Ashbury': {\n        'Union Square': 19,\n        'The Castro': 6,\n        'North Beach': 19,\n        'Embarcadero': 20,\n        'Alamo Square': 5,\n        'Nob Hill': 15,\n        'Presidio': 15,\n        'Fisherman\\'s Wharf': 23,\n        'Mission District': 11,\n    },\n}\n\n# Meeting constraints\nmeetings = {\n    'Melissa': {'location': 'The Castro', 'start_time': '20:15', 'end_time': '21:15', 'duration': 30},\n    'Kimberly': {'location': 'North Beach', 'start_time': '07:00', 'end_time': '10:30', 'duration': 15},\n    'Joseph': {'location': 'Embarcadero', 'start_time': '15:30', 'end_time': '19:30', 'duration': 75},\n    'Barbara': {'location': 'Alamo Square', 'start_time': '20:45', 'end_time': '21:45', 'duration': 15},\n    'Kenneth': {'location': 'Nob Hill', 'start_time': '12:15', 'end_time': '17:15', 'duration': 105},\n    'Joshua': {'location': 'Presidio', 'start_time': '16:30', 'end_time': '18:15', 'duration': 105},\n    'Brian': {'location': 'Fisherman\\'s Wharf', 'start_time': '09:30', 'end_time': '15:30', 'duration': 45},\n    'Steven': {'location': 'Mission District', 'start_time': '19:00', 'end_time': '20:30', 'duration': 90},\n    'Betty': {'location': 'Haight-Ashbury', 'start_time': '19:00', 'end_time': '20:30', 'duration': 90},\n}\n\ndef time_in_minutes(time_str):\n    \"\"\" Convert HH:MM time format to minutes since midnight. \"\"\"\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    \"\"\" Convert minutes since midnight back to HH:MM time format. \"\"\"\n    hours = minutes // 60\n    minutes = minutes % 60\n    return f\"{hours}:{minutes:02}\"\n\ndef schedule_meetings():\n    start_time = time_in_minutes('9:00')\n    itinerary = []\n\n    # Meeting order based on constraints\n    meetings_order = [\n        ('Kimberly', 'North Beach'),\n        ('Brian', 'Fisherman\\'s Wharf'),\n        ('Joseph', 'Embarcadero'),\n        ('Kenneth', 'Nob Hill'),\n        ('Joshua', 'Presidio'),\n        ('Melissa', 'The Castro'),\n        ('Barbara', 'Alamo Square'),\n        ('Steven', 'Mission District'),\n        ('Betty', 'Haight-Ashbury')\n    ]\n\n    current_time = start_time\n\n    for person, location in meetings_order:\n        meeting_info = meetings[person]\n        meeting_start = time_in_minutes(meeting_info['start_time'])\n        meeting_end = time_in_minutes(meeting_info['end_time'])\n\n        if current_time < meeting_start:\n            current_time = meeting_start\n\n        # Calculate travel time to the location\n        travel_time = travel_times['Union Square'].get(location, 0)\n        current_time += travel_time\n\n        # Check if we can fit this meeting\n        if current_time + meeting_info['duration'] <= meeting_end:\n            # Schedule the meeting\n            meeting_start_time = current_time\n            meeting_end_time = current_time + meeting_info['duration']\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": person,\n                \"start_time\": minutes_to_time(meeting_start_time),\n                \"end_time\": minutes_to_time(meeting_end_time),\n            })\n            current_time = meeting_end_time  # Update the current time to after the meeting\n\n            # Return to Union Square after meeting\n            travel_back_time = travel_times[location]['Union Square']\n            current_time += travel_back_time\n\n    return {'itinerary': itinerary}\n\n# Generate meeting schedule\noptimal_schedule = schedule_meetings()\n\n# Output the result in JSON format\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_800"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Jessica",
                        "start_time": "9:13",
                        "end_time": "11:13"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Jason",
                        "start_time": "15:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Mark",
                        "start_time": "17:25",
                        "end_time": "18:55"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "21:45",
                        "end_time": "22:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Amanda",
                        "start_time": "20:00",
                        "end_time": "21:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Jessica",
                        "start_time": "9:13",
                        "end_time": "11:13"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "John",
                        "start_time": "11:18",
                        "end_time": "11:33"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Nancy",
                        "start_time": "11:40",
                        "end_time": "12:25"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Rebecca",
                        "start_time": "12:49",
                        "end_time": "14:04"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Jason",
                        "start_time": "15:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sarah",
                        "start_time": "17:30",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Mark",
                        "start_time": "18:28",
                        "end_time": "19:58"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "20:45",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances (in minutes) between locations\ntravel_times = {\n    (\"Union Square\", \"Mission District\"): 14,\n    (\"Union Square\", \"Fisherman's Wharf\"): 15,\n    (\"Union Square\", \"Russian Hill\"): 13,\n    (\"Union Square\", \"Marina District\"): 18,\n    (\"Union Square\", \"North Beach\"): 10,\n    (\"Union Square\", \"Chinatown\"): 7,\n    (\"Union Square\", \"Pacific Heights\"): 15,\n    (\"Union Square\", \"The Castro\"): 17,\n    (\"Union Square\", \"Nob Hill\"): 9,\n    (\"Union Square\", \"Sunset District\"): 27,\n    (\"Mission District\", \"Union Square\"): 15,\n    (\"Mission District\", \"Fisherman's Wharf\"): 22,\n    (\"Mission District\", \"Russian Hill\"): 15,\n    (\"Mission District\", \"Marina District\"): 19,\n    (\"Mission District\", \"North Beach\"): 17,\n    (\"Mission District\", \"Chinatown\"): 16,\n    (\"Mission District\", \"Pacific Heights\"): 16,\n    (\"Mission District\", \"The Castro\"): 7,\n    (\"Mission District\", \"Nob Hill\"): 12,\n    (\"Mission District\", \"Sunset District\"): 24,\n    (\"Fisherman's Wharf\", \"Union Square\"): 13,\n    (\"Fisherman's Wharf\", \"Mission District\"): 22,\n    (\"Fisherman's Wharf\", \"Russian Hill\"): 7,\n    (\"Fisherman's Wharf\", \"Marina District\"): 9,\n    (\"Fisherman's Wharf\", \"North Beach\"): 6,\n    (\"Fisherman's Wharf\", \"Chinatown\"): 12,\n    (\"Fisherman's Wharf\", \"Pacific Heights\"): 12,\n    (\"Fisherman's Wharf\", \"The Castro\"): 27,\n    (\"Fisherman's Wharf\", \"Nob Hill\"): 11,\n    (\"Fisherman's Wharf\", \"Sunset District\"): 27,\n    (\"Russian Hill\", \"Union Square\"): 10,\n    (\"Russian Hill\", \"Mission District\"): 16,\n    (\"Russian Hill\", \"Fisherman's Wharf\"): 7,\n    (\"Russian Hill\", \"Marina District\"): 7,\n    (\"Russian Hill\", \"North Beach\"): 5,\n    (\"Russian Hill\", \"Chinatown\"): 9,\n    (\"Russian Hill\", \"Pacific Heights\"): 7,\n    (\"Russian Hill\", \"The Castro\"): 21,\n    (\"Russian Hill\", \"Nob Hill\"): 5,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"Marina District\", \"Union Square\"): 16,\n    (\"Marina District\", \"Mission District\"): 20,\n    (\"Marina District\", \"Fisherman's Wharf\"): 10,\n    (\"Marina District\", \"Russian Hill\"): 8,\n    (\"Marina District\", \"North Beach\"): 11,\n    (\"Marina District\", \"Chinatown\"): 15,\n    (\"Marina District\", \"Pacific Heights\"): 7,\n    (\"Marina District\", \"The Castro\"): 22,\n    (\"Marina District\", \"Nob Hill\"): 12,\n    (\"Marina District\", \"Sunset District\"): 19,\n    (\"North Beach\", \"Union Square\"): 7,\n    (\"North Beach\", \"Mission District\"): 18,\n    (\"North Beach\", \"Fisherman's Wharf\"): 5,\n    (\"North Beach\", \"Russian Hill\"): 4,\n    (\"North Beach\", \"Marina District\"): 9,\n    (\"North Beach\", \"Chinatown\"): 6,\n    (\"North Beach\", \"Pacific Heights\"): 8,\n    (\"North Beach\", \"The Castro\"): 23,\n    (\"North Beach\", \"Nob Hill\"): 7,\n    (\"North Beach\", \"Sunset District\"): 27,\n    (\"Chinatown\", \"Union Square\"): 7,\n    (\"Chinatown\", \"Mission District\"): 17,\n    (\"Chinatown\", \"Fisherman's Wharf\"): 8,\n    (\"Chinatown\", \"Russian Hill\"): 7,\n    (\"Chinatown\", \"Marina District\"): 12,\n    (\"Chinatown\", \"North Beach\"): 3,\n    (\"Chinatown\", \"Pacific Heights\"): 10,\n    (\"Chinatown\", \"The Castro\"): 22,\n    (\"Chinatown\", \"Nob Hill\"): 9,\n    (\"Chinatown\", \"Sunset District\"): 29,\n    (\"Pacific Heights\", \"Union Square\"): 12,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"Pacific Heights\", \"Fisherman's Wharf\"): 13,\n    (\"Pacific Heights\", \"Russian Hill\"): 7,\n    (\"Pacific Heights\", \"Marina District\"): 6,\n    (\"Pacific Heights\", \"North Beach\"): 9,\n    (\"Pacific Heights\", \"Chinatown\"): 11,\n    (\"Pacific Heights\", \"The Castro\"): 16,\n    (\"Pacific Heights\", \"Nob Hill\"): 8,\n    (\"Pacific Heights\", \"Sunset District\"): 21,\n    (\"The Castro\", \"Union Square\"): 19,\n    (\"The Castro\", \"Mission District\"): 7,\n    (\"The Castro\", \"Fisherman's Wharf\"): 24,\n    (\"The Castro\", \"Russian Hill\"): 18,\n    (\"The Castro\", \"Marina District\"): 21,\n    (\"The Castro\", \"North Beach\"): 20,\n    (\"The Castro\", \"Chinatown\"): 22,\n    (\"The Castro\", \"Pacific Heights\"): 16,\n    (\"The Castro\", \"Nob Hill\"): 16,\n    (\"The Castro\", \"Sunset District\"): 17,\n    (\"Nob Hill\", \"Union Square\"): 7,\n    (\"Nob Hill\", \"Mission District\"): 13,\n    (\"Nob Hill\", \"Fisherman's Wharf\"): 10,\n    (\"Nob Hill\", \"Russian Hill\"): 5,\n    (\"Nob Hill\", \"Marina District\"): 11,\n    (\"Nob Hill\", \"North Beach\"): 8,\n    (\"Nob Hill\", \"Chinatown\"): 6,\n    (\"Nob Hill\", \"Pacific Heights\"): 8,\n    (\"Nob Hill\", \"The Castro\"): 17,\n    (\"Nob Hill\", \"Sunset District\"): 24,\n    (\"Sunset District\", \"Union Square\"): 30,\n    (\"Sunset District\", \"Mission District\"): 25,\n    (\"Sunset District\", \"Fisherman's Wharf\"): 29,\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"Marina District\"): 21,\n    (\"Sunset District\", \"North Beach\"): 28,\n    (\"Sunset District\", \"Chinatown\"): 30,\n    (\"Sunset District\", \"Pacific Heights\"): 21,\n    (\"Sunset District\", \"The Castro\"): 17,\n    (\"Sunset District\", \"Nob Hill\"): 27,\n}\n\n# Meeting constraints for each person\nmeetings = [\n    {\"name\": \"Kevin\", \"location\": \"Mission District\", \"start\": \"21:45\", \"end\": \"22:45\", \"duration\": 60},\n    {\"name\": \"Mark\", \"location\": \"Fisherman's Wharf\", \"start\": \"17:15\", \"end\": \"20:00\", \"duration\": 90},\n    {\"name\": \"Jessica\", \"location\": \"Russian Hill\", \"start\": \"09:00\", \"end\": \"15:00\", \"duration\": 120},\n    {\"name\": \"Jason\", \"location\": \"Marina District\", \"start\": \"15:15\", \"end\": \"21:45\", \"duration\": 120},\n    {\"name\": \"John\", \"location\": \"North Beach\", \"start\": \"09:45\", \"end\": \"18:00\", \"duration\": 15},\n    {\"name\": \"Karen\", \"location\": \"Chinatown\", \"start\": \"16:45\", \"end\": \"19:00\", \"duration\": 75},\n    {\"name\": \"Sarah\", \"location\": \"Pacific Heights\", \"start\": \"17:30\", \"end\": \"18:15\", \"duration\": 45},\n    {\"name\": \"Amanda\", \"location\": \"The Castro\", \"start\": \"20:00\", \"end\": \"21:15\", \"duration\": 60},\n    {\"name\": \"Nancy\", \"location\": \"Nob Hill\", \"start\": \"09:45\", \"end\": \"13:00\", \"duration\": 45},\n    {\"name\": \"Rebecca\", \"location\": \"Sunset District\", \"start\": \"08:45\", \"end\": \"15:00\", \"duration\": 75},\n]\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%H:%M\")\n\ndef find_optimal_meeting_schedule():\n    itinerary = []\n    current_time = parse_time(\"09:00\")\n    \n    # Meeting with Jessica at Russian Hill\n    if current_time < parse_time(\"15:00\"):\n        j_start = max(current_time + timedelta(minutes=travel_times[(\"Union Square\", \"Russian Hill\")]), parse_time(\"09:00\"))\n        j_end = j_start + timedelta(minutes=120) \n        itinerary.append({\"action\": \"meet\", \"location\": \"Russian Hill\", \"person\": \"Jessica\", \"start_time\": format_time(j_start), \"end_time\": format_time(j_end)})\n        current_time = j_end + timedelta(minutes=travel_times[(\"Russian Hill\", \"Marina District\")]) # travel to Marina District\n\n    # Meeting with Jason at Marina District\n    if current_time < parse_time(\"21:45\"):\n        j_start = max(current_time, parse_time(\"15:15\"))\n        j_end = j_start + timedelta(minutes=120)\n        itinerary.append({\"action\": \"meet\", \"location\": \"Marina District\", \"person\": \"Jason\", \"start_time\": format_time(j_start), \"end_time\": format_time(j_end)})\n        current_time = j_end + timedelta(minutes=travel_times[(\"Marina District\", \"Fisherman's Wharf\")]) # travel to Fisherman's Wharf\n\n    # Meeting with Mark at Fisherman's Wharf\n    if current_time < parse_time(\"20:00\"):\n        m_start = max(current_time, parse_time(\"17:15\"))\n        m_end = m_start + timedelta(minutes=90)\n        itinerary.append({\"action\": \"meet\", \"location\": \"Fisherman's Wharf\", \"person\": \"Mark\", \"start_time\": format_time(m_start), \"end_time\": format_time(m_end)})\n        current_time = m_end + timedelta(minutes=travel_times[(\"Fisherman's Wharf\", \"Mission District\")]) # travel to Mission District\n\n    # Meeting with Kevin at Mission District\n    if current_time < parse_time(\"22:45\"):\n        k_start = max(current_time, parse_time(\"21:45\"))\n        k_end = k_start + timedelta(minutes=60)\n        itinerary.append({\"action\": \"meet\", \"location\": \"Mission District\", \"person\": \"Kevin\", \"start_time\": format_time(k_start), \"end_time\": format_time(k_end)})\n        \n    # Meeting with John at North Beach\n    if current_time < parse_time(\"18:00\"):\n        j_start = max(current_time, parse_time(\"09:45\"))\n        j_end = j_start + timedelta(minutes=15)\n        itinerary.append({\"action\": \"meet\", \"location\": \"North Beach\", \"person\": \"John\", \"start_time\": format_time(j_start), \"end_time\": format_time(j_end)})\n        current_time = j_end + timedelta(minutes=travel_times[(\"North Beach\", \"Chinatown\")]) # travel to Chinatown\n\n    # Meeting with Karen at Chinatown\n    if current_time < parse_time(\"19:00\"):\n        k_start = max(current_time, parse_time(\"16:45\"))\n        k_end = k_start + timedelta(minutes=75)\n        itinerary.append({\"action\": \"meet\", \"location\": \"Chinatown\", \"person\": \"Karen\", \"start_time\": format_time(k_start), \"end_time\": format_time(k_end)})\n        current_time = k_end + timedelta(minutes=travel_times[(\"Chinatown\", \"Pacifc Heights\")]) # travel to Pacific Heights\n\n    # Meeting with Sarah at Pacific Heights\n    if current_time < parse_time(\"18:15\"):\n        s_start = max(current_time, parse_time(\"17:30\"))\n        s_end = s_start + timedelta(minutes=45)\n        itinerary.append({\"action\": \"meet\", \"location\": \"Pacific Heights\", \"person\": \"Sarah\", \"start_time\": format_time(s_start), \"end_time\": format_time(s_end)})\n        current_time = s_end + timedelta(minutes=travel_times[(\"Pacific Heights\", \"The Castro\")]) # travel to The Castro\n\n    # Meeting with Amanda at The Castro\n    if current_time < parse_time(\"21:15\"):\n        a_start = max(current_time, parse_time(\"20:00\"))\n        a_end = a_start + timedelta(minutes=60)\n        itinerary.append({\"action\": \"meet\", \"location\": \"The Castro\", \"person\": \"Amanda\", \"start_time\": format_time(a_start), \"end_time\": format_time(a_end)})\n\n    # Meeting with Nancy at Nob Hill\n    if current_time < parse_time(\"13:00\"):\n        n_start = max(current_time, parse_time(\"09:45\"))\n        n_end = n_start + timedelta(minutes=45)\n        itinerary.append({\"action\": \"meet\", \"location\": \"Nob Hill\", \"person\": \"Nancy\", \"start_time\": format_time(n_start), \"end_time\": format_time(n_end)})\n        current_time = n_end + timedelta(minutes=travel_times[(\"Nob Hill\", \"Union Square\")]) # travel to Union Square\n\n    # Meeting with Rebecca at Sunset District\n    if current_time < parse_time(\"15:00\"):\n        r_start = max(current_time, parse_time(\"08:45\"))\n        r_end = r_start + timedelta(minutes=75)\n        itinerary.append({\"action\": \"meet\", \"location\": \"Sunset District\", \"person\": \"Rebecca\", \"start_time\": format_time(r_start), \"end_time\": format_time(r_end)})\n\n    return {\"itinerary\": itinerary}\n\noptimal_schedule = find_optimal_meeting_schedule()\n\n# Outputting the result as JSON\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_940"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kevin",
                        "start_time": "9:17",
                        "end_time": "10:32"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Kimberly",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joseph",
                        "start_time": "18:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Thomas",
                        "start_time": "19:38",
                        "end_time": "20:23"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kevin",
                        "start_time": "9:17",
                        "end_time": "10:32"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Kimberly",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Joseph",
                        "start_time": "18:30",
                        "end_time": "19:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Thomas",
                        "start_time": "19:38",
                        "end_time": "20:23"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define the travel distances (in minutes)\ntravel_times = {\n    (\"Sunset District\", \"Alamo Square\"): 17,\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"Presidio\"): 16,\n    (\"Sunset District\", \"Financial District\"): 30,\n    (\"Alamo Square\", \"Sunset District\"): 16,\n    (\"Alamo Square\", \"Russian Hill\"): 13,\n    (\"Alamo Square\", \"Presidio\"): 18,\n    (\"Alamo Square\", \"Financial District\"): 17,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"Russian Hill\", \"Alamo Square\"): 15,\n    (\"Russian Hill\", \"Presidio\"): 14,\n    (\"Russian Hill\", \"Financial District\"): 11,\n    (\"Presidio\", \"Sunset District\"): 15,\n    (\"Presidio\", \"Alamo Square\"): 18,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Financial District\", \"Sunset District\"): 31,\n    (\"Financial District\", \"Alamo Square\"): 17,\n    (\"Financial District\", \"Russian Hill\"): 10,\n    (\"Financial District\", \"Presidio\"): 22,\n}\n\n# Define meeting constraints\nmeetings = {\n    \"Kevin\": {\n        \"location\": \"Alamo Square\",\n        \"start\": \"09:00\",\n        \"end\": \"21:30\",\n        \"min_duration\": 75\n    },\n    \"Kimberly\": {\n        \"location\": \"Russian Hill\",\n        \"start\": \"08:45\",\n        \"end\": \"12:30\",\n        \"min_duration\": 30\n    },\n    \"Joseph\": {\n        \"location\": \"Presidio\",\n        \"start\": \"18:30\",\n        \"end\": \"19:15\",\n        \"min_duration\": 45\n    },\n    \"Thomas\": {\n        \"location\": \"Financial District\",\n        \"start\": \"19:00\",\n        \"end\": \"21:45\",\n        \"min_duration\": 45\n    },\n}\n\n# Convert time strings to datetime\ndef str_to_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Convert datetime to required time format\ndef time_to_str(dt):\n    return dt.strftime(\"%H:%M\")\n\n# Calculate meeting schedules\ndef schedule_meetings():\n    start_time = str_to_time(\"09:00\")\n    itinerary = []\n    \n    # Meeting Kevin\n    kevin_start = start_time + timedelta(minutes=travel_times[(\"Sunset District\", \"Alamo Square\")])\n    kevin_end = kevin_start + timedelta(minutes=meetings[\"Kevin\"][\"min_duration\"])\n\n    if kevin_end.time() <= str_to_time(meetings[\"Kevin\"][\"end\"]).time():\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Alamo Square\",\n            \"person\": \"Kevin\",\n            \"start_time\": time_to_str(kevin_start),\n            \"end_time\": time_to_str(kevin_end),\n        })\n\n    # Meeting Kimberly\n    sunset_to_russian_hill = travel_times[(\"Sunset District\", \"Russian Hill\")]\n    kimberly_start = max(str_to_time(meetings[\"Kimberly\"][\"start\"]),\n                          kevin_end + timedelta(minutes=travel_times[(\"Alamo Square\", \"Russian Hill\")]))\n    kimberly_end = kimberly_start + timedelta(minutes=meetings[\"Kimberly\"][\"min_duration\"])\n\n    if kimberly_end.time() <= str_to_time(meetings[\"Kimberly\"][\"end\"]).time():\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Russian Hill\",\n            \"person\": \"Kimberly\",\n            \"start_time\": time_to_str(kimberly_start),\n            \"end_time\": time_to_str(kimberly_end),\n        })\n\n    # Meeting Joseph\n    time_after_russian_hill = kimberly_end + timedelta(minutes=travel_times[(\"Russian Hill\", \"Presidio\")])\n    joseph_start = max(time_after_russian_hill, str_to_time(meetings[\"Joseph\"][\"start\"]))\n    joseph_end = joseph_start + timedelta(minutes=meetings[\"Joseph\"][\"min_duration\"])\n\n    if joseph_end.time() <= str_to_time(meetings[\"Joseph\"][\"end\"]).time():\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"person\": \"Joseph\",\n            \"start_time\": time_to_str(joseph_start),\n            \"end_time\": time_to_str(joseph_end),\n        })\n\n    # Meeting Thomas\n    time_after_joseph = joseph_end + timedelta(minutes=travel_times[(\"Presidio\", \"Financial District\")])\n    thomas_start = max(time_after_joseph, str_to_time(meetings[\"Thomas\"][\"start\"]))\n    thomas_end = thomas_start + timedelta(minutes=meetings[\"Thomas\"][\"min_duration\"])\n\n    if thomas_end.time() <= str_to_time(meetings[\"Thomas\"][\"end\"]).time():\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Financial District\",\n            \"person\": \"Thomas\",\n            \"start_time\": time_to_str(thomas_start),\n            \"end_time\": time_to_str(thomas_end),\n        })\n\n    return {\"itinerary\": itinerary}\n\n# Execute the scheduling\noptimal_schedule = schedule_meetings()\n\n# Output the result as JSON\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_391"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "13:00",
                        "end_time": "15:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "13:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Karen",
                        "start_time": "18:45",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    return dt.strftime(\"%H:%M\")\n\ndef calculate_meeting_schedule():\n    # Define travel times in minutes\n    travel_times = {\n        (\"North Beach\", \"Pacific Heights\"): 8,\n        (\"North Beach\", \"Embarcadero\"): 6,\n        (\"Pacific Heights\", \"North Beach\"): 9,\n        (\"Pacific Heights\", \"Embarcadero\"): 10,\n        (\"Embarcadero\", \"North Beach\"): 5,\n        (\"Embarcadero\", \"Pacific Heights\"): 11,\n    }\n\n    # Define the meeting constraints\n    arrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    karen_start = datetime.strptime(\"18:45\", \"%H:%M\")\n    karen_end = datetime.strptime(\"20:15\", \"%H:%M\")\n    mark_start = datetime.strptime(\"13:00\", \"%H:%M\")\n    mark_end = datetime.strptime(\"17:45\", \"%H:%M\")\n    \n    # Minimum meeting durations\n    karen_meeting_duration = timedelta(minutes=90)\n    mark_meeting_duration = timedelta(minutes=120)\n\n    # Calculate meeting times\n    itinerary = []\n\n    # Meeting with Mark at Embarcadero\n    travel_to_em = travel_times[(\"North Beach\", \"Embarcadero\")]\n    start_mark = max(arrival_time + timedelta(minutes=travel_to_em), mark_start)\n    end_mark = start_mark + mark_meeting_duration\n    \n    if end_mark <= mark_end:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Embarcadero\",\n            \"person\": \"Mark\",\n            \"start_time\": format_time(start_mark),\n            \"end_time\": format_time(end_mark),\n        })\n        \n        # Travel to Pacific Heights for Karen\n        travel_to_karen = travel_times[(\"Embarcadero\", \"Pacific Heights\")]\n        travel_to_northbeach_return = travel_times[(\"Embarcadero\", \"North Beach\")]\n        \n        # Time after the meeting with Mark\n        available_time_after_mark = end_mark + timedelta(minutes=travel_to_karen)\n\n        # Check if we can meet Karen after meeting Mark\n        if available_time_after_mark <= karen_start:\n            # Travel to North Beach to return to Pacific Heights\n            travel_to_north_karen = travel_times[(\"North Beach\", \"Pacific Heights\")]\n            arrive_at_karen = karen_start + timedelta(minutes=travel_to_north_karen)\n            if arrive_at_karen + karen_meeting_duration <= karen_end:\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Pacific Heights\",\n                    \"person\": \"Karen\",\n                    \"start_time\": format_time(arrive_at_karen),\n                    \"end_time\": format_time(arrive_at_karen + karen_meeting_duration),\n                })\n    \n    return {\n        \"itinerary\": itinerary\n    }\n\nschedule = calculate_meeting_schedule()\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_143"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Sandra",
                        "start_time": "9:00",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Nancy",
                        "start_time": "11:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Karen",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joseph",
                        "start_time": "12:30",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Sandra",
                        "start_time": "14:19",
                        "end_time": "15:34"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Nancy",
                        "start_time": "15:46",
                        "end_time": "17:31"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Karen",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times in a minutes dictionary\ntravel_times = {\n    (\"Union Square\", \"Nob Hill\"): 9,\n    (\"Union Square\", \"Haight-Ashbury\"): 18,\n    (\"Union Square\", \"Chinatown\"): 7,\n    (\"Union Square\", \"Marina District\"): 18,\n    (\"Nob Hill\", \"Union Square\"): 7,\n    (\"Nob Hill\", \"Haight-Ashbury\"): 13,\n    (\"Nob Hill\", \"Chinatown\"): 6,\n    (\"Nob Hill\", \"Marina District\"): 11,\n    (\"Haight-Ashbury\", \"Union Square\"): 17,\n    (\"Haight-Ashbury\", \"Nob Hill\"): 15,\n    (\"Haight-Ashbury\", \"Chinatown\"): 19,\n    (\"Haight-Ashbury\", \"Marina District\"): 17,\n    (\"Chinatown\", \"Union Square\"): 7,\n    (\"Chinatown\", \"Nob Hill\"): 8,\n    (\"Chinatown\", \"Haight-Ashbury\"): 19,\n    (\"Chinatown\", \"Marina District\"): 12,\n    (\"Marina District\", \"Union Square\"): 16,\n    (\"Marina District\", \"Nob Hill\"): 12,\n    (\"Marina District\", \"Haight-Ashbury\"): 16,\n    (\"Marina District\", \"Chinatown\"): 16\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Karen\": {\"location\": \"Nob Hill\", \"available_from\": \"21:15\", \"available_to\": \"21:45\", \"duration\": 30},\n    \"Joseph\": {\"location\": \"Haight-Ashbury\", \"available_from\": \"12:30\", \"available_to\": \"19:45\", \"duration\": 90},\n    \"Sandra\": {\"location\": \"Chinatown\", \"available_from\": \"07:15\", \"available_to\": \"19:15\", \"duration\": 75},\n    \"Nancy\": {\"location\": \"Marina District\", \"available_from\": \"11:00\", \"available_to\": \"20:15\", \"duration\": 105}\n}\n\n# Define start time at Union Square\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\n# Function to convert string to datetime\ndef str_to_time(s):\n    return datetime.strptime(s, \"%H:%M\")\n\n# Function to create a meeting schedule\ndef create_schedule():\n    schedule = []\n    current_time = start_time\n\n    # Meet Sandra\n    sandra_start = max(str_to_time(constraints[\"Sandra\"][\"available_from\"]), current_time)\n    sandra_end = sandra_start + timedelta(minutes=constraints[\"Sandra\"][\"duration\"])\n    if sandra_end <= str_to_time(constraints[\"Sandra\"][\"available_to\"]):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"person\": \"Sandra\",\n            \"start_time\": sandra_start.strftime(\"%H:%M\"),\n            \"end_time\": sandra_end.strftime(\"%H:%M\")\n        })\n        current_time = sandra_end + timedelta(minutes=travel_times[(\"Chinatown\", \"Marina District\")])\n\n    # Meet Nancy\n    nancy_start = max(str_to_time(constraints[\"Nancy\"][\"available_from\"]), current_time)\n    nancy_end = nancy_start + timedelta(minutes=constraints[\"Nancy\"][\"duration\"])\n    if nancy_end <= str_to_time(constraints[\"Nancy\"][\"available_to\"]):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Marina District\",\n            \"person\": \"Nancy\",\n            \"start_time\": nancy_start.strftime(\"%H:%M\"),\n            \"end_time\": nancy_end.strftime(\"%H:%M\")\n        })\n        current_time = nancy_end + timedelta(minutes=travel_times[(\"Marina District\", \"Nob Hill\")])\n\n    # Meet Karen\n    karen_start = max(str_to_time(constraints[\"Karen\"][\"available_from\"]), current_time)\n    karen_end = karen_start + timedelta(minutes=constraints[\"Karen\"][\"duration\"])\n    if karen_end <= str_to_time(constraints[\"Karen\"][\"available_to\"]):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"person\": \"Karen\",\n            \"start_time\": karen_start.strftime(\"%H:%M\"),\n            \"end_time\": karen_end.strftime(\"%H:%M\")\n        })\n        current_time = karen_end + timedelta(minutes=travel_times[(\"Nob Hill\", \"Haight-Ashbury\")])\n\n    # Meet Joseph\n    joseph_start = max(str_to_time(constraints[\"Joseph\"][\"available_from\"]), current_time)\n    joseph_end = joseph_start + timedelta(minutes=constraints[\"Joseph\"][\"duration\"])\n    if joseph_end <= str_to_time(constraints[\"Joseph\"][\"available_to\"]):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Haight-Ashbury\",\n            \"person\": \"Joseph\",\n            \"start_time\": joseph_start.strftime(\"%H:%M\"),\n            \"end_time\": joseph_end.strftime(\"%H:%M\")\n        })\n\n    return {\n        \"itinerary\": schedule\n    }\n\n# Generate the schedule and print it as JSON\noptimal_schedule = create_schedule()\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_352"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Laura",
                        "start_time": "9:11",
                        "end_time": "9:41"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "18:30",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Betty",
                        "start_time": "19:16",
                        "end_time": "20:01"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Patricia",
                        "start_time": "20:15",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel times (in minutes)\ntravel_times = {\n    (\"Fisherman's Wharf\", \"Bayview\"): 26,\n    (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n    (\"Fisherman's Wharf\", \"Nob Hill\"): 11,\n    (\"Fisherman's Wharf\", \"Marina District\"): 9,\n    (\"Fisherman's Wharf\", \"Embarcadero\"): 8,\n    (\"Bayview\", \"Golden Gate Park\"): 22,\n    (\"Bayview\", \"Nob Hill\"): 20,\n    (\"Bayview\", \"Marina District\"): 25,\n    (\"Bayview\", \"Embarcadero\"): 19,\n    (\"Golden Gate Park\", \"Nob Hill\"): 20,\n    (\"Golden Gate Park\", \"Marina District\"): 16,\n    (\"Golden Gate Park\", \"Embarcadero\"): 25,\n    (\"Nob Hill\", \"Marina District\"): 12,\n    (\"Nob Hill\", \"Embarcadero\"): 9,\n    (\"Marina District\", \"Embarcadero\"): 12,\n}\n\n# Meeting Constraints\nconstraints = {\n    \"Thomas\": {\"location\": \"Bayview\", \"start\": \"15:30\", \"end\": \"18:30\", \"min_duration\": 120},\n    \"Stephanie\": {\"location\": \"Golden Gate Park\", \"start\": \"18:30\", \"end\": \"21:45\", \"min_duration\": 30},\n    \"Laura\": {\"location\": \"Nob Hill\", \"start\": \"08:45\", \"end\": \"16:15\", \"min_duration\": 30},\n    \"Betty\": {\"location\": \"Marina District\", \"start\": \"18:45\", \"end\": \"21:45\", \"min_duration\": 45},\n    \"Patricia\": {\"location\": \"Embarcadero\", \"start\": \"17:30\", \"end\": \"22:00\", \"min_duration\": 45},\n}\n\n# Helper functions\ndef time_to_datetime(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef add_minutes(start_time, minutes):\n    return start_time + timedelta(minutes=minutes)\n\ndef format_time(dt):\n    return dt.strftime(\"%H:%M\")\n\n# Itinerary calculation\nitinerary = []\ncurrent_time = time_to_datetime(\"09:00\")\n\n# Meet Laura\nlaura_start = time_to_datetime(constraints[\"Laura\"][\"start\"])\nlaura_end = time_to_datetime(constraints[\"Laura\"][\"end\"])\n\nif current_time < laura_start:\n    travel_time = travel_times[(\"Fisherman's Wharf\", \"Nob Hill\")]\n    current_time = add_minutes(current_time, travel_time)\n    \nif current_time < laura_end:\n    meet_duration = 30\n    end_time = add_minutes(current_time, meet_duration)\n    if end_time > laura_end:\n        end_time = laura_end\n        meet_duration = (end_time - current_time).seconds // 60\n        \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": constraints[\"Laura\"][\"location\"],\n        \"person\": \"Laura\",\n        \"start_time\": format_time(current_time),\n        \"end_time\": format_time(end_time)\n    })\n    current_time = end_time\n\n# Meet Thomas\nthomas_start = time_to_datetime(constraints[\"Thomas\"][\"start\"])\nthomas_end = time_to_datetime(constraints[\"Thomas\"][\"end\"])\n\nif current_time < thomas_start:\n    travel_time = travel_times[(\"Nob Hill\", \"Bayview\")]\n    current_time = add_minutes(current_time, travel_time)\n\nif current_time < thomas_end:\n    meet_duration = 120\n    end_time = add_minutes(current_time, meet_duration)\n    if end_time > thomas_end:\n        end_time = thomas_end\n        meet_duration = (end_time - current_time).seconds // 60\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": constraints[\"Thomas\"][\"location\"],\n        \"person\": \"Thomas\",\n        \"start_time\": format_time(current_time),\n        \"end_time\": format_time(end_time)\n    })\n    current_time = end_time\n\n# Meet Patricia\npatricia_start = time_to_datetime(constraints[\"Patricia\"][\"start\"])\npatricia_end = time_to_datetime(constraints[\"Patricia\"][\"end\"])\n\nif current_time < patricia_start:\n    travel_time = travel_times[(\"Bayview\", \"Embarcadero\")]\n    current_time = add_minutes(current_time, travel_time)\n\nif current_time < patricia_end:\n    meet_duration = 45\n    end_time = add_minutes(current_time, meet_duration)\n    if end_time > patricia_end:\n        end_time = patricia_end\n        meet_duration = (end_time - current_time).seconds // 60\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": constraints[\"Patricia\"][\"location\"],\n        \"person\": \"Patricia\",\n        \"start_time\": format_time(current_time),\n        \"end_time\": format_time(end_time)\n    })\n    current_time = end_time\n\n# Meet Betty\nbetty_start = time_to_datetime(constraints[\"Betty\"][\"start\"])\nbetty_end = time_to_datetime(constraints[\"Betty\"][\"end\"])\n\nif current_time < betty_start:\n    travel_time = travel_times[(\"Embarcadero\", \"Marina District\")]\n    current_time = add_minutes(current_time, travel_time)\n\nif current_time < betty_end:\n    meet_duration = 45\n    end_time = add_minutes(current_time, meet_duration)\n    if end_time > betty_end:\n        end_time = betty_end\n        meet_duration = (end_time - current_time).seconds // 60\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": constraints[\"Betty\"][\"location\"],\n        \"person\": \"Betty\",\n        \"start_time\": format_time(current_time),\n        \"end_time\": format_time(end_time)\n    })\n    current_time = end_time\n\n# Meet Stephanie\nstephanie_start = time_to_datetime(constraints[\"Stephanie\"][\"start\"])\nstephanie_end = time_to_datetime(constraints[\"Stephanie\"][\"end\"])\n\nif current_time < stephanie_start:\n    travel_time = travel_times[(\"Marina District\", \"Golden Gate Park\")]\n    current_time = add_minutes(current_time, travel_time)\n\nif current_time < stephanie_end:\n    meet_duration = 30\n    end_time = add_minutes(current_time, meet_duration)\n    if end_time > stephanie_end:\n        end_time = stephanie_end\n        meet_duration = (end_time - current_time).seconds // 60\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": constraints[\"Stephanie\"][\"location\"],\n        \"person\": \"Stephanie\",\n        \"start_time\": format_time(current_time),\n        \"end_time\": format_time(end_time)\n    })\n\n# Output itinerary as JSON\noutput = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_409"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "11:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Elizabeth",
                        "start_time": "12:46",
                        "end_time": "14:01"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Brian",
                        "start_time": "14:42",
                        "end_time": "16:12"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Ashley",
                        "start_time": "16:56",
                        "end_time": "18:26"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Deborah",
                        "start_time": "19:02",
                        "end_time": "20:02"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Richard",
                        "start_time": "11:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Elizabeth",
                        "start_time": "12:11",
                        "end_time": "13:26"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Brian",
                        "start_time": "13:34",
                        "end_time": "15:04"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Anthony",
                        "start_time": "15:12",
                        "end_time": "15:42"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Ashley",
                        "start_time": "15:53",
                        "end_time": "17:23"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Deborah",
                        "start_time": "17:42",
                        "end_time": "18:42"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kimberly",
                        "start_time": "18:57",
                        "end_time": "19:42"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Jessica",
                        "start_time": "20:00",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    \"Bayview\": {\n        \"North Beach\": 22,\n        \"Fisherman's Wharf\": 25,\n        \"Haight-Ashbury\": 19,\n        \"Nob Hill\": 20,\n        \"Golden Gate Park\": 22,\n        \"Union Square\": 18,\n        \"Alamo Square\": 16,\n        \"Presidio\": 32,\n        \"Chinatown\": 19,\n        \"Pacific Heights\": 23\n    },\n    \"North Beach\": {\n        \"Bayview\": 25,\n        \"Fisherman's Wharf\": 5,\n        \"Haight-Ashbury\": 18,\n        \"Nob Hill\": 7,\n        \"Golden Gate Park\": 22,\n        \"Union Square\": 7,\n        \"Alamo Square\": 16,\n        \"Presidio\": 17,\n        \"Chinatown\": 6,\n        \"Pacific Heights\": 8\n    },\n    \"Fisherman's Wharf\": {\n        \"Bayview\": 26,\n        \"North Beach\": 6,\n        \"Haight-Ashbury\": 22,\n        \"Nob Hill\": 11,\n        \"Golden Gate Park\": 25,\n        \"Union Square\": 13,\n        \"Alamo Square\": 21,\n        \"Presidio\": 17,\n        \"Chinatown\": 12,\n        \"Pacific Heights\": 12\n    },\n    \"Haight-Ashbury\": {\n        \"Bayview\": 18,\n        \"North Beach\": 19,\n        \"Fisherman's Wharf\": 23,\n        \"Nob Hill\": 15,\n        \"Golden Gate Park\": 7,\n        \"Union Square\": 19,\n        \"Alamo Square\": 5,\n        \"Presidio\": 15,\n        \"Chinatown\": 19,\n        \"Pacific Heights\": 12\n    },\n    \"Nob Hill\": {\n        \"Bayview\": 19,\n        \"North Beach\": 8,\n        \"Fisherman's Wharf\": 10,\n        \"Haight-Ashbury\": 13,\n        \"Golden Gate Park\": 17,\n        \"Union Square\": 7,\n        \"Alamo Square\": 11,\n        \"Presidio\": 17,\n        \"Chinatown\": 6,\n        \"Pacific Heights\": 8\n    },\n    \"Golden Gate Park\": {\n        \"Bayview\": 23,\n        \"North Beach\": 23,\n        \"Fisherman's Wharf\": 24,\n        \"Haight-Ashbury\": 7,\n        \"Nob Hill\": 20,\n        \"Union Square\": 22,\n        \"Alamo Square\": 9,\n        \"Presidio\": 11,\n        \"Chinatown\": 23,\n        \"Pacific Heights\": 16\n    },\n    \"Union Square\": {\n        \"Bayview\": 15,\n        \"North Beach\": 10,\n        \"Fisherman's Wharf\": 15,\n        \"Haight-Ashbury\": 18,\n        \"Nob Hill\": 9,\n        \"Golden Gate Park\": 22,\n        \"Alamo Square\": 15,\n        \"Presidio\": 24,\n        \"Chinatown\": 7,\n        \"Pacific Heights\": 15\n    },\n    \"Alamo Square\": {\n        \"Bayview\": 16,\n        \"North Beach\": 15,\n        \"Fisherman's Wharf\": 19,\n        \"Haight-Ashbury\": 5,\n        \"Nob Hill\": 11,\n        \"Golden Gate Park\": 9,\n        \"Union Square\": 14,\n        \"Presidio\": 17,\n        \"Chinatown\": 15,\n        \"Pacific Heights\": 10\n    },\n    \"Presidio\": {\n        \"Bayview\": 31,\n        \"North Beach\": 18,\n        \"Fisherman's Wharf\": 19,\n        \"Haight-Ashbury\": 15,\n        \"Nob Hill\": 18,\n        \"Golden Gate Park\": 12,\n        \"Union Square\": 22,\n        \"Alamo Square\": 19,\n        \"Chinatown\": 21,\n        \"Pacific Heights\": 11\n    },\n    \"Chinatown\": {\n        \"Bayview\": 20,\n        \"North Beach\": 3,\n        \"Fisherman's Wharf\": 8,\n        \"Haight-Ashbury\": 19,\n        \"Nob Hill\": 9,\n        \"Golden Gate Park\": 23,\n        \"Union Square\": 7,\n        \"Alamo Square\": 17,\n        \"Presidio\": 19,\n        \"Pacific Heights\": 10\n    },\n    \"Pacific Heights\": {\n        \"Bayview\": 22,\n        \"North Beach\": 9,\n        \"Fisherman's Wharf\": 13,\n        \"Haight-Ashbury\": 11,\n        \"Nob Hill\": 8,\n        \"Golden Gate Park\": 15,\n        \"Union Square\": 12,\n        \"Alamo Square\": 10,\n        \"Presidio\": 11,\n        \"Chinatown\": 11\n    }\n}\n\n# Meeting constraints\nmeetings = [\n    {\"person\": \"Matthew\", \"location\": \"Presidio\", \"start\": \"09:00\", \"end\": \"09:15\", \"duration\": 15},\n    {\"person\": \"Richard\", \"location\": \"Fisherman's Wharf\", \"start\": \"11:00\", \"end\": \"12:45\", \"duration\": 60},\n    {\"person\": \"Elizabeth\", \"location\": \"Nob Hill\", \"start\": \"11:45\", \"end\": \"18:30\", \"duration\": 75},\n    {\"person\": \"Brian\", \"location\": \"North Beach\", \"start\": \"13:00\", \"end\": \"19:00\", \"duration\": 90},\n    {\"person\": \"Anthony\", \"location\": \"Pacific Heights\", \"start\": \"14:15\", \"end\": \"16:00\", \"duration\": 30},\n    {\"person\": \"Ashley\", \"location\": \"Haight-Ashbury\", \"start\": \"15:00\", \"end\": \"20:30\", \"duration\": 90},\n    {\"person\": \"Deborah\", \"location\": \"Union Square\", \"start\": \"17:30\", \"end\": \"22:00\", \"duration\": 60},\n    {\"person\": \"Kimberly\", \"location\": \"Alamo Square\", \"start\": \"17:30\", \"end\": \"21:15\", \"duration\": 45},\n    {\"person\": \"Kenneth\", \"location\": \"Chinatown\", \"start\": \"13:45\", \"end\": \"19:30\", \"duration\": 105},\n    {\"person\": \"Jessica\", \"location\": \"Golden Gate Park\", \"start\": \"20:00\", \"end\": \"21:45\", \"duration\": 105}\n]\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\ndef format_time(time_dt):\n    return time_dt.strftime('%H:%M')\n\n# Start exploring the schedule\nitinerary = []\ncurrent_time = parse_time(\"09:00\")\n\ndef try_meeting(meeting, start_time):\n    \"\"\"Try to schedule a meeting and return the end time, or None if it can't be scheduled.\"\"\"\n    meeting_duration = timedelta(minutes=meeting[\"duration\"])\n    travel_time = travel_times[\"Bayview\"][meeting[\"location\"]]\n    \n    start_meeting_time = start_time + timedelta(minutes=travel_time)\n    \n    # Check if it fits in the meeting person's timeframe\n    meeting_start_time = max(start_meeting_time, parse_time(meeting[\"start\"]))\n    meeting_end_time = meeting_start_time + meeting_duration\n    \n    if meeting_end_time <= parse_time(meeting[\"end\"]):\n        return meeting_end_time\n    return None\n\n# Schedule meetings considering constraints\nfor meeting in meetings:\n    end_time = try_meeting(meeting, current_time)\n    if end_time:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"person\"],\n            \"start_time\": format_time(end_time - timedelta(minutes=meeting[\"duration\"])),\n            \"end_time\": format_time(end_time)\n        })\n        current_time = end_time + timedelta(minutes=travel_times[meeting[\"location\"]][\"Bayview\"])  # Return to Bayview\n\n# Result in JSON format\nresult = {\"itinerary\": itinerary}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_952"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "10:15",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Kimberly",
                        "start_time": "14:15",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Kenneth",
                        "start_time": "15:01",
                        "end_time": "15:31"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Brian",
                        "start_time": "15:51",
                        "end_time": "17:06"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Sandra",
                        "start_time": "17:24",
                        "end_time": "18:24"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Laura",
                        "start_time": "18:37",
                        "end_time": "19:07"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "19:22",
                        "end_time": "20:37"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Paul",
                        "start_time": "21:00",
                        "end_time": "21:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Linda",
                        "start_time": "21:30",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Define the travel distances in minutes\ntravel_times = {\n    (\"Pacific Heights\", \"Marina District\"): 6,\n    (\"Pacific Heights\", \"The Castro\"): 16,\n    (\"Pacific Heights\", \"Richmond District\"): 12,\n    (\"Pacific Heights\", \"Alamo Square\"): 10,\n    (\"Pacific Heights\", \"Financial District\"): 13,\n    (\"Pacific Heights\", \"Presidio\"): 11,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"Pacific Heights\", \"Nob Hill\"): 8,\n    (\"Pacific Heights\", \"Russian Hill\"): 7,\n    (\"Marina District\", \"Pacific Heights\"): 7,\n    (\"Marina District\", \"The Castro\"): 22,\n    (\"Marina District\", \"Richmond District\"): 11,\n    (\"Marina District\", \"Alamo Square\"): 15,\n    (\"Marina District\", \"Financial District\"): 17,\n    (\"Marina District\", \"Presidio\"): 10,\n    (\"Marina District\", \"Mission District\"): 20,\n    (\"Marina District\", \"Nob Hill\"): 12,\n    (\"Marina District\", \"Russian Hill\"): 8,\n    (\"The Castro\", \"Pacific Heights\"): 16,\n    (\"The Castro\", \"Marina District\"): 21,\n    (\"The Castro\", \"Richmond District\"): 16,\n    (\"The Castro\", \"Alamo Square\"): 8,\n    (\"The Castro\", \"Financial District\"): 21,\n    (\"The Castro\", \"Presidio\"): 20,\n    (\"The Castro\", \"Mission District\"): 7,\n    (\"The Castro\", \"Nob Hill\"): 16,\n    (\"The Castro\", \"Russian Hill\"): 18,\n    (\"Richmond District\", \"Pacific Heights\"): 10,\n    (\"Richmond District\", \"Marina District\"): 9,\n    (\"Richmond District\", \"The Castro\"): 16,\n    (\"Richmond District\", \"Alamo Square\"): 13,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"Presidio\"): 7,\n    (\"Richmond District\", \"Mission District\"): 20,\n    (\"Richmond District\", \"Nob Hill\"): 17,\n    (\"Richmond District\", \"Russian Hill\"): 13,\n    (\"Alamo Square\", \"Pacific Heights\"): 10,\n    (\"Alamo Square\", \"Marina District\"): 15,\n    (\"Alamo Square\", \"The Castro\"): 8,\n    (\"Alamo Square\", \"Richmond District\"): 11,\n    (\"Alamo Square\", \"Financial District\"): 17,\n    (\"Alamo Square\", \"Presidio\"): 17,\n    (\"Alamo Square\", \"Mission District\"): 10,\n    (\"Alamo Square\", \"Nob Hill\"): 11,\n    (\"Alamo Square\", \"Russian Hill\"): 13,\n    (\"Financial District\", \"Pacific Heights\"): 13,\n    (\"Financial District\", \"Marina District\"): 15,\n    (\"Financial District\", \"The Castro\"): 20,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Financial District\", \"Alamo Square\"): 17,\n    (\"Financial District\", \"Presidio\"): 22,\n    (\"Financial District\", \"Mission District\"): 17,\n    (\"Financial District\", \"Nob Hill\"): 8,\n    (\"Financial District\", \"Russian Hill\"): 11,\n    (\"Presidio\", \"Pacific Heights\"): 11,\n    (\"Presidio\", \"Marina District\"): 11,\n    (\"Presidio\", \"The Castro\"): 21,\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Presidio\", \"Alamo Square\"): 19,\n    (\"Presidio\", \"Financial District\"): 23,\n    (\"Presidio\", \"Mission District\"): 26,\n    (\"Presidio\", \"Nob Hill\"): 18,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Mission District\", \"Pacific Heights\"): 16,\n    (\"Mission District\", \"Marina District\"): 19,\n    (\"Mission District\", \"The Castro\"): 7,\n    (\"Mission District\", \"Richmond District\"): 20,\n    (\"Mission District\", \"Alamo Square\"): 11,\n    (\"Mission District\", \"Financial District\"): 15,\n    (\"Mission District\", \"Presidio\"): 25,\n    (\"Mission District\", \"Nob Hill\"): 12,\n    (\"Mission District\", \"Russian Hill\"): 15,\n    (\"Nob Hill\", \"Pacific Heights\"): 8,\n    (\"Nob Hill\", \"Marina District\"): 11,\n    (\"Nob Hill\", \"The Castro\"): 17,\n    (\"Nob Hill\", \"Richmond District\"): 14,\n    (\"Nob Hill\", \"Alamo Square\"): 11,\n    (\"Nob Hill\", \"Financial District\"): 9,\n    (\"Nob Hill\", \"Presidio\"): 17,\n    (\"Nob Hill\", \"Mission District\"): 13,\n    (\"Nob Hill\", \"Russian Hill\"): 5,\n    (\"Russian Hill\", \"Pacific Heights\"): 7,\n    (\"Russian Hill\", \"Marina District\"): 7,\n    (\"Russian Hill\", \"The Castro\"): 21,\n    (\"Russian Hill\", \"Richmond District\"): 14,\n    (\"Russian Hill\", \"Alamo Square\"): 15,\n    (\"Russian Hill\", \"Financial District\"): 11,\n    (\"Russian Hill\", \"Presidio\"): 14,\n    (\"Russian Hill\", \"Mission District\"): 16,\n    (\"Russian Hill\", \"Nob Hill\"): 5,\n}\n\n# Define the friends' constraints\nfriends = [\n    {\"name\": \"Linda\", \"location\": \"Marina District\", \"start\": \"18:00\", \"end\": \"22:00\", \"duration\": 30},\n    {\"name\": \"Kenneth\", \"location\": \"The Castro\", \"start\": \"14:45\", \"end\": \"16:15\", \"duration\": 30},\n    {\"name\": \"Kimberly\", \"location\": \"Richmond District\", \"start\": \"14:15\", \"end\": \"22:00\", \"duration\": 30},\n    {\"name\": \"Paul\", \"location\": \"Alamo Square\", \"start\": \"21:00\", \"end\": \"21:30\", \"duration\": 15},\n    {\"name\": \"Carol\", \"location\": \"Financial District\", \"start\": \"10:15\", \"end\": \"12:00\", \"duration\": 60},\n    {\"name\": \"Brian\", \"location\": \"Presidio\", \"start\": \"10:00\", \"end\": \"21:30\", \"duration\": 75},\n    {\"name\": \"Laura\", \"location\": \"Mission District\", \"start\": \"16:15\", \"end\": \"20:30\", \"duration\": 30},\n    {\"name\": \"Sandra\", \"location\": \"Nob Hill\", \"start\": \"09:15\", \"end\": \"18:30\", \"duration\": 60},\n    {\"name\": \"Karen\", \"location\": \"Russian Hill\", \"start\": \"18:30\", \"end\": \"22:00\", \"duration\": 75},\n]\n\n# Convert time strings to datetime objects\nfor friend in friends:\n    friend[\"start\"] = datetime.strptime(friend[\"start\"], \"%H:%M\")\n    friend[\"end\"] = datetime.strptime(friend[\"end\"], \"%H:%M\")\n    friend[\"duration\"] = timedelta(minutes=friend[\"duration\"])\n\n# Determine best meeting schedule\ndef find_schedule(friends):\n    itinerary = []\n    current_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    current_location = \"Pacific Heights\"\n\n    # List of possible locations\n    locations = [friend[\"location\"] for friend in friends]\n\n    while friends:\n        for friend in friends:\n            travel_time = travel_times.get((current_location, friend[\"location\"]), float('inf'))\n            meet_start_time = current_time + timedelta(minutes=travel_time)\n\n            if meet_start_time < friend[\"start\"]:\n                current_time = friend[\"start\"] - timedelta(minutes=travel_time)\n                meet_start_time = current_time + timedelta(minutes=travel_time)\n                \n            meet_end_time = meet_start_time + friend[\"duration\"]\n\n            # Check if time is within friend's availability\n            if friend[\"start\"] <= meet_start_time < friend[\"end\"] and meet_end_time <= friend[\"end\"]:\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": friend[\"location\"],\n                    \"person\": friend[\"name\"],\n                    \"start_time\": meet_start_time.strftime(\"%H:%M\"),\n                    \"end_time\": meet_end_time.strftime(\"%H:%M\")\n                })\n                current_time = meet_end_time + timedelta(minutes=travel_time)  # Move time forward after meeting\n                current_location = friend[\"location\"]  # Update current location\n                friends.remove(friend)  # Remove from the list after meeting\n\n            # Continue until no more friends left to meet or cannot meet in available time.\n            if not friends:\n                break\n\n    return itinerary\n\n# Find the optimal meeting schedule\nitinerary = find_schedule(friends)\n\n# Output as JSON\nresult = {\"itinerary\": itinerary}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_870"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "9:00",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Matthew",
                        "start_time": "11:20",
                        "end_time": "12:50"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jessica",
                        "start_time": "13:03",
                        "end_time": "13:48"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "David",
                        "start_time": "14:10",
                        "end_time": "14:55"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "15:25",
                        "end_time": "16:10"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Deborah",
                        "start_time": "19:00",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Laura",
                        "start_time": "21:15",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "9:20",
                        "end_time": "11:20"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Matthew",
                        "start_time": "11:37",
                        "end_time": "13:07"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "David",
                        "start_time": "13:23",
                        "end_time": "14:08"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "14:36",
                        "end_time": "15:21"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "15:27",
                        "end_time": "16:12"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jessica",
                        "start_time": "16:17",
                        "end_time": "17:02"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Deborah",
                        "start_time": "19:00",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Karen",
                        "start_time": "19:57",
                        "end_time": "21:57"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\nimport json\n\n# Define travel times (in minutes)\ntravel_times = {\n    \"Richmond District\": {\n        \"Chinatown\": 20,\n        \"Sunset District\": 11,\n        \"Alamo Square\": 13,\n        \"Financial District\": 22,\n        \"North Beach\": 17,\n        \"Embarcadero\": 19,\n        \"Presidio\": 7,\n        \"Golden Gate Park\": 9,\n        \"Bayview\": 27\n    },\n    \"Chinatown\": {\n        \"Richmond District\": 20,\n        \"Sunset District\": 29,\n        \"Alamo Square\": 17,\n        \"Financial District\": 5,\n        \"North Beach\": 3,\n        \"Embarcadero\": 5,\n        \"Presidio\": 19,\n        \"Golden Gate Park\": 23,\n        \"Bayview\": 20\n    },\n    \"Sunset District\": {\n        \"Richmond District\": 12,\n        \"Chinatown\": 30,\n        \"Alamo Square\": 17,\n        \"Financial District\": 30,\n        \"North Beach\": 28,\n        \"Embarcadero\": 30,\n        \"Presidio\": 16,\n        \"Golden Gate Park\": 11,\n        \"Bayview\": 22\n    },\n    \"Alamo Square\": {\n        \"Richmond District\": 11,\n        \"Chinatown\": 15,\n        \"Sunset District\": 16,\n        \"Financial District\": 17,\n        \"North Beach\": 15,\n        \"Embarcadero\": 16,\n        \"Presidio\": 17,\n        \"Golden Gate Park\": 9,\n        \"Bayview\": 16\n    },\n    \"Financial District\": {\n        \"Richmond District\": 21,\n        \"Chinatown\": 5,\n        \"Sunset District\": 30,\n        \"Alamo Square\": 17,\n        \"North Beach\": 7,\n        \"Embarcadero\": 4,\n        \"Presidio\": 22,\n        \"Golden Gate Park\": 23,\n        \"Bayview\": 19\n    },\n    \"North Beach\": {\n        \"Richmond District\": 18,\n        \"Chinatown\": 6,\n        \"Sunset District\": 27,\n        \"Alamo Square\": 16,\n        \"Financial District\": 8,\n        \"Embarcadero\": 6,\n        \"Presidio\": 17,\n        \"Golden Gate Park\": 22,\n        \"Bayview\": 25\n    },\n    \"Embarcadero\": {\n        \"Richmond District\": 21,\n        \"Chinatown\": 7,\n        \"Sunset District\": 30,\n        \"Alamo Square\": 19,\n        \"Financial District\": 5,\n        \"North Beach\": 5,\n        \"Presidio\": 20,\n        \"Golden Gate Park\": 25,\n        \"Bayview\": 21\n    },\n    \"Presidio\": {\n        \"Richmond District\": 7,\n        \"Chinatown\": 21,\n        \"Sunset District\": 15,\n        \"Alamo Square\": 19,\n        \"Financial District\": 23,\n        \"North Beach\": 18,\n        \"Embarcadero\": 20,\n        \"Golden Gate Park\": 12,\n        \"Bayview\": 31\n    },\n    \"Golden Gate Park\": {\n        \"Richmond District\": 7,\n        \"Chinatown\": 23,\n        \"Sunset District\": 10,\n        \"Alamo Square\": 9,\n        \"Financial District\": 26,\n        \"North Beach\": 23,\n        \"Embarcadero\": 25,\n        \"Presidio\": 11,\n        \"Bayview\": 23\n    },\n    \"Bayview\": {\n        \"Richmond District\": 25,\n        \"Chinatown\": 19,\n        \"Sunset District\": 23,\n        \"Alamo Square\": 16,\n        \"Financial District\": 19,\n        \"North Beach\": 22,\n        \"Embarcadero\": 19,\n        \"Presidio\": 32,\n        \"Golden Gate Park\": 22\n    }\n}\n\n# Define meeting constraints\nmeetings = [\n    {\"person\": \"Robert\", \"location\": \"Chinatown\", \"start_time\": \"7:45\", \"end_time\": \"17:30\", \"duration\": 120},\n    {\"person\": \"David\", \"location\": \"Sunset District\", \"start_time\": \"12:30\", \"end_time\": \"19:45\", \"duration\": 45},\n    {\"person\": \"Matthew\", \"location\": \"Alamo Square\", \"start_time\": \"8:45\", \"end_time\": \"13:45\", \"duration\": 90},\n    {\"person\": \"Jessica\", \"location\": \"Financial District\", \"start_time\": \"9:30\", \"end_time\": \"18:45\", \"duration\": 45},\n    {\"person\": \"Melissa\", \"location\": \"North Beach\", \"start_time\": \"7:15\", \"end_time\": \"16:45\", \"duration\": 45},\n    {\"person\": \"Mark\", \"location\": \"Embarcadero\", \"start_time\": \"15:15\", \"end_time\": \"17:00\", \"duration\": 45},\n    {\"person\": \"Deborah\", \"location\": \"Presidio\", \"start_time\": \"19:00\", \"end_time\": \"19:45\", \"duration\": 45},\n    {\"person\": \"Karen\", \"location\": \"Golden Gate Park\", \"start_time\": \"19:30\", \"end_time\": \"22:00\", \"duration\": 120},\n    {\"person\": \"Laura\", \"location\": \"Bayview\", \"start_time\": \"21:15\", \"end_time\": \"22:15\", \"duration\": 15}\n]\n\n# Function to calculate the optimal meeting schedule\ndef calculate_schedule():\n    current_time = datetime.strptime(\"9:00\", \"%H:%M\")\n    schedule = []\n    \n    # Meeting with Robert\n    robert_start = max(current_time, datetime.strptime(meetings[0][\"start_time\"], \"%H:%M\"))\n    robert_end = robert_start + timedelta(minutes=meetings[0][\"duration\"])\n    travel_to_robert = travel_times[\"Richmond District\"][meetings[0][\"location\"]]\n    \n    if robert_end <= datetime.strptime(meetings[0][\"end_time\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meetings[0][\"location\"],\n            \"person\": meetings[0][\"person\"],\n            \"start_time\": robert_start.strftime(\"%H:%M\"),\n            \"end_time\": robert_end.strftime(\"%H:%M\")\n        })\n        current_time = robert_end + timedelta(minutes=travel_to_robert)\n\n    # Next, meet Matthew\n    matthew_start = max(current_time, datetime.strptime(meetings[2][\"start_time\"], \"%H:%M\"))\n    matthew_end = matthew_start + timedelta(minutes=meetings[2][\"duration\"])\n    travel_to_matthew = travel_times[\"Richmond District\"][meetings[2][\"location\"]]\n\n    if matthew_end <= datetime.strptime(meetings[2][\"end_time\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meetings[2][\"location\"],\n            \"person\": meetings[2][\"person\"],\n            \"start_time\": matthew_start.strftime(\"%H:%M\"),\n            \"end_time\": matthew_end.strftime(\"%H:%M\")\n        })\n        current_time = matthew_end + timedelta(minutes=travel_to_matthew)\n\n    # Meeting with Jessica\n    jessica_start = max(current_time, datetime.strptime(meetings[3][\"start_time\"], \"%H:%M\"))\n    jessica_end = jessica_start + timedelta(minutes=meetings[3][\"duration\"])\n    travel_to_jessica = travel_times[\"Richmond District\"][meetings[3][\"location\"]]\n\n    if jessica_end <= datetime.strptime(meetings[3][\"end_time\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meetings[3][\"location\"],\n            \"person\": meetings[3][\"person\"],\n            \"start_time\": jessica_start.strftime(\"%H:%M\"),\n            \"end_time\": jessica_end.strftime(\"%H:%M\")\n        })\n        current_time = jessica_end + timedelta(minutes=travel_to_jessica)\n\n    # Meeting with David\n    david_start = max(current_time, datetime.strptime(meetings[1][\"start_time\"], \"%H:%M\"))\n    david_end = david_start + timedelta(minutes=meetings[1][\"duration\"])\n    travel_to_david = travel_times[meetings[3][\"location\"]][meetings[1][\"location\"]]\n\n    # Check if David's meeting can be accommodated\n    if david_end <= datetime.strptime(meetings[1][\"end_time\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meetings[1][\"location\"],\n            \"person\": meetings[1][\"person\"],\n            \"start_time\": david_start.strftime(\"%H:%M\"),\n            \"end_time\": david_end.strftime(\"%H:%M\")\n        })\n        current_time = david_end + timedelta(minutes=travel_to_david)\n\n    # Meeting with Mark\n    mark_start = max(current_time, datetime.strptime(meetings[5][\"start_time\"], \"%H:%M\"))\n    mark_end = mark_start + timedelta(minutes=meetings[5][\"duration\"])\n    travel_to_mark = travel_times[meetings[1][\"location\"]][meetings[5][\"location\"]]\n\n    if mark_end <= datetime.strptime(meetings[5][\"end_time\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meetings[5][\"location\"],\n            \"person\": meetings[5][\"person\"],\n            \"start_time\": mark_start.strftime(\"%H:%M\"),\n            \"end_time\": mark_end.strftime(\"%H:%M\")\n        })\n        current_time = mark_end + timedelta(minutes=travel_to_mark)\n\n    # Meeting with Deborah\n    deborah_start = max(current_time, datetime.strptime(meetings[6][\"start_time\"], \"%H:%M\"))\n    deborah_end = deborah_start + timedelta(minutes=meetings[6][\"duration\"])\n    travel_to_deborah = travel_times[meetings[5][\"location\"]][meetings[6][\"location\"]]\n\n    if deborah_start <= datetime.strptime(meetings[6][\"end_time\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meetings[6][\"location\"],\n            \"person\": meetings[6][\"person\"],\n            \"start_time\": deborah_start.strftime(\"%H:%M\"),\n            \"end_time\": deborah_end.strftime(\"%H:%M\")\n        })\n        current_time = deborah_end + timedelta(minutes=travel_to_deborah)\n\n    # Meeting with Karen\n    karen_start = max(current_time, datetime.strptime(meetings[7][\"start_time\"], \"%H:%M\"))\n    karen_end = karen_start + timedelta(minutes=meetings[7][\"duration\"])\n    travel_to_karen = travel_times[meetings[6][\"location\"]][meetings[7][\"location\"]]\n\n    if karen_end <= datetime.strptime(meetings[7][\"end_time\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meetings[7][\"location\"],\n            \"person\": meetings[7][\"person\"],\n            \"start_time\": karen_start.strftime(\"%H:%M\"),\n            \"end_time\": karen_end.strftime(\"%H:%M\")\n        })\n        current_time = karen_end + timedelta(minutes=travel_to_karen)\n\n    # Meeting with Laura\n    laura_start = max(current_time, datetime.strptime(meetings[8][\"start_time\"], \"%H:%M\"))\n    laura_end = laura_start + timedelta(minutes=meetings[8][\"duration\"])\n    travel_to_laura = travel_times[meetings[7][\"location\"]][meetings[8][\"location\"]]\n\n    if laura_end <= datetime.strptime(meetings[8][\"end_time\"], \"%H:%M\"):\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meetings[8][\"location\"],\n            \"person\": meetings[8][\"person\"],\n            \"start_time\": laura_start.strftime(\"%H:%M\"),\n            \"end_time\": laura_end.strftime(\"%H:%M\")\n        })\n\n    return {\"itinerary\": schedule}\n\n# Calculate the schedule\noptimal_schedule = calculate_schedule()\n\n# Output the schedule as JSON\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_884"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "James",
                        "start_time": "12:27",
                        "end_time": "13:42"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "13:49",
                        "end_time": "14:19"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "James",
                        "start_time": "12:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "14:07",
                        "end_time": "14:37"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel times in minutes\ntravel_times = {\n    (\"North Beach\", \"Mission District\"): 18,\n    (\"North Beach\", \"The Castro\"): 22,\n    (\"Mission District\", \"North Beach\"): 17,\n    (\"Mission District\", \"The Castro\"): 7,\n    (\"The Castro\", \"North Beach\"): 20,\n    (\"The Castro\", \"Mission District\"): 7,\n}\n\n# Meeting times and constraints\narrival_time = datetime.strptime(\"9:00\", \"%H:%M\")\njames_start = datetime.strptime(\"12:45\", \"%H:%M\")\njames_end = datetime.strptime(\"14:00\", \"%H:%M\")\njames_meeting_duration = timedelta(minutes=75)\n\nrobert_start = datetime.strptime(\"12:45\", \"%H:%M\")\nrobert_end = datetime.strptime(\"15:15\", \"%H:%M\")\nrobert_meeting_duration = timedelta(minutes=30)\n\ndef optimal_schedule():\n    itinerary = []\n    \n    # Time when we can start meeting since we will arrive at North Beach at 9:00\n    current_time = arrival_time\n    \n    # Meet James first\n    # Need to leave North Beach by 12:27 (12:45 - 18 minutes travel time)\n    time_to_meet_james = james_start - timedelta(minutes=travel_times[(\"North Beach\", \"Mission District\")])\n    \n    if current_time < time_to_meet_james:\n        # Schedule to meet James from 12:27 to 13:42\n        james_meeting_start = time_to_meet_james\n        james_meeting_end = james_meeting_start + james_meeting_duration\n        \n        if james_meeting_end <= james_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Mission District\",\n                \"person\": \"James\",\n                \"start_time\": james_meeting_start.strftime(\"%H:%M\"),\n                \"end_time\": james_meeting_end.strftime(\"%H:%M\"),\n            })\n            current_time = james_meeting_end + timedelta(minutes=travel_times[(\"Mission District\", \"The Castro\")])\n    \n    # Now we will meet Robert at The Castro\n    # We must arrive by 15:15 - 22 minutes (travel from The Castro to North Beach)\n    time_to_meet_robert = robert_end - timedelta(minutes=travel_times[(\"The Castro\", \"North Beach\")])\n    \n    if current_time < robert_start:\n        # Wait until Robert is available at 12:45\n        current_time = robert_start\n        \n    # Schedule to meet Robert for the minimum duration possible\n    robert_meeting_start = current_time\n    robert_meeting_end = robert_meeting_start + robert_meeting_duration\n    \n    if robert_meeting_end <= robert_end:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"The Castro\",\n            \"person\": \"Robert\",\n            \"start_time\": robert_meeting_start.strftime(\"%H:%M\"),\n            \"end_time\": robert_meeting_end.strftime(\"%H:%M\"),\n        })\n    \n    result = {\n        \"itinerary\": itinerary\n    }\n    \n    return json.dumps(result, indent=4)\n\n# Run the program\nif __name__ == \"__main__\":\n    print(optimal_schedule())\n```",
            "count": "meeting_planning_example_180"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kenneth",
                        "start_time": "11:47",
                        "end_time": "12:32"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kenneth",
                        "start_time": "12:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times in minutes\ntravel_times = {\n    (\"Nob Hill\", \"Pacific Heights\"): 8,\n    (\"Nob Hill\", \"Mission District\"): 13,\n    (\"Pacific Heights\", \"Nob Hill\"): 8,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"Mission District\", \"Nob Hill\"): 12,\n    (\"Mission District\", \"Pacific Heights\"): 16,\n}\n\n# Meeting constraints\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\nthomas_availability_start = datetime.strptime(\"15:30\", \"%H:%M\")\nthomas_availability_end = datetime.strptime(\"19:15\", \"%H:%M\")\nmin_thomas_meeting_duration = timedelta(minutes=75)\n\nkenneth_availability_start = datetime.strptime(\"12:00\", \"%H:%M\")\nkenneth_availability_end = datetime.strptime(\"15:45\", \"%H:%M\")\nmin_kenneth_meeting_duration = timedelta(minutes=45)\n\n# Function to calculate time after traveling\ndef travel_time(start_location, end_location):\n    return travel_times.get((start_location, end_location), travel_times.get((end_location, start_location), float('inf')))\n\n# Function to create a meeting schedule\ndef create_schedule():\n    schedule = []\n    \n    # Meet Kenneth\n    # Travel from Nob Hill to Mission District\n    travel_to_kenneth = travel_time(\"Nob Hill\", \"Mission District\")\n    start_meeting_kenneth = kenneth_availability_start - timedelta(minutes=travel_to_kenneth)\n    end_meeting_kenneth = start_meeting_kenneth + min_kenneth_meeting_duration\n    \n    if end_meeting_kenneth <= kenneth_availability_end:\n        # Schedule the meeting with Kenneth\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Mission District\",\n            \"person\": \"Kenneth\",\n            \"start_time\": start_meeting_kenneth.strftime(\"%H:%M\"),\n            \"end_time\": end_meeting_kenneth.strftime(\"%H:%M\"),\n        })\n\n        # Travel back to Nob Hill\n        travel_back = travel_time(\"Mission District\", \"Nob Hill\")\n        \n        # Calculate time after meeting with Kenneth\n        time_after_kenneth = end_meeting_kenneth + timedelta(minutes=travel_back)\n\n        # Meet Thomas\n        # Travel from Nob Hill to Pacific Heights\n        travel_to_thomas = travel_time(\"Nob Hill\", \"Pacific Heights\")\n        start_meeting_thomas = max(time_after_kenneth + timedelta(minutes=travel_to_thomas), thomas_availability_start)\n        \n        if start_meeting_thomas + min_thomas_meeting_duration <= thomas_availability_end:\n            end_meeting_thomas = start_meeting_thomas + min_thomas_meeting_duration\n            # Schedule the meeting with Thomas\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Pacific Heights\",\n                \"person\": \"Thomas\",\n                \"start_time\": start_meeting_thomas.strftime(\"%H:%M\"),\n                \"end_time\": end_meeting_thomas.strftime(\"%H:%M\"),\n            })\n    \n    return {\n        \"itinerary\": schedule\n    }\n\n# Main logic to create schedule and output JSON\nitinerary = create_schedule()\nprint(json.dumps(itinerary, indent=2))\n```",
            "count": "meeting_planning_example_174"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Matthew",
                        "start_time": "9:00",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Karen",
                        "start_time": "11:00",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Sarah",
                        "start_time": "12:30",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "14:15",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Mary",
                        "start_time": "16:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Charles",
                        "start_time": "17:15",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Nancy",
                        "start_time": "19:00",
                        "end_time": "19:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Thomas",
                        "start_time": "13:30",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Nancy",
                        "start_time": "14:45",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Brian",
                        "start_time": "15:09",
                        "end_time": "16:09"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "16:30",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Mary",
                        "start_time": "18:37",
                        "end_time": "19:37"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Matthew",
                        "start_time": "19:52",
                        "end_time": "21:52"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    (\"Embarcadero\", \"Bayview\"): 21,\n    (\"Embarcadero\", \"Chinatown\"): 7,\n    (\"Embarcadero\", \"Alamo Square\"): 19,\n    (\"Embarcadero\", \"Nob Hill\"): 10,\n    (\"Embarcadero\", \"Presidio\"): 20,\n    (\"Embarcadero\", \"Union Square\"): 10,\n    (\"Embarcadero\", \"The Castro\"): 25,\n    (\"Embarcadero\", \"North Beach\"): 5,\n    (\"Embarcadero\", \"Fisherman's Wharf\"): 6,\n    (\"Embarcadero\", \"Marina District\"): 12,\n    (\"Bayview\", \"Chinatown\"): 19,\n    (\"Bayview\", \"Alamo Square\"): 16,\n    (\"Bayview\", \"Nob Hill\"): 20,\n    (\"Bayview\", \"Presidio\"): 32,\n    (\"Bayview\", \"Union Square\"): 18,\n    (\"Bayview\", \"The Castro\"): 19,\n    (\"Bayview\", \"North Beach\"): 22,\n    (\"Bayview\", \"Fisherman's Wharf\"): 25,\n    (\"Bayview\", \"Marina District\"): 27,\n    (\"Chinatown\", \"Alamo Square\"): 17,\n    (\"Chinatown\", \"Nob Hill\"): 9,\n    (\"Chinatown\", \"Presidio\"): 19,\n    (\"Chinatown\", \"Union Square\"): 7,\n    (\"Chinatown\", \"The Castro\"): 22,\n    (\"Chinatown\", \"North Beach\"): 3,\n    (\"Chinatown\", \"Fisherman's Wharf\"): 8,\n    (\"Chinatown\", \"Marina District\"): 12,\n    (\"Alamo Square\", \"Nob Hill\"): 11,\n    (\"Alamo Square\", \"Presidio\"): 17,\n    (\"Alamo Square\", \"Union Square\"): 14,\n    (\"Alamo Square\", \"The Castro\"): 8,\n    (\"Alamo Square\", \"North Beach\"): 15,\n    (\"Alamo Square\", \"Fisherman's Wharf\"): 19,\n    (\"Nob Hill\", \"Presidio\"): 17,\n    (\"Nob Hill\", \"Union Square\"): 7,\n    (\"Nob Hill\", \"The Castro\"): 17,\n    (\"Nob Hill\", \"North Beach\"): 8,\n    (\"Nob Hill\", \"Fisherman's Wharf\"): 10,\n    (\"Presidio\", \"Union Square\"): 24,\n    (\"Presidio\", \"The Castro\"): 21,\n    (\"Presidio\", \"North Beach\"): 18,\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Presidio\", \"Marina District\"): 11,\n    (\"Union Square\", \"The Castro\"): 17,\n    (\"Union Square\", \"North Beach\"): 10,\n    (\"Union Square\", \"Fisherman's Wharf\"): 15,\n    (\"Union Square\", \"Marina District\"): 18,\n    (\"The Castro\", \"North Beach\"): 20,\n    (\"The Castro\", \"Fisherman's Wharf\"): 24,\n    (\"The Castro\", \"Marina District\"): 21,\n    (\"North Beach\", \"Fisherman's Wharf\"): 6,\n    (\"Marina District\", \"Bayview\"): 27,\n}\n\n# Meeting constraints\nmeetings = {\n    \"Matthew\": {\"location\": \"Bayview\", \"start\": \"19:15\", \"end\": \"22:00\", \"duration\": 120},\n    \"Karen\": {\"location\": \"Chinatown\", \"start\": \"19:15\", \"end\": \"21:15\", \"duration\": 90},\n    \"Sarah\": {\"location\": \"Alamo Square\", \"start\": \"20:00\", \"end\": \"21:45\", \"duration\": 105},\n    \"Jessica\": {\"location\": \"Nob Hill\", \"start\": \"16:30\", \"end\": \"18:45\", \"duration\": 120},\n    \"Stephanie\": {\"location\": \"Presidio\", \"start\": \"07:30\", \"end\": \"10:15\", \"duration\": 60},\n    \"Mary\": {\"location\": \"Union Square\", \"start\": \"16:45\", \"end\": \"21:30\", \"duration\": 60},\n    \"Charles\": {\"location\": \"The Castro\", \"start\": \"16:30\", \"end\": \"22:00\", \"duration\": 105},\n    \"Nancy\": {\"location\": \"North Beach\", \"start\": \"14:45\", \"end\": \"20:00\", \"duration\": 15},\n    \"Thomas\": {\"location\": \"Fisherman's Wharf\", \"start\": \"13:30\", \"end\": \"19:00\", \"duration\": 30},\n    \"Brian\": {\"location\": \"Marina District\", \"start\": \"12:15\", \"end\": \"18:00\", \"duration\": 60},\n}\n\n# Times\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\ncurrent_time = arrival_time\n\n# Itinerary\nitinerary = []\n\ndef can_meet(start_time, duration, end_time):\n    return start_time + timedelta(minutes=duration) <= end_time\n\n# Meeting order based on time constraints\nfor person, info in meetings.items():\n    location = info[\"location\"]\n    start_time = datetime.strptime(info[\"start\"], \"%H:%M\")\n    end_time = datetime.strptime(info[\"end\"], \"%H:%M\")\n    duration = info[\"duration\"]\n    \n    # Travel time calculations\n    travel_key = (current_time.strftime(\"%H:%M\"), location)\n    \n    if current_time.strftime(\"%H:%M\") in travel_times:\n        travel_time = travel_times.get((arrival_time.strftime(\"%H:%M\"), location), 0)\n    else:\n        travel_time = 0\n    \n    # Can we meet this person?\n    if can_meet(current_time + timedelta(minutes=travel_time), duration, end_time):\n        # Calculate the meeting start and end times\n        meeting_start = current_time + timedelta(minutes=travel_time)\n        meeting_end = meeting_start + timedelta(minutes=duration)\n        \n        # Add meeting to itinerary\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": location,\n            \"person\": person,\n            \"start_time\": meeting_start.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end.strftime(\"%H:%M\"),\n        })\n        \n        # Update current time to the end of this meeting\n        current_time = meeting_end\n\n# Output as JSON\noutput = {\"itinerary\": itinerary}\nprint(json.dumps(output, indent=4))\n```",
            "count": "meeting_planning_example_976"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Karen",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "11:17",
                        "end_time": "12:47"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Matthew",
                        "start_time": "12:52",
                        "end_time": "13:37"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "13:52",
                        "end_time": "15:37"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "David",
                        "start_time": "15:54",
                        "end_time": "17:54"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Linda",
                        "start_time": "18:15",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "19:27",
                        "end_time": "20:57"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Travel times in minutes\ntravel_times = {\n    'Russian Hill': {'Marina District': 8, 'Financial District': 11, 'Alamo Square': 13, 'Golden Gate Park': 19, 'The Castro': 18, 'Bayview': 23, 'Sunset District': 24, 'Haight-Ashbury': 17, 'Nob Hill': 5},\n    'Marina District': {'Russian Hill': 7, 'Financial District': 17, 'Alamo Square': 15, 'Golden Gate Park': 16, 'The Castro': 21, 'Bayview': 27, 'Sunset District': 19, 'Haight-Ashbury': 16, 'Nob Hill': 12},\n    'Financial District': {'Russian Hill': 11, 'Marina District': 15, 'Alamo Square': 17, 'Golden Gate Park': 26, 'The Castro': 21, 'Bayview': 19, 'Sunset District': 30, 'Haight-Ashbury': 19, 'Nob Hill': 8},\n    'Alamo Square': {'Russian Hill': 13, 'Marina District': 15, 'Financial District': 17, 'Golden Gate Park': 9, 'The Castro': 8, 'Bayview': 16, 'Sunset District': 16, 'Haight-Ashbury': 5, 'Nob Hill': 11},\n    'Golden Gate Park': {'Russian Hill': 21, 'Marina District': 18, 'Financial District': 23, 'Alamo Square': 9, 'The Castro': 13, 'Bayview': 22, 'Sunset District': 10, 'Haight-Ashbury': 7, 'Nob Hill': 20},\n    'The Castro': {'Russian Hill': 18, 'Marina District': 21, 'Financial District': 21, 'Alamo Square': 8, 'Golden Gate Park': 11, 'Bayview': 19, 'Sunset District': 17, 'Haight-Ashbury': 6, 'Nob Hill': 16},\n    'Bayview': {'Russian Hill': 23, 'Marina District': 27, 'Financial District': 19, 'Alamo Square': 16, 'Golden Gate Park': 22, 'The Castro': 19, 'Sunset District': 23, 'Haight-Ashbury': 19, 'Nob Hill': 20},\n    'Sunset District': {'Russian Hill': 24, 'Marina District': 21, 'Financial District': 30, 'Alamo Square': 17, 'Golden Gate Park': 11, 'The Castro': 17, 'Bayview': 22, 'Haight-Ashbury': 15, 'Nob Hill': 27},\n    'Haight-Ashbury': {'Russian Hill': 17, 'Marina District': 17, 'Financial District': 21, 'Alamo Square': 5, 'Golden Gate Park': 7, 'The Castro': 6, 'Bayview': 18, 'Sunset District': 15, 'Nob Hill': 15},\n    'Nob Hill': {'Russian Hill': 5, 'Marina District': 11, 'Financial District': 9, 'Alamo Square': 11, 'Golden Gate Park': 17, 'The Castro': 17, 'Bayview': 19, 'Sunset District': 24, 'Haight-Ashbury': 13},\n}\n\n# Meeting constraints\nmeeting_constraints = [\n    {'name': 'Mark', 'location': 'Marina District', 'start': '18:45', 'end': '21:00', 'duration': 90},\n    {'name': 'Karen', 'location': 'Financial District', 'start': '09:30', 'end': '12:45', 'duration': 90},\n    {'name': 'Barbara', 'location': 'Alamo Square', 'start': '10:00', 'end': '19:30', 'duration': 90},\n    {'name': 'Nancy', 'location': 'Golden Gate Park', 'start': '16:45', 'end': '20:00', 'duration': 105},\n    {'name': 'David', 'location': 'The Castro', 'start': '09:00', 'end': '18:00', 'duration': 120},\n    {'name': 'Linda', 'location': 'Bayview', 'start': '18:15', 'end': '19:45', 'duration': 45},\n    {'name': 'Kevin', 'location': 'Sunset District', 'start': '10:00', 'end': '17:45', 'duration': 120},\n    {'name': 'Matthew', 'location': 'Haight-Ashbury', 'start': '10:15', 'end': '15:30', 'duration': 45},\n    {'name': 'Andrew', 'location': 'Nob Hill', 'start': '11:45', 'end': '16:45', 'duration': 105}\n]\n\n# Function to convert time string to datetime\ndef convert_time(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\n# Function to calculate meeting schedule\ndef calculate_schedule():\n    start_time = convert_time('09:00')\n    end_time = convert_time('21:00')\n    itinerary = []\n    current_time = start_time\n\n    # Prioritize meetings based on latest end time\n    sorted_constraints = sorted(meeting_constraints, key=lambda x: convert_time(x['end']))\n\n    for constraint in sorted_constraints:\n        duration = timedelta(minutes=constraint['duration'])\n        meeting_start = latest_start_time = convert_time(constraint['start'])\n        meeting_end = convert_time(constraint['end'])\n\n        # Find the optimal place and time to meet\n        found_meeting = False\n        for location in travel_times.keys():\n            travel_time = travel_times['Russian Hill'][location]\n            possible_start_time = current_time + timedelta(minutes=travel_time)\n\n            if possible_start_time > meeting_end:  # If it's too late\n                break\n\n            if possible_start_time >= meeting_start:  # If we can start meeting in the available window\n                if (possible_start_time + duration) <= meeting_end:\n                    itinerary.append({\n                        \"action\": \"meet\",\n                        \"location\": location,\n                        \"person\": constraint['name'],\n                        \"start_time\": possible_start_time.strftime('%H:%M'),\n                        \"end_time\": (possible_start_time + duration).strftime('%H:%M')\n                    })\n                    found_meeting = True\n                    current_time = possible_start_time + duration + timedelta(minutes=travel_times[location]['Russian Hill'])  # Time to go back\n                    break\n\n        if not found_meeting:\n            return None  # If we can't fit the meeting\n    \n    return {\"itinerary\": itinerary}\n\n# Create the schedule\noptimal_schedule = calculate_schedule()\n\n# Output result in JSON format\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_885"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "9:25",
                        "end_time": "9:30"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "15:09",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Charles",
                        "start_time": "17:29",
                        "end_time": "17:30"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Ronald",
                        "start_time": "18:34",
                        "end_time": "18:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "David",
                        "start_time": "9:23",
                        "end_time": "9:38"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "William",
                        "start_time": "9:54",
                        "end_time": "10:54"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Kimberly",
                        "start_time": "11:13",
                        "end_time": "12:58"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mary",
                        "start_time": "14:45",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "15:42",
                        "end_time": "17:42"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Charles",
                        "start_time": "17:56",
                        "end_time": "18:11"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Ronald",
                        "start_time": "18:30",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances in minutes\ntravel_times = {\n    \"Russian Hill\": {\n        \"Sunset District\": 23,\n        \"Union Square\": 10,\n        \"Nob Hill\": 5,\n        \"Marina District\": 7,\n        \"Richmond District\": 14,\n        \"Financial District\": 11,\n        \"Embarcadero\": 8,\n        \"The Castro\": 21,\n        \"Alamo Square\": 15,\n        \"Presidio\": 14\n    },\n    \"Sunset District\": {\n        \"Russian Hill\": 24,\n        \"Union Square\": 30,\n        \"Nob Hill\": 27,\n        \"Marina District\": 21,\n        \"Richmond District\": 12,\n        \"Financial District\": 30,\n        \"Embarcadero\": 30,\n        \"The Castro\": 17,\n        \"Alamo Square\": 17,\n        \"Presidio\": 16\n    },\n    \"Union Square\": {\n        \"Russian Hill\": 13,\n        \"Sunset District\": 27,\n        \"Nob Hill\": 9,\n        \"Marina District\": 18,\n        \"Richmond District\": 20,\n        \"Financial District\": 9,\n        \"Embarcadero\": 11,\n        \"The Castro\": 17,\n        \"Alamo Square\": 15,\n        \"Presidio\": 24\n    },\n    \"Nob Hill\": {\n        \"Russian Hill\": 5,\n        \"Sunset District\": 24,\n        \"Union Square\": 7,\n        \"Marina District\": 11,\n        \"Richmond District\": 14,\n        \"Financial District\": 9,\n        \"Embarcadero\": 9,\n        \"The Castro\": 17,\n        \"Alamo Square\": 11,\n        \"Presidio\": 17\n    },\n    \"Marina District\": {\n        \"Russian Hill\": 8,\n        \"Sunset District\": 19,\n        \"Union Square\": 16,\n        \"Nob Hill\": 12,\n        \"Richmond District\": 11,\n        \"Financial District\": 17,\n        \"Embarcadero\": 14,\n        \"The Castro\": 22,\n        \"Alamo Square\": 15,\n        \"Presidio\": 10\n    },\n    \"Richmond District\": {\n        \"Russian Hill\": 13,\n        \"Sunset District\": 11,\n        \"Union Square\": 21,\n        \"Nob Hill\": 17,\n        \"Marina District\": 9,\n        \"Financial District\": 22,\n        \"Embarcadero\": 19,\n        \"The Castro\": 16,\n        \"Alamo Square\": 13,\n        \"Presidio\": 7\n    },\n    \"Financial District\": {\n        \"Russian Hill\": 11,\n        \"Sunset District\": 30,\n        \"Union Square\": 9,\n        \"Nob Hill\": 8,\n        \"Marina District\": 15,\n        \"Richmond District\": 21,\n        \"Embarcadero\": 4,\n        \"The Castro\": 20,\n        \"Alamo Square\": 17,\n        \"Presidio\": 22\n    },\n    \"Embarcadero\": {\n        \"Russian Hill\": 8,\n        \"Sunset District\": 30,\n        \"Union Square\": 10,\n        \"Nob Hill\": 10,\n        \"Marina District\": 12,\n        \"Richmond District\": 21,\n        \"Financial District\": 5,\n        \"The Castro\": 25,\n        \"Alamo Square\": 19,\n        \"Presidio\": 20\n    },\n    \"The Castro\": {\n        \"Russian Hill\": 18,\n        \"Sunset District\": 17,\n        \"Union Square\": 19,\n        \"Nob Hill\": 16,\n        \"Marina District\": 21,\n        \"Richmond District\": 16,\n        \"Financial District\": 21,\n        \"Embarcadero\": 22,\n        \"Alamo Square\": 8,\n        \"Presidio\": 20\n    },\n    \"Alamo Square\": {\n        \"Russian Hill\": 13,\n        \"Sunset District\": 16,\n        \"Union Square\": 14,\n        \"Nob Hill\": 11,\n        \"Marina District\": 15,\n        \"Richmond District\": 11,\n        \"Financial District\": 17,\n        \"Embarcadero\": 16,\n        \"The Castro\": 8,\n        \"Presidio\": 17\n    },\n    \"Presidio\": {\n        \"Russian Hill\": 14,\n        \"Sunset District\": 15,\n        \"Union Square\": 22,\n        \"Nob Hill\": 18,\n        \"Marina District\": 11,\n        \"Richmond District\": 7,\n        \"Financial District\": 23,\n        \"Embarcadero\": 20,\n        \"The Castro\": 21,\n        \"Alamo Square\": 19\n    }\n}\n\n# Meeting constraints (tuple of (start_time, end_time, duration, location, person))\nmeetings = [\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"), 15, \"Sunset District\", \"David\"),\n    (datetime.strptime(\"09:15\", \"%H:%M\"), datetime.strptime(\"09:45\", \"%H:%M\"), 15, \"Union Square\", \"Kenneth\"),\n    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"19:15\", \"%H:%M\"), 120, \"Nob Hill\", \"Patricia\"),\n    (datetime.strptime(\"14:45\", \"%H:%M\"), datetime.strptime(\"16:45\", \"%H:%M\"), 45, \"Marina District\", \"Mary\"),\n    (datetime.strptime(\"17:15\", \"%H:%M\"), datetime.strptime(\"21:00\", \"%H:%M\"), 15, \"Richmond District\", \"Charles\"),\n    (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:15\", \"%H:%M\"), 90, \"Financial District\", \"Joshua\"),\n    (datetime.strptime(\"18:15\", \"%H:%M\"), datetime.strptime(\"20:45\", \"%H:%M\"), 30, \"Embarcadero\", \"Ronald\"),\n    (datetime.strptime(\"14:15\", \"%H:%M\"), datetime.strptime(\"19:00\", \"%H:%M\"), 105, \"The Castro\", \"George\"),\n    (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"), 105, \"Alamo Square\", \"Kimberly\"),\n    (datetime.strptime(\"07:00\", \"%H:%M\"), datetime.strptime(\"12:45\", \"%H:%M\"), 60, \"Presidio\", \"William\"),\n]\n\n# Start simulation at Russian Hill at 9:00 AM\ncurrent_time = datetime.strptime(\"09:00\", \"%H:%M\")\nitinerary = []\n\n# Helper function to format time in 24-hour format\ndef format_time(dt):\n    return dt.strftime(\"%H:%M\")\n\n# Helper function to meet\ndef schedule_meeting(start_time, end_time, location, person):\n    global current_time, itinerary\n    travel_time = travel_times[\"Russian Hill\"].get(location, 0) if current_time == datetime.strptime(\"09:00\", \"%H:%M\") else travel_times[last_location].get(location, 0)\n    if current_time + timedelta(minutes=travel_time) <= start_time:\n        travel_time_needed = travel_times[\"Russian Hill\"].get(location, 0)\n        end_time = max(end_time, start_time + timedelta(minutes=15))\n        \n        current_time += timedelta(minutes=travel_time + (start_time - current_time).seconds // 60)\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": location,\n            \"person\": person,\n            \"start_time\": format_time(current_time),\n            \"end_time\": format_time(end_time)\n        })\n        \n        current_time = end_time\n        return True\n    return False\n\n# Iterate through meetings to find suitable schedule\nlast_location = \"Russian Hill\"\nfor meeting in meetings:\n    start_time, end_time, duration, location, person = meeting\n    end_time = start_time + timedelta(minutes=duration)\n    \n    if schedule_meeting(start_time, end_time, location, person):\n        last_location = location\n\n# Output the result as a JSON-formatted dictionary\nresult = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_937"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Andrew",
                        "start_time": "11:45",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "13:13",
                        "end_time": "13:43"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Sarah",
                        "start_time": "16:15",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "17:30",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Rebecca",
                        "start_time": "18:51",
                        "end_time": "20:21"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define the travel times in minutes\ntravel_times = {\n    (\"Union Square\", \"Golden Gate Park\"): 22,\n    (\"Union Square\", \"Pacific Heights\"): 15,\n    (\"Union Square\", \"Presidio\"): 24,\n    (\"Union Square\", \"Chinatown\"): 7,\n    (\"Union Square\", \"The Castro\"): 19,\n    (\"Golden Gate Park\", \"Union Square\"): 22,\n    (\"Golden Gate Park\", \"Pacific Heights\"): 16,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"Chinatown\"): 23,\n    (\"Golden Gate Park\", \"The Castro\"): 13,\n    (\"Pacific Heights\", \"Union Square\"): 12,\n    (\"Pacific Heights\", \"Golden Gate Park\"): 15,\n    (\"Pacific Heights\", \"Presidio\"): 11,\n    (\"Pacific Heights\", \"Chinatown\"): 11,\n    (\"Pacific Heights\", \"The Castro\"): 16,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Pacific Heights\"): 11,\n    (\"Presidio\", \"Chinatown\"): 21,\n    (\"Presidio\", \"The Castro\"): 21,\n    (\"Chinatown\", \"Union Square\"): 7,\n    (\"Chinatown\", \"Golden Gate Park\"): 23,\n    (\"Chinatown\", \"Pacific Heights\"): 10,\n    (\"Chinatown\", \"Presidio\"): 19,\n    (\"Chinatown\", \"The Castro\"): 22,\n    (\"The Castro\", \"Union Square\"): 19,\n    (\"The Castro\", \"Golden Gate Park\"): 11,\n    (\"The Castro\", \"Pacific Heights\"): 16,\n    (\"The Castro\", \"Presidio\"): 20,\n    (\"The Castro\", \"Chinatown\"): 20,\n}\n\n# Define the meeting constraints\nmeetings = {\n    \"Andrew\": {\"location\": \"Golden Gate Park\", \"start\": \"11:45\", \"end\": \"14:30\", \"min_duration\": 75},\n    \"Sarah\": {\"location\": \"Pacific Heights\", \"start\": \"16:15\", \"end\": \"18:45\", \"min_duration\": 15},\n    \"Nancy\": {\"location\": \"Presidio\", \"start\": \"17:30\", \"end\": \"19:15\", \"min_duration\": 60},\n    \"Rebecca\": {\"location\": \"Chinatown\", \"start\": \"09:45\", \"end\": \"21:30\", \"min_duration\": 90},\n    \"Robert\": {\"location\": \"The Castro\", \"start\": \"08:30\", \"end\": \"14:15\", \"min_duration\": 30},\n}\n\n# Convert times to datetime objects\ndef time_to_datetime(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Main meeting planner function\ndef schedule_meetings():\n    start_of_day = time_to_datetime(\"09:00\")\n    end_of_day = time_to_datetime(\"21:30\")\n    \n    itinerary = []\n    current_time = start_of_day\n    \n    # Meeting with Rebecca initially, since she can meet earliest\n    rebecca_start = max(current_time + timedelta(minutes=travel_times[(\"Union Square\", \"Chinatown\")]), \n                        time_to_datetime(meetings[\"Rebecca\"][\"start\"]))\n    rebecca_end = rebecca_start + timedelta(minutes=meetings[\"Rebecca\"][\"min_duration\"])\n    \n    if rebecca_end <= end_of_day:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"person\": \"Rebecca\",\n            \"start_time\": rebecca_start.strftime(\"%H:%M\"),\n            \"end_time\": rebecca_end.strftime(\"%H:%M\"),\n        })\n        current_time = rebecca_end + timedelta(minutes=travel_times[(\"Chinatown\", \"Golden Gate Park\")])\n    \n    # Meeting with Andrew next\n    andrew_start = max(current_time + timedelta(minutes=travel_times[(\"Union Square\", \"Golden Gate Park\")]),\n                       time_to_datetime(meetings[\"Andrew\"][\"start\"]))\n    andrew_end = andrew_start + timedelta(minutes=meetings[\"Andrew\"][\"min_duration\"])\n    \n    if andrew_end <= time_to_datetime(meetings[\"Andrew\"][\"end\"]) and \\\n            andrew_end <= end_of_day:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Golden Gate Park\",\n            \"person\": \"Andrew\",\n            \"start_time\": andrew_start.strftime(\"%H:%M\"),\n            \"end_time\": andrew_end.strftime(\"%H:%M\"),\n        })\n        current_time = andrew_end + timedelta(minutes=travel_times[(\"Golden Gate Park\", \"Pacific Heights\")])\n    \n    # Meeting with Sarah\n    sarah_start = max(current_time + timedelta(minutes=travel_times[(\"Pacific Heights\", \"Pacific Heights\")]), \n                      time_to_datetime(meetings[\"Sarah\"][\"start\"]))\n    sarah_end = sarah_start + timedelta(minutes=meetings[\"Sarah\"][\"min_duration\"])\n    \n    if sarah_end <= end_of_day and sarah_end <= time_to_datetime(meetings[\"Sarah\"][\"end\"]):\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Pacific Heights\",\n            \"person\": \"Sarah\",\n            \"start_time\": sarah_start.strftime(\"%H:%M\"),\n            \"end_time\": sarah_end.strftime(\"%H:%M\"),\n        })\n        current_time = sarah_end + timedelta(minutes=travel_times[(\"Pacific Heights\", \"Presidio\")])\n    \n    # Meeting with Nancy last\n    nancy_start = max(current_time + timedelta(minutes=travel_times[(\"Presidio\", \"Presidio\")]), \n                      time_to_datetime(meetings[\"Nancy\"][\"start\"]))\n    nancy_end = nancy_start + timedelta(minutes=meetings[\"Nancy\"][\"min_duration\"])\n    \n    if nancy_end <= end_of_day and nancy_end <= time_to_datetime(meetings[\"Nancy\"][\"end\"]):\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"person\": \"Nancy\",\n            \"start_time\": nancy_start.strftime(\"%H:%M\"),\n            \"end_time\": nancy_end.strftime(\"%H:%M\"),\n        })\n\n    return {\n        \"itinerary\": itinerary\n    }\n\nresult = schedule_meetings()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_403"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Friend",
                        "start_time": "9:00",
                        "end_time": "10:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Friend",
                        "start_time": "10:00",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Friend",
                        "start_time": "11:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Friend",
                        "start_time": "12:00",
                        "end_time": "13:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Friend",
                        "start_time": "13:00",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Friend",
                        "start_time": "14:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "David",
                        "start_time": "15:23",
                        "end_time": "17:08"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "David",
                        "start_time": "16:00",
                        "end_time": "17:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants\nTRAVEL_TIME = 23  # minutes to travel between Golden Gate Park and Chinatown\nARRIVAL_TIME = datetime.strptime(\"9:00\", \"%H:%M\")\nDAVID_START_TIME = datetime.strptime(\"16:00\", \"%H:%M\")\nDAVID_END_TIME = datetime.strptime(\"21:45\", \"%H:%M\")\nMIN_MEETING_TIME = timedelta(minutes=105)\n\ndef calculate_schedule():\n    # Start at Golden Gate Park\n    current_time = ARRIVAL_TIME\n    itinerary = []\n\n    # Possible evening schedule with David\n    # 1. Leave Golden Gate Park at the latest 15:37 to meet David for 105 minutes\n    latest_david_meet_start = DAVID_START_TIME - MIN_MEETING_TIME\n\n    # 2. If we can meet David while arriving no later than 15:37\n    while current_time < latest_david_meet_start:\n        # Meet a friend at Golden Gate Park for 1 hour\n        meeting_start = current_time\n        meeting_end = current_time + timedelta(hours=1)  # 1 hour meeting\n        \n        # Add the meeting to the itinerary\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Golden Gate Park\",\n            \"person\": \"Friend\",\n            \"start_time\": meeting_start.strftime(\"%H:%M\"),\n            \"end_time\": meeting_end.strftime(\"%H:%M\")\n        })\n        \n        # Move current time forward\n        current_time = meeting_end\n\n    # 3. Now travel to Chinatown to meet David\n    if current_time + timedelta(minutes=TRAVEL_TIME) <= DAVID_END_TIME:\n        travel_time = current_time + timedelta(minutes=TRAVEL_TIME)\n        \n        # Meet David from the latest possible start\n        david_meeting_start = travel_time\n        david_meeting_end = david_meeting_start + MIN_MEETING_TIME\n        \n        # Add David meeting to itinerary\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Chinatown\",\n            \"person\": \"David\",\n            \"start_time\": david_meeting_start.strftime(\"%H:%M\"),\n            \"end_time\": david_meeting_end.strftime(\"%H:%M\")\n        })\n        \n        # Update current time after meeting with David\n        current_time = david_meeting_end\n\n    return {\"itinerary\": itinerary}\n\n# Calculate the schedule\nschedule = calculate_schedule()\n\n# Output as JSON\nprint(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_25"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Richard",
                        "start_time": "9:17",
                        "end_time": "11:17"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Richard",
                        "start_time": "9:17",
                        "end_time": "11:17"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants for travel times (in minutes)\nTRAVEL_TIMES = {\n    (\"Bayview\", \"Union Square\"): 17,\n    (\"Bayview\", \"Presidio\"): 31,\n    (\"Union Square\", \"Presidio\"): 24,\n}\n\n# Constraints\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\nrichard_availability_start = datetime.strptime(\"08:45\", \"%H:%M\")\nrichard_availability_end = datetime.strptime(\"13:00\", \"%H:%M\")\ncharles_availability_start = datetime.strptime(\"09:45\", \"%H:%M\")\ncharles_availability_end = datetime.strptime(\"13:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=120)\n\n# Functions to compute schedules\ndef get_travel_time(from_loc, to_loc):\n    return TRAVEL_TIMES.get((from_loc, to_loc), 0)\n\ndef compute_schedule():\n    schedule = []\n    current_time = arrival_time\n    \n    # First, meet Richard\n    if current_time < richard_availability_start:\n        current_time = richard_availability_start\n        \n    end_time_richard = current_time + meeting_duration\n    if end_time_richard > richard_availability_end:\n        end_time_richard = richard_availability_end\n\n    travel_to_union_square = get_travel_time(\"Bayview\", \"Union Square\")\n    current_time += timedelta(minutes=travel_to_union_square)\n\n    if current_time + meeting_duration <= richard_availability_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Union Square\",\n            \"person\": \"Richard\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": (current_time + meeting_duration).strftime(\"%H:%M\"),\n        })\n        current_time += meeting_duration  # Update current time after meeting\n    \n    # Now, travel to meet Charles\n    travel_to_presidio = get_travel_time(\"Union Square\", \"Presidio\")\n    current_time += timedelta(minutes=travel_to_presidio)\n    \n    if current_time < charles_availability_start:\n        current_time = charles_availability_start\n        \n    end_time_charles = current_time + meeting_duration\n    if end_time_charles > charles_availability_end:\n        end_time_charles = charles_availability_end\n\n    if current_time + meeting_duration <= charles_availability_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"person\": \"Charles\",\n            \"start_time\": current_time.strftime(\"%H:%M\"),\n            \"end_time\": (current_time + meeting_duration).strftime(\"%H:%M\"),\n        })\n    \n    return {\"itinerary\": schedule}\n\n# Computing the schedule\nitinerary = compute_schedule()\n\n# Output the result as JSON\nprint(json.dumps(itinerary, indent=2))\n```",
            "count": "meeting_planning_example_118"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Matthew",
                        "start_time": "9:15",
                        "end_time": "9:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Robert",
                        "start_time": "10:15",
                        "end_time": "10:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joseph",
                        "start_time": "14:15",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Patricia",
                        "start_time": "17:00",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Sarah",
                        "start_time": "18:00",
                        "end_time": "19:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Matthew",
                        "start_time": "9:16",
                        "end_time": "9:31"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Patricia",
                        "start_time": "17:00",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joseph",
                        "start_time": "18:15",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Sarah",
                        "start_time": "19:04",
                        "end_time": "20:49"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Robert",
                        "start_time": "21:06",
                        "end_time": "21:21"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel times in minutes\ntravel_times = {\n    (\"Golden Gate Park\", \"Haight-Ashbury\"): 7,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Golden Gate Park\", \"Marina District\"): 16,\n    (\"Golden Gate Park\", \"Financial District\"): 26,\n    (\"Golden Gate Park\", \"Union Square\"): 22,\n    (\"Haight-Ashbury\", \"Golden Gate Park\"): 7,\n    (\"Haight-Ashbury\", \"Sunset District\"): 15,\n    (\"Haight-Ashbury\", \"Marina District\"): 17,\n    (\"Haight-Ashbury\", \"Financial District\"): 21,\n    (\"Haight-Ashbury\", \"Union Square\"): 17,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"Sunset District\", \"Haight-Ashbury\"): 15,\n    (\"Sunset District\", \"Marina District\"): 21,\n    (\"Sunset District\", \"Financial District\"): 30,\n    (\"Sunset District\", \"Union Square\"): 30,\n    (\"Marina District\", \"Golden Gate Park\"): 18,\n    (\"Marina District\", \"Haight-Ashbury\"): 16,\n    (\"Marina District\", \"Sunset District\"): 19,\n    (\"Marina District\", \"Financial District\"): 17,\n    (\"Marina District\", \"Union Square\"): 16,\n    (\"Financial District\", \"Golden Gate Park\"): 23,\n    (\"Financial District\", \"Haight-Ashbury\"): 19,\n    (\"Financial District\", \"Sunset District\"): 31,\n    (\"Financial District\", \"Marina District\"): 15,\n    (\"Financial District\", \"Union Square\"): 9,\n    (\"Union Square\", \"Golden Gate Park\"): 22,\n    (\"Union Square\", \"Haight-Ashbury\"): 18,\n    (\"Union Square\", \"Sunset District\"): 26,\n    (\"Union Square\", \"Marina District\"): 18,\n    (\"Union Square\", \"Financial District\"): 9,\n}\n\n# Meeting constraints\nmeeting_constraints = {\n    \"Sarah\": {\"location\": \"Haight-Ashbury\", \"start\": \"17:00\", \"end\": \"21:30\", \"duration\": 105},\n    \"Patricia\": {\"location\": \"Sunset District\", \"start\": \"17:00\", \"end\": \"19:45\", \"duration\": 45},\n    \"Matthew\": {\"location\": \"Marina District\", \"start\": \"09:15\", \"end\": \"12:00\", \"duration\": 15},\n    \"Joseph\": {\"location\": \"Financial District\", \"start\": \"14:15\", \"end\": \"18:45\", \"duration\": 30},\n    \"Robert\": {\"location\": \"Union Square\", \"start\": \"10:15\", \"end\": \"21:45\", \"duration\": 15},\n}\n\n# Convert time strings to datetime objects\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Calculate the optimal meeting schedule\ndef calculate_schedule():\n    itinerary = []\n    current_time = parse_time(\"09:00\")  # Start time at Golden Gate Park\n\n    # Meet Matthew first\n    matthew_start = max(current_time, parse_time(meeting_constraints[\"Matthew\"][\"start\"]))\n    matthew_end = matthew_start + timedelta(minutes=15)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina District\",\n        \"person\": \"Matthew\",\n        \"start_time\": matthew_start.strftime(\"%H:%M\"),\n        \"end_time\": matthew_end.strftime(\"%H:%M\"),\n    })\n    current_time = matthew_end + timedelta(minutes=travel_times[(\"Marina District\", \"Union Square\")])\n\n    # Meet Robert next\n    robert_start = max(current_time, parse_time(meeting_constraints[\"Robert\"][\"start\"]))\n    robert_end = robert_start + timedelta(minutes=15)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Union Square\",\n        \"person\": \"Robert\",\n        \"start_time\": robert_start.strftime(\"%H:%M\"),\n        \"end_time\": robert_end.strftime(\"%H:%M\"),\n    })\n    current_time = robert_end + timedelta(minutes=travel_times[(\"Union Square\", \"Financial District\")])\n\n    # Meet Joseph next\n    joseph_start = max(current_time, parse_time(meeting_constraints[\"Joseph\"][\"start\"]))\n    joseph_end = joseph_start + timedelta(minutes=30)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Financial District\",\n        \"person\": \"Joseph\",\n        \"start_time\": joseph_start.strftime(\"%H:%M\"),\n        \"end_time\": joseph_end.strftime(\"%H:%M\"),\n    })\n    current_time = joseph_end + timedelta(minutes=travel_times[(\"Financial District\", \"Sunset District\")])\n\n    # Meet Patricia\n    patricia_start = max(current_time, parse_time(meeting_constraints[\"Patricia\"][\"start\"]))\n    patricia_end = patricia_start + timedelta(minutes=45)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Sunset District\",\n        \"person\": \"Patricia\",\n        \"start_time\": patricia_start.strftime(\"%H:%M\"),\n        \"end_time\": patricia_end.strftime(\"%H:%M\"),\n    })\n    current_time = patricia_end + timedelta(minutes=travel_times[(\"Sunset District\", \"Haight-Ashbury\")])\n\n    # Meet Sarah last\n    sarah_start = max(current_time, parse_time(meeting_constraints[\"Sarah\"][\"start\"]))\n    sarah_end = sarah_start + timedelta(minutes=105)\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Haight-Ashbury\",\n        \"person\": \"Sarah\",\n        \"start_time\": sarah_start.strftime(\"%H:%M\"),\n        \"end_time\": sarah_end.strftime(\"%H:%M\"),\n    })\n\n    return {\"itinerary\": itinerary}\n\n# Main function to output the itinerary\ndef main():\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_402"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "9:23",
                        "end_time": "10:23"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jeffrey",
                        "start_time": "10:34",
                        "end_time": "11:19"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Nancy",
                        "start_time": "11:36",
                        "end_time": "13:06"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Jason",
                        "start_time": "13:21",
                        "end_time": "13:36"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "9:23",
                        "end_time": "10:23"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Nancy",
                        "start_time": "11:00",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Jeffrey",
                        "start_time": "12:47",
                        "end_time": "13:32"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Jason",
                        "start_time": "16:45",
                        "end_time": "17:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times in minutes\ntravel_times = {\n    (\"Bayview\", \"Russian Hill\"): 23,\n    (\"Bayview\", \"Alamo Square\"): 16,\n    (\"Bayview\", \"North Beach\"): 21,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Russian Hill\", \"Bayview\"): 23,\n    (\"Russian Hill\", \"Alamo Square\"): 15,\n    (\"Russian Hill\", \"North Beach\"): 5,\n    (\"Russian Hill\", \"Financial District\"): 11,\n    (\"Alamo Square\", \"Bayview\"): 16,\n    (\"Alamo Square\", \"Russian Hill\"): 13,\n    (\"Alamo Square\", \"North Beach\"): 15,\n    (\"Alamo Square\", \"Financial District\"): 17,\n    (\"North Beach\", \"Bayview\"): 22,\n    (\"North Beach\", \"Russian Hill\"): 4,\n    (\"North Beach\", \"Alamo Square\"): 16,\n    (\"North Beach\", \"Financial District\"): 8,\n    (\"Financial District\", \"Bayview\"): 19,\n    (\"Financial District\", \"Russian Hill\"): 10,\n    (\"Financial District\", \"Alamo Square\"): 17,\n    (\"Financial District\", \"North Beach\"): 7,\n}\n\n# Meeting constraints\nconstraints = {\n    \"Joseph\": {\"location\": \"Russian Hill\", \"start\": \"8:30\", \"end\": \"19:15\", \"duration\": 60},\n    \"Nancy\": {\"location\": \"Alamo Square\", \"start\": \"11:00\", \"end\": \"16:00\", \"duration\": 90},\n    \"Jason\": {\"location\": \"North Beach\", \"start\": \"16:45\", \"end\": \"21:45\", \"duration\": 15},\n    \"Jeffrey\": {\"location\": \"Financial District\", \"start\": \"10:30\", \"end\": \"15:45\", \"duration\": 45},\n}\n\n# Calculate available time slots given the constraints and travel times\ndef get_available_times(start_time, end_time, travel_time, duration):\n    available_times = []\n    current_time = start_time\n    while current_time + duration <= end_time:\n        available_times.append(current_time)\n        current_time += timedelta(minutes=5)  # Check every 5 minutes for a slot\n    return available_times\n\n# Schedule meeting considering travel and duration constraints\ndef schedule_meetings():\n    start_day = datetime.strptime(\"9:00\", \"%H:%M\")  # Starting point in Bayview\n    schedule = []\n\n    # Meet Joseph first (must be in Russian Hill)\n    joseph_start = datetime.strptime(constraints[\"Joseph\"][\"start\"], \"%H:%M\")\n    joseph_end = datetime.strptime(constraints[\"Joseph\"][\"end\"], \"%H:%M\")\n    \n    travel_time_to_joseph = travel_times[(\"Bayview\", \"Russian Hill\")]\n    joseph_meeting_times = get_available_times(\n        start_day + timedelta(minutes=travel_time_to_joseph),\n        joseph_end,\n        travel_time_to_joseph,\n        timedelta(minutes=constraints[\"Joseph\"][\"duration\"])\n    )\n    \n    # Pick the first available time to meet Joseph\n    if joseph_meeting_times:\n        joseph_meeting_time = joseph_meeting_times[0]\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Russian Hill\",\n            \"person\": \"Joseph\",\n            \"start_time\": joseph_meeting_time.strftime(\"%H:%M\"),\n            \"end_time\": (joseph_meeting_time + timedelta(minutes=constraints[\"Joseph\"][\"duration\"])).strftime(\"%H:%M\"),\n        })\n        \n        # After meeting Joseph, head to Jeffrey\n        travel_time_to_jeffrey = travel_times[(\"Russian Hill\", \"Financial District\")]\n        travel_time_back_to_bayview = travel_times[(\"Bayview\", \"Financial District\")]\n        \n        # Update current time after Joseph meeting\n        current_time = joseph_meeting_time + timedelta(minutes=constraints[\"Joseph\"][\"duration\"] + travel_time_to_jeffrey)\n        \n        jeffrey_start = datetime.strptime(constraints[\"Jeffrey\"][\"start\"], \"%H:%M\")\n        jeffrey_end = datetime.strptime(constraints[\"Jeffrey\"][\"end\"], \"%H:%M\")\n        \n        # Ensure meeting Jeffrey is possible\n        if current_time < jeffrey_start:\n            current_time = jeffrey_start + timedelta(minutes=travel_time_back_to_bayview)\n\n        # Schedule meeting with Jeffrey\n        jeffrey_meeting_times = get_available_times(current_time, jeffrey_end, travel_time_back_to_bayview, timedelta(minutes=constraints[\"Jeffrey\"][\"duration\"]))\n        if jeffrey_meeting_times:\n            jeffrey_meeting_time = jeffrey_meeting_times[0]\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Financial District\",\n                \"person\": \"Jeffrey\",\n                \"start_time\": jeffrey_meeting_time.strftime(\"%H:%M\"),\n                \"end_time\": (jeffrey_meeting_time + timedelta(minutes=constraints[\"Jeffrey\"][\"duration\"])).strftime(\"%H:%M\"),\n            })\n            \n            # After meeting Jeffrey, head to Nancy\n            travel_time_to_nancy = travel_times[(\"Financial District\", \"Alamo Square\")]\n            current_time = jeffrey_meeting_time + timedelta(minutes=constraints[\"Jeffrey\"][\"duration\"] + travel_time_to_nancy)\n            \n            nancy_start = datetime.strptime(constraints[\"Nancy\"][\"start\"], \"%H:%M\")\n            nancy_end = datetime.strptime(constraints[\"Nancy\"][\"end\"], \"%H:%M\")\n            \n            # Schedule meeting with Nancy\n            nancy_meeting_times = get_available_times(current_time, nancy_end, travel_time_to_nancy, timedelta(minutes=constraints[\"Nancy\"][\"duration\"]))\n            if nancy_meeting_times:\n                nancy_meeting_time = nancy_meeting_times[0]\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Alamo Square\",\n                    \"person\": \"Nancy\",\n                    \"start_time\": nancy_meeting_time.strftime(\"%H:%M\"),\n                    \"end_time\": (nancy_meeting_time + timedelta(minutes=constraints[\"Nancy\"][\"duration\"])).strftime(\"%H:%M\"),\n                })\n                \n                # Finally, head to Jason\n                travel_time_to_jason = travel_times[(\"Alamo Square\", \"North Beach\")]\n                current_time = nancy_meeting_time + timedelta(minutes=constraints[\"Nancy\"][\"duration\"] + travel_time_to_jason)\n                \n                jason_start = datetime.strptime(constraints[\"Jason\"][\"start\"], \"%H:%M\")\n                jason_end = datetime.strptime(constraints[\"Jason\"][\"end\"], \"%H:%M\")\n                \n                # Schedule meeting with Jason\n                jason_meeting_times = get_available_times(current_time, jason_end, travel_time_to_jason, timedelta(minutes=constraints[\"Jason\"][\"duration\"]))\n                if jason_meeting_times:\n                    jason_meeting_time = jason_meeting_times[0]\n                    schedule.append({\n                        \"action\": \"meet\",\n                        \"location\": \"North Beach\",\n                        \"person\": \"Jason\",\n                        \"start_time\": jason_meeting_time.strftime(\"%H:%M\"),\n                        \"end_time\": (jason_meeting_time + timedelta(minutes=constraints[\"Jason\"][\"duration\"])).strftime(\"%H:%M\"),\n                    })\n\n    return {\"itinerary\": schedule}\n\n# Execute scheduling and print result as JSON\nif __name__ == \"__main__\":\n    result = schedule_meetings()\n    print(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_368"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina",
                        "person": "Carol",
                        "start_time": "11:30",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jessica",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Carol",
                        "start_time": "11:30",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jessica",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants for travel time between districts in minutes\nTRAVEL_TIMES = {\n    ('Richmond', 'Pacific Heights'): 10,\n    ('Richmond', 'Marina'): 9,\n    ('Pacific Heights', 'Richmond'): 12,\n    ('Pacific Heights', 'Marina'): 6,\n    ('Marina', 'Richmond'): 11,\n    ('Marina', 'Pacific Heights'): 7,\n}\n\n# Meeting constraints\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\njessica_start = datetime.strptime(\"15:30\", \"%H:%M\")\njessica_end = datetime.strptime(\"16:45\", \"%H:%M\")\ncarol_start = datetime.strptime(\"11:30\", \"%H:%M\")\ncarol_end = datetime.strptime(\"15:00\", \"%H:%M\")\nmeet_jessica_duration = timedelta(minutes=45)\nmeet_carol_duration = timedelta(minutes=60)\n\n# Function to compute the itinerary\ndef compute_itinerary():\n    itinerary = []\n    current_time = arrival_time\n\n    # Schedule meeting with Carol at Marina\n    travel_to_marina = TRAVEL_TIMES[('Richmond', 'Marina')]\n    arrive_at_marina = current_time + timedelta(minutes=travel_to_marina)\n\n    if arrive_at_marina < carol_start:\n        # Wait until Carol is available\n        current_time = carol_start\n\n    # Schedule meeting with Carol from current_time\n    meet_carol_start = current_time\n    meet_carol_end = meet_carol_start + meet_carol_duration\n\n    if meet_carol_end > carol_end:\n        # Adjust if meeting with Carol extends beyond her availability\n        meet_carol_end = carol_end\n\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Marina\",\n        \"person\": \"Carol\",\n        \"start_time\": meet_carol_start.strftime(\"%H:%M\"),\n        \"end_time\": meet_carol_end.strftime(\"%H:%M\"),\n    })\n\n    # Update current time after meeting with Carol\n    current_time = meet_carol_end\n\n    # Travel to Pacific Heights to meet Jessica\n    travel_to_pacific_heights = TRAVEL_TIMES[('Marina', 'Pacific Heights')]\n    arrive_at_pacific_heights = current_time + timedelta(minutes=travel_to_pacific_heights)\n\n    if arrive_at_pacific_heights < jessica_start:\n        # Wait until Jessica is available\n        current_time = jessica_start\n    else:\n        current_time = arrive_at_pacific_heights\n\n    # Schedule meeting with Jessica\n    meet_jessica_start = current_time\n    meet_jessica_end = meet_jessica_start + meet_jessica_duration\n\n    if meet_jessica_end > jessica_end:\n        # Adjust if meeting with Jessica extends beyond her availability\n        meet_jessica_end = jessica_end\n\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": \"Pacific Heights\",\n        \"person\": \"Jessica\",\n        \"start_time\": meet_jessica_start.strftime(\"%H:%M\"),\n        \"end_time\": meet_jessica_end.strftime(\"%H:%M\"),\n    })\n\n    return {\"itinerary\": itinerary}\n\n# Get the optimal meeting schedule\noptimal_schedule = compute_itinerary()\n\n# Output the result as a JSON-formatted dictionary\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_115"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Robert",
                        "start_time": "11:15",
                        "end_time": "13:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define input variables\ntravel_times = {\n    \"Nob Hill to Presidio\": 17,\n    \"Presidio to Nob Hill\": 18\n}\narrival_time_nob_hill = datetime.strptime(\"09:00\", \"%H:%M\")\nrobert_start_time = datetime.strptime(\"11:15\", \"%H:%M\")\nrobert_end_time = datetime.strptime(\"17:45\", \"%H:%M\")  # Meeting can end at this time\nmeet_duration = timedelta(minutes=120)\n\n# Calculate when you can leave Nob Hill to meet Robert\ndef calculate_schedule():\n    # You need to arrive at Presidio before Robert can meet you\n    travel_to_presidio = travel_times[\"Nob Hill to Presidio\"]\n    latest_time_to_leave_nob_hill = robert_start_time - timedelta(minutes=travel_to_presidio)\n    \n    # You can start meeting Robert after arriving at Presidio\n    first_available_meeting_start = robert_start_time\n    meeting_end_time = first_available_meeting_start + meet_duration\n\n    meeting_times = []\n    \n    if latest_time_to_leave_nob_hill < first_available_meeting_start:\n        # You cannot reach Robert in time before he starts meeting\n        return meeting_times\n    \n    # Check if you can meet Robert all at once\n    if meeting_end_time <= robert_end_time:\n        start_presidio_meeting = first_available_meeting_start.strftime(\"%H:%M\")\n        end_presidio_meeting = meeting_end_time.strftime(\"%H:%M\")\n        meeting_times.append({\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"person\": \"Robert\",\n            \"start_time\": start_presidio_meeting,\n            \"end_time\": end_presidio_meeting\n        })\n        return meeting_times\n    \n    # If we cannot meet continuously for 120 minutes within the allowed time, we'll need to adjust\n    # Check for possible shorter meetings that still meet the duration\n    # Break down into two meetings if needed\n    total_meeting_time = 0\n    available_meeting_start = first_available_meeting_start\n    while available_meeting_start < robert_end_time:\n        meeting_end = available_meeting_start + meet_duration\n        if meeting_end <= robert_end_time and total_meeting_time + meet_duration <= timedelta(minutes=240):\n            meeting_times.append({\n                \"action\": \"meet\",\n                \"location\": \"Presidio\",\n                \"person\": \"Robert\",\n                \"start_time\": available_meeting_start.strftime(\"%H:%M\"),\n                \"end_time\": meeting_end.strftime(\"%H:%M\")\n            })\n            total_meeting_time += meet_duration\n            available_meeting_start = meeting_end  # Move start to the end of the last meeting\n        else:\n            break\n\n    return meeting_times\n\n# Run the schedule calculation\nitinerary = calculate_schedule()\n\n# Prepare output in the required JSON format\noutput = {\n    \"itinerary\": itinerary\n}\n\n# Print the JSON formatted output\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_66"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Stephanie",
                        "start_time": "9:05",
                        "end_time": "10:35"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "John",
                        "start_time": "10:52",
                        "end_time": "11:22"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Stephanie",
                        "start_time": "9:05",
                        "end_time": "10:35"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "John",
                        "start_time": "10:52",
                        "end_time": "11:22"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times\ntravel_times = {\n    (\"Embarcadero\", \"Financial District\"): 5,\n    (\"Embarcadero\", \"Alamo Square\"): 19,\n    (\"Financial District\", \"Embarcadero\"): 4,\n    (\"Financial District\", \"Alamo Square\"): 17,\n    (\"Alamo Square\", \"Embarcadero\"): 17,\n    (\"Alamo Square\", \"Financial District\"): 17,\n}\n\n# Define meeting constraints\narrival_time = datetime.strptime(\"9:00\", \"%H:%M\")\nstephanie_start = datetime.strptime(\"8:15\", \"%H:%M\")\nstephanie_end = datetime.strptime(\"11:30\", \"%H:%M\")\njohn_start = datetime.strptime(\"10:15\", \"%H:%M\")\njohn_end = datetime.strptime(\"20:45\", \"%H:%M\")\n\nstephanie_meeting_time = 90  # minutes\njohn_meeting_time = 30  # minutes\n\n# Initialize itinerary\nitinerary = []\n\n# Helper function to format time\ndef format_time(dt):\n    return dt.strftime(\"%H:%M\")\n\n# Function to schedule meetings\ndef schedule_meetings():\n    global itinerary\n    # Meeting with Stephanie\n    start_time = arrival_time + timedelta(minutes=travel_times[(\"Embarcadero\", \"Financial District\")])\n    \n    if start_time < stephanie_start:\n        start_time = stephanie_start\n\n    end_time = start_time + timedelta(minutes=stephanie_meeting_time)\n    \n    if end_time > stephanie_end:\n        end_time = stephanie_end\n\n    if end_time - start_time >= timedelta(minutes=stephanie_meeting_time):\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Financial District\",\n            \"person\": \"Stephanie\",\n            \"start_time\": format_time(start_time),\n            \"end_time\": format_time(end_time)\n        })\n        \n        # Travel to John\n        travel_to_john = end_time + timedelta(minutes=travel_times[(\"Financial District\", \"Alamo Square\")])\n        \n        # Meeting with John\n        john_meeting_start = max(travel_to_john, john_start)\n        john_meeting_end = john_meeting_start + timedelta(minutes=john_meeting_time)\n\n        if john_meeting_end <= john_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Alamo Square\",\n                \"person\": \"John\",\n                \"start_time\": format_time(john_meeting_start),\n                \"end_time\": format_time(john_meeting_end)\n            })\n\nschedule_meetings()\n\n# Output the result in JSON format\noutput = {\"itinerary\": itinerary}\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_125"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Jason",
                        "start_time": "10:00",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kenneth",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Jason",
                        "start_time": "10:00",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kenneth",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef calculate_schedule():\n    # Define travel time (in minutes) between locations\n    travel_times = {\n        (\"Pacific Heights\", \"Presidio\"): 11,\n        (\"Pacific Heights\", \"Marina District\"): 6,\n        (\"Presidio\", \"Pacific Heights\"): 11,\n        (\"Presidio\", \"Marina District\"): 10,\n        (\"Marina District\", \"Pacific Heights\"): 7,\n        (\"Marina District\", \"Presidio\"): 10,\n    }\n    \n    # Define meeting constraints\n    arrival_time_pacific = datetime.strptime(\"09:00\", \"%H:%M\")\n    meeting_window_jason_start = datetime.strptime(\"10:00\", \"%H:%M\")\n    meeting_window_jason_end = datetime.strptime(\"16:15\", \"%H:%M\")\n    meeting_duration_jason = timedelta(minutes=90)\n    \n    meeting_window_kenneth_start = datetime.strptime(\"15:30\", \"%H:%M\")\n    meeting_window_kenneth_end = datetime.strptime(\"16:45\", \"%H:%M\")\n    meeting_duration_kenneth = timedelta(minutes=45)\n    \n    schedule = []\n    \n    # Try to meet Jason first\n    # Arrive at Presidio first to meet Jason\n    travel_to_presidio = travel_times[(\"Pacific Heights\", \"Presidio\")]\n    jason_start_time = max(arrival_time_pacific + timedelta(minutes=travel_to_presidio), meeting_window_jason_start)\n    jason_end_time = jason_start_time + meeting_duration_jason\n    \n    if jason_end_time <= meeting_window_jason_end:\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Presidio\",\n            \"person\": \"Jason\",\n            \"start_time\": jason_start_time.strftime(\"%H:%M\"),\n            \"end_time\": jason_end_time.strftime(\"%H:%M\"),\n        })\n        \n        # Move to Marina District to meet Kenneth\n        travel_to_marina = travel_times[(\"Presidio\", \"Marina District\")]\n        travel_time_after_jason = travel_to_marina\n\n        kenneth_start_time = max(jason_end_time + timedelta(minutes=travel_time_after_jason), meeting_window_kenneth_start)\n        kenneth_end_time = kenneth_start_time + meeting_duration_kenneth\n        \n        if kenneth_end_time <= meeting_window_kenneth_end:\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Marina District\",\n                \"person\": \"Kenneth\",\n                \"start_time\": kenneth_start_time.strftime(\"%H:%M\"),\n                \"end_time\": kenneth_end_time.strftime(\"%H:%M\"),\n            })\n        else:\n            # If unable to meet Kenneth after Jason, it's best to try meeting Kenneth first\n            # Try to meet Kenneth before Jason\n            travel_to_marina = travel_times[(\"Pacific Heights\", \"Marina District\")]\n            kenneth_start_time = max(arrival_time_pacific + timedelta(minutes=travel_to_marina), meeting_window_kenneth_start)\n            kenneth_end_time = kenneth_start_time + meeting_duration_kenneth\n            \n            if kenneth_end_time <= meeting_window_kenneth_end:\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Marina District\",\n                    \"person\": \"Kenneth\",\n                    \"start_time\": kenneth_start_time.strftime(\"%H:%M\"),\n                    \"end_time\": kenneth_end_time.strftime(\"%H:%M\"),\n                })\n                \n                # Move to Presidio to meet Jason\n                travel_to_presidio = travel_times[(\"Marina District\", \"Presidio\")]\n                jason_start_time = max(kenneth_end_time + timedelta(minutes=travel_to_presidio), meeting_window_jason_start)\n                jason_end_time = jason_start_time + meeting_duration_jason\n                \n                if jason_end_time <= meeting_window_jason_end:\n                    schedule.append({\n                        \"action\": \"meet\",\n                        \"location\": \"Presidio\",\n                        \"person\": \"Jason\",\n                        \"start_time\": jason_start_time.strftime(\"%H:%M\"),\n                        \"end_time\": jason_end_time.strftime(\"%H:%M\"),\n                    })\n                    \n    return json.dumps({\"itinerary\": schedule}, indent=2)\n\nif __name__ == \"__main__\":\n    print(\"SOLUTION:\")\n    print(calculate_schedule())\n```",
            "count": "meeting_planning_example_131"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Jeffrey",
                        "start_time": "12:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Charles",
                        "start_time": "13:15",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Robert",
                        "start_time": "15:18",
                        "end_time": "16:48"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kimberly",
                        "start_time": "17:00",
                        "end_time": "18:15"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Karen",
                        "start_time": "18:29",
                        "end_time": "19:29"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Brian",
                        "start_time": "19:49",
                        "end_time": "20:49"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Joshua",
                        "start_time": "21:00",
                        "end_time": "22:00"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    (\"Sunset District\", \"Presidio\"): 16,\n    (\"Presidio\", \"Nob Hill\"): 18,\n    (\"Nob Hill\", \"Pacific Heights\"): 8,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"Mission District\", \"Marina District\"): 20,\n    (\"Marina District\", \"North Beach\"): 11,\n    (\"North Beach\", \"Russian Hill\"): 5,\n    (\"Russian Hill\", \"Richmond District\"): 14,\n    (\"Richmond District\", \"Embarcadero\"): 19,\n    (\"Embarcadero\", \"Alamo Square\"): 19,\n    # Additional necessary routes\n    (\"Sunset District\", \"Nob Hill\"): 27,\n    (\"Sunset District\", \"Pacific Heights\"): 21,\n    (\"Sunset District\", \"Mission District\"): 25,\n    (\"Sunset District\", \"Marina District\"): 21,\n    (\"Sunset District\", \"North Beach\"): 28,\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"Richmond District\"): 12,\n    (\"Sunset District\", \"Embarcadero\"): 30,\n    (\"Sunset District\", \"Alamo Square\"): 17,\n    # and so on for combinations...\n}\n\n# Participant constraints\nparticipants = {\n    \"Charles\": {\"location\": \"Presidio\", \"start\": \"13:15\", \"end\": \"15:00\", \"min_time\": 105},\n    \"Robert\": {\"location\": \"Nob Hill\", \"start\": \"13:15\", \"end\": \"17:30\", \"min_time\": 90},\n    \"Nancy\": {\"location\": \"Pacific Heights\", \"start\": \"14:45\", \"end\": \"22:00\", \"min_time\": 105},\n    \"Brian\": {\"location\": \"Mission District\", \"start\": \"15:30\", \"end\": \"22:00\", \"min_time\": 60},\n    \"Kimberly\": {\"location\": \"Marina District\", \"start\": \"17:00\", \"end\": \"19:45\", \"min_time\": 75},\n    \"David\": {\"location\": \"North Beach\", \"start\": \"14:45\", \"end\": \"16:30\", \"min_time\": 75},\n    \"William\": {\"location\": \"Russian Hill\", \"start\": \"12:30\", \"end\": \"19:15\", \"min_time\": 120},\n    \"Jeffrey\": {\"location\": \"Richmond District\", \"start\": \"12:00\", \"end\": \"19:15\", \"min_time\": 45},\n    \"Karen\": {\"location\": \"Embarcadero\", \"start\": \"14:15\", \"end\": \"20:45\", \"min_time\": 60},\n    \"Joshua\": {\"location\": \"Alamo Square\", \"start\": \"18:45\", \"end\": \"22:00\", \"min_time\": 60},\n}\n\n# Meeting scheduling logic\nstart_meeting_time = datetime.strptime(\"09:00\", \"%H:%M\")\nitinerary = []\n\ndef add_meeting(person, start, duration):\n    end_time = start + timedelta(minutes=duration)\n    itinerary.append({\"action\": \"meet\", \"location\": participants[person][\"location\"],\n                      \"person\": person, \"start_time\": start.strftime(\"%H:%M\"),\n                      \"end_time\": end_time.strftime(\"%H:%M\")})\n    return end_time\n\n# Function to find the next meeting slot\ndef find_meeting_schedule(current_time):\n    for person, details in participants.items():\n        available_start = datetime.strptime(details[\"start\"], \"%H:%M\")\n        available_end = datetime.strptime(details[\"end\"], \"%H:%M\")\n        duration = details[\"min_time\"]\n        travel_time = travel_times.get((current_location, details[\"location\"]), float('inf'))\n\n        if current_time + timedelta(minutes=travel_time) <= available_start:\n            # Travel in the morning before meeting\n            arrival_time = available_start\n        else:\n            arrival_time = current_time + timedelta(minutes=travel_time)\n\n        if arrival_time + timedelta(minutes=duration) <= available_end:\n            # We can schedule a meeting\n            current_time = add_meeting(person, arrival_time, duration)\n            current_location = details[\"location\"]\n\n# Start scheduling\ncurrent_location = \"Sunset District\"\ncurrent_time = start_meeting_time\n\n# Execute scheduling\nfind_meeting_schedule(current_time)\n\n# Output the itinerary in JSON format\nresult = {\"itinerary\": itinerary}\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_974"
        },
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Rebecca",
                        "start_time": "14:45",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Mark",
                        "start_time": "15:57",
                        "end_time": "16:42"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Richard",
                        "start_time": "16:52",
                        "end_time": "18:22"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Margaret",
                        "start_time": "18:28",
                        "end_time": "18:43"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Matthew",
                        "start_time": "18:50",
                        "end_time": "20:20"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times (in minutes) as a nested dictionary\ntravel_times = {\n    \"Chinatown\": {\n        \"Embarcadero\": 5,\n        \"Pacific Heights\": 10,\n        \"Russian Hill\": 7,\n        \"Haight-Ashbury\": 19,\n        \"Golden Gate Park\": 23,\n        \"Fisherman's Wharf\": 8,\n        \"Sunset District\": 29,\n        \"The Castro\": 22\n    },\n    \"Embarcadero\": {\n        \"Chinatown\": 7,\n        \"Pacific Heights\": 11,\n        \"Russian Hill\": 8,\n        \"Haight-Ashbury\": 21,\n        \"Golden Gate Park\": 25,\n        \"Fisherman's Wharf\": 6,\n        \"Sunset District\": 30,\n        \"The Castro\": 25\n    },\n    \"Pacific Heights\": {\n        \"Chinatown\": 11,\n        \"Embarcadero\": 10,\n        \"Russian Hill\": 7,\n        \"Haight-Ashbury\": 11,\n        \"Golden Gate Park\": 15,\n        \"Fisherman's Wharf\": 13,\n        \"Sunset District\": 21,\n        \"The Castro\": 16\n    },\n    \"Russian Hill\": {\n        \"Chinatown\": 9,\n        \"Embarcadero\": 8,\n        \"Pacific Heights\": 7,\n        \"Haight-Ashbury\": 17,\n        \"Golden Gate Park\": 21,\n        \"Fisherman's Wharf\": 7,\n        \"Sunset District\": 23,\n        \"The Castro\": 21\n    },\n    \"Haight-Ashbury\": {\n        \"Chinatown\": 19,\n        \"Embarcadero\": 20,\n        \"Pacific Heights\": 12,\n        \"Russian Hill\": 17,\n        \"Golden Gate Park\": 7,\n        \"Fisherman's Wharf\": 23,\n        \"Sunset District\": 15,\n        \"The Castro\": 6\n    },\n    \"Golden Gate Park\": {\n        \"Chinatown\": 23,\n        \"Embarcadero\": 25,\n        \"Pacific Heights\": 16,\n        \"Russian Hill\": 19,\n        \"Haight-Ashbury\": 7,\n        \"Fisherman's Wharf\": 24,\n        \"Sunset District\": 10,\n        \"The Castro\": 13\n    },\n    \"Fisherman's Wharf\": {\n        \"Chinatown\": 12,\n        \"Embarcadero\": 8,\n        \"Pacific Heights\": 12,\n        \"Russian Hill\": 7,\n        \"Haight-Ashbury\": 22,\n        \"Golden Gate Park\": 25,\n        \"Sunset District\": 29,\n        \"The Castro\": 27\n    },\n    \"Sunset District\": {\n        \"Chinatown\": 30,\n        \"Embarcadero\": 30,\n        \"Pacific Heights\": 21,\n        \"Russian Hill\": 24,\n        \"Haight-Ashbury\": 15,\n        \"Golden Gate Park\": 11,\n        \"Fisherman's Wharf\": 29,\n        \"The Castro\": 17\n    },\n    \"The Castro\": {\n        \"Chinatown\": 22,\n        \"Embarcadero\": 22,\n        \"Pacific Heights\": 16,\n        \"Russian Hill\": 18,\n        \"Haight-Ashbury\": 6,\n        \"Golden Gate Park\": 11,\n        \"Fisherman's Wharf\": 24,\n        \"Sunset District\": 17\n    }\n}\n\n# Define meeting constraints\nmeetings = {\n    \"Richard\": {\"location\": \"Embarcadero\", \"available\": (datetime.strptime('15:15', '%H:%M'), datetime.strptime('18:45', '%H:%M')), \"duration\": 90},\n    \"Mark\": {\"location\": \"Pacific Heights\", \"available\": (datetime.strptime('15:00', '%H:%M'), datetime.strptime('17:00', '%H:%M')), \"duration\": 45},\n    \"Matthew\": {\"location\": \"Russian Hill\", \"available\": (datetime.strptime('17:30', '%H:%M'), datetime.strptime('21:00', '%H:%M')), \"duration\": 90},\n    \"Rebecca\": {\"location\": \"Haight-Ashbury\", \"available\": (datetime.strptime('14:45', '%H:%M'), datetime.strptime('18:00', '%H:%M')), \"duration\": 60},\n    \"Melissa\": {\"location\": \"Golden Gate Park\", \"available\": (datetime.strptime('13:45', '%H:%M'), datetime.strptime('17:30', '%H:%M')), \"duration\": 90},\n    \"Margaret\": {\"location\": \"Fisherman's Wharf\", \"available\": (datetime.strptime('14:45', '%H:%M'), datetime.strptime('20:15', '%H:%M')), \"duration\": 15},\n    \"Emily\": {\"location\": \"Sunset District\", \"available\": (datetime.strptime('15:45', '%H:%M'), datetime.strptime('17:00', '%H:%M')), \"duration\": 45},\n    \"George\": {\"location\": \"The Castro\", \"available\": (datetime.strptime('14:00', '%H:%M'), datetime.strptime('16:15', '%H:%M')), \"duration\": 75},\n}\n\n# Calculate and build itinerary\ndef schedule_meetings():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('21:00', '%H:%M')\n    itinerary = []\n    current_time = start_time\n    current_location = \"Chinatown\"\n\n    while current_time < end_time:\n        for person, details in meetings.items():\n            location = details['location']\n            available_start, available_end = details['available']\n            duration = details['duration']\n\n            travel_time = travel_times[current_location][location]\n            start_meeting_time = current_time + timedelta(minutes=travel_time)\n\n            if start_meeting_time < available_start:\n                current_time = available_start - timedelta(minutes=travel_time)\n                start_meeting_time = current_time + timedelta(minutes=travel_time)\n\n            end_meeting_time = start_meeting_time + timedelta(minutes=duration)\n\n            if available_start <= start_meeting_time < available_end and end_meeting_time <= available_end:\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": location,\n                    \"person\": person,\n                    \"start_time\": start_meeting_time.strftime('%H:%M'),\n                    \"end_time\": end_meeting_time.strftime('%H:%M')\n                })\n                current_time = end_meeting_time + timedelta(minutes=travel_time)\n                current_location = location\n                break\n    return {\"itinerary\": itinerary}\n\n# Execute scheduling\nresult = schedule_meetings()\n\n# Output result in JSON format\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_763"
        },
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "9:29",
                        "end_time": "11:14"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Anthony",
                        "start_time": "13:15",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Rebecca",
                        "start_time": "19:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "9:29",
                        "end_time": "11:14"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Anthony",
                        "start_time": "13:15",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Rebecca",
                        "start_time": "19:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants for travel times in minutes\ntravel_times = {\n    \"Sunset\": {\"Chinatown\": 30, \"Russian Hill\": 24, \"North Beach\": 29},\n    \"Chinatown\": {\"Sunset\": 29, \"Russian Hill\": 7, \"North Beach\": 3},\n    \"Russian Hill\": {\"Sunset\": 23, \"Chinatown\": 9, \"North Beach\": 5},\n    \"North Beach\": {\"Sunset\": 27, \"Chinatown\": 6, \"Russian Hill\": 4},\n}\n\n# Meeting availability and constraints\nmeetings = {\n    \"Anthony\": {\"location\": \"Chinatown\", \"start\": \"13:15\", \"end\": \"14:30\", \"duration\": 60},\n    \"Rebecca\": {\"location\": \"Russian Hill\", \"start\": \"19:30\", \"end\": \"21:15\", \"duration\": 105},\n    \"Melissa\": {\"location\": \"North Beach\", \"start\": \"08:15\", \"end\": \"13:30\", \"duration\": 105},\n}\n\n# Start day and time in Sunset District\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\ndef calculate_schedule():\n    itinerary = []\n\n    # Meeting Melissa\n    melissa_start = arrival_time + timedelta(minutes=travel_times[\"Sunset\"][\"North Beach\"])\n    if melissa_start.time() < datetime.strptime(meetings[\"Melissa\"][\"start\"], \"%H:%M\").time():\n        melissa_start = datetime.strptime(meetings[\"Melissa\"][\"start\"], \"%H:%M\")\n    \n    melissa_end = melissa_start + timedelta(minutes=meetings[\"Melissa\"][\"duration\"])\n    \n    if melissa_end.time() > datetime.strptime(meetings[\"Melissa\"][\"end\"], \"%H:%M\").time():\n        melissa_end = datetime.strptime(meetings[\"Melissa\"][\"end\"], \"%H:%M\")\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Melissa\"][\"location\"],\n        \"person\": \"Melissa\",\n        \"start_time\": melissa_start.strftime(\"%H:%M\"),\n        \"end_time\": melissa_end.strftime(\"%H:%M\"),\n    })\n\n    # Traveling to Chinatown to meet Anthony\n    travel_to_anthony = melissa_end + timedelta(minutes=travel_times[\"North Beach\"][\"Chinatown\"])\n    anthony_start = max(travel_to_anthony, datetime.strptime(meetings[\"Anthony\"][\"start\"], \"%H:%M\"))\n    anthony_end = anthony_start + timedelta(minutes=meetings[\"Anthony\"][\"duration\"])\n\n    if anthony_end.time() > datetime.strptime(meetings[\"Anthony\"][\"end\"], \"%H:%M\").time():\n        anthony_end = datetime.strptime(meetings[\"Anthony\"][\"end\"], \"%H:%M\")\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Anthony\"][\"location\"],\n        \"person\": \"Anthony\",\n        \"start_time\": anthony_start.strftime(\"%H:%M\"),\n        \"end_time\": anthony_end.strftime(\"%H:%M\"),\n    })\n\n    # Traveling to Russian Hill to meet Rebecca\n    travel_to_rebecca = anthony_end + timedelta(minutes=travel_times[\"Chinatown\"][\"Russian Hill\"])\n    rebecca_start = max(travel_to_rebecca, datetime.strptime(meetings[\"Rebecca\"][\"start\"], \"%H:%M\"))\n    rebecca_end = rebecca_start + timedelta(minutes=meetings[\"Rebecca\"][\"duration\"])\n\n    if rebecca_end.time() > datetime.strptime(meetings[\"Rebecca\"][\"end\"], \"%H:%M\").time():\n        rebecca_end = datetime.strptime(meetings[\"Rebecca\"][\"end\"], \"%H:%M\")\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Rebecca\"][\"location\"],\n        \"person\": \"Rebecca\",\n        \"start_time\": rebecca_start.strftime(\"%H:%M\"),\n        \"end_time\": rebecca_end.strftime(\"%H:%M\"),\n    })\n\n    return {\"itinerary\": itinerary}\n\n# Calculate and output the optimal schedule\noptimal_schedule = calculate_schedule()\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_209"
        }
    ]
}