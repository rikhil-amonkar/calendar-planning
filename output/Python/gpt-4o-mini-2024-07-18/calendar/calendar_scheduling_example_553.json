{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define existing schedules as tuples of start and end times\neric_schedule = [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                 (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))]\n\nhenry_schedule = [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                  (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                  (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Henry prefers not to meet after 10:00\nhenry_preference_cutoff = datetime.strptime(\"10:00\", \"%H:%M\")\n\n# Function to find a suitable meeting time\ndef find_meeting_time(schedule1, schedule2, work_start, work_end, meeting_duration):\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        meeting_start = current_time\n        meeting_end = current_time + meeting_duration\n\n        if all(not (meeting_start < end and meeting_end > start) for start, end in schedule1) and \\\n           all(not (meeting_start < end and meeting_end > start) for start, end in schedule2) and \\\n           meeting_start <= henry_preference_cutoff:\n            return meeting_start, meeting_end\n        \n        current_time += timedelta(minutes=1)  # Check the next minute\n        \n    return None, None\n\n# Finding the meeting time\nmeeting_start, meeting_end = find_meeting_time(eric_schedule, henry_schedule, work_start, work_end, meeting_duration)\n\n# Output the meeting time and day of the week if found\nif meeting_start and meeting_end:\n    print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')} Monday\")\nelse:\n    print(\"No available time found\")\n```",
            "count": "calendar_scheduling_example_553"
        }
    ]
}