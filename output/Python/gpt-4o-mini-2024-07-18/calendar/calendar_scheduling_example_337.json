{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Constants\nparticipants = {\n    'John': [(datetime.strptime('11:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n             (datetime.strptime('14:00', '%H:%M'), datetime.strptime('14:30', '%H:%M'))],\n    'Megan': [(datetime.strptime('12:00', '%H:%M'), datetime.strptime('12:30', '%H:%M')),\n              (datetime.strptime('14:00', '%H:%M'), datetime.strptime('15:00', '%H:%M')),\n              (datetime.strptime('15:30', '%H:%M'), datetime.strptime('16:00', '%H:%M'))],\n    'Brandon': [],\n    'Kimberly': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n                 (datetime.strptime('10:00', '%H:%M'), datetime.strptime('10:30', '%H:%M')),\n                 (datetime.strptime('11:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n                 (datetime.strptime('15:00', '%H:%M'), datetime.strptime('16:00', '%H:%M')),\n                 (datetime.strptime('16:30', '%H:%M'), datetime.strptime('17:00', '%H:%M'))],\n    'Sean': [(datetime.strptime('10:00', '%H:%M'), datetime.strptime('11:00', '%H:%M')),\n             (datetime.strptime('11:30', '%H:%M'), datetime.strptime('14:00', '%H:%M')),\n             (datetime.strptime('15:00', '%H:%M'), datetime.strptime('15:30', '%H:%M'))],\n    'Lori': [(datetime.strptime('09:00', '%H:%M'), datetime.strptime('09:30', '%H:%M')),\n             (datetime.strptime('10:30', '%H:%M'), datetime.strptime('12:00', '%H:%M')),\n             (datetime.strptime('13:00', '%H:%M'), datetime.strptime('14:30', '%H:%M')),\n             (datetime.strptime('16:00', '%H:%M'), datetime.strptime('16:30', '%H:%M'))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Calculate available time slots\ndef available_time_slots(participants_schedules, work_start, work_end):\n    time_slots = []\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        if all(not (current_time < end and end_time > start) for schedule in participants_schedules.values() for start, end in schedule):\n            time_slots.append((current_time, end_time))\n        current_time += timedelta(minutes=1)  # Check each minute for availability\n    \n    return time_slots\n\n# Work hours on Monday\nwork_start = datetime.strptime('09:00', '%H:%M')\nwork_end = datetime.strptime('17:00', '%H:%M')\n\n# Get available time slots\navailable_slots = available_time_slots(participants, work_start, work_end)\n\n# Choose the first available slot\nif available_slots:\n    proposed_slot = available_slots[0]\n    proposed_time_range = f\"{proposed_slot[0].strftime('%H:%M')}:{proposed_slot[1].strftime('%H:%M')}\"\n    day_of_week = 'Monday'\n    print(f\"{proposed_time_range} {day_of_week}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_337"
        }
    ]
}