{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and the meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\nday_of_week = \"Monday\"\n\n# Define the schedules of each participant as busy time slots\nschedules = {\n    \"Lisa\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n             (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n             (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n             (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Bobby\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Randy\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n              (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\n# Find a suitable time for the meeting\ndef find_meeting_time(schedules, work_start, work_end, meeting_duration):\n    free_slots = []\n\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        end_time = current_time + meeting_duration\n        is_free = True\n\n        for busy_times in schedules.values():\n            for start, end in busy_times:\n                if not (end_time <= start or current_time >= end):\n                    is_free = False\n                    break\n            if not is_free:\n                break\n        \n        if is_free:\n            free_slots.append((current_time, end_time))\n        \n        current_time += timedelta(minutes=15)  # check every 15 minutes\n\n    # Select a free slot that satisfies Bobby's preference\n    for start, end in free_slots:\n        if start.time() >= datetime.strptime(\"15:00\", \"%H:%M\").time():\n            continue\n        return f\"{start.strftime('%H:%M')}:{end.strftime('%H:%M')}\"\n\n# Call function to get the meeting time\nmeeting_time = find_meeting_time(schedules, work_start, work_end, meeting_duration)\n\nprint(f\"Proposed Meeting Time: {meeting_time}, Day: {day_of_week}\")\n```",
            "count": "calendar_scheduling_example_33"
        }
    ]
}