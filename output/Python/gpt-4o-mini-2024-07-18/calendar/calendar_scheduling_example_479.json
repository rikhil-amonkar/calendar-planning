{
    "0shot": [
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedules = {\n    'Evelyn': [(timedelta(hours=9), timedelta(hours=17))],\n    'Joshua': [(timedelta(hours=9), timedelta(hours=11)),\n               (timedelta(hours=12, minutes=30), timedelta(hours=13, minutes=30)),\n               (timedelta(hours=14, minutes=30), timedelta(hours=16, minutes=30)),\n               (timedelta(hours=17), timedelta(hours=17))],\n    'Kevin': [(timedelta(hours=9), timedelta(hours=17))],\n    'Gerald': [(timedelta(hours=9), timedelta(hours=17))],\n    'Jerry': [(timedelta(hours=9, minutes=30), timedelta(hours=10, minutes=30)),\n              (timedelta(hours=12), timedelta(hours=12, minutes=30)),\n              (timedelta(hours=13), timedelta(hours=13, minutes=30)),\n              (timedelta(hours=14), timedelta(hours=14, minutes=30)),\n              (timedelta(hours=15), timedelta(hours=15, minutes=30)),\n              (timedelta(hours=16), timedelta(hours=16, minutes=30)),\n              (timedelta(hours=17), timedelta(hours=17))],\n    'Jesse': [(timedelta(hours=9, minutes=30), timedelta(hours=10, minutes=30)),\n              (timedelta(hours=12), timedelta(hours=12, minutes=30)),\n              (timedelta(hours=13), timedelta(hours=14, minutes=30)),\n              (timedelta(hours=15), timedelta(hours=15, minutes=30)),\n              (timedelta(hours=16, minutes=30), timedelta(hours=17))],\n    'Kenneth': [(timedelta(hours=10, minutes=30), timedelta(hours=12, minutes=30)),\n                (timedelta(hours=13, minutes=30), timedelta(hours=14)),\n                (timedelta(hours=14, minutes=30), timedelta(hours=15)),\n                (timedelta(hours=15, minutes=30), timedelta(hours=16)),\n                (timedelta(hours=16, minutes=30), timedelta(hours=17))]\n}\n\ndef find_meeting_time(duration_hours, duration_minutes):\n    duration = timedelta(hours=duration_hours, minutes=duration_minutes)\n    day = \"Monday\"\n    \n    # Create a list of all free time slots for all participants\n    all_free_slots = []\n    for participant, busy_times in schedules.items():\n        free_slots = []\n        start_of_day = timedelta(hours=9)\n        end_of_day = timedelta(hours=17)\n\n        # Calculate free slots\n        if busy_times:\n            busy_times = sorted(busy_times, key=lambda x: x[0])  # Sort busy times\n            busy_times = [(start_of_day, busy_times[0][0])] + busy_times + [(busy_times[-1][1], end_of_day)]\n            \n            for i in range(len(busy_times) - 1):\n                free_slot_start = busy_times[i][1]\n                free_slot_end = busy_times[i + 1][0]\n                if free_slot_end - free_slot_start >= duration:\n                    free_slots.append((free_slot_start, free_slot_end))\n        else:\n            free_slots = [(start_of_day, end_of_day)]\n\n        all_free_slots.append(free_slots)\n\n    # Find common free slots\n    common_free_slots = all_free_slots[0]\n    for slots in all_free_slots[1:]:\n        new_common_slots = []\n        for start1, end1 in common_free_slots:\n            for start2, end2 in slots:\n                start = max(start1, start2)\n                end = min(end1, end2)\n                if end - start >= duration:\n                    new_common_slots.append((start, end))\n        common_free_slots = new_common_slots\n\n    # Select the first available time slot\n    if common_free_slots:\n        start_time = common_free_slots[0][0]\n        end_time = start_time + duration\n        return f\"{start_time.seconds//3600:02}:{(start_time.seconds//60)%60:02}:{end_time.seconds//3600:02}:{(end_time.seconds//60)%60:02} ({day})\"\n    \n    return \"No available time slots found.\"\n\n# Proposed meeting duration is 1 hour\nprint(find_meeting_time(1, 0))\n```",
            "count": "calendar_scheduling_example_479"
        }
    ]
}