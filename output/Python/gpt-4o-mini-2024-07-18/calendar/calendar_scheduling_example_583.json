{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\nday_of_week = \"Monday\"\n\n# Define the busy slots for Lisa and Anthony\nlisa_busy_slots = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                   (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n\nanthony_busy_slots = [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                      (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                      (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                      (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n                      (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                      (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n\n# Combine busy slots\nall_busy_slots = lisa_busy_slots + anthony_busy_slots\n# Sort busy slots by start time\nall_busy_slots.sort(key=lambda x: x[0])\n\n# Find available slots\navailable_start = work_start\nfor busy_start, busy_end in all_busy_slots:\n    if available_start + meeting_duration <= busy_start:\n        available_end = available_start + meeting_duration\n        if available_end <= busy_start:\n            print(f\"{available_start.strftime('%H:%M')}:{available_end.strftime('%H:%M')}\")\n            print(day_of_week)\n            break\n    available_start = max(available_start, busy_end)\n\n# If the end of the work day is reached and no slot has been found\nif available_start + meeting_duration <= work_end:\n    print(f\"{available_start.strftime('%H:%M')}:{(available_start + meeting_duration).strftime('%H:%M')}\")\n    print(day_of_week)\n```",
            "count": "calendar_scheduling_example_583"
        }
    ]
}