{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedules = {\n    \"Diane\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 0)),\n              (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0))],\n    \"Jack\": [(datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 0)),\n             (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0))],\n    \"Eugene\": [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 10, 0)),\n               (datetime(2023, 10, 2, 10, 30), datetime(2023, 10, 2, 11, 30)),\n               (datetime(2023, 10, 2, 12, 0), datetime(2023, 10, 2, 14, 30)),\n               (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 16, 30))],\n    \"Patricia\": [(datetime(2023, 10, 2, 9, 30), datetime(2023, 10, 2, 10, 30)),\n                 (datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 0)),\n                 (datetime(2023, 10, 2, 12, 30), datetime(2023, 10, 2, 14, 0)),\n                 (datetime(2023, 10, 2, 15, 0), datetime(2023, 10, 2, 16, 30))]\n}\n\n# Meeting parameters\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime(2023, 10, 2, 9, 0)\nwork_end = datetime(2023, 10, 2, 17, 0)\n\n# Find available slot\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end):\n    # Create a list of busy times\n    busy_times = []\n    for busy_slots in schedules.values():\n        busy_times.extend(busy_slots)\n\n    # Sort busy times\n    busy_times.sort()\n\n    # Check for available slots\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        # Check if this time is busy\n        time_slot_end = current_time + meeting_duration\n        is_busy = any(start < time_slot_end and current_time < end for start, end in busy_times)\n        \n        if not is_busy:\n            return current_time, time_slot_end\n        \n        current_time += timedelta(minutes=1)\n    \n    return None, None\n\nmeeting_start, meeting_end = find_meeting_time(schedules, meeting_duration, work_start, work_end)\n\n# Format output\nif meeting_start and meeting_end:\n    print(f\"{meeting_start.strftime('%H:%M')}:{meeting_end.strftime('%H:%M')}\")\n    print(\"Monday\")\n```",
            "count": "calendar_scheduling_example_103"
        }
    ]
}