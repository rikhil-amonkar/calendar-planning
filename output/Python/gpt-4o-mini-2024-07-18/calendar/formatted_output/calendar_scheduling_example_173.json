{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define the participants' busy schedules\nschedules = {\n    \"Jacqueline\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                   (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                   (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                   (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))],\n    \"Harold\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Arthur\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Kelly\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n              (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n              (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\n# Meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define working hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Harold prefers not to meet after 13:00\nharold_preference_end = datetime.strptime(\"13:00\", \"%H:%M\")\n\n# Finding the time slot\ndef find_meeting_time(schedules, meeting_duration, work_start, work_end, harold_preference_end):\n    # Create a list of free time slots based on the busy schedules\n    free_slots = []\n    current_time = work_start\n\n    while current_time + meeting_duration <= work_end:\n        is_busy = False\n        for participant, busy_times in schedules.items():\n            for busy_start, busy_end in busy_times:\n                if busy_start <= current_time < busy_end or busy_start < current_time + meeting_duration <= busy_end:\n                    is_busy = True\n                    break\n            if is_busy:\n                break\n        \n        if not is_busy:\n            if current_time <= harold_preference_end:\n                free_slots.append(current_time)\n        \n        current_time += timedelta(minutes=30)\n\n    if free_slots:\n        return free_slots[0]\n\nmeeting_time = find_meeting_time(schedules, meeting_duration, work_start, work_end, harold_preference_end)\nif meeting_time:\n    meeting_start = meeting_time.strftime(\"%H:%M\")\n    meeting_end = (meeting_time + meeting_duration).strftime(\"%H:%M\")\n    day_of_week = \"Monday\"\n    \n    print(f\"{meeting_start}:{meeting_end} {day_of_week}\")\n```\n",
            "count": "calendar_scheduling_example_173"
        }
    ]
}