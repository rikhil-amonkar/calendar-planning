{
    "0shot": [
        {
            "final_program_time": {
                "day": "Friday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Friday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Function to check availability of the participants\ndef is_available(start_time, end_time, busy_slots):\n    for start, end in busy_slots:\n        if start_time < end and start < end_time:\n            return False\n    return True\n\n# Define the schedules\neugene_busy = [(datetime(2023, 10, 2, 11, 0), datetime(2023, 10, 2, 12, 0)),\n               (datetime(2023, 10, 2, 13, 30), datetime(2023, 10, 2, 14, 0)),\n               (datetime(2023, 10, 2, 14, 30), datetime(2023, 10, 2, 15, 0)),\n               (datetime(2023, 10, 2, 16, 0), datetime(2023, 10, 2, 16, 30)),\n               (datetime(2023, 10, 4, 9, 0), datetime(2023, 10, 4, 9, 30)),\n               (datetime(2023, 10, 4, 11, 0), datetime(2023, 10, 4, 11, 30)),\n               (datetime(2023, 10, 4, 12, 0), datetime(2023, 10, 4, 12, 30)),\n               (datetime(2023, 10, 4, 13, 30), datetime(2023, 10, 4, 15, 0)),\n               (datetime(2023, 10, 5, 9, 30), datetime(2023, 10, 5, 10, 0)),\n               (datetime(2023, 10, 5, 11, 0), datetime(2023, 10, 5, 12, 30)),\n               (datetime(2023, 10, 6, 10, 30), datetime(2023, 10, 6, 11, 0)),\n               (datetime(2023, 10, 6, 12, 0), datetime(2023, 10, 6, 12, 30)),\n               (datetime(2023, 10, 6, 13, 0), datetime(2023, 10, 6, 13, 30))]\n\neric_busy = [(datetime(2023, 10, 2, 9, 0), datetime(2023, 10, 2, 17, 0)),\n              (datetime(2023, 10, 3, 9, 0), datetime(2023, 10, 3, 17, 0)),\n              (datetime(2023, 10, 4, 9, 0), datetime(2023, 10, 4, 11, 30)),\n              (datetime(2023, 10, 4, 12, 0), datetime(2023, 10, 4, 14, 0)),\n              (datetime(2023, 10, 4, 14, 30), datetime(2023, 10, 4, 16, 30)),\n              (datetime(2023, 10, 5, 9, 0), datetime(2023, 10, 5, 17, 0)),\n              (datetime(2023, 10, 6, 9, 0), datetime(2023, 10, 6, 11, 0)),\n              (datetime(2023, 10, 6, 11, 30), datetime(2023, 10, 6, 17, 0))]\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Check for availability\nfor day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']:\n    for hour in range(9, 17):\n        start_time = datetime(2023, 10, 2 if day == 'Monday' else 3 if day == 'Tuesday' else 4 if day == 'Wednesday' else 5 if day == 'Thursday' else 6, hour, 0)\n        end_time = start_time + meeting_duration\n        if is_available(start_time, end_time, eugene_busy) and is_available(start_time, end_time, eric_busy):\n            print(f\"{day}: {start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n            break\n```",
            "count": "calendar_scheduling_example_938"
        }
    ]
}