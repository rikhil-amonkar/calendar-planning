{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "15:00",
                "end_time": "15:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define participant schedules\nschedules = {\n    \"Kimberly\": [(\"10:00\", \"10:30\"), (\"11:00\", \"12:00\"), (\"16:00\", \"16:30\")],\n    \"Megan\": [],\n    \"Marie\": [(\"10:00\", \"11:00\"), (\"11:30\", \"15:00\"), (\"16:00\", \"16:30\")],\n    \"Diana\": [(\"09:30\", \"10:00\"), (\"10:30\", \"14:30\"), (\"15:30\", \"17:00\")]\n}\n\n# Meeting parameters\nmeeting_duration = timedelta(minutes=30)\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nday_of_week = \"Monday\"\n\n# Function to check availability\ndef is_available(start_time, end_time):\n    for busy_periods in schedules.values():\n        for start, end in busy_periods:\n            busy_start = datetime.strptime(start, \"%H:%M\")\n            busy_end = datetime.strptime(end, \"%H:%M\")\n            if not (end_time <= busy_start or start_time >= busy_end):\n                return False\n    return True\n\n# Loop through possible time slots\ncurrent_time = work_start\nwhile current_time + meeting_duration <= work_end:\n    end_time = current_time + meeting_duration\n    if is_available(current_time, end_time):\n        print(f\"{current_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')}\")\n        print(day_of_week)\n        break\n    current_time += timedelta(minutes=30)\n```",
            "count": "calendar_scheduling_example_185"
        }
    ]
}