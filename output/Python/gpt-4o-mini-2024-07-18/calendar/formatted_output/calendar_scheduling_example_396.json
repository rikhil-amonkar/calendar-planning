{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    # Create a list of available time slots\n    available_slots = [(work_start, work_end)]\n    \n    # Update the available slots based on each participant's schedule\n    for participant in participants:\n        busy_times = participant['busy_times']\n        new_available_slots = []\n        \n        for start, end in available_slots:\n            current_start = start\n            \n            for busy_start, busy_end in busy_times:\n                if current_start < busy_start:\n                    new_available_slots.append((current_start, busy_start))\n                current_start = max(current_start, busy_end)\n            \n            if current_start < end:\n                new_available_slots.append((current_start, end))\n        \n        available_slots = new_available_slots\n    \n    # Find a suitable time slot that fits the meeting duration\n    for start, end in available_slots:\n        if end - start >= meeting_duration:\n            meeting_start = start\n            meeting_end = start + meeting_duration\n            return meeting_start.strftime(\"%H:%M\"), meeting_end.strftime(\"%H:%M\"), meeting_start.strftime(\"%A\")\n    \n    return None\n\n# Define participant schedules\nparticipants = [\n    {'name': 'Andrea', 'busy_times': []},\n    {'name': 'Jack', 'busy_times': [(datetime.strptime(\"09:00\", \"%H:%M\"), \n                                       datetime.strptime(\"09:30\", \"%H:%M\")),\n                                      (datetime.strptime(\"14:00\", \"%H:%M\"), \n                                       datetime.strptime(\"14:30\", \"%H:%M\"))]},\n    {'name': 'Madison', 'busy_times': [(datetime.strptime(\"09:30\", \"%H:%M\"), \n                                          datetime.strptime(\"10:30\", \"%H:%M\")),\n                                         (datetime.strptime(\"13:00\", \"%H:%M\"), \n                                          datetime.strptime(\"14:00\", \"%H:%M\")),\n                                         (datetime.strptime(\"15:00\", \"%H:%M\"), \n                                          datetime.strptime(\"15:30\", \"%H:%M\")),\n                                         (datetime.strptime(\"16:30\", \"%H:%M\"), \n                                          datetime.strptime(\"17:00\", \"%H:%M\"))]},\n    {'name': 'Rachel', 'busy_times': [(datetime.strptime(\"09:30\", \"%H:%M\"), \n                                         datetime.strptime(\"10:30\", \"%H:%M\")),\n                                        (datetime.strptime(\"11:00\", \"%H:%M\"), \n                                         datetime.strptime(\"11:30\", \"%H:%M\")),\n                                        (datetime.strptime(\"12:00\", \"%H:%M\"), \n                                         datetime.strptime(\"13:30\", \"%H:%M\")),\n                                        (datetime.strptime(\"14:30\", \"%H:%M\"), \n                                         datetime.strptime(\"15:30\", \"%H:%M\")),\n                                        (datetime.strptime(\"16:00\", \"%H:%M\"), \n                                         datetime.strptime(\"17:00\", \"%H:%M\"))]},\n    {'name': 'Douglas', 'busy_times': [(datetime.strptime(\"09:00\", \"%H:%M\"), \n                                          datetime.strptime(\"11:30\", \"%H:%M\")),\n                                         (datetime.strptime(\"12:00\", \"%H:%M\"), \n                                          datetime.strptime(\"16:30\", \"%H:%M\"))]},\n    {'name': 'Ryan', 'busy_times': [(datetime.strptime(\"09:00\", \"%H:%M\"), \n                                       datetime.strptime(\"09:30\", \"%H:%M\")),\n                                      (datetime.strptime(\"13:00\", \"%H:%M\"), \n                                       datetime.strptime(\"14:00\", \"%H:%M\")),\n                                      (datetime.strptime(\"14:30\", \"%H:%M\"), \n                                       datetime.strptime(\"17:00\", \"%H:%M\"))]},\n]\n\n# Meeting duration of 30 minutes\nmeeting_duration = timedelta(minutes=30)\n\n# Find and print the meeting time\nstart_time, end_time, day = find_meeting_time(participants, meeting_duration)\nprint(f\"{start_time}:{end_time}:{day}\")\n```",
            "count": "calendar_scheduling_example_396"
        }
    ]
}