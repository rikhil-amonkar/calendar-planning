{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:30"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "10:30",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' schedules\nschedule_nicole = {\n    'Tuesday': [(16, 0, 16, 30)],\n    'Wednesday': [(15, 0, 15, 30)],\n    'Friday': [(12, 0, 12, 30), (15, 30, 16, 0)]\n}\n\nschedule_daniel = {\n    'Monday': [(9, 0, 12, 30), (13, 0, 13, 30), (14, 0, 16, 30)],\n    'Tuesday': [(9, 0, 10, 30), (11, 30, 12, 30), (13, 0, 13, 30), (15, 0, 16, 0), (16, 30, 17, 0)],\n    'Wednesday': [(9, 0, 10, 0), (11, 0, 12, 30), (13, 0, 13, 30), (14, 0, 14, 30), (16, 30, 17, 0)],\n    'Thursday': [(11, 0, 12, 0), (13, 0, 14, 0), (15, 0, 15, 30)],\n    'Friday': [(10, 0, 11, 0), (11, 30, 12, 0), (12, 30, 14, 30), (15, 0, 15, 30), (16, 0, 16, 30)]\n}\n\n# Calculate available slots\ndef get_available_slots(schedule, work_start, work_end):\n    available_slots = {}\n    for day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']:\n        busy_times = schedule.get(day, [])\n        busy_times.sort()  # Sort by start time\n        available_slots[day] = []\n        \n        # Assuming work hours\n        start_of_day = (work_start.hour, work_start.minute)\n        end_of_day = (work_end.hour, work_end.minute)\n\n        # Start looking for availability\n        last_end_time = start_of_day\n\n        for busy in busy_times:\n            busy_start = (busy[0], busy[1])\n            busy_end = (busy[2], busy[3])\n\n            # Check for free slot before the busy time\n            if last_end_time < busy_start:\n                available_slots[day].append((last_end_time[0], last_end_time[1], busy_start[0], busy_start[1]))\n            \n            last_end_time = busy_end\n        \n        # Check for free slot after all busy times until end of the day\n        if last_end_time < end_of_day:\n            available_slots[day].append((last_end_time[0], last_end_time[1], end_of_day[0], end_of_day[1]))\n\n    return available_slots\n\ndef find_meeting_time():\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    available_nicole = get_available_slots(schedule_nicole, work_start, work_end)\n    available_daniel = get_available_slots(schedule_daniel, work_start, work_end)\n\n    # Find overlapping slots of at least 1 hour\n    for day in available_nicole:\n        nicole_slots = available_nicole[day]\n        daniel_slots = available_daniel[day]\n\n        for n_slot in nicole_slots:\n            n_start = timedelta(hours=n_slot[0], minutes=n_slot[1])\n            n_end = timedelta(hours=n_slot[2], minutes=n_slot[3])\n            duration = n_end - n_start\n            \n            if duration >= timedelta(hours=1):  # Need at least 1 hour\n                for d_slot in daniel_slots:\n                    d_start = timedelta(hours=d_slot[0], minutes=d_slot[1])\n                    d_end = timedelta(hours=d_slot[2], minutes=d_slot[3])\n                    \n                    # Check if the slots overlap\n                    if d_start < n_end and n_start < d_end:\n                        # Determine the meeting time\n                        meeting_start_hours = max(n_slot[0], d_slot[0])\n                        meeting_start_minutes = max(n_slot[1], d_slot[1])\n                        \n                        meeting_end_hours = meeting_start_hours + 1\n                        meeting_end_minutes = meeting_start_minutes\n\n                        if meeting_end_minutes >= 60:\n                            meeting_end_minutes -= 60\n                            meeting_end_hours += 1\n\n                        if meeting_end_hours > 17:  # Ensure meeting does not exceed work time\n                            continue\n\n                        return f\"{day} {meeting_start_hours:02}:{meeting_start_minutes:02}:{meeting_end_hours:02}:{meeting_end_minutes:02}\"\n\n# Generate proposed meeting time\nproposed_time = find_meeting_time()\nprint(proposed_time)\n```",
            "count": "calendar_scheduling_example_975"
        }
    ]
}