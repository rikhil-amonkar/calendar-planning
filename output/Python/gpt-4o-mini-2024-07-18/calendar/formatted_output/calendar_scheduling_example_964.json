{
    "0shot": [
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "11:00",
                "end_time": "12:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and duration\nwork_start = timedelta(hours=9)\nwork_end = timedelta(hours=17)\nmeeting_duration = timedelta(hours=1)\n\n# Define participants' busy schedules\nbetty_busy = {\n    \"Monday\": [(timedelta(hours=10), timedelta(hours=10, minutes=30)),\n               (timedelta(hours=11, minutes=30), timedelta(hours=12, minutes=30)),\n               (timedelta(hours=16), timedelta(hours=16, minutes=30))],\n    \"Tuesday\": [(timedelta(hours=9, minutes=30), timedelta(hours=10)),\n                (timedelta(hours=10, minutes=30), timedelta(hours=11)),\n                (timedelta(hours=12), timedelta(hours=12, minutes=30)),\n                (timedelta(hours=13, minutes=30), timedelta(hours=15)),\n                (timedelta(hours=16, minutes=30), timedelta(hours=17))],\n    \"Wednesday\": [(timedelta(hours=13, minutes=30), timedelta(hours=14)),\n                  (timedelta(hours=14, minutes=30), timedelta(hours=15))],\n    \"Friday\": [(timedelta(hours=9), timedelta(hours=10)),\n               (timedelta(hours=11, minutes=30), timedelta(hours=12)),\n               (timedelta(hours=12, minutes=30), timedelta(hours=13)),\n               (timedelta(hours=14, minutes=30), timedelta(hours=15))]\n}\n\nmegan_busy = {\n    \"Monday\": [(timedelta(hours=9), timedelta(hours=17))],\n    \"Tuesday\": [(timedelta(hours=9), timedelta(hours=9, minutes=30)),\n                (timedelta(hours=10), timedelta(hours=10, minutes=30)),\n                (timedelta(hours=12), timedelta(hours=14)),\n                (timedelta(hours=15), timedelta(hours=15, minutes=30)),\n                (timedelta(hours=16), timedelta(hours=16, minutes=30))],\n    \"Wednesday\": [(timedelta(hours=9, minutes=30), timedelta(hours=10, minutes=30)),\n                  (timedelta(hours=11), timedelta(hours=11, minutes=30)),\n                  (timedelta(hours=12, minutes=30), timedelta(hours=13)),\n                  (timedelta(hours=13, minutes=30), timedelta(hours=14, minutes=30)),\n                  (timedelta(hours=15, minutes=30), timedelta(hours=17))],\n    \"Thursday\": [(timedelta(hours=9), timedelta(hours=10, minutes=30)),\n                 (timedelta(hours=11, minutes=30), timedelta(hours=14)),\n                 (timedelta(hours=14, minutes=30), timedelta(hours=15)),\n                 (timedelta(hours=15, minutes=30), timedelta(hours=16, minutes=30))],\n    \"Friday\": [(timedelta(hours=9), timedelta(hours=17))]\n}\n\n# Exclude certain days for Betty \nexclude_days = [\"Wednesday\", \"Thursday\"]\n\n# Function to find a suitable time for the meeting\ndef find_meeting_time():\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:\n        if day in exclude_days:\n            continue\n        \n        # Get the busy intervals for both Betty and Megan\n        busy_intervals = betty_busy.get(day, []) + megan_busy.get(day, [])\n        \n        # Create a timeline of busy intervals for the day\n        busy_intervals.append((work_start, work_start))  # start of work\n        busy_intervals.append((work_end, work_end))      # end of work\n        \n        # Sort intervals and merge them\n        busy_intervals = sorted(busy_intervals)\n        \n        merged_intervals = []\n        current_start, current_end = busy_intervals[0]\n        \n        for start, end in busy_intervals[1:]:\n            if start <= current_end:\n                current_end = max(current_end, end)  # extend the end\n            else:\n                merged_intervals.append((current_start, current_end))\n                current_start, current_end = start, end\n        \n        merged_intervals.append((current_start, current_end))\n        \n        # Find an available slot for the meeting\n        for i in range(len(merged_intervals) - 1):\n            end_of_current = merged_intervals[i][1]\n            start_of_next = merged_intervals[i + 1][0]\n            \n            # Calculate the gap\n            if start_of_next - end_of_current >= meeting_duration:\n                meeting_start = end_of_current\n                meeting_end = meeting_start + meeting_duration\n                \n                # Checking if the meeting fits in the work hours\n                if meeting_start >= work_start and meeting_end <= work_end:\n                    start_time = (datetime.combine(datetime.today(), datetime.min.time()) + meeting_start).time()\n                    end_time = (datetime.combine(datetime.today(), datetime.min.time()) + meeting_end).time()\n                    print(f\"Time: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {day}\")\n                    return f\"{start_time.strftime('%H:%M')}:{end_time.strftime('%H:%M')} {day}\"\n\n# Call the function\nfind_meeting_time()\n```",
            "count": "calendar_scheduling_example_964"
        }
    ]
}