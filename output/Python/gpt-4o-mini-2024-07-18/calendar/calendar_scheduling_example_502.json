{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "19:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\n# Participants' busy schedules in minutes from the start of the day (09:00)\njack_busy = [\n    (30, 90),   # 09:30 to 10:30\n    (90, 120),  # 11:00 to 11:30\n    (150, 180), # 12:30 to 13:00\n    (240, 270), # 14:00 to 14:30\n    (300, 330)  # 16:00 to 16:30\n]\n\ncharlotte_busy = [\n    (30, 60),   # 09:30 to 10:00\n    (60, 120),  # 10:30 to 12:00\n    (150, 180), # 12:30 to 13:30\n    (240, 360)  # 14:00 to 16:00\n]\n\n# Meeting duration in minutes\nmeeting_duration = 30\n# Working hours\nwork_start = 9 * 60  # 09:00\nwork_end = 17 * 60    # 17:00\n\n# Find available slots\ndef find_meeting_slot(jack_busy, charlotte_busy, meeting_duration, work_start, work_end):\n    busy_times = sorted(jack_busy + charlotte_busy)\n    available_times = []\n    \n    # Check before work_start\n    if busy_times and busy_times[0][0] > work_start:\n        available_times.append((work_start, busy_times[0][0]))\n    \n    # Check between busy times\n    for i in range(len(busy_times) - 1):\n        end_current = busy_times[i][1]\n        start_next = busy_times[i+1][0]\n        if start_next - end_current >= meeting_duration:\n            available_times.append((end_current, start_next))\n    \n    # Check after last busy time\n    if busy_times and busy_times[-1][1] < work_end:\n        available_times.append((busy_times[-1][1], work_end))\n\n    # Filter the slots based on the meeting duration\n    for start, end in available_times:\n        if end - start >= meeting_duration:\n            return start, start + meeting_duration\n    \n    return None\n\n# Get the meeting slot\nmeeting_slot = find_meeting_slot(jack_busy, charlotte_busy, meeting_duration, work_start, work_end)\n\n# Convert to HH:MM\nif meeting_slot:\n    start_time = datetime.strptime(f\"{work_start // 60}:{work_start % 60}\", \"%H:%M\") + timedelta(minutes=meeting_slot[0])\n    end_time = datetime.strptime(f\"{work_end // 60}:{work_end % 60}\", \"%H:%M\") + timedelta(minutes=meeting_slot[1])\n    formatted_start = start_time.strftime(\"%H:%M\")\n    formatted_end = end_time.strftime(\"%H:%M\")\n    day_of_week = \"Monday\"\n    \n    print(f\"{formatted_start}:{formatted_end}\")\n    print(day_of_week)\n```",
            "count": "calendar_scheduling_example_502"
        }
    ]
}