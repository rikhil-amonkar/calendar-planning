{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "day_range": "Day 1-4",
                        "place": "Vilnius"
                    },
                    {
                        "day_range": "Day 4-6",
                        "place": "Munich"
                    },
                    {
                        "day_range": "Day 6-12",
                        "place": "Mykonos"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\n\ndef compute_itinerary():\n    # Input parameters\n    days_in_vilnius = 4\n    days_in_munich = 3\n    days_in_mykonos = 7\n    total_days = 12\n    \n    # Check the total days fit the requirements\n    if days_in_vilnius + days_in_munich + days_in_mykonos != total_days:\n        raise ValueError(\"Total days do not match the planned itinerary.\")\n    \n    # Itinerary construction\n    itinerary = []\n    \n    # Day allocation\n    # Vilnius for 4 days\n    itinerary.append({'day_range': 'Day 1-4', 'place': 'Vilnius'})\n    \n    # Flying from Vilnius to Munich (Day 4)\n    itinerary.append({'flying': 'Day 4-4', 'from': 'Vilnius', 'to': 'Munich'})\n    \n    # Munich for 3 days\n    itinerary.append({'day_range': 'Day 4-7', 'place': 'Munich'})\n    \n    # Flying from Munich to Mykonos (Day 7)\n    itinerary.append({'flying': 'Day 7-7', 'from': 'Munich', 'to': 'Mykonos'})\n    \n    # Mykonos for 7 days\n    itinerary.append({'day_range': 'Day 7-12', 'place': 'Mykonos'})\n    \n    # Output as JSON\n    return json.dumps(itinerary, indent=4)\n\nif __name__ == \"__main__\":\n    result = compute_itinerary()\n    print(result)\n```",
            "count": "trip_planning_example_50"
        }
    ]
}