{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Betty",
                        "start_time": "9:13",
                        "end_time": "10:58"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Melissa",
                        "start_time": "11:13",
                        "end_time": "12:58"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joshua",
                        "start_time": "13:03",
                        "end_time": "14:33"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Jeffrey",
                        "start_time": "14:50",
                        "end_time": "15:35"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "James",
                        "start_time": "16:02",
                        "end_time": "17:32"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Emily",
                        "start_time": "19:30",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nfrom itertools import permutations\n\n# Travel distances (in minutes)\ntravel_times = {\n    (\"Union Square\", \"Russian Hill\"): 13,\n    (\"Union Square\", \"Alamo Square\"): 15,\n    (\"Union Square\", \"Haight-Ashbury\"): 18,\n    (\"Union Square\", \"Marina District\"): 18,\n    (\"Union Square\", \"Bayview\"): 15,\n    (\"Union Square\", \"Chinatown\"): 7,\n    (\"Union Square\", \"Presidio\"): 24,\n    (\"Union Square\", \"Sunset District\"): 27,\n    (\"Russian Hill\", \"Union Square\"): 10,\n    (\"Russian Hill\", \"Alamo Square\"): 15,\n    (\"Russian Hill\", \"Haight-Ashbury\"): 17,\n    (\"Russian Hill\", \"Marina District\"): 7,\n    (\"Russian Hill\", \"Bayview\"): 23,\n    (\"Russian Hill\", \"Chinatown\"): 9,\n    (\"Russian Hill\", \"Presidio\"): 14,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"Alamo Square\", \"Union Square\"): 14,\n    (\"Alamo Square\", \"Russian Hill\"): 13,\n    (\"Alamo Square\", \"Haight-Ashbury\"): 5,\n    (\"Alamo Square\", \"Marina District\"): 15,\n    (\"Alamo Square\", \"Bayview\"): 16,\n    (\"Alamo Square\", \"Chinatown\"): 15,\n    (\"Alamo Square\", \"Presidio\"): 17,\n    (\"Alamo Square\", \"Sunset District\"): 16,\n    (\"Haight-Ashbury\", \"Union Square\"): 19,\n    (\"Haight-Ashbury\", \"Russian Hill\"): 17,\n    (\"Haight-Ashbury\", \"Alamo Square\"): 5,\n    (\"Haight-Ashbury\", \"Marina District\"): 17,\n    (\"Haight-Ashbury\", \"Bayview\"): 18,\n    (\"Haight-Ashbury\", \"Chinatown\"): 19,\n    (\"Haight-Ashbury\", \"Presidio\"): 15,\n    (\"Haight-Ashbury\", \"Sunset District\"): 15,\n    (\"Marina District\", \"Union Square\"): 16,\n    (\"Marina District\", \"Russian Hill\"): 8,\n    (\"Marina District\", \"Alamo Square\"): 15,\n    (\"Marina District\", \"Haight-Ashbury\"): 16,\n    (\"Marina District\", \"Bayview\"): 27,\n    (\"Marina District\", \"Chinatown\"): 15,\n    (\"Marina District\", \"Presidio\"): 10,\n    (\"Marina District\", \"Sunset District\"): 19,\n    (\"Bayview\", \"Union Square\"): 18,\n    (\"Bayview\", \"Russian Hill\"): 23,\n    (\"Bayview\", \"Alamo Square\"): 16,\n    (\"Bayview\", \"Haight-Ashbury\"): 19,\n    (\"Bayview\", \"Marina District\"): 27,\n    (\"Bayview\", \"Chinatown\"): 19,\n    (\"Bayview\", \"Presidio\"): 32,\n    (\"Bayview\", \"Sunset District\"): 23,\n    (\"Chinatown\", \"Union Square\"): 7,\n    (\"Chinatown\", \"Russian Hill\"): 7,\n    (\"Chinatown\", \"Alamo Square\"): 17,\n    (\"Chinatown\", \"Haight-Ashbury\"): 19,\n    (\"Chinatown\", \"Marina District\"): 12,\n    (\"Chinatown\", \"Bayview\"): 20,\n    (\"Chinatown\", \"Presidio\"): 19,\n    (\"Chinatown\", \"Sunset District\"): 29,\n    (\"Presidio\", \"Union Square\"): 22,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Presidio\", \"Alamo Square\"): 19,\n    (\"Presidio\", \"Haight-Ashbury\"): 15,\n    (\"Presidio\", \"Marina District\"): 11,\n    (\"Presidio\", \"Bayview\"): 31,\n    (\"Presidio\", \"Chinatown\"): 21,\n    (\"Presidio\", \"Sunset District\"): 15,\n    (\"Sunset District\", \"Union Square\"): 30,\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    (\"Sunset District\", \"Alamo Square\"): 17,\n    (\"Sunset District\", \"Haight-Ashbury\"): 15,\n    (\"Sunset District\", \"Marina District\"): 21,\n    (\"Sunset District\", \"Bayview\"): 22,\n    (\"Sunset District\", \"Chinatown\"): 30,\n    (\"Sunset District\", \"Presidio\"): 16,\n}\n\n# Meeting constraints\nmeetings = [\n    {\"name\": \"Betty\", \"location\": \"Russian Hill\", \"start\": \"07:00\", \"end\": \"16:45\", \"duration\": 105},\n    {\"name\": \"Melissa\", \"location\": \"Alamo Square\", \"start\": \"09:30\", \"end\": \"17:15\", \"duration\": 105},\n    {\"name\": \"Joshua\", \"location\": \"Haight-Ashbury\", \"start\": \"12:15\", \"end\": \"19:00\", \"duration\": 90},\n    {\"name\": \"Jeffrey\", \"location\": \"Marina District\", \"start\": \"12:15\", \"end\": \"18:00\", \"duration\": 45},\n    {\"name\": \"James\", \"location\": \"Bayview\", \"start\": \"07:30\", \"end\": \"20:00\", \"duration\": 90},\n    {\"name\": \"Anthony\", \"location\": \"Chinatown\", \"start\": \"11:45\", \"end\": \"13:30\", \"duration\": 75},\n    {\"name\": \"Timothy\", \"location\": \"Presidio\", \"start\": \"12:30\", \"end\": \"14:45\", \"duration\": 90},\n    {\"name\": \"Emily\", \"location\": \"Sunset District\", \"start\": \"19:30\", \"end\": \"21:30\", \"duration\": 120},\n]\n\ndef time_to_minutes(t):\n    return int(t[:2]) * 60 + int(t[3:5])\n\ndef minutes_to_time(m):\n    return f\"{m // 60}:{m % 60:02d}\"\n\ndef get_travel_time(from_loc, to_loc):\n    return travel_times.get((from_loc, to_loc), travel_times.get((to_loc, from_loc), float('inf')))\n\ndef schedule_meetings(start_time, end_time, meetings):\n    available_slots = []\n    for meeting in meetings:\n        start = time_to_minutes(meeting[\"start\"])\n        end = time_to_minutes(meeting[\"end\"])\n        available_slots.append((meeting[\"name\"], meeting[\"location\"], start, end, meeting[\"duration\"]))\n\n    best_itinerary = []\n    max_meetings = 0\n\n    for perm in permutations(available_slots):\n        current_time = start_time\n        current_itinerary = []\n        valid_schedule = True\n\n        for name, location, start, end, duration in perm:\n            travel_time = get_travel_time(\"Union Square\", location)\n            start_meeting = max(current_time + travel_time, start)\n            if start_meeting + duration > end:\n                valid_schedule = False\n                break\n            \n            current_itinerary.append({\n                \"action\": \"meet\",\n                \"location\": location,\n                \"person\": name,\n                \"start_time\": minutes_to_time(start_meeting),\n                \"end_time\": minutes_to_time(start_meeting + duration)\n            })\n            current_time = start_meeting + duration + get_travel_time(location, \"Union Square\")\n\n        if valid_schedule and len(current_itinerary) > max_meetings:\n            max_meetings = len(current_itinerary)\n            best_itinerary = current_itinerary\n\n    return best_itinerary\n\n# The day starts at 9:00 AM (9:00 in minutes)\nstart_time = time_to_minutes(\"09:00\")\nend_time = time_to_minutes(\"21:30\")\n\nitinerary = schedule_meetings(start_time, end_time, meetings)\n\nresult = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_789"
        }
    ]
}