{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kenneth",
                        "start_time": "11:47",
                        "end_time": "12:32"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kenneth",
                        "start_time": "12:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Thomas",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times in minutes\ntravel_times = {\n    (\"Nob Hill\", \"Pacific Heights\"): 8,\n    (\"Nob Hill\", \"Mission District\"): 13,\n    (\"Pacific Heights\", \"Nob Hill\"): 8,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"Mission District\", \"Nob Hill\"): 12,\n    (\"Mission District\", \"Pacific Heights\"): 16,\n}\n\n# Meeting constraints\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\nthomas_availability_start = datetime.strptime(\"15:30\", \"%H:%M\")\nthomas_availability_end = datetime.strptime(\"19:15\", \"%H:%M\")\nmin_thomas_meeting_duration = timedelta(minutes=75)\n\nkenneth_availability_start = datetime.strptime(\"12:00\", \"%H:%M\")\nkenneth_availability_end = datetime.strptime(\"15:45\", \"%H:%M\")\nmin_kenneth_meeting_duration = timedelta(minutes=45)\n\n# Function to calculate time after traveling\ndef travel_time(start_location, end_location):\n    return travel_times.get((start_location, end_location), travel_times.get((end_location, start_location), float('inf')))\n\n# Function to create a meeting schedule\ndef create_schedule():\n    schedule = []\n    \n    # Meet Kenneth\n    # Travel from Nob Hill to Mission District\n    travel_to_kenneth = travel_time(\"Nob Hill\", \"Mission District\")\n    start_meeting_kenneth = kenneth_availability_start - timedelta(minutes=travel_to_kenneth)\n    end_meeting_kenneth = start_meeting_kenneth + min_kenneth_meeting_duration\n    \n    if end_meeting_kenneth <= kenneth_availability_end:\n        # Schedule the meeting with Kenneth\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": \"Mission District\",\n            \"person\": \"Kenneth\",\n            \"start_time\": start_meeting_kenneth.strftime(\"%H:%M\"),\n            \"end_time\": end_meeting_kenneth.strftime(\"%H:%M\"),\n        })\n\n        # Travel back to Nob Hill\n        travel_back = travel_time(\"Mission District\", \"Nob Hill\")\n        \n        # Calculate time after meeting with Kenneth\n        time_after_kenneth = end_meeting_kenneth + timedelta(minutes=travel_back)\n\n        # Meet Thomas\n        # Travel from Nob Hill to Pacific Heights\n        travel_to_thomas = travel_time(\"Nob Hill\", \"Pacific Heights\")\n        start_meeting_thomas = max(time_after_kenneth + timedelta(minutes=travel_to_thomas), thomas_availability_start)\n        \n        if start_meeting_thomas + min_thomas_meeting_duration <= thomas_availability_end:\n            end_meeting_thomas = start_meeting_thomas + min_thomas_meeting_duration\n            # Schedule the meeting with Thomas\n            schedule.append({\n                \"action\": \"meet\",\n                \"location\": \"Pacific Heights\",\n                \"person\": \"Thomas\",\n                \"start_time\": start_meeting_thomas.strftime(\"%H:%M\"),\n                \"end_time\": end_meeting_thomas.strftime(\"%H:%M\"),\n            })\n    \n    return {\n        \"itinerary\": schedule\n    }\n\n# Main logic to create schedule and output JSON\nitinerary = create_schedule()\nprint(json.dumps(itinerary, indent=2))\n```",
            "count": "meeting_planning_example_174"
        }
    ]
}