{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "9:29",
                        "end_time": "11:14"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Anthony",
                        "start_time": "13:15",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Rebecca",
                        "start_time": "19:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "9:29",
                        "end_time": "11:14"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Anthony",
                        "start_time": "13:15",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Rebecca",
                        "start_time": "19:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Constants for travel times in minutes\ntravel_times = {\n    \"Sunset\": {\"Chinatown\": 30, \"Russian Hill\": 24, \"North Beach\": 29},\n    \"Chinatown\": {\"Sunset\": 29, \"Russian Hill\": 7, \"North Beach\": 3},\n    \"Russian Hill\": {\"Sunset\": 23, \"Chinatown\": 9, \"North Beach\": 5},\n    \"North Beach\": {\"Sunset\": 27, \"Chinatown\": 6, \"Russian Hill\": 4},\n}\n\n# Meeting availability and constraints\nmeetings = {\n    \"Anthony\": {\"location\": \"Chinatown\", \"start\": \"13:15\", \"end\": \"14:30\", \"duration\": 60},\n    \"Rebecca\": {\"location\": \"Russian Hill\", \"start\": \"19:30\", \"end\": \"21:15\", \"duration\": 105},\n    \"Melissa\": {\"location\": \"North Beach\", \"start\": \"08:15\", \"end\": \"13:30\", \"duration\": 105},\n}\n\n# Start day and time in Sunset District\narrival_time = datetime.strptime(\"09:00\", \"%H:%M\")\n\ndef calculate_schedule():\n    itinerary = []\n\n    # Meeting Melissa\n    melissa_start = arrival_time + timedelta(minutes=travel_times[\"Sunset\"][\"North Beach\"])\n    if melissa_start.time() < datetime.strptime(meetings[\"Melissa\"][\"start\"], \"%H:%M\").time():\n        melissa_start = datetime.strptime(meetings[\"Melissa\"][\"start\"], \"%H:%M\")\n    \n    melissa_end = melissa_start + timedelta(minutes=meetings[\"Melissa\"][\"duration\"])\n    \n    if melissa_end.time() > datetime.strptime(meetings[\"Melissa\"][\"end\"], \"%H:%M\").time():\n        melissa_end = datetime.strptime(meetings[\"Melissa\"][\"end\"], \"%H:%M\")\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Melissa\"][\"location\"],\n        \"person\": \"Melissa\",\n        \"start_time\": melissa_start.strftime(\"%H:%M\"),\n        \"end_time\": melissa_end.strftime(\"%H:%M\"),\n    })\n\n    # Traveling to Chinatown to meet Anthony\n    travel_to_anthony = melissa_end + timedelta(minutes=travel_times[\"North Beach\"][\"Chinatown\"])\n    anthony_start = max(travel_to_anthony, datetime.strptime(meetings[\"Anthony\"][\"start\"], \"%H:%M\"))\n    anthony_end = anthony_start + timedelta(minutes=meetings[\"Anthony\"][\"duration\"])\n\n    if anthony_end.time() > datetime.strptime(meetings[\"Anthony\"][\"end\"], \"%H:%M\").time():\n        anthony_end = datetime.strptime(meetings[\"Anthony\"][\"end\"], \"%H:%M\")\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Anthony\"][\"location\"],\n        \"person\": \"Anthony\",\n        \"start_time\": anthony_start.strftime(\"%H:%M\"),\n        \"end_time\": anthony_end.strftime(\"%H:%M\"),\n    })\n\n    # Traveling to Russian Hill to meet Rebecca\n    travel_to_rebecca = anthony_end + timedelta(minutes=travel_times[\"Chinatown\"][\"Russian Hill\"])\n    rebecca_start = max(travel_to_rebecca, datetime.strptime(meetings[\"Rebecca\"][\"start\"], \"%H:%M\"))\n    rebecca_end = rebecca_start + timedelta(minutes=meetings[\"Rebecca\"][\"duration\"])\n\n    if rebecca_end.time() > datetime.strptime(meetings[\"Rebecca\"][\"end\"], \"%H:%M\").time():\n        rebecca_end = datetime.strptime(meetings[\"Rebecca\"][\"end\"], \"%H:%M\")\n    \n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Rebecca\"][\"location\"],\n        \"person\": \"Rebecca\",\n        \"start_time\": rebecca_start.strftime(\"%H:%M\"),\n        \"end_time\": rebecca_end.strftime(\"%H:%M\"),\n    })\n\n    return {\"itinerary\": itinerary}\n\n# Calculate and output the optimal schedule\noptimal_schedule = calculate_schedule()\nprint(json.dumps(optimal_schedule, indent=2))\n```",
            "count": "meeting_planning_example_209"
        }
    ]
}