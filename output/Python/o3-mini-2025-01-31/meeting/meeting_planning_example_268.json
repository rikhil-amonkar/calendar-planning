{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Timothy",
                        "start_time": "12:00",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "16:45",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "18:45",
                        "end_time": "19:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Timothy",
                        "start_time": "12:00",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "18:45",
                        "end_time": "19:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Joseph",
                        "start_time": "19:59",
                        "end_time": "20:59"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nimport itertools\n\n# Define helper functions to convert times to minutes from midnight and back.\ndef time_to_minutes(t):\n    # t in \"H:MM\" format, e.g., \"9:00\" or \"16:45\"\n    hours, minutes = map(int, t.split(\":\"))\n    return hours * 60 + minutes\n\ndef minutes_to_time(m):\n    hours = m // 60\n    minutes = m % 60\n    return f\"{hours}:{minutes:02d}\"\n\n# Define travel times (in minutes) in a dictionary with keys (from, to)\ntravel_times = {\n    (\"Golden Gate Park\", \"Alamo Square\"): 10,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"Russian Hill\"): 19,\n    (\"Alamo Square\", \"Golden Gate Park\"): 9,\n    (\"Alamo Square\", \"Presidio\"): 18,\n    (\"Alamo Square\", \"Russian Hill\"): 13,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Alamo Square\"): 18,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    (\"Russian Hill\", \"Golden Gate Park\"): 21,\n    (\"Russian Hill\", \"Alamo Square\"): 15,\n    (\"Russian Hill\", \"Presidio\"): 14,\n}\n\n# Define friends meeting constraints as dictionaries.\n# Each friend dict will include: name, location, available start, available end, and minimum meeting duration.\nfriends = [\n    {\n        \"name\": \"Timothy\",\n        \"location\": \"Alamo Square\",\n        \"avail_start\": time_to_minutes(\"12:00\"),\n        \"avail_end\": time_to_minutes(\"16:15\"),\n        \"min_duration\": 105\n    },\n    {\n        \"name\": \"Mark\",\n        \"location\": \"Presidio\",\n        \"avail_start\": time_to_minutes(\"18:45\"),\n        \"avail_end\": time_to_minutes(\"21:00\"),\n        \"min_duration\": 60\n    },\n    {\n        \"name\": \"Joseph\",\n        \"location\": \"Russian Hill\",\n        \"avail_start\": time_to_minutes(\"16:45\"),\n        \"avail_end\": time_to_minutes(\"21:30\"),\n        \"min_duration\": 60\n    }\n]\n\n# Starting parameters\nstart_location = \"Golden Gate Park\"\nstart_time = time_to_minutes(\"9:00\")\n\n# Function to simulate a given order and compute schedule if possible.\ndef simulate_schedule(order):\n    itinerary = []\n    current_time = start_time\n    current_location = start_location\n    \n    for friend in order:\n        # Compute travel time from current location to friend's location\n        if current_location == friend[\"location\"]:\n            travel_time = 0\n        else:\n            travel_time = travel_times.get((current_location, friend[\"location\"]), None)\n            if travel_time is None:\n                # If travel time is not defined, invalid route.\n                return None\n        arrival_time = current_time + travel_time\n        # Meeting can only start once friend is available.\n        meeting_start = max(arrival_time, friend[\"avail_start\"])\n        meeting_end = meeting_start + friend[\"min_duration\"]\n        # Check if meeting ends before friend leaves.\n        if meeting_end > friend[\"avail_end\"]:\n            return None  # invalid schedule\n        # Record meeting in itinerary.\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"person\": friend[\"name\"],\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        })\n        # Update current time and location.\n        current_time = meeting_end\n        current_location = friend[\"location\"]\n    return (itinerary, current_time)\n\n# Evaluate all permutations to pick the optimal schedule.\nbest_schedule = None\nbest_finish = None\n\nfor order in itertools.permutations(friends):\n    result = simulate_schedule(order)\n    if result is not None:\n        itinerary, finish_time = result\n        # We want to maximize number of meetings. All valid schedules here meet all three.\n        # To pick an optimal one, pick the one that finishes earliest.\n        if best_finish is None or finish_time < best_finish:\n            best_finish = finish_time\n            best_schedule = itinerary\n\n# Prepare the JSON output dictionary\noutput = {\n    \"itinerary\": best_schedule if best_schedule is not None else []\n}\n\n# Output the result as JSON\nprint(json.dumps(output, indent=2))\n                \nif __name__ == '__main__':\n    pass",
            "count": "meeting_planning_example_268"
        }
    ]
}