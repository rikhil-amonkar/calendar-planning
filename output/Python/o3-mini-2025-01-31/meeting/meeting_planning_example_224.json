{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "18:54",
                        "end_time": "19:09"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "9:25",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nimport itertools\n\n# Helper functions to convert time in minutes since midnight to formatted H:MM string\ndef minutes_to_str(minutes):\n    hour = minutes // 60\n    minute = minutes % 60\n    return f\"{hour}:{minute:02d}\"\n\n# Define travel times in minutes between locations as a dictionary.\n# Keys are tuples (from, to)\ntravel_times = {\n    (\"Fisherman's Wharf\", \"Golden Gate Park\"): 25,\n    (\"Fisherman's Wharf\", \"Presidio\"): 17,\n    (\"Fisherman's Wharf\", \"Richmond District\"): 18,\n    (\"Golden Gate Park\", \"Fisherman's Wharf\"): 24,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"Richmond District\"): 7,\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Richmond District\"): 7,\n    (\"Richmond District\", \"Fisherman's Wharf\"): 18,\n    (\"Richmond District\", \"Golden Gate Park\"): 9,\n    (\"Richmond District\", \"Presidio\"): 7\n}\n\n# Define meeting constraints for each friend.\n# Times are given in minutes since midnight.\n# For example, 9:00 AM is 9*60 = 540.\nmeetings = {\n    \"Melissa\": {\n        \"location\": \"Golden Gate Park\",\n        \"avail_start\": 8*60 + 30,  # 8:30 AM -> 510 minutes\n        \"avail_end\": 20*60,        # 20:00 -> 1200 minutes\n        \"duration\": 15             # 15 minutes minimum meeting\n    },\n    \"Nancy\": {\n        \"location\": \"Presidio\",\n        \"avail_start\": 19*60 + 45, # 19:45 -> 1185 minutes\n        \"avail_end\": 22*60,        # 22:00 -> 1320 minutes\n        \"duration\": 105            # 105 minutes meeting\n    },\n    \"Emily\": {\n        \"location\": \"Richmond District\",\n        \"avail_start\": 16*60 + 45, # 16:45 -> 1005 minutes\n        \"avail_end\": 22*60,        # 22:00 -> 1320 minutes\n        \"duration\": 120            # 120 minutes meeting\n    }\n}\n\n# Starting point and start time\nstart_location = \"Fisherman's Wharf\"\nstart_time = 9 * 60  # 9:00 AM => 540 minutes\n\n# Function to simulate a given permutation of meetings.\n# Returns a tuple (feasible, itinerary, finish_time, total_travel_time)\ndef simulate_schedule(order):\n    itinerary = []\n    current_location = start_location\n    current_time = start_time\n    total_travel = 0\n\n    for person in order:\n        details = meetings[person]\n        meeting_location = details[\"location\"]\n        # Get travel time from current location to meeting location.\n        travel = travel_times.get((current_location, meeting_location))\n        if travel is None:\n            # If not found, then try opposite order or skip (incomplete data)\n            return (False, None, None, None)\n        # Travel to the meeting location.\n        current_time += travel\n        total_travel += travel\n\n        # Meeting can only start after the friend's available start time.\n        meeting_start = max(current_time, details[\"avail_start\"])\n        meeting_end = meeting_start + details[\"duration\"]\n        # Check if meeting ends before friend's available end.\n        if meeting_end > details[\"avail_end\"]:\n            return (False, None, None, None)\n\n        # Append meeting event to itinerary.\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting_location,\n            \"person\": person,\n            \"start_time\": minutes_to_str(meeting_start),\n            \"end_time\": minutes_to_str(meeting_end)\n        })\n\n        # Update current time and current location.\n        current_time = meeting_end\n        current_location = meeting_location\n\n    return (True, itinerary, current_time, total_travel)\n\n# Evaluate all possible orders (permutations) of meeting with Melissa, Nancy, and Emily.\npossible_orders = list(itertools.permutations(meetings.keys()))\nfeasible_schedules = []\n\nfor order in possible_orders:\n    feasible, itinerary, finish_time, total_travel = simulate_schedule(order)\n    if feasible:\n        feasible_schedules.append({\n            \"order\": order,\n            \"itinerary\": itinerary,\n            \"finish_time\": finish_time,\n            \"total_travel\": total_travel\n        })\n\n# Choose the best schedule.\n# Our primary objective is to meet as many friends as possible (all 3).\n# As a tie-breaker, we choose the schedule with the smallest finish time.\nif feasible_schedules:\n    best = min(feasible_schedules, key=lambda x: (x[\"finish_time\"], x[\"total_travel\"]))\n    result = {\"itinerary\": best[\"itinerary\"]}\nelse:\n    result = {\"itinerary\": []}\n\n# Output the result as JSON.\nprint(json.dumps(result))",
            "count": "meeting_planning_example_224"
        }
    ]
}