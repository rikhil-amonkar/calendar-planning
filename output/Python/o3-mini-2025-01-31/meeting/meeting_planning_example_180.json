{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "James",
                        "start_time": "12:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "14:07",
                        "end_time": "14:37"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "James",
                        "start_time": "12:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Robert",
                        "start_time": "14:07",
                        "end_time": "14:37"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef format_time(dt):\n    # Format time as H:MM in 24-hour format with no leading zero for hour.\n    return f\"{dt.hour}:{dt.minute:02d}\"\n\ndef main():\n    # Input Variables\n    # Arrival at North Beach at 9:00AM (using any arbitrary date, here Jan 1, 2023)\n    arrival_location = \"North Beach\"\n    arrival_time = datetime(2023, 1, 1, 9, 0)\n    \n    # Travel times in minutes between locations\n    travel_times = {\n        (\"North Beach\", \"Mission District\"): 18,\n        (\"North Beach\", \"The Castro\"): 22,\n        (\"Mission District\", \"North Beach\"): 17,\n        (\"Mission District\", \"The Castro\"): 7,\n        (\"The Castro\", \"North Beach\"): 20,\n        (\"The Castro\", \"Mission District\"): 7\n    }\n    \n    # James's meeting details: available at Mission District from 12:45 to 14:00 with a minimum meeting duration of 75 minutes.\n    james_location = \"Mission District\"\n    james_avail_start = datetime(2023, 1, 1, 12, 45)\n    james_avail_end = datetime(2023, 1, 1, 14, 0)\n    james_min_duration = timedelta(minutes=75)\n    \n    # Robert's meeting details: available at The Castro from 12:45 to 15:15 with a minimum meeting duration of 30 minutes.\n    robert_location = \"The Castro\"\n    robert_avail_start = datetime(2023, 1, 1, 12, 45)\n    robert_avail_end = datetime(2023, 1, 1, 15, 15)\n    robert_min_duration = timedelta(minutes=30)\n    \n    # The optimal plan is to meet James first then Robert.\n    # Compute departure from North Beach to arrive at Mission District exactly at James's available start.\n    travel_NB_to_Mission = timedelta(minutes=travel_times[(arrival_location, james_location)])\n    departure_from_NB = james_avail_start - travel_NB_to_Mission\n    # (Assume waiting at North Beach until departure_from_NB if arrival_time is earlier)\n    \n    # Schedule meeting with James\n    james_meeting_start = james_avail_start\n    james_meeting_end = james_meeting_start + james_min_duration\n    # Ensure meeting ends within his available window\n    if james_meeting_end > james_avail_end:\n        james_meeting_end = james_avail_end\n    \n    # After meeting James, travel from Mission District to The Castro\n    travel_Mission_to_Castro = timedelta(minutes=travel_times[(james_location, robert_location)])\n    arrival_at_robert = james_meeting_end + travel_Mission_to_Castro\n    \n    # Schedule meeting with Robert, starting at the later of arrival time or his available start time.\n    robert_meeting_start = max(arrival_at_robert, robert_avail_start)\n    robert_meeting_end = robert_meeting_start + robert_min_duration\n    if robert_meeting_end > robert_avail_end:\n        robert_meeting_end = robert_avail_end\n    \n    # Build itinerary as required output structure.\n    itinerary = [\n        {\n            \"action\": \"meet\",\n            \"location\": james_location,\n            \"person\": \"James\",\n            \"start_time\": format_time(james_meeting_start),\n            \"end_time\": format_time(james_meeting_end)\n        },\n        {\n            \"action\": \"meet\",\n            \"location\": robert_location,\n            \"person\": \"Robert\",\n            \"start_time\": format_time(robert_meeting_start),\n            \"end_time\": format_time(robert_meeting_end)\n        }\n    ]\n    \n    schedule = {\"itinerary\": itinerary}\n    # Output the schedule in JSON format.\n    print(json.dumps(schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_180"
        }
    ]
}