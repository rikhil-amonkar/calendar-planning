{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Thomas",
                        "start_time": "13:30",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Nancy",
                        "start_time": "14:45",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Brian",
                        "start_time": "15:09",
                        "end_time": "16:09"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "16:30",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Mary",
                        "start_time": "18:37",
                        "end_time": "19:37"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Matthew",
                        "start_time": "19:52",
                        "end_time": "21:52"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Thomas",
                        "start_time": "13:30",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Nancy",
                        "start_time": "14:45",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Brian",
                        "start_time": "15:09",
                        "end_time": "16:09"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "16:30",
                        "end_time": "18:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Mary",
                        "start_time": "18:37",
                        "end_time": "19:37"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Matthew",
                        "start_time": "19:52",
                        "end_time": "21:52"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom copy import deepcopy\n\n# Helper functions for time conversions\ndef time_to_minutes(t):\n    # t is a string in \"H:MM\" 24-hour format (e.g., \"9:00\", \"13:30\")\n    parts = t.split(\":\")\n    return int(parts[0]) * 60 + int(parts[1])\n\ndef minutes_to_time(m):\n    # Convert minutes to \"H:MM\" format (24-hour, no leading zero for hours)\n    h = m // 60\n    mm = m % 60\n    return f\"{h}:{mm:02d}\"\n\n# Define travel times as a nested dictionary (all times in minutes)\ntravel_times = {\n    \"Embarcadero\": {\n        \"Bayview\": 21, \"Chinatown\": 7, \"Alamo Square\": 19, \"Nob Hill\": 10,\n        \"Presidio\": 20, \"Union Square\": 10, \"The Castro\": 25, \"North Beach\": 5,\n        \"Fisherman's Wharf\": 6, \"Marina District\": 12\n    },\n    \"Bayview\": {\n        \"Embarcadero\": 19, \"Chinatown\": 19, \"Alamo Square\": 16, \"Nob Hill\": 20,\n        \"Presidio\": 32, \"Union Square\": 18, \"The Castro\": 19, \"North Beach\": 22,\n        \"Fisherman's Wharf\": 25, \"Marina District\": 27\n    },\n    \"Chinatown\": {\n        \"Embarcadero\": 5, \"Bayview\": 20, \"Alamo Square\": 17, \"Nob Hill\": 9,\n        \"Presidio\": 19, \"Union Square\": 7, \"The Castro\": 22, \"North Beach\": 3,\n        \"Fisherman's Wharf\": 8, \"Marina District\": 12\n    },\n    \"Alamo Square\": {\n        \"Embarcadero\": 16, \"Bayview\": 16, \"Chinatown\": 15, \"Nob Hill\": 11,\n        \"Presidio\": 17, \"Union Square\": 14, \"The Castro\": 8, \"North Beach\": 15,\n        \"Fisherman's Wharf\": 19, \"Marina District\": 15\n    },\n    \"Nob Hill\": {\n        \"Embarcadero\": 9, \"Bayview\": 19, \"Chinatown\": 6, \"Alamo Square\": 11,\n        \"Presidio\": 17, \"Union Square\": 7, \"The Castro\": 17, \"North Beach\": 8,\n        \"Fisherman's Wharf\": 10, \"Marina District\": 11\n    },\n    \"Presidio\": {\n        \"Embarcadero\": 20, \"Bayview\": 31, \"Chinatown\": 21, \"Alamo Square\": 19,\n        \"Nob Hill\": 18, \"Union Square\": 22, \"The Castro\": 21, \"North Beach\": 18,\n        \"Fisherman's Wharf\": 19, \"Marina District\": 11\n    },\n    \"Union Square\": {\n        \"Embarcadero\": 11, \"Bayview\": 15, \"Chinatown\": 7, \"Alamo Square\": 15,\n        \"Nob Hill\": 9, \"Presidio\": 24, \"The Castro\": 17, \"North Beach\": 10,\n        \"Fisherman's Wharf\": 15, \"Marina District\": 18\n    },\n    \"The Castro\": {\n        \"Embarcadero\": 22, \"Bayview\": 19, \"Chinatown\": 22, \"Alamo Square\": 8,\n        \"Nob Hill\": 16, \"Presidio\": 20, \"Union Square\": 19, \"North Beach\": 20,\n        \"Fisherman's Wharf\": 24, \"Marina District\": 21\n    },\n    \"North Beach\": {\n        \"Embarcadero\": 6, \"Bayview\": 25, \"Chinatown\": 6, \"Alamo Square\": 16,\n        \"Nob Hill\": 7, \"Presidio\": 17, \"Union Square\": 7, \"The Castro\": 23,\n        \"Fisherman's Wharf\": 5, \"Marina District\": 9\n    },\n    \"Fisherman's Wharf\": {\n        \"Embarcadero\": 8, \"Bayview\": 26, \"Chinatown\": 12, \"Alamo Square\": 21,\n        \"Nob Hill\": 11, \"Presidio\": 17, \"Union Square\": 13, \"The Castro\": 27,\n        \"North Beach\": 6, \"Marina District\": 9\n    },\n    \"Marina District\": {\n        \"Embarcadero\": 14, \"Bayview\": 27, \"Chinatown\": 15, \"Alamo Square\": 15,\n        \"Nob Hill\": 12, \"Presidio\": 10, \"Union Square\": 16, \"The Castro\": 22,\n        \"North Beach\": 11, \"Fisherman's Wharf\": 10\n    }\n}\n\n# Define meeting appointments as list of dictionaries.\n# Each appointment has: person, location, window_start, window_end, min_duration.\n# Times are stored in minutes from midnight.\nappointments = [\n    {\"person\": \"Matthew\", \"location\": \"Bayview\", \"window_start\": time_to_minutes(\"19:15\"), \"window_end\": time_to_minutes(\"22:00\"), \"duration\": 120},\n    {\"person\": \"Karen\", \"location\": \"Chinatown\", \"window_start\": time_to_minutes(\"19:15\"), \"window_end\": time_to_minutes(\"21:15\"), \"duration\": 90},\n    {\"person\": \"Sarah\", \"location\": \"Alamo Square\", \"window_start\": time_to_minutes(\"20:00\"), \"window_end\": time_to_minutes(\"21:45\"), \"duration\": 105},\n    {\"person\": \"Jessica\", \"location\": \"Nob Hill\", \"window_start\": time_to_minutes(\"16:30\"), \"window_end\": time_to_minutes(\"18:45\"), \"duration\": 120},\n    {\"person\": \"Stephanie\", \"location\": \"Presidio\", \"window_start\": time_to_minutes(\"7:30\"),  \"window_end\": time_to_minutes(\"10:15\"), \"duration\": 60},\n    {\"person\": \"Mary\", \"location\": \"Union Square\", \"window_start\": time_to_minutes(\"16:45\"), \"window_end\": time_to_minutes(\"21:30\"), \"duration\": 60},\n    {\"person\": \"Charles\", \"location\": \"The Castro\", \"window_start\": time_to_minutes(\"16:30\"), \"window_end\": time_to_minutes(\"22:00\"), \"duration\": 105},\n    {\"person\": \"Nancy\", \"location\": \"North Beach\", \"window_start\": time_to_minutes(\"14:45\"), \"window_end\": time_to_minutes(\"20:00\"), \"duration\": 15},\n    {\"person\": \"Thomas\", \"location\": \"Fisherman's Wharf\", \"window_start\": time_to_minutes(\"13:30\"), \"window_end\": time_to_minutes(\"19:00\"), \"duration\": 30},\n    {\"person\": \"Brian\", \"location\": \"Marina District\", \"window_start\": time_to_minutes(\"12:15\"), \"window_end\": time_to_minutes(\"18:00\"), \"duration\": 60},\n]\n\n# Starting point and time (Embarcadero at 9:00)\nstart_location = \"Embarcadero\"\nstart_time = time_to_minutes(\"9:00\")\n\n# Backtracking search for the optimal schedule (maximizing the count of appointments)\nbest_schedule = []\nbest_count = 0\n\ndef backtrack(current_location, current_time, remaining_appts, current_schedule):\n    global best_schedule, best_count\n    found = False\n    # Try each remaining appointment in turn\n    for i, appt in enumerate(remaining_appts):\n        # Get travel time from current location to appointment location\n        if current_location == appt[\"location\"]:\n            travel = 0\n        else:\n            travel = travel_times[current_location][appt[\"location\"]]\n        arrival_time = current_time + travel\n        # The meeting can only start when the appointment is available\n        meeting_start = max(arrival_time, appt[\"window_start\"])\n        meeting_end = meeting_start + appt[\"duration\"]\n        # Check if meeting can be completed within the appointment's window\n        if meeting_end <= appt[\"window_end\"]:\n            # It's feasible, add to schedule\n            new_schedule_item = {\n                \"action\": \"meet\",\n                \"location\": appt[\"location\"],\n                \"person\": appt[\"person\"],\n                \"start_time\": meeting_start,\n                \"end_time\": meeting_end\n            }\n            new_schedule = current_schedule + [new_schedule_item]\n            # Prepare remaining appointments for recursion\n            new_remaining = remaining_appts[:i] + remaining_appts[i+1:]\n            backtrack(appt[\"location\"], meeting_end, new_remaining, new_schedule)\n            found = True\n    # If no further appointment can be scheduled, update best_schedule if count is higher\n    if not found:\n        if len(current_schedule) > best_count:\n            best_count = len(current_schedule)\n            best_schedule = current_schedule\n\n# Start backtracking from the starting point/time\nbacktrack(start_location, start_time, appointments, [])\n\n# Convert schedule times back to \"H:MM\" format in output itinerary\nitinerary = []\nfor item in best_schedule:\n    itinerary.append({\n        \"action\": item[\"action\"],\n        \"location\": item[\"location\"],\n        \"person\": item[\"person\"],\n        \"start_time\": minutes_to_time(item[\"start_time\"]),\n        \"end_time\": minutes_to_time(item[\"end_time\"])\n    })\n\n# Prepare output dictionary\noutput = {\"itinerary\": itinerary}\n\n# Output the result as JSON\nprint(json.dumps(output, indent=2))",
            "count": "meeting_planning_example_976"
        }
    ]
}