{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "11:45",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Paul",
                        "start_time": "16:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "17:32",
                        "end_time": "18:17"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Matthew",
                        "start_time": "18:35",
                        "end_time": "19:50"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Patricia",
                        "start_time": "20:00",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Paul",
                        "start_time": "16:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "17:32",
                        "end_time": "18:17"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Matthew",
                        "start_time": "18:35",
                        "end_time": "19:50"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jeffrey",
                        "start_time": "20:00",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "20:56",
                        "end_time": "21:26"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom itertools import permutations\n\n# Helper functions for time conversion\ndef time_to_minutes(t):\n    # t is string in \"H:MM\" 24-hour (e.g., \"9:00\", \"16:15\")\n    h, m = t.split(\":\")\n    return int(h)*60 + int(m)\n\ndef minutes_to_time(m):\n    # returns time string in H:MM format (no leading zero for hour)\n    h = m // 60\n    mi = m % 60\n    return f\"{h}:{mi:02d}\"\n\n# Travel times provided (in minutes). They are directional.\ntravel_times = {\n    \"Bayview\": {\n        \"Nob Hill\": 20,\n        \"Union Square\": 17,\n        \"Chinatown\": 18,\n        \"The Castro\": 20,\n        \"Presidio\": 31,\n        \"Pacific Heights\": 23,\n        \"Russian Hill\": 23,\n    },\n    \"Nob Hill\": {\n        \"Bayview\": 19,\n        \"Union Square\": 7,\n        \"Chinatown\": 6,\n        \"The Castro\": 17,\n        \"Presidio\": 17,\n        \"Pacific Heights\": 8,\n        \"Russian Hill\": 5,\n    },\n    \"Union Square\": {\n        \"Bayview\": 15,\n        \"Nob Hill\": 9,\n        \"Chinatown\": 7,\n        \"The Castro\": 19,\n        \"Presidio\": 24,\n        \"Pacific Heights\": 15,\n        \"Russian Hill\": 13,\n    },\n    \"Chinatown\": {\n        \"Bayview\": 22,\n        \"Nob Hill\": 8,\n        \"Union Square\": 7,\n        \"The Castro\": 22,\n        \"Presidio\": 19,\n        \"Pacific Heights\": 10,\n        \"Russian Hill\": 7,\n    },\n    \"The Castro\": {\n        \"Bayview\": 19,\n        \"Nob Hill\": 16,\n        \"Union Square\": 19,\n        \"Chinatown\": 20,\n        \"Presidio\": 20,\n        \"Pacific Heights\": 16,\n        \"Russian Hill\": 18,\n    },\n    \"Presidio\": {\n        \"Bayview\": 31,\n        \"Nob Hill\": 18,\n        \"Union Square\": 22,\n        \"Chinatown\": 21,\n        \"The Castro\": 21,\n        \"Pacific Heights\": 11,\n        \"Russian Hill\": 14,\n    },\n    \"Pacific Heights\": {\n        \"Bayview\": 22,\n        \"Nob Hill\": 8,\n        \"Union Square\": 12,\n        \"Chinatown\": 11,\n        \"The Castro\": 16,\n        \"Presidio\": 11,\n        \"Russian Hill\": 7,\n    },\n    \"Russian Hill\": {\n        \"Bayview\": 23,\n        \"Nob Hill\": 5,\n        \"Union Square\": 11,\n        \"Chinatown\": 9,\n        \"The Castro\": 21,\n        \"Presidio\": 14,\n        \"Pacific Heights\": 7,\n    },\n}\n\n# Meeting constraints for each friend\nmeetings = {\n    \"Paul\": {\n        \"location\": \"Nob Hill\",\n        \"avail_start\": time_to_minutes(\"16:15\"),\n        \"avail_end\": time_to_minutes(\"21:15\"),\n        \"min_duration\": 60\n    },\n    \"Carol\": {\n        \"location\": \"Union Square\",\n        \"avail_start\": time_to_minutes(\"18:00\"),\n        \"avail_end\": time_to_minutes(\"20:15\"),\n        \"min_duration\": 120\n    },\n    \"Patricia\": {\n        \"location\": \"Chinatown\",\n        \"avail_start\": time_to_minutes(\"20:00\"),\n        \"avail_end\": time_to_minutes(\"21:30\"),\n        \"min_duration\": 75\n    },\n    \"Karen\": {\n        \"location\": \"The Castro\",\n        \"avail_start\": time_to_minutes(\"17:00\"),\n        \"avail_end\": time_to_minutes(\"19:00\"),\n        \"min_duration\": 45\n    },\n    \"Nancy\": {\n        \"location\": \"Presidio\",\n        \"avail_start\": time_to_minutes(\"11:45\"),\n        \"avail_end\": time_to_minutes(\"22:00\"),\n        \"min_duration\": 30\n    },\n    \"Jeffrey\": {\n        \"location\": \"Pacific Heights\",\n        \"avail_start\": time_to_minutes(\"20:00\"),\n        \"avail_end\": time_to_minutes(\"20:45\"),\n        \"min_duration\": 45\n    },\n    \"Matthew\": {\n        \"location\": \"Russian Hill\",\n        \"avail_start\": time_to_minutes(\"15:45\"),\n        \"avail_end\": time_to_minutes(\"21:45\"),\n        \"min_duration\": 75\n    }\n}\n\n# Starting conditions\nstart_location = \"Bayview\"\nstart_time = time_to_minutes(\"9:00\")\n\n# Global best itinerary (maximal number of meetings scheduled)\nbest_itinerary = []\nbest_count = 0\n\ndef travel_time(from_loc, to_loc):\n    # Return travel time from from_loc to to_loc.\n    if from_loc in travel_times and to_loc in travel_times[from_loc]:\n        return travel_times[from_loc][to_loc]\n    # If not found, return a large value (should not occur)\n    return 999\n\ndef dfs(current_location, current_time, remaining, itinerary):\n    global best_itinerary, best_count\n    # If no remaining meetings, update best if this itinerary is better.\n    if len(itinerary) > best_count:\n        best_count = len(itinerary)\n        best_itinerary = itinerary.copy()\n    # Try scheduling each remaining meeting\n    for person in list(remaining):\n        meet = meetings[person]\n        destination = meet[\"location\"]\n        # Travel from current_location to destination:\n        t_travel = travel_time(current_location, destination)\n        arrival_time = current_time + t_travel\n        # Wait if arrive before available start:\n        meeting_start = max(arrival_time, meet[\"avail_start\"])\n        meeting_end = meeting_start + meet[\"min_duration\"]\n        # Check if meeting can be held within availability:\n        if meeting_end <= meet[\"avail_end\"]:\n            # Schedule the meeting\n            new_itinerary_entry = {\n                \"action\": \"meet\",\n                \"location\": destination,\n                \"person\": person,\n                \"start_time\": minutes_to_time(meeting_start),\n                \"end_time\": minutes_to_time(meeting_end)\n            }\n            new_itinerary = itinerary + [new_itinerary_entry]\n            new_remaining = remaining.copy()\n            new_remaining.remove(person)\n            dfs(destination, meeting_end, new_remaining, new_itinerary)\n    # Also update best if current itinerary is better than best so far.\n    if len(itinerary) > best_count:\n        best_count = len(itinerary)\n        best_itinerary = itinerary.copy()\n\n# We'll try all orders by search. Start recursion with all meetings available.\nall_persons = set(meetings.keys())\ndfs(start_location, start_time, all_persons, [])\n\n# Prepare output JSON dictionary\noutput = {\n    \"itinerary\": best_itinerary\n}\n\nprint(json.dumps(output, indent=2))\n",
            "count": "meeting_planning_example_695"
        }
    ]
}