{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Karen",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "11:17",
                        "end_time": "12:47"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Matthew",
                        "start_time": "12:52",
                        "end_time": "13:37"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "13:52",
                        "end_time": "15:37"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "David",
                        "start_time": "15:54",
                        "end_time": "17:54"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Linda",
                        "start_time": "18:15",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "19:27",
                        "end_time": "20:57"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Karen",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "11:17",
                        "end_time": "12:47"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Matthew",
                        "start_time": "12:52",
                        "end_time": "13:37"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "13:52",
                        "end_time": "15:37"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "David",
                        "start_time": "15:54",
                        "end_time": "17:54"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Linda",
                        "start_time": "18:15",
                        "end_time": "19:00"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "19:27",
                        "end_time": "20:57"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport itertools\nimport json\nimport sys\n\n# Convert a time in minutes (since midnight) to H:MM (24\u2010hour) string.\ndef minutes_to_timestr(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Data for each friend: name, location, available start, available end (in minutes since midnight), meeting duration (in minutes)\n# Times: 9:00 = 540, 10:00 = 600, 10:15 = 615, 9:30 = 570, 11:45 = 705, etc.\nfriends = [\n    {\n        \"person\": \"Mark\",\n        \"location\": \"Marina District\",\n        \"avail_start\": 18 * 60 + 45,   # 18:45 -> 1125\n        \"avail_end\": 21 * 60,          # 21:00 -> 1260\n        \"duration\": 90\n    },\n    {\n        \"person\": \"Karen\",\n        \"location\": \"Financial District\",\n        \"avail_start\": 9 * 60 + 30,    # 9:30 -> 570\n        \"avail_end\": 12 * 60 + 45,     # 12:45 -> 765\n        \"duration\": 90\n    },\n    {\n        \"person\": \"Barbara\",\n        \"location\": \"Alamo Square\",\n        \"avail_start\": 10 * 60,        # 10:00 -> 600\n        \"avail_end\": 19 * 60 + 30,     # 19:30 -> 1170\n        \"duration\": 90\n    },\n    {\n        \"person\": \"Nancy\",\n        \"location\": \"Golden Gate Park\",\n        \"avail_start\": 16 * 60 + 45,   # 16:45 -> 1005\n        \"avail_end\": 20 * 60,          # 20:00 -> 1200\n        \"duration\": 105\n    },\n    {\n        \"person\": \"David\",\n        \"location\": \"The Castro\",\n        \"avail_start\": 9 * 60,         # 9:00 -> 540\n        \"avail_end\": 18 * 60,          # 18:00 -> 1080\n        \"duration\": 120\n    },\n    {\n        \"person\": \"Linda\",\n        \"location\": \"Bayview\",\n        \"avail_start\": 18 * 60 + 15,   # 18:15 -> 1095\n        \"avail_end\": 19 * 60 + 45,     # 19:45 -> 1185\n        \"duration\": 45\n    },\n    {\n        \"person\": \"Kevin\",\n        \"location\": \"Sunset District\",\n        \"avail_start\": 10 * 60,        # 10:00 -> 600\n        \"avail_end\": 17 * 60 + 45,     # 17:45 -> 1065\n        \"duration\": 120\n    },\n    {\n        \"person\": \"Matthew\",\n        \"location\": \"Haight-Ashbury\",\n        \"avail_start\": 10 * 60 + 15,   # 10:15 -> 615\n        \"avail_end\": 15 * 60 + 30,     # 15:30 -> 930\n        \"duration\": 45\n    },\n    {\n        \"person\": \"Andrew\",\n        \"location\": \"Nob Hill\",\n        \"avail_start\": 11 * 60 + 45,   # 11:45 -> 705\n        \"avail_end\": 16 * 60 + 45,     # 16:45 -> 1005\n        \"duration\": 105\n    },\n]\n\n# Travel times in minutes between locations.\n# The keys are location names.\n# Note: not all values are symmetric based on given dataset.\ntravel_times = {\n    \"Russian Hill\": {\n        \"Marina District\": 7,\n        \"Financial District\": 11,\n        \"Alamo Square\": 15,\n        \"Golden Gate Park\": 21,\n        \"The Castro\": 21,\n        \"Bayview\": 23,\n        \"Sunset District\": 23,\n        \"Haight-Ashbury\": 17,\n        \"Nob Hill\": 5\n    },\n    \"Marina District\": {\n        \"Russian Hill\": 8,\n        \"Financial District\": 17,\n        \"Alamo Square\": 15,\n        \"Golden Gate Park\": 18,\n        \"The Castro\": 22,\n        \"Bayview\": 27,\n        \"Sunset District\": 19,\n        \"Haight-Ashbury\": 16,\n        \"Nob Hill\": 12\n    },\n    \"Financial District\": {\n        \"Russian Hill\": 11,\n        \"Marina District\": 15,\n        \"Alamo Square\": 17,\n        \"Golden Gate Park\": 23,\n        \"The Castro\": 20,\n        \"Bayview\": 19,\n        \"Sunset District\": 30,\n        \"Haight-Ashbury\": 19,\n        \"Nob Hill\": 8\n    },\n    \"Alamo Square\": {\n        \"Russian Hill\": 13,\n        \"Marina District\": 15,\n        \"Financial District\": 17,\n        \"Golden Gate Park\": 9,\n        \"The Castro\": 8,\n        \"Bayview\": 16,\n        \"Sunset District\": 16,\n        \"Haight-Ashbury\": 5,\n        \"Nob Hill\": 11\n    },\n    \"Golden Gate Park\": {\n        \"Russian Hill\": 19,\n        \"Marina District\": 16,\n        \"Financial District\": 26,\n        \"Alamo Square\": 9,\n        \"The Castro\": 13,\n        \"Bayview\": 23,\n        \"Sunset District\": 10,\n        \"Haight-Ashbury\": 7,\n        \"Nob Hill\": 20\n    },\n    \"The Castro\": {\n        \"Russian Hill\": 18,\n        \"Marina District\": 21,\n        \"Financial District\": 21,\n        \"Alamo Square\": 8,\n        \"Golden Gate Park\": 11,\n        \"Bayview\": 19,\n        \"Sunset District\": 17,\n        \"Haight-Ashbury\": 6,\n        \"Nob Hill\": 16\n    },\n    \"Bayview\": {\n        \"Russian Hill\": 23,\n        \"Marina District\": 27,\n        \"Financial District\": 19,\n        \"Alamo Square\": 16,\n        \"Golden Gate Park\": 22,\n        \"The Castro\": 19,\n        \"Sunset District\": 23,\n        \"Haight-Ashbury\": 19,\n        \"Nob Hill\": 20\n    },\n    \"Sunset District\": {\n        \"Russian Hill\": 24,\n        \"Marina District\": 21,\n        \"Financial District\": 30,\n        \"Alamo Square\": 17,\n        \"Golden Gate Park\": 11,\n        \"The Castro\": 17,\n        \"Bayview\": 22,\n        \"Haight-Ashbury\": 15,\n        \"Nob Hill\": 27\n    },\n    \"Haight-Ashbury\": {\n        \"Russian Hill\": 17,\n        \"Marina District\": 17,\n        \"Financial District\": 21,\n        \"Alamo Square\": 5,\n        \"Golden Gate Park\": 7,\n        \"The Castro\": 6,\n        \"Bayview\": 18,\n        \"Sunset District\": 15,\n        \"Nob Hill\": 15\n    },\n    \"Nob Hill\": {\n        \"Russian Hill\": 5,\n        \"Marina District\": 11,\n        \"Financial District\": 9,\n        \"Alamo Square\": 11,\n        \"Golden Gate Park\": 17,\n        \"The Castro\": 17,\n        \"Bayview\": 19,\n        \"Sunset District\": 24,\n        \"Haight-Ashbury\": 13\n    }\n}\n\n# For completeness, add reverse directions if not provided explicitly.\ndef complete_travel_times(times):\n    locations = list(times.keys())\n    for loc in locations:\n        for other in locations:\n            if loc == other:\n                continue\n            if other not in times[loc]:\n                # if missing, take from the reverse direction if available\n                if loc in times[other]:\n                    times[loc][other] = times[other][loc]\n    return times\n\ntravel_times = complete_travel_times(travel_times)\n\n# Starting location and time\nstart_location = \"Russian Hill\"\nstart_time = 9 * 60  # 9:00 -> 540 minutes\n\n# We'll search over all permutations of the friends' list order.\n# Because not every ordering may be feasible, we try to schedule as many as possible.\nbest_schedule = None\nbest_count = 0\n\nall_friends = friends[:]  # full list of 9 friends\n\n# Use itertools.permutations to examine orders (9! possibilities)\nfor perm in itertools.permutations(all_friends):\n    curr_time = start_time\n    curr_loc = start_location\n    itinerary = []\n    feasible_count = 0\n    for friend in perm:\n        # Calculate travel time from current location to friend's location.\n        if curr_loc not in travel_times or friend[\"location\"] not in travel_times[curr_loc]:\n            travel = 9999  # large penalty if missing route\n        else:\n            travel = travel_times[curr_loc][friend[\"location\"]]\n        arrival_time = curr_time + travel\n        # Meeting can only start when friend is available.\n        meeting_start = max(arrival_time, friend[\"avail_start\"])\n        meeting_end = meeting_start + friend[\"duration\"]\n        # Check if meeting can finish before friend's available end.\n        if meeting_end > friend[\"avail_end\"]:\n            # Cannot schedule this friend in this order; break out.\n            break\n        # Otherwise, record this meeting.\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"person\": friend[\"person\"],\n            \"start_time\": minutes_to_timestr(meeting_start),\n            \"end_time\": minutes_to_timestr(meeting_end)\n        })\n        feasible_count += 1\n        curr_time = meeting_end\n        curr_loc = friend[\"location\"]\n    # If this permutation allowed more meetings than our best so far, update best_schedule.\n    if feasible_count > best_count:\n        best_count = feasible_count\n        best_schedule = itinerary\n        # If we managed to schedule all friends, we can break out of search\n        if best_count == len(all_friends):\n            break\n\n# Build the result dictionary:\nresult = {\"itinerary\": best_schedule if best_schedule is not None else []}\n\n# Output the result as JSON.\nprint(json.dumps(result))\n    \nif __name__ == '__main__':\n    sys.exit(0)",
            "count": "meeting_planning_example_885"
        }
    ]
}