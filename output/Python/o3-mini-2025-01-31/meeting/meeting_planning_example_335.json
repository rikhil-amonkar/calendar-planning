{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "9:09",
                        "end_time": "9:24"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "10:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Betty",
                        "start_time": "19:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Helen",
                        "start_time": "9:09",
                        "end_time": "9:24"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Kevin",
                        "start_time": "10:45",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Betty",
                        "start_time": "19:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nimport itertools\n\n# Helper functions to convert between \"H:MM\" strings and minutes from midnight.\ndef time_to_minutes(t):\n    # t is a string like \"9:00\" or \"13:30\"\n    parts = t.split(\":\")\n    return int(parts[0]) * 60 + int(parts[1])\n\ndef minutes_to_time(m):\n    h = m // 60\n    mm = m % 60\n    # return hour without leading zero, minute with two digits if needed\n    return f\"{h}:{mm:02d}\"\n\n# Define travel times in minutes in a dictionary for directional travel.\ntravel_times = {\n    (\"Pacific Heights\", \"North Beach\"): 9,\n    (\"Pacific Heights\", \"Financial District\"): 13,\n    (\"Pacific Heights\", \"Alamo Square\"): 10,\n    (\"Pacific Heights\", \"Mission District\"): 15,\n    (\"North Beach\", \"Pacific Heights\"): 8,\n    (\"North Beach\", \"Financial District\"): 8,\n    (\"North Beach\", \"Alamo Square\"): 16,\n    (\"North Beach\", \"Mission District\"): 18,\n    (\"Financial District\", \"Pacific Heights\"): 13,\n    (\"Financial District\", \"North Beach\"): 7,\n    (\"Financial District\", \"Alamo Square\"): 17,\n    (\"Financial District\", \"Mission District\"): 17,\n    (\"Alamo Square\", \"Pacific Heights\"): 10,\n    (\"Alamo Square\", \"North Beach\"): 15,\n    (\"Alamo Square\", \"Financial District\"): 17,\n    (\"Alamo Square\", \"Mission District\"): 10,\n    (\"Mission District\", \"Pacific Heights\"): 16,\n    (\"Mission District\", \"North Beach\"): 17,\n    (\"Mission District\", \"Financial District\"): 17,\n    (\"Mission District\", \"Alamo Square\"): 11\n}\n\n# Friends meeting constraints: each friend has:\n# name, location, available_start, available_end, required_meeting_duration (in minutes)\nfriends = [\n    {\n        \"name\": \"Helen\",\n        \"location\": \"North Beach\",\n        \"available_start\": time_to_minutes(\"9:00\"),\n        \"available_end\": time_to_minutes(\"17:00\"),\n        \"meeting_duration\": 15\n    },\n    {\n        \"name\": \"Betty\",\n        \"location\": \"Financial District\",\n        \"available_start\": time_to_minutes(\"19:00\"),\n        \"available_end\": time_to_minutes(\"21:45\"),\n        \"meeting_duration\": 90\n    },\n    {\n        \"name\": \"Amanda\",\n        \"location\": \"Alamo Square\",\n        \"available_start\": time_to_minutes(\"19:45\"),\n        \"available_end\": time_to_minutes(\"21:00\"),\n        \"meeting_duration\": 60\n    },\n    {\n        \"name\": \"Kevin\",\n        \"location\": \"Mission District\",\n        \"available_start\": time_to_minutes(\"10:45\"),\n        \"available_end\": time_to_minutes(\"14:45\"),\n        \"meeting_duration\": 45\n    }\n]\n\n# Starting point and time\nstart_location = \"Pacific Heights\"\nstart_time = time_to_minutes(\"9:00\")\n\n# Evaluate a given schedule (list of friend dictionaries in order) \n# Returns: None if schedule is not feasible, otherwise a tuple (finish_time, itinerary)\ndef evaluate_schedule(schedule):\n    current_time = start_time\n    current_location = start_location\n    itinerary = []\n    \n    for friend in schedule:\n        # travel from current location to friend's location\n        # if same location (should not occur in our case) then travel time is 0.\n        travel = travel_times.get((current_location, friend[\"location\"]), None)\n        if travel is None:\n            # If no defined travel time, skip this schedule.\n            return None\n        arrival_time = current_time + travel\n        \n        # Wait until friend's available start if arrived earlier.\n        meeting_start = max(arrival_time, friend[\"available_start\"])\n        meeting_end = meeting_start + friend[\"meeting_duration\"]\n        \n        # Check if meeting can finish before friend's available end.\n        if meeting_end > friend[\"available_end\"]:\n            return None\n        \n        # Append meeting event to itinerary\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"person\": friend[\"name\"],\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        })\n        \n        # Update current time and location\n        current_time = meeting_end\n        current_location = friend[\"location\"]\n    \n    return (current_time, itinerary)\n\n# We want to maximize the number of meetings (friends met)\n# We'll try all possible orders of any subset of friends.\nbest_itinerary = None\nmax_meetings = 0\nbest_finish_time = None\n\n# Generate all subsets (of lengths 1 to all) and all permutations of each subset.\nn = len(friends)\nfor r in range(1, n+1):\n    for subset in itertools.permutations(friends, r):\n        result = evaluate_schedule(subset)\n        if result is not None:\n            finish_time, itinerary = result\n            num_meetings = len(itinerary)\n            if num_meetings > max_meetings:\n                max_meetings = num_meetings\n                best_itinerary = itinerary\n                best_finish_time = finish_time\n            elif num_meetings == max_meetings:\n                # if same number of meetings, choose the one finishing earlier\n                if finish_time < best_finish_time:\n                    best_itinerary = itinerary\n                    best_finish_time = finish_time\n\n# Prepare output dictionary in required JSON format.\noutput = {\"itinerary\": best_itinerary if best_itinerary is not None else []}\n\n# Print the JSON output.\nprint(json.dumps(output, indent=2))\n                    \nif __name__ == '__main__':\n    pass",
            "count": "meeting_planning_example_335"
        }
    ]
}