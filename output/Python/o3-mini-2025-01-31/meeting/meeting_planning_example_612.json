{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "9:16",
                        "end_time": "10:01"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "George",
                        "start_time": "10:23",
                        "end_time": "11:23"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Emily",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "14:45",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "15:57",
                        "end_time": "17:42"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Margaret",
                        "start_time": "21:30",
                        "end_time": "22:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "9:16",
                        "end_time": "10:01"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "George",
                        "start_time": "10:23",
                        "end_time": "11:23"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Emily",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "14:45",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "15:57",
                        "end_time": "17:42"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Margaret",
                        "start_time": "21:30",
                        "end_time": "22:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nimport copy\n\n# Convert time string H:MM (24-hour) to minutes since midnight\ndef time_to_minutes(timestr):\n    h, m = timestr.split(\":\")\n    return int(h) * 60 + int(m)\n\n# Convert minutes since midnight to time string in H:MM format (no leading zero for hour)\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Travel times in minutes between locations\ntravel_times = {\n    \"Alamo Square\": {\n        \"Russian Hill\": 13,\n        \"Presidio\": 18,\n        \"Chinatown\": 16,\n        \"Sunset District\": 16,\n        \"The Castro\": 8,\n        \"Embarcadero\": 17,\n        \"Golden Gate Park\": 9,\n    },\n    \"Russian Hill\": {\n        \"Alamo Square\": 15,\n        \"Presidio\": 14,\n        \"Chinatown\": 9,\n        \"Sunset District\": 23,\n        \"The Castro\": 21,\n        \"Embarcadero\": 8,\n        \"Golden Gate Park\": 21,\n    },\n    \"Presidio\": {\n        \"Alamo Square\": 18,\n        \"Russian Hill\": 14,\n        \"Chinatown\": 21,\n        \"Sunset District\": 15,\n        \"The Castro\": 21,\n        \"Embarcadero\": 20,\n        \"Golden Gate Park\": 12,\n    },\n    \"Chinatown\": {\n        \"Alamo Square\": 17,\n        \"Russian Hill\": 7,\n        \"Presidio\": 19,\n        \"Sunset District\": 29,\n        \"The Castro\": 22,\n        \"Embarcadero\": 5,\n        \"Golden Gate Park\": 23,\n    },\n    \"Sunset District\": {\n        \"Alamo Square\": 17,\n        \"Russian Hill\": 24,\n        \"Presidio\": 16,\n        \"Chinatown\": 30,\n        \"The Castro\": 17,\n        \"Embarcadero\": 31,\n        \"Golden Gate Park\": 11,\n    },\n    \"The Castro\": {\n        \"Alamo Square\": 8,\n        \"Russian Hill\": 18,\n        \"Presidio\": 20,\n        \"Chinatown\": 20,\n        \"Sunset District\": 17,\n        \"Embarcadero\": 22,\n        \"Golden Gate Park\": 11,\n    },\n    \"Embarcadero\": {\n        \"Alamo Square\": 19,\n        \"Russian Hill\": 8,\n        \"Presidio\": 20,\n        \"Chinatown\": 7,\n        \"Sunset District\": 30,\n        \"The Castro\": 25,\n        \"Golden Gate Park\": 25,\n    },\n    \"Golden Gate Park\": {\n        \"Alamo Square\": 10,\n        \"Russian Hill\": 19,\n        \"Presidio\": 11,\n        \"Chinatown\": 23,\n        \"Sunset District\": 10,\n        \"The Castro\": 13,\n        \"Embarcadero\": 25,\n    }\n}\n\n# Meeting constraints as a list of dictionaries; times in minutes since midnight.\n# Times are given in 24-hour format.\nmeetings = [\n    {\n        \"person\": \"Emily\",\n        \"location\": \"Russian Hill\",\n        \"avail_start\": time_to_minutes(\"12:15\"),\n        \"avail_end\": time_to_minutes(\"14:15\"),\n        \"duration\": 105\n    },\n    {\n        \"person\": \"Mark\",\n        \"location\": \"Presidio\",\n        \"avail_start\": time_to_minutes(\"14:45\"),\n        \"avail_end\": time_to_minutes(\"19:30\"),\n        \"duration\": 60\n    },\n    {\n        \"person\": \"Deborah\",\n        \"location\": \"Chinatown\",\n        \"avail_start\": time_to_minutes(\"7:30\"),\n        \"avail_end\": time_to_minutes(\"15:30\"),\n        \"duration\": 45\n    },\n    {\n        \"person\": \"Margaret\",\n        \"location\": \"Sunset District\",\n        \"avail_start\": time_to_minutes(\"21:30\"),\n        \"avail_end\": time_to_minutes(\"22:30\"),\n        \"duration\": 60\n    },\n    {\n        \"person\": \"George\",\n        \"location\": \"The Castro\",\n        \"avail_start\": time_to_minutes(\"7:30\"),\n        \"avail_end\": time_to_minutes(\"14:15\"),\n        \"duration\": 60\n    },\n    {\n        \"person\": \"Andrew\",\n        \"location\": \"Embarcadero\",\n        \"avail_start\": time_to_minutes(\"20:15\"),\n        \"avail_end\": time_to_minutes(\"22:00\"),\n        \"duration\": 75\n    },\n    {\n        \"person\": \"Steven\",\n        \"location\": \"Golden Gate Park\",\n        \"avail_start\": time_to_minutes(\"11:15\"),\n        \"avail_end\": time_to_minutes(\"21:15\"),\n        \"duration\": 105\n    }\n]\n\n# Global variable to hold the best schedule (max number of meetings)\nbest_schedule = []\nbest_count = 0\n\ndef backtrack(current_time, current_location, remaining_meetings, schedule):\n    global best_schedule, best_count\n\n    # Update best_schedule if this schedule has more meetings\n    if len(schedule) > best_count:\n        best_schedule = copy.deepcopy(schedule)\n        best_count = len(schedule)\n\n    # Try to add each remaining meeting if feasible\n    for i, meeting in enumerate(remaining_meetings):\n        # Get travel time from current_location to meeting's location.\n        if current_location == meeting[\"location\"]:\n            travel = 0\n        else:\n            # For travel times, if current location not in our travel_times (for instance starting from Alamo Square)\n            # We assume the provided dictionary covers all movements from any of the known locations.\n            if current_location in travel_times and meeting[\"location\"] in travel_times[current_location]:\n                travel = travel_times[current_location][meeting[\"location\"]]\n            else:\n                # In case location is not found, skip\n                continue\n\n        arrival_time = current_time + travel\n        # The meeting can only start at max(arrival_time, available start)\n        meeting_start = max(arrival_time, meeting[\"avail_start\"])\n        meeting_end = meeting_start + meeting[\"duration\"]\n\n        # Check if meeting can be completed within availability window.\n        if meeting_end > meeting[\"avail_end\"]:\n            continue  # Not feasible\n\n        # Create a new scheduled entry\n        scheduled_entry = {\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"person\"],\n            \"start_time\": meeting_start,\n            \"end_time\": meeting_end\n        }\n\n        # Append to schedule and remove this meeting from remaining list.\n        new_schedule = schedule + [scheduled_entry]\n        new_remaining = remaining_meetings[:i] + remaining_meetings[i+1:]\n        # Recurse with updated current time and location.\n        backtrack(meeting_end, meeting[\"location\"], new_remaining, new_schedule)\n\n# Starting conditions:\n# You arrive at Alamo Square at 9:00AM, which is 9*60 = 540 minutes.\nstart_time = time_to_minutes(\"9:00\")\nstart_location = \"Alamo Square\"\n\n# Run backtracking search for feasible meeting schedules.\nbacktrack(start_time, start_location, meetings, [])\n\n# Since our goal is to meet as many friends as possible, we output the best_schedule.\n# However, we want to output times in H:MM format.\nitinerary = []\nfor entry in best_schedule:\n    itinerary.append({\n        \"action\": entry[\"action\"],\n        \"location\": entry[\"location\"],\n        \"person\": entry[\"person\"],\n        \"start_time\": minutes_to_time(entry[\"start_time\"]),\n        \"end_time\": minutes_to_time(entry[\"end_time\"])\n    })\n\noutput = {\"itinerary\": itinerary}\nprint(json.dumps(output, indent=2))",
            "count": "meeting_planning_example_612"
        }
    ]
}