{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Timothy",
                        "start_time": "9:45",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "18:30",
                        "end_time": "20:00"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Ashley",
                        "start_time": "20:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Timothy",
                        "start_time": "9:45",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Patricia",
                        "start_time": "18:30",
                        "end_time": "20:00"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Ashley",
                        "start_time": "20:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport itertools\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(minutes):\n    # Convert minutes from midnight to \"H:MM\" format (24-hour, no leading zero for hour)\n    hour = minutes // 60\n    minute = minutes % 60\n    return f\"{hour}:{minute:02d}\"\n\ndef simulate_schedule(order, start_time, start_location, travel_times, friends):\n    itinerary = []\n    current_time = start_time  # in minutes from midnight\n    current_location = start_location\n    for friend in order:\n        # Get travel time from current_location to friend's location\n        key = (current_location, friend[\"location\"])\n        if key not in travel_times:\n            # if no direct route, schedule fails\n            return None\n        travel_time = travel_times[key]\n        arrival_time = current_time + travel_time\n        # Meeting can only start after friend available start time\n        meeting_start = max(arrival_time, friend[\"available_start\"])\n        meeting_end = meeting_start + friend[\"duration\"]\n        # Check if meeting fits in friend's available window\n        if meeting_end > friend[\"available_end\"]:\n            return None\n        # Append meeting event\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"person\": friend[\"name\"],\n            \"start_time\": minutes_to_time_str(meeting_start),\n            \"end_time\": minutes_to_time_str(meeting_end)\n        })\n        current_time = meeting_end\n        current_location = friend[\"location\"]\n    return itinerary\n\ndef main():\n    # Define travel times (in minutes)\n    travel_times = {\n        (\"Russian Hill\", \"Nob Hill\"): 5,\n        (\"Russian Hill\", \"Mission District\"): 16,\n        (\"Russian Hill\", \"Embarcadero\"): 8,\n        (\"Nob Hill\", \"Russian Hill\"): 5,\n        (\"Nob Hill\", \"Mission District\"): 13,\n        (\"Nob Hill\", \"Embarcadero\"): 9,\n        (\"Mission District\", \"Russian Hill\"): 15,\n        (\"Mission District\", \"Nob Hill\"): 12,\n        (\"Mission District\", \"Embarcadero\"): 19,\n        (\"Embarcadero\", \"Russian Hill\"): 8,\n        (\"Embarcadero\", \"Nob Hill\"): 10,\n        (\"Embarcadero\", \"Mission District\"): 20\n    }\n    \n    # Define friends meeting info:\n    # Times in minutes from midnight\n    # Russian Hill arrival is at 9:00 => 9*60 = 540\n    # Patricia: available from 18:30 (1110) to 21:45 (1305), duration 90 minutes, location \"Nob Hill\"\n    # Ashley: available from 20:30 (1230) to 21:15 (1275), duration 45 minutes, location \"Mission District\"\n    # Timothy: available from 9:45 (585) to 17:45 (1065), duration 120 minutes, location \"Embarcadero\"\n    friends = [\n        {\n            \"name\": \"Patricia\",\n            \"location\": \"Nob Hill\",\n            \"available_start\": 18 * 60 + 30,  # 18:30 -> 1110 minutes\n            \"available_end\": 21 * 60 + 45,      # 21:45 -> 1305 minutes\n            \"duration\": 90\n        },\n        {\n            \"name\": \"Ashley\",\n            \"location\": \"Mission District\",\n            \"available_start\": 20 * 60 + 30,  # 20:30 -> 1230 minutes\n            \"available_end\": 21 * 60 + 15,      # 21:15 -> 1275 minutes\n            \"duration\": 45\n        },\n        {\n            \"name\": \"Timothy\",\n            \"location\": \"Embarcadero\",\n            \"available_start\": 9 * 60 + 45,    # 9:45 -> 585 minutes\n            \"available_end\": 17 * 60 + 45,      # 17:45 -> 1065 minutes\n            \"duration\": 120\n        }\n    ]\n    \n    # Starting conditions: Arrive at Russian Hill at 9:00AM (540 minutes)\n    start_time = 9 * 60\n    start_location = \"Russian Hill\"\n    \n    best_itinerary = None\n    best_friend_count = 0\n\n    # Check all permutations of friends (all meeting orders)\n    for order in itertools.permutations(friends):\n        itinerary = simulate_schedule(order, start_time, start_location, travel_times, order)\n        if itinerary is not None:\n            count = len(itinerary)\n            if count > best_friend_count:\n                best_friend_count = count\n                best_itinerary = itinerary\n\n    # If no full itinerary is found, best_itinerary might be None.\n    # In our scenario, we expect to find the optimal meeting schedule meeting all three friends.\n    output = {\"itinerary\": best_itinerary if best_itinerary is not None else []}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_272"
        }
    ]
}