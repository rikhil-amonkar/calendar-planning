{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Carol",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Karen",
                        "start_time": "12:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "14:58",
                        "end_time": "16:58"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Carol",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Karen",
                        "start_time": "12:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "14:58",
                        "end_time": "16:58"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef time_str_to_minutes(t):\n    # t in H:MM format, e.g., \"9:00\"\n    parts = t.split(\":\")\n    return int(parts[0]) * 60 + int(parts[1])\n\ndef minutes_to_time_str(m):\n    # convert minutes to H:MM string (24-hour, no leading zero on hour)\n    hour = m // 60\n    minute = m % 60\n    return f\"{hour}:{minute:02d}\"\n\ndef main():\n    # Input parameters and travel times (in minutes)\n    travel = {\n        (\"Union Square\", \"Mission District\"): 14,\n        (\"Union Square\", \"Bayview\"): 15,\n        (\"Union Square\", \"Sunset District\"): 26,\n        (\"Mission District\", \"Union Square\"): 15,\n        (\"Mission District\", \"Bayview\"): 15,\n        (\"Mission District\", \"Sunset District\"): 24,\n        (\"Bayview\", \"Union Square\"): 17,\n        (\"Bayview\", \"Mission District\"): 13,\n        (\"Bayview\", \"Sunset District\"): 23,\n        (\"Sunset District\", \"Union Square\"): 30,\n        (\"Sunset District\", \"Mission District\"): 24,\n        (\"Sunset District\", \"Bayview\"): 22\n    }\n    \n    # Meeting constraints (all times in minutes from midnight)\n    start_location = \"Union Square\"\n    arrival_time = time_str_to_minutes(\"9:00\")\n    \n    # Friends' availability windows and meeting durations (in minutes)\n    # Format: (location, available_start, available_end, min_meeting_duration)\n    meetings = {\n        \"Rebecca\": {\n            \"location\": \"Mission District\",\n            \"avail_start\": time_str_to_minutes(\"11:30\"),\n            \"avail_end\": time_str_to_minutes(\"20:15\"),\n            \"min_duration\": 120\n        },\n        \"Karen\": {\n            \"location\": \"Bayview\",\n            \"avail_start\": time_str_to_minutes(\"12:45\"),\n            \"avail_end\": time_str_to_minutes(\"15:00\"),\n            \"min_duration\": 120\n        },\n        \"Carol\": {\n            \"location\": \"Sunset District\",\n            \"avail_start\": time_str_to_minutes(\"10:15\"),\n            \"avail_end\": time_str_to_minutes(\"11:45\"),\n            \"min_duration\": 30\n        }\n    }\n    \n    # We will explore a schedule that meets all constraints.\n    # One feasible order is:\n    # 1. Go from Union Square to Sunset District to meet Carol.\n    # 2. Then travel from Sunset District to Bayview to meet Karen.\n    # 3. Then travel from Bayview to Mission District to meet Rebecca.\n    itinerary = []\n\n    current_time = arrival_time\n    current_location = start_location\n\n    # --- Meeting Carol at Sunset District ---\n    # Travel from Union Square to Sunset District\n    travel_time = travel[(current_location, meetings[\"Carol\"][\"location\"])]\n    current_time += travel_time\n    # If arrived earlier than Carol's available start, wait\n    if current_time < meetings[\"Carol\"][\"avail_start\"]:\n        current_time = meetings[\"Carol\"][\"avail_start\"]\n    # Schedule Carol meeting for minimum duration\n    carol_meet_start = current_time\n    carol_meet_end = carol_meet_start + meetings[\"Carol\"][\"min_duration\"]\n    # Ensure meeting ends before Carol's availability end (should be within window)\n    if carol_meet_end > meetings[\"Carol\"][\"avail_end\"]:\n        raise Exception(\"Cannot meet Carol within her availability window.\")\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Carol\"][\"location\"],\n        \"person\": \"Carol\",\n        \"start_time\": minutes_to_time_str(carol_meet_start),\n        \"end_time\": minutes_to_time_str(carol_meet_end)\n    })\n    # Update current time and location after Carol meeting\n    current_time = carol_meet_end\n    current_location = meetings[\"Carol\"][\"location\"]\n\n    # --- Meeting Karen at Bayview ---\n    # Travel from Sunset District to Bayview\n    travel_time = travel[(current_location, meetings[\"Karen\"][\"location\"])]\n    current_time += travel_time\n    current_location = meetings[\"Karen\"][\"location\"]\n    # Wait until Karen's availability start if needed\n    if current_time < meetings[\"Karen\"][\"avail_start\"]:\n        current_time = meetings[\"Karen\"][\"avail_start\"]\n    # Schedule Karen meeting for minimum duration\n    karen_meet_start = current_time\n    karen_meet_end = karen_meet_start + meetings[\"Karen\"][\"min_duration\"]\n    if karen_meet_end > meetings[\"Karen\"][\"avail_end\"]:\n        raise Exception(\"Cannot meet Karen within her availability window.\")\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Karen\"][\"location\"],\n        \"person\": \"Karen\",\n        \"start_time\": minutes_to_time_str(karen_meet_start),\n        \"end_time\": minutes_to_time_str(karen_meet_end)\n    })\n    current_time = karen_meet_end\n    current_location = meetings[\"Karen\"][\"location\"]\n\n    # --- Meeting Rebecca at Mission District ---\n    # Travel from Bayview to Mission District\n    travel_time = travel[(current_location, meetings[\"Rebecca\"][\"location\"])]\n    current_time += travel_time\n    current_location = meetings[\"Rebecca\"][\"location\"]\n    # Wait until Rebecca's availability start if needed\n    if current_time < meetings[\"Rebecca\"][\"avail_start\"]:\n        current_time = meetings[\"Rebecca\"][\"avail_start\"]\n    # Schedule Rebecca meeting for minimum duration\n    rebecca_meet_start = current_time\n    rebecca_meet_end = rebecca_meet_start + meetings[\"Rebecca\"][\"min_duration\"]\n    if rebecca_meet_end > meetings[\"Rebecca\"][\"avail_end\"]:\n        raise Exception(\"Cannot meet Rebecca within her availability window.\")\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meetings[\"Rebecca\"][\"location\"],\n        \"person\": \"Rebecca\",\n        \"start_time\": minutes_to_time_str(rebecca_meet_start),\n        \"end_time\": minutes_to_time_str(rebecca_meet_end)\n    })\n    \n    # Prepare final result\n    schedule = {\"itinerary\": itinerary}\n    # Output the result as JSON formatted dictionary\n    print(json.dumps(schedule, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_286"
        }
    ]
}