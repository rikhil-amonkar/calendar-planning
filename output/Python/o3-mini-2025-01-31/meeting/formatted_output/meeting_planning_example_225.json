{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "15:00",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sarah",
                        "start_time": "16:25",
                        "end_time": "17:25"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Sarah",
                        "start_time": "16:00",
                        "end_time": "17:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Jeffrey",
                        "start_time": "17:07",
                        "end_time": "18:22"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom itertools import chain, permutations\n\n# Convert time in \"H:MM\" string to minutes from midnight\ndef time_to_minutes(t):\n    parts = t.split(\":\")\n    return int(parts[0]) * 60 + int(parts[1])\n\n# Convert minutes from midnight to \"H:MM\" string (24-hour, no leading zero for hour)\ndef minutes_to_time(m):\n    hour = m // 60\n    minute = m % 60\n    return f\"{hour}:{minute:02d}\"\n\n# Travel time matrix (in minutes)\n# Matrix format: travel_time[from_location][to_location]\ntravel_time = {\n    \"Sunset District\": {\"North Beach\": 29, \"Union Square\": 30, \"Alamo Square\": 17},\n    \"North Beach\": {\"Sunset District\": 27, \"Union Square\": 7, \"Alamo Square\": 16},\n    \"Union Square\": {\"Sunset District\": 26, \"North Beach\": 10, \"Alamo Square\": 15},\n    \"Alamo Square\": {\"Sunset District\": 16, \"North Beach\": 15, \"Union Square\": 14}\n}\n\n# Define friend meeting constraints\n# Times are in minutes from midnight.\nfriends = {\n    \"Sarah\": {\n        \"location\": \"North Beach\",\n        \"available_start\": time_to_minutes(\"16:00\"),\n        \"available_end\": time_to_minutes(\"18:15\"),\n        \"meeting_duration\": 60\n    },\n    \"Jeffrey\": {\n        \"location\": \"Union Square\",\n        \"available_start\": time_to_minutes(\"15:00\"),\n        \"available_end\": time_to_minutes(\"22:00\"),\n        \"meeting_duration\": 75\n    },\n    \"Brian\": {\n        \"location\": \"Alamo Square\",\n        \"available_start\": time_to_minutes(\"16:00\"),\n        \"available_end\": time_to_minutes(\"17:30\"),\n        \"meeting_duration\": 75\n    }\n}\n\n# Starting parameters\nstart_location = \"Sunset District\"\nstart_time = time_to_minutes(\"9:00\")  # 9:00 AM\n\n# Generate all non-empty subsets of the friend names\ndef all_subsets(iterable):\n    s = list(iterable)\n    return chain.from_iterable(permutations(s, r) for r in range(1, len(s)+1))\n\n# Evaluate a given itinerary (sequence of friend names) to see if it is feasible.\n# Returns a tuple (is_valid, itinerary_steps, finish_time)\ndef evaluate_itinerary(friend_sequence):\n    current_time = start_time\n    current_location = start_location\n    itinerary_steps = []\n    \n    for friend in friend_sequence:\n        friend_data = friends[friend]\n        # Travel from current location to friend's meeting location\n        travel = travel_time[current_location][friend_data[\"location\"]]\n        arrival_time = current_time + travel\n        # The meeting cannot start before friend's available start time.\n        meeting_start = max(arrival_time, friend_data[\"available_start\"])\n        meeting_end = meeting_start + friend_data[\"meeting_duration\"]\n        # Check if meeting ends before friend's available end time.\n        if meeting_end > friend_data[\"available_end\"]:\n            return (False, [], None)  # Not feasible\n        \n        # Add step to itinerary:\n        itinerary_steps.append({\n            \"action\": \"meet\",\n            \"location\": friend_data[\"location\"],\n            \"person\": friend,\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        })\n        # Update current position and time.\n        current_time = meeting_end\n        current_location = friend_data[\"location\"]\n    \n    return (True, itinerary_steps, current_time)\n\n# Explore all possible itineraries (different orderings of friend meetings)\nbest_itinerary = None\nbest_count = 0\nbest_finish_time = None\n\nfor friend_order in all_subsets(friends.keys()):\n    valid, itinerary_steps, finish_time = evaluate_itinerary(friend_order)\n    if valid:\n        count = len(itinerary_steps)\n        # Choose itinerary that has the maximum number of friend meetings,\n        # and in case of tie, the one that finishes earlier.\n        if count > best_count or (count == best_count and (best_finish_time is None or finish_time < best_finish_time)):\n            best_count = count\n            best_finish_time = finish_time\n            best_itinerary = itinerary_steps\n\n# Prepare final output as a JSON-formatted dictionary.\noutput = {\"itinerary\": best_itinerary if best_itinerary is not None else []}\n\nprint(json.dumps(output, indent=2))\n",
            "count": "meeting_planning_example_225"
        }
    ]
}