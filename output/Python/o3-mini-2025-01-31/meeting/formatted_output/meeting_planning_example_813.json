{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Joseph",
                        "start_time": "9:15",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joshua",
                        "start_time": "11:04",
                        "end_time": "12:49"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jeffrey",
                        "start_time": "13:10",
                        "end_time": "14:25"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "14:43",
                        "end_time": "16:43"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Matthew",
                        "start_time": "17:05",
                        "end_time": "17:50"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Paul",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "19:41",
                        "end_time": "20:26"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Joseph",
                        "start_time": "9:15",
                        "end_time": "10:15"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Carol",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joshua",
                        "start_time": "11:04",
                        "end_time": "12:49"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jeffrey",
                        "start_time": "13:10",
                        "end_time": "14:25"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Charles",
                        "start_time": "14:43",
                        "end_time": "16:43"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Matthew",
                        "start_time": "17:05",
                        "end_time": "17:50"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Paul",
                        "start_time": "19:15",
                        "end_time": "19:30"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Rebecca",
                        "start_time": "19:41",
                        "end_time": "20:26"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom copy import deepcopy\n\n# Helper functions to convert times (in minutes) to string and vice versa.\ndef time_to_str(minutes):\n    # minutes is an integer count since midnight.\n    hour = minutes // 60\n    minute = minutes % 60\n    return f\"{hour}:{minute:02d}\"\n\ndef str_to_time(time_str):\n    # time_str format \"H:MM\" or \"HH:MM\"\n    parts = time_str.split(\":\")\n    return int(parts[0]) * 60 + int(parts[1])\n\n# Define friend meeting constraints as a list of dictionaries.\n# Each friend: name, location, avail_start, avail_end and minimum meeting duration in minutes.\nfriends = [\n    {\"name\": \"Joshua\", \"location\": \"Embarcadero\", \"avail_start\": str_to_time(\"9:45\"),  \"avail_end\": str_to_time(\"18:00\"),  \"min_duration\": 105},\n    {\"name\": \"Jeffrey\", \"location\": \"Bayview\",    \"avail_start\": str_to_time(\"9:45\"),  \"avail_end\": str_to_time(\"20:15\"),  \"min_duration\": 75},\n    {\"name\": \"Charles\", \"location\": \"Union Square\", \"avail_start\": str_to_time(\"10:45\"), \"avail_end\": str_to_time(\"20:15\"),  \"min_duration\": 120},\n    {\"name\": \"Joseph\",  \"location\": \"Chinatown\",   \"avail_start\": str_to_time(\"7:00\"),   \"avail_end\": str_to_time(\"15:30\"),  \"min_duration\": 60},\n    {\"name\": \"Elizabeth\", \"location\": \"Sunset District\", \"avail_start\": str_to_time(\"9:00\"), \"avail_end\": str_to_time(\"9:45\"), \"min_duration\": 45},\n    {\"name\": \"Matthew\", \"location\": \"Golden Gate Park\", \"avail_start\": str_to_time(\"11:00\"), \"avail_end\": str_to_time(\"19:30\"), \"min_duration\": 45},\n    {\"name\": \"Carol\",   \"location\": \"Financial District\", \"avail_start\": str_to_time(\"10:45\"), \"avail_end\": str_to_time(\"11:15\"), \"min_duration\": 15},\n    {\"name\": \"Paul\",    \"location\": \"Haight-Ashbury\", \"avail_start\": str_to_time(\"19:15\"), \"avail_end\": str_to_time(\"20:30\"), \"min_duration\": 15},\n    {\"name\": \"Rebecca\", \"location\": \"Mission District\", \"avail_start\": str_to_time(\"17:00\"), \"avail_end\": str_to_time(\"21:45\"), \"min_duration\": 45}\n]\n\n# Define the travel times between locations as a dictionary of dictionaries.\ntravel_times = {\n    \"Marina District\": {\n        \"Embarcadero\": 14, \"Bayview\": 27, \"Union Square\": 16, \"Chinatown\": 15, \"Sunset District\": 19,\n        \"Golden Gate Park\": 18, \"Financial District\": 17, \"Haight-Ashbury\": 16, \"Mission District\": 20\n    },\n    \"Embarcadero\": {\n        \"Marina District\": 12, \"Bayview\": 21, \"Union Square\": 10, \"Chinatown\": 7, \"Sunset District\": 30,\n        \"Golden Gate Park\": 25, \"Financial District\": 5, \"Haight-Ashbury\": 21, \"Mission District\": 20\n    },\n    \"Bayview\": {\n        \"Marina District\": 27, \"Embarcadero\": 19, \"Union Square\": 18, \"Chinatown\": 19, \"Sunset District\": 23,\n        \"Golden Gate Park\": 22, \"Financial District\": 19, \"Haight-Ashbury\": 19, \"Mission District\": 13\n    },\n    \"Union Square\": {\n        \"Marina District\": 18, \"Embarcadero\": 11, \"Bayview\": 15, \"Chinatown\": 7, \"Sunset District\": 27,\n        \"Golden Gate Park\": 22, \"Financial District\": 9, \"Haight-Ashbury\": 18, \"Mission District\": 14\n    },\n    \"Chinatown\": {\n        \"Marina District\": 12, \"Embarcadero\": 5, \"Bayview\": 20, \"Union Square\": 7, \"Sunset District\": 29,\n        \"Golden Gate Park\": 23, \"Financial District\": 5, \"Haight-Ashbury\": 19, \"Mission District\": 17\n    },\n    \"Sunset District\": {\n        \"Marina District\": 21, \"Embarcadero\": 30, \"Bayview\": 22, \"Union Square\": 30, \"Chinatown\": 30,\n        \"Golden Gate Park\": 11, \"Financial District\": 30, \"Haight-Ashbury\": 15, \"Mission District\": 25\n    },\n    \"Golden Gate Park\": {\n        \"Marina District\": 16, \"Embarcadero\": 25, \"Bayview\": 23, \"Union Square\": 22, \"Chinatown\": 23,\n        \"Sunset District\": 10, \"Financial District\": 26, \"Haight-Ashbury\": 7, \"Mission District\": 17\n    },\n    \"Financial District\": {\n        \"Marina District\": 15, \"Embarcadero\": 4, \"Bayview\": 19, \"Union Square\": 9, \"Chinatown\": 5,\n        \"Sunset District\": 30, \"Golden Gate Park\": 23, \"Haight-Ashbury\": 19, \"Mission District\": 17\n    },\n    \"Haight-Ashbury\": {\n        \"Marina District\": 17, \"Embarcadero\": 20, \"Bayview\": 18, \"Union Square\": 19, \"Chinatown\": 19,\n        \"Sunset District\": 15, \"Golden Gate Park\": 7, \"Financial District\": 21, \"Mission District\": 11\n    },\n    \"Mission District\": {\n        \"Marina District\": 19, \"Embarcadero\": 19, \"Bayview\": 14, \"Union Square\": 15, \"Chinatown\": 16,\n        \"Sunset District\": 24, \"Golden Gate Park\": 17, \"Financial District\": 15, \"Haight-Ashbury\": 12\n    }\n}\n\n# Global variable to track best solution.\nbest_itinerary = None\nbest_count = 0\n\ndef dfs(current_location, current_time, visited, itinerary):\n    global best_itinerary, best_count\n    # For the current state, try to visit any not yet visited friend.\n    found_next = False\n    for i, friend in enumerate(friends):\n        if friend[\"name\"] in visited:\n            continue\n        # Travel from current_location to friend's meeting location.\n        if current_location not in travel_times or friend[\"location\"] not in travel_times[current_location]:\n            continue  # if travel time not defined, skip.\n        travel_duration = travel_times[current_location][friend[\"location\"]]\n        arrival_time = current_time + travel_duration\n        # The meeting cannot start before friend's available start.\n        meeting_start = max(arrival_time, friend[\"avail_start\"])\n        meeting_end = meeting_start + friend[\"min_duration\"]\n        # Check if meeting can finish before friend's available end.\n        if meeting_end <= friend[\"avail_end\"]:\n            # Mark friend as visited and add the meeting to itinerary.\n            new_itinerary = deepcopy(itinerary)\n            new_itinerary.append({\n                \"action\": \"meet\",\n                \"location\": friend[\"location\"],\n                \"person\": friend[\"name\"],\n                \"start_time\": time_to_str(meeting_start),\n                \"end_time\": time_to_str(meeting_end)\n            })\n            new_visited = visited.copy()\n            new_visited.add(friend[\"name\"])\n            # Recurse with updated time and location.\n            dfs(friend[\"location\"], meeting_end, new_visited, new_itinerary)\n            found_next = True\n    # If no next meeting possible, update best solution if current itinerary is better.\n    if not found_next:\n        if len(itinerary) > best_count:\n            best_count = len(itinerary)\n            best_itinerary = itinerary\n\ndef main():\n    global best_itinerary\n    # Start at Marina District at 9:00AM.\n    start_location = \"Marina District\"\n    start_time = str_to_time(\"9:00\")\n    dfs(start_location, start_time, set(), [])\n    # Prepare the output JSON structure.\n    output = {\"itinerary\": best_itinerary if best_itinerary is not None else []}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_813"
        }
    ]
}