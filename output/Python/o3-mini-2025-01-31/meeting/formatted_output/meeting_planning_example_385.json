{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "John",
                        "start_time": "9:08",
                        "end_time": "9:23"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "13:30",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "18:00",
                        "end_time": "18:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "John",
                        "start_time": "9:08",
                        "end_time": "9:23"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "13:30",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "18:00",
                        "end_time": "18:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom itertools import permutations\n\n# Helper functions to convert time formats\ndef time_to_minutes(time_str):\n    # Expects \"H:MM\" where H may have no leading zero.\n    parts = time_str.split(':')\n    return int(parts[0]) * 60 + int(parts[1])\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Travel times in minutes (using consistent location names)\ntravel_times = {\n    (\"Nob Hill\", \"Presidio\"): 17,\n    (\"Nob Hill\", \"North Beach\"): 8,\n    (\"Nob Hill\", \"Fisherman's Wharf\"): 11,\n    (\"Nob Hill\", \"Pacific Heights\"): 8,\n    (\"Presidio\", \"Nob Hill\"): 18,\n    (\"Presidio\", \"North Beach\"): 18,\n    (\"Presidio\", \"Fisherman's Wharf\"): 19,\n    (\"Presidio\", \"Pacific Heights\"): 11,\n    (\"North Beach\", \"Nob Hill\"): 7,\n    (\"North Beach\", \"Presidio\"): 17,\n    (\"North Beach\", \"Fisherman's Wharf\"): 5,\n    (\"North Beach\", \"Pacific Heights\"): 8,\n    (\"Fisherman's Wharf\", \"Nob Hill\"): 11,\n    (\"Fisherman's Wharf\", \"Presidio\"): 17,\n    (\"Fisherman's Wharf\", \"North Beach\"): 6,\n    (\"Fisherman's Wharf\", \"Pacific Heights\"): 12,\n    (\"Pacific Heights\", \"Nob Hill\"): 8,\n    (\"Pacific Heights\", \"Presidio\"): 11,\n    (\"Pacific Heights\", \"North Beach\"): 9,\n    (\"Pacific Heights\", \"Fisherman's Wharf\"): 13,\n}\n\n# Meeting constraints and parameters.\n# Times are stored as minutes since midnight.\nmeetings = [\n    {\n        \"person\": \"Jeffrey\",\n        \"location\": \"Presidio\",\n        \"avail_start\": time_to_minutes(\"8:00\"),\n        \"avail_end\": time_to_minutes(\"10:00\"),\n        \"min_duration\": 105\n    },\n    {\n        \"person\": \"Steven\",\n        \"location\": \"North Beach\",\n        \"avail_start\": time_to_minutes(\"13:30\"),\n        \"avail_end\": time_to_minutes(\"22:00\"),\n        \"min_duration\": 45\n    },\n    {\n        \"person\": \"Barbara\",\n        \"location\": \"Fisherman's Wharf\",\n        \"avail_start\": time_to_minutes(\"18:00\"),\n        \"avail_end\": time_to_minutes(\"21:30\"),\n        \"min_duration\": 30\n    },\n    {\n        \"person\": \"John\",\n        \"location\": \"Pacific Heights\",\n        \"avail_start\": time_to_minutes(\"9:00\"),\n        \"avail_end\": time_to_minutes(\"13:30\"),\n        \"min_duration\": 15\n    }\n]\n\n# Starting parameters\nstart_location = \"Nob Hill\"\nstart_time = time_to_minutes(\"9:00\")\n\ndef get_travel_time(frm, to):\n    return travel_times.get((frm, to), float('inf'))\n\n# Evaluate a given order of meetings;\n# Returns (feasible, schedule, final_time)\ndef evaluate_schedule(order):\n    current_time = start_time\n    current_location = start_location\n    schedule = []\n    \n    for meeting in order:\n        # Travel from current location to meeting location\n        travel_time = get_travel_time(current_location, meeting[\"location\"])\n        arrival_time = current_time + travel_time\n        \n        # Meeting can only start after meeting's avail_start time.\n        meeting_start = max(arrival_time, meeting[\"avail_start\"])\n        meeting_end = meeting_start + meeting[\"min_duration\"]\n        \n        # Check if meeting ends before meeting's avail_end.\n        if meeting_end > meeting[\"avail_end\"]:\n            return False, None, None  # Not feasible\n        \n        # Append meeting event\n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": meeting[\"location\"],\n            \"person\": meeting[\"person\"],\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        })\n        # Update current time & location for next meeting\n        current_time = meeting_end\n        current_location = meeting[\"location\"]\n    \n    return True, schedule, current_time\n\n# We try all permutations of the meetings and select the best schedule that maximizes number of meetings.\nbest_schedule = None\nmax_meetings = 0\nbest_finish_time = None\n\n# We'll consider all subsets of meetings (by trying all permutations of full set and then later filtering out meetings that fail).\n# Since we want to maximize number of friends met, we try all orders with length from len(meetings) down to 1.\nfrom itertools import combinations\n\nfor r in range(len(meetings), 0, -1):\n    for subset in combinations(meetings, r):\n        for order in permutations(subset):\n            feasible, sched, finish_time = evaluate_schedule(order)\n            if feasible:\n                if r > max_meetings or (r == max_meetings and (best_finish_time is None or finish_time < best_finish_time)):\n                    max_meetings = r\n                    best_schedule = sched\n                    best_finish_time = finish_time\n    # If we found any schedule meeting r meetings, we break because we prefer maximum number.\n    if max_meetings == r and best_schedule is not None:\n        break\n\n# Prepare output dictionary in the required JSON structure.\noutput = {\"itinerary\": best_schedule if best_schedule is not None else []}\n\n# Print JSON output.\nprint(json.dumps(output, indent=2))\n    \nif __name__ == '__main__':\n    pass",
            "count": "meeting_planning_example_385"
        }
    ]
}