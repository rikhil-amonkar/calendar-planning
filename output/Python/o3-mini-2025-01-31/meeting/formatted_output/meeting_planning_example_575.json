{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "William",
                        "start_time": "13:15",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Robert",
                        "start_time": "14:15",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Mark",
                        "start_time": "15:19",
                        "end_time": "16:34"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Linda",
                        "start_time": "16:57",
                        "end_time": "17:27"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Elizabeth",
                        "start_time": "17:42",
                        "end_time": "19:27"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Rebecca",
                        "start_time": "19:42",
                        "end_time": "20:42"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "William",
                        "start_time": "13:15",
                        "end_time": "13:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Robert",
                        "start_time": "14:15",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Mark",
                        "start_time": "15:19",
                        "end_time": "16:34"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Linda",
                        "start_time": "16:57",
                        "end_time": "17:27"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Elizabeth",
                        "start_time": "17:42",
                        "end_time": "19:27"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Rebecca",
                        "start_time": "19:42",
                        "end_time": "20:42"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nimport copy\n\n# Helper functions for time conversion\ndef time_to_minutes(t_str):\n    # t_str is in format \"H:MM\" (24-hour, no leading zero required)\n    parts = t_str.split(\":\")\n    return int(parts[0]) * 60 + int(parts[1])\n\ndef minutes_to_time(m):\n    h = m // 60\n    m = m % 60\n    return f\"{h}:{m:02d}\"\n\n# Travel times in minutes between locations.\n# Keys are tuples: (origin, destination)\ntravel_times = {\n    (\"The Castro\", \"Presidio\"): 20,\n    (\"The Castro\", \"Sunset District\"): 17,\n    (\"The Castro\", \"Haight-Ashbury\"): 6,\n    (\"The Castro\", \"Mission District\"): 7,\n    (\"The Castro\", \"Golden Gate Park\"): 11,\n    (\"The Castro\", \"Russian Hill\"): 18,\n    \n    (\"Presidio\", \"The Castro\"): 21,\n    (\"Presidio\", \"Sunset District\"): 15,\n    (\"Presidio\", \"Haight-Ashbury\"): 15,\n    (\"Presidio\", \"Mission District\"): 26,\n    (\"Presidio\", \"Golden Gate Park\"): 12,\n    (\"Presidio\", \"Russian Hill\"): 14,\n    \n    (\"Sunset District\", \"The Castro\"): 17,\n    (\"Sunset District\", \"Presidio\"): 16,\n    (\"Sunset District\", \"Haight-Ashbury\"): 15,\n    (\"Sunset District\", \"Mission District\"): 24,\n    (\"Sunset District\", \"Golden Gate Park\"): 11,\n    (\"Sunset District\", \"Russian Hill\"): 24,\n    \n    (\"Haight-Ashbury\", \"The Castro\"): 6,\n    (\"Haight-Ashbury\", \"Presidio\"): 15,\n    (\"Haight-Ashbury\", \"Sunset District\"): 15,\n    (\"Haight-Ashbury\", \"Mission District\"): 11,\n    (\"Haight-Ashbury\", \"Golden Gate Park\"): 7,\n    (\"Haight-Ashbury\", \"Russian Hill\"): 17,\n    \n    (\"Mission District\", \"The Castro\"): 7,\n    (\"Mission District\", \"Presidio\"): 25,\n    (\"Mission District\", \"Sunset District\"): 24,\n    (\"Mission District\", \"Haight-Ashbury\"): 12,\n    (\"Mission District\", \"Golden Gate Park\"): 17,\n    (\"Mission District\", \"Russian Hill\"): 15,\n    \n    (\"Golden Gate Park\", \"The Castro\"): 13,\n    (\"Golden Gate Park\", \"Presidio\"): 11,\n    (\"Golden Gate Park\", \"Sunset District\"): 10,\n    (\"Golden Gate Park\", \"Haight-Ashbury\"): 7,\n    (\"Golden Gate Park\", \"Mission District\"): 17,\n    (\"Golden Gate Park\", \"Russian Hill\"): 19,\n    \n    (\"Russian Hill\", \"The Castro\"): 21,\n    (\"Russian Hill\", \"Presidio\"): 14,\n    (\"Russian Hill\", \"Sunset District\"): 23,\n    (\"Russian Hill\", \"Haight-Ashbury\"): 17,\n    (\"Russian Hill\", \"Mission District\"): 16,\n    (\"Russian Hill\", \"Golden Gate Park\"): 21,\n}\n\n# Meeting constraints for each friend.\n# Each friend meeting is represented as a dictionary with:\n# person, location, start (availability start in minutes), end (availability end in minutes), and duration (minimum meeting duration in minutes)\nmeetings = [\n    {\"person\": \"Rebecca\", \"location\": \"Presidio\", \"avail_start\": time_to_minutes(\"18:15\"), \"avail_end\": time_to_minutes(\"20:45\"), \"duration\": 60},\n    {\"person\": \"Linda\", \"location\": \"Sunset District\", \"avail_start\": time_to_minutes(\"15:30\"), \"avail_end\": time_to_minutes(\"19:45\"), \"duration\": 30},\n    {\"person\": \"Elizabeth\", \"location\": \"Haight-Ashbury\", \"avail_start\": time_to_minutes(\"17:15\"), \"avail_end\": time_to_minutes(\"19:30\"), \"duration\": 105},\n    {\"person\": \"William\", \"location\": \"Mission District\", \"avail_start\": time_to_minutes(\"13:15\"), \"avail_end\": time_to_minutes(\"19:30\"), \"duration\": 30},\n    {\"person\": \"Robert\", \"location\": \"Golden Gate Park\", \"avail_start\": time_to_minutes(\"14:15\"), \"avail_end\": time_to_minutes(\"21:30\"), \"duration\": 45},\n    {\"person\": \"Mark\", \"location\": \"Russian Hill\", \"avail_start\": time_to_minutes(\"10:00\"), \"avail_end\": time_to_minutes(\"21:15\"), \"duration\": 75}\n]\n\n# Starting point and time (arrival at The Castro at 9:00)\nstart_location = \"The Castro\"\nstart_time = time_to_minutes(\"9:00\")\n\n# Global variable to store the best itinerary (max number of meetings scheduled)\nbest_itinerary = []\n\ndef get_travel_time(origin, destination):\n    # Returns travel time between origin and destination from travel_times dictionary\n    if (origin, destination) in travel_times:\n        return travel_times[(origin, destination)]\n    else:\n        # If not explicitly provided, assume a large travel time (should not happen)\n        return 999\n\ndef backtrack(current_time, current_loc, remaining, current_schedule):\n    global best_itinerary\n    # Update best itinerary if current schedule has more meetings than best found so far\n    if len(current_schedule) > len(best_itinerary):\n        best_itinerary = copy.deepcopy(current_schedule)\n    # Try to schedule each remaining meeting\n    for i, meeting in enumerate(remaining):\n        travel = get_travel_time(current_loc, meeting[\"location\"])\n        arrival_time = current_time + travel\n        # The meeting cannot start before the meeting's available start time.\n        meeting_start = max(arrival_time, meeting[\"avail_start\"])\n        meeting_end = meeting_start + meeting[\"duration\"]\n        # Check if the meeting can be completed within the friend's available window.\n        if meeting_end <= meeting[\"avail_end\"]:\n            # Proceed with this meeting scheduled.\n            event = {\n                \"action\": \"meet\",\n                \"location\": meeting[\"location\"],\n                \"person\": meeting[\"person\"],\n                \"start_time\": meeting_start,\n                \"end_time\": meeting_end\n            }\n            new_schedule = current_schedule + [event]\n            # Create new remaining list without this meeting.\n            new_remaining = remaining[:i] + remaining[i+1:]\n            backtrack(meeting_end, meeting[\"location\"], new_remaining, new_schedule)\n    # End recursion\n\ndef main():\n    global best_itinerary\n    # Run backtracking search from the starting point.\n    backtrack(start_time, start_location, meetings, [])\n    \n    # Convert the best_itinerary times from minutes to H:MM format.\n    itinerary_output = []\n    for event in best_itinerary:\n        itinerary_output.append({\n            \"action\": event[\"action\"],\n            \"location\": event[\"location\"],\n            \"person\": event[\"person\"],\n            \"start_time\": minutes_to_time(event[\"start_time\"]),\n            \"end_time\": minutes_to_time(event[\"end_time\"])\n        })\n    \n    result = {\"itinerary\": itinerary_output}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_575"
        }
    ]
}