{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Matthew",
                        "start_time": "9:12",
                        "end_time": "9:27"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Stephanie",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Michelle",
                        "start_time": "11:33",
                        "end_time": "12:48"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Carol",
                        "start_time": "12:59",
                        "end_time": "14:29"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Linda",
                        "start_time": "14:51",
                        "end_time": "16:21"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Jessica",
                        "start_time": "16:34",
                        "end_time": "17:34"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "20:45",
                        "end_time": "21:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Matthew",
                        "start_time": "9:12",
                        "end_time": "9:27"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Michelle",
                        "start_time": "10:30",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Carol",
                        "start_time": "12:00",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Stephanie",
                        "start_time": "13:37",
                        "end_time": "14:07"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Jessica",
                        "start_time": "15:45",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Linda",
                        "start_time": "16:56",
                        "end_time": "18:26"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "20:45",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\n\ndef minutes_to_timestr(minutes):\n    # Convert minutes since midnight to H:MM in 24-hour format (no leading zero for hours)\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\ndef main():\n    # Travel times in minutes between districts (symmetric values are not assumed, so use provided one-way values)\n    travel_times = {\n        \"Sunset District\": {\n            \"Russian Hill\": 24,\n            \"The Castro\": 17,\n            \"Richmond District\": 12,\n            \"Marina District\": 21,\n            \"North Beach\": 29,\n            \"Union Square\": 30,\n            \"Golden Gate Park\": 11\n        },\n        \"Russian Hill\": {\n            \"Sunset District\": 23,\n            \"The Castro\": 21,\n            \"Richmond District\": 14,\n            \"Marina District\": 7,\n            \"North Beach\": 5,\n            \"Union Square\": 11,\n            \"Golden Gate Park\": 21\n        },\n        \"The Castro\": {\n            \"Sunset District\": 17,\n            \"Russian Hill\": 18,\n            \"Richmond District\": 16,\n            \"Marina District\": 21,\n            \"North Beach\": 20,\n            \"Union Square\": 19,\n            \"Golden Gate Park\": 11\n        },\n        \"Richmond District\": {\n            \"Sunset District\": 11,\n            \"Russian Hill\": 13,\n            \"The Castro\": 16,\n            \"Marina District\": 9,\n            \"North Beach\": 17,\n            \"Union Square\": 21,\n            \"Golden Gate Park\": 9\n        },\n        \"Marina District\": {\n            \"Sunset District\": 19,\n            \"Russian Hill\": 8,\n            \"The Castro\": 22,\n            \"Richmond District\": 11,\n            \"North Beach\": 11,\n            \"Union Square\": 16,\n            \"Golden Gate Park\": 18\n        },\n        \"North Beach\": {\n            \"Sunset District\": 27,\n            \"Russian Hill\": 4,\n            \"The Castro\": 22,\n            \"Richmond District\": 18,\n            \"Marina District\": 9,\n            \"Union Square\": 7,\n            \"Golden Gate Park\": 22\n        },\n        \"Union Square\": {\n            \"Sunset District\": 26,\n            \"Russian Hill\": 13,\n            \"The Castro\": 19,\n            \"Richmond District\": 20,\n            \"Marina District\": 18,\n            \"North Beach\": 10,\n            \"Golden Gate Park\": 22\n        },\n        \"Golden Gate Park\": {\n            \"Sunset District\": 10,\n            \"Russian Hill\": 19,\n            \"The Castro\": 13,\n            \"Richmond District\": 7,\n            \"Marina District\": 16,\n            \"North Beach\": 24,\n            \"Union Square\": 22\n        }\n    }\n    \n    # Meeting constraints, using minutes since midnight for start and end times\n    # Helper: convert HH:MM strings to minutes\n    def time_to_minutes(timestr):\n        hours, minutes = map(int, timestr.split(':'))\n        return hours * 60 + minutes\n\n    # Starting point:\n    start_location = \"Sunset District\"\n    start_time = time_to_minutes(\"9:00\")\n    \n    # Define contacts with their meeting location, availability window (start, end) and minimum meeting duration.\n    meetings = {\n        \"Karen\": {\n            \"location\": \"Russian Hill\",\n            \"avail_start\": time_to_minutes(\"20:45\"),\n            \"avail_end\": time_to_minutes(\"21:45\"),\n            \"min_duration\": 60\n        },\n        \"Jessica\": {\n            \"location\": \"The Castro\",\n            \"avail_start\": time_to_minutes(\"15:45\"),\n            \"avail_end\": time_to_minutes(\"19:30\"),\n            \"min_duration\": 60\n        },\n        \"Matthew\": {\n            \"location\": \"Richmond District\",\n            \"avail_start\": time_to_minutes(\"7:30\"),\n            \"avail_end\": time_to_minutes(\"15:15\"),\n            \"min_duration\": 15\n        },\n        \"Michelle\": {\n            \"location\": \"Marina District\",\n            \"avail_start\": time_to_minutes(\"10:30\"),\n            \"avail_end\": time_to_minutes(\"18:45\"),\n            \"min_duration\": 75\n        },\n        \"Carol\": {\n            \"location\": \"North Beach\",\n            \"avail_start\": time_to_minutes(\"12:00\"),\n            \"avail_end\": time_to_minutes(\"17:00\"),\n            \"min_duration\": 90\n        },\n        \"Stephanie\": {\n            \"location\": \"Union Square\",\n            \"avail_start\": time_to_minutes(\"10:45\"),\n            \"avail_end\": time_to_minutes(\"14:15\"),\n            \"min_duration\": 30\n        },\n        \"Linda\": {\n            \"location\": \"Golden Gate Park\",\n            \"avail_start\": time_to_minutes(\"10:45\"),\n            \"avail_end\": time_to_minutes(\"22:00\"),\n            \"min_duration\": 90\n        }\n    }\n    \n    # We will adopt the following meeting order (found by logically chaining available time windows and travel times):\n    # 1. Matthew at Richmond District\n    # 2. Stephanie at Union Square\n    # 3. Michelle at Marina District\n    # 4. Carol at North Beach\n    # 5. Linda at Golden Gate Park\n    # 6. Jessica at The Castro\n    # 7. Karen at Russian Hill\n    order = [\"Matthew\", \"Stephanie\", \"Michelle\", \"Carol\", \"Linda\", \"Jessica\", \"Karen\"]\n    \n    itinerary = []\n    current_location = start_location\n    current_time = start_time\n    \n    for person in order:\n        meeting = meetings[person]\n        dest = meeting[\"location\"]\n        # Get travel time from current location to destination\n        travel_time = travel_times[current_location][dest]\n        # Update current time with travel\n        current_time += travel_time\n        # If arrival is before contact's availability, wait till the availability start\n        if current_time < meeting[\"avail_start\"]:\n            current_time = meeting[\"avail_start\"]\n        # Determine meeting start time and meeting end time\n        meet_start = current_time\n        meet_end = meet_start + meeting[\"min_duration\"]\n        # Ensure that the meeting fits within the contact's availability window (we assume it does based on chosen order)\n        if meet_end > meeting[\"avail_end\"]:\n            # If meeting cannot fit, we could handle it but here we assume optimal selection covers all constraints.\n            raise ValueError(f\"Cannot schedule meeting with {person} within available slot.\")\n        # Append meeting to itinerary\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": dest,\n            \"person\": person,\n            \"start_time\": minutes_to_timestr(meet_start),\n            \"end_time\": minutes_to_timestr(meet_end)\n        })\n        # Update current time and location to meeting's end and destination respectively.\n        current_time = meet_end\n        current_location = dest\n\n    # Prepare output dictionary in requested JSON format\n    output = {\"itinerary\": itinerary}\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()",
            "count": "meeting_planning_example_607"
        }
    ]
}