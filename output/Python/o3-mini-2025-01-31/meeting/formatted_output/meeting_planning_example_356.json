{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Margaret",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kimberly",
                        "start_time": "11:07",
                        "end_time": "11:37"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Barbara",
                        "start_time": "13:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "20:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Margaret",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Barbara",
                        "start_time": "13:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kimberly",
                        "start_time": "14:52",
                        "end_time": "15:22"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "20:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nimport itertools\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    # time_str format: H:MM (24-hour)\n    parts = time_str.split(':')\n    return int(parts[0]) * 60 + int(parts[1])\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Travel times in minutes as given\ntravel_times = {\n    \"Bayview\": {\"North Beach\": 21, \"Presidio\": 31, \"Haight-Ashbury\": 19, \"Union Square\": 17},\n    \"North Beach\": {\"Bayview\": 22, \"Presidio\": 17, \"Haight-Ashbury\": 18, \"Union Square\": 7},\n    \"Presidio\": {\"Bayview\": 31, \"North Beach\": 18, \"Haight-Ashbury\": 15, \"Union Square\": 22},\n    \"Haight-Ashbury\": {\"Bayview\": 18, \"North Beach\": 19, \"Presidio\": 15, \"Union Square\": 17},\n    \"Union Square\": {\"Bayview\": 15, \"North Beach\": 10, \"Presidio\": 24, \"Haight-Ashbury\": 18}\n}\n\n# Meeting constraints for each friend\n# Each friend is defined by: location, available start time, available end time, meeting duration (in minutes)\nfriends = {\n    \"Barbara\": {\n        \"location\": \"North Beach\",\n        \"avail_start\": time_to_minutes(\"13:45\"),\n        \"avail_end\": time_to_minutes(\"20:15\"),\n        \"duration\": 60\n    },\n    \"Margaret\": {\n        \"location\": \"Presidio\",\n        \"avail_start\": time_to_minutes(\"10:15\"),\n        \"avail_end\": time_to_minutes(\"15:15\"),\n        \"duration\": 30\n    },\n    \"Kevin\": {\n        \"location\": \"Haight-Ashbury\",\n        \"avail_start\": time_to_minutes(\"20:00\"),\n        \"avail_end\": time_to_minutes(\"20:45\"),\n        \"duration\": 30\n    },\n    \"Kimberly\": {\n        \"location\": \"Union Square\",\n        \"avail_start\": time_to_minutes(\"7:45\"),\n        \"avail_end\": time_to_minutes(\"16:45\"),\n        \"duration\": 30\n    }\n}\n\n# Starting parameters\nstart_location = \"Bayview\"\nstart_time = time_to_minutes(\"9:00\")\n\n# We'll brute force all orders of meetings to choose one that meets all constraints.\n# We will choose the order that manages to schedule maximum meetings.\ndef schedule_for_order(order):\n    itinerary = []\n    curr_time = start_time\n    curr_location = start_location\n    total_wait = 0\n    for person in order:\n        friend = friends[person]\n        destination = friend[\"location\"]\n        # travel time from current location to destination\n        travel = travel_times[curr_location][destination]\n        arrival_time = curr_time + travel\n\n        # Meeting can only start at max(arrival_time, friend's available start)\n        meeting_start = max(arrival_time, friend[\"avail_start\"])\n        # If the meeting start time is later than the available window end minus required duration, it's invalid.\n        if meeting_start + friend[\"duration\"] > friend[\"avail_end\"]:\n            return None  # invalid schedule for this order\n\n        # Calculate waiting time if any (if arrival_time < available start)\n        wait = meeting_start - arrival_time\n        total_wait += wait\n\n        meeting_end = meeting_start + friend[\"duration\"]\n\n        # Append meeting action to itinerary\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": destination,\n            \"person\": person,\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        })\n\n        # Update current time and location for next leg.\n        curr_time = meeting_end\n        curr_location = destination\n    return {\n        \"itinerary\": itinerary,\n        \"total_wait\": total_wait,\n        \"end_time\": curr_time  # Not used for now but available if needed.\n    }\n\nbest_schedule = None\nbest_meetings = -1\nbest_wait = None\n\n# Try all permutations of friends\nfor order in itertools.permutations(friends.keys()):\n    result = schedule_for_order(order)\n    if result is not None:\n        num_meetings = len(result[\"itinerary\"])\n        if num_meetings > best_meetings:\n            best_schedule = result\n            best_meetings = num_meetings\n            best_wait = result[\"total_wait\"]\n        elif num_meetings == best_meetings:\n            # Tie-breaker: choose schedule with lower total waiting time.\n            if result[\"total_wait\"] < best_wait:\n                best_schedule = result\n                best_wait = result[\"total_wait\"]\n\n# Output the best schedule in JSON format with the required structure.\nif best_schedule is None:\n    output = {\"itinerary\": []}\nelse:\n    output = {\"itinerary\": best_schedule[\"itinerary\"]}\n\nprint(json.dumps(output, indent=2))\n",
            "count": "meeting_planning_example_356"
        }
    ]
}