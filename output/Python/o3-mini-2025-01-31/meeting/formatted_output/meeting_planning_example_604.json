{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Joseph",
                        "start_time": "11:30",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "14:30",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "15:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Laura",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Joseph",
                        "start_time": "11:30",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "14:30",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "15:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Laura",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nimport sys\nfrom copy import deepcopy\n\n# Helper function: convert time from minutes since midnight to H:MM string (24hr, no leading zero for hour)\ndef minutes_to_time(m):\n    h = m // 60\n    mi = m % 60\n    return f\"{h}:{mi:02d}\"\n\n# Define travel times dictionary. We'll use the given asymmetric travel times.\ntravel_times = {\n    \"Fisherman's Wharf\": {\n        \"The Castro\": 26,\n        \"Golden Gate Park\": 25,\n        \"Embarcadero\": 8,\n        \"Russian Hill\": 7,\n        \"Nob Hill\": 11,\n        \"Alamo Square\": 20,\n        \"North Beach\": 6\n    },\n    \"The Castro\": {\n        \"Fisherman's Wharf\": 24,\n        \"Golden Gate Park\": 11,\n        \"Embarcadero\": 22,\n        \"Russian Hill\": 18,\n        \"Nob Hill\": 16,\n        \"Alamo Square\": 8,\n        \"North Beach\": 20\n    },\n    \"Golden Gate Park\": {\n        \"Fisherman's Wharf\": 24,\n        \"The Castro\": 13,\n        \"Embarcadero\": 25,\n        \"Russian Hill\": 19,\n        \"Nob Hill\": 20,\n        \"Alamo Square\": 10,\n        \"North Beach\": 24\n    },\n    \"Embarcadero\": {\n        \"Fisherman's Wharf\": 6,\n        \"The Castro\": 25,\n        \"Golden Gate Park\": 25,\n        \"Russian Hill\": 8,\n        \"Nob Hill\": 10,\n        \"Alamo Square\": 19,\n        \"North Beach\": 5\n    },\n    \"Russian Hill\": {\n        \"Fisherman's Wharf\": 7,\n        \"The Castro\": 21,\n        \"Golden Gate Park\": 21,\n        \"Embarcadero\": 8,\n        \"Nob Hill\": 5,\n        \"Alamo Square\": 15,\n        \"North Beach\": 5\n    },\n    \"Nob Hill\": {\n        \"Fisherman's Wharf\": 11,\n        \"The Castro\": 17,\n        \"Golden Gate Park\": 17,\n        \"Embarcadero\": 9,\n        \"Russian Hill\": 5,\n        \"Alamo Square\": 11,\n        \"North Beach\": 8\n    },\n    \"Alamo Square\": {\n        \"Fisherman's Wharf\": 19,\n        \"The Castro\": 8,\n        \"Golden Gate Park\": 9,\n        \"Embarcadero\": 17,\n        \"Russian Hill\": 13,\n        \"Nob Hill\": 11,\n        \"North Beach\": 15\n    },\n    \"North Beach\": {\n        \"Fisherman's Wharf\": 5,\n        \"The Castro\": 22,\n        \"Golden Gate Park\": 22,\n        \"Embarcadero\": 6,\n        \"Russian Hill\": 4,\n        \"Nob Hill\": 7,\n        \"Alamo Square\": 16\n    }\n}\n\n# Define meeting constraints with availability windows in minutes (since midnight)\n# Times are converted from HH:MM to minutes:\n#   7:00  -> 420, 7:30 -> 450, 9:00 -> 540, 9:15 -> 555, 9:30 -> 570,\n#   11:30 -> 690, 12:45 -> 765, 14:30 -> 870, 15:45 -> 945, 19:15 -> 1155,\n#   19:30 -> 1170, 19:45 -> 1185, 7:45PM -> 19:45 (1185), 9:30PM -> 21:30 -> 1290,\n#   9:15PM -> 21:15 -> 1275, 9:45 PM -> 21:45 -> 1305.\n# Our starting point: Fisherman's Wharf at 9:00 (540)\n\nmeetings = [\n    # person, location, avail_start, avail_end, required_duration\n    # William: at Embarcadero (7:00 to 9:00, duration=90)\n    {\"person\": \"William\", \"location\": \"Embarcadero\", \"avail_start\": 420, \"avail_end\": 540, \"duration\": 90},\n    # Stephanie: at Nob Hill (7:30 to 9:30, duration=45)\n    {\"person\": \"Stephanie\", \"location\": \"Nob Hill\", \"avail_start\": 450, \"avail_end\": 570, \"duration\": 45},\n    # Joseph: at Alamo Square (11:30 to 12:45, duration=15)\n    {\"person\": \"Joseph\", \"location\": \"Alamo Square\", \"avail_start\": 690, \"avail_end\": 765, \"duration\": 15},\n    # Karen: at Russian Hill (14:30 to 19:45, duration=30)\n    {\"person\": \"Karen\", \"location\": \"Russian Hill\", \"avail_start\": 870, \"avail_end\": 1185, \"duration\": 30},\n    # Kimberly: at North Beach (15:45 to 19:15, duration=30)\n    {\"person\": \"Kimberly\", \"location\": \"North Beach\", \"avail_start\": 945, \"avail_end\": 1155, \"duration\": 30},\n    # Laura: at The Castro (19:45 to 21:30, duration=105)\n    {\"person\": \"Laura\", \"location\": \"The Castro\", \"avail_start\": 1185, \"avail_end\": 1290, \"duration\": 105},\n    # Daniel: at Golden Gate Park (21:15 to 21:45, duration=15)\n    {\"person\": \"Daniel\", \"location\": \"Golden Gate Park\", \"avail_start\": 1275, \"avail_end\": 1305, \"duration\": 15},\n]\n\n# Our starting location and time\nstart_location = \"Fisherman's Wharf\"\nstart_time = 540  # 9:00\n\n# We want to maximize number of meetings (friends met).\n# We cannot meet meetings that are not possible given travel and waiting times.\n# We'll use DFS to try all orderings (the number of meetings is small).\n\nbest_schedule = None\nbest_count = 0\n\ndef dfs(current_loc, current_time, remaining_meetings, schedule):\n    global best_schedule, best_count\n    # Update best_schedule if this schedule has more meetings\n    if len(schedule) > best_count:\n        best_count = len(schedule)\n        best_schedule = deepcopy(schedule)\n    # Try to add each remaining meeting that is feasible\n    for i, meet in enumerate(remaining_meetings):\n        # Check if travel is possible: if current_loc equals meeting location,\n        # travel time is 0, otherwise get from travel_times dictionary.\n        if current_loc == meet[\"location\"]:\n            travel = 0\n        else:\n            # if travel time not defined, skip (should not happen)\n            if current_loc not in travel_times or meet[\"location\"] not in travel_times[current_loc]:\n                continue\n            travel = travel_times[current_loc][meet[\"location\"]]\n        arrival_time = current_time + travel\n        # The meeting can only start when the friend is available.\n        meeting_start = max(arrival_time, meet[\"avail_start\"])\n        meeting_end = meeting_start + meet[\"duration\"]\n        if meeting_end <= meet[\"avail_end\"]:\n            # It's feasible, add to schedule.\n            event = {\n                \"action\": \"meet\",\n                \"location\": meet[\"location\"],\n                \"person\": meet[\"person\"],\n                \"start_time\": minutes_to_time(meeting_start),\n                \"end_time\": minutes_to_time(meeting_end)\n            }\n            new_schedule = schedule + [event]\n            new_remaining = remaining_meetings[:i] + remaining_meetings[i+1:]\n            dfs(meet[\"location\"], meeting_end, new_remaining, new_schedule)\n    # End DFS\n\n# Start DFS from starting location and time with all meetings available.\ndfs(start_location, start_time, meetings, [])\n\n# Our goal is \"meet as many friends as possible\". If best_schedule is None, then no meeting is feasible.\nif best_schedule is None:\n    result = {\"itinerary\": []}\nelse:\n    result = {\"itinerary\": best_schedule}\n\n# Output the result as JSON.\nprint(json.dumps(result, indent=2))\n    \nif __name__ == '__main__':\n    sys.exit(0)",
            "count": "meeting_planning_example_604"
        }
    ]
}