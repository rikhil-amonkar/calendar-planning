{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Lisa",
                        "start_time": "10:53",
                        "end_time": "11:38"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joshua",
                        "start_time": "12:00",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "12:23",
                        "end_time": "13:23"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "John",
                        "start_time": "16:45",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Nancy",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Lisa",
                        "start_time": "10:53",
                        "end_time": "11:38"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Joshua",
                        "start_time": "12:00",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Andrew",
                        "start_time": "12:23",
                        "end_time": "13:23"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "John",
                        "start_time": "16:45",
                        "end_time": "18:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Kenneth",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nimport itertools\n\n# Helper functions for time conversion\ndef time_to_minutes(t):\n    # t in \"H:MM\" format (e.g., \"9:00\", \"21:15\")\n    parts = t.split(':')\n    return int(parts[0]) * 60 + int(parts[1])\n\ndef minutes_to_time(m):\n    hour = m // 60\n    minute = m % 60\n    return f\"{hour}:{minute:02d}\"\n\n# Define travel times as provided (in minutes)\ntravel_times = {\n    (\"Embarcadero\", \"Richmond District\"): 21,\n    (\"Embarcadero\", \"Union Square\"): 10,\n    (\"Embarcadero\", \"Financial District\"): 5,\n    (\"Embarcadero\", \"Pacific Heights\"): 11,\n    (\"Embarcadero\", \"Nob Hill\"): 10,\n    (\"Embarcadero\", \"Bayview\"): 21,\n    \n    (\"Richmond District\", \"Embarcadero\"): 19,\n    (\"Richmond District\", \"Union Square\"): 21,\n    (\"Richmond District\", \"Financial District\"): 22,\n    (\"Richmond District\", \"Pacific Heights\"): 10,\n    (\"Richmond District\", \"Nob Hill\"): 17,\n    (\"Richmond District\", \"Bayview\"): 26,\n    \n    (\"Union Square\", \"Embarcadero\"): 11,\n    (\"Union Square\", \"Richmond District\"): 20,\n    (\"Union Square\", \"Financial District\"): 9,\n    (\"Union Square\", \"Pacific Heights\"): 15,\n    (\"Union Square\", \"Nob Hill\"): 9,\n    (\"Union Square\", \"Bayview\"): 15,\n    \n    (\"Financial District\", \"Embarcadero\"): 4,\n    (\"Financial District\", \"Richmond District\"): 21,\n    (\"Financial District\", \"Union Square\"): 9,\n    (\"Financial District\", \"Pacific Heights\"): 13,\n    (\"Financial District\", \"Nob Hill\"): 8,\n    (\"Financial District\", \"Bayview\"): 19,\n    \n    (\"Pacific Heights\", \"Embarcadero\"): 10,\n    (\"Pacific Heights\", \"Richmond District\"): 12,\n    (\"Pacific Heights\", \"Union Square\"): 12,\n    (\"Pacific Heights\", \"Financial District\"): 13,\n    (\"Pacific Heights\", \"Nob Hill\"): 8,\n    (\"Pacific Heights\", \"Bayview\"): 22,\n    \n    (\"Nob Hill\", \"Embarcadero\"): 9,\n    (\"Nob Hill\", \"Richmond District\"): 14,\n    (\"Nob Hill\", \"Union Square\"): 7,\n    (\"Nob Hill\", \"Financial District\"): 9,\n    (\"Nob Hill\", \"Pacific Heights\"): 8,\n    (\"Nob Hill\", \"Bayview\"): 19,\n    \n    (\"Bayview\", \"Embarcadero\"): 19,\n    (\"Bayview\", \"Richmond District\"): 25,\n    (\"Bayview\", \"Union Square\"): 17,\n    (\"Bayview\", \"Financial District\"): 19,\n    (\"Bayview\", \"Pacific Heights\"): 23,\n    (\"Bayview\", \"Nob Hill\"): 20,\n}\n\n# Define friends meeting constraints and info.\n# Time strings are in 24-hour format.\nfriends = {\n    \"Kenneth\": {\n        \"location\": \"Richmond District\",\n        \"avail_start\": time_to_minutes(\"21:15\"),\n        \"avail_end\": time_to_minutes(\"22:00\"),\n        \"min_meet\": 30\n    },\n    \"Lisa\": {\n        \"location\": \"Union Square\",\n        \"avail_start\": time_to_minutes(\"9:00\"),\n        \"avail_end\": time_to_minutes(\"16:30\"),\n        \"min_meet\": 45\n    },\n    \"Joshua\": {\n        \"location\": \"Financial District\",\n        \"avail_start\": time_to_minutes(\"12:00\"),\n        \"avail_end\": time_to_minutes(\"15:15\"),\n        \"min_meet\": 15\n    },\n    \"Nancy\": {\n        \"location\": \"Pacific Heights\",\n        \"avail_start\": time_to_minutes(\"8:00\"),\n        \"avail_end\": time_to_minutes(\"11:30\"),\n        \"min_meet\": 90\n    },\n    \"Andrew\": {\n        \"location\": \"Nob Hill\",\n        \"avail_start\": time_to_minutes(\"11:30\"),\n        \"avail_end\": time_to_minutes(\"20:15\"),\n        \"min_meet\": 60\n    },\n    \"John\": {\n        \"location\": \"Bayview\",\n        \"avail_start\": time_to_minutes(\"16:45\"),\n        \"avail_end\": time_to_minutes(\"21:30\"),\n        \"min_meet\": 75\n    }\n}\n\n# Starting point and time\nstart_location = \"Embarcadero\"\nstart_time = time_to_minutes(\"9:00\")\n\n# Function to look up travel times\ndef get_travel_time(origin, destination):\n    return travel_times.get((origin, destination), float('inf'))\n\n# We want to maximize number of meetings (i.e. friends met).\n# We'll try all permutations and choose one that meets all constraints.\nbest_schedule = None\nbest_count = 0\nbest_finish = float('inf')\nfriends_list = list(friends.keys())\n\nfor perm in itertools.permutations(friends_list):\n    cur_time = start_time\n    cur_location = start_location\n    itinerary = []\n    feasible = True\n    for friend in perm:\n        info = friends[friend]\n        travel_time = get_travel_time(cur_location, info[\"location\"])\n        arrival_time = cur_time + travel_time\n        # The meeting can only start when friend is available.\n        meeting_start = max(arrival_time, info[\"avail_start\"])\n        meeting_end = meeting_start + info[\"min_meet\"]\n        # Check if meeting can finish before friend leaves.\n        if meeting_end > info[\"avail_end\"]:\n            feasible = False\n            break\n        # Append the meeting event to itinerary.\n        event = {\n            \"action\": \"meet\",\n            \"location\": info[\"location\"],\n            \"person\": friend,\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        }\n        itinerary.append(event)\n        cur_time = meeting_end\n        cur_location = info[\"location\"]\n    if feasible:\n        count = len(itinerary)\n        # We want to maximize count and minimize final finish time.\n        if count > best_count or (count == best_count and cur_time < best_finish):\n            best_count = count\n            best_finish = cur_time\n            best_schedule = itinerary\n\n# Prepare the result dictionary.\nresult = {\"itinerary\": best_schedule if best_schedule is not None else []}\n\n# Output the result as JSON.\nprint(json.dumps(result, indent=2))\n                    \nif __name__ == '__main__':\n    pass",
            "count": "meeting_planning_example_546"
        }
    ]
}