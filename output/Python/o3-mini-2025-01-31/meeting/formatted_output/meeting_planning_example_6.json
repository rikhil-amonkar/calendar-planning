{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "14:15",
                        "end_time": "15:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "14:15",
                        "end_time": "15:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\ndef minutes_to_time_str(total_minutes):\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    # Format as H:MM with hour as non-padded and minute always 2-digit\n    return f\"{hours}:{minutes:02d}\"\n\ndef add_minutes(time_str, minutes_to_add):\n    # Parse time_str in H:MM format\n    parts = time_str.split(\":\")\n    hours = int(parts[0])\n    minutes = int(parts[1])\n    total = hours * 60 + minutes + minutes_to_add\n    return minutes_to_time_str(total)\n\ndef compute_optimal_schedule():\n    # Input parameters\n    arrival_at_fishermans_wharf = \"9:00\"\n    # Convert arrival time into minutes from midnight\n    arrival_parts = arrival_at_fishermans_wharf.split(\":\")\n    arrival_time = int(arrival_parts[0]) * 60 + int(arrival_parts[1])\n    \n    # Kenneth constraints at Nob Hill (in minutes from midnight)\n    kenneth_start = 14 * 60 + 15  # 14:15 is 855 minutes\n    kenneth_end = 19 * 60 + 45    # 19:45 is 1185 minutes\n    minimum_meet_duration = 90    # in minutes\n\n    # Travel distances (in minutes)\n    travel_fwh_to_nh = 11\n\n    # Compute the earliest arrival at Nob Hill\n    earliest_arrival_nh = arrival_time + travel_fwh_to_nh\n    # Meeting with Kenneth can only start at or after his available time.\n    meeting_start_time = max(earliest_arrival_nh, kenneth_start)\n    \n    # Compute meeting end time (minimum required meeting duration)\n    meeting_end_time = meeting_start_time + minimum_meet_duration\n\n    # Ensure meeting_end_time does not exceed Kenneth's available window\n    if meeting_end_time > kenneth_end:\n        raise Exception(\"Unable to schedule a meeting that satisfies the constraints.\")\n\n    # Format times as strings in H:MM format.\n    meeting_start_str = minutes_to_time_str(meeting_start_time)\n    meeting_end_str = minutes_to_time_str(meeting_end_time)\n\n    itinerary = [\n        {\n            \"action\": \"meet\",\n            \"location\": \"Nob Hill\",\n            \"person\": \"Kenneth\",\n            \"start_time\": meeting_start_str,\n            \"end_time\": meeting_end_str\n        }\n    ]\n\n    return {\"itinerary\": itinerary}\n\nif __name__ == \"__main__\":\n    schedule = compute_optimal_schedule()\n    # Output as JSON-formatted dictionary\n    print(json.dumps(schedule, indent=2))\n",
            "count": "meeting_planning_example_6"
        }
    ]
}