{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "13:00",
                        "end_time": "17:45"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Karen",
                        "start_time": "18:45",
                        "end_time": "20:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "13:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Karen",
                        "start_time": "18:45",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n#!/usr/bin/env python3\nimport json\nfrom datetime import datetime, timedelta\n\n# Helper function to format time in H:MM with no leading zero for hour\ndef format_time(dt):\n    return f\"{dt.hour}:{dt.minute:02d}\"\n\ndef main():\n    # Input parameters & constraints\n    # Arrival time at North Beach: 9:00 AM (use an arbitrary date)\n    base_date = datetime(2023, 1, 1)  # arbitrary date; only time matters\n    arrival_north_beach = base_date.replace(hour=9, minute=0)\n    \n    # Travel times (in minutes) between locations\n    travel_times = {\n        'North Beach': {'Pacific Heights': 8, 'Embarcadero': 6},\n        'Pacific Heights': {'North Beach': 9, 'Embarcadero': 10},\n        'Embarcadero': {'North Beach': 5, 'Pacific Heights': 11}\n    }\n    \n    # Meeting constraints\n    # Karen: at Pacific Heights from 18:45 to 20:15, needs at least 90 minutes meeting\n    karen_location = \"Pacific Heights\"\n    karen_avail_start = base_date.replace(hour=18, minute=45)\n    karen_avail_end   = base_date.replace(hour=20, minute=15)\n    karen_min_duration = timedelta(minutes=90)\n    \n    # Mark: at Embarcadero from 13:00 to 17:45, needs at least 120 minutes meeting\n    mark_location = \"Embarcadero\"\n    mark_avail_start = base_date.replace(hour=13, minute=0)\n    mark_avail_end   = base_date.replace(hour=17, minute=45)\n    mark_min_duration = timedelta(minutes=120)\n    \n    # We start at North Beach. Our plan is to meet Mark first at Embarcadero\n    # Compute the departure time from North Beach to be on time for Mark's availability.\n    travel_nb_to_em = timedelta(minutes=travel_times['North Beach']['Embarcadero'])\n    # We want to arrive at Mark's location at mark_avail_start, so departure_time = mark_avail_start - travel_time.\n    departure_from_nb = mark_avail_start - travel_nb_to_em\n    \n    # Check if we're at North Beach long enough (we arrive at 9:00).\n    if arrival_north_beach > departure_from_nb:\n        raise Exception(\"Not enough time at North Beach before departing to Mark.\")\n    \n    # Set Mark meeting schedule.\n    # We need a minimum of 120 minutes meeting within the availability window.\n    # We can maximize the meeting duration by scheduling it as late as possible\n    # but for simplicity, we set the meeting to begin exactly at mark_avail_start and end at mark_avail_end\n    # which is a duration of 4 hours 45 minutes (>=120 minutes).\n    mark_meet_start = mark_avail_start\n    mark_meet_end = mark_avail_end  # Use the full available window to ensure the minimum is met\n    \n    # After meeting Mark, travel from Embarcadero to Pacific Heights for Karen\n    travel_em_to_ph = timedelta(minutes=travel_times['Embarcadero']['Pacific Heights'])\n    departure_from_em = mark_meet_end\n    arrival_at_ph = departure_from_em + travel_em_to_ph\n    \n    # Karen is available starting at 18:45; if we arrive early, wait until then.\n    if arrival_at_ph < karen_avail_start:\n        karen_meet_start = karen_avail_start\n    else:\n        karen_meet_start = arrival_at_ph\n    \n    # Now schedule Karen meeting: The required minimum meeting duration is 90 minutes.\n    # We choose the meeting end as karen_meet_start + 90 minutes.\n    karen_meet_end = karen_meet_start + karen_min_duration\n    \n    # Check if Karen's meeting falls within her availability window.\n    if karen_meet_end > karen_avail_end:\n        # If our computed meeting goes beyond available time, adjust to use her entire available window.\n        karen_meet_start = karen_avail_start\n        karen_meet_end = karen_avail_end\n        # And we assume that this still meets the minimum requirement.\n        if (karen_meet_end - karen_meet_start) < karen_min_duration:\n            raise Exception(\"Karen's available window does not meet the minimum meeting duration.\")\n    \n    # Construct itinerary of meeting events (only meetings as required)\n    itinerary = []\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": mark_location,\n        \"person\": \"Mark\",\n        \"start_time\": format_time(mark_meet_start),\n        \"end_time\": format_time(mark_meet_end)\n    })\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": karen_location,\n        \"person\": \"Karen\",\n        \"start_time\": format_time(karen_meet_start),\n        \"end_time\": format_time(karen_meet_end)\n    })\n    \n    # Final output in JSON format.\n    result = {\"itinerary\": itinerary}\n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()",
            "count": "meeting_planning_example_143"
        }
    ]
}