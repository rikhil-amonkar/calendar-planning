{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import datetime, timedelta\n\n# Helper functions to convert time strings to minutes and vice versa\ndef time_to_minutes(t):\n    h, m = map(int, t.split(\":\"))\n    return h * 60 + m\n\ndef minutes_to_time(m):\n    h = m // 60\n    m = m % 60\n    return f\"{h:02d}:{m:02d}\"\n\n# Function to compute free intervals given busy intervals within a work period\ndef get_free_intervals(busy_intervals, work_start, work_end):\n    free = []\n    current = work_start\n    # Ensure busy intervals are sorted\n    busy_intervals.sort(key=lambda x: x[0])\n    for interval in busy_intervals:\n        start_busy, end_busy = interval\n        if start_busy > current:\n            free.append((current, start_busy))\n        current = max(current, end_busy)\n    if current < work_end:\n        free.append((current, work_end))\n    return free\n\n# Function to intersect two lists of intervals\ndef intersect_intervals(list1, list2):\n    i, j = 0, 0\n    intersection = []\n    while i < len(list1) and j < len(list2):\n        a_start, a_end = list1[i]\n        b_start, b_end = list2[j]\n        # Find the overlap between the two intervals\n        start = max(a_start, b_start)\n        end = min(a_end, b_end)\n        if start < end:\n            intersection.append((start, end))\n        # Move on from the interval that ends first\n        if a_end < b_end:\n            i += 1\n        else:\n            j += 1\n    return intersection\n\n# Work day start and end times in minutes (9:00 to 17:00)\nwork_start = time_to_minutes(\"09:00\")\nwork_end = time_to_minutes(\"17:00\")\nmeeting_duration = 30  # minutes\n\n# Busy schedules for each participant on Monday (times in minutes)\nbusy_bradley = [\n    (time_to_minutes(\"09:30\"), time_to_minutes(\"10:00\")),\n    (time_to_minutes(\"12:30\"), time_to_minutes(\"13:00\")),\n    (time_to_minutes(\"13:30\"), time_to_minutes(\"14:00\")),\n    (time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\"))\n]\n\nbusy_teresa = [\n    (time_to_minutes(\"10:30\"), time_to_minutes(\"11:00\")),\n    (time_to_minutes(\"12:00\"), time_to_minutes(\"12:30\")),\n    (time_to_minutes(\"13:00\"), time_to_minutes(\"13:30\")),\n    (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\"))\n]\n\nbusy_elizabeth = [\n    (time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n    (time_to_minutes(\"10:30\"), time_to_minutes(\"11:30\")),\n    (time_to_minutes(\"13:00\"), time_to_minutes(\"13:30\")),\n    (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")),\n    (time_to_minutes(\"15:30\"), time_to_minutes(\"17:00\"))\n]\n\nbusy_christian = [\n    (time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n    (time_to_minutes(\"10:30\"), time_to_minutes(\"17:00\"))\n]\n\n# Compute free intervals for each participant\nfree_bradley = get_free_intervals(busy_bradley, work_start, work_end)\nfree_teresa = get_free_intervals(busy_teresa, work_start, work_end)\nfree_elizabeth = get_free_intervals(busy_elizabeth, work_start, work_end)\nfree_christian = get_free_intervals(busy_christian, work_start, work_end)\n\n# Intersect all free intervals to get common free slots\ncommon_free = intersect_intervals(free_bradley, free_teresa)\ncommon_free = intersect_intervals(common_free, free_elizabeth)\ncommon_free = intersect_intervals(common_free, free_christian)\n\n# Find the first interval that can accommodate the meeting duration\nmeeting_start = None\nfor start, end in common_free:\n    if end - start >= meeting_duration:\n        meeting_start = start\n        meeting_end = start + meeting_duration\n        break\n\nif meeting_start is not None:\n    meeting_time = f\"{minutes_to_time(meeting_start)}:{minutes_to_time(meeting_end)}\"\n    day_of_week = \"Monday\"\n    print(meeting_time)\n    print(day_of_week)\nelse:\n    print(\"No available time slot found.\")\n'''",
            "count": "calendar_scheduling_example_113"
        }
    ]
}