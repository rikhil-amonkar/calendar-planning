{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import timedelta, datetime\n\n# Define the workday start and end times\nworkday_start = datetime.strptime(\"09:00\", \"%H:%M\")\nworkday_end   = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define each participant's busy intervals on Monday.\n# Each busy interval is a tuple (start_time, end_time) in HH:MM format.\nbusy_times = {\n    \"Patrick\": [(\"13:30\",\"14:00\"), (\"14:30\",\"15:00\")],\n    \"Shirley\": [(\"09:00\",\"09:30\"), (\"11:00\",\"11:30\"), (\"12:00\",\"12:30\"), (\"14:30\",\"15:00\"), (\"16:00\",\"17:00\")],\n    \"Jeffrey\": [(\"09:00\",\"09:30\"), (\"10:30\",\"11:00\"), (\"11:30\",\"12:00\"), (\"13:00\",\"13:30\"), (\"16:00\",\"17:00\")],\n    \"Gloria\":  [(\"11:30\",\"12:00\"), (\"15:00\",\"15:30\")],\n    \"Nathan\":  [(\"09:00\",\"09:30\"), (\"10:30\",\"12:00\"), (\"14:00\",\"17:00\")],\n    \"Angela\":  [(\"09:00\",\"09:30\"), (\"10:00\",\"11:00\"), (\"12:30\",\"15:00\"), (\"15:30\",\"16:30\")],\n    \"David\":   [(\"09:00\",\"09:30\"), (\"10:00\",\"10:30\"), (\"11:00\",\"14:00\"), (\"14:30\",\"16:30\")]\n}\n\n# Convert a time string to a datetime object based on the workday date\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\n# Check if two time intervals [start1, end1) and [start2, end2) overlap\ndef intervals_overlap(start1, end1, start2, end2):\n    return max(start1, start2) < min(end1, end2)\n\n# Given a candidate meeting time, check if it is free for every participant\ndef is_candidate_free(candidate_start, candidate_end):\n    for person, intervals in busy_times.items():\n        for interval in intervals:\n            busy_start = parse_time(interval[0])\n            busy_end   = parse_time(interval[1])\n            # If candidate meeting overlaps with any busy interval, return False\n            if intervals_overlap(candidate_start, candidate_end, busy_start, busy_end):\n                return False\n    return True\n\n# Starting from workday_start, check for a candidate meeting slot of meeting_duration\ncurrent_time = workday_start\nmeeting_slot_found = False\ncandidate_meeting = None\n\n# We'll check in minute increments.\nwhile current_time + meeting_duration <= workday_end:\n    candidate_start = current_time\n    candidate_end = current_time + meeting_duration\n    if is_candidate_free(candidate_start, candidate_end):\n        candidate_meeting = (candidate_start, candidate_end)\n        meeting_slot_found = True\n        break\n    current_time += timedelta(minutes=1)\n\nif meeting_slot_found:\n    # Format the output as HH:MM:HH:MM and include the day \"Monday\"\n    start_str = candidate_meeting[0].strftime(\"%H:%M\")\n    end_str   = candidate_meeting[1].strftime(\"%H:%M\")\n    print(f\"{start_str}:{end_str} Monday\")\nelse:\n    print(\"No available meeting slot found.\")\n    \n# For this particular schedule, the meeting time found is 09:30 to 10:00 on Monday.\n'''",
            "count": "calendar_scheduling_example_436"
        }
    ]
}