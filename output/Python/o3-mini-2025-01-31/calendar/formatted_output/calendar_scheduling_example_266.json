{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    # Expects time in \"HH:MM\" format.\n    hours, minutes = map(int, time_str.split(\":\"))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    return f\"{minutes//60:02d}:{minutes%60:02d}\"\n\n# Workday start and end (in minutes from midnight)\nWORKDAY_START = time_to_minutes(\"09:00\")\nWORKDAY_END = time_to_minutes(\"17:00\")\nMEETING_DURATION = 30  # minutes\n\n# Busy schedules for each participant on Monday\n# Each entry is a tuple (start, end) in minutes\nbusy_schedules = {\n    \"Joe\": [(time_to_minutes(\"09:30\"), time_to_minutes(\"10:00\")),\n            (time_to_minutes(\"10:30\"), time_to_minutes(\"11:00\"))],\n    \n    \"Keith\": [(time_to_minutes(\"11:30\"), time_to_minutes(\"12:00\")),\n              (time_to_minutes(\"15:00\"), time_to_minutes(\"15:30\"))],\n    \n    \"Patricia\": [(time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n                 (time_to_minutes(\"13:00\"), time_to_minutes(\"13:30\"))],\n    \n    \"Nancy\": [(time_to_minutes(\"09:00\"), time_to_minutes(\"11:00\")),\n              (time_to_minutes(\"11:30\"), time_to_minutes(\"16:30\"))],\n    \n    \"Pamela\": [(time_to_minutes(\"09:00\"), time_to_minutes(\"10:00\")),\n               (time_to_minutes(\"10:30\"), time_to_minutes(\"11:00\")),\n               (time_to_minutes(\"11:30\"), time_to_minutes(\"12:30\")),\n               (time_to_minutes(\"13:00\"), time_to_minutes(\"14:00\")),\n               (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")),\n               (time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\")),\n               (time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\"))]\n}\n\ndef merge_intervals(intervals):\n    # Sort intervals by start time\n    intervals = sorted(intervals, key=lambda x: x[0])\n    merged = []\n    for current in intervals:\n        if not merged or current[0] > merged[-1][1]:\n            merged.append(list(current))\n        else:\n            merged[-1][1] = max(merged[-1][1], current[1])\n    return merged\n\ndef get_common_free_time(busy):\n    # Merge all busy intervals from all participants\n    all_busy = []\n    for intervals in busy.values():\n        all_busy.extend(intervals)\n    merged_busy = merge_intervals(all_busy)\n    \n    free_intervals = []\n    # From workday start to first busy interval\n    if merged_busy:\n        if WORKDAY_START < merged_busy[0][0]:\n            free_intervals.append((WORKDAY_START, merged_busy[0][0]))\n        # Between busy intervals\n        for i in range(len(merged_busy) - 1):\n            start = merged_busy[i][1]\n            end = merged_busy[i+1][0]\n            if start < end:\n                free_intervals.append((start, end))\n        # After last busy interval until end of workday\n        if merged_busy[-1][1] < WORKDAY_END:\n            free_intervals.append((merged_busy[-1][1], WORKDAY_END))\n    else:\n        free_intervals.append((WORKDAY_START, WORKDAY_END))\n    return free_intervals\n\ndef find_meeting_slot(free_intervals, duration):\n    for start, end in free_intervals:\n        if end - start >= duration:\n            return start, start + duration\n    return None\n\ndef main():\n    day = \"Monday\"\n    free_intervals = get_common_free_time(busy_schedules)\n    slot = find_meeting_slot(free_intervals, MEETING_DURATION)\n    if slot:\n        start_time = minutes_to_time(slot[0])\n        end_time = minutes_to_time(slot[1])\n        # Format the output as HH:MM:HH:MM and include the day of the week.\n        print(f\"{start_time}:{end_time}\")\n        print(day)\n    else:\n        print(\"No available slot found.\")\n\nif __name__ == '__main__':\n    main()\n'''",
            "count": "calendar_scheduling_example_266"
        }
    ]
}