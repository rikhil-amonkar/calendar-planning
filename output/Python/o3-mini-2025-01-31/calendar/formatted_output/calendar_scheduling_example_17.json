{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import timedelta, datetime\n\ndef time_to_minutes(t):\n    \"\"\"Converts HH:MM string to minutes since midnight.\"\"\"\n    h, m = map(int, t.split(\":\"))\n    return h * 60 + m\n\ndef minutes_to_time(m):\n    \"\"\"Converts minutes since midnight to HH:MM string.\"\"\"\n    h = m // 60\n    m = m % 60\n    return f\"{h:02d}:{m:02d}\"\n\ndef intervals_free(busy, work_start, work_end):\n    \"\"\"\n    Given busy intervals (list of (start, end) in minutes), \n    returns free intervals between work_start and work_end.\n    \"\"\"\n    free = []\n    current = work_start\n    for bstart, bend in sorted(busy):\n        if current < bstart:\n            free.append((current, bstart))\n        current = max(current, bend)\n    if current < work_end:\n        free.append((current, work_end))\n    return free\n\ndef overlaps(slot, busy_interval):\n    \"\"\"Returns True if slot [start, end) overlaps busy_interval.\"\"\"\n    s, e = slot\n    bstart, bend = busy_interval\n    # Overlap exists if the slot and busy interval are not completely separate\n    return not (e <= bstart or s >= bend)\n\ndef is_slot_free(slot, busy):\n    \"\"\"Check if the given slot (in minutes) is free from all busy intervals.\"\"\"\n    for b in busy:\n        if overlaps(slot, b):\n            return False\n    return True\n\n# Define work hours for Monday (in minutes)\n# Monday workday is 09:00 to 17:00.\nwork_start = time_to_minutes(\"09:00\")\nwork_end   = time_to_minutes(\"17:00\")\n\n# Meeting duration: 30 minutes\nmeeting_duration = 30\n\n# Busy schedules for each participant on Monday (times in minutes from midnight)\nmargaret_busy = [\n    (time_to_minutes(\"09:00\"), time_to_minutes(\"10:00\")),\n    (time_to_minutes(\"10:30\"), time_to_minutes(\"11:00\")),\n    (time_to_minutes(\"11:30\"), time_to_minutes(\"12:00\")),\n    (time_to_minutes(\"13:00\"), time_to_minutes(\"13:30\")),\n    (time_to_minutes(\"15:00\"), time_to_minutes(\"15:30\"))\n]\n\ndonna_busy = [\n    (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")),\n    (time_to_minutes(\"16:00\"), time_to_minutes(\"16:30\"))\n]\n\nhelen_busy = [\n    (time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n    (time_to_minutes(\"10:00\"), time_to_minutes(\"11:30\")),\n    (time_to_minutes(\"13:00\"), time_to_minutes(\"14:00\")),\n    (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")),\n    (time_to_minutes(\"15:30\"), time_to_minutes(\"17:00\"))\n]\n\n# Helen's additional constraint: do not meet after 13:30.\n# So, the meeting must end by 13:30; hence the latest start is 13:00.\nlatest_start_for_helen = time_to_minutes(\"13:00\")\n\n# We'll search for an available starting time between work_start and latest_start_for_helen.\n# Check minute by minute.\ncandidate = None\nfor start in range(work_start, latest_start_for_helen + 1):\n    end = start + meeting_duration\n    # If the meeting runs past the work_end, break (shouldn't happen on Monday mornings)\n    if end > work_end:\n        break\n    # Meeting must end by 13:30 for Helen\n    if end > time_to_minutes(\"13:30\"):\n        continue\n\n    slot = (start, end)\n    # Check if slot is free for everyone\n    if (is_slot_free(slot, margaret_busy) and \n        is_slot_free(slot, donna_busy) and \n        is_slot_free(slot, helen_busy)):\n        candidate = slot\n        break\n\nif candidate:\n    start_time = minutes_to_time(candidate[0])\n    end_time   = minutes_to_time(candidate[1])\n    # Output in the format HH:MM:HH:MM and include the day of the week.\n    print(f\"{start_time}:{end_time} Monday\")\nelse:\n    print(\"No available slot found\")\n'''",
            "count": "calendar_scheduling_example_17"
        }
    ]
}