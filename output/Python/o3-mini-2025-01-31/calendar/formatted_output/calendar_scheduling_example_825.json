{
    "0shot": [
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef minutes_to_time(m):\n    hours = m // 60\n    minutes = m % 60\n    return f\"{hours:02d}:{minutes:02d}\"\n\n# Define working hours in minutes (9:00 to 17:00)\nwork_start = 9 * 60  # 540\nwork_end = 17 * 60   # 1020\nmeeting_duration = 60\n\n# Busy schedules in minutes for each day and participant.\n# Each tuple represents (start_time, end_time) in minutes.\nschedules = {\n    \"Monday\": {\n        \"Laura\": [(10 * 60 + 30, 11 * 60),   # 10:30-11:00\n                  (12 * 60 + 30, 13 * 60),   # 12:30-13:00\n                  (14 * 60 + 30, 15 * 60 + 30), # 14:30-15:30\n                  (16 * 60, 17 * 60)],      # 16:00-17:00\n        \"Philip\": [(9 * 60, 17 * 60)]         # 9:00-17:00\n    },\n    \"Tuesday\": {\n        \"Laura\": [(9 * 60 + 30, 10 * 60),     # 9:30-10:00\n                  (11 * 60, 11 * 60 + 30),    # 11:00-11:30\n                  (13 * 60, 13 * 60 + 30),    # 13:00-13:30\n                  (14 * 60 + 30, 15 * 60),    # 14:30-15:00\n                  (16 * 60, 17 * 60)],        # 16:00-17:00\n        \"Philip\": [(9 * 60, 11 * 60),         # 9:00-11:00\n                   (11 * 60 + 30, 12 * 60),   # 11:30-12:00\n                   (13 * 60, 13 * 60 + 30),   # 13:00-13:30\n                   (14 * 60, 14 * 60 + 30),   # 14:00-14:30\n                   (15 * 60, 16 * 60 + 30)]   # 15:00-16:30\n    },\n    \"Wednesday\": {\n        \"Laura\": [(11 * 60 + 30, 12 * 60),    # 11:30-12:00\n                  (12 * 60 + 30, 13 * 60),    # 12:30-13:00\n                  (15 * 60 + 30, 16 * 60 + 30)], # 15:30-16:30\n        \"Philip\": [(9 * 60, 10 * 60),          # 9:00-10:00\n                   (11 * 60, 12 * 60),         # 11:00-12:00\n                   (12 * 60 + 30, 16 * 60),    # 12:30-16:00\n                   (16 * 60 + 30, 17 * 60)]    # 16:30-17:00\n    },\n    \"Thursday\": {\n        \"Laura\": [(10 * 60 + 30, 11 * 60),     # 10:30-11:00\n                  (12 * 60, 13 * 60 + 30),    # 12:00-13:30\n                  (15 * 60, 15 * 60 + 30),    # 15:00-15:30\n                  (16 * 60, 16 * 60 + 30)],   # 16:00-16:30\n        \"Philip\": [(9 * 60, 10 * 60 + 30),      # 9:00-10:30\n                   (11 * 60, 12 * 60 + 30),    # 11:00-12:30\n                   (13 * 60, 17 * 60)]         # 13:00-17:00\n    }\n}\n\n# Additional constraint: Philip cannot meet on Wednesday.\nexcluded_days = {\"Wednesday\"}\n\ndef is_free(start, end, busy_times):\n    \"\"\"\n    Check if a meeting from start to end minutes does not overlap any busy interval.\n    Two intervals [a, b) and [c, d) do not overlap if b <= c or d <= a.\n    \"\"\"\n    for bstart, bend in busy_times:\n        # If the meeting interval overlaps a busy interval, return False.\n        if not (end <= bstart or start >= bend):\n            return False\n    return True\n\nmeeting_found = False\n\n# Check each day in the order Monday, Tuesday, Wednesday, Thursday.\nfor day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]:\n    if day in excluded_days:\n        continue  # skip days that are not allowed\n    \n    # For each valid starting minute within working hours:\n    for start in range(work_start, work_end - meeting_duration + 1):\n        end = start + meeting_duration\n        # Check all participants for this day.\n        conflict = False\n        for person in schedules[day]:\n            if not is_free(start, end, schedules[day][person]):\n                conflict = True\n                break\n        if not conflict:\n            # Meeting time found.\n            meeting_day = day\n            meeting_start_str = minutes_to_time(start)\n            meeting_end_str = minutes_to_time(end)\n            meeting_found = True\n            break\n    if meeting_found:\n        break\n\nif meeting_found:\n    # Output in the required format: day and time range {HH:MM:HH:MM}\n    print(f\"{meeting_day} {{{meeting_start_str}:{meeting_end_str}}}\")\nelse:\n    print(\"No available meeting time found.\")\n'''",
            "count": "calendar_scheduling_example_825"
        }
    ]
}