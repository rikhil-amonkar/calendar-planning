{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import datetime, timedelta\n\n# Define the working day details\nday_of_week = \"Monday\"\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end   = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define busy time intervals for each participant as (start, end) tuples\n# All times are represented as datetime objects relative to the same arbitrary date.\n# For simplicity, we use the same date for all events.\ndef to_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\njuan_busy = [\n    (to_time(\"09:00\"), to_time(\"10:30\")),\n    (to_time(\"15:30\"), to_time(\"16:00\"))\n]\n\nmarilyn_busy = [\n    (to_time(\"11:00\"), to_time(\"11:30\")),\n    (to_time(\"12:30\"), to_time(\"13:00\"))\n]\n\nronald_busy = [\n    (to_time(\"09:00\"), to_time(\"10:30\")),\n    (to_time(\"12:00\"), to_time(\"12:30\")),\n    (to_time(\"13:00\"), to_time(\"13:30\")),\n    (to_time(\"14:00\"), to_time(\"16:30\"))\n]\n\n# Additional constraint: Juan cannot meet after 16:00, so adjust work_end for Juan.\njuan_latest_end = to_time(\"16:00\")\n\n# Merge all busy intervals into one list for easier checking (they have to be checked separately)\nall_busy = {\n    \"Juan\": juan_busy,\n    \"Marilyn\": marilyn_busy,\n    \"Ronald\": ronald_busy\n}\n\n# Function to check if a proposed time slot [start, end) is free for a given person's schedule\ndef is_free(slot_start, slot_end, busy_intervals):\n    for busy_start, busy_end in busy_intervals:\n        # If the time slot overlaps with a busy interval, return False\n        if slot_start < busy_end and busy_start < slot_end:\n            return False\n    return True\n\n# Try to find a slot starting at work_start and moving in 15 minute increments.\n# The meeting must finish by work_end and satisfy Juan's cutoff constraint.\ncurrent_start = work_start\nfound_slot = False\nproposed_start = None\n\nwhile current_start + meeting_duration <= work_end:\n    proposed_end = current_start + meeting_duration\n    # Respect Juan's limitation: meeting must end by 16:00\n    if proposed_end > juan_latest_end:\n        break\n    \n    # Check if all participants are free in this slot\n    if (is_free(current_start, proposed_end, all_busy[\"Juan\"]) and\n        is_free(current_start, proposed_end, all_busy[\"Marilyn\"]) and\n        is_free(current_start, proposed_end, all_busy[\"Ronald\"])):\n        proposed_start = current_start\n        found_slot = True\n        break\n    \n    current_start += timedelta(minutes=15)\n\nif found_slot:\n    proposed_end = proposed_start + meeting_duration\n    # Format the output in HH:MM:HH:MM format along with day of week.\n    schedule_time = f\"{proposed_start.strftime('%H:%M')}:{proposed_end.strftime('%H:%M')}\"\n    print(f\"{day_of_week} {schedule_time}\")\nelse:\n    print(\"No suitable time slot found.\")\n'''",
            "count": "calendar_scheduling_example_98"
        }
    ]
}