{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef time_to_minutes(t):\n    \"\"\"Converts time string 'HH:MM' to minutes since midnight.\"\"\"\n    hours, minutes = map(int, t.split(\":\"))\n    return hours * 60 + minutes\n\ndef minutes_to_time(m):\n    \"\"\"Converts minutes since midnight to time string 'HH:MM'.\"\"\"\n    hours = m // 60\n    minutes = m % 60\n    return f\"{hours:02d}:{minutes:02d}\"\n\ndef subtract_busy(interval, busys):\n    \"\"\"\n    Given an interval (start, end) and a sorted list of busy intervals,\n    subtracts out busy periods to return a list of free intervals.\n    \"\"\"\n    free = []\n    start, end = interval\n    current = start\n    for bstart, bend in busys:\n        if bend <= current:\n            continue\n        if bstart > current:\n            free.append((current, min(bstart, end)))\n        current = max(current, bend)\n        if current >= end:\n            break\n    if current < end:\n        free.append((current, end))\n    return free\n\ndef intersect_intervals(intervals1, intervals2):\n    \"\"\"\n    Given two lists of intervals, return their intersection.\n    Each interval is a tuple (start, end).\n    \"\"\"\n    i, j = 0, 0\n    result = []\n    while i < len(intervals1) and j < len(intervals2):\n        a_start, a_end = intervals1[i]\n        b_start, b_end = intervals2[j]\n        start = max(a_start, b_start)\n        end = min(a_end, b_end)\n        if start < end:\n            result.append((start, end))\n        if a_end < b_end:\n            i += 1\n        else:\n            j += 1\n    return result\n\n# Meeting constraints\nmeeting_duration = 30  # minutes\nwork_start = time_to_minutes(\"09:00\")\nwork_end = time_to_minutes(\"17:00\")\n\n# Define each person's busy schedule as dictionary of day->list of (start, end) in minutes\nschedules = {\n    \"Monday\": {\n        \"Mary\": [],  # Mary has no meetings on Monday.\n        \"Alexis\": [\n            (time_to_minutes(\"09:00\"), time_to_minutes(\"10:00\")),\n            (time_to_minutes(\"10:30\"), time_to_minutes(\"12:00\")),\n            (time_to_minutes(\"12:30\"), time_to_minutes(\"16:30\"))\n        ]\n    },\n    \"Tuesday\": {\n        \"Mary\": [\n            (time_to_minutes(\"10:00\"), time_to_minutes(\"10:30\")),\n            (time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\"))\n        ],\n        \"Alexis\": [\n            (time_to_minutes(\"09:00\"), time_to_minutes(\"10:00\")),\n            (time_to_minutes(\"10:30\"), time_to_minutes(\"11:30\")),\n            (time_to_minutes(\"12:00\"), time_to_minutes(\"15:30\")),\n            (time_to_minutes(\"16:00\"), time_to_minutes(\"17:00\"))\n        ]\n    },\n    \"Wednesday\": {\n        \"Mary\": [\n            (time_to_minutes(\"09:30\"), time_to_minutes(\"10:00\")),\n            (time_to_minutes(\"15:00\"), time_to_minutes(\"15:30\"))\n        ],\n        \"Alexis\": [\n            (time_to_minutes(\"09:00\"), time_to_minutes(\"11:00\")),\n            (time_to_minutes(\"11:30\"), time_to_minutes(\"17:00\"))\n        ]\n    },\n    \"Thursday\": {\n        \"Mary\": [\n            (time_to_minutes(\"09:00\"), time_to_minutes(\"10:00\")),\n            (time_to_minutes(\"10:30\"), time_to_minutes(\"11:30\"))\n        ],\n        \"Alexis\": [\n            (time_to_minutes(\"10:00\"), time_to_minutes(\"12:00\")),\n            (time_to_minutes(\"14:00\"), time_to_minutes(\"14:30\")),\n            (time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\")),\n            (time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\"))\n        ]\n    }\n}\n\ndays_order = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\n\nearliest_meeting = None\nmeeting_day = None\n\nfor day in days_order:\n    # For each participant, determine free intervals by subtracting busy time from working hours.\n    free_intervals = {}\n    for person in schedules[day]:\n        busy_times = sorted(schedules[day][person])\n        free_intervals[person] = subtract_busy((work_start, work_end), busy_times)\n    \n    # Find common free intervals between all participants.\n    # Start with the free intervals for the first participant.\n    persons = list(free_intervals.keys())\n    common_free = free_intervals[persons[0]]\n    for person in persons[1:]:\n        common_free = intersect_intervals(common_free, free_intervals[person])\n    \n    # Check if there is an interval with at least meeting_duration minutes.\n    for start, end in common_free:\n        if end - start >= meeting_duration:\n            earliest_meeting = (start, start + meeting_duration)\n            meeting_day = day\n            break\n    if earliest_meeting:\n        break\n\nif earliest_meeting and meeting_day:\n    start_time = minutes_to_time(earliest_meeting[0])\n    end_time = minutes_to_time(earliest_meeting[1])\n    print(f\"{meeting_day}, {start_time}:{end_time}\")\nelse:\n    print(\"No available meeting time could be found.\")\n'''",
            "count": "calendar_scheduling_example_812"
        }
    ]
}