{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(timestr):\n    \"\"\"Convert 'HH:MM' to minutes since midnight.\"\"\"\n    h, m = map(int, timestr.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    \"\"\"Convert minutes since midnight to 'HH:MM' string.\"\"\"\n    return f\"{minutes//60:02d}:{minutes%60:02d}\"\n\n# Define workday start and end in minutes (9:00 to 17:00)\nwork_start = time_to_minutes(\"09:00\")\nwork_end = time_to_minutes(\"17:00\")\nmeeting_duration = 60  # in minutes\n\n# Busy intervals for each participant as (start, end) times in minutes.\n# All times are on Monday.\nbusy_schedules = {\n    \"Evelyn\": [],  # free entire day\n    \"Joshua\": [\n        (time_to_minutes(\"11:00\"), time_to_minutes(\"12:30\")),\n        (time_to_minutes(\"13:30\"), time_to_minutes(\"14:30\")),\n        (time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\"))\n    ],\n    \"Kevin\": [],  # free entire day\n    \"Gerald\": [],  # free entire day\n    \"Jerry\": [\n        (time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n        (time_to_minutes(\"10:30\"), time_to_minutes(\"12:00\")),\n        (time_to_minutes(\"12:30\"), time_to_minutes(\"13:00\")),\n        (time_to_minutes(\"13:30\"), time_to_minutes(\"14:00\")),\n        (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")),\n        (time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\"))\n    ],\n    \"Jesse\": [\n        (time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n        (time_to_minutes(\"10:30\"), time_to_minutes(\"12:00\")),\n        (time_to_minutes(\"12:30\"), time_to_minutes(\"13:00\")),\n        (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")),\n        (time_to_minutes(\"15:30\"), time_to_minutes(\"16:30\"))\n    ],\n    \"Kenneth\": [\n        (time_to_minutes(\"10:30\"), time_to_minutes(\"12:30\")),\n        (time_to_minutes(\"13:30\"), time_to_minutes(\"14:00\")),\n        (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")),\n        (time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\")),\n        (time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\"))\n    ]\n}\n\ndef is_time_available(start, end, busy_intervals):\n    \"\"\"Return True if the interval [start, end) does not conflict with any busy interval.\"\"\"\n    for bstart, bend in busy_intervals:\n        # if meeting overlaps with a busy block, return False\n        if start < bend and end > bstart:\n            return False\n    return True\n\ndef find_meeting_slot():\n    # Loop through each possible minute in the workday where the meeting\n    # can start and end within the work hours.\n    for start in range(work_start, work_end - meeting_duration + 1):\n        end = start + meeting_duration\n        conflict = False\n        # Check each participant's busy schedule\n        for person, busy_intervals in busy_schedules.items():\n            if not is_time_available(start, end, busy_intervals):\n                conflict = True\n                break\n        if not conflict:\n            return start, end\n    return None, None\n\nmeeting_start, meeting_end = find_meeting_slot()\n\nif meeting_start is not None:\n    meeting_start_str = minutes_to_time(meeting_start)\n    meeting_end_str = minutes_to_time(meeting_end)\n    meeting_day = \"Monday\"\n    # Output in the format {HH:MM:HH:MM} and day of the week\n    print(meeting_day, f\"{{{meeting_start_str}:{meeting_end_str}}}\")\nelse:\n    print(\"No available meeting slot found.\")\n'''",
            "count": "calendar_scheduling_example_479"
        }
    ]
}