{
    "0shot": [
        {
            "final_program_time": {
                "day": "Wednesday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import time\n\n# Define meeting duration in minutes\nMEETING_DURATION = 60\n\n# Define work hours (start and end)\nwork_start = time(9, 0)\nwork_end = time(17, 0)\n\n# Participant schedules (start_time, end_time) in minutes from midnight for simplicity\n# We'll convert times to minutes from midnight (e.g., 9:00 -> 540)\n\ndef to_minutes(hour, minute):\n    return hour * 60 + minute\n\n# Convert work hours to minutes\nwork_start_minutes = to_minutes(9, 0)\nwork_end_minutes = to_minutes(17, 0)\n\n# Blocked times for each participant in minutes:\n# Judith's blocks: Monday: 12:00-12:30, Wednesday: 11:30-12:00\njudith_blocks = {\n    \"Monday\": [(to_minutes(12, 0), to_minutes(12, 30))],\n    \"Tuesday\": [],  # No blocks Tuesday\n    \"Wednesday\": [(to_minutes(11, 30), to_minutes(12, 0))]\n}\n\n# Timothy's blocks:\ntimothy_blocks = {\n    \"Monday\": [\n        (to_minutes(9, 30), to_minutes(10, 0)),\n        (to_minutes(10, 30), to_minutes(11, 30)),\n        (to_minutes(12, 30), to_minutes(14, 0)),\n        (to_minutes(15, 30), to_minutes(17, 0))\n    ],\n    \"Tuesday\": [\n        (to_minutes(9, 30), to_minutes(13, 0)),\n        (to_minutes(13, 30), to_minutes(14, 0)),\n        (to_minutes(14, 30), to_minutes(17, 0))\n    ],\n    \"Wednesday\": [\n        (to_minutes(9, 0), to_minutes(9, 30)),\n        (to_minutes(10, 30), to_minutes(11, 0)),\n        (to_minutes(13, 30), to_minutes(14, 30)),\n        (to_minutes(15, 0), to_minutes(15, 30)),\n        (to_minutes(16, 0), to_minutes(16, 30))\n    ]\n}\n\n# Preference constraints:\n# Judith would like to avoid meetings on Monday and avoid before 12:00 on Wednesday.\n# Hence, we will try to schedule on Tuesday or Wednesday after 12:00.\n# Note: Tuesday does not appear to have a sufficient free block for one hour based on Timothy's schedule.\n\ndef is_slot_free(day, start, duration, blocks):\n    end = start + duration\n    # The meeting must lie completely within work hours.\n    if start < work_start_minutes or end > work_end_minutes:\n        return False\n    # Check against all blocks in a given day.\n    for block_start, block_end in blocks:\n        # If the meeting overlaps with any blocked interval, it's not free.\n        if not (end <= block_start or start >= block_end):\n            return False\n    return True\n\n# We'll search for a valid meeting time among the days \"Monday\", \"Tuesday\", \"Wednesday\".\n# Given Judith's preferences, we prefer Tuesday or Wednesday after 12:00.\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\nmeeting_day = None\nmeeting_start = None\n\nfor day in days:\n    # Combined blocks for both participants for this day\n    blocks = []\n    blocks.extend(judith_blocks.get(day, []))\n    blocks.extend(timothy_blocks.get(day, []))\n    # Sort blocks for potential future use\n    blocks.sort(key=lambda x: x[0])\n    \n    # Determine the earliest possible start time:\n    earliest = work_start_minutes\n    latest = work_end_minutes - MEETING_DURATION  # meeting must end by work_end\n    \n    # Apply preferences:\n    if day == \"Monday\":\n        # Judith prefers to avoid Monday meetings.\n        continue\n    if day == \"Wednesday\":\n        # Judith prefers not to have meeting before 12:00 on Wednesday.\n        earliest = max(earliest, to_minutes(12, 0))\n    \n    # Try every minute (could be optimized, but small range) for a meeting start time from earliest to latest.\n    found = False\n    for start in range(earliest, latest + 1):\n        if is_slot_free(day, start, MEETING_DURATION, blocks):\n            meeting_day = day\n            meeting_start = start\n            found = True\n            break\n    if found:\n        break\n\nif meeting_day and meeting_start is not None:\n    # Convert meeting_start from minutes to HH:MM format.\n    start_hour = meeting_start // 60\n    start_minute = meeting_start % 60\n    end_total = meeting_start + MEETING_DURATION\n    end_hour = end_total // 60\n    end_minute = end_total % 60\n    # Format time output\n    time_range = f\"{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}\"\n    print(meeting_day)\n    print(time_range)\nelse:\n    print(\"No possible time slot found.\")\n'''",
            "count": "calendar_scheduling_example_784"
        }
    ]
}