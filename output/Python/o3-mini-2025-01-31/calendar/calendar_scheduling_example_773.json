{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import datetime, timedelta\n\n# Meeting duration in minutes\nmeeting_duration = 60\n\n# Work hours boundaries (in minutes from midnight)\nwork_start = 9 * 60   # 9:00 AM = 540 minutes\nwork_end = 17 * 60    # 5:00 PM = 1020 minutes\n\n# Busy intervals for Roy, in minutes from midnight.\n# Each interval is a tuple (start, end). We assume intervals in sorted order.\nschedules = {\n    \"Monday\": [\n        (10 * 60, 11 * 60 + 30),   # 10:00 - 11:30\n        (12 * 60, 13 * 60),        # 12:00 - 13:00\n        (14 * 60, 14 * 60 + 30),   # 14:00 - 14:30\n        (15 * 60, 17 * 60)         # 15:00 - 17:00\n    ],\n    \"Tuesday\": [\n        (10 * 60 + 30, 11 * 60 + 30),  # 10:30 - 11:30\n        (12 * 60, 14 * 60 + 30),         # 12:00 - 14:30\n        (15 * 60, 15 * 60 + 30),         # 15:00 - 15:30\n        (16 * 60, 17 * 60)               # 16:00 - 17:00\n    ],\n    \"Wednesday\": [\n        (9 * 60 + 30, 11 * 60 + 30),   # 9:30 - 11:30\n        (12 * 60 + 30, 14 * 60),       # 12:30 - 14:00\n        (14 * 60 + 30, 15 * 60 + 30),  # 14:30 - 15:30\n        (16 * 60 + 30, 17 * 60)        # 16:30 - 17:00\n    ]\n}\n\n# Since Patrick is available all week, we only need to check Roy's schedule.\nwork_days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\ndef find_meeting_time():\n    for day in work_days:\n        busy_intervals = schedules.get(day, [])\n        # sort busy intervals\n        busy_intervals.sort()\n        \n        # Start at the beginning of the day\n        current_time = work_start\n        \n        # Check gap before each busy interval\n        for interval in busy_intervals:\n            interval_start, interval_end = interval\n            if interval_start - current_time >= meeting_duration:\n                # Found a gap where meeting can be scheduled\n                meeting_start = current_time\n                meeting_end = meeting_start + meeting_duration\n                return day, meeting_start, meeting_end\n            # Move current time to after this busy interval if needed\n            if current_time < interval_end:\n                current_time = interval_end\n\n        # Check gap after the last busy interval until end of work day.\n        if work_end - current_time >= meeting_duration:\n            meeting_start = current_time\n            meeting_end = meeting_start + meeting_duration\n            return day, meeting_start, meeting_end\n\n    return None, None, None\n\nday, meeting_start, meeting_end = find_meeting_time()\n\nif day is not None:\n    start_str = minutes_to_time(meeting_start)\n    end_str = minutes_to_time(meeting_end)\n    # Format output: HH:MM:HH:MM and day of week\n    print(f\"{day} {start_str}:{end_str}\")\nelse:\n    print(\"No available meeting time found within the constraints.\")\n'''",
            "count": "calendar_scheduling_example_773"
        }
    ]
}