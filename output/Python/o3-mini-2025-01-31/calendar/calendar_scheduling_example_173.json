{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import datetime, timedelta\n\n# Define a helper function to convert time string to minutes since midnight\ndef time_to_minutes(t):\n    h, m = map(int, t.split(\":\"))\n    return h * 60 + m\n\n# Define a helper function to convert minutes since midnight to time string in HH:MM format\ndef minutes_to_time(m):\n    return f\"{m//60:02d}:{m%60:02d}\"\n\n# Workday start and end (in minutes)\nworkday_start = time_to_minutes(\"09:00\")\nworkday_end   = time_to_minutes(\"17:00\")\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Busy intervals for each participant on Monday as tuples (start, end) in minutes\nbusy_jacqueline = [(time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n                   (time_to_minutes(\"11:00\"), time_to_minutes(\"11:30\")),\n                   (time_to_minutes(\"12:30\"), time_to_minutes(\"13:00\")),\n                   (time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\"))]\n\nbusy_harold = [(time_to_minutes(\"10:00\"), time_to_minutes(\"10:30\")),\n               (time_to_minutes(\"13:00\"), time_to_minutes(\"13:30\")),\n               (time_to_minutes(\"15:00\"), time_to_minutes(\"17:00\"))]\n\nbusy_arthur = [(time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n               (time_to_minutes(\"10:00\"), time_to_minutes(\"12:30\")),\n               (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")),\n               (time_to_minutes(\"15:30\"), time_to_minutes(\"17:00\"))]\n\nbusy_kelly = [(time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n              (time_to_minutes(\"10:00\"), time_to_minutes(\"11:00\")),\n              (time_to_minutes(\"11:30\"), time_to_minutes(\"12:30\")),\n              (time_to_minutes(\"14:00\"), time_to_minutes(\"15:00\")),\n              (time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\"))]\n\n# Harold does not want to meet after 13:00. So override his available workday end further for meeting.\nharold_meeting_latest = time_to_minutes(\"13:00\")\n\n# A function to compute free intervals given busy intervals and overall time bounds\ndef get_free_intervals(busy, start, end):\n    busy_sorted = sorted(busy)\n    free = []\n    current = start\n    for b_start, b_end in busy_sorted:\n        if b_start > current:\n            free.append((current, b_start))\n        current = max(current, b_end)\n    if current < end:\n        free.append((current, end))\n    return free\n\n# Compute free intervals for each participant within Monday work hours\njacqueline_free = get_free_intervals(busy_jacqueline, workday_start, workday_end)\nharold_free     = get_free_intervals(busy_harold, workday_start, min(workday_end, harold_meeting_latest))\narthur_free     = get_free_intervals(busy_arthur, workday_start, workday_end)\nkelly_free      = get_free_intervals(busy_kelly, workday_start, workday_end)\n\n# For debugging purpose, you could print each free interval if needed:\n# print(\"Jacqueline free:\", [(minutes_to_time(s), minutes_to_time(e)) for s,e in jacqueline_free])\n# print(\"Harold free:\", [(minutes_to_time(s), minutes_to_time(e)) for s,e in harold_free])\n# print(\"Arthur free:\", [(minutes_to_time(s), minutes_to_time(e)) for s,e in arthur_free])\n# print(\"Kelly free:\", [(minutes_to_time(s), minutes_to_time(e)) for s,e in kelly_free])\n\n# Function to find the intersection of two lists of intervals\ndef intersect_intervals(intervals1, intervals2):\n    i, j = 0, 0\n    intersections = []\n    while i < len(intervals1) and j < len(intervals2):\n        start1, end1 = intervals1[i]\n        start2, end2 = intervals2[j]\n        inter_start = max(start1, start2)\n        inter_end = min(end1, end2)\n        if inter_start + meeting_duration <= inter_end:\n            intersections.append((inter_start, inter_end))\n        if end1 < end2:\n            i += 1\n        else:\n            j += 1\n    return intersections\n\n# Intersect free intervals step by step for all participants.\ncommon_free = intersect_intervals(jacqueline_free, harold_free)\ncommon_free = intersect_intervals(common_free, arthur_free)\ncommon_free = intersect_intervals(common_free, kelly_free)\n\n# Now select the first interval that can accommodate the meeting duration\nproposed_time = None\nfor start, end in common_free:\n    if start + meeting_duration <= end:\n        proposed_time = (start, start + meeting_duration)\n        break\n\nif proposed_time:\n    start_time, end_time = proposed_time\n    # Meeting is scheduled on Monday\n    day_of_week = \"Monday\"\n    # Output in the specified format: HH:MM:HH:MM and day of week.\n    print(f\"{day_of_week} {minutes_to_time(start_time)}:{minutes_to_time(end_time)}\")\nelse:\n    print(\"No available meeting time found.\")\n'''",
            "count": "calendar_scheduling_example_173"
        }
    ]
}