{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef str_to_minutes(time_str):\n    \"\"\"Convert HH:MM string to minutes from midnight.\"\"\"\n    hours, minutes = map(int, time_str.split(\":\"))\n    return hours * 60 + minutes\n\ndef minutes_to_str(minutes):\n    \"\"\"Convert minutes from midnight to HH:MM format.\"\"\"\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\ndef overlaps(start1, end1, start2, end2):\n    \"\"\"Return True if [start1, end1) overlaps with [start2, end2).\"\"\"\n    return max(start1, start2) < min(end1, end2)\n\n# Define the meeting duration in minutes\nmeeting_duration = 30\n\n# Working hours for the day are normally 9:00 to 17:00,\n# but Janice prefers not to meet after 13:00 on Monday.\n# Therefore, we limit the search window to 9:00 to 13:00.\nwork_start = str_to_minutes(\"09:00\")\nwork_end   = str_to_minutes(\"13:00\")\n\n# Busy intervals for each participant on Monday.\n# Times are given as (start, end) in minutes from midnight.\nbusy = {\n    \"Christine\": [(str_to_minutes(\"09:30\"), str_to_minutes(\"10:30\")),\n                  (str_to_minutes(\"12:00\"), str_to_minutes(\"12:30\")),\n                  (str_to_minutes(\"13:00\"), str_to_minutes(\"13:30\")),\n                  (str_to_minutes(\"14:30\"), str_to_minutes(\"15:00\")),\n                  (str_to_minutes(\"16:00\"), str_to_minutes(\"16:30\"))],\n    \"Janice\":    [],  # entire day free.\n    \"Bobby\":     [(str_to_minutes(\"12:00\"), str_to_minutes(\"12:30\")),\n                  (str_to_minutes(\"14:30\"), str_to_minutes(\"15:00\"))],\n    \"Elizabeth\": [(str_to_minutes(\"09:00\"), str_to_minutes(\"09:30\")),\n                  (str_to_minutes(\"11:30\"), str_to_minutes(\"13:00\")),\n                  (str_to_minutes(\"13:30\"), str_to_minutes(\"14:00\")),\n                  (str_to_minutes(\"15:00\"), str_to_minutes(\"15:30\")),\n                  (str_to_minutes(\"16:00\"), str_to_minutes(\"17:00\"))],\n    \"Tyler\":     [(str_to_minutes(\"09:00\"), str_to_minutes(\"11:00\")),\n                  (str_to_minutes(\"12:00\"), str_to_minutes(\"12:30\")),\n                  (str_to_minutes(\"13:00\"), str_to_minutes(\"13:30\")),\n                  (str_to_minutes(\"15:30\"), str_to_minutes(\"16:00\")),\n                  (str_to_minutes(\"16:30\"), str_to_minutes(\"17:00\"))],\n    \"Edward\":    [(str_to_minutes(\"09:00\"), str_to_minutes(\"09:30\")),\n                  (str_to_minutes(\"10:00\"), str_to_minutes(\"11:00\")),\n                  (str_to_minutes(\"11:30\"), str_to_minutes(\"14:00\")),\n                  (str_to_minutes(\"14:30\"), str_to_minutes(\"15:30\")),\n                  (str_to_minutes(\"16:00\"), str_to_minutes(\"17:00\"))],\n}\n\n# Function to check if a meeting starting at 'start' and ending at 'end'\n# conflicts with any busy interval in a given schedule.\ndef is_available(start, end, busy_intervals):\n    for b_start, b_end in busy_intervals:\n        # Only consider busy intervals that fall within our search window.\n        # We check for overlap with the meeting time.\n        if overlaps(start, end, b_start, b_end):\n            return False\n    return True\n\nmeeting_found = False\nproposed_start = None\n\n# Iterate over all possible start times (in minutes) from work_start up to work_end - meeting_duration.\nfor start in range(work_start, work_end - meeting_duration + 1):\n    end = start + meeting_duration\n    # Assume meeting slot is valid unless one participant is busy.\n    slot_valid = True\n    for person, busy_intervals in busy.items():\n        if not is_available(start, end, busy_intervals):\n            slot_valid = False\n            break\n    if slot_valid:\n        proposed_start = start\n        meeting_found = True\n        break\n\nif meeting_found:\n    proposed_end = proposed_start + meeting_duration\n    meeting_time_str = f\"{minutes_to_str(proposed_start)}:{minutes_to_str(proposed_end)}\"\n    day_of_week = \"Monday\"\n    print(f\"{day_of_week} {meeting_time_str}\")\nelse:\n    print(\"No available meeting slot found.\")\n'''",
            "count": "calendar_scheduling_example_304"
        }
    ]
}