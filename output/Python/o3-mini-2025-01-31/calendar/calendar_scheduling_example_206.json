{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "15:30",
                "end_time": "16:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "15:30",
                "end_time": "16:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import datetime, timedelta\n\n# Define the meeting day and working hours (Monday 09:00 - 17:00)\nday = \"Monday\"\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define each person's busy intervals as tuples (start, end) in datetime objects.\n# Convert time strings into datetime objects for the day (we only care about the time)\ndef to_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\nbusy_times = {\n    \"Shirley\": [(to_time(\"10:30\"), to_time(\"11:00\")),\n                (to_time(\"12:00\"), to_time(\"12:30\"))],\n    \"Jacob\":   [(to_time(\"09:00\"), to_time(\"09:30\")),\n                (to_time(\"10:00\"), to_time(\"10:30\")),\n                (to_time(\"11:00\"), to_time(\"11:30\")),\n                (to_time(\"12:30\"), to_time(\"13:30\")),\n                (to_time(\"14:30\"), to_time(\"15:00\"))],\n    \"Stephen\": [(to_time(\"11:30\"), to_time(\"12:00\")),\n                (to_time(\"12:30\"), to_time(\"13:00\"))],\n    \"Margaret\": [(to_time(\"09:00\"), to_time(\"09:30\")),\n                 (to_time(\"10:30\"), to_time(\"12:30\")),\n                 (to_time(\"13:00\"), to_time(\"13:30\")),\n                 (to_time(\"15:00\"), to_time(\"15:30\")),\n                 (to_time(\"16:30\"), to_time(\"17:00\"))],\n    \"Mason\":   [(to_time(\"09:00\"), to_time(\"10:00\")),\n                (to_time(\"10:30\"), to_time(\"11:00\")),\n                (to_time(\"11:30\"), to_time(\"12:30\")),\n                (to_time(\"13:00\"), to_time(\"13:30\")),\n                (to_time(\"14:00\"), to_time(\"14:30\")),\n                (to_time(\"16:30\"), to_time(\"17:00\"))]\n}\n\n# Additional constraint for Margaret: cannot meet before 14:30 on Monday.\nmargaret_earliest = to_time(\"14:30\")\n\n# Function to check if a given time slot is free for a person.\ndef is_slot_free(person, start, end):\n    for busy_start, busy_end in busy_times[person]:\n        # If the meeting overlaps with a busy period, then return False.\n        # Overlap exists if start < busy_end and busy_start < end.\n        if start < busy_end and busy_start < end:\n            return False\n    return True\n\n# Function to check if a proposed meeting slot is free for all participants.\ndef is_slot_free_for_all(start, end):\n    for person in busy_times:\n        # For Margaret, also check the constraint that meeting start must be at or after 14:30.\n        if person == \"Margaret\" and start < margaret_earliest:\n            return False\n        if not is_slot_free(person, start, end):\n            return False\n    return True\n\n# Search for a candidate time slot\ncurrent_start = work_start\n# We only search times that are within working hours and also satisfy Margaret's preference.\nif current_start < margaret_earliest:\n    current_start = margaret_earliest\n\nfound_slot = None\nwhile current_start + meeting_duration <= work_end:\n    current_end = current_start + meeting_duration\n    if is_slot_free_for_all(current_start, current_end):\n        found_slot = (current_start, current_end)\n        break\n    # Increment by 15 minutes for candidate slots.\n    current_start += timedelta(minutes=15)\n\n# Output the result in the format \"HH:MM:HH:MM\" and the day of the week.\nif found_slot:\n    start_str = found_slot[0].strftime(\"%H:%M\")\n    end_str = found_slot[1].strftime(\"%H:%M\")\n    print(f\"{day} {start_str}:{end_str}\")\nelse:\n    print(\"No available meeting slot found.\")\n'''",
            "count": "calendar_scheduling_example_206"
        }
    ]
}