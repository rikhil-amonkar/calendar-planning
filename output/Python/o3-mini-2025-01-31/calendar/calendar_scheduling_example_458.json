{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import timedelta, datetime\n\n# Helper functions to convert between time strings and minutes from midnight\ndef time_to_minutes(time_str):\n    # time_str in \"HH:MM\"\n    h, m = map(int, time_str.split(\":\"))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h:02d}:{m:02d}\"\n\n# Each free interval is represented as (start, end) in minutes.\n# Work day is 9:00 to 17:00.\nwork_start = time_to_minutes(\"09:00\")\nwork_end   = time_to_minutes(\"17:00\")\n\n# Meeting duration in minutes\nmeeting_duration = 30\n\n# Since Wayne prefers to avoid meetings before 14:00, adjust his availability:\nwayne_free = [(max(work_start, time_to_minutes(\"14:00\")), work_end)]\n\n# For Melissa, Catherine, Gregory, Victoria, Thomas, Jennifer, \n# We subtract busy times from the work hours.\n# We'll construct the free intervals for each participant.\n\ndef invert_busy_intervals(busy_intervals, overall_start, overall_end):\n    \"\"\"\n    Given a list of busy intervals as (start, end) in minutes,\n    return free intervals in the overall range.\n    Busy intervals assumed to be sorted and non-overlapping.\n    \"\"\"\n    free = []\n    current_start = overall_start\n    for start, end in busy_intervals:\n        if start > current_start:\n            free.append((current_start, start))\n        current_start = max(current_start, end)\n    if current_start < overall_end:\n        free.append((current_start, overall_end))\n    return free\n\n# Define busy intervals for participants (all times in 24-hour HH:MM format converted to minutes)\n# For each participant the busy intervals on Monday are:\n\n# Melissa: 10:00-11:00, 12:30-14:00, 15:00-15:30\nmelissa_busy = [\n    (time_to_minutes(\"10:00\"), time_to_minutes(\"11:00\")),\n    (time_to_minutes(\"12:30\"), time_to_minutes(\"14:00\")),\n    (time_to_minutes(\"15:00\"), time_to_minutes(\"15:30\"))\n]\n\n# Catherine: free all day.\ncatherine_free = [(work_start, work_end)]\n\n# Gregory: 12:30-13:00, 15:30-16:00\ngregory_busy = [\n    (time_to_minutes(\"12:30\"), time_to_minutes(\"13:00\")),\n    (time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\"))\n]\n\n# Victoria: 9:00-9:30, 10:30-11:30, 13:00-14:00, 14:30-15:00, 15:30-16:30\nvictoria_busy = [\n    (time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n    (time_to_minutes(\"10:30\"), time_to_minutes(\"11:30\")),\n    (time_to_minutes(\"13:00\"), time_to_minutes(\"14:00\")),\n    (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")),\n    (time_to_minutes(\"15:30\"), time_to_minutes(\"16:30\"))\n]\n\n# Thomas: 10:00-12:00, 12:30-13:00, 14:30-16:00\nthomas_busy = [\n    (time_to_minutes(\"10:00\"), time_to_minutes(\"12:00\")),\n    (time_to_minutes(\"12:30\"), time_to_minutes(\"13:00\")),\n    (time_to_minutes(\"14:30\"), time_to_minutes(\"16:00\"))\n]\n\n# Jennifer: 9:00-9:30, 10:00-10:30, 11:00-13:00, 13:30-14:30, 15:00-15:30, 16:00-16:30\njennifer_busy = [\n    (time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n    (time_to_minutes(\"10:00\"), time_to_minutes(\"10:30\")),\n    (time_to_minutes(\"11:00\"), time_to_minutes(\"13:00\")),\n    (time_to_minutes(\"13:30\"), time_to_minutes(\"14:30\")),\n    (time_to_minutes(\"15:00\"), time_to_minutes(\"15:30\")),\n    (time_to_minutes(\"16:00\"), time_to_minutes(\"16:30\"))\n]\n\n# Compute free intervals for each participant who has busy intervals:\nmelissa_free = invert_busy_intervals(melissa_busy, work_start, work_end)\ngregory_free = invert_busy_intervals(gregory_busy, work_start, work_end)\nvictoria_free = invert_busy_intervals(victoria_busy, work_start, work_end)\nthomas_free = invert_busy_intervals(thomas_busy, work_start, work_end)\njennifer_free = invert_busy_intervals(jennifer_busy, work_start, work_end)\n\n# For scheduling the meeting we need to consider everyone's constraints.\n# We'll compute the intersection of all free intervals.\n# Start by listing each participants' free intervals.\nfree_intervals = [\n    wayne_free,\n    melissa_free,\n    catherine_free,\n    gregory_free,\n    victoria_free,\n    thomas_free,\n    jennifer_free\n]\n\ndef intersect_intervals(int_list1, int_list2):\n    \"\"\"Intersect two lists of intervals\"\"\"\n    result = []\n    i, j = 0, 0\n    while i < len(int_list1) and j < len(int_list2):\n        start1, end1 = int_list1[i]\n        start2, end2 = int_list2[j]\n        # Find the intersection between these two intervals:\n        intersect_start = max(start1, start2)\n        intersect_end = min(end1, end2)\n        if intersect_start < intersect_end:\n            result.append((intersect_start, intersect_end))\n        # Move forward in the list that ends first\n        if end1 < end2:\n            i += 1\n        else:\n            j += 1\n    return result\n\n# Compute the common intersection of free intervals for all participants:\ncommon_free = free_intervals[0]\nfor intervals in free_intervals[1:]:\n    common_free = intersect_intervals(common_free, intervals)\n\n# Now, from the common free intervals, find an interval that can host the meeting.\nmeeting_time = None\nfor start, end in common_free:\n    if end - start >= meeting_duration:\n        meeting_time = (start, start + meeting_duration)\n        break\n\nif meeting_time:\n    meeting_start, meeting_end = meeting_time\n    meeting_start_str = minutes_to_time(meeting_start)\n    meeting_end_str = minutes_to_time(meeting_end)\n    # Day of the week is Monday as per constraints.\n    day = \"Monday\"\n    print(f\"{meeting_start_str}:{meeting_end_str} {day}\")\nelse:\n    print(\"No common free interval found.\")\n'''",
            "count": "calendar_scheduling_example_458"
        }
    ]
}