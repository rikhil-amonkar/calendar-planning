{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef to_minutes(time_str):\n    \"\"\"Convert HH:MM string to minutes since midnight.\"\"\"\n    hours, minutes = map(int, time_str.split(\":\"))\n    return hours * 60 + minutes\n\ndef to_time_str(minutes):\n    \"\"\"Convert minutes since midnight to HH:MM format.\"\"\"\n    return f\"{minutes // 60:02d}:{minutes % 60:02d}\"\n\n# Define workday start and end in minutes\nwork_start = to_minutes(\"09:00\")\nwork_end = to_minutes(\"17:00\")\nmeeting_duration = 30  # minutes\n\n# Busy times for each participant on Monday as (start, end) in minutes\nschedules = {\n    \"Andrea\": [(\"09:30\", \"10:30\"), (\"13:30\", \"14:30\")],\n    \"Ruth\":   [(\"12:30\", \"13:00\"), (\"15:00\", \"15:30\")],\n    \"Steven\": [(\"10:00\", \"10:30\"), (\"11:00\", \"11:30\"), (\"12:00\", \"12:30\"),\n               (\"13:30\", \"14:00\"), (\"15:00\", \"16:00\")],\n    \"Grace\":  [],  # free whole day\n    \"Kyle\":   [(\"09:00\", \"09:30\"), (\"10:30\", \"12:00\"), (\"12:30\", \"13:00\"),\n               (\"13:30\", \"15:00\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Elijah\": [(\"09:00\", \"11:00\"), (\"11:30\", \"13:00\"), (\"13:30\", \"14:00\"),\n               (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Lori\":   [(\"09:00\", \"09:30\"), (\"10:00\", \"11:30\"), (\"12:00\", \"13:30\"),\n               (\"14:00\", \"16:00\"), (\"16:30\", \"17:00\")]\n}\n\ndef get_free_intervals(busy_intervals, day_start, day_end):\n    \"\"\"Given a list of busy intervals in minutes, return free intervals in the day.\"\"\"\n    # sort busy intervals by start time\n    busy_intervals = sorted([(to_minutes(s), to_minutes(e)) for s, e in busy_intervals])\n    free_intervals = []\n    current_start = day_start\n    for start, end in busy_intervals:\n        if current_start < start:\n            free_intervals.append((current_start, start))\n        current_start = max(current_start, end)\n    if current_start < day_end:\n        free_intervals.append((current_start, day_end))\n    return free_intervals\n\n# Calculate free intervals for each participant\nfree_schedules = {}\nfor person, busy_times in schedules.items():\n    free_schedules[person] = get_free_intervals(busy_times, work_start, work_end)\n\n# Function to find intersection of two lists of intervals\ndef intersect_intervals(intervals1, intervals2):\n    result = []\n    i, j = 0, 0\n    while i < len(intervals1) and j < len(intervals2):\n        # find the max start and min end\n        start = max(intervals1[i][0], intervals2[j][0])\n        end = min(intervals1[i][1], intervals2[j][1])\n        if start < end:  # valid intersection\n            result.append((start, end))\n        # move on from the interval with the smallest end time\n        if intervals1[i][1] < intervals2[j][1]:\n            i += 1\n        else:\n            j += 1\n    return result\n\n# Intersect free intervals among all participants\ncommon_free = [(work_start, work_end)]\nfor person, free_int in free_schedules.items():\n    common_free = intersect_intervals(common_free, free_int)\n    # If at any point there is no common free time, you can break (but guaranteed a solution exists)\n    if not common_free:\n        break\n\n# Find a common interval that can fit the meeting duration\nmeeting_time = None\nfor start, end in common_free:\n    if end - start >= meeting_duration:\n        meeting_time = (start, start + meeting_duration)\n        break\n\nif meeting_time:\n    meeting_start_str = to_time_str(meeting_time[0])\n    meeting_end_str = to_time_str(meeting_time[1])\n    day = \"Monday\"\n    print(f\"{day} {meeting_start_str}:{meeting_end_str}\")\nelse:\n    print(\"No common meeting time found.\")\n'''",
            "count": "calendar_scheduling_example_457"
        }
    ]
}