{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "14:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import time, timedelta, datetime\n\ndef time_to_minutes(t):\n    \"\"\"Convert a time string HH:MM to minutes from 00:00.\"\"\"\n    h, m = map(int, t.split(\":\"))\n    return h * 60 + m\n\ndef minutes_to_time_str(minutes):\n    \"\"\"Convert minutes (from 00:00) back to HH:MM string format.\"\"\"\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h:02d}:{m:02d}\"\n\ndef invert_busy(busy, work_start, work_end):\n    \"\"\"\n    Given a list of busy intervals (as tuples of start and end in minutes)\n    within the working period [work_start, work_end], return a list of free intervals.\n    \"\"\"\n    free = []\n    current = work_start\n    for interval in sorted(busy):\n        start, end = interval\n        if start > current:\n            free.append((current, start))\n        current = max(current, end)\n    if current < work_end:\n        free.append((current, work_end))\n    return free\n\ndef intersect_intervals(intervals1, intervals2):\n    \"\"\"Return the intersection of two lists of intervals.\"\"\"\n    i, j = 0, 0\n    result = []\n    while i < len(intervals1) and j < len(intervals2):\n        a_start, a_end = intervals1[i]\n        b_start, b_end = intervals2[j]\n        start = max(a_start, b_start)\n        end = min(a_end, b_end)\n        if start < end:\n            result.append((start, end))\n        if a_end < b_end:\n            i += 1\n        else:\n            j += 1\n    return result\n\ndef find_slot(free_intervals, duration):\n    \"\"\"Find a slot of at least 'duration' minutes in the list of intervals.\"\"\"\n    for start, end in free_intervals:\n        if end - start >= duration:\n            return start, start + duration\n    return None\n\n# Define working hours (in minutes from midnight)\nwork_start = time_to_minutes(\"09:00\")\nwork_end   = time_to_minutes(\"17:00\")\nmeeting_duration = 60  # minutes\n\n# Define busy schedules for each person in minutes\n# Format: { 'Day': [(start, end), ...] }\ngary_busy = {\n    \"Monday\": [(time_to_minutes(\"09:30\"), time_to_minutes(\"10:00\")),\n               (time_to_minutes(\"11:00\"), time_to_minutes(\"13:00\")),\n               (time_to_minutes(\"14:00\"), time_to_minutes(\"14:30\")),\n               (time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\"))],\n    \"Tuesday\": [(time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n                (time_to_minutes(\"10:30\"), time_to_minutes(\"11:00\")),\n                (time_to_minutes(\"14:30\"), time_to_minutes(\"16:00\"))]\n}\n\ndavid_busy = {\n    \"Monday\": [(time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n               (time_to_minutes(\"10:00\"), time_to_minutes(\"13:00\")),\n               (time_to_minutes(\"14:30\"), time_to_minutes(\"16:30\"))],\n    \"Tuesday\": [(time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n                (time_to_minutes(\"10:00\"), time_to_minutes(\"10:30\")),\n                (time_to_minutes(\"11:00\"), time_to_minutes(\"12:30\")),\n                (time_to_minutes(\"13:00\"), time_to_minutes(\"14:30\")),\n                (time_to_minutes(\"15:00\"), time_to_minutes(\"16:00\")),\n                (time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\"))]\n}\n\n# We search for a meeting slot that works for all participants.\ndays = [\"Monday\", \"Tuesday\"]\nmeeting_slot = None\nmeeting_day = None\n\nfor day in days:\n    # Calculate free intervals for each participant on this day.\n    gary_free = invert_busy(gary_busy[day], work_start, work_end)\n    david_free = invert_busy(david_busy[day], work_start, work_end)\n    \n    # Find common free intervals by intersecting their free intervals.\n    common_free = intersect_intervals(gary_free, david_free)\n    \n    # Check if any common free interval can accommodate the meeting duration.\n    slot = find_slot(common_free, meeting_duration)\n    if slot:\n        meeting_slot = slot\n        meeting_day = day\n        break\n\nif meeting_slot:\n    start_time_str = minutes_to_time_str(meeting_slot[0])\n    end_time_str = minutes_to_time_str(meeting_slot[1])\n    print(f\"{meeting_day} {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available meeting slot found.\")\n'''",
            "count": "calendar_scheduling_example_662"
        }
    ]
}