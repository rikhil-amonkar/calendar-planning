{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef time_to_minutes(t):\n    \"\"\"Convert 'HH:MM' string to minutes since midnight.\"\"\"\n    hours, minutes = map(int, t.split(\":\"))\n    return hours * 60 + minutes\n\ndef minutes_to_time(m):\n    \"\"\"Convert minutes since midnight to 'HH:MM' string.\"\"\"\n    hours = m // 60\n    minutes = m % 60\n    return f\"{hours:02d}:{minutes:02d}\"\n\ndef subtract_busy(working, busy_times):\n    \"\"\"\n    Given a working interval (start, end) and a list of busy intervals (each a tuple),\n    return a list of free intervals (as tuples) within the working period.\n    Assumes busy_times are sorted and non overlapping.\n    \"\"\"\n    free = []\n    current_start = working[0]\n    for bstart, bend in busy_times:\n        if bstart > current_start:\n            free.append((current_start, bstart))\n        current_start = max(current_start, bend)\n    if current_start < working[1]:\n        free.append((current_start, working[1]))\n    return free\n\ndef intersect_intervals(list1, list2):\n    \"\"\"Intersect two lists of intervals and return the overlapping intervals.\"\"\"\n    i, j = 0, 0\n    result = []\n    while i < len(list1) and j < len(list2):\n        start1, end1 = list1[i]\n        start2, end2 = list2[j]\n        # Find overlap\n        start_overlap = max(start1, start2)\n        end_overlap = min(end1, end2)\n        if start_overlap < end_overlap:\n            result.append((start_overlap, end_overlap))\n        # Move the pointer that ends earlier\n        if end1 < end2:\n            i += 1\n        else:\n            j += 1\n    return result\n\n# Define working hours in minutes (9:00-17:00)\nworking = (time_to_minutes(\"09:00\"), time_to_minutes(\"17:00\"))\n\n# Busy schedules (all times in minutes) for each participant on Monday:\n# Adam busy: 14:00-15:00\nadam_busy = [(time_to_minutes(\"14:00\"), time_to_minutes(\"15:00\"))]\n\n# John busy: 13:00-13:30, 14:00-14:30, 15:30-16:00, 16:30-17:00\njohn_busy = [\n    (time_to_minutes(\"13:00\"), time_to_minutes(\"13:30\")),\n    (time_to_minutes(\"14:00\"), time_to_minutes(\"14:30\")),\n    (time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\")),\n    (time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\"))\n]\n\n# Stephanie busy: 9:30-10:00, 10:30-11:00, 11:30-16:00, 16:30-17:00\nstephanie_busy = [\n    (time_to_minutes(\"09:30\"), time_to_minutes(\"10:00\")),\n    (time_to_minutes(\"10:30\"), time_to_minutes(\"11:00\")),\n    (time_to_minutes(\"11:30\"), time_to_minutes(\"16:00\")),\n    (time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\"))\n]\n\n# Anna busy: 9:30-10:00, 12:00-12:30, 13:00-15:30, 16:30-17:00\nanna_busy = [\n    (time_to_minutes(\"09:30\"), time_to_minutes(\"10:00\")),\n    (time_to_minutes(\"12:00\"), time_to_minutes(\"12:30\")),\n    (time_to_minutes(\"13:00\"), time_to_minutes(\"15:30\")),\n    (time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\"))\n]\n\n# Compute free intervals for each participant\nadam_free = subtract_busy(working, adam_busy)\njohn_free = subtract_busy(working, john_busy)\nstephanie_free = subtract_busy(working, stephanie_busy)\nanna_free = subtract_busy(working, anna_busy)\n\n# Anna prefers not to meet before 14:30. Adjust her free intervals accordingly.\npref_start = time_to_minutes(\"14:30\")\nadjusted_anna_free = []\nfor start, end in anna_free:\n    # If the interval ends before the preference start, skip it.\n    if end <= pref_start:\n        continue\n    # Adjust the start if needed.\n    adjusted_anna_free.append((max(start, pref_start), end))\nanna_free = adjusted_anna_free\n\n# Calculate the intersection of all participants' free intervals\nall_free = intersect_intervals(adam_free, john_free)\nall_free = intersect_intervals(all_free, stephanie_free)\nall_free = intersect_intervals(all_free, anna_free)\n\n# Meeting duration: 30 minutes\nmeeting_duration = 30\n\n# Find an interval that can accommodate the meeting duration\nproposed_interval = None\nfor start, end in all_free:\n    if end - start >= meeting_duration:\n        proposed_interval = (start, start + meeting_duration)\n        break\n\nif proposed_interval:\n    start_str = minutes_to_time(proposed_interval[0])\n    end_str = minutes_to_time(proposed_interval[1])\n    # Day of the week is Monday\n    print(f\"Monday {start_str}:{end_str}\")\nelse:\n    print(\"No available meeting time found.\")\n'''",
            "count": "calendar_scheduling_example_116"
        }
    ]
}