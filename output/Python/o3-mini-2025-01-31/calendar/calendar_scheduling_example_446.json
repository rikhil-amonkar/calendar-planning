{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef to_minutes(time_str):\n    \"\"\"Convert HH:MM time string to minutes since midnight.\"\"\"\n    hours, minutes = map(int, time_str.split(\":\"))\n    return hours * 60 + minutes\n\ndef to_time_str(minutes):\n    \"\"\"Convert minutes since midnight to HH:MM time string.\"\"\"\n    hours = minutes // 60\n    minutes = minutes % 60\n    return f\"{hours:02d}:{minutes:02d}\"\n\n# Workday boundaries: 09:00 to 17:00 (in minutes)\nWORK_START = to_minutes(\"09:00\")\nWORK_END = to_minutes(\"17:00\")\n\n# Precomputed free intervals (in minutes) for each participant based on their busy schedules.\n# The workday is from 09:00 (540 minutes) to 17:00 (1020 minutes).\n\nschedules = {\n    \"Megan\": [\n        (to_minutes(\"09:30\"), to_minutes(\"10:00\")),  # Free between 09:30 and 10:00\n        (to_minutes(\"11:00\"), to_minutes(\"12:00\")),  # Free between 11:00 and 12:00\n        (to_minutes(\"12:30\"), WORK_END)               # Free between 12:30 and 17:00\n    ],\n    \"Christine\": [\n        (to_minutes(\"09:30\"), to_minutes(\"11:30\")),  # Free between 09:30 and 11:30\n        (to_minutes(\"12:00\"), to_minutes(\"13:00\")),  # Free between 12:00 and 13:00\n        (to_minutes(\"14:00\"), to_minutes(\"15:30\")),  # Free between 14:00 and 15:30\n        (to_minutes(\"16:30\"), WORK_END)               # Free between 16:30 and 17:00\n    ],\n    \"Gabriel\": [\n        (WORK_START, WORK_END)                       # Free entire day\n    ],\n    \"Sara\": [\n        (WORK_START, to_minutes(\"11:30\")),           # Free between 09:00 and 11:30\n        (to_minutes(\"12:00\"), to_minutes(\"14:30\")),  # Free between 12:00 and 14:30\n        (to_minutes(\"15:00\"), WORK_END)              # Free between 15:00 and 17:00\n    ],\n    \"Bruce\": [\n        (WORK_START, to_minutes(\"09:30\")),           # Free between 09:00 and 09:30\n        (to_minutes(\"10:00\"), to_minutes(\"10:30\")),  # Free between 10:00 and 10:30\n        (to_minutes(\"12:00\"), to_minutes(\"12:30\")),  # Free between 12:00 and 12:30\n        (to_minutes(\"14:00\"), to_minutes(\"14:30\")),  # Free between 14:00 and 14:30\n        (to_minutes(\"15:00\"), to_minutes(\"15:30\")),  # Free between 15:00 and 15:30\n        (to_minutes(\"16:30\"), WORK_END)              # Free between 16:30 and 17:00\n    ],\n    \"Kathryn\": [\n        (WORK_START, to_minutes(\"10:00\")),           # Free between 09:00 and 10:00\n        (to_minutes(\"15:30\"), to_minutes(\"16:00\")),  # Free between 15:30 and 16:00\n        (to_minutes(\"16:30\"), WORK_END)              # Free between 16:30 and 17:00\n    ],\n    \"Billy\": [\n        (to_minutes(\"09:30\"), to_minutes(\"11:00\")),  # Free between 09:30 and 11:00\n        (to_minutes(\"11:30\"), to_minutes(\"12:00\")),  # Free between 11:30 and 12:00\n        (to_minutes(\"14:00\"), to_minutes(\"14:30\")),  # Free between 14:00 and 14:30\n        (to_minutes(\"15:30\"), WORK_END)              # Free between 15:30 and 17:00\n    ]\n}\n\ndef intersect_intervals(intervals1, intervals2):\n    \"\"\"Return the intersection of two lists of intervals.\"\"\"\n    i, j = 0, 0\n    result = []\n    while i < len(intervals1) and j < len(intervals2):\n        start1, end1 = intervals1[i]\n        start2, end2 = intervals2[j]\n        # Find overlap between intervals\n        start_overlap = max(start1, start2)\n        end_overlap = min(end1, end2)\n        if start_overlap < end_overlap:\n            result.append((start_overlap, end_overlap))\n        # Move to the next interval in the list that ends earlier\n        if end1 < end2:\n            i += 1\n        else:\n            j += 1\n    return result\n\n# Compute the common free intervals across all participants.\nparticipants = list(schedules.keys())\ncommon_free = schedules[participants[0]]\nfor person in participants[1:]:\n    common_free = intersect_intervals(common_free, schedules[person])\n\n# Required meeting duration in minutes (30 minutes)\nMEETING_DURATION = 30\nmeeting_slot = None\nfor start, end in common_free:\n    if end - start >= MEETING_DURATION:\n        meeting_slot = (start, start + MEETING_DURATION)\n        break\n\nif meeting_slot:\n    start_str = to_time_str(meeting_slot[0])\n    end_str = to_time_str(meeting_slot[1])\n    day = \"Monday\"\n    # Output in format: HH:MM:HH:MM and the day of the week\n    print(f\"{day} {start_str}:{end_str}\")\nelse:\n    print(\"No common meeting slot available.\")\n'''",
            "count": "calendar_scheduling_example_446"
        }
    ]
}