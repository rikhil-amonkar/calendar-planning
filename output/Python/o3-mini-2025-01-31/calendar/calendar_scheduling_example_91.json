{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "14:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import datetime, timedelta\n\ndef time_to_minutes(time_str):\n    \"\"\"Convert HH:MM to minutes since midnight.\"\"\"\n    h, m = map(int, time_str.split(\":\"))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    \"\"\"Convert minutes since midnight to HH:MM with leading zero.\"\"\"\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h:02d}:{m:02d}\"\n\ndef invert_intervals(busy_intervals, work_start, work_end):\n    \"\"\"Given busy intervals (in minutes) and work day bounds (in minutes), return free intervals.\"\"\"\n    free_intervals = []\n    current = work_start\n    for start, end in busy_intervals:\n        if current < start:\n            free_intervals.append((current, start))\n        current = max(current, end)\n    if current < work_end:\n        free_intervals.append((current, work_end))\n    return free_intervals\n\ndef intersect_intervals(list1, list2):\n    \"\"\"Intersect two lists of intervals.\"\"\"\n    i, j = 0, 0\n    intersection = []\n    while i < len(list1) and j < len(list2):\n        start1, end1 = list1[i]\n        start2, end2 = list2[j]\n        # Find overlap if any.\n        start_overlap = max(start1, start2)\n        end_overlap = min(end1, end2)\n        if start_overlap < end_overlap:\n            intersection.append((start_overlap, end_overlap))\n        # Advance the interval which finishes first.\n        if end1 < end2:\n            i += 1\n        else:\n            j += 1\n    return intersection\n\n# Work day constraints: 9:00 to 17:00\nwork_start = time_to_minutes(\"09:00\")\nwork_end   = time_to_minutes(\"17:00\")\nmeeting_duration = 60  # in minutes\n\n# Busy intervals for each participant (converted to minutes)\n# Each tuple is (start_time, end_time)\nbusy_danielle = [(time_to_minutes(\"09:00\"), time_to_minutes(\"10:00\")),\n                 (time_to_minutes(\"10:30\"), time_to_minutes(\"11:00\")),\n                 (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")),\n                 (time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\")),\n                 (time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\"))]\n\nbusy_bruce = [(time_to_minutes(\"11:00\"), time_to_minutes(\"11:30\")),\n              (time_to_minutes(\"12:30\"), time_to_minutes(\"13:00\")),\n              (time_to_minutes(\"14:00\"), time_to_minutes(\"14:30\")),\n              (time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\"))]\n\nbusy_eric = [(time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")),\n             (time_to_minutes(\"10:00\"), time_to_minutes(\"11:00\")),\n             (time_to_minutes(\"11:30\"), time_to_minutes(\"13:00\")),\n             (time_to_minutes(\"14:30\"), time_to_minutes(\"15:30\"))]\n\n# Compute free intervals for each participant by inverting their busy intervals within work hours.\nfree_danielle = invert_intervals(busy_danielle, work_start, work_end)\nfree_bruce = invert_intervals(busy_bruce, work_start, work_end)\nfree_eric = invert_intervals(busy_eric, work_start, work_end)\n\n# Intersect free intervals of all participants.\ncommon_free = intersect_intervals(free_danielle, free_bruce)\ncommon_free = intersect_intervals(common_free, free_eric)\n\n# Find the first common free interval that is at least as long as the meeting duration.\nmeeting_start = None\nfor (start, end) in common_free:\n    if end - start >= meeting_duration:\n        meeting_start = start\n        meeting_end = start + meeting_duration\n        break\n\nif meeting_start is not None:\n    meeting_time = f\"{minutes_to_time(meeting_start)}:{minutes_to_time(meeting_end)}\"\n    day_of_week = \"Monday\"\n    print(f\"{day_of_week} {meeting_time}\")\nelse:\n    print(\"No available common time slot meeting the requirements.\")\n'''",
            "count": "calendar_scheduling_example_91"
        }
    ]
}