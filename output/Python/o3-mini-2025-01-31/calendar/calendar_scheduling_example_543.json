{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import datetime, timedelta\n\n# Helper functions to convert time string to minutes and vice versa\ndef time_to_minutes(time_str):\n    \"\"\"Convert HH:MM time string to minutes since midnight.\"\"\"\n    hours, minutes = map(int, time_str.split(\":\"))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    \"\"\"Convert minutes since midnight to HH:MM time string.\"\"\"\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\ndef subtract_busy_times(work_start, work_end, busy_times):\n    \"\"\"\n    Given a working interval [work_start, work_end] and a list of busy intervals,\n    return free intervals as a list of (start, end) in minutes.\n    busy_times: list of tuples (busy_start, busy_end)\n    \"\"\"\n    free_times = []\n    current_start = work_start\n    # Sort busy times\n    busy_times.sort(key=lambda x: x[0])\n    for busy_start, busy_end in busy_times:\n        # If there's free time before this busy interval, record it.\n        if busy_start > current_start:\n            free_times.append((current_start, busy_start))\n        # Move the current start forward\n        current_start = max(current_start, busy_end)\n    if current_start < work_end:\n        free_times.append((current_start, work_end))\n    return free_times\n\ndef intersection_intervals(intervals1, intervals2):\n    \"\"\"\n    Compute the intersection intervals of two lists of intervals.\n    Each interval is a tuple (start, end).\n    Returns list of intersections that are non-empty.\n    \"\"\"\n    intersections = []\n    i, j = 0, 0\n    while i < len(intervals1) and j < len(intervals2):\n        start1, end1 = intervals1[i]\n        start2, end2 = intervals2[j]\n        # Find the overlap between the two intervals\n        start_overlap = max(start1, start2)\n        end_overlap = min(end1, end2)\n        if start_overlap < end_overlap:\n            intersections.append((start_overlap, end_overlap))\n        # Move the pointer that ends first\n        if end1 < end2:\n            i += 1\n        else:\n            j += 1\n    return intersections\n\n# Define working hours for Monday (9:00 to 17:00)\nwork_day = \"Monday\"\nwork_start = time_to_minutes(\"09:00\")\nwork_end = time_to_minutes(\"17:00\")\nmeeting_duration = 60  # in minutes\n\n# Define busy schedules for each participant\n# James busy times\njames_busy = [\n    (time_to_minutes(\"11:30\"), time_to_minutes(\"12:00\")),\n    (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\"))\n]\n\n# John busy times\njohn_busy = [\n    (time_to_minutes(\"09:30\"), time_to_minutes(\"11:00\")),\n    (time_to_minutes(\"11:30\"), time_to_minutes(\"12:00\")),\n    (time_to_minutes(\"12:30\"), time_to_minutes(\"13:30\")),\n    (time_to_minutes(\"14:30\"), time_to_minutes(\"16:30\"))\n]\n\n# Calculate free times for each participant within working hours\njames_free = subtract_busy_times(work_start, work_end, james_busy)\njohn_free = subtract_busy_times(work_start, work_end, john_busy)\n\n# Find common free intervals between James and John\ncommon_free = intersection_intervals(james_free, john_free)\n\n# Search for a common free interval that can accommodate the meeting\nmeeting_time = None\nfor start, end in common_free:\n    if end - start >= meeting_duration:\n        meeting_time = (start, start + meeting_duration)\n        break\n\nif meeting_time:\n    start_time_str = minutes_to_time(meeting_time[0])\n    end_time_str = minutes_to_time(meeting_time[1])\n    print(f\"{work_day} {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No suitable meeting time found.\")\n'''",
            "count": "calendar_scheduling_example_543"
        }
    ]
}