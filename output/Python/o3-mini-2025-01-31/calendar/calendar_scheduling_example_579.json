{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef time_to_minutes(t):\n    \"\"\"Convert time string 'HH:MM' to minutes since midnight.\"\"\"\n    hours, minutes = map(int, t.split(\":\"))\n    return hours * 60 + minutes\n\ndef minutes_to_time(m):\n    \"\"\"Convert minutes since midnight to time string 'HH:MM'.\"\"\"\n    hours = m // 60\n    minutes = m % 60\n    return f\"{hours:02d}:{minutes:02d}\"\n\ndef subtract_intervals(whole, blocks):\n    \"\"\"\n    Given a whole interval (start, end) and a list of block intervals,\n    return a list of intervals representing the free time.\n    whole: tuple of (start, end) in minutes.\n    blocks: list of tuples (start, end) in minutes.\n    \"\"\"\n    free = []\n    start_whole, end_whole = whole\n    current_start = start_whole\n    for b_start, b_end in sorted(blocks):\n        if b_start > current_start:\n            free.append((current_start, min(b_start, end_whole)))\n        current_start = max(current_start, b_end)\n        if current_start >= end_whole:\n            break\n    if current_start < end_whole:\n        free.append((current_start, end_whole))\n    return free\n\ndef intersect_intervals(intv1, intv2):\n    \"\"\"\n    Given two lists of intervals, return their intersection as a list of intervals.\n    Each interval is a tuple (start, end) in minutes.\n    \"\"\"\n    intersection = []\n    i, j = 0, 0\n    while i < len(intv1) and j < len(intv2):\n        start1, end1 = intv1[i]\n        start2, end2 = intv2[j]\n        # Find intersection between these two intervals\n        start = max(start1, start2)\n        end = min(end1, end2)\n        if start < end:\n            intersection.append((start, end))\n        # Move to next interval in the list that ends first\n        if end1 < end2:\n            i += 1\n        else:\n            j += 1\n    return intersection\n\n# Meeting details\nMEETING_DURATION = 30  # minutes\nDAY = \"Monday\"\n\n# Work hours for everyone (in minutes)\nwork_start = time_to_minutes(\"09:00\")\nwork_end = time_to_minutes(\"17:00\")\nwork_interval = (work_start, work_end)\n\n# Existing meetings in minutes\n# Christine's meetings on Monday\nchristine_meetings = [\n    (time_to_minutes(\"11:00\"), time_to_minutes(\"11:30\")),\n    (time_to_minutes(\"15:00\"), time_to_minutes(\"15:30\"))\n]\n\n# Helen's meetings on Monday (blocks)\nhelen_meetings = [\n    (time_to_minutes(\"09:30\"), time_to_minutes(\"10:30\")),\n    (time_to_minutes(\"11:00\"), time_to_minutes(\"11:30\")),\n    (time_to_minutes(\"12:00\"), time_to_minutes(\"12:30\")),\n    (time_to_minutes(\"13:30\"), time_to_minutes(\"16:00\")),\n    (time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\"))\n]\n\n# Additional constraint: Helen cannot meet on Monday after 15:00.\n# So, for Helen, adjust work interval end to 15:00.\nhelen_work_interval = (work_start, time_to_minutes(\"15:00\"))\n\n# Calculate free intervals for each participant\nchristine_free = subtract_intervals(work_interval, christine_meetings)\nhelen_free = subtract_intervals(helen_work_interval, helen_meetings)\n\n# Find intersections of free intervals between Christine and Helen\ncommon_free = intersect_intervals(christine_free, helen_free)\n\n# Now search for a free slot that can accommodate the meeting duration.\nproposed_slot = None\nfor start, end in common_free:\n    if end - start >= MEETING_DURATION:\n        proposed_slot = (start, start + MEETING_DURATION)\n        break\n\nif proposed_slot:\n    start_time = minutes_to_time(proposed_slot[0])\n    end_time   = minutes_to_time(proposed_slot[1])\n    # Output format: HH:MM:HH:MM and day of week\n    print(f\"{start_time}:{end_time} {DAY}\")\nelse:\n    print(\"No available slot found.\")\n'''",
            "count": "calendar_scheduling_example_579"
        }
    ]
}