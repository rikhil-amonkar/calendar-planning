{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef time_to_minutes(time_str):\n    # time_str format is \"HH:MM\"\n    hours, minutes = map(int, time_str.split(\":\"))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\ndef get_free_intervals(busy, work_start, work_end):\n    # busy is a list of [start, end] times in minutes, sorted by start time.\n    free = []\n    if work_start < busy[0][0]:\n        free.append([work_start, busy[0][0]])\n    for i in range(len(busy) - 1):\n        if busy[i][1] < busy[i+1][0]:\n            free.append([busy[i][1], busy[i+1][0]])\n    if busy[-1][1] < work_end:\n        free.append([busy[-1][1], work_end])\n    return free\n\ndef intersect_intervals(list1, list2):\n    i, j = 0, 0\n    result = []\n    while i < len(list1) and j < len(list2):\n        # Find the intersection between intervals list1[i] and list2[j]\n        start = max(list1[i][0], list2[j][0])\n        end = min(list1[i][1], list2[j][1])\n        if start < end:\n            result.append([start, end])\n        # Move the pointer that finishes earlier\n        if list1[i][1] < list2[j][1]:\n            i += 1\n        else:\n            j += 1\n    return result\n\ndef find_common_free_interval(free_intervals_list, duration):\n    # Start with free intervals of first participant\n    common = free_intervals_list[0]\n    for free in free_intervals_list[1:]:\n        common = intersect_intervals(common, free)\n    # Now check if one common interval can accommodate the meeting duration\n    for interval in common:\n        if interval[1] - interval[0] >= duration:\n            # Meeting can start at interval[0] and last for duration minutes.\n            return interval[0], interval[0] + duration\n    return None\n\ndef main():\n    # Define work day boundaries in minutes (9:00 to 17:00)\n    work_start = time_to_minutes(\"09:00\")\n    work_end = time_to_minutes(\"17:00\")\n    meeting_duration = 60  # in minutes\n\n    # Busy schedules for each participant (all times in \"HH:MM\")\n    # Convert them to minutes.\n    # Stephanie busy: 10:00-10:30, 16:00-16:30\n    stephanie_busy = [\n        [time_to_minutes(\"10:00\"), time_to_minutes(\"10:30\")],\n        [time_to_minutes(\"16:00\"), time_to_minutes(\"16:30\")]\n    ]\n    # Cheryl busy: 10:00-10:30, 11:30-12:00, 13:30-14:00, 16:30-17:00\n    cheryl_busy = [\n        [time_to_minutes(\"10:00\"), time_to_minutes(\"10:30\")],\n        [time_to_minutes(\"11:30\"), time_to_minutes(\"12:00\")],\n        [time_to_minutes(\"13:30\"), time_to_minutes(\"14:00\")],\n        [time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\")]\n    ]\n    # Bradley busy: 9:30-10:00, 10:30-11:30, 13:30-14:00, 14:30-15:00, 15:30-17:00\n    bradley_busy = [\n        [time_to_minutes(\"09:30\"), time_to_minutes(\"10:00\")],\n        [time_to_minutes(\"10:30\"), time_to_minutes(\"11:30\")],\n        [time_to_minutes(\"13:30\"), time_to_minutes(\"14:00\")],\n        [time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")],\n        [time_to_minutes(\"15:30\"), time_to_minutes(\"17:00\")]\n    ]\n    # Steven busy: 9:00-12:00, 13:00-13:30, 14:30-17:00\n    steven_busy = [\n        [time_to_minutes(\"09:00\"), time_to_minutes(\"12:00\")],\n        [time_to_minutes(\"13:00\"), time_to_minutes(\"13:30\")],\n        [time_to_minutes(\"14:30\"), time_to_minutes(\"17:00\")]\n    ]\n\n    # For each person, calculate the free intervals within the work day.\n    stephanie_free = get_free_intervals(stephanie_busy, work_start, work_end)\n    cheryl_free = get_free_intervals(cheryl_busy, work_start, work_end)\n    bradley_free = get_free_intervals(bradley_busy, work_start, work_end)\n    steven_free = get_free_intervals(steven_busy, work_start, work_end)\n\n    # Combine all free intervals into a list\n    free_intervals_list = [stephanie_free, cheryl_free, bradley_free, steven_free]\n\n    meeting_slot = find_common_free_interval(free_intervals_list, meeting_duration)\n    if meeting_slot:\n        start_time = minutes_to_time(meeting_slot[0])\n        end_time = minutes_to_time(meeting_slot[1])\n        day = \"Monday\"\n        # Output in the format: Day and HH:MM:HH:MM (start:end)\n        print(f\"{day} {{{start_time}:{end_time}}}\")\n    else:\n        print(\"No common free interval found for the meeting duration.\")\n\nif __name__ == \"__main__\":\n    main()\n'''",
            "count": "calendar_scheduling_example_114"
        }
    ]
}