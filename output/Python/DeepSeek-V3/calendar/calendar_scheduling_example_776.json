{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "13:30"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time():\n    # Define work hours and days to consider\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    days = ['Monday', 'Tuesday', 'Wednesday']\n    \n    # Define participants' schedules and constraints\n    john_schedule = {\n        'Monday': [],\n        'Tuesday': [],\n        'Wednesday': []\n    }\n    \n    jennifer_schedule = {\n        'Monday': [(9*60, 11*60), (11*60 + 30, 13*60), (13*60 + 30, 14*60 + 30), (15*60, 17*60)],\n        'Tuesday': [(9*60, 11*60 + 30), (12*60, 17*60)],\n        'Wednesday': [(9*60, 11*60 + 30), (12*60, 12*60 + 30), (13*60, 14*60), (14*60 + 30, 16*60), (16*60 + 30, 17*60)]\n    }\n    \n    # John's constraints: avoid Monday after 14:30, avoid Tuesday and Wednesday\n    john_constraints = {\n        'Monday': (work_start, 14*60 + 30),\n        'Tuesday': None,  # No available time due to constraint\n        'Wednesday': None  # No available time due to constraint\n    }\n    \n    meeting_duration = 30  # minutes\n    \n    # Iterate through each day to find a suitable time\n    for day in days:\n        if john_constraints[day] is None:\n            continue  # Skip days John cannot attend\n        \n        # Get John's available time for the day\n        john_available_start, john_available_end = john_constraints[day]\n        \n        # Get Jennifer's busy times for the day\n        jennifer_busy = jennifer_schedule[day]\n        \n        # Find Jennifer's free slots within work hours\n        jennifer_free = []\n        prev_end = work_start\n        for start, end in sorted(jennifer_busy):\n            if start > prev_end:\n                jennifer_free.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        if prev_end < work_end:\n            jennifer_free.append((prev_end, work_end))\n        \n        # Find overlapping slots between John and Jennifer\n        for j_start, j_end in jennifer_free:\n            # Intersect with John's available time\n            slot_start = max(j_start, john_available_start)\n            slot_end = min(j_end, john_available_end)\n            \n            if slot_end - slot_start >= meeting_duration:\n                # Found a suitable slot\n                meeting_start = slot_start\n                meeting_end = meeting_start + meeting_duration\n                \n                # Convert minutes back to HH:MM format\n                def format_time(minutes):\n                    hours = minutes // 60\n                    mins = minutes % 60\n                    return f\"{hours:02d}:{mins:02d}\"\n                \n                time_range = f\"{format_time(meeting_start)}:{format_time(meeting_end)}\"\n                return day, time_range\n    \n    return None, None  # No suitable time found (though problem states there is one)\n\nday, time_range = find_meeting_time()\nprint(f\"{day}: {time_range}\")\n```",
            "count": "calendar_scheduling_example_776"
        }
    ]
}