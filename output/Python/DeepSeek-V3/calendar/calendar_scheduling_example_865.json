{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom typing import List, Dict, Tuple\n\ndef find_meeting_time(\n    participants: Dict[str, Dict[str, List[Tuple[str, str]]]],\n    days: List[str],\n    work_hours: Tuple[str, str],\n    duration: int,\n    earliest: bool = True\n) -> Tuple[str, str]:\n    \"\"\"\n    Find a meeting time that fits all participants' schedules.\n    \n    Args:\n        participants: Dictionary of participants and their busy times.\n        days: List of days to consider (e.g., [\"Monday\", \"Tuesday\"]).\n        work_hours: Tuple of work hours (e.g., (\"9:00\", \"17:00\")).\n        duration: Duration of the meeting in minutes.\n        earliest: If True, prioritize the earliest possible time.\n    \n    Returns:\n        Tuple of (day, time_range) where time_range is \"HH:MM:HH:MM\".\n    \"\"\"\n    # Parse work hours\n    work_start = convert_time_to_minutes(work_hours[0])\n    work_end = convert_time_to_minutes(work_hours[1])\n    \n    for day in days:\n        # Collect all busy intervals for the day\n        busy_intervals = []\n        for person in participants.values():\n            if day in person:\n                for start, end in person[day]:\n                    busy_start = convert_time_to_minutes(start)\n                    busy_end = convert_time_to_minutes(end)\n                    busy_intervals.append((busy_start, busy_end))\n        \n        # Sort busy intervals by start time\n        busy_intervals.sort()\n        \n        # Find free slots\n        free_slots = []\n        prev_end = work_start\n        \n        for start, end in busy_intervals:\n            if start > prev_end:\n                free_slots.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        \n        if prev_end < work_end:\n            free_slots.append((prev_end, work_end))\n        \n        # Check each free slot for availability\n        for start, end in free_slots:\n            if end - start >= duration:\n                meeting_start = start if earliest else end - duration\n                meeting_end = meeting_start + duration\n                time_range = (\n                    f\"{convert_minutes_to_time(meeting_start)}:\"\n                    f\"{convert_minutes_to_time(meeting_end)}\"\n                )\n                return (day, time_range)\n    \n    return (\"\", \"\")\n\ndef convert_time_to_minutes(time_str: str) -> int:\n    \"\"\"Convert time string (HH:MM) to minutes since midnight.\"\"\"\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes: int) -> str:\n    \"\"\"Convert minutes since midnight to time string (HH:MM).\"\"\"\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\n# Define participants' schedules\nparticipants = {\n    \"Megan\": {\n        \"Monday\": [(\"13:00\", \"13:30\"), (\"14:00\", \"15:30\")],\n        \"Tuesday\": [(\"9:00\", \"9:30\"), (\"12:00\", \"12:30\"), (\"16:00\", \"17:00\")],\n        \"Wednesday\": [(\"9:30\", \"10:00\"), (\"10:30\", \"11:30\"), (\"12:30\", \"14:00\"), (\"16:00\", \"16:30\")],\n        \"Thursday\": [(\"13:30\", \"14:30\"), (\"15:00\", \"15:30\")],\n    },\n    \"Daniel\": {\n        \"Monday\": [(\"10:00\", \"11:30\"), (\"12:30\", \"15:00\")],\n        \"Tuesday\": [(\"9:00\", \"10:00\"), (\"10:30\", \"17:00\")],\n        \"Wednesday\": [(\"9:00\", \"10:00\"), (\"10:30\", \"11:30\"), (\"12:00\", \"17:00\")],\n        \"Thursday\": [(\"9:00\", \"12:00\"), (\"12:30\", \"14:30\"), (\"15:00\", \"15:30\"), (\"16:00\", \"17:00\")],\n    },\n}\n\n# Define meeting constraints\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\nwork_hours = (\"9:00\", \"17:00\")\nduration = 60  # minutes\n\n# Find the earliest meeting time\nday, time_range = find_meeting_time(participants, days, work_hours, duration, earliest=True)\n\n# Output the result\nprint(f\"{day}: {time_range}\")\n```",
            "count": "calendar_scheduling_example_865"
        }
    ]
}