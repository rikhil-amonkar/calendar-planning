{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time():\n    # Define work hours and meeting duration\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n    meeting_duration = 30  # minutes\n\n    # Nicole's schedule and preferences\n    nicole_busy = [\n        (9 * 60, 10 * 60),    # 9:00-10:00\n        (10 * 60 + 30, 16 * 60 + 30)  # 10:30-16:30\n    ]\n    nicole_preferred_start = 16 * 60  # 16:00\n\n    # Judy is free all day, so only Nicole's schedule matters\n    potential_slots = []\n\n    # Check time after Nicole's last meeting and before work ends\n    last_busy_end = nicole_busy[-1][1]\n    if last_busy_end + meeting_duration <= work_end:\n        potential_slots.append((last_busy_end, last_busy_end + meeting_duration))\n\n    # Check if preferred time is available (after 16:00)\n    if nicole_preferred_start + meeting_duration <= work_end:\n        # Check if preferred time is not during a busy slot\n        preferred_available = True\n        for start, end in nicole_busy:\n            if (nicole_preferred_start < end and nicole_preferred_start + meeting_duration > start):\n                preferred_available = False\n                break\n        if preferred_available:\n            potential_slots.insert(0, (nicole_preferred_start, nicole_preferred_start + meeting_duration))\n\n    # Select the best available slot (preferred first, then others)\n    if potential_slots:\n        best_slot = potential_slots[0]\n        start_hour = best_slot[0] // 60\n        start_min = best_slot[0] % 60\n        end_hour = best_slot[1] // 60\n        end_min = best_slot[1] % 60\n        print(f\"{start_hour:02d}:{start_min:02d}:{end_hour:02d}:{end_min:02d}\")\n        print(\"Monday\")\n    else:\n        print(\"No available time slot found.\")\n\nfind_meeting_time()\n```",
            "count": "calendar_scheduling_example_548"
        }
    ]
}