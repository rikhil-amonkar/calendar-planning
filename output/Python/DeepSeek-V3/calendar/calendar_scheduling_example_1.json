{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:30",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "14:30",
                "end_time": "15:00"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time(participants_schedules, preferences, duration, work_hours_start, work_hours_end):\n    # Convert all time strings to minutes since 9:00 (work_hours_start)\n    def time_to_minutes(time_str):\n        hh, mm = map(int, time_str.split(':'))\n        return (hh - 9) * 60 + mm  # 9:00 is 0 minutes\n    \n    def minutes_to_time(minutes):\n        hh = 9 + (minutes // 60)\n        mm = minutes % 60\n        return f\"{hh:02d}:{mm:02d}\"\n    \n    work_start = time_to_minutes(work_hours_start)\n    work_end = time_to_minutes(work_hours_end)\n    \n    # Collect all busy intervals for each participant\n    busy_intervals = []\n    for participant, schedules in participants_schedules.items():\n        for start, end in schedules:\n            busy_start = time_to_minutes(start)\n            busy_end = time_to_minutes(end)\n            busy_intervals.append((busy_start, busy_end))\n    \n    # Add preference constraints as busy intervals\n    for participant, pref in preferences.items():\n        if pref.get('avoid_after', None):\n            avoid_after = time_to_minutes(pref['avoid_after'])\n            busy_intervals.append((avoid_after, work_end))\n    \n    # Sort all busy intervals by start time\n    busy_intervals.sort()\n    \n    # Find all free intervals\n    free_intervals = []\n    prev_end = work_start\n    for start, end in busy_intervals:\n        if start > prev_end:\n            free_intervals.append((prev_end, start))\n        prev_end = max(prev_end, end)\n    if prev_end < work_end:\n        free_intervals.append((prev_end, work_end))\n    \n    # Find the first free interval that can accommodate the meeting\n    for start, end in free_intervals:\n        if end - start >= duration:\n            meeting_start = start\n            meeting_end = meeting_start + duration\n            return (minutes_to_time(meeting_start), minutes_to_time(meeting_end))\n    \n    return None\n\n# Define the participants' schedules\nparticipants_schedules = {\n    'Raymond': [('9:00', '9:30'), ('11:30', '12:00'), ('13:00', '13:30'), ('15:00', '15:30')],\n    'Billy': [('10:00', '10:30'), ('12:00', '13:00'), ('16:30', '17:00')],\n    'Donald': [('9:00', '9:30'), ('10:00', '11:00'), ('12:00', '13:00'), ('14:00', '14:30'), ('16:00', '17:00')]\n}\n\n# Define preferences\npreferences = {\n    'Billy': {'avoid_after': '15:00'}\n}\n\n# Meeting duration in minutes (30 minutes)\nduration = 30\n\n# Work hours\nwork_hours_start = '9:00'\nwork_hours_end = '17:00'\n\n# Find the meeting time\nmeeting_time = find_meeting_time(participants_schedules, preferences, duration, work_hours_start, work_hours_end)\n\n# Output the result\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f\"{{{start_time}:{end_time}}} Monday\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_1"
        }
    ]
}