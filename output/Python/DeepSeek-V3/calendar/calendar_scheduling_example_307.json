{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time(participants_schedules, work_hours_start, work_hours_end, meeting_duration_minutes):\n    # Convert work hours to minutes since midnight for easier calculation\n    work_start = work_hours_start[0] * 60 + work_hours_start[1]\n    work_end = work_hours_end[0] * 60 + work_hours_end[1]\n    \n    # Initialize the free slots as the entire work day\n    free_slots = [(work_start, work_end)]\n    \n    # Process each participant's schedule to find common free slots\n    for schedule in participants_schedules:\n        busy_slots = []\n        for busy in schedule:\n            start = busy[0] * 60 + busy[1]\n            end = busy[2] * 60 + busy[3]\n            busy_slots.append((start, end))\n        \n        # Sort the busy slots by start time\n        busy_slots.sort()\n        \n        # Merge overlapping or adjacent busy slots\n        merged_busy = []\n        for busy in busy_slots:\n            if not merged_busy:\n                merged_busy.append(busy)\n            else:\n                last_start, last_end = merged_busy[-1]\n                current_start, current_end = busy\n                if current_start <= last_end:\n                    new_end = max(last_end, current_end)\n                    merged_busy[-1] = (last_start, new_end)\n                else:\n                    merged_busy.append(busy)\n        \n        # Subtract busy slots from free slots\n        new_free_slots = []\n        for free_start, free_end in free_slots:\n            current_free_start = free_start\n            for busy_start, busy_end in merged_busy:\n                if busy_start > current_free_start:\n                    new_free_slots.append((current_free_start, busy_start))\n                current_free_start = max(current_free_start, busy_end)\n            if current_free_start < free_end:\n                new_free_slots.append((current_free_start, free_end))\n        free_slots = new_free_slots\n    \n    # Find the first free slot that can accommodate the meeting\n    for slot in free_slots:\n        start, end = slot\n        duration = end - start\n        if duration >= meeting_duration_minutes:\n            meeting_start = start\n            meeting_end = meeting_start + meeting_duration_minutes\n            return (meeting_start, meeting_end)\n    \n    return None\n\ndef main():\n    # Define participants' schedules in HH:MM format converted to tuples (HH, MM, HH, MM)\n    participants_schedules = [\n        # Stephen's busy times: 10:00-10:30, 12:00-12:30\n        [(10, 0, 10, 30), (12, 0, 12, 30)],\n        # Brittany's busy times: 11:00-11:30, 13:30-14:00, 15:30-16:00, 16:30-17:00\n        [(11, 0, 11, 30), (13, 30, 14, 0), (15, 30, 16, 0), (16, 30, 17, 0)],\n        # Dorothy's busy times: 9:00-9:30, 10:00-10:30, 11:00-12:30, 13:00-15:00, 15:30-17:00\n        [(9, 0, 9, 30), (10, 0, 10, 30), (11, 0, 12, 30), (13, 0, 15, 0), (15, 30, 17, 0)],\n        # Rebecca's busy times: 9:30-10:30, 11:00-11:30, 12:00-12:30, 13:00-17:00\n        [(9, 30, 10, 30), (11, 0, 11, 30), (12, 0, 12, 30), (13, 0, 17, 0)],\n        # Jordan's busy times: 9:00-9:30, 10:00-11:00, 11:30-12:00, 13:00-15:00, 15:30-16:30\n        [(9, 0, 9, 30), (10, 0, 11, 0), (11, 30, 12, 0), (13, 0, 15, 0), (15, 30, 16, 30)]\n    ]\n    \n    # Work hours: 9:00 to 17:00\n    work_hours_start = (9, 0)\n    work_hours_end = (17, 0)\n    \n    # Meeting duration: 30 minutes\n    meeting_duration_minutes = 30\n    \n    # Find the meeting time\n    meeting_time = find_meeting_time(participants_schedules, work_hours_start, work_hours_end, meeting_duration_minutes)\n    \n    if meeting_time:\n        start_min, end_min = meeting_time\n        start_hh = start_min // 60\n        start_mm = start_min % 60\n        end_hh = end_min // 60\n        end_mm = end_min % 60\n        print(f\"{start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\")\n        print(\"Monday\")\n    else:\n        print(\"No suitable time found\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_307"
        }
    ]
}