{
    "0shot": [
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": "15:30",
                "end_time": "16:00"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "15:30",
                "end_time": "16:00"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time():\n    # Define work hours and days\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    days = ['Monday', 'Tuesday']\n    \n    # Harold's blocked times in minutes since midnight for each day\n    harold_blocked = {\n        'Monday': [\n            (9 * 60, 10 * 60),      # 9:00-10:00\n            (10 * 60 + 30, 17 * 60) # 10:30-17:00\n        ],\n        'Tuesday': [\n            (9 * 60, 9 * 60 + 30),      # 9:00-9:30\n            (10 * 60 + 30, 11 * 60 + 30), # 10:30-11:30\n            (12 * 60 + 30, 13 * 60 + 30), # 12:30-13:30\n            (14 * 60 + 30, 15 * 60 + 30), # 14:30-15:30\n            (16 * 60, 17 * 60)            # 16:00-17:00\n        ]\n    }\n    \n    # Harold's preferences: avoid Monday and Tuesday before 14:30\n    preferred_day = 'Tuesday'\n    preferred_time = 14 * 60 + 30  # 14:30\n    \n    meeting_duration = 30  # minutes\n    \n    # Check preferred day and time first (Tuesday after 14:30)\n    if preferred_day == 'Tuesday':\n        # Find gaps on Tuesday after 14:30\n        blocked_times = harold_blocked['Tuesday']\n        # Add work hours as boundaries\n        blocked_times_sorted = sorted(blocked_times + [(work_start, work_start), (work_end, work_end)])\n        \n        # Iterate through blocked times to find a gap\n        for i in range(len(blocked_times_sorted) - 1):\n            current_end = blocked_times_sorted[i][1]\n            next_start = blocked_times_sorted[i + 1][0]\n            if current_end >= preferred_time and next_start - current_end >= meeting_duration:\n                start_time = current_end\n                end_time = start_time + meeting_duration\n                return 'Tuesday', f\"{format_time(start_time)}:{format_time(end_time)}\"\n    \n    # If preferred time not available, check other times\n    for day in days:\n        if day == 'Monday' and preferred_day == 'Tuesday':\n            continue  # skip Monday if Harold prefers Tuesday\n        \n        blocked_times = harold_blocked[day]\n        blocked_times_sorted = sorted(blocked_times + [(work_start, work_start), (work_end, work_end)])\n        \n        for i in range(len(blocked_times_sorted) - 1):\n            current_end = blocked_times_sorted[i][1]\n            next_start = blocked_times_sorted[i + 1][0]\n            if next_start - current_end >= meeting_duration:\n                start_time = current_end\n                end_time = start_time + meeting_duration\n                # Check Harold's preference for Tuesday before 14:30\n                if day == 'Tuesday' and end_time <= preferred_time:\n                    continue  # skip if before 14:30 on Tuesday\n                return day, f\"{format_time(start_time)}:{format_time(end_time)}\"\n    \n    return None, \"00:00:00:00\"  # fallback (shouldn't reach here per problem statement)\n\ndef format_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\nday, time_range = find_meeting_time()\nprint(f\"{day}, {time_range}\")\n```",
            "count": "calendar_scheduling_example_625"
        }
    ]
}