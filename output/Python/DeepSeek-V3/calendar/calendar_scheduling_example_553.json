{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time():\n    # Define work hours\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n    meeting_duration = 30  # minutes\n\n    # Convert blocked times to minutes since midnight\n    eric_blocked = [\n        (12 * 60, 13 * 60),  # 12:00-13:00\n        (14 * 60, 15 * 60)   # 14:00-15:00\n    ]\n    henry_blocked = [\n        (9 * 60 + 30, 10 * 60),    # 9:30-10:00\n        (10 * 60 + 30, 11 * 60),   # 10:30-11:00\n        (11 * 60 + 30, 12 * 60 + 30),  # 11:30-12:30\n        (13 * 60, 13 * 60 + 30),    # 13:00-13:30\n        (14 * 60 + 30, 15 * 60),   # 14:30-15:00\n        (16 * 60, 17 * 60)          # 16:00-17:00\n    ]\n    henry_preference_end = 10 * 60  # Prefers not to meet after 10:00\n\n    # Combine all blocked times for both participants\n    all_blocked = []\n    for block in eric_blocked:\n        all_blocked.append(('Eric', block[0], block[1]))\n    for block in henry_blocked:\n        all_blocked.append(('Henry', block[0], block[1]))\n    # Sort blocked times by start time\n    all_blocked.sort(key=lambda x: x[1])\n\n    # Find available slots before Henry's preference end time\n    current_time = work_start\n    for block in all_blocked:\n        start, end = block[1], block[2]\n        if start > current_time:\n            available_start = current_time\n            available_end = min(start, henry_preference_end)\n            if available_end - available_start >= meeting_duration:\n                # Found a suitable slot\n                meeting_start = available_start\n                meeting_end = meeting_start + meeting_duration\n                # Format the time as HH:MM:HH:MM\n                start_hh = meeting_start // 60\n                start_mm = meeting_start % 60\n                end_hh = meeting_end // 60\n                end_mm = meeting_end % 60\n                print(f\"{start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\")\n                print(\"Monday\")\n                return\n        current_time = max(current_time, end)\n    \n    # Check after current_time but before henry_preference_end\n    if henry_preference_end - current_time >= meeting_duration:\n        meeting_start = current_time\n        meeting_end = meeting_start + meeting_duration\n        start_hh = meeting_start // 60\n        start_mm = meeting_start % 60\n        end_hh = meeting_end // 60\n        end_mm = meeting_end % 60\n        print(f\"{start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\")\n        print(\"Monday\")\n        return\n    \n    # If no slot found before preference, look after (even though Henry prefers not to)\n    current_time = work_start\n    for block in all_blocked:\n        start, end = block[1], block[2]\n        if start > current_time:\n            available_start = current_time\n            available_end = start\n            if available_end - available_start >= meeting_duration:\n                # Found a suitable slot\n                meeting_start = available_start\n                meeting_end = meeting_start + meeting_duration\n                # Format the time as HH:MM:HH:MM\n                start_hh = meeting_start // 60\n                start_mm = meeting_start % 60\n                end_hh = meeting_end // 60\n                end_mm = meeting_end % 60\n                print(f\"{start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\")\n                print(\"Monday\")\n                return\n        current_time = max(current_time, end)\n    \n    # Check after last blocked time\n    if work_end - current_time >= meeting_duration:\n        meeting_start = current_time\n        meeting_end = meeting_start + meeting_duration\n        start_hh = meeting_start // 60\n        start_mm = meeting_start % 60\n        end_hh = meeting_end // 60\n        end_mm = meeting_end % 60\n        print(f\"{start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\")\n        print(\"Monday\")\n        return\n    \n    print(\"No suitable time found.\")\n\nfind_meeting_time()\n```",
            "count": "calendar_scheduling_example_553"
        }
    ]
}