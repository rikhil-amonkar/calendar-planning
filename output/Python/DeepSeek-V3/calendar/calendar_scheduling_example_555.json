{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time():\n    # Define work hours and meeting duration\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n    meeting_duration = 30  # minutes\n\n    # Randy's blocked times in minutes (start, end)\n    randy_blocked = [\n        (9 * 60, 10 * 60 + 30),  # 9:00-10:30\n        (11 * 60, 15 * 60 + 30), # 11:00-15:30\n        (16 * 60, 17 * 60)        # 16:00-17:00\n    ]\n\n    # Evelyn's constraint: no meetings after 13:00\n    evelyn_max_time = 13 * 60  # 13:00 in minutes\n\n    # Find available slots for Randy (inverted blocked times)\n    randy_available = []\n    previous_end = work_start\n    for start, end in sorted(randy_blocked):\n        if start > previous_end:\n            randy_available.append((previous_end, start))\n        previous_end = max(previous_end, end)\n    if previous_end < work_end:\n        randy_available.append((previous_end, work_end))\n\n    # Filter Randy's available slots by Evelyn's constraints\n    possible_slots = []\n    for start, end in randy_available:\n        # Adjust slot to end by 13:00 for Evelyn\n        slot_end = min(end, evelyn_max_time)\n        if slot_end - start >= meeting_duration:\n            possible_slots.append((start, slot_end))\n\n    # Select the earliest possible slot\n    if possible_slots:\n        chosen_start = possible_slots[0][0]\n        chosen_end = chosen_start + meeting_duration\n        # Format the time as HH:MM:HH:MM\n        start_str = f\"{chosen_start // 60:02d}:{chosen_start % 60:02d}\"\n        end_str = f\"{chosen_end // 60:02d}:{chosen_end % 60:02d}\"\n        print(f\"{start_str}:{end_str}\")\n        print(\"Monday\")\n    else:\n        print(\"No available time slot found.\")\n\nfind_meeting_time()\n```",
            "count": "calendar_scheduling_example_555"
        }
    ]
}