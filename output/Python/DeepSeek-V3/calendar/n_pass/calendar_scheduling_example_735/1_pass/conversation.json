[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Ronald and Amber for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nRonald has blocked their calendar on Monday during 10:30 to 11:00, 12:00 to 12:30, 15:30 to 16:00, Tuesday during 9:00 to 9:30, 12:00 to 12:30, 15:30 to 16:30, Wednesday during 9:30 to 10:30, 11:00 to 12:00, 12:30 to 13:00, 13:30 to 14:00, 16:30 to 17:00; \nAmber has blocked their calendar on Monday during 9:00 to 9:30, 10:00 to 10:30, 11:30 to 12:00, 12:30 to 14:00, 14:30 to 15:00, 15:30 to 17:00, Tuesday during 9:00 to 9:30, 10:00 to 11:30, 12:00 to 12:30, 13:30 to 15:30, 16:30 to 17:00, Wednesday during 9:00 to 9:30, 10:00 to 10:30, 11:00 to 13:30, 15:00 to 15:30; \n\nThe group would like to meet at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom typing import List, Dict, Tuple\n\ndef parse_time(time_str: str) -> int:\n    \"\"\"Convert time string in HH:MM format to minutes since 9:00.\"\"\"\n    hh, mm = map(int, time_str.split(':'))\n    return (hh - 9) * 60 + mm\n\ndef format_time(minutes: int) -> str:\n    \"\"\"Convert minutes since 9:00 back to HH:MM format.\"\"\"\n    hh = 9 + minutes // 60\n    mm = minutes % 60\n    return f\"{hh:02d}:{mm:02d}\"\n\ndef find_earliest_meeting_slot(\n    participants: List[Dict[str, List[Tuple[str, str]]]],\n    days: List[str],\n    duration: int,\n    work_hours: Tuple[str, str]\n) -> Tuple[str, str]:\n    \"\"\"Find the earliest available meeting slot for all participants.\"\"\"\n    work_start = parse_time(work_hours[0])\n    work_end = parse_time(work_hours[1])\n    \n    for day in days:\n        # Collect all busy intervals for the day\n        busy_intervals = []\n        for participant in participants:\n            if day in participant:\n                for start, end in participant[day]:\n                    busy_intervals.append((parse_time(start), parse_time(end)))\n        \n        # Sort and merge overlapping intervals\n        if not busy_intervals:\n            return day, f\"{work_hours[0]}:{format_time(parse_time(work_hours[0]) + duration)}\"\n        \n        busy_intervals.sort()\n        merged = [busy_intervals[0]]\n        for current in busy_intervals[1:]:\n            last = merged[-1]\n            if current[0] <= last[1]:\n                merged[-1] = (last[0], max(last[1], current[1]))\n            else:\n                merged.append(current)\n        \n        # Check available slots\n        prev_end = work_start\n        for start, end in merged:\n            if start - prev_end >= duration:\n                return day, f\"{format_time(prev_end)}:{format_time(prev_end + duration)}\"\n            prev_end = max(prev_end, end)\n        \n        if work_end - prev_end >= duration:\n            return day, f\"{format_time(prev_end)}:{format_time(prev_end + duration)}\"\n    \n    return None, None\n\n# Define participants' schedules\nronald_schedule = {\n    \"Monday\": [(\"10:30\", \"11:00\"), (\"12:00\", \"12:30\"), (\"15:30\", \"16:00\")],\n    \"Tuesday\": [(\"9:00\", \"9:30\"), (\"12:00\", \"12:30\"), (\"15:30\", \"16:30\")],\n    \"Wednesday\": [(\"9:30\", \"10:30\"), (\"11:00\", \"12:00\"), (\"12:30\", \"13:00\"), (\"13:30\", \"14:00\"), (\"16:30\", \"17:00\")],\n}\n\namber_schedule = {\n    \"Monday\": [(\"9:00\", \"9:30\"), (\"10:00\", \"10:30\"), (\"11:30\", \"12:00\"), (\"12:30\", \"14:00\"), (\"14:30\", \"15:00\"), (\"15:30\", \"17:00\")],\n    \"Tuesday\": [(\"9:00\", \"9:30\"), (\"10:00\", \"11:30\"), (\"12:00\", \"12:30\"), (\"13:30\", \"15:30\"), (\"16:30\", \"17:00\")],\n    \"Wednesday\": [(\"9:00\", \"9:30\"), (\"10:00\", \"10:30\"), (\"11:00\", \"13:30\"), (\"15:00\", \"15:30\")],\n}\n\nparticipants = [ronald_schedule, amber_schedule]\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\"]\nduration = 30  # minutes\nwork_hours = (\"9:00\", \"17:00\")\n\nday, time_slot = find_earliest_meeting_slot(participants, days, duration, work_hours)\nprint(f\"{day}: {time_slot}\")\n```"
    }
]