[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Betty and Scott for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday, Wednesday or Thursday. \n\nHere are the existing schedules for everyone during the days: \nBetty is busy on Monday during 10:00 to 10:30, 13:30 to 14:00, 15:00 to 15:30, 16:00 to 16:30, Tuesday during 9:00 to 9:30, 11:30 to 12:00, 12:30 to 13:00, 13:30 to 14:00, 16:30 to 17:00, Wednesday during 9:30 to 10:30, 13:00 to 13:30, 14:00 to 14:30, Thursday during 9:30 to 10:00, 11:30 to 12:00, 14:00 to 14:30, 15:00 to 15:30, 16:30 to 17:00; \nScott is busy on Monday during 9:30 to 15:00, 15:30 to 16:00, 16:30 to 17:00, Tuesday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 12:00, 12:30 to 13:30, 14:00 to 15:00, 16:00 to 16:30, Wednesday during 9:30 to 12:30, 13:00 to 13:30, 14:00 to 14:30, 15:00 to 15:30, 16:00 to 16:30, Thursday during 9:00 to 9:30, 10:00 to 10:30, 11:00 to 12:00, 12:30 to 13:00, 15:00 to 16:00, 16:30 to 17:00; \n\nBetty can not meet on Monday. Tuesday. Thursday before 15:00. Scott would like to avoid more meetings on Wednesday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom typing import List, Dict, Tuple\n\ndef schedule_meeting(participants: List[Dict], days: List[str], work_hours: Tuple[str, str], duration: int) -> Tuple[str, str]:\n    # Parse work hours\n    work_start, work_end = work_hours\n    work_start_min = convert_time_to_minutes(work_start)\n    work_end_min = convert_time_to_minutes(work_end)\n    \n    # Iterate through each day\n    for day in days:\n        # Check Betty's constraints\n        if day == \"Monday\":\n            continue\n        if day == \"Tuesday\" or day == \"Thursday\":\n            betty_min_start = convert_time_to_minutes(\"15:00\")\n        else:\n            betty_min_start = work_start_min\n        \n        # Check Scott's preference to avoid Wednesday\n        if day == \"Wednesday\":\n            continue\n        \n        # Get busy times for both participants on this day\n        betty_busy = [busy for busy in participants[0]['busy'] if busy['day'] == day]\n        scott_busy = [busy for busy in participants[1]['busy'] if busy['day'] == day]\n        \n        # Merge and sort all busy times\n        all_busy = []\n        for busy in betty_busy:\n            all_busy.append((convert_time_to_minutes(busy['start']), convert_time_to_minutes(busy['end'])))\n        for busy in scott_busy:\n            all_busy.append((convert_time_to_minutes(busy['start']), convert_time_to_minutes(busy['end'])))\n        all_busy.sort()\n        \n        # Find available slots\n        available_slots = []\n        prev_end = max(work_start_min, betty_min_start)\n        \n        for start, end in all_busy:\n            if start > prev_end:\n                available_slots.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        \n        if work_end_min > prev_end:\n            available_slots.append((prev_end, work_end_min))\n        \n        # Check for a slot that fits the duration\n        for slot_start, slot_end in available_slots:\n            if slot_end - slot_start >= duration:\n                meeting_start = slot_start\n                meeting_end = meeting_start + duration\n                return day, f\"{convert_minutes_to_time(meeting_start)}:{convert_minutes_to_time(meeting_end)}\"\n    \n    return None, None\n\ndef convert_time_to_minutes(time_str: str) -> int:\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef convert_minutes_to_time(minutes: int) -> str:\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\n# Define participants' busy times\nbetty_busy = [\n    {'day': 'Monday', 'start': '10:00', 'end': '10:30'},\n    {'day': 'Monday', 'start': '13:30', 'end': '14:00'},\n    {'day': 'Monday', 'start': '15:00', 'end': '15:30'},\n    {'day': 'Monday', 'start': '16:00', 'end': '16:30'},\n    {'day': 'Tuesday', 'start': '9:00', 'end': '9:30'},\n    {'day': 'Tuesday', 'start': '11:30', 'end': '12:00'},\n    {'day': 'Tuesday', 'start': '12:30', 'end': '13:00'},\n    {'day': 'Tuesday', 'start': '13:30', 'end': '14:00'},\n    {'day': 'Tuesday', 'start': '16:30', 'end': '17:00'},\n    {'day': 'Wednesday', 'start': '9:30', 'end': '10:30'},\n    {'day': 'Wednesday', 'start': '13:00', 'end': '13:30'},\n    {'day': 'Wednesday', 'start': '14:00', 'end': '14:30'},\n    {'day': 'Thursday', 'start': '9:30', 'end': '10:00'},\n    {'day': 'Thursday', 'start': '11:30', 'end': '12:00'},\n    {'day': 'Thursday', 'start': '14:00', 'end': '14:30'},\n    {'day': 'Thursday', 'start': '15:00', 'end': '15:30'},\n    {'day': 'Thursday', 'start': '16:30', 'end': '17:00'}\n]\n\nscott_busy = [\n    {'day': 'Monday', 'start': '9:30', 'end': '15:00'},\n    {'day': 'Monday', 'start': '15:30', 'end': '16:00'},\n    {'day': 'Monday', 'start': '16:30', 'end': '17:00'},\n    {'day': 'Tuesday', 'start': '9:00', 'end': '9:30'},\n    {'day': 'Tuesday', 'start': '10:00', 'end': '11:00'},\n    {'day': 'Tuesday', 'start': '11:30', 'end': '12:00'},\n    {'day': 'Tuesday', 'start': '12:30', 'end': '13:30'},\n    {'day': 'Tuesday', 'start': '14:00', 'end': '15:00'},\n    {'day': 'Tuesday', 'start': '16:00', 'end': '16:30'},\n    {'day': 'Wednesday', 'start': '9:30', 'end': '12:30'},\n    {'day': 'Wednesday', 'start': '13:00', 'end': '13:30'},\n    {'day': 'Wednesday', 'start': '14:00', 'end': '14:30'},\n    {'day': 'Wednesday', 'start': '15:00', 'end': '15:30'},\n    {'day': 'Wednesday', 'start': '16:00', 'end': '16:30'},\n    {'day': 'Thursday', 'start': '9:00', 'end': '9:30'},\n    {'day': 'Thursday', 'start': '10:00', 'end': '10:30'},\n    {'day': 'Thursday', 'start': '11:00', 'end': '12:00'},\n    {'day': 'Thursday', 'start': '12:30', 'end': '13:00'},\n    {'day': 'Thursday', 'start': '15:00', 'end': '16:00'},\n    {'day': 'Thursday', 'start': '16:30', 'end': '17:00'}\n]\n\nparticipants = [\n    {'name': 'Betty', 'busy': betty_busy},\n    {'name': 'Scott', 'busy': scott_busy}\n]\n\ndays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\nwork_hours = ('9:00', '17:00')\nduration = 30  # minutes\n\nday, time_range = schedule_meeting(participants, days, work_hours, duration)\nif day and time_range:\n    print(f\"{day}: {time_range}\")\nelse:\n    print(\"No suitable time found.\")\n```"
    }
]