[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Natalie, David, Douglas, Ralph and Jordan for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nNatalie's calendar is wide open the entire day.\nDavid is busy on Monday during 11:30 to 12:00, 14:30 to 15:00; \nDouglas has blocked their calendar on Monday during 9:30 to 10:00, 11:30 to 12:00, 13:00 to 13:30, 14:30 to 15:00; \nRalph has meetings on Monday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 12:30, 13:30 to 15:00, 15:30 to 16:00, 16:30 to 17:00; \nJordan is busy on Monday during 9:00 to 10:00, 12:00 to 12:30, 13:00 to 13:30, 14:30 to 15:00, 15:30 to 17:00; \n\nDavid do not want to meet on Monday before 14:00. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef find_meeting_time(participants_busy_times, work_hours_start, work_hours_end, meeting_duration, preferences=None):\n    \"\"\"\n    Find a meeting time that fits all participants' schedules and constraints.\n    \n    Args:\n        participants_busy_times: Dict of participant names to their busy time slots.\n        work_hours_start: Start of workday in \"HH:MM\" format.\n        work_hours_end: End of workday in \"HH:MM\" format.\n        meeting_duration: Duration of meeting in minutes.\n        preferences: Optional dict of preferences (e.g., no meetings before a certain time).\n    \n    Returns:\n        A tuple of (day, start_time, end_time) if a slot is found, else None.\n    \"\"\"\n    # Convert time strings to minutes since midnight for easier calculation\n    def time_to_minutes(time_str):\n        hh, mm = map(int, time_str.split(':'))\n        return hh * 60 + mm\n    \n    work_start = time_to_minutes(work_hours_start)\n    work_end = time_to_minutes(work_hours_end)\n    \n    # Collect all busy slots and merge overlapping ones\n    all_busy_slots = []\n    for busy_slots in participents_busy_times.values():\n        for slot in busy_slots:\n            start, end = map(time_to_minutes, slot.split(' to '))\n            all_busy_slots.append((start, end))\n    \n    # Sort by start time\n    all_busy_slots.sort()\n    \n    # Merge overlapping or adjacent slots\n    merged_slots = []\n    for start, end in all_busy_slots:\n        if not merged_slots:\n            merged_slots.append([start, end])\n        else:\n            last_start, last_end = merged_slots[-1]\n            if start <= last_end:\n                merged_slots[-1][1] = max(end, last_end)\n            else:\n                merged_slots.append([start, end])\n    \n    # Find available slots between work hours, excluding merged busy slots\n    available_slots = []\n    prev_end = work_start\n    for start, end in merged_slots:\n        if start > prev_end:\n            available_slots.append((prev_end, start))\n        prev_end = max(prev_end, end)\n    if prev_end < work_end:\n        available_slots.append((prev_end, work_end))\n    \n    # Check preferences (e.g., no meetings before a certain time)\n    if preferences:\n        pref_no_before = preferences.get('no_before', None)\n        if pref_no_before:\n            pref_min = time_to_minutes(pref_no_before)\n            available_slots = [(s, e) for s, e in available_slots if s >= pref_min]\n    \n    # Find first available slot that fits the meeting duration\n    for start, end in available_slots:\n        if end - start >= meeting_duration:\n            # Convert back to \"HH:MM\" format\n            def minutes_to_time(minutes):\n                hh = minutes // 60\n                mm = minutes % 60\n                return f\"{hh:02d}:{mm:02d}\"\n            \n            meeting_start = minutes_to_time(start)\n            meeting_end = minutes_to_time(start + meeting_duration)\n            return meeting_start, meeting_end\n    \n    return None\n\n# Define participants' busy times\nparticipants_busy_times = {\n    'Natalie': [],\n    'David': ['11:30 to 12:00', '14:30 to 15:00'],\n    'Douglas': ['9:30 to 10:00', '11:30 to 12:00', '13:00 to 13:30', '14:30 to 15:00'],\n    'Ralph': ['9:00 to 9:30', '10:00 to 11:00', '11:30 to 12:30', '13:30 to 15:00', '15:30 to 16:00', '16:30 to 17:00'],\n    'Jordan': ['9:00 to 10:00', '12:00 to 12:30', '13:00 to 13:30', '14:30 to 15:00', '15:30 to 17:00']\n}\n\n# Define preferences (David doesn't want to meet before 14:00)\npreferences = {\n    'no_before': '14:00'\n}\n\n# Find meeting time\nmeeting_time = find_meeting_time(\n    participants_busy_times=participants_busy_times,\n    work_hours_start='9:00',\n    work_hours_end='17:00',\n    meeting_duration=30,\n    preferences=preferences\n)\n\n# Output result\nif meeting_time:\n    start, end = meeting_time\n    print(f\"{start}:{end}\")\n    print(\"Monday\")\nelse:\n    print(\"No suitable time found.\")\n```"
    }
]