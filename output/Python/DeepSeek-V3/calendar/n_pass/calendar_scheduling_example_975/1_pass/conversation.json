[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Nicole and Daniel for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday, Wednesday, Thursday or Friday. \n\nHere are the existing schedules for everyone during the days: \nNicole has meetings on Tuesday during 16:00 to 16:30, Wednesday during 15:00 to 15:30, Friday during 12:00 to 12:30, 15:30 to 16:00; \nDaniel is busy on Monday during 9:00 to 12:30, 13:00 to 13:30, 14:00 to 16:30, Tuesday during 9:00 to 10:30, 11:30 to 12:30, 13:00 to 13:30, 15:00 to 16:00, 16:30 to 17:00, Wednesday during 9:00 to 10:00, 11:00 to 12:30, 13:00 to 13:30, 14:00 to 14:30, 16:30 to 17:00, Thursday during 11:00 to 12:00, 13:00 to 14:00, 15:00 to 15:30, Friday during 10:00 to 11:00, 11:30 to 12:00, 12:30 to 14:30, 15:00 to 15:30, 16:00 to 16:30; \n\nThe group would like to meet at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom typing import Dict, List, Tuple\n\ndef parse_time(time_str: str) -> int:\n    \"\"\"Convert time string in HH:MM format to minutes since midnight.\"\"\"\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef format_time(minutes: int) -> str:\n    \"\"\"Convert minutes since midnight to HH:MM format.\"\"\"\n    hours = minutes // 60\n    minutes = minutes % 60\n    return f\"{hours:02d}:{minutes:02d}\"\n\ndef find_earliest_meeting_time(\n    participants: Dict[str, Dict[str, List[Tuple[int, int]]]],\n    days: List[str],\n    work_hours: Tuple[str, str],\n    duration: int\n) -> Tuple[str, str]:\n    \"\"\"Find the earliest available meeting time for all participants.\"\"\"\n    work_start = parse_time(work_hours[0])\n    work_end = parse_time(work_hours[1])\n    \n    for day in days:\n        # Collect all busy intervals for the day for all participants\n        busy_intervals = []\n        for person, schedule in participants.items():\n            if day in schedule:\n                busy_intervals.extend(schedule[day])\n        \n        # Merge overlapping or adjacent intervals\n        if not busy_intervals:\n            # No busy intervals, entire work day is free\n            return day, f\"{format_time(work_start)}:{format_time(work_start + duration)}\"\n        \n        # Sort intervals by start time\n        busy_intervals.sort()\n        \n        # Check the time before the first busy interval\n        first_start = busy_intervals[0][0]\n        if first_start - work_start >= duration:\n            return day, f\"{format_time(work_start)}:{format_time(work_start + duration)}\"\n        \n        # Check gaps between busy intervals\n        prev_end = busy_intervals[0][1]\n        for start, end in busy_intervals[1:]:\n            if start - prev_end >= duration:\n                return day, f\"{format_time(prev_end)}:{format_time(prev_end + duration)}\"\n            prev_end = max(prev_end, end)\n        \n        # Check the time after the last busy interval\n        if work_end - prev_end >= duration:\n            return day, f\"{format_time(prev_end)}:{format_time(prev_end + duration)}\"\n    \n    raise ValueError(\"No suitable meeting time found.\")\n\ndef main():\n    # Define participants' schedules\n    participants = {\n        \"Nicole\": {\n            \"Tuesday\": [(parse_time(\"16:00\"), parse_time(\"16:30\"))],\n            \"Wednesday\": [(parse_time(\"15:00\"), parse_time(\"15:30\"))],\n            \"Friday\": [\n                (parse_time(\"12:00\"), parse_time(\"12:30\")),\n                (parse_time(\"15:30\"), parse_time(\"16:00\"))\n            ],\n        },\n        \"Daniel\": {\n            \"Monday\": [\n                (parse_time(\"09:00\"), parse_time(\"12:30\")),\n                (parse_time(\"13:00\"), parse_time(\"13:30\")),\n                (parse_time(\"14:00\"), parse_time(\"16:30\"))\n            ],\n            \"Tuesday\": [\n                (parse_time(\"09:00\"), parse_time(\"10:30\")),\n                (parse_time(\"11:30\"), parse_time(\"12:30\")),\n                (parse_time(\"13:00\"), parse_time(\"13:30\")),\n                (parse_time(\"15:00\"), parse_time(\"16:00\")),\n                (parse_time(\"16:30\"), parse_time(\"17:00\"))\n            ],\n            \"Wednesday\": [\n                (parse_time(\"09:00\"), parse_time(\"10:00\")),\n                (parse_time(\"11:00\"), parse_time(\"12:30\")),\n                (parse_time(\"13:00\"), parse_time(\"13:30\")),\n                (parse_time(\"14:00\"), parse_time(\"14:30\")),\n                (parse_time(\"16:30\"), parse_time(\"17:00\"))\n            ],\n            \"Thursday\": [\n                (parse_time(\"11:00\"), parse_time(\"12:00\")),\n                (parse_time(\"13:00\"), parse_time(\"14:00\")),\n                (parse_time(\"15:00\"), parse_time(\"15:30\"))\n            ],\n            \"Friday\": [\n                (parse_time(\"10:00\"), parse_time(\"11:00\")),\n                (parse_time(\"11:30\"), parse_time(\"12:00\")),\n                (parse_time(\"12:30\"), parse_time(\"14:30\")),\n                (parse_time(\"15:00\"), parse_time(\"15:30\")),\n                (parse_time(\"16:00\"), parse_time(\"16:30\"))\n            ],\n        },\n    }\n    \n    # Define meeting constraints\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    work_hours = (\"09:00\", \"17:00\")\n    duration = 60  # minutes\n    \n    day, time_range = find_earliest_meeting_time(participants, days, work_hours, duration)\n    print(f\"{day}: {time_range}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]