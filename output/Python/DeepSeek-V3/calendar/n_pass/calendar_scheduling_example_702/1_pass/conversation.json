[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Robert and Ralph for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nRobert has meetings on Monday during 11:00 to 11:30, 14:00 to 14:30, 15:30 to 16:00, Tuesday during 10:30 to 11:00, 15:00 to 15:30, Wednesday during 10:00 to 11:00, 11:30 to 12:00, 12:30 to 13:00, 13:30 to 14:00, 15:00 to 15:30, 16:00 to 16:30; \nRalph is busy on Monday during 10:00 to 13:30, 14:00 to 14:30, 15:00 to 17:00, Tuesday during 9:00 to 9:30, 10:00 to 10:30, 11:00 to 11:30, 12:00 to 13:00, 14:00 to 15:30, 16:00 to 17:00, Wednesday during 10:30 to 11:00, 11:30 to 12:00, 13:00 to 14:30, 16:30 to 17:00; \n\nRobert would like to avoid more meetings on Monday. You would like to schedule the meeting at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef find_meeting_time():\n    # Define work hours and days\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    days = ['Monday', 'Tuesday', 'Wednesday']\n    \n    # Define busy slots for Robert and Ralph in minutes since midnight\n    robert_busy = {\n        'Monday': [(11 * 60, 11 * 60 + 30), (14 * 60, 14 * 60 + 30), (15 * 60 + 30, 16 * 60)],\n        'Tuesday': [(10 * 60 + 30, 11 * 60), (15 * 60, 15 * 60 + 30)],\n        'Wednesday': [(10 * 60, 11 * 60), (11 * 60 + 30, 12 * 60), (12 * 60 + 30, 13 * 60), \n                     (13 * 60 + 30, 14 * 60), (15 * 60, 15 * 60 + 30), (16 * 60, 16 * 60 + 30)]\n    }\n    \n    ralph_busy = {\n        'Monday': [(10 * 60, 13 * 60 + 30), (14 * 60, 14 * 60 + 30), (15 * 60, 17 * 60)],\n        'Tuesday': [(9 * 60, 9 * 60 + 30), (10 * 60, 10 * 60 + 30), (11 * 60, 11 * 60 + 30), \n                    (12 * 60, 13 * 60), (14 * 60, 15 * 60 + 30), (16 * 60, 17 * 60)],\n        'Wednesday': [(10 * 60 + 30, 11 * 60), (11 * 60 + 30, 12 * 60), (13 * 60, 14 * 60 + 30), \n                     (16 * 60 + 30, 17 * 60)]\n    }\n    \n    meeting_duration = 30  # minutes\n    \n    # Iterate through days in order (Monday, Tuesday, Wednesday)\n    for day in days:\n        if day == 'Monday' and \"Robert would like to avoid more meetings on Monday\":\n            continue  # Skip Monday as per Robert's preference\n        \n        # Combine and sort all busy slots for both participants\n        all_busy = robert_busy.get(day, []) + ralph_busy.get(day, [])\n        all_busy.sort()\n        \n        # Find free slots\n        free_slots = []\n        prev_end = work_start\n        \n        for start, end in all_busy:\n            if start > prev_end:\n                free_slots.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        \n        if prev_end < work_end:\n            free_slots.append((prev_end, work_end))\n        \n        # Check each free slot for availability\n        for slot_start, slot_end in free_slots:\n            if slot_end - slot_start >= meeting_duration:\n                meeting_start = slot_start\n                meeting_end = meeting_start + meeting_duration\n                # Format the time as HH:MM:HH:MM\n                start_hh = meeting_start // 60\n                start_mm = meeting_start % 60\n                end_hh = meeting_end // 60\n                end_mm = meeting_end % 60\n                time_str = f\"{start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\"\n                return day, time_str\n    \n    return None, None\n\nday, time_str = find_meeting_time()\nprint(f\"{day}: {time_str}\")\n```"
    }
]