[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Evelyn, Joshua, Kevin, Gerald, Jerry, Jesse and Kenneth for one hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nEvelyn's calendar is wide open the entire day.\nJoshua is busy on Monday during 11:00 to 12:30, 13:30 to 14:30, 16:30 to 17:00; \nKevin is free the entire day.\nGerald is free the entire day.\nJerry has blocked their calendar on Monday during 9:00 to 9:30, 10:30 to 12:00, 12:30 to 13:00, 13:30 to 14:00, 14:30 to 15:00, 15:30 to 16:00; \nJesse is busy on Monday during 9:00 to 9:30, 10:30 to 12:00, 12:30 to 13:00, 14:30 to 15:00, 15:30 to 16:30; \nKenneth is busy on Monday during 10:30 to 12:30, 13:30 to 14:00, 14:30 to 15:00, 15:30 to 16:00, 16:30 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef find_meeting_time(participants_schedules, day, work_hours_start, work_hours_end, duration):\n    # Convert time strings to minutes since midnight for easier calculations\n    def time_to_minutes(time_str):\n        hours, minutes = map(int, time_str.split(':'))\n        return hours * 60 + minutes\n    \n    # Convert minutes back to HH:MM format\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        mins = minutes % 60\n        return f\"{hours:02d}:{mins:02d}\"\n    \n    work_start = time_to_minutes(work_hours_start)\n    work_end = time_to_minutes(work_hours_end)\n    \n    # Initialize a list to keep track of busy intervals for all participants\n    busy_intervals = []\n    \n    for schedule in participants_schedules:\n        for busy in schedule:\n            start, end = map(time_to_minutes, busy.split(' to '))\n            busy_intervals.append((start, end))\n    \n    # Sort all busy intervals by start time\n    busy_intervals.sort()\n    \n    # Merge overlapping or adjacent busy intervals\n    merged = []\n    for start, end in busy_intervals:\n        if not merged:\n            merged.append((start, end))\n        else:\n            last_start, last_end = merged[-1]\n            if start <= last_end:\n                # Overlapping or adjacent, merge them\n                new_start = min(last_start, start)\n                new_end = max(last_end, end)\n                merged[-1] = (new_start, new_end)\n            else:\n                merged.append((start, end))\n    \n    # Find available slots by looking at gaps between busy intervals and work hours\n    available_slots = []\n    prev_end = work_start\n    \n    for start, end in merged:\n        if start > prev_end:\n            available_slots.append((prev_end, start))\n        prev_end = max(prev_end, end)\n    \n    # Check the time after the last busy interval\n    if prev_end < work_end:\n        available_slots.append((prev_end, work_end))\n    \n    # Find the first available slot that can fit the duration\n    duration_minutes = duration * 60\n    for start, end in available_slots:\n        if end - start >= duration_minutes:\n            meeting_start = start\n            meeting_end = meeting_start + duration_minutes\n            return (day, minutes_to_time(meeting_start), minutes_to_time(meeting_end))\n    \n    return None\n\n# Define participants' schedules\nparticipants_schedules = [\n    [],  # Evelyn is free\n    [\"11:00 to 12:30\", \"13:30 to 14:30\", \"16:30 to 17:00\"],  # Joshua\n    [],  # Kevin is free\n    [],  # Gerald is free\n    [\"09:00 to 09:30\", \"10:30 to 12:00\", \"12:30 to 13:00\", \"13:30 to 14:00\", \"14:30 to 15:00\", \"15:30 to 16:00\"],  # Jerry\n    [\"09:00 to 09:30\", \"10:30 to 12:00\", \"12:30 to 13:00\", \"14:30 to 15:00\", \"15:30 to 16:30\"],  # Jesse\n    [\"10:30 to 12:30\", \"13:30 to 14:00\", \"14:30 to 15:00\", \"15:30 to 16:00\", \"16:30 to 17:00\"],  # Kenneth\n]\n\nday = \"Monday\"\nwork_hours_start = \"09:00\"\nwork_hours_end = \"17:00\"\nduration = 1  # 1 hour\n\nresult = find_meeting_time(participants_schedules, day, work_hours_start, work_hours_end, duration)\n\nif result:\n    day, start_time, end_time = result\n    print(f\"{day}: {start_time}:{end_time}\")\nelse:\n    print(\"No suitable time found.\")\n```"
    }
]