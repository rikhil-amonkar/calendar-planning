[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Emily, Mason, Maria, Carl, David and Frank for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nEmily has meetings on Monday during 10:00 to 10:30, 16:00 to 16:30; \nMason is free the entire day.\nMaria has meetings on Monday during 10:30 to 11:00, 14:00 to 14:30; \nCarl has meetings on Monday during 9:30 to 10:00, 10:30 to 12:30, 13:30 to 14:00, 14:30 to 15:30, 16:00 to 17:00; \nDavid has blocked their calendar on Monday during 9:30 to 11:00, 11:30 to 12:00, 12:30 to 13:30, 14:00 to 15:00, 16:00 to 17:00; \nFrank has meetings on Monday during 9:30 to 10:30, 11:00 to 11:30, 12:30 to 13:30, 14:30 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef find_meeting_time(participants_schedules, day, work_hours_start, work_hours_end, duration_minutes):\n    # Convert time strings to minutes since start of day for easier calculation\n    def time_to_minutes(time_str):\n        hh, mm = map(int, time_str.split(':'))\n        return hh * 60 + mm\n    \n    work_start = time_to_minutes(work_hours_start)\n    work_end = time_to_minutes(work_hours_end)\n    duration = duration_minutes\n    \n    # Initialize the free slots for all participants\n    free_slots = []\n    for schedule in participants_schedules:\n        busy_slots = []\n        for busy in schedule:\n            start, end = map(time_to_minutes, busy.split(':'))\n            busy_slots.append((start, end))\n        # Sort busy slots by start time\n        busy_slots.sort()\n        \n        # Calculate free slots by finding gaps between busy slots and work hours\n        free = []\n        prev_end = work_start\n        for start, end in busy_slots:\n            if start > prev_end:\n                free.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        if prev_end < work_end:\n            free.append((prev_end, work_end))\n        free_slots.append(free)\n    \n    # Find overlapping free slots across all participants\n    common_free = free_slots[0]\n    for participant_free in free_slots[1:]:\n        new_common_free = []\n        i = j = 0\n        while i < len(common_free) and j < len(participant_free):\n            start1, end1 = common_free[i]\n            start2, end2 = participant_free[j]\n            \n            # Find overlap\n            overlap_start = max(start1, start2)\n            overlap_end = min(end1, end2)\n            \n            if overlap_start < overlap_end:\n                new_common_free.append((overlap_start, overlap_end))\n            \n            # Move the pointer which ends first\n            if end1 < end2:\n                i += 1\n            else:\n                j += 1\n        common_free = new_common_free\n    \n    # Find the first slot that can accommodate the meeting duration\n    for start, end in common_free:\n        if end - start >= duration:\n            # Convert back to HH:MM format\n            def minutes_to_time(minutes):\n                hh = minutes // 60\n                mm = minutes % 60\n                return f\"{hh:02d}:{mm:02d}\"\n            \n            meeting_start = minutes_to_time(start)\n            meeting_end = minutes_to_time(start + duration)\n            return f\"{day}:{meeting_start}:{meeting_end}\"\n    \n    return \"No suitable time found\"\n\n# Define the participants' schedules\nparticipants_schedules = [\n    [\"10:00:10:30\", \"16:00:16:30\"],  # Emily\n    [],                              # Mason\n    [\"10:30:11:00\", \"14:00:14:30\"],  # Maria\n    [\"9:30:10:00\", \"10:30:12:30\", \"13:30:14:00\", \"14:30:15:30\", \"16:00:17:00\"],  # Carl\n    [\"9:30:11:00\", \"11:30:12:00\", \"12:30:13:30\", \"14:00:15:00\", \"16:00:17:00\"],  # David\n    [\"9:30:10:30\", \"11:00:11:30\", \"12:30:13:30\", \"14:30:17:00\"]  # Frank\n]\n\n# Define meeting parameters\nday = \"Monday\"\nwork_hours_start = \"9:00\"\nwork_hours_end = \"17:00\"\nduration_minutes = 30\n\n# Find and print the meeting time\nresult = find_meeting_time(participants_schedules, day, work_hours_start, work_hours_end, duration_minutes)\nprint(result)\n```"
    }
]