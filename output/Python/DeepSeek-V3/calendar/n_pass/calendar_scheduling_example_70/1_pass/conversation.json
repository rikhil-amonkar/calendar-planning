[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Denise, Angela and Natalie for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nDenise has blocked their calendar on Monday during 12:00 to 12:30, 15:30 to 16:00; \nAngelahas no meetings the whole day.\nNatalie is busy on Monday during 9:00 to 11:30, 12:00 to 13:00, 14:00 to 14:30, 15:00 to 17:00; \n\nThe group would like to meet at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom typing import List, Dict, Tuple\n\ndef find_meeting_time(participants: Dict[str, List[Tuple[str, str]]], \n                     work_hours: Tuple[str, str], \n                     duration_minutes: int, \n                     day: str) -> Tuple[str, str, str]:\n    # Convert all time strings to minutes since 9:00 (start of work hours)\n    def time_to_minutes(time_str: str) -> int:\n        hh, mm = map(int, time_str.split(':'))\n        return hh * 60 + mm - 9 * 60  # Subtract 9:00 (540 minutes) to normalize\n\n    def minutes_to_time(minutes: int) -> str:\n        total_minutes = 9 * 60 + minutes  # Add back 9:00\n        hh = total_minutes // 60\n        mm = total_minutes % 60\n        return f\"{hh:02d}:{mm:02d}\"\n\n    work_start, work_end = work_hours\n    work_start_min = time_to_minutes(work_start)\n    work_end_min = time_to_minutes(work_end)\n    duration = duration_minutes\n\n    # Collect all busy intervals for each participant\n    busy_intervals = []\n    for participant, intervals in participants.items():\n        for start, end in intervals:\n            start_min = time_to_minutes(start)\n            end_min = time_to_minutes(end)\n            busy_intervals.append((start_min, end_min))\n\n    # Sort all busy intervals by start time\n    busy_intervals.sort()\n\n    # Merge overlapping or adjacent intervals\n    merged = []\n    for start, end in busy_intervals:\n        if not merged:\n            merged.append((start, end))\n        else:\n            last_start, last_end = merged[-1]\n            if start <= last_end:\n                # Overlapping or adjacent, merge them\n                new_start = min(last_start, start)\n                new_end = max(last_end, end)\n                merged[-1] = (new_start, new_end)\n            else:\n                merged.append((start, end))\n\n    # Find the earliest available slot\n    prev_end = work_start_min\n    for start, end in merged:\n        if start > prev_end and start - prev_end >= duration:\n            # Found a slot\n            meeting_start = prev_end\n            meeting_end = meeting_start + duration\n            return (day, \n                    minutes_to_time(meeting_start), \n                    minutes_to_time(meeting_end))\n        prev_end = max(prev_end, end)\n\n    # Check after the last busy interval\n    if work_end_min - prev_end >= duration:\n        meeting_start = prev_end\n        meeting_end = meeting_start + duration\n        return (day, \n                minutes_to_time(meeting_start), \n                minutes_to_time(meeting_end))\n\n    return (None, None, None)\n\n# Input data\nparticipants = {\n    \"Denise\": [(\"12:00\", \"12:30\"), (\"15:30\", \"16:00\")],\n    \"Angela\": [],\n    \"Natalie\": [(\"9:00\", \"11:30\"), (\"12:00\", \"13:00\"), (\"14:00\", \"14:30\"), (\"15:00\", \"17:00\")],\n}\nwork_hours = (\"9:00\", \"17:00\")\nduration_minutes = 30\nday = \"Monday\"\n\n# Find the meeting time\nday, start_time, end_time = find_meeting_time(participants, work_hours, duration_minutes, day)\n\n# Output the result\nprint(f\"{day}:{start_time}:{end_time}\")\n```"
    }
]