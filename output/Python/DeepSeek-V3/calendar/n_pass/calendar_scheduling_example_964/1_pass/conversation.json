[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Betty and Megan for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday, Wednesday, Thursday or Friday. \n\nHere are the existing schedules for everyone during the days: \nBetty is busy on Monday during 10:00 to 10:30, 11:30 to 12:30, 16:00 to 16:30, Tuesday during 9:30 to 10:00, 10:30 to 11:00, 12:00 to 12:30, 13:30 to 15:00, 16:30 to 17:00, Wednesday during 13:30 to 14:00, 14:30 to 15:00, Friday during 9:00 to 10:00, 11:30 to 12:00, 12:30 to 13:00, 14:30 to 15:00; \nMegan has blocked their calendar on Monday during 9:00 to 17:00, Tuesday during 9:00 to 9:30, 10:00 to 10:30, 12:00 to 14:00, 15:00 to 15:30, 16:00 to 16:30, Wednesday during 9:30 to 10:30, 11:00 to 11:30, 12:30 to 13:00, 13:30 to 14:30, 15:30 to 17:00, Thursday during 9:00 to 10:30, 11:30 to 14:00, 14:30 to 15:00, 15:30 to 16:30, Friday during 9:00 to 17:00; \n\nBetty can not meet on Wednesday. Thursday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom typing import List, Dict, Tuple\n\ndef parse_time(time_str: str) -> int:\n    \"\"\"Convert time string in format HH:MM to minutes since 9:00.\"\"\"\n    hh, mm = map(int, time_str.split(':'))\n    return (hh - 9) * 60 + mm\n\ndef format_time(minutes: int) -> str:\n    \"\"\"Convert minutes since 9:00 back to HH:MM format.\"\"\"\n    hh = 9 + minutes // 60\n    mm = minutes % 60\n    return f\"{hh:02d}:{mm:02d}\"\n\ndef get_busy_intervals(schedule: Dict[str, List[Tuple[str, str]]], day: str) -> List[Tuple[int, int]]:\n    \"\"\"Get busy intervals for a given day in minutes since 9:00.\"\"\"\n    intervals = []\n    for busy_day, busy_times in schedule.items():\n        if busy_day == day:\n            for start, end in busy_times:\n                start_min = parse_time(start)\n                end_min = parse_time(end)\n                intervals.append((start_min, end_min))\n    return intervals\n\ndef find_available_slot(busy_intervals: List[Tuple[int, int]], duration: int) -> Tuple[int, int]:\n    \"\"\"Find an available slot of given duration in minutes.\"\"\"\n    busy_intervals.sort()\n    prev_end = 0\n    for start, end in busy_intervals:\n        if start - prev_end >= duration:\n            return (prev_end, prev_end + duration)\n        prev_end = max(prev_end, end)\n    # Check after last busy interval\n    if (17 * 60 - 9 * 60) - prev_end >= duration:\n        return (prev_end, prev_end + duration)\n    return None\n\ndef main():\n    # Define work hours (9:00 to 17:00)\n    work_start = parse_time(\"09:00\")\n    work_end = parse_time(\"17:00\")\n    meeting_duration = 60  # minutes\n\n    # Define schedules\n    betty_schedule = {\n        \"Monday\": [(\"10:00\", \"10:30\"), (\"11:30\", \"12:30\"), (\"16:00\", \"16:30\")],\n        \"Tuesday\": [(\"9:30\", \"10:00\"), (\"10:30\", \"11:00\"), (\"12:00\", \"12:30\"), (\"13:30\", \"15:00\"), (\"16:30\", \"17:00\")],\n        \"Wednesday\": [(\"13:30\", \"14:00\"), (\"14:30\", \"15:00\")],\n        \"Friday\": [(\"9:00\", \"10:00\"), (\"11:30\", \"12:00\"), (\"12:30\", \"13:00\"), (\"14:30\", \"15:00\")]\n    }\n\n    megan_schedule = {\n        \"Monday\": [(\"9:00\", \"17:00\")],\n        \"Tuesday\": [(\"9:00\", \"9:30\"), (\"10:00\", \"10:30\"), (\"12:00\", \"14:00\"), (\"15:00\", \"15:30\"), (\"16:00\", \"16:30\")],\n        \"Wednesday\": [(\"9:30\", \"10:30\"), (\"11:00\", \"11:30\"), (\"12:30\", \"13:00\"), (\"13:30\", \"14:30\"), (\"15:30\", \"17:00\")],\n        \"Thursday\": [(\"9:00\", \"10:30\"), (\"11:30\", \"14:00\"), (\"14:30\", \"15:00\"), (\"15:30\", \"16:30\")],\n        \"Friday\": [(\"9:00\", \"17:00\")]\n    }\n\n    # Betty cannot meet on Wednesday or Thursday\n    days_to_check = [\"Monday\", \"Tuesday\", \"Friday\"]\n\n    for day in days_to_check:\n        # Get busy intervals for both participants\n        betty_busy = get_busy_intervals(betty_schedule, day)\n        megan_busy = get_busy_intervals(megan_schedule, day)\n\n        # Combine and merge busy intervals\n        all_busy = betty_busy + megan_busy\n        all_busy.sort()\n\n        # Find available slot\n        slot = find_available_slot(all_busy, meeting_duration)\n        if slot:\n            start, end = slot\n            start_time = format_time(start)\n            end_time = format_time(end)\n            print(f\"{day}: {start_time}:{end_time}\")\n            return\n\n    print(\"No available slot found.\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]