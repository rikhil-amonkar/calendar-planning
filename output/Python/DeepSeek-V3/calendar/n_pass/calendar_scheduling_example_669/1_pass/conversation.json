[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Jean and Doris for half an hour between the work hours of 9:00 to 17:00 on either Monday or Tuesday. \n\nHere are the existing schedules for everyone during the days: \nJean is busy on Tuesday during 11:30 to 12:00, 16:00 to 16:30; \nDoris has meetings on Monday during 9:00 to 11:30, 12:00 to 12:30, 13:30 to 16:00, 16:30 to 17:00, Tuesday during 9:00 to 17:00; \n\nDoris would rather not meet on Monday after 14:00. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef find_meeting_time():\n    # Define work hours and days to consider\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n    days = ['Monday', 'Tuesday']\n    meeting_duration = 30  # minutes\n\n    # Define busy slots for each participant per day in minutes since midnight\n    jean_busy = {\n        'Monday': [],\n        'Tuesday': [(11 * 60 + 30, 12 * 60), (16 * 60, 16 * 60 + 30)]\n    }\n\n    doris_busy = {\n        'Monday': [\n            (9 * 60, 11 * 60 + 30),\n            (12 * 60, 12 * 60 + 30),\n            (13 * 60 + 30, 16 * 60),\n            (16 * 60 + 30, 17 * 60)\n        ],\n        'Tuesday': [(9 * 60, 17 * 60)]  # Entire day is busy\n    }\n\n    doris_preference = {\n        'Monday': (14 * 60, 17 * 60)  # Prefers not to meet after 14:00\n    }\n\n    # Iterate through each day to find a suitable time\n    for day in days:\n        # Collect all busy slots for both participants on this day\n        busy_slots = jean_busy[day] + doris_busy[day]\n        busy_slots.sort()  # Sort by start time\n\n        # Merge overlapping or adjacent busy slots\n        merged_busy = []\n        for start, end in busy_slots:\n            if not merged_busy:\n                merged_busy.append((start, end))\n            else:\n                last_start, last_end = merged_busy[-1]\n                if start <= last_end:\n                    # Overlapping or adjacent, merge them\n                    new_start = min(last_start, start)\n                    new_end = max(last_end, end)\n                    merged_busy[-1] = (new_start, new_end)\n                else:\n                    merged_busy.append((start, end))\n\n        # Find free slots by checking gaps between busy slots\n        free_slots = []\n        prev_end = work_start\n        for start, end in merged_busy:\n            if start > prev_end:\n                free_slots.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        if prev_end < work_end:\n            free_slots.append((prev_end, work_end))\n\n        # Check each free slot for availability and duration\n        for start, end in free_slots:\n            slot_duration = end - start\n            if slot_duration >= meeting_duration:\n                # Check Doris's preference for Monday after 14:00\n                if day == 'Monday' and start >= doris_preference['Monday'][0]:\n                    continue  # Skip if it's after 14:00 on Monday\n                # Found a suitable slot\n                meeting_start = start\n                meeting_end = meeting_start + meeting_duration\n                # Convert minutes back to HH:MM format\n                def format_time(minutes):\n                    hh = minutes // 60\n                    mm = minutes % 60\n                    return f\"{hh:02d}:{mm:02d}\"\n                time_range = f\"{format_time(meeting_start)}:{format_time(meeting_end)}\"\n                return day, time_range\n\n    return None, None  # No suitable time found (though problem states there is one)\n\nday, time_range = find_meeting_time()\nprint(f\"{day}: {time_range}\")\n```"
    }
]