[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Patrick and Roy for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nPatrick's calendar is wide open the entire week.\nRoy is busy on Monday during 10:00 to 11:30, 12:00 to 13:00, 14:00 to 14:30, 15:00 to 17:00, Tuesday during 10:30 to 11:30, 12:00 to 14:30, 15:00 to 15:30, 16:00 to 17:00, Wednesday during 9:30 to 11:30, 12:30 to 14:00, 14:30 to 15:30, 16:30 to 17:00; \n\nThe group would like to meet at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom typing import List, Dict, Tuple\n\ndef find_earliest_meeting_time(\n    participants: Dict[str, Dict[str, List[Tuple[str, str]]]],\n    days: List[str],\n    work_hours: Tuple[str, str],\n    duration_minutes: int\n) -> Tuple[str, str]:\n    \"\"\"\n    Finds the earliest available meeting time for participants within given constraints.\n    \n    Args:\n        participants: Dictionary of participant names to their busy schedules per day.\n        days: List of days to consider (e.g., [\"Monday\", \"Tuesday\"]).\n        work_hours: Tuple of start and end time in \"HH:MM\" format (e.g., (\"09:00\", \"17:00\")).\n        duration_minutes: Duration of the meeting in minutes.\n    \n    Returns:\n        Tuple of (day, time_slot) where time_slot is in \"HH:MM-HH:MM\" format.\n    \"\"\"\n    # Convert work hours to minutes since midnight\n    work_start = time_to_minutes(work_hours[0])\n    work_end = time_to_minutes(work_hours[1])\n    \n    for day in days:\n        # Collect all busy intervals for the day across participants\n        busy_intervals = []\n        for person, schedule in participants.items():\n            if day in schedule:\n                for start, end in schedule[day]:\n                    busy_start = time_to_minutes(start)\n                    busy_end = time_to_minutes(end)\n                    busy_intervals.append((busy_start, busy_end))\n        \n        # Sort busy intervals by start time\n        busy_intervals.sort()\n        \n        # Merge overlapping or adjacent busy intervals\n        merged = []\n        for start, end in busy_intervals:\n            if not merged:\n                merged.append([start, end])\n            else:\n                last_start, last_end = merged[-1]\n                if start <= last_end:\n                    merged[-1][1] = max(end, last_end)\n                else:\n                    merged.append([start, end])\n        \n        # Check available slots between work hours and busy intervals\n        prev_end = work_start\n        for start, end in merged:\n            if start > prev_end:\n                available_duration = start - prev_end\n                if available_duration >= duration_minutes:\n                    return (day, f\"{minutes_to_time(prev_end)}-{minutes_to_time(prev_end + duration_minutes)}\")\n            prev_end = max(prev_end, end)\n        \n        # Check after last busy interval\n        if work_end - prev_end >= duration_minutes:\n            return (day, f\"{minutes_to_time(prev_end)}-{minutes_to_time(prev_end + duration_minutes)}\")\n    \n    return (None, None)\n\ndef time_to_minutes(time_str: str) -> int:\n    \"\"\"Converts time string (HH:MM) to minutes since midnight.\"\"\"\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes: int) -> str:\n    \"\"\"Converts minutes since midnight to time string (HH:MM).\"\"\"\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\n# Define participants' schedules\nparticipants = {\n    \"Patrick\": {},\n    \"Roy\": {\n        \"Monday\": [(\"10:00\", \"11:30\"), (\"12:00\", \"13:00\"), (\"14:00\", \"14:30\"), (\"15:00\", \"17:00\")],\n        \"Tuesday\": [(\"10:30\", \"11:30\"), (\"12:00\", \"14:30\"), (\"15:00\", \"15:30\"), (\"16:00\", \"17:00\")],\n        \"Wednesday\": [(\"9:30\", \"11:30\"), (\"12:30\", \"14:00\"), (\"14:30\", \"15:30\"), (\"16:30\", \"17:00\")]\n    }\n}\n\n# Define constraints\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\"]\nwork_hours = (\"09:00\", \"17:00\")\nduration_minutes = 60\n\n# Find the earliest meeting time\nday, time_slot = find_earliest_meeting_time(participants, days, work_hours, duration_minutes)\n\n# Output the result\nif day and time_slot:\n    start, end = time_slot.split('-')\n    print(f\"{day}: {start}:{end}\")\nelse:\n    print(\"No suitable time found.\")\n```"
    }
]