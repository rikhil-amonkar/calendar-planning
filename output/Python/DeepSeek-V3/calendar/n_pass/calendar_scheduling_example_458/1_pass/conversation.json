[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Wayne, Melissa, Catherine, Gregory, Victoria, Thomas and Jennifer for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nWayne is free the entire day.\nMelissa has meetings on Monday during 10:00 to 11:00, 12:30 to 14:00, 15:00 to 15:30; \nCatherine is free the entire day.\nGregory has blocked their calendar on Monday during 12:30 to 13:00, 15:30 to 16:00; \nVictoria is busy on Monday during 9:00 to 9:30, 10:30 to 11:30, 13:00 to 14:00, 14:30 to 15:00, 15:30 to 16:30; \nThomas has meetings on Monday during 10:00 to 12:00, 12:30 to 13:00, 14:30 to 16:00; \nJennifer has blocked their calendar on Monday during 9:00 to 9:30, 10:00 to 10:30, 11:00 to 13:00, 13:30 to 14:30, 15:00 to 15:30, 16:00 to 16:30; \n\nWayne would like to avoid more meetings on Monday before 14:00. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom typing import List, Dict, Tuple\nfrom collections import defaultdict\n\ndef find_meeting_time(\n    participants: List[str],\n    schedules: Dict[str, List[Tuple[str, str]]],\n    preferences: Dict[str, List[Tuple[str, str]]],\n    duration_minutes: int,\n    work_hours: Tuple[str, str],\n    day: str\n) -> Tuple[str, str]:\n    # Convert all time slots to minutes since midnight for easier comparison\n    def time_to_minutes(time_str: str) -> int:\n        hh, mm = map(int, time_str.split(':'))\n        return hh * 60 + mm\n\n    def minutes_to_time(minutes: int) -> str:\n        hh = minutes // 60\n        mm = minutes % 60\n        return f\"{hh:02d}:{mm:02d}\"\n\n    work_start, work_end = work_hours\n    work_start_min = time_to_minutes(work_start)\n    work_end_min = time_to_minutes(work_end)\n    duration = duration_minutes\n\n    # Collect all busy intervals for each participant\n    busy_intervals = defaultdict(list)\n    for participant, intervals in schedules.items():\n        for start, end in intervals:\n            start_min = time_to_minutes(start)\n            end_min = time_to_minutes(end)\n            busy_intervals[participant].append((start_min, end_min))\n\n    # Add preference constraints as busy intervals\n    for participant, intervals in preferences.items():\n        for start, end in intervals:\n            start_min = time_to_minutes(start)\n            end_min = time_to_minutes(end)\n            busy_intervals[participant].append((start_min, end_min))\n\n    # Merge overlapping or adjacent intervals for each participant\n    for participant in busy_intervals:\n        intervals = sorted(busy_intervals[participant])\n        merged = []\n        for interval in intervals:\n            if not merged:\n                merged.append(interval)\n            else:\n                last_start, last_end = merged[-1]\n                current_start, current_end = interval\n                if current_start <= last_end:\n                    merged[-1] = (last_start, max(last_end, current_end))\n                else:\n                    merged.append(interval)\n        busy_intervals[participant] = merged\n\n    # Find all possible free intervals for each participant\n    free_intervals = defaultdict(list)\n    for participant in participants:\n        intervals = busy_intervals.get(participant, [])\n        free = []\n        prev_end = work_start_min\n        for start, end in intervals:\n            if start > prev_end:\n                free.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        if prev_end < work_end_min:\n            free.append((prev_end, work_end_min))\n        free_intervals[participant] = free\n\n    # Find overlapping free intervals across all participants\n    common_free = free_intervals[participants[0]]\n    for participant in participants[1:]:\n        participant_free = free_intervals[participant]\n        new_common_free = []\n        i = j = 0\n        while i < len(common_free) and j < len(participant_free):\n            start1, end1 = common_free[i]\n            start2, end2 = participant_free[j]\n            overlap_start = max(start1, start2)\n            overlap_end = min(end1, end2)\n            if overlap_start < overlap_end:\n                new_common_free.append((overlap_start, overlap_end))\n            if end1 < end2:\n                i += 1\n            else:\n                j += 1\n        common_free = new_common_free\n\n    # Find the first suitable interval\n    for start, end in common_free:\n        if end - start >= duration:\n            meeting_start = start\n            meeting_end = meeting_start + duration\n            return (\n                minutes_to_time(meeting_start),\n                minutes_to_time(meeting_end)\n            )\n\n    return None, None\n\nif __name__ == \"__main__\":\n    participants = [\n        \"Wayne\", \"Melissa\", \"Catherine\", \"Gregory\", \n        \"Victoria\", \"Thomas\", \"Jennifer\"\n    ]\n    schedules = {\n        \"Melissa\": [(\"10:00\", \"11:00\"), (\"12:30\", \"14:00\"), (\"15:00\", \"15:30\")],\n        \"Gregory\": [(\"12:30\", \"13:00\"), (\"15:30\", \"16:00\")],\n        \"Victoria\": [\n            (\"9:00\", \"9:30\"), (\"10:30\", \"11:30\"), (\"13:00\", \"14:00\"),\n            (\"14:30\", \"15:00\"), (\"15:30\", \"16:30\")\n        ],\n        \"Thomas\": [(\"10:00\", \"12:00\"), (\"12:30\", \"13:00\"), (\"14:30\", \"16:00\")],\n        \"Jennifer\": [\n            (\"9:00\", \"9:30\"), (\"10:00\", \"10:30\"), (\"11:00\", \"13:00\"),\n            (\"13:30\", \"14:30\"), (\"15:00\", \"15:30\"), (\"16:00\", \"16:30\")\n        ]\n    }\n    preferences = {\n        \"Wayne\": [(\"9:00\", \"14:00\")]  # Wayne prefers no meetings before 14:00\n    }\n    duration = 30\n    work_hours = (\"9:00\", \"17:00\")\n    day = \"Monday\"\n\n    start_time, end_time = find_meeting_time(\n        participants, schedules, preferences, duration, work_hours, day\n    )\n\n    if start_time and end_time:\n        print(f\"{day}:{start_time}:{end_time}\")\n    else:\n        print(\"No suitable time found.\")\n```"
    }
]