[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Bryan and Nicholas for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday, Wednesday, Thursday or Friday. \n\nHere are the existing schedules for everyone during the days: \nBryan has meetings on Thursday during 9:30 to 10:00, 12:30 to 13:00, Friday during 10:30 to 11:00, 14:00 to 14:30; \nNicholas has meetings on Monday during 11:30 to 12:00, 13:00 to 15:30, Tuesday during 9:00 to 9:30, 11:00 to 13:30, 14:00 to 16:30, Wednesday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 13:30, 14:00 to 14:30, 15:00 to 16:30, Thursday during 10:30 to 11:30, 12:00 to 12:30, 15:00 to 15:30, 16:30 to 17:00, Friday during 9:00 to 10:30, 11:00 to 12:00, 12:30 to 14:30, 15:30 to 16:00, 16:30 to 17:00; \n\nBryan would like to avoid more meetings on Tuesday. Nicholas would rather not meet on Monday. Thursday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import time\n\ndef find_meeting_time(bryan_schedule, nicholas_schedule, days, duration_hours=1):\n    work_start = time(9, 0)\n    work_end = time(17, 0)\n    \n    for day in days:\n        # Get busy times for Bryan and Nicholas on the current day\n        bryan_busy = bryan_schedule.get(day, [])\n        nicholas_busy = nicholas_schedule.get(day, [])\n        \n        # Combine and sort all busy intervals\n        all_busy = bryan_busy + nicholas_busy\n        all_busy.sort()\n        \n        # Find free slots\n        free_slots = []\n        prev_end = work_start\n        \n        for busy_start, busy_end in all_busy:\n            if busy_start > prev_end:\n                free_slots.append((prev_end, busy_start))\n            prev_end = max(prev_end, busy_end)\n        \n        if prev_end < work_end:\n            free_slots.append((prev_end, work_end))\n        \n        # Check each free slot for duration\n        for slot_start, slot_end in free_slots:\n            slot_duration = (slot_end.hour - slot_start.hour) * 60 + (slot_end.minute - slot_start.minute)\n            if slot_duration >= duration_hours * 60:\n                meeting_end = time(slot_start.hour + duration_hours, slot_start.minute)\n                return day, slot_start, meeting_end\n    \n    return None, None, None\n\n# Define schedules\nbryan_schedule = {\n    'Thursday': [(time(9, 30), time(10, 0)), (time(12, 30), time(13, 0))],\n    'Friday': [(time(10, 30), time(11, 0)), (time(14, 0), time(14, 30))],\n}\n\nnicholas_schedule = {\n    'Monday': [(time(11, 30), time(12, 0)), (time(13, 0), time(15, 30))],\n    'Tuesday': [(time(9, 0), time(9, 30)), (time(11, 0), time(13, 30)), (time(14, 0), time(16, 30))],\n    'Wednesday': [(time(9, 0), time(9, 30)), (time(10, 0), time(11, 0)), (time(11, 30), time(13, 30)), \n                  (time(14, 0), time(14, 30)), (time(15, 0), time(16, 30))],\n    'Thursday': [(time(10, 30), time(11, 30)), (time(12, 0), time(12, 30)), (time(15, 0), time(15, 30)), \n                 (time(16, 30), time(17, 0))],\n    'Friday': [(time(9, 0), time(10, 30)), (time(11, 0), time(12, 0)), (time(12, 30), time(14, 30)), \n               (time(15, 30), time(16, 0)), (time(16, 30), time(17, 0))],\n}\n\n# Preferences: Bryan avoids Tuesday, Nicholas avoids Monday and Thursday\ndays_to_check = ['Wednesday', 'Friday']  # Excluded Monday, Tuesday, Thursday based on preferences\n\nday, start_time, end_time = find_meeting_time(bryan_schedule, nicholas_schedule, days_to_check)\n\nif day:\n    print(f\"{day}: {start_time.hour:02d}:{start_time.minute:02d}:{end_time.hour:02d}:{end_time.minute:02d}\")\nelse:\n    print(\"No suitable time found.\")\n```"
    }
]