[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Ryan, Ruth and Denise for one hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nRyan is busy on Monday during 9:00 to 9:30, 12:30 to 13:00; \nRuthhas no meetings the whole day.\nDenise has blocked their calendar on Monday during 9:30 to 10:30, 12:00 to 13:00, 14:30 to 16:30; \n\nDenise do not want to meet on Monday after 12:30. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef find_meeting_time(participants_schedules, preferences, duration_hours, work_hours_start, work_hours_end, day):\n    # Convert all time strings to minutes since 9:00 (work_hours_start)\n    def time_to_minutes(time_str):\n        hh, mm = map(int, time_str.split(':'))\n        return (hh - work_hours_start) * 60 + mm\n\n    def minutes_to_time(minutes):\n        hh = work_hours_start + minutes // 60\n        mm = minutes % 60\n        return f\"{hh:02d}:{mm:02d}\"\n\n    work_start = time_to_minutes(work_hours_start)\n    work_end = time_to_minutes(work_hours_end)\n    duration = duration_hours * 60\n\n    # Collect all busy intervals for all participants\n    busy_intervals = []\n    for participant, schedules in participants_schedules.items():\n        for start, end in schedules:\n            start_min = time_to_minutes(start)\n            end_min = time_to_minutes(end)\n            busy_intervals.append((start_min, end_min))\n\n    # Add preference constraints as busy intervals\n    for participant, pref in preferences.items():\n        if pref.get('not_after'):\n            not_after_min = time_to_minutes(pref['not_after'])\n            busy_intervals.append((not_after_min, work_end))\n\n    # Sort all busy intervals by start time\n    busy_intervals.sort()\n\n    # Merge overlapping or adjacent busy intervals\n    merged = []\n    for start, end in busy_intervals:\n        if not merged:\n            merged.append([start, end])\n        else:\n            last_start, last_end = merged[-1]\n            if start <= last_end:\n                merged[-1][1] = max(last_end, end)\n            else:\n                merged.append([start, end])\n\n    # Find available slots between busy intervals\n    available_slots = []\n    prev_end = work_start\n    for start, end in merged:\n        if start > prev_end:\n            available_slots.append((prev_end, start))\n        prev_end = max(prev_end, end)\n    if prev_end < work_end:\n        available_slots.append((prev_end, work_end))\n\n    # Check each available slot for duration\n    for slot_start, slot_end in available_slots:\n        if slot_end - slot_start >= duration:\n            meeting_start = slot_start\n            meeting_end = meeting_start + duration\n            return (\n                day,\n                f\"{minutes_to_time(meeting_start)}:{minutes_to_time(meeting_end)}\"\n            )\n\n    return None\n\n# Define the problem\nparticipants_schedules = {\n    'Ryan': [('9:00', '9:30'), ('12:30', '13:00')],\n    'Ruth': [],\n    'Denise': [('9:30', '10:30'), ('12:00', '13:00'), ('14:30', '16:30')],\n}\n\npreferences = {\n    'Denise': {'not_after': '12:30'},\n}\n\nduration_hours = 1\nwork_hours_start = 9\nwork_hours_end = 17\nday = 'Monday'\n\n# Find the meeting time\nresult = find_meeting_time(\n    participants_schedules,\n    preferences,\n    duration_hours,\n    work_hours_start,\n    work_hours_end,\n    day\n)\n\nif result:\n    day, time_range = result\n    start, end = time_range.split(':')\n    print(f\"{day}: {start}:{end}\")\nelse:\n    print(\"No suitable time found.\")\n```"
    }
]