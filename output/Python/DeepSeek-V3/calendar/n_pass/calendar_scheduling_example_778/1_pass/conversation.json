[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Susan and Sandra for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nSusan has blocked their calendar on Monday during 12:30 to 13:00, 13:30 to 14:00, Tuesday during 11:30 to 12:00, Wednesday during 9:30 to 10:30, 14:00 to 14:30, 15:30 to 16:30; \nSandra has meetings on Monday during 9:00 to 13:00, 14:00 to 15:00, 16:00 to 16:30, Tuesday during 9:00 to 9:30, 10:30 to 12:00, 12:30 to 13:30, 14:00 to 14:30, 16:00 to 17:00, Wednesday during 9:00 to 11:30, 12:00 to 12:30, 13:00 to 17:00; \n\nSusan would rather not meet on Tuesday. Sandra can not meet on Monday after 16:00. Wednesday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef find_meeting_time():\n    # Define work hours and days to consider\n    work_hours_start = 9 * 60  # 9:00 in minutes\n    work_hours_end = 17 * 60    # 17:00 in minutes\n    days = ['Monday', 'Tuesday', 'Wednesday']\n    \n    # Define blocked times for each participant in minutes since midnight\n    susan_blocked = {\n        'Monday': [(12 * 60 + 30, 13 * 60), (13 * 60 + 30, 14 * 60)],\n        'Tuesday': [(11 * 60 + 30, 12 * 60)],\n        'Wednesday': [(9 * 60 + 30, 10 * 60 + 30), (14 * 60, 14 * 60 + 30), (15 * 60 + 30, 16 * 60 + 30)]\n    }\n    \n    sandra_blocked = {\n        'Monday': [(9 * 60, 13 * 60), (14 * 60, 15 * 60), (16 * 60, 16 * 60 + 30)],\n        'Tuesday': [(9 * 60, 9 * 60 + 30), (10 * 60 + 30, 12 * 60), (12 * 60 + 30, 13 * 60 + 30), (14 * 60, 14 * 60 + 30), (16 * 60, 17 * 60)],\n        'Wednesday': [(9 * 60, 11 * 60 + 30), (12 * 60, 12 * 60 + 30), (13 * 60, 17 * 60)]\n    }\n    \n    meeting_duration = 30  # minutes\n    \n    # Iterate through each day\n    for day in days:\n        # Skip Tuesday if Susan prefers not to meet then\n        if day == 'Tuesday':\n            continue\n        \n        # Get blocked times for both participants\n        susan_day = susan_blocked.get(day, [])\n        sandra_day = sandra_blocked.get(day, [])\n        \n        # Combine and sort all blocked times\n        all_blocked = susan_day + sandra_day\n        all_blocked.sort()\n        \n        # Find available slots\n        available_slots = []\n        prev_end = work_hours_start\n        \n        for start, end in all_blocked:\n            if start > prev_end:\n                available_slots.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        \n        # Check after last blocked time\n        if prev_end < work_hours_end:\n            available_slots.append((prev_end, work_hours_end))\n        \n        # Check for a slot that fits the meeting duration\n        for slot_start, slot_end in available_slots:\n            if slot_end - slot_start >= meeting_duration:\n                # Found a suitable slot\n                meeting_start = slot_start\n                meeting_end = meeting_start + meeting_duration\n                \n                # Convert back to HH:MM format\n                def minutes_to_time(minutes):\n                    hours = minutes // 60\n                    mins = minutes % 60\n                    return f\"{hours:02d}:{mins:02d}\"\n                \n                time_str = f\"{minutes_to_time(meeting_start)}:{minutes_to_time(meeting_end)}\"\n                print(f\"{day}: {time_str}\")\n                return\n    \n    print(\"No suitable time found.\")\n\nfind_meeting_time()\n```"
    }
]