[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Larry and Samuel for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nLarry's calendar is wide open the entire week.\nSamuel has meetings on Monday during 10:30 to 11:00, 12:00 to 12:30, 13:00 to 15:00, 15:30 to 16:30, Tuesday during 9:00 to 12:00, 14:00 to 15:30, 16:30 to 17:00, Wednesday during 10:30 to 11:00, 11:30 to 12:00, 12:30 to 13:00, 14:00 to 14:30, 15:00 to 16:00; \n\nLarry would rather not meet on Wednesday. Samuel would like to avoid more meetings on Tuesday. The group would like to meet at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef find_meeting_time():\n    # Define work hours\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n    \n    # Define days to consider and their constraints\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n    avoid_days = {\"Larry\": [\"Wednesday\"], \"Samuel\": [\"Tuesday\"]}\n    \n    # Samuel's meetings in minutes since midnight for each day\n    samuel_meetings = {\n        \"Monday\": [\n            (10 * 60 + 30, 11 * 60),      # 10:30-11:00\n            (12 * 60, 12 * 60 + 30),       # 12:00-12:30\n            (13 * 60, 15 * 60),            # 13:00-15:00\n            (15 * 60 + 30, 16 * 60 + 30),  # 15:30-16:30\n        ],\n        \"Tuesday\": [\n            (9 * 60, 12 * 60),             # 9:00-12:00\n            (14 * 60, 15 * 60 + 30),       # 14:00-15:30\n            (16 * 60 + 30, 17 * 60),      # 16:30-17:00\n        ],\n        \"Wednesday\": [\n            (10 * 60 + 30, 11 * 60),      # 10:30-11:00\n            (11 * 60 + 30, 12 * 60),       # 11:30-12:00\n            (12 * 60 + 30, 13 * 60),       # 12:30-13:00\n            (14 * 60, 14 * 60 + 30),       # 14:00-14:30\n            (15 * 60, 16 * 60),            # 15:00-16:00\n        ],\n    }\n    \n    # Larry has no meetings, so only constrained by work hours and avoid_days\n    meeting_duration = 30  # minutes\n    \n    # Iterate through days in order, respecting preferences\n    for day in days:\n        # Check if day is avoided by any participant\n        if day in avoid_days[\"Larry\"] or day in avoid_days[\"Samuel\"]:\n            continue\n        \n        # Get Samuel's meetings for the day\n        meetings = samuel_meetings[day]\n        \n        # Find available slots for Samuel (gaps between meetings)\n        available_slots = []\n        prev_end = work_start\n        \n        for start, end in sorted(meetings):\n            if start > prev_end:\n                available_slots.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        \n        # Check after last meeting\n        if prev_end < work_end:\n            available_slots.append((prev_end, work_end))\n        \n        # Check each available slot for sufficient duration\n        for slot_start, slot_end in available_slots:\n            if slot_end - slot_start >= meeting_duration:\n                # Found a suitable time\n                start_time = slot_start\n                end_time = start_time + meeting_duration\n                \n                # Convert times back to HH:MM format\n                def minutes_to_time(minutes):\n                    hours = minutes // 60\n                    mins = minutes % 60\n                    return f\"{hours:02d}:{mins:02d}\"\n                \n                time_str = f\"{minutes_to_time(start_time)}:{minutes_to_time(end_time)}\"\n                return day, time_str\n    \n    return None, None\n\nday, time_range = find_meeting_time()\nprint(f\"{day}: {time_range}\")\n```"
    }
]