[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Patricia and Jesse for one hour between the work hours of 9:00 to 17:00 on either Monday or Tuesday. \n\nHere are the existing schedules for everyone during the days: \nPatricia has meetings on Monday during 10:00 to 10:30, 11:30 to 12:00, 13:00 to 13:30, 14:30 to 15:30, 16:00 to 16:30, Tuesday during 10:00 to 10:30, 11:00 to 12:00, 14:00 to 16:00, 16:30 to 17:00; \nJesse has blocked their calendar on Monday during 9:00 to 17:00, Tuesday during 11:00 to 11:30, 12:00 to 12:30, 13:00 to 14:00, 14:30 to 15:00, 15:30 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom typing import List, Dict, Tuple\n\ndef parse_time(time_str: str) -> int:\n    \"\"\"Convert time string in HH:MM format to minutes since 9:00.\"\"\"\n    hours, minutes = map(int, time_str.split(':'))\n    return (hours - 9) * 60 + minutes\n\ndef format_time(minutes: int) -> str:\n    \"\"\"Convert minutes since 9:00 back to HH:MM format.\"\"\"\n    hours = 9 + minutes // 60\n    minutes = minutes % 60\n    return f\"{hours:02d}:{minutes:02d}\"\n\ndef find_meeting_slot(\n    participants: List[Dict[str, List[Tuple[str, str]]]],\n    days: List[str],\n    work_hours: Tuple[str, str],\n    duration: int\n) -> Tuple[str, str]:\n    \"\"\"Find a meeting slot that works for all participants.\"\"\"\n    work_start = parse_time(work_hours[0])\n    work_end = parse_time(work_hours[1])\n    \n    for day in days:\n        # Initialize free slots for the day (work hours)\n        free_slots = [(work_start, work_end)]\n        \n        # Process each participant's schedule for the day\n        for participant in participants:\n            day_schedule = participant.get(day, [])\n            new_free_slots = []\n            \n            for slot_start, slot_end in free_slots:\n                current_start = slot_start\n                \n                # Sort meetings by start time\n                day_schedule_sorted = sorted(day_schedule, key=lambda x: parse_time(x[0]))\n                \n                for meeting_start, meeting_end in day_schedule_sorted:\n                    meeting_start_min = parse_time(meeting_start)\n                    meeting_end_min = parse_time(meeting_end)\n                    \n                    if current_start < meeting_start_min:\n                        new_free_slots.append((current_start, meeting_start_min))\n                    \n                    current_start = max(current_start, meeting_end_min)\n                \n                if current_start < slot_end:\n                    new_free_slots.append((current_start, slot_end))\n            \n            free_slots = new_free_slots\n        \n        # Find a slot that fits the duration\n        for slot_start, slot_end in free_slots:\n            if slot_end - slot_start >= duration:\n                meeting_start = format_time(slot_start)\n                meeting_end = format_time(slot_start + duration)\n                return day, f\"{meeting_start}:{meeting_end}\"\n    \n    return None, None\n\ndef main():\n    # Define participants' schedules\n    patricia_schedule = {\n        \"Monday\": [\n            (\"10:00\", \"10:30\"),\n            (\"11:30\", \"12:00\"),\n            (\"13:00\", \"13:30\"),\n            (\"14:30\", \"15:30\"),\n            (\"16:00\", \"16:30\")\n        ],\n        \"Tuesday\": [\n            (\"10:00\", \"10:30\"),\n            (\"11:00\", \"12:00\"),\n            (\"14:00\", \"16:00\"),\n            (\"16:30\", \"17:00\")\n        ]\n    }\n    \n    jesse_schedule = {\n        \"Monday\": [\n            (\"9:00\", \"17:00\")\n        ],\n        \"Tuesday\": [\n            (\"11:00\", \"11:30\"),\n            (\"12:00\", \"12:30\"),\n            (\"13:00\", \"14:00\"),\n            (\"14:30\", \"15:00\"),\n            (\"15:30\", \"17:00\")\n        ]\n    }\n    \n    participants = [patricia_schedule, jesse_schedule]\n    days = [\"Monday\", \"Tuesday\"]\n    work_hours = (\"9:00\", \"17:00\")\n    duration = 60  # minutes\n    \n    day, time_slot = find_meeting_slot(participants, days, work_hours, duration)\n    \n    if day and time_slot:\n        print(f\"{day}, {time_slot}\")\n    else:\n        print(\"No suitable meeting time found.\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]