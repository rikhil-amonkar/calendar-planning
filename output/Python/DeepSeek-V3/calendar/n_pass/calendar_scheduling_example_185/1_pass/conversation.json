[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Kimberly, Megan, Marie and Diana for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nKimberly has meetings on Monday during 10:00 to 10:30, 11:00 to 12:00, 16:00 to 16:30; \nMeganhas no meetings the whole day.\nMarie is busy on Monday during 10:00 to 11:00, 11:30 to 15:00, 16:00 to 16:30; \nDiana is busy on Monday during 9:30 to 10:00, 10:30 to 14:30, 15:30 to 17:00; \n\nMegan would like to avoid more meetings on Monday before 10:00. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef find_meeting_time(participants_schedules, preferences, duration_minutes, work_hours_start, work_hours_end):\n    # Convert all time strings to minutes since midnight for easier calculation\n    def time_to_minutes(time_str):\n        hh, mm = map(int, time_str.split(':'))\n        return hh * 60 + mm\n    \n    def minutes_to_time(minutes):\n        hh = minutes // 60\n        mm = minutes % 60\n        return f\"{hh:02d}:{mm:02d}\"\n    \n    work_start = time_to_minutes(work_hours_start)\n    work_end = time_to_minutes(work_hours_end)\n    \n    # Initialize the free slots as the entire work day\n    free_slots = [(work_start, work_end)]\n    \n    # Process each participant's schedule to find common free slots\n    for schedule in participants_schedules:\n        busy_slots = []\n        for busy in schedule:\n            start, end = map(time_to_minutes, busy.split(' to '))\n            busy_slots.append((start, end))\n        \n        # Sort busy slots by start time\n        busy_slots.sort()\n        \n        # Calculate free slots for this participant\n        current_free = []\n        prev_end = work_start\n        for start, end in busy_slots:\n            if start > prev_end:\n                current_free.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        if prev_end < work_end:\n            current_free.append((prev_end, work_end))\n        \n        # Intersect current_free with existing free_slots\n        new_free_slots = []\n        i = j = 0\n        while i < len(free_slots) and j < len(current_free):\n            slot_start, slot_end = free_slots[i]\n            curr_start, curr_end = current_free[j]\n            \n            # Find overlap\n            overlap_start = max(slot_start, curr_start)\n            overlap_end = min(slot_end, curr_end)\n            \n            if overlap_start < overlap_end:\n                new_free_slots.append((overlap_start, overlap_end))\n            \n            # Move the pointer which ends first\n            if slot_end < curr_end:\n                i += 1\n            else:\n                j += 1\n        \n        free_slots = new_free_slots\n    \n    # Apply preferences\n    preferred_slots = []\n    for start, end in free_slots:\n        # Check if the slot meets preferences\n        if 'before' in preferences and preferences['before']:\n            avoid_before = time_to_minutes(preferences['before'])\n            if end <= avoid_before:\n                continue  # Skip slots entirely before the avoid time\n            if start < avoid_before:\n                start = avoid_before  # Adjust start time\n        \n        if start + duration_minutes <= end:\n            preferred_slots.append((start, end))\n    \n    # Find the earliest possible slot that fits the duration\n    for start, end in preferred_slots:\n        if end - start >= duration_minutes:\n            meeting_start = start\n            meeting_end = meeting_start + duration_minutes\n            return minutes_to_time(meeting_start), minutes_to_time(meeting_end)\n    \n    return None, None\n\n# Define the participants' schedules\nparticipants_schedules = [\n    [\"10:00 to 10:30\", \"11:00 to 12:00\", \"16:00 to 16:30\"],  # Kimberly\n    [],  # Megan\n    [\"10:00 to 11:00\", \"11:30 to 15:00\", \"16:00 to 16:30\"],  # Marie\n    [\"09:30 to 10:00\", \"10:30 to 14:30\", \"15:30 to 17:00\"],  # Diana\n]\n\n# Define preferences\npreferences = {\n    'before': '10:00',  # Megan prefers to avoid meetings before 10:00\n}\n\n# Define meeting details\nduration_minutes = 30\nwork_hours_start = \"09:00\"\nwork_hours_end = \"17:00\"\n\n# Find the meeting time\nstart_time, end_time = find_meeting_time(participants_schedules, preferences, duration_minutes, work_hours_start, work_hours_end)\n\n# Output the result\nif start_time and end_time:\n    print(f\"{start_time}:{end_time}\")\n    print(\"Monday\")\nelse:\n    print(\"No suitable time found.\")\n```"
    }
]