[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Anthony, Pamela and Zachary for one hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nAnthony has meetings on Monday during 9:30 to 10:00, 12:00 to 13:00, 16:00 to 16:30; \nPamela is busy on Monday during 9:30 to 10:00, 16:30 to 17:00; \nZachary has meetings on Monday during 9:00 to 11:30, 12:00 to 12:30, 13:00 to 13:30, 14:30 to 15:00, 16:00 to 17:00; \n\nPamela do not want to meet on Monday after 14:30. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef find_meeting_time(participants_schedules, work_hours, duration, preferences=None):\n    \"\"\"\n    Find a meeting time that fits all participants' schedules and constraints.\n    \n    Args:\n        participants_schedules: Dict of participant names to their busy times in HH:MM format.\n        work_hours: Tuple of (start, end) in HH:MM format.\n        duration: Duration of the meeting in minutes.\n        preferences: Optional constraints (e.g., no meetings after a certain time).\n    \n    Returns:\n        Tuple of (day, start_time, end_time) or None if no slot found.\n    \"\"\"\n    # Convert all times to minutes since midnight for easier calculations\n    def time_to_minutes(time_str):\n        hh, mm = map(int, time_str.split(':'))\n        return hh * 60 + mm\n    \n    def minutes_to_time(minutes):\n        hh = minutes // 60\n        mm = minutes % 60\n        return f\"{hh:02d}:{mm:02d}\"\n    \n    work_start, work_end = map(time_to_minutes, work_hours)\n    duration_min = duration\n    \n    # Collect all busy intervals for all participants\n    all_busy = []\n    for participant, schedules in participants_schedules.items():\n        for busy in schedules:\n            start, end = map(time_to_minutes, busy.split(' to '))\n            all_busy.append((start, end))\n    \n    # Add preference constraints (e.g., Pamela doesn't want to meet after 14:30)\n    if preferences:\n        for participant, constraint in preferences.items():\n            if \"after\" in constraint:\n                time_limit = time_to_minutes(constraint.split(\"after \")[1])\n                all_busy.append((time_limit, work_end))\n    \n    # Sort all busy intervals by start time\n    all_busy.sort()\n    \n    # Find available slots by merging busy intervals\n    merged_busy = []\n    for start, end in all_busy:\n        if not merged_busy:\n            merged_busy.append((start, end))\n        else:\n            last_start, last_end = merged_busy[-1]\n            if start <= last_end:\n                # Overlapping or adjacent intervals, merge them\n                new_start = min(last_start, start)\n                new_end = max(last_end, end)\n                merged_busy[-1] = (new_start, new_end)\n            else:\n                merged_busy.append((start, end))\n    \n    # Now find gaps between merged busy intervals that can fit the meeting\n    available_slots = []\n    prev_end = work_start\n    for start, end in merged_busy:\n        if start > prev_end:\n            available_slots.append((prev_end, start))\n        prev_end = max(prev_end, end)\n    if prev_end < work_end:\n        available_slots.append((prev_end, work_end))\n    \n    # Check each available slot for duration\n    for slot_start, slot_end in available_slots:\n        if slot_end - slot_start >= duration_min:\n            meeting_start = slot_start\n            meeting_end = meeting_start + duration_min\n            return (\n                \"Monday\",\n                minutes_to_time(meeting_start),\n                minutes_to_time(meeting_end)\n            )\n    \n    return None\n\n# Define participants' schedules\nparticipants_schedules = {\n    \"Anthony\": [\n        \"09:30 to 10:00\",\n        \"12:00 to 13:00\",\n        \"16:00 to 16:30\"\n    ],\n    \"Pamela\": [\n        \"09:30 to 10:00\",\n        \"16:30 to 17:00\"\n    ],\n    \"Zachary\": [\n        \"09:00 to 11:30\",\n        \"12:00 to 12:30\",\n        \"13:00 to 13:30\",\n        \"14:30 to 15:00\",\n        \"16:00 to 17:00\"\n    ]\n}\n\n# Define preferences\npreferences = {\n    \"Pamela\": \"do not want to meet after 14:30\"\n}\n\n# Define work hours and duration\nwork_hours = (\"09:00\", \"17:00\")\nduration_minutes = 60  # 1 hour\n\n# Find meeting time\nresult = find_meeting_time(participants_schedules, work_hours, duration_minutes, preferences)\nif result:\n    day, start_time, end_time = result\n    print(f\"{day}: {start_time}:{end_time}\")\nelse:\n    print(\"No suitable time found.\")\n```"
    }
]