[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Ryan and Adam for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nRyan has meetings on Monday during 9:30 to 10:00, 11:00 to 12:00, 13:00 to 13:30, 15:30 to 16:00, Tuesday during 11:30 to 12:30, 15:30 to 16:00, Wednesday during 12:00 to 13:00, 15:30 to 16:00, 16:30 to 17:00; \nAdam is busy on Monday during 9:00 to 10:30, 11:00 to 13:30, 14:00 to 16:00, 16:30 to 17:00, Tuesday during 9:00 to 10:00, 10:30 to 15:30, 16:00 to 17:00, Wednesday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 14:30, 15:00 to 15:30, 16:00 to 16:30; \n\nRyan can not meet on Wednesday. Adam would like to avoid more meetings on Monday before 14:30. Tuesday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef find_meeting_time():\n    # Define work hours\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    \n    # Define days to consider\n    days = ['Monday', 'Tuesday', 'Wednesday']\n    \n    # Define participants' schedules and constraints\n    # Format: {day: [(start1, end1), (start2, end2), ...]} in minutes since midnight\n    ryan_schedule = {\n        'Monday': [(9*60 + 30, 10*60), (11*60, 12*60), (13*60, 13*60 + 30), (15*60 + 30, 16*60)],\n        'Tuesday': [(11*60 + 30, 12*60 + 30), (15*60 + 30, 16*60)],\n        'Wednesday': [(12*60, 13*60), (15*60 + 30, 16*60), (16*60 + 30, 17*60)]\n    }\n    \n    adam_schedule = {\n        'Monday': [(9*60, 10*60 + 30), (11*60, 13*60 + 30), (14*60, 16*60), (16*60 + 30, 17*60)],\n        'Tuesday': [(9*60, 10*60), (10*60 + 30, 15*60 + 30), (16*60, 17*60)],\n        'Wednesday': [(9*60, 9*60 + 30), (10*60, 11*60), (11*60 + 30, 14*60 + 30), (15*60, 15*60 + 30), (16*60, 16*60 + 30)]\n    }\n    \n    # Apply constraints\n    # Ryan cannot meet on Wednesday\n    del ryan_schedule['Wednesday']\n    \n    # Adam wants to avoid Monday before 14:30\n    adam_schedule['Monday'] = [slot for slot in adam_schedule['Monday'] if slot[0] >= 14*60 + 30]\n    \n    # Meeting duration is 30 minutes\n    duration = 30\n    \n    # Iterate through each day to find a suitable time slot\n    for day in days:\n        if day not in ryan_schedule or day not in adam_schedule:\n            continue\n        \n        # Combine and sort all busy slots for both participants\n        busy_slots = ryan_schedule[day] + adam_schedule[day]\n        busy_slots.sort()\n        \n        # Find free slots by checking gaps between busy slots\n        prev_end = work_start\n        free_slots = []\n        \n        for start, end in busy_slots:\n            if start > prev_end:\n                free_slots.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        \n        # Check after the last busy slot\n        if prev_end < work_end:\n            free_slots.append((prev_end, work_end))\n        \n        # Check each free slot for availability of duration\n        for slot_start, slot_end in free_slots:\n            if slot_end - slot_start >= duration:\n                # Found a suitable slot\n                meeting_start = slot_start\n                meeting_end = meeting_start + duration\n                \n                # Format the output\n                start_hh = meeting_start // 60\n                start_mm = meeting_start % 60\n                end_hh = meeting_end // 60\n                end_mm = meeting_end % 60\n                \n                time_str = f\"{start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\"\n                return f\"{day}: {time_str}\"\n    \n    return \"No suitable time found.\"\n\n# Execute the function and print the result\nprint(find_meeting_time())\n```"
    }
]