{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time():\n    # Define work hours\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n    meeting_duration = 30  # minutes\n\n    # Define each person's busy times in minutes since midnight\n    lisa_busy = [\n        (9 * 60, 10 * 60),\n        (10 * 60 + 30, 11 * 60 + 30),\n        (12 * 60 + 30, 13 * 60),\n        (16 * 60, 16 * 60 + 30)\n    ]\n    bobby_busy = [\n        (9 * 60, 9 * 60 + 30),\n        (10 * 60, 10 * 60 + 30),\n        (11 * 60 + 30, 12 * 60),\n        (15 * 60, 15 * 60 + 30)\n    ]\n    randy_busy = [\n        (9 * 60 + 30, 10 * 60),\n        (10 * 60 + 30, 11 * 60),\n        (11 * 60 + 30, 12 * 60 + 30),\n        (13 * 60, 13 * 60 + 30),\n        (14 * 60 + 30, 15 * 60 + 30),\n        (16 * 60, 16 * 60 + 30)\n    ]\n\n    # Bobby's preference: avoid after 15:00\n    bobby_preference_end = 15 * 60\n\n    # Combine all busy times and sort\n    all_busy = lisa_busy + bobby_busy + randy_busy\n    all_busy.sort()\n\n    # Find free slots\n    free_slots = []\n    prev_end = work_start\n\n    for start, end in all_busy:\n        if start > prev_end:\n            free_slots.append((prev_end, start))\n        prev_end = max(prev_end, end)\n\n    if prev_end < work_end:\n        free_slots.append((prev_end, work_end))\n\n    # Filter slots that are >= meeting_duration and respect Bobby's preference\n    valid_slots = []\n    for start, end in free_slots:\n        if end - start >= meeting_duration:\n            # Check if the slot is before Bobby's preference end time or starts before it\n            if start < bobby_preference_end:\n                valid_start = start\n                valid_end = min(end, bobby_preference_end)\n                if valid_end - valid_start >= meeting_duration:\n                    valid_slots.append((valid_start, valid_end))\n\n    # Select the earliest valid slot\n    if valid_slots:\n        chosen_start, chosen_end = valid_slots[0]\n        # Convert minutes back to HH:MM format\n        start_hh = chosen_start // 60\n        start_mm = chosen_start % 60\n        end_hh = (chosen_start + meeting_duration) // 60\n        end_mm = (chosen_start + meeting_duration) % 60\n\n        # Format the output\n        time_range = f\"{start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\"\n        day = \"Monday\"\n        print(f\"{time_range}:{day}\")\n    else:\n        print(\"No suitable time found.\")\n\nfind_meeting_time()\n```",
            "count": "calendar_scheduling_example_33"
        }
    ]
}