{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time(participants_schedules, day, work_hours_start, work_hours_end, duration_minutes):\n    # Convert work hours to minutes since midnight for easier calculation\n    start_time = work_hours_start * 60\n    end_time = work_hours_end * 60\n    duration = duration_minutes\n    \n    # Initialize a list to keep track of busy intervals for all participants\n    busy_intervals = []\n    \n    # Collect all busy intervals from each participant's schedule\n    for schedule in participants_schedules:\n        for interval in schedule:\n            start, end = interval\n            busy_start = start[0] * 60 + start[1]\n            busy_end = end[0] * 60 + end[1]\n            busy_intervals.append((busy_start, busy_end))\n    \n    # Sort all busy intervals by start time\n    busy_intervals_sorted = sorted(busy_intervals, key=lambda x: x[0])\n    \n    # Merge overlapping or adjacent busy intervals\n    merged = []\n    for interval in busy_intervals_sorted:\n        if not merged:\n            merged.append(interval)\n        else:\n            last_start, last_end = merged[-1]\n            current_start, current_end = interval\n            if current_start <= last_end:\n                # Overlapping or adjacent intervals, merge them\n                new_start = last_start\n                new_end = max(last_end, current_end)\n                merged[-1] = (new_start, new_end)\n            else:\n                merged.append(interval)\n    \n    # Find available slots between merged busy intervals\n    available_slots = []\n    previous_end = start_time\n    \n    for interval in merged:\n        current_start, current_end = interval\n        if current_start > previous_end:\n            available_slots.append((previous_end, current_start))\n        previous_end = max(previous_end, current_end)\n    \n    # Check the slot after the last busy interval\n    if previous_end < end_time:\n        available_slots.append((previous_end, end_time))\n    \n    # Find the first available slot that can fit the meeting duration\n    for slot in available_slots:\n        slot_start, slot_end = slot\n        if slot_end - slot_start >= duration:\n            meeting_start = slot_start\n            meeting_end = meeting_start + duration\n            # Convert back to HH:MM format\n            start_hh = meeting_start // 60\n            start_mm = meeting_start % 60\n            end_hh = meeting_end // 60\n            end_mm = meeting_end % 60\n            return (f\"{start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\", day)\n    \n    return None\n\n# Define participants' schedules in HH:MM format converted to tuples of (HH, MM)\njoe_schedule = [\n    ((9, 30), (10, 0)),\n    ((10, 30), (11, 0))\n]\nkeith_schedule = [\n    ((11, 30), (12, 0)),\n    ((15, 0), (15, 30))\n]\npatricia_schedule = [\n    ((9, 0), (9, 30)),\n    ((13, 0), (13, 30))\n]\nnancy_schedule = [\n    ((9, 0), (11, 0)),\n    ((11, 30), (16, 30))\n]\npamela_schedule = [\n    ((9, 0), (10, 0)),\n    ((10, 30), (11, 0)),\n    ((11, 30), (12, 30)),\n    ((13, 0), (14, 0)),\n    ((14, 30), (15, 0)),\n    ((15, 30), (16, 0)),\n    ((16, 30), (17, 0))\n]\n\n# List of all participants' schedules\nparticipants_schedules = [\n    joe_schedule,\n    keith_schedule,\n    patricia_schedule,\n    nancy_schedule,\n    pamela_schedule\n]\n\n# Meeting parameters\nday = \"Monday\"\nwork_hours_start = 9\nwork_hours_end = 17\nduration_minutes = 30\n\n# Find the meeting time\nresult = find_meeting_time(participants_schedules, day, work_hours_start, work_hours_end, duration_minutes)\nif result:\n    time_range, day = result\n    print(f\"{time_range}:{day}\")\nelse:\n    print(\"No available time slot found.\")\n```",
            "count": "calendar_scheduling_example_266"
        }
    ]
}