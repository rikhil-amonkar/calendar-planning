{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:30"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time():\n    # Define work hours and meeting duration\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n    meeting_duration = 60  # 1 hour in minutes\n\n    # Define busy slots for each participant in minutes since midnight\n    ryan_busy = [\n        (9 * 60, 9 * 60 + 30),   # 9:00-9:30\n        (12 * 60 + 30, 13 * 60)  # 12:30-13:00\n    ]\n    ruth_busy = []  # No meetings\n    denise_busy = [\n        (9 * 60 + 30, 10 * 60 + 30),  # 9:30-10:30\n        (12 * 60, 13 * 60),            # 12:00-13:00\n        (14 * 60 + 30, 16 * 60 + 30)   # 14:30-16:30\n    ]\n    denise_no_meet_after = 12 * 60 + 30  # 12:30\n\n    # Combine all busy slots\n    all_busy = ryan_busy + ruth_busy + denise_busy\n\n    # Sort busy slots by start time\n    all_busy.sort()\n\n    # Find available slots\n    available_slots = []\n    prev_end = work_start\n\n    for busy_start, busy_end in all_busy:\n        if busy_start > prev_end:\n            available_slots.append((prev_end, busy_start))\n        prev_end = max(prev_end, busy_end)\n\n    if prev_end < work_end:\n        available_slots.append((prev_end, work_end))\n\n    # Filter slots that meet duration and Denise's constraint\n    valid_slots = []\n    for slot_start, slot_end in available_slots:\n        if slot_end - slot_start >= meeting_duration:\n            # Check if slot starts before Denise's no-meet-after time\n            if slot_start <= denise_no_meet_after:\n                valid_slots.append((slot_start, slot_end))\n\n    # Select the earliest valid slot\n    if valid_slots:\n        meeting_start = valid_slots[0][0]\n        meeting_end = meeting_start + meeting_duration\n    else:\n        return None\n\n    # Convert minutes back to HH:MM format\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        mins = minutes % 60\n        return f\"{hours:02d}:{mins:02d}\"\n\n    start_time = minutes_to_time(meeting_start)\n    end_time = minutes_to_time(meeting_end)\n\n    return f\"{start_time}:{end_time}\", \"Monday\"\n\n# Execute and print the result\nmeeting_time, day = find_meeting_time()\nprint(f\"{{{meeting_time}}} {day}\")\n'''python\ndef find_meeting_time():\n    # Define work hours and meeting duration\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n    meeting_duration = 60  # 1 hour in minutes\n\n    # Define busy slots for each participant in minutes since midnight\n    ryan_busy = [\n        (9 * 60, 9 * 60 + 30),   # 9:00-9:30\n        (12 * 60 + 30, 13 * 60)  # 12:30-13:00\n    ]\n    ruth_busy = []  # No meetings\n    denise_busy = [\n        (9 * 60 + 30, 10 * 60 + 30),  # 9:30-10:30\n        (12 * 60, 13 * 60),            # 12:00-13:00\n        (14 * 60 + 30, 16 * 60 + 30)   # 14:30-16:30\n    ]\n    denise_no_meet_after = 12 * 60 + 30  # 12:30\n\n    # Combine all busy slots\n    all_busy = ryan_busy + ruth_busy + denise_busy\n\n    # Sort busy slots by start time\n    all_busy.sort()\n\n    # Find available slots\n    available_slots = []\n    prev_end = work_start\n\n    for busy_start, busy_end in all_busy:\n        if busy_start > prev_end:\n            available_slots.append((prev_end, busy_start))\n        prev_end = max(prev_end, busy_end)\n\n    if prev_end < work_end:\n        available_slots.append((prev_end, work_end))\n\n    # Filter slots that meet duration and Denise's constraint\n    valid_slots = []\n    for slot_start, slot_end in available_slots:\n        if slot_end - slot_start >= meeting_duration:\n            # Check if slot starts before Denise's no-meet-after time\n            if slot_start <= denise_no_meet_after:\n                valid_slots.append((slot_start, slot_end))\n\n    # Select the earliest valid slot\n    if valid_slots:\n        meeting_start = valid_slots[0][0]\n        meeting_end = meeting_start + meeting_duration\n    else:\n        return None\n\n    # Convert minutes back to HH:MM format\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        mins = minutes % 60\n        return f\"{hours:02d}:{mins:02d}\"\n\n    start_time = minutes_to_time(meeting_start)\n    end_time = minutes_to_time(meeting_end)\n\n    return f\"{start_time}:{end_time}\", \"Monday\"\n\n# Execute and print the result\nmeeting_time, day = find_meeting_time()\nprint(f\"{{{meeting_time}}} {day}\")\n'''",
            "count": "calendar_scheduling_example_36"
        }
    ]
}