{
    "0shot": [
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time():\n    # Define work hours and days to consider\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n    days = ['Monday', 'Tuesday', 'Wednesday']\n    meeting_duration = 30  # minutes\n\n    # Define busy slots for each participant per day in minutes since midnight\n    cheryl_busy = {\n        'Monday': [(9*60, 9*60 + 30), (11*60 + 30, 13*60), (15*60 + 30, 16*60)],\n        'Tuesday': [(15*60, 15*60 + 30)],\n        'Wednesday': []  # Cheryl cannot meet on Wednesday\n    }\n    \n    kyle_busy = {\n        'Monday': [(9*60, 17*60)],\n        'Tuesday': [(9*60 + 30, 17*60)],\n        'Wednesday': [(9*60, 9*60 + 30), (10*60, 13*60), (13*60 + 30, 14*60), (14*60 + 30, 17*60)]\n    }\n\n    # Iterate through each day to find a suitable time\n    for day in days:\n        if day == 'Wednesday':\n            continue  # Cheryl cannot meet on Wednesday\n        \n        # Combine and sort all busy slots for the day\n        all_busy = cheryl_busy[day] + kyle_busy[day]\n        all_busy.sort()\n\n        # Initialize previous end time as work start\n        prev_end = work_start\n\n        # Check gaps between busy slots\n        for busy_start, busy_end in all_busy:\n            if busy_start > prev_end:\n                # Found a gap, check if it's long enough\n                if busy_start - prev_end >= meeting_duration:\n                    # Format the time as HH:MM:HH:MM\n                    start_hh = prev_end // 60\n                    start_mm = prev_end % 60\n                    end_hh = (prev_end + meeting_duration) // 60\n                    end_mm = (prev_end + meeting_duration) % 60\n                    time_str = f\"{start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\"\n                    return day, time_str\n            prev_end = max(prev_end, busy_end)\n\n        # Check after the last busy slot\n        if work_end - prev_end >= meeting_duration:\n            start_hh = prev_end // 60\n            start_mm = prev_end % 60\n            end_hh = (prev_end + meeting_duration) // 60\n            end_mm = (prev_end + meeting_duration) % 60\n            time_str = f\"{start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\"\n            return day, time_str\n\n    return \"No meeting time found\", \"\"\n\nday, time_str = find_meeting_time()\nprint(f\"{day}: {time_str}\")\n```",
            "count": "calendar_scheduling_example_710"
        }
    ]
}