{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time(participants_schedules, work_hours, duration_minutes, day):\n    # Convert all time slots to minutes since start of the day\n    work_start = work_hours[0]\n    work_end = work_hours[1]\n    \n    def time_to_minutes(time_str):\n        hh, mm = map(int, time_str.split(':'))\n        return hh * 60 + mm\n    \n    work_start_min = time_to_minutes(work_start)\n    work_end_min = time_to_minutes(work_end)\n    \n    # Collect all busy intervals for all participants\n    busy_intervals = []\n    for schedule in participants_schedules:\n        for busy in schedule:\n            start, end = map(time_to_minutes, busy)\n            busy_intervals.append((start, end))\n    \n    # Add boundaries as busy intervals to avoid scheduling outside work hours\n    busy_intervals.append((work_start_min - 60, work_start_min))  # before work starts\n    busy_intervals.append((work_end_min, work_end_min + 60))      # after work ends\n    \n    # Sort all busy intervals by start time\n    busy_intervals.sort()\n    \n    # Merge overlapping or adjacent busy intervals\n    merged = []\n    for start, end in busy_intervals:\n        if not merged:\n            merged.append((start, end))\n        else:\n            last_start, last_end = merged[-1]\n            if start <= last_end:\n                new_start = min(last_start, start)\n                new_end = max(last_end, end)\n                merged[-1] = (new_start, new_end)\n            else:\n                merged.append((start, end))\n    \n    # Find available slots between merged busy intervals\n    available_slots = []\n    prev_end = work_start_min\n    for start, end in merged:\n        if start > prev_end:\n            available_slots.append((prev_end, start))\n        prev_end = max(prev_end, end)\n    \n    # Check for available slots after last busy interval\n    if prev_end < work_end_min:\n        available_slots.append((prev_end, work_end_min))\n    \n    # Find the first available slot that can fit the meeting\n    duration = duration_minutes\n    for slot_start, slot_end in available_slots:\n        if slot_end - slot_start >= duration:\n            meeting_start = slot_start\n            meeting_end = meeting_start + duration\n            # Convert back to HH:MM format\n            def minutes_to_time(minutes):\n                hh = minutes // 60\n                mm = minutes % 60\n                return f\"{hh:02d}:{mm:02d}\"\n            start_time = minutes_to_time(meeting_start)\n            end_time = minutes_to_time(meeting_end)\n            return f\"{start_time}:{end_time}\"\n    \n    return None\n\n# Define the participants' schedules\nmichael_schedule = [\n    (\"09:30\", \"10:30\"),\n    (\"15:00\", \"15:30\"),\n    (\"16:00\", \"16:30\"),\n]\n\neric_schedule = []\n\narthur_schedule = [\n    (\"09:00\", \"12:00\"),\n    (\"13:00\", \"15:00\"),\n    (\"15:30\", \"16:00\"),\n    (\"16:30\", \"17:00\"),\n]\n\nparticipants_schedules = [michael_schedule, eric_schedule, arthur_schedule]\nwork_hours = (\"09:00\", \"17:00\")\nduration_minutes = 30\nday = \"Monday\"\n\n# Find the meeting time\nmeeting_time = find_meeting_time(participants_schedules, work_hours, duration_minutes, day)\n\n# Output the result\nprint(f\"{day}:{meeting_time}\")\n```",
            "count": "calendar_scheduling_example_82"
        }
    ]
}