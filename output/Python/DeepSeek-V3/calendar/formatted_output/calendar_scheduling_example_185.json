{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "15:00",
                "end_time": "15:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "15:00",
                "end_time": "15:30"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time(participants_schedules, duration, work_hours, preferences):\n    # Parse work hours\n    work_start, work_end = work_hours.split(' to ')\n    work_start = int(work_start.split(':')[0])\n    work_end = int(work_end.split(':')[0])\n    \n    # Initialize available slots (in minutes since 9:00)\n    slots = []\n    current_time = work_start * 60\n    \n    while current_time + duration <= work_end * 60:\n        slots.append((current_time, current_time + duration))\n        current_time += 30  # Assuming 30-minute increments for simplicity\n    \n    # Apply Megan's preference to avoid meetings before 10:00\n    preferred_start = 10 * 60  # 10:00 in minutes\n    slots = [slot for slot in slots if slot[0] >= preferred_start]\n    \n    # Check each slot against each participant's busy times\n    for slot_start, slot_end in slots:\n        slot_ok = True\n        for participant, meetings in participants_schedules.items():\n            for meeting in meetings:\n                meeting_start, meeting_end = meeting.split(' to ')\n                meeting_start = int(meeting_start.split(':')[0]) * 60 + int(meeting_start.split(':')[1])\n                meeting_end = int(meeting_end.split(':')[0]) * 60 + int(meeting_end.split(':')[1])\n                \n                # Check if slot overlaps with any meeting\n                if not (slot_end <= meeting_start or slot_start >= meeting_end):\n                    slot_ok = False\n                    break\n            if not slot_ok:\n                break\n        \n        if slot_ok:\n            # Convert slot back to HH:MM format\n            start_hh = slot_start // 60\n            start_mm = slot_start % 60\n            end_hh = slot_end // 60\n            end_mm = slot_end % 60\n            return f\"{start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\"\n    \n    return None\n\n# Define participants' schedules\nparticipants_schedules = {\n    'Kimberly': ['10:00 to 10:30', '11:00 to 12:00', '16:00 to 16:30'],\n    'Megan': [],\n    'Marie': ['10:00 to 11:00', '11:30 to 15:00', '16:00 to 16:30'],\n    'Diana': ['9:30 to 10:00', '10:30 to 14:30', '15:30 to 17:00']\n}\n\n# Meeting details\nduration = 30  # minutes\nwork_hours = '9:00 to 17:00'\npreferences = {'Megan': 'avoid before 10:00'}\n\n# Find meeting time\nmeeting_time = find_meeting_time(participants_schedules, duration, work_hours, preferences)\n\n# Output the result\nprint(f\"{meeting_time}:Monday\")\n```",
            "count": "calendar_scheduling_example_185"
        }
    ]
}