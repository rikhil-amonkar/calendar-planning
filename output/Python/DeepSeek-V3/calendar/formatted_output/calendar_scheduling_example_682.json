{
    "0shot": [
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time():\n    # Define work hours\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    \n    # Define days to check\n    days = [\"Monday\", \"Tuesday\"]\n    \n    # Amanda's and Nathan's busy times in minutes since midnight for each day\n    amanda_busy = {\n        \"Monday\": [\n            (9 * 60, 10 * 60 + 30),    # 9:00-10:30\n            (11 * 60, 11 * 60 + 30),   # 11:00-11:30\n            (12 * 60 + 30, 13 * 60),   # 12:30-13:00\n            (13 * 60 + 30, 14 * 60),   # 13:30-14:00\n            (14 * 60 + 30, 15 * 60),  # 14:30-15:00\n        ],\n        \"Tuesday\": [\n            (9 * 60, 9 * 60 + 30),     # 9:00-9:30\n            (10 * 60, 10 * 60 + 30),    # 10:00-10:30\n            (11 * 60 + 30, 12 * 60),   # 11:30-12:00\n            (13 * 60 + 30, 14 * 60 + 30),  # 13:30-14:30\n            (15 * 60 + 30, 16 * 60),    # 15:30-16:00\n            (16 * 60 + 30, 17 * 60),   # 16:30-17:00\n        ]\n    }\n    \n    nathan_busy = {\n        \"Monday\": [\n            (10 * 60, 10 * 60 + 30),   # 10:00-10:30\n            (11 * 60, 11 * 60 + 30),   # 11:00-11:30\n            (13 * 60 + 30, 14 * 60 + 30),  # 13:30-14:30\n            (16 * 60, 16 * 60 + 30),   # 16:00-16:30\n        ],\n        \"Tuesday\": [\n            (9 * 60, 10 * 60 + 30),    # 9:00-10:30\n            (11 * 60, 13 * 60),        # 11:00-13:00\n            (13 * 60 + 30, 14 * 60),   # 13:30-14:00\n            (14 * 60 + 30, 15 * 60 + 30),  # 14:30-15:30\n            (16 * 60, 16 * 60 + 30),   # 16:00-16:30\n        ]\n    }\n    \n    meeting_duration = 30  # minutes\n    \n    # Nathan cannot meet on Monday, so remove Monday\n    days_to_check = [\"Tuesday\"]\n    \n    for day in days_to_check:\n        # Get busy intervals for both participants\n        amanda_intervals = amanda_busy.get(day, [])\n        nathan_intervals = nathan_busy.get(day, [])\n        \n        # Combine and sort all busy intervals\n        all_busy = amanda_intervals + nathan_intervals\n        all_busy.sort()\n        \n        # Merge overlapping or adjacent intervals\n        merged_busy = []\n        for start, end in all_busy:\n            if not merged_busy:\n                merged_busy.append((start, end))\n            else:\n                last_start, last_end = merged_busy[-1]\n                if start <= last_end:\n                    new_start = min(last_start, start)\n                    new_end = max(last_end, end)\n                    merged_busy[-1] = (new_start, new_end)\n                else:\n                    merged_busy.append((start, end))\n        \n        # Check the time before the first busy interval\n        if len(merged_busy) > 0:\n            first_start, first_end = merged_busy[0]\n            if first_start - work_start >= meeting_duration:\n                # Amanda doesn't want to meet on Tuesday after 11:00\n                if day == \"Tuesday\" and work_start >= 11 * 60:\n                    continue\n                meeting_start = work_start\n                meeting_end = meeting_start + meeting_duration\n                return day, meeting_start, meeting_end\n        \n        # Check the time between busy intervals\n        for i in range(len(merged_busy) - 1):\n            current_end = merged_busy[i][1]\n            next_start = merged_busy[i + 1][0]\n            if next_start - current_end >= meeting_duration:\n                # Amanda doesn't want to meet on Tuesday after 11:00\n                if day == \"Tuesday\" and current_end >= 11 * 60:\n                    continue\n                meeting_start = current_end\n                meeting_end = meeting_start + meeting_duration\n                return day, meeting_start, meeting_end\n        \n        # Check the time after the last busy interval\n        if len(merged_busy) > 0:\n            last_start, last_end = merged_busy[-1]\n            if work_end - last_end >= meeting_duration:\n                # Amanda doesn't want to meet on Tuesday after 11:00\n                if day == \"Tuesday\" and last_end >= 11 * 60:\n                    continue\n                meeting_start = last_end\n                meeting_end = meeting_start + meeting_duration\n                return day, meeting_start, meeting_end\n        else:\n            # No busy intervals, any time works\n            # Amanda doesn't want to meet on Tuesday after 11:00\n            if day == \"Tuesday\" and work_start >= 11 * 60:\n                continue\n            meeting_start = work_start\n            meeting_end = meeting_start + meeting_duration\n            return day, meeting_start, meeting_end\n    \n    return None\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\nday, start, end = find_meeting_time()\nstart_time = minutes_to_time(start)\nend_time = minutes_to_time(end)\nprint(f\"{day}: {start_time}:{end_time}\")\n```",
            "count": "calendar_scheduling_example_682"
        }
    ]
}