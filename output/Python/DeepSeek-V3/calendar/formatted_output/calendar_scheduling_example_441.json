{
    "0shot": [
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:00",
                "end_time": "11:30"
            },
            "has_error": true,
            "raw_model_response": "```python\ndef find_meeting_time(participants_schedules, day, work_start, work_end, duration_minutes):\n    # Convert time strings to minutes since 9:00 (540 minutes)\n    def time_to_minutes(time_str):\n        hh, mm = map(int, time_str.split(':'))\n        return hh * 60 + mm\n    \n    work_start_min = time_to_minutes(work_start)\n    work_end_min = time_to_minutes(work_end)\n    \n    # Initialize a list to track busy intervals for all participants\n    all_busy_intervals = []\n    \n    for schedule in participants_schedules:\n        for interval in schedule:\n            start, end = map(time_to_minutes, interval.split(' to '))\n            all_busy_intervals.append((start, end))\n    \n    # Sort all busy intervals by start time\n    all_busy_intervals.sort()\n    \n    # Find the earliest available slot\n    current_time = work_start_min\n    for start, end in all_busy_intervals:\n        if start > current_time and start - current_time >= duration_minutes:\n            # Found a slot\n            meeting_start = current_time\n            meeting_end = meeting_start + duration_minutes\n            # Convert back to HH:MM format\n            def minutes_to_time(minutes):\n                hh = minutes // 60\n                mm = minutes % 60\n                return f\"{hh:02d}:{mm:02d}\"\n            return f\"{minutes_to_time(meeting_start)}:{minutes_to_time(meeting_end)}\"\n        current_time = max(current_time, end)\n    \n    # Check after the last busy interval\n    if work_end_min - current_time >= duration_minutes:\n        meeting_start = current_time\n        meeting_end = meeting_start + duration_minutes\n        def minutes_to_time(minutes):\n            hh = minutes // 60\n            mm = minutes % 60\n            return f\"{hh:02d}:{mm:02d}\"\n        return f\"{minutes_to_time(meeting_start)}:{minutes_to_time(meeting_end)}\"\n    \n    return None\n\n# Define participants' schedules\nparticipants_schedules = [\n    [\"11:30 to 12:00\", \"14:30 to 15:00\"],  # Joan\n    [\"9:00 to 10:00\", \"14:00 to 14:30\", \"16:00 to 16:30\"],  # Megan\n    [],  # Austin\n    [\"9:30 to 10:00\", \"11:30 to 12:00\", \"13:30 to 14:00\", \"16:00 to 16:30\"],  # Betty\n    [\"9:00 to 11:00\", \"12:00 to 13:00\", \"14:00 to 15:00\"],  # Judith\n    [\"9:30 to 10:00\", \"11:30 to 12:30\", \"13:00 to 14:00\", \"15:00 to 15:30\", \"16:00 to 17:00\"],  # Terry\n    [\"9:30 to 10:00\", \"10:30 to 11:00\", \"11:30 to 13:00\", \"14:00 to 16:00\", \"16:30 to 17:00\"],  # Kathryn\n]\n\nday = \"Monday\"\nwork_start = \"9:00\"\nwork_end = \"17:00\"\nduration_minutes = 30\n\n# Find the meeting time\nmeeting_time = find_meeting_time(participants_schedules, day, work_start, work_end, duration_minutes)\n\nif meeting_time:\n    start, end = meeting_time.split(':')\n    print(f\"{{{start}:{end}}} {day}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_441"
        }
    ]
}