{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time(bobby_busy, michael_busy, work_hours, duration, days):\n    # Convert time strings to minutes since 9:00 (540 minutes)\n    def time_to_minutes(time_str):\n        h, m = map(int, time_str.split(':'))\n        return h * 60 + m - 540  # Subtract 540 to start from 0 (9:00)\n\n    def minutes_to_time(minutes):\n        total_minutes = minutes + 540\n        h = total_minutes // 60\n        m = total_minutes % 60\n        return f\"{h:02d}:{m:02d}\"\n\n    # Generate free slots for a person\n    def get_free_slots(busy_slots, day_hours):\n        free_slots = []\n        start_of_day = time_to_minutes(day_hours[0])\n        end_of_day = time_to_minutes(day_hours[1])\n        \n        # Sort busy slots by start time\n        busy_slots_sorted = sorted(busy_slots, key=lambda x: x[0])\n        \n        # Check before first busy slot\n        if busy_slots_sorted and busy_slots_sorted[0][0] > start_of_day:\n            free_slots.append((start_of_day, busy_slots_sorted[0][0]))\n        \n        # Check between busy slots\n        for i in range(len(busy_slots_sorted) - 1):\n            current_end = busy_slots_sorted[i][1]\n            next_start = busy_slots_sorted[i+1][0]\n            if next_start > current_end:\n                free_slots.append((current_end, next_start))\n        \n        # Check after last busy slot\n        if busy_slots_sorted and busy_slots_sorted[-1][1] < end_of_day:\n            free_slots.append((busy_slots_sorted[-1][1], end_of_day))\n        \n        # If no busy slots, the whole day is free\n        if not busy_slots_sorted:\n            free_slots.append((start_of_day, end_of_day))\n        \n        return free_slots\n\n    # Find overlapping free slots between two people\n    def find_overlapping_slots(slots1, slots2, duration):\n        overlapping = []\n        for s1 in slots1:\n            for s2 in slots2:\n                start = max(s1[0], s2[0])\n                end = min(s1[1], s2[1])\n                if end - start >= duration:\n                    overlapping.append((start, end))\n        return overlapping\n\n    # Process each day\n    for day in days:\n        # Get Bobby's busy slots for the day in minutes\n        bobby_day_busy = []\n        for slot in bobby_busy.get(day, []):\n            start, end = map(time_to_minutes, slot.split(' to '))\n            bobby_day_busy.append((start, end))\n        \n        # Get Michael's busy slots for the day in minutes\n        michael_day_busy = []\n        for slot in michael_busy.get(day, []):\n            start, end = map(time_to_minutes, slot.split(' to '))\n            michael_day_busy.append((start, end))\n        \n        # Get free slots for both\n        bobby_free = get_free_slots(bobby_day_busy, work_hours)\n        michael_free = get_free_slots(michael_day_busy, work_hours)\n        \n        # Find overlapping slots\n        overlapping = find_overlapping_slots(bobby_free, michael_free, duration)\n        \n        if overlapping:\n            # Choose the earliest slot\n            earliest_start = overlapping[0][0]\n            meeting_start = minutes_to_time(earliest_start)\n            meeting_end = minutes_to_time(earliest_start + duration)\n            return f\"{day}:{meeting_start}:{meeting_end}\"\n    \n    return \"No suitable time found.\"\n\n# Define inputs\nbobby_busy = {\n    \"Monday\": [\"14:30 to 15:00\"],\n    \"Tuesday\": [\"9:00 to 11:30\", \"12:00 to 12:30\", \"13:00 to 15:00\", \"15:30 to 17:00\"]\n}\n\nmichael_busy = {\n    \"Monday\": [\"9:00 to 10:00\", \"10:30 to 13:30\", \"14:00 to 15:00\", \"15:30 to 17:00\"],\n    \"Tuesday\": [\"9:00 to 10:30\", \"11:00 to 11:30\", \"12:00 to 14:00\", \"15:00 to 16:00\", \"16:30 to 17:00\"]\n}\n\nwork_hours = [\"9:00\", \"17:00\"]\nduration = 30  # minutes\ndays = [\"Monday\", \"Tuesday\"]\n\n# Find and print the meeting time\nresult = find_meeting_time(bobby_busy, michael_busy, work_hours, duration, days)\nprint(result)\n```",
            "count": "calendar_scheduling_example_640"
        }
    ]
}