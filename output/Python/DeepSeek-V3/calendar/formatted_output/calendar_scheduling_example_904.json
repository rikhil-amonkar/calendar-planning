{
    "0shot": [
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": "14:00",
                "end_time": "14:30"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "14:00",
                "end_time": "14:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\").time()\n\ndef time_to_minutes(time_obj):\n    return time_obj.hour * 60 + time_obj.minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return datetime.strptime(f\"{hours:02d}:{mins:02d}\", \"%H:%M\").time()\n\ndef is_available(person_busy, day, start_time, end_time):\n    for busy_block in person_busy.get(day, []):\n        busy_start = time_to_minutes(parse_time(busy_block[0]))\n        busy_end = time_to_minutes(parse_time(busy_block[1]))\n        if not (end_time <= busy_start or start_time >= busy_end):\n            return False\n    return True\n\ndef find_meeting_time(daniel_busy, bradley_busy, preferences, duration_minutes):\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    work_start = time_to_minutes(parse_time(\"9:00\"))\n    work_end = time_to_minutes(parse_time(\"17:00\"))\n    \n    for day in days:\n        # Check preferences\n        if day in preferences.get(\"Daniel\", {}).get(\"avoid_days\", []):\n            continue\n        if day in preferences.get(\"Bradley\", {}).get(\"avoid_days\", []):\n            continue\n        \n        current_time = work_start\n        while current_time + duration_minutes <= work_end:\n            start_time = current_time\n            end_time = current_time + duration_minutes\n            \n            # Check Bradley's before 12:00 preference on Tuesday\n            if day == \"Tuesday\" and end_time <= time_to_minutes(parse_time(\"12:00\")):\n                if preferences.get(\"Bradley\", {}).get(\"avoid_tuesday_before_12\", False):\n                    current_time += 15  # Skip in 15-minute increments\n                    continue\n            \n            # Check both persons' availability\n            daniel_available = is_available(daniel_busy, day, start_time, end_time)\n            bradley_available = is_available(bradley_busy, day, start_time, end_time)\n            \n            if daniel_available and bradley_available:\n                start_str = minutes_to_time(start_time).strftime(\"%H:%M\")\n                end_str = minutes_to_time(end_time).strftime(\"%H:%M\")\n                return day, f\"{start_str}:{end_str}\"\n            \n            current_time += 15  # Check in 15-minute increments\n    \n    return None, None\n\n# Define busy schedules\ndaniel_busy = {\n    \"Monday\": [(\"9:30\", \"10:30\"), (\"12:00\", \"12:30\"), (\"13:00\", \"14:00\"), (\"14:30\", \"15:00\"), (\"15:30\", \"16:00\")],\n    \"Tuesday\": [(\"11:00\", \"12:00\"), (\"13:00\", \"13:30\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    \"Wednesday\": [(\"9:00\", \"10:00\"), (\"14:00\", \"14:30\")],\n    \"Thursday\": [(\"10:30\", \"11:00\"), (\"12:00\", \"13:00\"), (\"14:30\", \"15:00\"), (\"15:30\", \"16:00\")],\n    \"Friday\": [(\"9:00\", \"9:30\"), (\"11:30\", \"12:00\"), (\"13:00\", \"13:30\"), (\"16:30\", \"17:00\")]\n}\n\nbradley_busy = {\n    \"Monday\": [(\"9:30\", \"11:00\"), (\"11:30\", \"12:00\"), (\"12:30\", \"13:00\"), (\"14:00\", \"15:00\")],\n    \"Tuesday\": [(\"10:30\", \"11:00\"), (\"12:00\", \"13:00\"), (\"13:30\", \"14:00\"), (\"15:30\", \"16:30\")],\n    \"Wednesday\": [(\"9:00\", \"10:00\"), (\"11:00\", \"13:00\"), (\"13:30\", \"14:00\"), (\"14:30\", \"17:00\")],\n    \"Thursday\": [(\"9:00\", \"12:30\"), (\"13:30\", \"14:00\"), (\"14:30\", \"15:00\"), (\"15:30\", \"16:30\")],\n    \"Friday\": [(\"9:00\", \"9:30\"), (\"10:00\", \"12:30\"), (\"13:00\", \"13:30\"), (\"14:00\", \"14:30\"), (\"15:30\", \"16:30\")]\n}\n\n# Define preferences\npreferences = {\n    \"Daniel\": {\"avoid_days\": [\"Wednesday\", \"Thursday\"]},\n    \"Bradley\": {\"avoid_days\": [\"Monday\", \"Friday\"], \"avoid_tuesday_before_12\": True}\n}\n\n# Find meeting time\nday, time_range = find_meeting_time(daniel_busy, bradley_busy, preferences, 30)\n\nif day and time_range:\n    print(f\"{day}: {time_range}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_904"
        }
    ]
}