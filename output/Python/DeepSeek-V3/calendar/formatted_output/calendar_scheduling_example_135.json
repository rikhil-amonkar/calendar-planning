{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time(participants_schedules, work_hours, duration_minutes, day):\n    # Convert time strings to minutes since 9:00 (start of work hours)\n    def time_to_minutes(time_str):\n        hh, mm = map(int, time_str.split(':'))\n        return (hh - 9) * 60 + mm  # Assuming work_hours start at 9:00\n\n    # Convert minutes back to time string\n    def minutes_to_time(minutes):\n        hh = 9 + (minutes // 60)\n        mm = minutes % 60\n        return f\"{hh:02d}:{mm:02d}\"\n\n    start_work = time_to_minutes(work_hours[0])\n    end_work = time_to_minutes(work_hours[1])\n    duration = duration_minutes\n\n    # Collect all busy intervals for all participants\n    busy_intervals = []\n    for schedule in participants_schedules:\n        for busy in schedule:\n            start, end = map(time_to_minutes, busy)\n            busy_intervals.append((start, end))\n    \n    # Sort intervals by start time\n    busy_intervals.sort()\n\n    # Merge overlapping or adjacent intervals\n    merged = []\n    for start, end in busy_intervals:\n        if not merged:\n            merged.append([start, end])\n        else:\n            last_start, last_end = merged[-1]\n            if start <= last_end:\n                merged[-1][1] = max(end, last_end)\n            else:\n                merged.append([start, end])\n\n    # Find the first available slot\n    prev_end = start_work\n    for start, end in merged:\n        if start - prev_end >= duration:\n            available_start = prev_end\n            available_end = available_start + duration\n            return (minutes_to_time(available_start), minutes_to_time(available_end))\n        prev_end = max(prev_end, end)\n    \n    # Check after last busy interval\n    if end_work - prev_end >= duration:\n        available_start = prev_end\n        available_end = available_start + duration\n        return (minutes_to_time(available_start), minutes_to_time(available_end))\n    \n    return None\n\n# Define work hours and day\nwork_hours = (\"9:00\", \"17:00\")\nday = \"Monday\"\nduration_minutes = 30\n\n# Define each participant's busy times\nparticipants_schedules = [\n    [],  # Eric has no meetings\n    [(\"10:00\", \"10:30\"), (\"11:00\", \"12:00\"), (\"12:30\", \"13:00\"), (\"15:00\", \"16:00\")],  # Ashley\n    [(\"9:00\", \"9:30\"), (\"10:00\", \"11:30\"), (\"12:30\", \"14:00\"), (\"14:30\", \"17:00\")],  # Ronald\n    [(\"9:00\", \"12:00\"), (\"13:00\", \"17:00\")],  # Larry\n]\n\n# Find the meeting time\nmeeting_time = find_meeting_time(participants_schedules, work_hours, duration_minutes, day)\n\n# Output the result\nif meeting_time:\n    start, end = meeting_time\n    print(f\"{start}:{end}:{day}\")\nelse:\n    print(\"No available time slot found.\")\n```",
            "count": "calendar_scheduling_example_135"
        }
    ]
}