{
    "0shot": [
        {
            "final_program_time": {
                "day": "Friday",
                "start_time": "14:30",
                "end_time": "15:30"
            },
            "expected_time": {
                "day": "Friday",
                "start_time": "14:30",
                "end_time": "15:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom typing import Dict, List, Tuple\n\ndef find_meeting_time(\n    participants: Dict[str, Dict[str, List[Tuple[str, str]]]],\n    preferences: Dict[str, List[str]],\n    work_hours: Tuple[str, str],\n    duration: int,\n    days: List[str]\n) -> Tuple[str, str]:\n    # Convert time string \"HH:MM\" to minutes since 9:00 (540 minutes)\n    def time_to_minutes(time_str: str) -> int:\n        hh, mm = map(int, time_str.split(':'))\n        return hh * 60 + mm\n\n    # Convert minutes back to \"HH:MM\" format\n    def minutes_to_time(minutes: int) -> str:\n        hh = minutes // 60\n        mm = minutes % 60\n        return f\"{hh:02d}:{mm:02d}\"\n\n    # Parse work hours\n    work_start, work_end = time_to_minutes(work_hours[0]), time_to_minutes(work_hours[1])\n    duration_min = duration * 60\n\n    # Iterate through each day to find a suitable time slot\n    for day in days:\n        # Skip days based on preferences\n        skip_day = False\n        for participant, pref_days in preferences.items():\n            if day in pref_days:\n                skip_day = True\n                break\n        if skip_day:\n            continue\n\n        # Collect all busy intervals for the day\n        busy_intervals = []\n        for participant, schedule in participants.items():\n            if day in schedule:\n                for start, end in schedule[day]:\n                    busy_start = time_to_minutes(start)\n                    busy_end = time_to_minutes(end)\n                    busy_intervals.append((busy_start, busy_end))\n\n        # Sort busy intervals by start time\n        busy_intervals.sort()\n\n        # Find available slots\n        available_slots = []\n        prev_end = work_start\n\n        for start, end in busy_intervals:\n            if start > prev_end:\n                available_slots.append((prev_end, start))\n            prev_end = max(prev_end, end)\n\n        if prev_end < work_end:\n            available_slots.append((prev_end, work_end))\n\n        # Check for a slot that can fit the meeting\n        for slot_start, slot_end in available_slots:\n            if slot_end - slot_start >= duration_min:\n                meeting_start = slot_start\n                meeting_end = meeting_start + duration_min\n                return day, f\"{minutes_to_time(meeting_start)}:{minutes_to_time(meeting_end)}\"\n\n    return None, None\n\n# Define participants' schedules\nparticipants = {\n    \"Bryan\": {\n        \"Thursday\": [(\"9:30\", \"10:00\"), (\"12:30\", \"13:00\")],\n        \"Friday\": [(\"10:30\", \"11:00\"), (\"14:00\", \"14:30\")],\n    },\n    \"Nicholas\": {\n        \"Monday\": [(\"11:30\", \"12:00\"), (\"13:00\", \"15:30\")],\n        \"Tuesday\": [(\"9:00\", \"9:30\"), (\"11:00\", \"13:30\"), (\"14:00\", \"16:30\")],\n        \"Wednesday\": [(\"9:00\", \"9:30\"), (\"10:00\", \"11:00\"), (\"11:30\", \"13:30\"), (\"14:00\", \"14:30\"), (\"15:00\", \"16:30\")],\n        \"Thursday\": [(\"10:30\", \"11:30\"), (\"12:00\", \"12:30\"), (\"15:00\", \"15:30\"), (\"16:30\", \"17:00\")],\n        \"Friday\": [(\"9:00\", \"10:30\"), (\"11:00\", \"12:00\"), (\"12:30\", \"14:30\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")],\n    }\n}\n\n# Define preferences\npreferences = {\n    \"Bryan\": [\"Tuesday\"],\n    \"Nicholas\": [\"Monday\", \"Thursday\"],\n}\n\n# Define other parameters\nwork_hours = (\"9:00\", \"17:00\")\nduration = 1  # hour\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\n# Find meeting time\nday, time_range = find_meeting_time(participants, preferences, work_hours, duration, days)\n\n# Output the result\nprint(f\"{day}, {time_range}\")\n```",
            "count": "calendar_scheduling_example_910"
        }
    ]
}