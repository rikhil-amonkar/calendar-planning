{
    "0shot": [
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": true,
            "raw_model_response": "```python\ndef find_meeting_time(participants_schedules, meeting_duration, work_hours_start, work_hours_end):\n    # Convert all time slots to minutes since start of the day for easier calculation\n    def time_to_minutes(time_str):\n        hh, mm = map(int, time_str.split(':'))\n        return hh * 60 + mm\n\n    def minutes_to_time(minutes):\n        hh = minutes // 60\n        mm = minutes % 60\n        return f\"{hh:02d}:{mm:02d}\"\n\n    work_start = time_to_minutes(work_hours_start)\n    work_end = time_to_minutes(work_hours_end)\n\n    # Initialize the free slots as the entire work day\n    free_slots = [(work_start, work_end)]\n\n    # Process each participant's schedule to find common free times\n    for schedule in participants_schedules:\n        busy_slots = []\n        for busy in schedule:\n            start, end = map(time_to_minutes, busy.split(':'))\n            busy_slots.append((start, end))\n        \n        # Sort the busy slots by start time\n        busy_slots.sort()\n\n        # Merge overlapping or adjacent busy slots\n        merged_busy = []\n        for start, end in busy_slots:\n            if not merged_busy:\n                merged_busy.append((start, end))\n            else:\n                last_start, last_end = merged_busy[-1]\n                if start <= last_end:\n                    # Overlapping or adjacent, merge them\n                    new_start = last_start\n                    new_end = max(last_end, end)\n                    merged_busy[-1] = (new_start, new_end)\n                else:\n                    merged_busy.append((start, end))\n        \n        # Calculate free slots for this participant by subtracting busy slots from work hours\n        participant_free = []\n        prev_end = work_start\n        for start, end in merged_busy:\n            if start > prev_end:\n                participant_free.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        if prev_end < work_end:\n            participant_free.append((prev_end, work_end))\n        \n        # Intersect participant's free slots with current common free slots\n        new_free_slots = []\n        i = j = 0\n        while i < len(free_slots) and j < len(participant_free):\n            slot_start, slot_end = free_slots[i]\n            part_start, part_end = participant_free[j]\n\n            # Find the overlapping interval\n            overlap_start = max(slot_start, part_start)\n            overlap_end = min(slot_end, part_end)\n\n            if overlap_start < overlap_end:\n                new_free_slots.append((overlap_start, overlap_end))\n            \n            # Move the pointer which ends first\n            if slot_end < part_end:\n                i += 1\n            else:\n                j += 1\n        \n        free_slots = new_free_slots\n        if not free_slots:\n            return None  # No common free time\n    \n    # Find the first free slot that can accommodate the meeting duration\n    meeting_duration_min = time_to_minutes(meeting_duration) - time_to_minutes(\"0:00\")\n    for start, end in free_slots:\n        if end - start >= meeting_duration_min:\n            meeting_end = start + meeting_duration_min\n            return (minutes_to_time(start), minutes_to_time(meeting_end))\n    \n    return None\n\n# Define the participants' schedules\nparticipants_schedules = [\n    [],  # Tyler is free all day\n    [],  # Kelly is free all day\n    [\"11:00:11:30\", \"14:30:15:00\"],  # Stephanie\n    [],  # Hannah is free all day\n    [\"9:00:9:30\", \"10:00:12:00\", \"12:30:13:00\", \"14:00:17:00\"],  # Joe\n    [\"9:00:10:30\", \"11:30:12:00\", \"13:00:14:00\", \"14:30:15:30\", \"16:00:17:00\"],  # Diana\n    [\"9:00:10:00\", \"10:30:12:00\", \"12:30:13:00\", \"13:30:14:00\", \"14:30:15:30\", \"16:00:16:30\"],  # Deborah\n]\n\nmeeting_duration = \"0:30\"\nwork_hours_start = \"9:00\"\nwork_hours_end = \"17:00\"\n\n# Find the meeting time\nmeeting_time = find_meeting_time(participants_schedules, meeting_duration, work_hours_start, work_hours_end)\n\nif meeting_time:\n    start_time, end_time = meeting_time\n    print(f\"{start_time}:{end_time}:Monday\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_493"
        }
    ]
}