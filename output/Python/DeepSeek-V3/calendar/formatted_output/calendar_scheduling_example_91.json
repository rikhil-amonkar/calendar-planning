{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "14:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time(participants_schedules, duration, work_hours_start, work_hours_end):\n    # Convert time strings to minutes since 9:00 (540 minutes)\n    def time_to_minutes(time_str):\n        hh, mm = map(int, time_str.split(':'))\n        return hh * 60 + mm\n    \n    # Convert minutes back to time string\n    def minutes_to_time(minutes):\n        hh = minutes // 60\n        mm = minutes % 60\n        return f\"{hh:02d}:{mm:02d}\"\n    \n    work_start = time_to_minutes(work_hours_start)\n    work_end = time_to_minutes(work_hours_end)\n    \n    # Initialize the free slots as the entire work day\n    free_slots = [(work_start, work_end)]\n    \n    # Function to subtract busy slots from free slots\n    def subtract_busy(free_slots, busy_start, busy_end):\n        new_free_slots = []\n        for slot_start, slot_end in free_slots:\n            if busy_end <= slot_start or busy_start >= slot_end:\n                new_free_slots.append((slot_start, slot_end))\n            else:\n                if slot_start < busy_start:\n                    new_free_slots.append((slot_start, busy_start))\n                if slot_end > busy_end:\n                    new_free_slots.append((busy_end, slot_end))\n        return new_free_slots\n    \n    # Process each participant's schedule\n    for schedule in participants_schedules:\n        for busy in schedule:\n            busy_start, busy_end = map(time_to_minutes, busy.split(' to '))\n            free_slots = subtract_busy(free_slots, busy_start, busy_end)\n    \n    # Find the first slot that fits the duration\n    duration_minutes = duration * 60\n    for slot_start, slot_end in free_slots:\n        if slot_end - slot_start >= duration_minutes:\n            meeting_start = slot_start\n            meeting_end = meeting_start + duration_minutes\n            return minutes_to_time(meeting_start), minutes_to_time(meeting_end)\n    \n    return None, None\n\n# Define participants' schedules\nparticipants_schedules = [\n    # Danielle's schedule\n    [\"9:00 to 10:00\", \"10:30 to 11:00\", \"14:30 to 15:00\", \"15:30 to 16:00\", \"16:30 to 17:00\"],\n    # Bruce's schedule\n    [\"11:00 to 11:30\", \"12:30 to 13:00\", \"14:00 to 14:30\", \"15:30 to 16:00\"],\n    # Eric's schedule\n    [\"9:00 to 9:30\", \"10:00 to 11:00\", \"11:30 to 13:00\", \"14:30 to 15:30\"]\n]\n\n# Find meeting time\nmeeting_start, meeting_end = find_meeting_time(participants_schedules, 1, \"9:00\", \"17:00\")\n\n# Output the result\nprint(f\"{meeting_start}:{meeting_end}:Monday\")\n```",
            "count": "calendar_scheduling_example_91"
        }
    ]
}