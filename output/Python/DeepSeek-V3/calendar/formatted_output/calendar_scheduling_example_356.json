{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time():\n    # Define work hours\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n    meeting_duration = 30  # minutes\n\n    # Define each person's busy times in minutes since midnight\n    busy_slots = {\n        'Katherine': [(12 * 60, 12 * 60 + 30), (13 * 60, 14 * 60 + 30)],\n        'Rebecca': [],\n        'Julie': [(9 * 60, 9 * 60 + 30), (10 * 60 + 30, 11 * 60), (13 * 60 + 30, 14 * 60), (15 * 60, 15 * 60 + 30)],\n        'Angela': [(9 * 60, 10 * 60), (10 * 60 + 30, 11 * 60), (11 * 60 + 30, 14 * 60), (14 * 60 + 30, 15 * 60), (16 * 60 + 30, 17 * 60)],\n        'Nicholas': [(9 * 60 + 30, 11 * 60), (11 * 60 + 30, 13 * 60 + 30), (14 * 60, 16 * 60), (16 * 60 + 30, 17 * 60)],\n        'Carl': [(9 * 60, 11 * 60), (11 * 60 + 30, 12 * 60 + 30), (13 * 60, 14 * 60 + 30), (15 * 60, 16 * 60), (16 * 60 + 30, 17 * 60)],\n    }\n\n    # Angela's preference: avoid before 15:00\n    angela_preference_start = 15 * 60\n\n    # Combine all busy slots\n    all_busy = []\n    for person in busy_slots:\n        for start, end in busy_slots[person]:\n            all_busy.append((start, end))\n    all_busy.sort()\n\n    # Find free slots by merging busy intervals\n    free_slots = []\n    prev_end = work_start\n    for start, end in all_busy:\n        if start > prev_end:\n            free_slots.append((prev_end, start))\n        prev_end = max(prev_end, end)\n    if prev_end < work_end:\n        free_slots.append((prev_end, work_end))\n\n    # Filter free slots that are >= meeting_duration and after Angela's preference\n    possible_slots = []\n    for start, end in free_slots:\n        if end - start >= meeting_duration and start >= angela_preference_start:\n            possible_slots.append((start, end))\n\n    # Select the earliest possible slot\n    if possible_slots:\n        meeting_start = possible_slots[0][0]\n        meeting_end = meeting_start + meeting_duration\n    else:\n        return \"No suitable time found.\"\n\n    # Convert minutes back to HH:MM format\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        mins = minutes % 60\n        return f\"{hours:02d}:{mins:02d}\"\n\n    start_time = minutes_to_time(meeting_start)\n    end_time = minutes_to_time(meeting_end)\n\n    return f\"{start_time}:{end_time}\"\n\n# Output the result\nprint(f\"{{{find_meeting_time()}}}\")\nprint(\"Monday\")\n```",
            "count": "calendar_scheduling_example_356"
        }
    ]
}