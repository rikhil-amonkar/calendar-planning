{
    "0shot": [
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": "15:00",
                "end_time": "15:30"
            },
            "expected_time": {
                "day": "Thursday",
                "start_time": "16:00",
                "end_time": "16:30"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time():\n    # Define work hours and days to consider\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60    # 17:00 in minutes\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n    meeting_duration = 30  # minutes\n\n    # Betty's busy times in minutes since midnight for each day\n    betty_busy = {\n        'Monday': [(10*60, 10*60+30), (13*60+30, 14*60), (15*60, 15*60+30), (16*60, 16*60+30)],\n        'Tuesday': [(9*60, 9*60+30), (11*60+30, 12*60), (12*60+30, 13*60), (13*60+30, 14*60), (16*60+30, 17*60)],\n        'Wednesday': [(9*60+30, 10*60+30), (13*60, 13*60+30), (14*60, 14*60+30)],\n        'Thursday': [(9*60+30, 10*60), (11*60+30, 12*60), (14*60, 14*60+30), (15*60, 15*60+30), (16*60+30, 17*60)]\n    }\n\n    # Scott's busy times in minutes since midnight for each day\n    scott_busy = {\n        'Monday': [(9*60+30, 15*60), (15*60+30, 16*60), (16*60+30, 17*60)],\n        'Tuesday': [(9*60, 9*60+30), (10*60, 11*60), (11*60+30, 12*60), (12*60+30, 13*60+30), (14*60, 15*60), (16*60, 16*60+30)],\n        'Wednesday': [(9*60+30, 12*60+30), (13*60, 13*60+30), (14*60, 14*60+30), (15*60, 15*60+30), (16*60, 16*60+30)],\n        'Thursday': [(9*60, 9*60+30), (10*60, 10*60+30), (11*60, 12*60), (12*60+30, 13*60), (15*60, 16*60), (16*60+30, 17*60)]\n    }\n\n    # Additional constraints\n    betty_no_days = ['Monday']  # Betty cannot meet on Monday\n    betty_no_before = {'Tuesday': 15*60, 'Thursday': 15*60}  # Betty cannot meet before 15:00 on Tuesday and Thursday\n    scott_avoid_day = 'Wednesday'  # Scott would like to avoid Wednesday\n\n    # Iterate through each day to find a suitable time\n    for day in days:\n        if day in betty_no_days:\n            continue\n        if day == scott_avoid_day:\n            continue\n\n        # Get busy times for both participants on this day\n        busy_times = betty_busy[day] + scott_busy[day]\n        busy_times.sort()  # Sort by start time\n\n        # Determine the earliest start time based on Betty's constraints\n        day_start = work_start\n        if day in betty_no_before:\n            day_start = max(day_start, betty_no_before[day])\n\n        # Initialize the previous end time as the start of the work day\n        prev_end = day_start\n\n        # Check for gaps between busy times\n        for busy_start, busy_end in busy_times:\n            if busy_start > prev_end:\n                # Found a gap, check if it's long enough\n                gap_start = prev_end\n                gap_end = busy_start\n                if gap_end - gap_start >= meeting_duration:\n                    # Found a suitable time\n                    start_time = gap_start\n                    end_time = start_time + meeting_duration\n                    # Format the time as HH:MM\n                    start_str = f\"{start_time // 60:02d}:{start_time % 60:02d}\"\n                    end_str = f\"{end_time // 60:02d}:{end_time % 60:02d}\"\n                    print(f\"{day}: {start_str}:{end_str}\")\n                    return\n            # Update prev_end to the end of the current busy period\n            prev_end = max(prev_end, busy_end)\n\n        # Check the gap after the last busy period until the end of the work day\n        if work_end - prev_end >= meeting_duration:\n            start_time = prev_end\n            end_time = start_time + meeting_duration\n            start_str = f\"{start_time // 60:02d}:{start_time % 60:02d}\"\n            end_str = f\"{end_time // 60:02d}:{end_time % 60:02d}\"\n            print(f\"{day}: {start_str}:{end_str}\")\n            return\n\n    print(\"No suitable time found.\")\n\nfind_meeting_time()\n```",
            "count": "calendar_scheduling_example_867"
        }
    ]
}