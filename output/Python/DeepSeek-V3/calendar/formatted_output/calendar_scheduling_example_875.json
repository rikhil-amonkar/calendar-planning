{
    "0shot": [
        {
            "final_program_time": {
                "day": "Wednesday",
                "start_time": "14:30",
                "end_time": "15:30"
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "14:30",
                "end_time": "15:30"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time():\n    # Define work hours and days\n    work_hours_start = 9 * 60  # 9:00 in minutes\n    work_hours_end = 17 * 60    # 17:00 in minutes\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n    \n    # Define busy times for Natalie and William in minutes since midnight\n    natalie_busy = {\n        'Monday': [(9*60, 9*60 + 30), (10*60, 12*60), (12*60 + 30, 13*60), (14*60, 14*60 + 30), (15*60, 16*60 + 30)],\n        'Tuesday': [(9*60, 9*60 + 30), (10*60, 10*60 + 30), (12*60 + 30, 14*60), (16*60, 17*60)],\n        'Wednesday': [(11*60, 11*60 + 30), (16*60, 16*60 + 30)],\n        'Thursday': [(10*60, 11*60), (11*60 + 30, 15*60), (15*60 + 30, 16*60), (16*60 + 30, 17*60)]\n    }\n    \n    william_busy = {\n        'Monday': [(9*60 + 30, 11*60), (11*60 + 30, 17*60)],\n        'Tuesday': [(9*60, 13*60), (13*60 + 30, 16*60)],\n        'Wednesday': [(9*60, 12*60 + 30), (13*60, 14*60 + 30), (15*60 + 30, 16*60), (16*60 + 30, 17*60)],\n        'Thursday': [(9*60, 10*60 + 30), (11*60, 11*60 + 30), (12*60, 12*60 + 30), (13*60, 14*60), (15*60, 17*60)]\n    }\n    \n    meeting_duration = 60  # 1 hour in minutes\n    \n    for day in days:\n        # Combine and sort all busy intervals for both participants\n        combined_busy = natalie_busy.get(day, []) + william_busy.get(day, [])\n        combined_busy.sort()\n        \n        # Find free intervals\n        free_intervals = []\n        prev_end = work_hours_start\n        \n        for start, end in combined_busy:\n            if start > prev_end:\n                free_intervals.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        \n        if prev_end < work_hours_end:\n            free_intervals.append((prev_end, work_hours_end))\n        \n        # Check if any free interval is long enough\n        for start, end in free_intervals:\n            if end - start >= meeting_duration:\n                meeting_start = start\n                meeting_end = meeting_start + meeting_duration\n                # Format the time as HH:MM:HH:MM\n                start_hh = meeting_start // 60\n                start_mm = meeting_start % 60\n                end_hh = meeting_end // 60\n                end_mm = meeting_end % 60\n                return f\"{day}, {start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\"\n    \n    return \"No suitable time found.\"\n\n# Run the function and print the result\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_875"
        }
    ]
}