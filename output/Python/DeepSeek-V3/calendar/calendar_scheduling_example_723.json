{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define work hours and days to consider\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    # Define participants' schedules and constraints\n    arthur_schedule = {\n        \"Monday\": [\n            (\"11:00\", \"11:30\"),\n            (\"13:30\", \"14:00\"),\n            (\"15:00\", \"15:30\")\n        ],\n        \"Tuesday\": [\n            (\"13:00\", \"13:30\"),\n            (\"16:00\", \"16:30\")\n        ],\n        \"Wednesday\": [\n            (\"10:00\", \"10:30\"),\n            (\"11:00\", \"11:30\"),\n            (\"12:00\", \"12:30\"),\n            (\"14:00\", \"14:30\"),\n            (\"16:00\", \"16:30\")\n        ]\n    }\n    \n    michael_schedule = {\n        \"Monday\": [\n            (\"09:00\", \"12:00\"),\n            (\"12:30\", \"13:00\"),\n            (\"14:00\", \"14:30\"),\n            (\"15:00\", \"17:00\")\n        ],\n        \"Tuesday\": [\n            (\"09:30\", \"11:30\"),\n            (\"12:00\", \"13:30\"),\n            (\"14:00\", \"15:30\")\n        ],\n        \"Wednesday\": [\n            (\"10:00\", \"12:30\"),\n            (\"13:00\", \"13:30\")\n        ]\n    }\n    \n    # Arthur cannot meet on Tuesday\n    days_to_check = [day for day in days if day != \"Tuesday\"]\n    \n    # Iterate through each day to find the earliest available slot\n    for day in days_to_check:\n        # Combine and sort all meetings for the day for both participants\n        all_meetings = []\n        \n        # Add Arthur's meetings\n        for meeting in arthur_schedule.get(day, []):\n            start = datetime.strptime(meeting[0], \"%H:%M\")\n            end = datetime.strptime(meeting[1], \"%H:%M\")\n            all_meetings.append((start, end))\n        \n        # Add Michael's meetings\n        for meeting in michael_schedule.get(day, []):\n            start = datetime.strptime(meeting[0], \"%H:%M\")\n            end = datetime.strptime(meeting[1], \"%H:%M\")\n            all_meetings.append((start, end))\n        \n        # Sort meetings by start time\n        all_meetings.sort()\n        \n        # Check for available slots\n        prev_end = work_start\n        for meeting in all_meetings:\n            meeting_start, meeting_end = meeting\n            if meeting_start > prev_end:\n                # Check if the gap is at least 30 minutes\n                gap = (meeting_start - prev_end).total_seconds() / 60\n                if gap >= 30:\n                    # Found a suitable slot\n                    slot_start = prev_end\n                    slot_end = slot_start + timedelta(minutes=30)\n                    return day, slot_start.time(), slot_end.time()\n            # Update prev_end to the later of the two\n            prev_end = max(prev_end, meeting_end)\n        \n        # Check after the last meeting\n        if prev_end < work_end:\n            gap = (work_end - prev_end).total_seconds() / 60\n            if gap >= 30:\n                slot_start = prev_end\n                slot_end = slot_start + timedelta(minutes=30)\n                return day, slot_start.time(), slot_end.time()\n    \n    return None\n\n# Find the meeting time\nresult = find_meeting_time()\nif result:\n    day, start_time, end_time = result\n    # Format the output as HH:MM:HH:MM and day\n    start_str = start_time.strftime(\"%H:%M\")\n    end_str = end_time.strftime(\"%H:%M\")\n    print(f\"{day}: {start_str}:{end_str}\")\nelse:\n    print(\"No suitable time found.\")\n```",
            "count": "calendar_scheduling_example_723"
        }
    ]
}