{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "15:30",
                "end_time": "16:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "15:30",
                "end_time": "16:00"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef find_meeting_time():\n    # Define work hours\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n\n    # Define participants' busy times in minutes since 9:00\n    # Each block is (start, end)\n    shirley_busy = [(10*60 + 30, 11*60), (12*60, 12*60 + 30)]\n    jacob_busy = [(9*60, 9*60 + 30), (10*60, 10*60 + 30), (11*60, 11*60 + 30),\n                  (12*60 + 30, 13*60 + 30), (14*60 + 30, 15*60)]\n    stephen_busy = [(11*60 + 30, 12*60), (12*60 + 30, 13*60)]\n    margaret_busy = [(9*60, 9*60 + 30), (10*60 + 30, 12*60 + 30),\n                     (13*60, 13*60 + 30), (15*60, 15*60 + 30), (16*60 + 30, 17*60)]\n    mason_busy = [(9*60, 10*60), (10*60 + 30, 11*60), (11*60 + 30, 12*60 + 30),\n                  (13*60, 13*60 + 30), (14*60, 14*60 + 30), (16*60 + 30, 17*60)]\n\n    # Margaret's preference: not before 14:30\n    margaret_pref_start = 14 * 60 + 30\n\n    # Combine all busy times\n    all_busy = []\n    for busy in [shirley_busy, jacob_busy, stephen_busy, margaret_busy, mason_busy]:\n        all_busy.extend(busy)\n\n    # Generate free slots by finding gaps between busy times\n    all_busy.sort()\n    free_slots = []\n    prev_end = work_start\n\n    for start, end in all_busy:\n        if start > prev_end:\n            free_slots.append((prev_end, start))\n        prev_end = max(prev_end, end)\n\n    if prev_end < work_end:\n        free_slots.append((prev_end, work_end))\n\n    # Check each free slot for availability and Margaret's preference\n    meeting_duration = 30\n    for slot_start, slot_end in free_slots:\n        if slot_end - slot_start >= meeting_duration:\n            actual_start = max(slot_start, margaret_pref_start)\n            if actual_start + meeting_duration <= slot_end:\n                # Convert minutes back to HH:MM format\n                start_hh = actual_start // 60\n                start_mm = actual_start % 60\n                end_hh = (actual_start + meeting_duration) // 60\n                end_mm = (actual_start + meeting_duration) % 60\n                return f\"Monday {start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\"\n\n    return \"No suitable time found\"\n\nprint(find_meeting_time())\n```",
            "count": "calendar_scheduling_example_206"
        }
    ]
}