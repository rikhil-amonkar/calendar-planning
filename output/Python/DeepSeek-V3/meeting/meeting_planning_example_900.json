{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Emily",
                        "start_time": "11:15",
                        "end_time": "11:30"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Karen",
                        "start_time": "11:45",
                        "end_time": "12:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "13:00",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "James",
                        "start_time": "14:31",
                        "end_time": "16:31"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Steven",
                        "start_time": "16:38",
                        "end_time": "17:08"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Matthew",
                        "start_time": "17:29",
                        "end_time": "18:14"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "William",
                        "start_time": "18:33",
                        "end_time": "20:03"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Brian",
                        "start_time": "20:30",
                        "end_time": "21:00"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    if time_str == '24:00':\n        return 1440\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input data\ntravel_times = {\n    'Richmond District': {\n        'The Castro': 16, 'Nob Hill': 17, 'Marina District': 9, 'Pacific Heights': 10,\n        'Haight-Ashbury': 10, 'Mission District': 20, 'Chinatown': 20, 'Russian Hill': 13,\n        'Alamo Square': 13, 'Bayview': 27\n    },\n    'The Castro': {\n        'Richmond District': 16, 'Nob Hill': 16, 'Marina District': 21, 'Pacific Heights': 16,\n        'Haight-Ashbury': 6, 'Mission District': 7, 'Chinatown': 22, 'Russian Hill': 18,\n        'Alamo Square': 8, 'Bayview': 19\n    },\n    'Nob Hill': {\n        'Richmond District': 14, 'The Castro': 17, 'Marina District': 11, 'Pacific Heights': 8,\n        'Haight-Ashbury': 13, 'Mission District': 13, 'Chinatown': 6, 'Russian Hill': 5,\n        'Alamo Square': 11, 'Bayview': 19\n    },\n    'Marina District': {\n        'Richmond District': 11, 'The Castro': 22, 'Nob Hill': 12, 'Pacific Heights': 7,\n        'Haight-Ashbury': 16, 'Mission District': 20, 'Chinatown': 15, 'Russian Hill': 8,\n        'Alamo Square': 15, 'Bayview': 27\n    },\n    'Pacific Heights': {\n        'Richmond District': 12, 'The Castro': 16, 'Nob Hill': 8, 'Marina District': 6,\n        'Haight-Ashbury': 11, 'Mission District': 15, 'Chinatown': 11, 'Russian Hill': 7,\n        'Alamo Square': 10, 'Bayview': 22\n    },\n    'Haight-Ashbury': {\n        'Richmond District': 10, 'The Castro': 6, 'Nob Hill': 15, 'Marina District': 17,\n        'Pacific Heights': 12, 'Mission District': 11, 'Chinatown': 19, 'Russian Hill': 17,\n        'Alamo Square': 5, 'Bayview': 18\n    },\n    'Mission District': {\n        'Richmond District': 20, 'The Castro': 7, 'Nob Hill': 12, 'Marina District': 19,\n        'Pacific Heights': 16, 'Haight-Ashbury': 12, 'Chinatown': 16, 'Russian Hill': 15,\n        'Alamo Square': 11, 'Bayview': 14\n    },\n    'Chinatown': {\n        'Richmond District': 20, 'The Castro': 22, 'Nob Hill': 9, 'Marina District': 12,\n        'Pacific Heights': 10, 'Haight-Ashbury': 19, 'Mission District': 17, 'Russian Hill': 7,\n        'Alamo Square': 17, 'Bayview': 20\n    },\n    'Russian Hill': {\n        'Richmond District': 14, 'The Castro': 21, 'Nob Hill': 5, 'Marina District': 7,\n        'Pacific Heights': 7, 'Haight-Ashbury': 17, 'Mission District': 16, 'Chinatown': 9,\n        'Alamo Square': 15, 'Bayview': 23\n    },\n    'Alamo Square': {\n        'Richmond District': 11, 'The Castro': 8, 'Nob Hill': 11, 'Marina District': 15,\n        'Pacific Heights': 10, 'Haight-Ashbury': 5, 'Mission District': 10, 'Chinatown': 15,\n        'Russian Hill': 13, 'Bayview': 16\n    },\n    'Bayview': {\n        'Richmond District': 25, 'The Castro': 19, 'Nob Hill': 20, 'Marina District': 27,\n        'Pacific Heights': 23, 'Haight-Ashbury': 19, 'Mission District': 13, 'Chinatown': 19,\n        'Russian Hill': 23, 'Alamo Square': 16\n    }\n}\n\nfriends = [\n    {'name': 'Matthew', 'location': 'The Castro', 'start': '16:30', 'end': '20:00', 'duration': 45},\n    {'name': 'Rebecca', 'location': 'Nob Hill', 'start': '15:15', 'end': '19:15', 'duration': 105},\n    {'name': 'Brian', 'location': 'Marina District', 'start': '14:15', 'end': '22:00', 'duration': 30},\n    {'name': 'Emily', 'location': 'Pacific Heights', 'start': '11:15', 'end': '19:45', 'duration': 15},\n    {'name': 'Karen', 'location': 'Haight-Ashbury', 'start': '11:45', 'end': '17:30', 'duration': 30},\n    {'name': 'Stephanie', 'location': 'Mission District', 'start': '13:00', 'end': '15:45', 'duration': 75},\n    {'name': 'James', 'location': 'Chinatown', 'start': '14:30', 'end': '19:00', 'duration': 120},\n    {'name': 'Steven', 'location': 'Russian Hill', 'start': '14:00', 'end': '20:00', 'duration': 30},\n    {'name': 'Elizabeth', 'location': 'Alamo Square', 'start': '13:00', 'end': '17:15', 'duration': 120},\n    {'name': 'William', 'location': 'Bayview', 'start': '18:15', 'end': '20:15', 'duration': 90}\n]\n\ncurrent_location = 'Richmond District'\ncurrent_time = time_to_minutes('9:00')\nitinerary = []\n\ndef can_schedule(friend, start_time, end_time):\n    friend_start = time_to_minutes(friend['start'])\n    friend_end = time_to_minutes(friend['end'])\n    return max(start_time, friend_start) + friend['duration'] <= min(end_time, friend_end)\n\ndef find_best_schedule():\n    global current_location, current_time, itinerary\n    best_friend = None\n    best_start = None\n    best_end = None\n    best_travel = float('inf')\n    \n    for friend in friends:\n        if friend in [item['person'] for item in itinerary]:\n            continue\n            \n        travel_time = travel_times[current_location][friend['location']]\n        arrival_time = current_time + travel_time\n        friend_start = time_to_minutes(friend['start'])\n        friend_end = time_to_minutes(friend['end'])\n        \n        start_time = max(arrival_time, friend_start)\n        end_time = min(friend_end, start_time + friend['duration'])\n        \n        if end_time > friend_end:\n            continue\n            \n        if can_schedule(friend, arrival_time, friend_end):\n            if travel_time < best_travel:\n                best_travel = travel_time\n                best_friend = friend\n                best_start = start_time\n                best_end = end_time\n    \n    if best_friend:\n        itinerary.append({\n            'action': 'meet',\n            'location': best_friend['location'],\n            'person': best_friend['name'],\n            'start_time': minutes_to_time(best_start),\n            'end_time': minutes_to_time(best_end)\n        })\n        current_location = best_friend['location']\n        current_time = best_end\n        return True\n    return False\n\nwhile find_best_schedule():\n    pass\n\n# Ensure William is met last if possible\nwilliam = next((f for f in friends if f['name'] == 'William'), None)\nif william and william['name'] not in [item['person'] for item in itinerary]:\n    travel_time = travel_times[current_location][william['location']]\n    arrival_time = current_time + travel_time\n    if can_schedule(william, arrival_time, time_to_minutes(william['end'])):\n        start_time = max(arrival_time, time_to_minutes(william['start']))\n        end_time = min(time_to_minutes(william['end']), start_time + william['duration'])\n        itinerary.append({\n            'action': 'meet',\n            'location': william['location'],\n            'person': william['name'],\n            'start_time': minutes_to_time(start_time),\n            'end_time': minutes_to_time(end_time)\n        })\n\nprint(json.dumps({'itinerary': itinerary}, indent=2))\n```",
            "count": "meeting_planning_example_900"
        }
    ]
}