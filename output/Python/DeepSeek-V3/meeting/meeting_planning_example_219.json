{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Emily",
                        "start_time": "11:45",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Barbara",
                        "start_time": "16:45",
                        "end_time": "17:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Emily",
                        "start_time": "11:45",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Barbara",
                        "start_time": "16:45",
                        "end_time": "17:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%I:%M%p')\n\ndef format_time(dt):\n    return dt.strftime('%H:%M')\n\ndef compute_schedule():\n    # Initialize locations and travel times\n    locations = ['The Castro', 'Alamo Square', 'Union Square', 'Chinatown']\n    travel_times = {\n        ('The Castro', 'Alamo Square'): 8,\n        ('The Castro', 'Union Square'): 19,\n        ('The Castro', 'Chinatown'): 20,\n        ('Alamo Square', 'The Castro'): 8,\n        ('Alamo Square', 'Union Square'): 14,\n        ('Alamo Square', 'Chinatown'): 16,\n        ('Union Square', 'The Castro'): 19,\n        ('Union Square', 'Alamo Square'): 15,\n        ('Union Square', 'Chinatown'): 7,\n        ('Chinatown', 'The Castro'): 22,\n        ('Chinatown', 'Alamo Square'): 17,\n        ('Chinatown', 'Union Square'): 7,\n    }\n\n    # Parse constraints\n    current_time = parse_time('9:00AM')\n    current_location = 'The Castro'\n\n    emily_available_start = parse_time('11:45AM')\n    emily_available_end = parse_time('3:15PM')\n    emily_min_duration = timedelta(minutes=105)\n\n    barbara_available_start = parse_time('4:45PM')\n    barbara_available_end = parse_time('6:15PM')\n    barbara_min_duration = timedelta(minutes=60)\n\n    william_available_start = parse_time('5:15PM')\n    william_available_end = parse_time('7:00PM')\n    william_min_duration = timedelta(minutes=105)\n\n    itinerary = []\n\n    # Try to meet Emily first\n    travel_to_alamo = travel_times[(current_location, 'Alamo Square')]\n    arrival_alamo = current_time + timedelta(minutes=travel_to_alamo)\n    if arrival_alamo <= emily_available_end - emily_min_duration:\n        meet_emily_start = max(arrival_alamo, emily_available_start)\n        meet_emily_end = meet_emily_start + emily_min_duration\n        if meet_emily_end <= emily_available_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Alamo Square\",\n                \"person\": \"Emily\",\n                \"start_time\": format_time(meet_emily_start),\n                \"end_time\": format_time(meet_emily_end)\n            })\n            current_time = meet_emily_end\n            current_location = 'Alamo Square'\n\n    # Now try to meet Barbara and William\n    # First option: meet Barbara then William\n    option1 = []\n    travel_to_union = travel_times[(current_location, 'Union Square')]\n    arrival_union = current_time + timedelta(minutes=travel_to_union)\n    if arrival_union <= barbara_available_end - barbara_min_duration:\n        meet_barbara_start = max(arrival_union, barbara_available_start)\n        meet_barbara_end = meet_barbara_start + barbara_min_duration\n        if meet_barbara_end <= barbara_available_end:\n            option1.append({\n                \"action\": \"meet\",\n                \"location\": \"Union Square\",\n                \"person\": \"Barbara\",\n                \"start_time\": format_time(meet_barbara_start),\n                \"end_time\": format_time(meet_barbara_end)\n            })\n            travel_to_chinatown = travel_times[('Union Square', 'Chinatown')]\n            arrival_chinatown = meet_barbara_end + timedelta(minutes=travel_to_chinatown)\n            if arrival_chinatown <= william_available_end - william_min_duration:\n                meet_william_start = max(arrival_chinatown, william_available_start)\n                meet_william_end = meet_william_start + william_min_duration\n                if meet_william_end <= william_available_end:\n                    option1.append({\n                        \"action\": \"meet\",\n                        \"location\": \"Chinatown\",\n                        \"person\": \"William\",\n                        \"start_time\": format_time(meet_william_start),\n                        \"end_time\": format_time(meet_william_end)\n                    })\n\n    # Second option: meet William then Barbara\n    option2 = []\n    travel_to_chinatown = travel_times[(current_location, 'Chinatown')]\n    arrival_chinatown = current_time + timedelta(minutes=travel_to_chinatown)\n    if arrival_chinatown <= william_available_end - william_min_duration:\n        meet_william_start = max(arrival_chinatown, william_available_start)\n        meet_william_end = meet_william_start + william_min_duration\n        if meet_william_end <= william_available_end:\n            option2.append({\n                \"action\": \"meet\",\n                \"location\": \"Chinatown\",\n                \"person\": \"William\",\n                \"start_time\": format_time(meet_william_start),\n                \"end_time\": format_time(meet_william_end)\n            })\n            travel_to_union = travel_times[('Chinatown', 'Union Square')]\n            arrival_union = meet_william_end + timedelta(minutes=travel_to_union)\n            if arrival_union <= barbara_available_end - barbara_min_duration:\n                meet_barbara_start = max(arrival_union, barbara_available_start)\n                meet_barbara_end = meet_barbara_start + barbara_min_duration\n                if meet_barbara_end <= barbara_available_end:\n                    option2.append({\n                        \"action\": \"meet\",\n                        \"location\": \"Union Square\",\n                        \"person\": \"Barbara\",\n                        \"start_time\": format_time(meet_barbara_start),\n                        \"end_time\": format_time(meet_barbara_end)\n                    })\n\n    # Choose the best option\n    if len(option1) == 2:\n        itinerary.extend(option1)\n    elif len(option2) == 2:\n        itinerary.extend(option2)\n    else:\n        # Try to meet at least one person\n        if len(option1) >= len(option2):\n            itinerary.extend(option1)\n        else:\n            itinerary.extend(option2)\n\n    return {\"itinerary\": itinerary}\n\nresult = compute_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_219"
        }
    ]
}