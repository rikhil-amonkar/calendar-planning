{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "David",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "11:12",
                        "end_time": "12:27"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Robert",
                        "start_time": "12:42",
                        "end_time": "14:12"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "David",
                        "start_time": "10:45",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Timothy",
                        "start_time": "11:12",
                        "end_time": "12:27"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Robert",
                        "start_time": "12:42",
                        "end_time": "14:12"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input parameters\ninitial_location = \"Financial District\"\ninitial_time = \"9:00\"\n\n# Friend constraints\nfriends = [\n    {\n        \"name\": \"David\",\n        \"location\": \"Fisherman's Wharf\",\n        \"available_start\": \"10:45\",\n        \"available_end\": \"15:30\",\n        \"min_duration\": 15\n    },\n    {\n        \"name\": \"Timothy\",\n        \"location\": \"Pacific Heights\",\n        \"available_start\": \"9:00\",\n        \"available_end\": \"15:30\",\n        \"min_duration\": 75\n    },\n    {\n        \"name\": \"Robert\",\n        \"location\": \"Mission District\",\n        \"available_start\": \"12:15\",\n        \"available_end\": \"19:45\",\n        \"min_duration\": 90\n    }\n]\n\n# Travel times in minutes\ntravel_times = {\n    \"Financial District\": {\n        \"Fisherman's Wharf\": 10,\n        \"Pacific Heights\": 13,\n        \"Mission District\": 17\n    },\n    \"Fisherman's Wharf\": {\n        \"Financial District\": 11,\n        \"Pacific Heights\": 12,\n        \"Mission District\": 22\n    },\n    \"Pacific Heights\": {\n        \"Financial District\": 13,\n        \"Fisherman's Wharf\": 13,\n        \"Mission District\": 15\n    },\n    \"Mission District\": {\n        \"Financial District\": 17,\n        \"Fisherman's Wharf\": 22,\n        \"Pacific Heights\": 16\n    }\n}\n\ndef calculate_schedule(order):\n    current_location = initial_location\n    current_time = time_to_minutes(initial_time)\n    schedule = []\n    met_friends = set()\n    \n    for friend_name in order:\n        friend = next(f for f in friends if f[\"name\"] == friend_name)\n        if friend[\"name\"] in met_friends:\n            continue\n        \n        travel_time = travel_times[current_location][friend[\"location\"]]\n        arrival_time = current_time + travel_time\n        available_start = time_to_minutes(friend[\"available_start\"])\n        available_end = time_to_minutes(friend[\"available_end\"])\n        \n        start_time = max(arrival_time, available_start)\n        end_time = start_time + friend[\"min_duration\"]\n        \n        if end_time > available_end:\n            return None\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"person\": friend[\"name\"],\n            \"start_time\": minutes_to_time(start_time),\n            \"end_time\": minutes_to_time(end_time)\n        })\n        \n        current_location = friend[\"location\"]\n        current_time = end_time\n        met_friends.add(friend[\"name\"])\n    \n    return schedule\n\nbest_schedule = None\nbest_meetings = 0\n\n# Try all possible meeting orders\nfor order in permutations([\"David\", \"Timothy\", \"Robert\"]):\n    met_friends = set()\n    schedule = calculate_schedule(order)\n    if schedule and len(schedule) > best_meetings:\n        best_schedule = schedule\n        best_meetings = len(schedule)\n    elif schedule and len(schedule) == best_meetings:\n        # Prefer schedules that meet more important friends first\n        pass\n\nif not best_schedule:\n    # Try meeting just two friends\n    for order in permutations([\"David\", \"Timothy\", \"Robert\"], 2):\n        met_friends = set()\n        schedule = calculate_schedule(order)\n        if schedule and len(schedule) > best_meetings:\n            best_schedule = schedule\n            best_meetings = len(schedule)\n\n# Output the best schedule found\nresult = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_203"
        }
    ]
}