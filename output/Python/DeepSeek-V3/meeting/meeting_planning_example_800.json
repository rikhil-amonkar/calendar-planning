{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "9:10",
                        "end_time": "9:25"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Kenneth",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Brian",
                        "start_time": "14:10",
                        "end_time": "14:55"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Joseph",
                        "start_time": "15:30",
                        "end_time": "16:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Betty",
                        "start_time": "19:00",
                        "end_time": "20:30"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Melissa",
                        "start_time": "20:36",
                        "end_time": "21:06"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Barbara",
                        "start_time": "21:14",
                        "end_time": "21:29"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'Union Square': {\n        'The Castro': 17,\n        'North Beach': 10,\n        'Embarcadero': 11,\n        'Alamo Square': 15,\n        'Nob Hill': 9,\n        'Presidio': 24,\n        'Fisherman\\'s Wharf': 15,\n        'Mission District': 14,\n        'Haight-Ashbury': 18\n    },\n    'The Castro': {\n        'Union Square': 19,\n        'North Beach': 20,\n        'Embarcadero': 22,\n        'Alamo Square': 8,\n        'Nob Hill': 16,\n        'Presidio': 20,\n        'Fisherman\\'s Wharf': 24,\n        'Mission District': 7,\n        'Haight-Ashbury': 6\n    },\n    'North Beach': {\n        'Union Square': 7,\n        'The Castro': 23,\n        'Embarcadero': 6,\n        'Alamo Square': 16,\n        'Nob Hill': 7,\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 5,\n        'Mission District': 18,\n        'Haight-Ashbury': 18\n    },\n    'Embarcadero': {\n        'Union Square': 10,\n        'The Castro': 25,\n        'North Beach': 5,\n        'Alamo Square': 19,\n        'Nob Hill': 10,\n        'Presidio': 20,\n        'Fisherman\\'s Wharf': 6,\n        'Mission District': 20,\n        'Haight-Ashbury': 21\n    },\n    'Alamo Square': {\n        'Union Square': 14,\n        'The Castro': 8,\n        'North Beach': 15,\n        'Embarcadero': 16,\n        'Nob Hill': 11,\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 19,\n        'Mission District': 10,\n        'Haight-Ashbury': 5\n    },\n    'Nob Hill': {\n        'Union Square': 7,\n        'The Castro': 17,\n        'North Beach': 8,\n        'Embarcadero': 9,\n        'Alamo Square': 11,\n        'Presidio': 17,\n        'Fisherman\\'s Wharf': 10,\n        'Mission District': 13,\n        'Haight-Ashbury': 13\n    },\n    'Presidio': {\n        'Union Square': 22,\n        'The Castro': 21,\n        'North Beach': 18,\n        'Embarcadero': 20,\n        'Alamo Square': 19,\n        'Nob Hill': 18,\n        'Fisherman\\'s Wharf': 19,\n        'Mission District': 26,\n        'Haight-Ashbury': 15\n    },\n    'Fisherman\\'s Wharf': {\n        'Union Square': 13,\n        'The Castro': 27,\n        'North Beach': 6,\n        'Embarcadero': 8,\n        'Alamo Square': 21,\n        'Nob Hill': 11,\n        'Presidio': 17,\n        'Mission District': 22,\n        'Haight-Ashbury': 22\n    },\n    'Mission District': {\n        'Union Square': 15,\n        'The Castro': 7,\n        'North Beach': 17,\n        'Embarcadero': 19,\n        'Alamo Square': 11,\n        'Nob Hill': 12,\n        'Presidio': 25,\n        'Fisherman\\'s Wharf': 22,\n        'Haight-Ashbury': 12\n    },\n    'Haight-Ashbury': {\n        'Union Square': 19,\n        'The Castro': 6,\n        'North Beach': 19,\n        'Embarcadero': 20,\n        'Alamo Square': 5,\n        'Nob Hill': 15,\n        'Presidio': 15,\n        'Fisherman\\'s Wharf': 23,\n        'Mission District': 11\n    }\n}\n\n# Friend constraints\nfriends = [\n    {\n        'name': 'Melissa',\n        'location': 'The Castro',\n        'available_start': '20:15',\n        'available_end': '21:15',\n        'min_duration': 30\n    },\n    {\n        'name': 'Kimberly',\n        'location': 'North Beach',\n        'available_start': '7:00',\n        'available_end': '10:30',\n        'min_duration': 15\n    },\n    {\n        'name': 'Joseph',\n        'location': 'Embarcadero',\n        'available_start': '15:30',\n        'available_end': '19:30',\n        'min_duration': 75\n    },\n    {\n        'name': 'Barbara',\n        'location': 'Alamo Square',\n        'available_start': '20:45',\n        'available_end': '21:45',\n        'min_duration': 15\n    },\n    {\n        'name': 'Kenneth',\n        'location': 'Nob Hill',\n        'available_start': '12:15',\n        'available_end': '17:15',\n        'min_duration': 105\n    },\n    {\n        'name': 'Joshua',\n        'location': 'Presidio',\n        'available_start': '16:30',\n        'available_end': '18:15',\n        'min_duration': 105\n    },\n    {\n        'name': 'Brian',\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '9:30',\n        'available_end': '15:30',\n        'min_duration': 45\n    },\n    {\n        'name': 'Steven',\n        'location': 'Mission District',\n        'available_start': '19:30',\n        'available_end': '21:00',\n        'min_duration': 90\n    },\n    {\n        'name': 'Betty',\n        'location': 'Haight-Ashbury',\n        'available_start': '19:00',\n        'available_end': '20:30',\n        'min_duration': 90\n    }\n]\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef can_schedule(friend, start_time, end_time):\n    available_start = time_to_minutes(friend['available_start'])\n    available_end = time_to_minutes(friend['available_end'])\n    min_duration = friend['min_duration']\n    \n    # Check if the meeting fits within the friend's availability\n    if start_time < available_start or end_time > available_end:\n        return False\n    \n    # Check if the meeting duration is sufficient\n    if (end_time - start_time) < min_duration:\n        return False\n    \n    return True\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00')  # Start at Union Square at 9:00 AM\n    current_location = 'Union Square'\n    schedule = []\n    \n    for friend in order:\n        location = friend['location']\n        travel_time = travel_times[current_location].get(location, float('inf'))\n        \n        # Arrival time at friend's location\n        arrival_time = current_time + travel_time\n        \n        # Find the latest possible start time that allows for min_duration\n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        min_duration = friend['min_duration']\n        \n        # Calculate possible meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = min(meeting_start + min_duration, available_end)\n        \n        if meeting_end - meeting_start < min_duration:\n            return None  # Can't meet this friend with these constraints\n        \n        # Add to schedule\n        schedule.append({\n            'action': 'meet',\n            'location': location,\n            'person': friend['name'],\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        # Update current time and location\n        current_time = meeting_end\n        current_location = location\n    \n    return schedule\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return 0\n    \n    # Count number of friends met\n    return len(schedule)\n\n# Generate all possible friend orders (permutations)\nbest_schedule = None\nbest_score = 0\n\n# Since there are too many permutations, we'll use a heuristic approach\n# Prioritize friends with tighter time windows first\nsorted_friends = sorted(friends, key=lambda x: (\n    time_to_minutes(x['available_end']) - time_to_minutes(x['available_start']) - x['min_duration']\n))\n\n# Try permutations in order of priority\nfrom itertools import permutations\nfor perm in permutations(sorted_friends):\n    schedule = calculate_schedule(perm)\n    score = evaluate_schedule(schedule)\n    if score > best_score:\n        best_score = score\n        best_schedule = schedule\n        if best_score == len(friends):  # Found optimal solution\n            break\n\n# Output the best schedule found\noutput = {\n    \"itinerary\": best_schedule if best_schedule else []\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_800"
        }
    ]
}