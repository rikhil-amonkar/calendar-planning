{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Sandra",
                        "start_time": "13:00",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "13:38",
                        "end_time": "15:38"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "15:45",
                        "end_time": "16:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Stephanie",
                        "start_time": "9:11",
                        "end_time": "10:41"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Sandra",
                        "start_time": "13:00",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "13:38",
                        "end_time": "15:38"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jason",
                        "start_time": "15:45",
                        "end_time": "16:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef calculate_schedule():\n    # Locations\n    locations = ['Haight-Ashbury', 'Mission District', 'Bayview', 'Pacific Heights', 'Russian Hill', 'Fisherman\\'s Wharf']\n    \n    # Travel times (from_location, to_location): minutes\n    travel_times = {\n        ('Haight-Ashbury', 'Mission District'): 11,\n        ('Haight-Ashbury', 'Bayview'): 18,\n        ('Haight-Ashbury', 'Pacific Heights'): 12,\n        ('Haight-Ashbury', 'Russian Hill'): 17,\n        ('Haight-Ashbury', 'Fisherman\\'s Wharf'): 23,\n        ('Mission District', 'Haight-Ashbury'): 12,\n        ('Mission District', 'Bayview'): 15,\n        ('Mission District', 'Pacific Heights'): 16,\n        ('Mission District', 'Russian Hill'): 15,\n        ('Mission District', 'Fisherman\\'s Wharf'): 22,\n        ('Bayview', 'Haight-Ashbury'): 19,\n        ('Bayview', 'Mission District'): 13,\n        ('Bayview', 'Pacific Heights'): 23,\n        ('Bayview', 'Russian Hill'): 23,\n        ('Bayview', 'Fisherman\\'s Wharf'): 25,\n        ('Pacific Heights', 'Haight-Ashbury'): 11,\n        ('Pacific Heights', 'Mission District'): 15,\n        ('Pacific Heights', 'Bayview'): 22,\n        ('Pacific Heights', 'Russian Hill'): 7,\n        ('Pacific Heights', 'Fisherman\\'s Wharf'): 13,\n        ('Russian Hill', 'Haight-Ashbury'): 17,\n        ('Russian Hill', 'Mission District'): 16,\n        ('Russian Hill', 'Bayview'): 23,\n        ('Russian Hill', 'Pacific Heights'): 7,\n        ('Russian Hill', 'Fisherman\\'s Wharf'): 7,\n        ('Fisherman\\'s Wharf', 'Haight-Ashbury'): 22,\n        ('Fisherman\\'s Wharf', 'Mission District'): 22,\n        ('Fisherman\\'s Wharf', 'Bayview'): 26,\n        ('Fisherman\\'s Wharf', 'Pacific Heights'): 12,\n        ('Fisherman\\'s Wharf', 'Russian Hill'): 7\n    }\n    \n    # People and their constraints\n    people = [\n        {\n            'name': 'Stephanie',\n            'location': 'Mission District',\n            'available_start': '8:15',\n            'available_end': '13:45',\n            'min_duration': 90\n        },\n        {\n            'name': 'Sandra',\n            'location': 'Bayview',\n            'available_start': '13:00',\n            'available_end': '19:30',\n            'min_duration': 15\n        },\n        {\n            'name': 'Richard',\n            'location': 'Pacific Heights',\n            'available_start': '7:15',\n            'available_end': '10:15',\n            'min_duration': 75\n        },\n        {\n            'name': 'Brian',\n            'location': 'Russian Hill',\n            'available_start': '12:15',\n            'available_end': '16:00',\n            'min_duration': 120\n        },\n        {\n            'name': 'Jason',\n            'location': 'Fisherman\\'s Wharf',\n            'available_start': '8:30',\n            'available_end': '17:45',\n            'min_duration': 60\n        }\n    ]\n    \n    # Current time starts at 9:00 AM at Haight-Ashbury\n    current_time = time_to_minutes('9:00')\n    current_location = 'Haight-Ashbury'\n    \n    # Generate all possible orders to meet people\n    best_schedule = []\n    max_meetings = 0\n    \n    for order in permutations(people):\n        schedule = []\n        temp_time = current_time\n        temp_location = current_location\n        meetings = 0\n        \n        for person in order:\n            # Calculate travel time\n            travel_time = travel_times.get((temp_location, person['location']), None)\n            if travel_time is None:\n                continue  # Shouldn't happen as all pairs are defined\n            \n            arrival_time = temp_time + travel_time\n            available_start = time_to_minutes(person['available_start'])\n            available_end = time_to_minutes(person['available_end'])\n            \n            # Check if we can meet this person\n            meeting_start = max(arrival_time, available_start)\n            meeting_end = meeting_start + person['min_duration']\n            \n            if meeting_end <= available_end:\n                schedule.append({\n                    'action': 'meet',\n                    'location': person['location'],\n                    'person': person['name'],\n                    'start_time': minutes_to_time(meeting_start),\n                    'end_time': minutes_to_time(meeting_end)\n                })\n                meetings += 1\n                temp_time = meeting_end\n                temp_location = person['location']\n            else:\n                break  # Can't meet this person in this order\n        \n        if meetings > max_meetings:\n            max_meetings = meetings\n            best_schedule = schedule\n        elif meetings == max_meetings and len(schedule) > len(best_schedule):\n            best_schedule = schedule\n    \n    return {'itinerary': best_schedule}\n\nif __name__ == \"__main__\":\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_482"
        }
    ]
}