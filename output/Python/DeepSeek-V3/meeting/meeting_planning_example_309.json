{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Nancy",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Mary",
                        "start_time": "11:17",
                        "end_time": "12:32"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jessica",
                        "start_time": "12:48",
                        "end_time": "13:33"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Nancy",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Mary",
                        "start_time": "11:17",
                        "end_time": "12:32"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jessica",
                        "start_time": "12:48",
                        "end_time": "13:33"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    if time_str == \"9:00AM\":\n        return 9 * 60\n    elif time_str == \"9:30AM\":\n        return 9 * 60 + 30\n    elif time_str == \"1:30PM\":\n        return 13 * 60 + 30\n    elif time_str == \"7:00AM\":\n        return 7 * 60\n    elif time_str == \"9:00PM\":\n        return 21 * 60\n    elif time_str == \"11:15AM\":\n        return 11 * 60 + 15\n    elif time_str == \"1:45PM\":\n        return 13 * 60 + 45\n    elif time_str == \"8:30AM\":\n        return 8 * 60 + 30\n    else:\n        h, m = map(int, time_str.split(':'))\n        return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ntravel_times = {\n    ('Financial District', 'Chinatown'): 5,\n    ('Financial District', 'Alamo Square'): 17,\n    ('Financial District', 'Bayview'): 19,\n    ('Financial District', 'Fisherman\\'s Wharf'): 10,\n    ('Chinatown', 'Financial District'): 5,\n    ('Chinatown', 'Alamo Square'): 17,\n    ('Chinatown', 'Bayview'): 22,\n    ('Chinatown', 'Fisherman\\'s Wharf'): 8,\n    ('Alamo Square', 'Financial District'): 17,\n    ('Alamo Square', 'Chinatown'): 16,\n    ('Alamo Square', 'Bayview'): 16,\n    ('Alamo Square', 'Fisherman\\'s Wharf'): 19,\n    ('Bayview', 'Financial District'): 19,\n    ('Bayview', 'Chinatown'): 18,\n    ('Bayview', 'Alamo Square'): 16,\n    ('Bayview', 'Fisherman\\'s Wharf'): 25,\n    ('Fisherman\\'s Wharf', 'Financial District'): 11,\n    ('Fisherman\\'s Wharf', 'Chinatown'): 12,\n    ('Fisherman\\'s Wharf', 'Alamo Square'): 20,\n    ('Fisherman\\'s Wharf', 'Bayview'): 26\n}\n\nfriends = [\n    {\n        'name': 'Nancy',\n        'location': 'Chinatown',\n        'available_start': time_to_minutes('9:30AM'),\n        'available_end': time_to_minutes('1:30PM'),\n        'duration': 90\n    },\n    {\n        'name': 'Mary',\n        'location': 'Alamo Square',\n        'available_start': time_to_minutes('7:00AM'),\n        'available_end': time_to_minutes('9:00PM'),\n        'duration': 75\n    },\n    {\n        'name': 'Jessica',\n        'location': 'Bayview',\n        'available_start': time_to_minutes('11:15AM'),\n        'available_end': time_to_minutes('1:45PM'),\n        'duration': 45\n    },\n    {\n        'name': 'Rebecca',\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': time_to_minutes('7:00AM'),\n        'available_end': time_to_minutes('8:30AM'),\n        'duration': 45\n    }\n]\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes('9:00AM')\n    current_location = 'Financial District'\n    schedule = []\n    met_friends = set()\n    \n    for friend_idx in order:\n        friend = friends[friend_idx]\n        if friend['name'] in met_friends:\n            continue\n        \n        travel_time = travel_times[(current_location, friend['location'])]\n        arrival_time = current_time + travel_time\n        start_time = max(arrival_time, friend['available_start'])\n        end_time = start_time + friend['duration']\n        \n        if end_time > friend['available_end']:\n            continue\n        \n        schedule.append({\n            'action': 'meet',\n            'location': friend['location'],\n            'person': friend['name'],\n            'start_time': minutes_to_time(start_time),\n            'end_time': minutes_to_time(end_time)\n        })\n        \n        current_time = end_time\n        current_location = friend['location']\n        met_friends.add(friend['name'])\n    \n    return schedule\n\nbest_schedule = []\nmax_meetings = 0\n\nfor perm in permutations(range(len(friends))):\n    met_friends = set()\n    schedule = calculate_schedule(perm)\n    if len(schedule) > max_meetings:\n        max_meetings = len(schedule)\n        best_schedule = schedule\n    elif len(schedule) == max_meetings and len(schedule) > 0:\n        total_time = sum([time_to_minutes(entry['end_time']) - time_to_minutes(entry['start_time']) for entry in schedule])\n        best_total_time = sum([time_to_minutes(entry['end_time']) - time_to_minutes(entry['start_time']) for entry in best_schedule])\n        if total_time > best_total_time:\n            best_schedule = schedule\n\nresult = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_309"
        }
    ]
}