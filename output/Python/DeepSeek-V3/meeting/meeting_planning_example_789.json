{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Betty",
                        "start_time": "9:13",
                        "end_time": "10:58"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Melissa",
                        "start_time": "11:13",
                        "end_time": "12:58"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joshua",
                        "start_time": "13:03",
                        "end_time": "14:33"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Jeffrey",
                        "start_time": "14:50",
                        "end_time": "15:35"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "James",
                        "start_time": "16:02",
                        "end_time": "17:32"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Emily",
                        "start_time": "19:30",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary (from -> to -> minutes)\ntravel_times = {\n    'Union Square': {\n        'Russian Hill': 13,\n        'Alamo Square': 15,\n        'Haight-Ashbury': 18,\n        'Marina District': 18,\n        'Bayview': 15,\n        'Chinatown': 7,\n        'Presidio': 24,\n        'Sunset District': 27\n    },\n    'Russian Hill': {\n        'Union Square': 10,\n        'Alamo Square': 15,\n        'Haight-Ashbury': 17,\n        'Marina District': 7,\n        'Bayview': 23,\n        'Chinatown': 9,\n        'Presidio': 14,\n        'Sunset District': 23\n    },\n    'Alamo Square': {\n        'Union Square': 14,\n        'Russian Hill': 13,\n        'Haight-Ashbury': 5,\n        'Marina District': 15,\n        'Bayview': 16,\n        'Chinatown': 15,\n        'Presidio': 17,\n        'Sunset District': 16\n    },\n    'Haight-Ashbury': {\n        'Union Square': 19,\n        'Russian Hill': 17,\n        'Alamo Square': 5,\n        'Marina District': 17,\n        'Bayview': 18,\n        'Chinatown': 19,\n        'Presidio': 15,\n        'Sunset District': 15\n    },\n    'Marina District': {\n        'Union Square': 16,\n        'Russian Hill': 8,\n        'Alamo Square': 15,\n        'Haight-Ashbury': 16,\n        'Bayview': 27,\n        'Chinatown': 15,\n        'Presidio': 10,\n        'Sunset District': 19\n    },\n    'Bayview': {\n        'Union Square': 18,\n        'Russian Hill': 23,\n        'Alamo Square': 16,\n        'Haight-Ashbury': 19,\n        'Marina District': 27,\n        'Chinatown': 19,\n        'Presidio': 32,\n        'Sunset District': 23\n    },\n    'Chinatown': {\n        'Union Square': 7,\n        'Russian Hill': 7,\n        'Alamo Square': 17,\n        'Haight-Ashbury': 19,\n        'Marina District': 12,\n        'Bayview': 20,\n        'Presidio': 19,\n        'Sunset District': 29\n    },\n    'Presidio': {\n        'Union Square': 22,\n        'Russian Hill': 14,\n        'Alamo Square': 19,\n        'Haight-Ashbury': 15,\n        'Marina District': 11,\n        'Bayview': 31,\n        'Chinatown': 21,\n        'Sunset District': 16\n    },\n    'Sunset District': {\n        'Union Square': 30,\n        'Russian Hill': 24,\n        'Alamo Square': 17,\n        'Haight-Ashbury': 15,\n        'Marina District': 21,\n        'Bayview': 22,\n        'Chinatown': 30,\n        'Presidio': 16\n    }\n}\n\n# Friend data: name, location, available_start, available_end, min_duration (in minutes)\nfriends = [\n    ('Betty', 'Russian Hill', 7*60, 16*60+45, 105),\n    ('Melissa', 'Alamo Square', 9*60+30, 17*60+15, 105),\n    ('Joshua', 'Haight-Ashbury', 12*60+15, 19*60, 90),\n    ('Jeffrey', 'Marina District', 12*60+15, 18*60, 45),\n    ('James', 'Bayview', 7*60+30, 20*60, 90),\n    ('Anthony', 'Chinatown', 11*60+45, 13*60+30, 75),\n    ('Timothy', 'Presidio', 12*60+30, 14*60+45, 90),\n    ('Emily', 'Sunset District', 19*60+30, 21*60+30, 120)\n]\n\ndef time_to_str(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\ndef evaluate_schedule(order):\n    current_time = 9 * 60  # Start at Union Square at 9:00 AM\n    current_location = 'Union Square'\n    schedule = []\n    met_friends = set()\n    \n    for friend_idx in order:\n        name, loc, avail_start, avail_end, min_dur = friends[friend_idx]\n        \n        # Calculate travel time\n        travel_time = travel_times[current_location].get(loc, float('inf'))\n        if travel_time == float('inf'):\n            return None, 0\n        \n        arrival_time = current_time + travel_time\n        start_time = max(arrival_time, avail_start)\n        end_time = start_time + min_dur\n        \n        if end_time > avail_end:\n            return None, 0\n        \n        schedule.append({\n            'action': 'meet',\n            'location': loc,\n            'person': name,\n            'start_time': time_to_str(start_time),\n            'end_time': time_to_str(end_time)\n        })\n        \n        met_friends.add(friend_idx)\n        current_time = end_time\n        current_location = loc\n    \n    # Check if we can meet Emily in Sunset District at the end\n    travel_time = travel_times[current_location].get('Sunset District', float('inf'))\n    if travel_time == float('inf'):\n        return None, len(met_friends)\n    \n    arrival_time = current_time + travel_time\n    emily = friends[-1]  # Emily is last in the list\n    start_time = max(arrival_time, emily[2])\n    end_time = start_time + emily[4]\n    \n    if end_time <= emily[3]:\n        schedule.append({\n            'action': 'meet',\n            'location': 'Sunset District',\n            'person': 'Emily',\n            'start_time': time_to_str(start_time),\n            'end_time': time_to_str(end_time)\n        })\n        met_friends.add(len(friends)-1)\n    \n    return schedule, len(met_friends)\n\ndef find_optimal_schedule():\n    best_schedule = None\n    best_count = 0\n    \n    # We'll try permutations of friend indices (excluding Emily who must be last)\n    friend_indices = list(range(len(friends)-1))\n    \n    # Try all possible orders (but limit to 10000 permutations for performance)\n    for perm in permutations(friend_indices):\n        schedule, count = evaluate_schedule(perm)\n        if count > best_count or (count == best_count and schedule is not None):\n            best_schedule = schedule\n            best_count = count\n            if best_count == len(friends):  # Can't do better than meeting everyone\n                break\n    \n    return best_schedule\n\ndef main():\n    optimal_schedule = find_optimal_schedule()\n    result = {\n        \"itinerary\": optimal_schedule if optimal_schedule else []\n    }\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_789"
        }
    ]
}