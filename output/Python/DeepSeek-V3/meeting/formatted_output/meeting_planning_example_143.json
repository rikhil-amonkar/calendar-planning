{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "13:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Karen",
                        "start_time": "18:45",
                        "end_time": "20:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mark",
                        "start_time": "13:00",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Karen",
                        "start_time": "18:45",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef calculate_schedule():\n    # Input parameters\n    travel_times = {\n        (\"North Beach\", \"Pacific Heights\"): 8,\n        (\"North Beach\", \"Embarcadero\"): 6,\n        (\"Pacific Heights\", \"North Beach\"): 9,\n        (\"Pacific Heights\", \"Embarcadero\"): 10,\n        (\"Embarcadero\", \"North Beach\"): 5,\n        (\"Embarcadero\", \"Pacific Heights\"): 11\n    }\n    \n    current_location = \"North Beach\"\n    current_time = parse_time(\"9:00\")\n    \n    karen_available_start = parse_time(\"18:45\")\n    karen_available_end = parse_time(\"20:15\")\n    karen_min_duration = timedelta(minutes=90)\n    \n    mark_available_start = parse_time(\"13:00\")\n    mark_available_end = parse_time(\"17:45\")\n    mark_min_duration = timedelta(minutes=120)\n    \n    itinerary = []\n    \n    # Try to meet Mark first\n    # Travel to Embarcadero\n    travel_time = travel_times[(current_location, \"Embarcadero\")]\n    arrival_at_mark = current_time + timedelta(minutes=travel_time)\n    \n    # Calculate meeting window with Mark\n    meeting_start_mark = max(arrival_at_mark, mark_available_start)\n    meeting_end_mark = min(meeting_start_mark + mark_min_duration, mark_available_end)\n    \n    if meeting_end_mark - meeting_start_mark >= mark_min_duration:\n        # Can meet Mark\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": \"Embarcadero\",\n            \"person\": \"Mark\",\n            \"start_time\": format_time(meeting_start_mark),\n            \"end_time\": format_time(meeting_end_mark)\n        })\n        \n        # Travel to Pacific Heights for Karen\n        travel_time_to_karen = travel_times[(\"Embarcadero\", \"Pacific Heights\")]\n        arrival_at_karen = meeting_end_mark + timedelta(minutes=travel_time_to_karen)\n        \n        # Calculate meeting window with Karen\n        meeting_start_karen = max(arrival_at_karen, karen_available_start)\n        meeting_end_karen = min(meeting_start_karen + karen_min_duration, karen_available_end)\n        \n        if meeting_end_karen - meeting_start_karen >= karen_min_duration:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Pacific Heights\",\n                \"person\": \"Karen\",\n                \"start_time\": format_time(meeting_start_karen),\n                \"end_time\": format_time(meeting_end_karen)\n            })\n        else:\n            # Can't meet Karen after Mark, try meeting Karen first\n            itinerary = []\n            \n            # Travel to Pacific Heights first\n            travel_time_to_karen = travel_times[(current_location, \"Pacific Heights\")]\n            arrival_at_karen = current_time + timedelta(minutes=travel_time_to_karen)\n            \n            # Karen isn't available until 18:45, so this won't work\n            # So we must meet Mark first and see if we can meet Karen after\n            # If not, try to meet only one person\n            # Let's try meeting only Karen\n            arrival_at_karen = max(arrival_at_karen, karen_available_start)\n            meeting_end_karen = min(arrival_at_karen + karen_min_duration, karen_available_end)\n            \n            if meeting_end_karen - arrival_at_karen >= karen_min_duration:\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Pacific Heights\",\n                    \"person\": \"Karen\",\n                    \"start_time\": format_time(arrival_at_karen),\n                    \"end_time\": format_time(meeting_end_karen)\n                })\n    else:\n        # Can't meet Mark first, try meeting Karen first\n        # Travel to Pacific Heights\n        travel_time_to_karen = travel_times[(current_location, \"Pacific Heights\")]\n        arrival_at_karen = current_time + timedelta(minutes=travel_time_to_karen)\n        \n        # Karen isn't available until 18:45, so this won't work\n        # So the only option is to meet Mark with adjusted times or meet only Karen\n        \n        # Try to meet Mark with adjusted times\n        meeting_start_mark = mark_available_start\n        meeting_end_mark = min(meeting_start_mark + mark_min_duration, mark_available_end)\n        \n        if meeting_end_mark - meeting_start_mark >= mark_min_duration:\n            # Can meet Mark\n            travel_time_to_mark = travel_times[(current_location, \"Embarcadero\")]\n            arrival_at_mark = current_time + timedelta(minutes=travel_time_to_mark)\n            \n            if arrival_at_mark <= meeting_start_mark:\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Embarcadero\",\n                    \"person\": \"Mark\",\n                    \"start_time\": format_time(meeting_start_mark),\n                    \"end_time\": format_time(meeting_end_mark)\n                })\n                \n                # Check if we can meet Karen after\n                travel_time_to_karen = travel_times[(\"Embarcadero\", \"Pacific Heights\")]\n                arrival_at_karen = meeting_end_mark + timedelta(minutes=travel_time_to_karen)\n                \n                meeting_start_karen = max(arrival_at_karen, karen_available_start)\n                meeting_end_karen = min(meeting_start_karen + karen_min_duration, karen_available_end)\n                \n                if meeting_end_karen - meeting_start_karen >= karen_min_duration:\n                    itinerary.append({\n                        \"action\": \"meet\",\n                        \"location\": \"Pacific Heights\",\n                        \"person\": \"Karen\",\n                        \"start_time\": format_time(meeting_start_karen),\n                        \"end_time\": format_time(meeting_end_karen)\n                    })\n    \n    # If we still have no itinerary, try meeting just one person\n    if not itinerary:\n        # Try meeting Mark\n        travel_time_to_mark = travel_times[(current_location, \"Embarcadero\")]\n        arrival_at_mark = current_time + timedelta(minutes=travel_time_to_mark)\n        \n        meeting_start_mark = max(arrival_at_mark, mark_available_start)\n        meeting_end_mark = min(meeting_start_mark + mark_min_duration, mark_available_end)\n        \n        if meeting_end_mark - meeting_start_mark >= mark_min_duration:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Embarcadero\",\n                \"person\": \"Mark\",\n                \"start_time\": format_time(meeting_start_mark),\n                \"end_time\": format_time(meeting_end_mark)\n            })\n        else:\n            # Try meeting Karen\n            travel_time_to_karen = travel_times[(current_location, \"Pacific Heights\")]\n            arrival_at_karen = current_time + timedelta(minutes=travel_time_to_karen)\n            \n            meeting_start_karen = max(arrival_at_karen, karen_available_start)\n            meeting_end_karen = min(meeting_start_karen + karen_min_duration, karen_available_end)\n            \n            if meeting_end_karen - meeting_start_karen >= karen_min_duration:\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": \"Pacific Heights\",\n                    \"person\": \"Karen\",\n                    \"start_time\": format_time(meeting_start_karen),\n                    \"end_time\": format_time(meeting_end_karen)\n                })\n    \n    return {\"itinerary\": itinerary}\n\nif __name__ == \"__main__\":\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_143"
        }
    ]
}