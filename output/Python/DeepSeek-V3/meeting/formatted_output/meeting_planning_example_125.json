{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Stephanie",
                        "start_time": "9:05",
                        "end_time": "10:35"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "John",
                        "start_time": "10:52",
                        "end_time": "11:22"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Stephanie",
                        "start_time": "9:05",
                        "end_time": "10:35"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "John",
                        "start_time": "10:52",
                        "end_time": "11:22"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    \"\"\"Convert time string 'H:MM' to minutes since midnight.\"\"\"\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    \"\"\"Convert minutes since midnight to time string 'H:MM'.\"\"\"\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\narrival_time = \"9:00\"\narrival_location = \"Embarcadero\"\n\nfriends = [\n    {\n        \"name\": \"Stephanie\",\n        \"location\": \"Financial District\",\n        \"available_start\": \"8:15\",\n        \"available_end\": \"11:30\",\n        \"min_duration\": 90,\n        \"travel_from_prev\": {\n            \"Embarcadero\": 5,\n            \"Financial District\": 0,\n            \"Alamo Square\": 17\n        }\n    },\n    {\n        \"name\": \"John\",\n        \"location\": \"Alamo Square\",\n        \"available_start\": \"10:15\",\n        \"available_end\": \"20:45\",\n        \"min_duration\": 30,\n        \"travel_from_prev\": {\n            \"Embarcadero\": 19,\n            \"Financial District\": 17,\n            \"Alamo Square\": 0\n        }\n    }\n]\n\n# Travel times matrix\ntravel_times = {\n    \"Embarcadero\": {\n        \"Financial District\": 5,\n        \"Alamo Square\": 19\n    },\n    \"Financial District\": {\n        \"Embarcadero\": 4,\n        \"Alamo Square\": 17\n    },\n    \"Alamo Square\": {\n        \"Embarcadero\": 17,\n        \"Financial District\": 17\n    }\n}\n\ndef calculate_schedule(order):\n    current_time = time_to_minutes(arrival_time)\n    current_location = arrival_location\n    schedule = []\n    \n    for friend in order:\n        # Travel to friend's location\n        travel_time = travel_times[current_location][friend[\"location\"]]\n        current_time += travel_time\n        current_location = friend[\"location\"]\n        \n        # Determine meeting window\n        available_start = time_to_minutes(friend[\"available_start\"])\n        available_end = time_to_minutes(friend[\"available_end\"])\n        min_duration = friend[\"min_duration\"]\n        \n        # Calculate meeting start and end\n        meeting_start = max(current_time, available_start)\n        meeting_end = meeting_start + min_duration\n        \n        if meeting_end > available_end:\n            return None  # This schedule doesn't work\n        \n        schedule.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"person\": friend[\"name\"],\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        })\n        \n        current_time = meeting_end\n    \n    return schedule\n\n# Generate all possible meeting orders\npossible_orders = permutations(friends)\n\nbest_schedule = None\nbest_meetings = 0\n\nfor order in possible_orders:\n    schedule = calculate_schedule(order)\n    if schedule and len(schedule) > best_meetings:\n        best_schedule = schedule\n        best_meetings = len(schedule)\n\n# Output the result\nif best_schedule:\n    result = {\"itinerary\": best_schedule}\nelse:\n    result = {\"itinerary\": []}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_125"
        }
    ]
}