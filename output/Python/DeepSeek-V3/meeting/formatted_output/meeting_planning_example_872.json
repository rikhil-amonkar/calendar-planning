{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "13:45",
                        "end_time": "15:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "15:30",
                        "end_time": "16:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kenneth",
                        "start_time": "16:35",
                        "end_time": "17:05"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Steven",
                        "start_time": "17:13",
                        "end_time": "18:13"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Jason",
                        "start_time": "9:21",
                        "end_time": "10:36"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kenneth",
                        "start_time": "10:39",
                        "end_time": "11:09"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Mark",
                        "start_time": "11:18",
                        "end_time": "12:33"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Kimberly",
                        "start_time": "12:47",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Jessica",
                        "start_time": "14:12",
                        "end_time": "15:42"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Brian",
                        "start_time": "15:47",
                        "end_time": "16:47"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Stephanie",
                        "start_time": "16:57",
                        "end_time": "18:42"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Steven",
                        "start_time": "18:51",
                        "end_time": "19:51"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Karen",
                        "start_time": "21:00",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\n# Convert time string to minutes since 9:00 (540 minutes)\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Travel times dictionary\ntravel_times = {\n    'Presidio': {\n        'Haight-Ashbury': 15,\n        'Nob Hill': 18,\n        'Russian Hill': 14,\n        'North Beach': 18,\n        'Chinatown': 21,\n        'Union Square': 22,\n        'Embarcadero': 20,\n        'Financial District': 23,\n        'Marina District': 11\n    },\n    'Haight-Ashbury': {\n        'Presidio': 15,\n        'Nob Hill': 15,\n        'Russian Hill': 17,\n        'North Beach': 19,\n        'Chinatown': 19,\n        'Union Square': 19,\n        'Embarcadero': 20,\n        'Financial District': 21,\n        'Marina District': 17\n    },\n    'Nob Hill': {\n        'Presidio': 17,\n        'Haight-Ashbury': 13,\n        'Russian Hill': 5,\n        'North Beach': 8,\n        'Chinatown': 6,\n        'Union Square': 7,\n        'Embarcadero': 9,\n        'Financial District': 9,\n        'Marina District': 11\n    },\n    'Russian Hill': {\n        'Presidio': 14,\n        'Haight-Ashbury': 17,\n        'Nob Hill': 5,\n        'North Beach': 5,\n        'Chinatown': 9,\n        'Union Square': 10,\n        'Embarcadero': 8,\n        'Financial District': 11,\n        'Marina District': 7\n    },\n    'North Beach': {\n        'Presidio': 17,\n        'Haight-Ashbury': 18,\n        'Nob Hill': 7,\n        'Russian Hill': 4,\n        'Chinatown': 6,\n        'Union Square': 7,\n        'Embarcadero': 6,\n        'Financial District': 8,\n        'Marina District': 9\n    },\n    'Chinatown': {\n        'Presidio': 19,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 9,\n        'Russian Hill': 7,\n        'North Beach': 3,\n        'Union Square': 7,\n        'Embarcadero': 5,\n        'Financial District': 5,\n        'Marina District': 12\n    },\n    'Union Square': {\n        'Presidio': 24,\n        'Haight-Ashbury': 18,\n        'Nob Hill': 9,\n        'Russian Hill': 13,\n        'North Beach': 10,\n        'Chinatown': 7,\n        'Embarcadero': 11,\n        'Financial District': 9,\n        'Marina District': 18\n    },\n    'Embarcadero': {\n        'Presidio': 20,\n        'Haight-Ashbury': 21,\n        'Nob Hill': 10,\n        'Russian Hill': 8,\n        'North Beach': 5,\n        'Chinatown': 7,\n        'Union Square': 10,\n        'Financial District': 5,\n        'Marina District': 12\n    },\n    'Financial District': {\n        'Presidio': 22,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 8,\n        'Russian Hill': 11,\n        'North Beach': 7,\n        'Chinatown': 5,\n        'Union Square': 9,\n        'Embarcadero': 4,\n        'Marina District': 15\n    },\n    'Marina District': {\n        'Presidio': 10,\n        'Haight-Ashbury': 16,\n        'Nob Hill': 12,\n        'Russian Hill': 8,\n        'North Beach': 11,\n        'Chinatown': 15,\n        'Union Square': 16,\n        'Embarcadero': 14,\n        'Financial District': 17\n    }\n}\n\n# Friends data: location, available start, available end, min duration\nfriends = {\n    'Karen': ('Haight-Ashbury', time_to_minutes('21:00'), time_to_minutes('21:45'), 45),\n    'Jessica': ('Nob Hill', time_to_minutes('13:45'), time_to_minutes('21:00'), 90),\n    'Brian': ('Russian Hill', time_to_minutes('15:30'), time_to_minutes('21:45'), 60),\n    'Kenneth': ('North Beach', time_to_minutes('9:45'), time_to_minutes('21:00'), 30),\n    'Jason': ('Chinatown', time_to_minutes('8:15'), time_to_minutes('11:45'), 75),\n    'Stephanie': ('Union Square', time_to_minutes('14:45'), time_to_minutes('18:45'), 105),\n    'Kimberly': ('Embarcadero', time_to_minutes('9:45'), time_to_minutes('19:30'), 75),\n    'Steven': ('Financial District', time_to_minutes('7:15'), time_to_minutes('21:15'), 60),\n    'Mark': ('Marina District', time_to_minutes('10:15'), time_to_minutes('13:00'), 75)\n}\n\n# Filter friends we can possibly meet (duration fits in their window)\npossible_friends = {name: data for name, data in friends.items() if data[3] <= (data[2] - data[1])}\n\n# Generate all possible meeting orders (permutations)\ndef generate_schedules():\n    # We'll try all possible orders of meeting friends, but limit to 4 friends max for performance\n    for count in range(1, len(possible_friends)+1):\n        for friend_order in permutations(possible_friends.keys(), count):\n            yield friend_order\n\ndef evaluate_schedule(friend_order):\n    current_time = time_to_minutes('9:00')  # Start at Presidio at 9:00\n    current_location = 'Presidio'\n    schedule = []\n    total_meetings = 0\n    \n    for friend in friend_order:\n        location, avail_start, avail_end, duration = possible_friends[friend]\n        \n        # Calculate travel time\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        \n        # Can we arrive before their window ends?\n        if arrival_time >= avail_end:\n            continue  # Can't meet this friend\n        \n        # Calculate meeting start time\n        meeting_start = max(arrival_time, avail_start)\n        meeting_end = meeting_start + duration\n        \n        # Can we complete the meeting before their window ends?\n        if meeting_end > avail_end:\n            continue  # Can't meet this friend\n        \n        # Add to schedule\n        schedule.append({\n            'friend': friend,\n            'location': location,\n            'start': meeting_start,\n            'end': meeting_end,\n            'travel_time': travel_time\n        })\n        \n        current_time = meeting_end\n        current_location = location\n        total_meetings += 1\n    \n    return total_meetings, schedule\n\n# Find the best schedule\nbest_meetings = 0\nbest_schedule = []\n\n# We'll limit the permutations to reasonable numbers for performance\nmax_attempts = 1000\nattempts = 0\n\nfor friend_order in generate_schedules():\n    attempts += 1\n    if attempts > max_attempts:\n        break\n    \n    total_meetings, schedule = evaluate_schedule(friend_order)\n    \n    if total_meetings > best_meetings:\n        best_meetings = total_meetings\n        best_schedule = schedule\n    elif total_meetings == best_meetings and len(schedule) > 0:\n        # Prefer schedules that end earlier\n        if schedule[-1]['end'] < best_schedule[-1]['end']:\n            best_schedule = schedule\n\n# Convert to output format\nitinerary = []\nfor meeting in best_schedule:\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": meeting['location'],\n        \"person\": meeting['friend'],\n        \"start_time\": minutes_to_time(meeting['start']),\n        \"end_time\": minutes_to_time(meeting['end'])\n    })\n\n# Output the result\nresult = {\n    \"itinerary\": itinerary\n}\n\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_872"
        }
    ]
}