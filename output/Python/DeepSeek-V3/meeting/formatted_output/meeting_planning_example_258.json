{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "9:15",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Betty",
                        "start_time": "11:32",
                        "end_time": "12:17"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "David",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Betty",
                        "start_time": "10:15",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "David",
                        "start_time": "13:00",
                        "end_time": "14:30"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Barbara",
                        "start_time": "14:48",
                        "end_time": "16:48"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\ntravel_times = {\n    'Embarcadero': {\n        'Presidio': 20,\n        'Richmond District': 21,\n        'Fisherman\\'s Wharf': 6\n    },\n    'Presidio': {\n        'Embarcadero': 20,\n        'Richmond District': 7,\n        'Fisherman\\'s Wharf': 19\n    },\n    'Richmond District': {\n        'Embarcadero': 19,\n        'Presidio': 7,\n        'Fisherman\\'s Wharf': 18\n    },\n    'Fisherman\\'s Wharf': {\n        'Embarcadero': 8,\n        'Presidio': 17,\n        'Richmond District': 18\n    }\n}\n\nfriends = {\n    'Betty': {\n        'location': 'Presidio',\n        'available_start': '10:15',\n        'available_end': '21:30',\n        'duration': 45\n    },\n    'David': {\n        'location': 'Richmond District',\n        'available_start': '13:00',\n        'available_end': '20:15',\n        'duration': 90\n    },\n    'Barbara': {\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '9:15',\n        'available_end': '20:15',\n        'duration': 120\n    }\n}\n\ncurrent_location = 'Embarcadero'\ncurrent_time = time_to_minutes('9:00')\n\ndef calculate_schedule(order):\n    schedule = []\n    loc = current_location\n    time = current_time\n    \n    for friend_name in order:\n        friend = friends[friend_name]\n        dest = friend['location']\n        travel_time = travel_times[loc][dest]\n        \n        # Travel to friend's location\n        arrival_time = time + travel_time\n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        \n        # Determine meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + friend['duration']\n        \n        if meeting_end > available_end:\n            return None  # Doesn't fit\n        \n        schedule.append({\n            'action': 'meet',\n            'location': dest,\n            'person': friend_name,\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        loc = dest\n        time = meeting_end\n    \n    return schedule\n\n# Try all possible orders to find the best schedule\nbest_schedule = None\nbest_meetings = 0\n\nfor order in permutations(friends.keys()):\n    schedule = calculate_schedule(order)\n    if schedule and len(schedule) > best_meetings:\n        best_schedule = schedule\n        best_meetings = len(schedule)\n    elif schedule and len(schedule) == best_meetings:\n        # Prefer schedules that end earlier\n        if not best_schedule or time_to_minutes(schedule[-1]['end_time']) < time_to_minutes(best_schedule[-1]['end_time']):\n            best_schedule = schedule\n\noutput = {\n    \"itinerary\": best_schedule if best_schedule else []\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_258"
        }
    ]
}