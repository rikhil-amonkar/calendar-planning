{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Barbara",
                        "start_time": "9:07",
                        "end_time": "10:07"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Barbara",
                        "start_time": "9:07",
                        "end_time": "10:07"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\n\ndef calculate_optimal_schedule():\n    # Input parameters\n    arrival_time = \"9:00\"\n    arrival_location = \"Russian Hill\"\n    barbara_available_start = \"7:15\"\n    barbara_available_end = \"22:00\"\n    barbara_location = \"Pacific Heights\"\n    travel_time_to_pacific_heights = 7  # minutes\n    meeting_duration = 60  # minutes\n\n    # Convert time strings to minutes since midnight\n    def time_to_minutes(time_str):\n        hours, minutes = map(int, time_str.split(':'))\n        return hours * 60 + minutes\n\n    arrival_min = time_to_minutes(arrival_time)\n    barbara_start_min = time_to_minutes(barbara_available_start)\n    barbara_end_min = time_to_minutes(barbara_available_end)\n\n    # Calculate earliest possible meeting start time\n    earliest_meeting_start = arrival_min + travel_time_to_pacific_heights\n    if earliest_meeting_start < barbara_start_min:\n        earliest_meeting_start = barbara_start_min\n\n    # Calculate latest possible meeting end time\n    latest_meeting_end = barbara_end_min\n\n    # Check if meeting is possible\n    if earliest_meeting_start + meeting_duration > latest_meeting_end:\n        return {\"itinerary\": []}\n\n    # Schedule the meeting as early as possible\n    meeting_start = earliest_meeting_start\n    meeting_end = meeting_start + meeting_duration\n\n    # Convert minutes back to time string\n    def minutes_to_time(minutes):\n        hours = minutes // 60\n        mins = minutes % 60\n        return f\"{hours}:{mins:02d}\"\n\n    itinerary = [\n        {\n            \"action\": \"meet\",\n            \"location\": barbara_location,\n            \"person\": \"Barbara\",\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        }\n    ]\n\n    return {\"itinerary\": itinerary}\n\nresult = calculate_optimal_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_73"
        }
    ]
}