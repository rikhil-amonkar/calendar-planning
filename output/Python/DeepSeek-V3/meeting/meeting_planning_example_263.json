{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Karen",
                        "start_time": "9:25",
                        "end_time": "9:55"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "10:06",
                        "end_time": "11:51"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Betty",
                        "start_time": "19:45",
                        "end_time": "20:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Karen",
                        "start_time": "9:25",
                        "end_time": "9:55"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Anthony",
                        "start_time": "10:06",
                        "end_time": "11:51"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Betty",
                        "start_time": "19:45",
                        "end_time": "20:00"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%H:%M')\n\ndef format_time(dt):\n    return dt.strftime('%-H:%M')\n\ndef calculate_schedule():\n    # Input parameters\n    current_location = \"Bayview\"\n    current_time = parse_time(\"9:00\")\n    \n    # Friends' availability\n    friends = [\n        {\n            \"name\": \"Betty\",\n            \"location\": \"Embarcadero\",\n            \"start\": parse_time(\"19:45\"),\n            \"end\": parse_time(\"21:45\"),\n            \"duration\": timedelta(minutes=15)\n        },\n        {\n            \"name\": \"Karen\",\n            \"location\": \"Fisherman's Wharf\",\n            \"start\": parse_time(\"8:45\"),\n            \"end\": parse_time(\"15:00\"),\n            \"duration\": timedelta(minutes=30)\n        },\n        {\n            \"name\": \"Anthony\",\n            \"location\": \"Financial District\",\n            \"start\": parse_time(\"9:15\"),\n            \"end\": parse_time(\"21:30\"),\n            \"duration\": timedelta(minutes=105)\n        }\n    ]\n    \n    # Travel times matrix\n    travel_times = {\n        \"Bayview\": {\n            \"Embarcadero\": timedelta(minutes=19),\n            \"Fisherman's Wharf\": timedelta(minutes=25),\n            \"Financial District\": timedelta(minutes=19)\n        },\n        \"Embarcadero\": {\n            \"Bayview\": timedelta(minutes=21),\n            \"Fisherman's Wharf\": timedelta(minutes=6),\n            \"Financial District\": timedelta(minutes=5)\n        },\n        \"Fisherman's Wharf\": {\n            \"Bayview\": timedelta(minutes=26),\n            \"Embarcadero\": timedelta(minutes=8),\n            \"Financial District\": timedelta(minutes=11)\n        },\n        \"Financial District\": {\n            \"Bayview\": timedelta(minutes=19),\n            \"Embarcadero\": timedelta(minutes=4),\n            \"Fisherman's Wharf\": timedelta(minutes=10)\n        }\n    }\n    \n    itinerary = []\n    \n    # Helper function to find best meeting time\n    def find_best_meeting(current_loc, current_t, friend):\n        location = friend[\"location\"]\n        travel_time = travel_times[current_loc][location]\n        arrival_time = current_t + travel_time\n        \n        # Determine meeting window\n        meeting_start = max(arrival_time, friend[\"start\"])\n        meeting_end = meeting_start + friend[\"duration\"]\n        \n        if meeting_end <= friend[\"end\"]:\n            return {\n                \"start\": meeting_start,\n                \"end\": meeting_end,\n                \"travel_time\": travel_time\n            }\n        return None\n    \n    # Try different orders to maximize meetings\n    meeting_orders = [\n        [\"Karen\", \"Anthony\", \"Betty\"],\n        [\"Anthony\", \"Karen\", \"Betty\"],\n        [\"Karen\", \"Betty\", \"Anthony\"],\n        [\"Anthony\", \"Betty\", \"Karen\"],\n        [\"Betty\", \"Karen\", \"Anthony\"],\n        [\"Betty\", \"Anthony\", \"Karen\"]\n    ]\n    \n    best_itinerary = []\n    max_meetings = 0\n    \n    for order in meeting_orders:\n        temp_itinerary = []\n        temp_location = current_location\n        temp_time = current_time\n        meetings = 0\n        \n        for name in order:\n            friend = next(f for f in friends if f[\"name\"] == name)\n            meeting = find_best_meeting(temp_location, temp_time, friend)\n            if meeting:\n                temp_itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": friend[\"location\"],\n                    \"person\": friend[\"name\"],\n                    \"start_time\": format_time(meeting[\"start\"]),\n                    \"end_time\": format_time(meeting[\"end\"])\n                })\n                temp_location = friend[\"location\"]\n                temp_time = meeting[\"end\"]\n                meetings += 1\n        \n        if meetings > max_meetings:\n            max_meetings = meetings\n            best_itinerary = temp_itinerary\n        elif meetings == max_meetings and meetings > 0:\n            # Prefer longer total meeting time\n            current_total = sum((parse_time(i[\"end_time\"]) - parse_time(i[\"start_time\"])).total_seconds() for i in best_itinerary)\n            new_total = sum((parse_time(i[\"end_time\"]) - parse_time(i[\"start_time\"])).total_seconds() for i in temp_itinerary)\n            if new_total > current_total:\n                best_itinerary = temp_itinerary\n    \n    return {\"itinerary\": best_itinerary}\n\nresult = calculate_schedule()\nprint(json.dumps(result, indent=2))\n```",
            "count": "meeting_planning_example_263"
        }
    ]
}