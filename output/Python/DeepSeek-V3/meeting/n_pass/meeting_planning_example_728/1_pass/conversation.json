[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nMarina District to Mission District: 20.\nMarina District to Fisherman's Wharf: 10.\nMarina District to Presidio: 10.\nMarina District to Union Square: 16.\nMarina District to Sunset District: 19.\nMarina District to Financial District: 17.\nMarina District to Haight-Ashbury: 16.\nMarina District to Russian Hill: 8.\nMission District to Marina District: 19.\nMission District to Fisherman's Wharf: 22.\nMission District to Presidio: 25.\nMission District to Union Square: 15.\nMission District to Sunset District: 24.\nMission District to Financial District: 15.\nMission District to Haight-Ashbury: 12.\nMission District to Russian Hill: 15.\nFisherman's Wharf to Marina District: 9.\nFisherman's Wharf to Mission District: 22.\nFisherman's Wharf to Presidio: 17.\nFisherman's Wharf to Union Square: 13.\nFisherman's Wharf to Sunset District: 27.\nFisherman's Wharf to Financial District: 11.\nFisherman's Wharf to Haight-Ashbury: 22.\nFisherman's Wharf to Russian Hill: 7.\nPresidio to Marina District: 11.\nPresidio to Mission District: 26.\nPresidio to Fisherman's Wharf: 19.\nPresidio to Union Square: 22.\nPresidio to Sunset District: 15.\nPresidio to Financial District: 23.\nPresidio to Haight-Ashbury: 15.\nPresidio to Russian Hill: 14.\nUnion Square to Marina District: 18.\nUnion Square to Mission District: 14.\nUnion Square to Fisherman's Wharf: 15.\nUnion Square to Presidio: 24.\nUnion Square to Sunset District: 27.\nUnion Square to Financial District: 9.\nUnion Square to Haight-Ashbury: 18.\nUnion Square to Russian Hill: 13.\nSunset District to Marina District: 21.\nSunset District to Mission District: 25.\nSunset District to Fisherman's Wharf: 29.\nSunset District to Presidio: 16.\nSunset District to Union Square: 30.\nSunset District to Financial District: 30.\nSunset District to Haight-Ashbury: 15.\nSunset District to Russian Hill: 24.\nFinancial District to Marina District: 15.\nFinancial District to Mission District: 17.\nFinancial District to Fisherman's Wharf: 10.\nFinancial District to Presidio: 22.\nFinancial District to Union Square: 9.\nFinancial District to Sunset District: 30.\nFinancial District to Haight-Ashbury: 19.\nFinancial District to Russian Hill: 11.\nHaight-Ashbury to Marina District: 17.\nHaight-Ashbury to Mission District: 11.\nHaight-Ashbury to Fisherman's Wharf: 23.\nHaight-Ashbury to Presidio: 15.\nHaight-Ashbury to Union Square: 19.\nHaight-Ashbury to Sunset District: 15.\nHaight-Ashbury to Financial District: 21.\nHaight-Ashbury to Russian Hill: 17.\nRussian Hill to Marina District: 7.\nRussian Hill to Mission District: 16.\nRussian Hill to Fisherman's Wharf: 7.\nRussian Hill to Presidio: 14.\nRussian Hill to Union Square: 10.\nRussian Hill to Sunset District: 23.\nRussian Hill to Financial District: 11.\nRussian Hill to Haight-Ashbury: 17.\n\nCONSTRAINTS: You arrive at Marina District at 9:00AM. Karen will be at Mission District from 2:15PM to 10:00PM. You'd like to meet Karen for a minimum of 30 minutes. Richard will be at Fisherman's Wharf from 2:30PM to 5:30PM. You'd like to meet Richard for a minimum of 30 minutes. Robert will be at Presidio from 9:45PM to 10:45PM. You'd like to meet Robert for a minimum of 60 minutes. Joseph will be at Union Square from 11:45AM to 2:45PM. You'd like to meet Joseph for a minimum of 120 minutes. Helen will be at Sunset District from 2:45PM to 8:45PM. You'd like to meet Helen for a minimum of 105 minutes. Elizabeth will be at Financial District from 10:00AM to 12:45PM. You'd like to meet Elizabeth for a minimum of 75 minutes. Kimberly will be at Haight-Ashbury from 2:15PM to 5:30PM. You'd like to meet Kimberly for a minimum of 105 minutes. Ashley will be at Russian Hill from 11:30AM to 9:30PM. You'd like to meet Ashley for a minimum of 45 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input data\ntravel_times = {\n    'Marina District': {\n        'Mission District': 20,\n        'Fisherman\\'s Wharf': 10,\n        'Presidio': 10,\n        'Union Square': 16,\n        'Sunset District': 19,\n        'Financial District': 17,\n        'Haight-Ashbury': 16,\n        'Russian Hill': 8\n    },\n    'Mission District': {\n        'Marina District': 19,\n        'Fisherman\\'s Wharf': 22,\n        'Presidio': 25,\n        'Union Square': 15,\n        'Sunset District': 24,\n        'Financial District': 15,\n        'Haight-Ashbury': 12,\n        'Russian Hill': 15\n    },\n    'Fisherman\\'s Wharf': {\n        'Marina District': 9,\n        'Mission District': 22,\n        'Presidio': 17,\n        'Union Square': 13,\n        'Sunset District': 27,\n        'Financial District': 11,\n        'Haight-Ashbury': 22,\n        'Russian Hill': 7\n    },\n    'Presidio': {\n        'Marina District': 11,\n        'Mission District': 26,\n        'Fisherman\\'s Wharf': 19,\n        'Union Square': 22,\n        'Sunset District': 15,\n        'Financial District': 23,\n        'Haight-Ashbury': 15,\n        'Russian Hill': 14\n    },\n    'Union Square': {\n        'Marina District': 18,\n        'Mission District': 14,\n        'Fisherman\\'s Wharf': 15,\n        'Presidio': 24,\n        'Sunset District': 27,\n        'Financial District': 9,\n        'Haight-Ashbury': 18,\n        'Russian Hill': 13\n    },\n    'Sunset District': {\n        'Marina District': 21,\n        'Mission District': 25,\n        'Fisherman\\'s Wharf': 29,\n        'Presidio': 16,\n        'Union Square': 30,\n        'Financial District': 30,\n        'Haight-Ashbury': 15,\n        'Russian Hill': 24\n    },\n    'Financial District': {\n        'Marina District': 15,\n        'Mission District': 17,\n        'Fisherman\\'s Wharf': 10,\n        'Presidio': 22,\n        'Union Square': 9,\n        'Sunset District': 30,\n        'Haight-Ashbury': 19,\n        'Russian Hill': 11\n    },\n    'Haight-Ashbury': {\n        'Marina District': 17,\n        'Mission District': 11,\n        'Fisherman\\'s Wharf': 23,\n        'Presidio': 15,\n        'Union Square': 19,\n        'Sunset District': 15,\n        'Financial District': 21,\n        'Russian Hill': 17\n    },\n    'Russian Hill': {\n        'Marina District': 7,\n        'Mission District': 16,\n        'Fisherman\\'s Wharf': 7,\n        'Presidio': 14,\n        'Union Square': 10,\n        'Sunset District': 23,\n        'Financial District': 11,\n        'Haight-Ashbury': 17\n    }\n}\n\nfriends = [\n    {'name': 'Karen', 'location': 'Mission District', 'start': '14:15', 'end': '22:00', 'duration': 30},\n    {'name': 'Richard', 'location': 'Fisherman\\'s Wharf', 'start': '14:30', 'end': '17:30', 'duration': 30},\n    {'name': 'Robert', 'location': 'Presidio', 'start': '21:45', 'end': '22:45', 'duration': 60},\n    {'name': 'Joseph', 'location': 'Union Square', 'start': '11:45', 'end': '14:45', 'duration': 120},\n    {'name': 'Helen', 'location': 'Sunset District', 'start': '14:45', 'end': '20:45', 'duration': 105},\n    {'name': 'Elizabeth', 'location': 'Financial District', 'start': '10:00', 'end': '12:45', 'duration': 75},\n    {'name': 'Kimberly', 'location': 'Haight-Ashbury', 'start': '14:15', 'end': '17:30', 'duration': 105},\n    {'name': 'Ashley', 'location': 'Russian Hill', 'start': '11:30', 'end': '21:30', 'duration': 45}\n]\n\ncurrent_location = 'Marina District'\ncurrent_time = time_to_minutes('9:00')\n\ndef is_meeting_possible(schedule):\n    global current_location, current_time\n    temp_location = current_location\n    temp_time = current_time\n    \n    for meeting in schedule:\n        travel_time = travel_times[temp_location][meeting['location']]\n        arrival_time = temp_time + travel_time\n        \n        # Check if we arrive before meeting window closes\n        meeting_end = time_to_minutes(meeting['end'])\n        if arrival_time >= meeting_end:\n            return False\n        \n        # Calculate actual meeting start and end\n        meeting_start = max(arrival_time, time_to_minutes(meeting['start']))\n        meeting_end_time = meeting_start + meeting['duration']\n        \n        if meeting_end_time > time_to_minutes(meeting['end']):\n            return False\n        \n        temp_location = meeting['location']\n        temp_time = meeting_end_time\n    \n    return True\n\ndef calculate_total_meetings(schedule):\n    global current_location, current_time\n    temp_location = current_location\n    temp_time = current_time\n    total_meetings = 0\n    \n    for meeting in schedule:\n        travel_time = travel_times[temp_location][meeting['location']]\n        arrival_time = temp_time + travel_time\n        \n        meeting_start = max(arrival_time, time_to_minutes(meeting['start']))\n        meeting_end_time = meeting_start + meeting['duration']\n        \n        temp_location = meeting['location']\n        temp_time = meeting_end_time\n        \n        total_meetings += 1\n    \n    return total_meetings\n\ndef generate_itinerary(schedule):\n    global current_location, current_time\n    temp_location = current_location\n    temp_time = current_time\n    itinerary = []\n    \n    for meeting in schedule:\n        travel_time = travel_times[temp_location][meeting['location']]\n        arrival_time = temp_time + travel_time\n        \n        meeting_start = max(arrival_time, time_to_minutes(meeting['start']))\n        meeting_end_time = meeting_start + meeting['duration']\n        \n        itinerary.append({\n            'action': 'meet',\n            'location': meeting['location'],\n            'person': meeting['name'],\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end_time)\n        })\n        \n        temp_location = meeting['location']\n        temp_time = meeting_end_time\n    \n    return itinerary\n\n# Try all permutations to find the best schedule\nbest_schedule = None\nmax_meetings = 0\n\n# We'll try a subset of permutations to make it computationally feasible\nfrom itertools import islice\nfor perm in islice(permutations(friends), 10000):  # Limit to 10,000 permutations for practicality\n    if is_meeting_possible(perm):\n        num_meetings = calculate_total_meetings(perm)\n        if num_meetings > max_meetings:\n            max_meetings = num_meetings\n            best_schedule = perm\n\nif best_schedule:\n    itinerary = generate_itinerary(best_schedule)\n    print(json.dumps({\"itinerary\": itinerary}, indent=2))\nelse:\n    print(json.dumps({\"itinerary\": []}, indent=2))\n```"
    }
]