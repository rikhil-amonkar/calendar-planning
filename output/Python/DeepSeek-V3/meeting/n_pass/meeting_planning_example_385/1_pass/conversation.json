[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nNob Hill to Presidio: 17.\nNob Hill to North Beach: 8.\nNob Hill to Fisherman's Wharf: 11.\nNob Hill to Pacific Heights: 8.\nPresidio to Nob Hill: 18.\nPresidio to North Beach: 18.\nPresidio to Fisherman's Wharf: 19.\nPresidio to Pacific Heights: 11.\nNorth Beach to Nob Hill: 7.\nNorth Beach to Presidio: 17.\nNorth Beach to Fisherman's Wharf: 5.\nNorth Beach to Pacific Heights: 8.\nFisherman's Wharf to Nob Hill: 11.\nFisherman's Wharf to Presidio: 17.\nFisherman's Wharf to North Beach: 6.\nFisherman's Wharf to Pacific Heights: 12.\nPacific Heights to Nob Hill: 8.\nPacific Heights to Presidio: 11.\nPacific Heights to North Beach: 9.\nPacific Heights to Fisherman's Wharf: 13.\n\nCONSTRAINTS: You arrive at Nob Hill at 9:00AM. Jeffrey will be at Presidio from 8:00AM to 10:00AM. You'd like to meet Jeffrey for a minimum of 105 minutes. Steven will be at North Beach from 1:30PM to 10:00PM. You'd like to meet Steven for a minimum of 45 minutes. Barbara will be at Fisherman's Wharf from 6:00PM to 9:30PM. You'd like to meet Barbara for a minimum of 30 minutes. John will be at Pacific Heights from 9:00AM to 1:30PM. You'd like to meet John for a minimum of 15 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    if time_str is None:\n        return 0\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input parameters\ntravel_times = {\n    ('Nob Hill', 'Presidio'): 17,\n    ('Nob Hill', 'North Beach'): 8,\n    ('Nob Hill', 'Fisherman\\'s Wharf'): 11,\n    ('Nob Hill', 'Pacific Heights'): 8,\n    ('Presidio', 'Nob Hill'): 18,\n    ('Presidio', 'North Beach'): 18,\n    ('Presidio', 'Fisherman\\'s Wharf'): 19,\n    ('Presidio', 'Pacific Heights'): 11,\n    ('North Beach', 'Nob Hill'): 7,\n    ('North Beach', 'Presidio'): 17,\n    ('North Beach', 'Fisherman\\'s Wharf'): 5,\n    ('North Beach', 'Pacific Heights'): 8,\n    ('Fisherman\\'s Wharf', 'Nob Hill'): 11,\n    ('Fisherman\\'s Wharf', 'Presidio'): 17,\n    ('Fisherman\\'s Wharf', 'North Beach'): 6,\n    ('Fisherman\\'s Wharf', 'Pacific Heights'): 12,\n    ('Pacific Heights', 'Nob Hill'): 8,\n    ('Pacific Heights', 'Presidio'): 11,\n    ('Pacific Heights', 'North Beach'): 9,\n    ('Pacific Heights', 'Fisherman\\'s Wharf'): 13,\n}\n\nfriends = {\n    'Jeffrey': {\n        'location': 'Presidio',\n        'available_start': '8:00',\n        'available_end': '10:00',\n        'min_duration': 105\n    },\n    'Steven': {\n        'location': 'North Beach',\n        'available_start': '13:30',\n        'available_end': '22:00',\n        'min_duration': 45\n    },\n    'Barbara': {\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '18:00',\n        'available_end': '21:30',\n        'min_duration': 30\n    },\n    'John': {\n        'location': 'Pacific Heights',\n        'available_start': '9:00',\n        'available_end': '13:30',\n        'min_duration': 15\n    }\n}\n\ncurrent_location = 'Nob Hill'\ncurrent_time = time_to_minutes('9:00')\n\ndef calculate_schedule(order):\n    schedule = []\n    loc = current_location\n    time = current_time\n    for friend in order:\n        details = friends[friend]\n        travel_time = travel_times.get((loc, details['location']), 0)\n        arrival_time = time + travel_time\n        available_start = time_to_minutes(details['available_start'])\n        available_end = time_to_minutes(details['available_end'])\n        \n        # Check if arrival is before available_end\n        if arrival_time >= available_end:\n            return None\n        \n        # Start time is max of arrival and available_start\n        start_time = max(arrival_time, available_start)\n        end_time = start_time + details['min_duration']\n        \n        if end_time > available_end:\n            return None\n        \n        schedule.append({\n            'friend': friend,\n            'location': details['location'],\n            'start_time': start_time,\n            'end_time': end_time,\n            'travel_time': travel_time\n        })\n        \n        loc = details['location']\n        time = end_time\n    return schedule\n\ndef evaluate_schedule(schedule):\n    if not schedule:\n        return 0\n    # Count number of friends met\n    return len(schedule)\n\nbest_schedule = None\nbest_score = 0\n\n# Try all possible orders of friends\nfor order in permutations(friends.keys()):\n    schedule = calculate_schedule(order)\n    score = evaluate_schedule(schedule)\n    if score > best_score:\n        best_score = score\n        best_schedule = schedule\n\n# Prepare output\noutput = {\"itinerary\": []}\nif best_schedule:\n    for meeting in best_schedule:\n        output[\"itinerary\"].append({\n            \"action\": \"meet\",\n            \"location\": meeting['location'],\n            \"person\": meeting['friend'],\n            \"start_time\": minutes_to_time(meeting['start_time']),\n            \"end_time\": minutes_to_time(meeting['end_time'])\n        })\n\nprint(json.dumps(output, indent=2))\n```"
    }
]