[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nRussian Hill to Nob Hill: 5.\nRussian Hill to Mission District: 16.\nRussian Hill to Embarcadero: 8.\nNob Hill to Russian Hill: 5.\nNob Hill to Mission District: 13.\nNob Hill to Embarcadero: 9.\nMission District to Russian Hill: 15.\nMission District to Nob Hill: 12.\nMission District to Embarcadero: 19.\nEmbarcadero to Russian Hill: 8.\nEmbarcadero to Nob Hill: 10.\nEmbarcadero to Mission District: 20.\n\nCONSTRAINTS: You arrive at Russian Hill at 9:00AM. Patricia will be at Nob Hill from 6:30PM to 9:45PM. You'd like to meet Patricia for a minimum of 90 minutes. Ashley will be at Mission District from 8:30PM to 9:15PM. You'd like to meet Ashley for a minimum of 45 minutes. Timothy will be at Embarcadero from 9:45AM to 5:45PM. You'd like to meet Timothy for a minimum of 120 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\ntravel_times = {\n    ('Russian Hill', 'Nob Hill'): 5,\n    ('Russian Hill', 'Mission District'): 16,\n    ('Russian Hill', 'Embarcadero'): 8,\n    ('Nob Hill', 'Russian Hill'): 5,\n    ('Nob Hill', 'Mission District'): 13,\n    ('Nob Hill', 'Embarcadero'): 9,\n    ('Mission District', 'Russian Hill'): 15,\n    ('Mission District', 'Nob Hill'): 12,\n    ('Mission District', 'Embarcadero'): 19,\n    ('Embarcadero', 'Russian Hill'): 8,\n    ('Embarcadero', 'Nob Hill'): 10,\n    ('Embarcadero', 'Mission District'): 20\n}\n\nfriends = {\n    'Patricia': {\n        'location': 'Nob Hill',\n        'available_start': '18:30',\n        'available_end': '21:45',\n        'min_duration': 90\n    },\n    'Ashley': {\n        'location': 'Mission District',\n        'available_start': '20:30',\n        'available_end': '21:15',\n        'min_duration': 45\n    },\n    'Timothy': {\n        'location': 'Embarcadero',\n        'available_start': '9:45',\n        'available_end': '17:45',\n        'min_duration': 120\n    }\n}\n\ncurrent_location = 'Russian Hill'\ncurrent_time = time_to_minutes('9:00')\n\n# Generate all possible meeting orders\nmeeting_orders = permutations(friends.keys())\n\nbest_schedule = None\nbest_meetings = 0\n\nfor order in meeting_orders:\n    schedule = []\n    temp_location = current_location\n    temp_time = current_time\n    meetings = 0\n    \n    for person in order:\n        friend = friends[person]\n        loc = friend['location']\n        travel_time = travel_times.get((temp_location, loc), float('inf'))\n        arrival_time = temp_time + travel_time\n        \n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        min_duration = friend['min_duration']\n        \n        # Calculate possible meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = min(meeting_start + min_duration, available_end)\n        \n        if meeting_end - meeting_start >= min_duration:\n            schedule.append({\n                'action': 'meet',\n                'location': loc,\n                'person': person,\n                'start_time': minutes_to_time(meeting_start),\n                'end_time': minutes_to_time(meeting_end)\n            })\n            meetings += 1\n            temp_location = loc\n            temp_time = meeting_end\n    \n    if meetings > best_meetings or (meetings == best_meetings and len(schedule) > len(best_schedule)):\n        best_meetings = meetings\n        best_schedule = schedule\n\n# If no meetings possible with all, try subsets\nif best_meetings < len(friends):\n    for num in range(len(friends)-1, 0, -1):\n        for subset in permutations(friends.keys(), num):\n            schedule = []\n            temp_location = current_location\n            temp_time = current_time\n            meetings = 0\n            \n            for person in subset:\n                friend = friends[person]\n                loc = friend['location']\n                travel_time = travel_times.get((temp_location, loc), float('inf'))\n                arrival_time = temp_time + travel_time\n                \n                available_start = time_to_minutes(friend['available_start'])\n                available_end = time_to_minutes(friend['available_end'])\n                min_duration = friend['min_duration']\n                \n                meeting_start = max(arrival_time, available_start)\n                meeting_end = min(meeting_start + min_duration, available_end)\n                \n                if meeting_end - meeting_start >= min_duration:\n                    schedule.append({\n                        'action': 'meet',\n                        'location': loc,\n                        'person': person,\n                        'start_time': minutes_to_time(meeting_start),\n                        'end_time': minutes_to_time(meeting_end)\n                    })\n                    meetings += 1\n                    temp_location = loc\n                    temp_time = meeting_end\n            \n            if meetings > best_meetings or (meetings == best_meetings and len(schedule) > len(best_schedule)):\n                best_meetings = meetings\n                best_schedule = schedule\n                if best_meetings == len(friends):\n                    break\n        if best_meetings == len(friends):\n            break\n\n# Output the best schedule\noutput = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```"
    }
]