[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nPacific Heights to North Beach: 9.\nPacific Heights to Financial District: 13.\nPacific Heights to Alamo Square: 10.\nPacific Heights to Mission District: 15.\nNorth Beach to Pacific Heights: 8.\nNorth Beach to Financial District: 8.\nNorth Beach to Alamo Square: 16.\nNorth Beach to Mission District: 18.\nFinancial District to Pacific Heights: 13.\nFinancial District to North Beach: 7.\nFinancial District to Alamo Square: 17.\nFinancial District to Mission District: 17.\nAlamo Square to Pacific Heights: 10.\nAlamo Square to North Beach: 15.\nAlamo Square to Financial District: 17.\nAlamo Square to Mission District: 10.\nMission District to Pacific Heights: 16.\nMission District to North Beach: 17.\nMission District to Financial District: 17.\nMission District to Alamo Square: 11.\n\nCONSTRAINTS: You arrive at Pacific Heights at 9:00AM. Helen will be at North Beach from 9:00AM to 5:00PM. You'd like to meet Helen for a minimum of 15 minutes. Betty will be at Financial District from 7:00PM to 9:45PM. You'd like to meet Betty for a minimum of 90 minutes. Amanda will be at Alamo Square from 7:45PM to 9:00PM. You'd like to meet Amanda for a minimum of 60 minutes. Kevin will be at Mission District from 10:45AM to 2:45PM. You'd like to meet Kevin for a minimum of 45 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef calculate_schedule():\n    # Travel times in minutes (from -> to)\n    travel_times = {\n        'Pacific Heights': {\n            'North Beach': 9,\n            'Financial District': 13,\n            'Alamo Square': 10,\n            'Mission District': 15\n        },\n        'North Beach': {\n            'Pacific Heights': 8,\n            'Financial District': 8,\n            'Alamo Square': 16,\n            'Mission District': 18\n        },\n        'Financial District': {\n            'Pacific Heights': 13,\n            'North Beach': 7,\n            'Alamo Square': 17,\n            'Mission District': 17\n        },\n        'Alamo Square': {\n            'Pacific Heights': 10,\n            'North Beach': 15,\n            'Financial District': 17,\n            'Mission District': 10\n        },\n        'Mission District': {\n            'Pacific Heights': 16,\n            'North Beach': 17,\n            'Financial District': 17,\n            'Alamo Square': 11\n        }\n    }\n\n    # Constraints\n    start_location = 'Pacific Heights'\n    start_time = time_to_minutes('9:00')\n\n    friends = [\n        {\n            'name': 'Helen',\n            'location': 'North Beach',\n            'available_start': time_to_minutes('9:00'),\n            'available_end': time_to_minutes('17:00'),\n            'min_duration': 15\n        },\n        {\n            'name': 'Kevin',\n            'location': 'Mission District',\n            'available_start': time_to_minutes('10:45'),\n            'available_end': time_to_minutes('14:45'),\n            'min_duration': 45\n        },\n        {\n            'name': 'Amanda',\n            'location': 'Alamo Square',\n            'available_start': time_to_minutes('19:45'),\n            'available_end': time_to_minutes('21:00'),\n            'min_duration': 60\n        },\n        {\n            'name': 'Betty',\n            'location': 'Financial District',\n            'available_start': time_to_minutes('19:00'),\n            'available_end': time_to_minutes('21:45'),\n            'min_duration': 90\n        }\n    ]\n\n    # Generate all possible meeting orders (permutations)\n    best_itinerary = []\n    max_meetings = 0\n\n    for order in permutations(friends):\n        current_location = start_location\n        current_time = start_time\n        itinerary = []\n        meetings = 0\n\n        for friend in order:\n            travel_time = travel_times[current_location][friend['location']]\n            arrival_time = current_time + travel_time\n\n            # Calculate meeting window\n            meeting_start = max(arrival_time, friend['available_start'])\n            meeting_end = min(meeting_start + friend['min_duration'], friend['available_end'])\n\n            if meeting_end - meeting_start >= friend['min_duration']:\n                meetings += 1\n                itinerary.append({\n                    'action': 'meet',\n                    'location': friend['location'],\n                    'person': friend['name'],\n                    'start_time': minutes_to_time(meeting_start),\n                    'end_time': minutes_to_time(meeting_end)\n                })\n                current_time = meeting_end\n                current_location = friend['location']\n            else:\n                break  # Can't meet this friend, skip this order\n\n        if meetings > max_meetings:\n            max_meetings = meetings\n            best_itinerary = itinerary\n\n    # After trying all orders, pick the best one\n    if not best_itinerary:\n        return {\"itinerary\": []}\n\n    # Now try to add more meetings if possible\n    # We'll try to add remaining friends after the initial sequence\n    remaining_friends = [f for f in friends if f['name'] not in [m['person'] for m in best_itinerary]]\n    if remaining_friends:\n        current_location = best_itinerary[-1]['location'] if best_itinerary else start_location\n        current_time = time_to_minutes(best_itinerary[-1]['end_time']) if best_itinerary else start_time\n\n        for friend in remaining_friends:\n            travel_time = travel_times[current_location][friend['location']]\n            arrival_time = current_time + travel_time\n\n            meeting_start = max(arrival_time, friend['available_start'])\n            meeting_end = min(meeting_start + friend['min_duration'], friend['available_end'])\n\n            if meeting_end - meeting_start >= friend['min_duration']:\n                best_itinerary.append({\n                    'action': 'meet',\n                    'location': friend['location'],\n                    'person': friend['name'],\n                    'start_time': minutes_to_time(meeting_start),\n                    'end_time': minutes_to_time(meeting_end)\n                })\n                current_time = meeting_end\n                current_location = friend['location']\n\n    return {\"itinerary\": best_itinerary}\n\nresult = calculate_schedule()\nprint(json.dumps(result, indent=2))\n```"
    }
]