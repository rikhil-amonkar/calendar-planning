[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nUnion Square to Mission District: 14.\nUnion Square to Bayview: 15.\nUnion Square to Sunset District: 26.\nMission District to Union Square: 15.\nMission District to Bayview: 15.\nMission District to Sunset District: 24.\nBayview to Union Square: 17.\nBayview to Mission District: 13.\nBayview to Sunset District: 23.\nSunset District to Union Square: 30.\nSunset District to Mission District: 24.\nSunset District to Bayview: 22.\n\nCONSTRAINTS: You arrive at Union Square at 9:00AM. Rebecca will be at Mission District from 11:30AM to 8:15PM. You'd like to meet Rebecca for a minimum of 120 minutes. Karen will be at Bayview from 12:45PM to 3:00PM. You'd like to meet Karen for a minimum of 120 minutes. Carol will be at Sunset District from 10:15AM to 11:45AM. You'd like to meet Carol for a minimum of 30 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input parameters\ntravel_times = {\n    ('Union Square', 'Mission District'): 14,\n    ('Union Square', 'Bayview'): 15,\n    ('Union Square', 'Sunset District'): 26,\n    ('Mission District', 'Union Square'): 15,\n    ('Mission District', 'Bayview'): 15,\n    ('Mission District', 'Sunset District'): 24,\n    ('Bayview', 'Union Square'): 17,\n    ('Bayview', 'Mission District'): 13,\n    ('Bayview', 'Sunset District'): 23,\n    ('Sunset District', 'Union Square'): 30,\n    ('Sunset District', 'Mission District'): 24,\n    ('Sunset District', 'Bayview'): 22\n}\n\nfriends = {\n    'Rebecca': {\n        'location': 'Mission District',\n        'start': time_to_minutes('11:30'),\n        'end': time_to_minutes('20:15'),\n        'duration': 120\n    },\n    'Karen': {\n        'location': 'Bayview',\n        'start': time_to_minutes('12:45'),\n        'end': time_to_minutes('15:00'),\n        'duration': 120\n    },\n    'Carol': {\n        'location': 'Sunset District',\n        'start': time_to_minutes('10:15'),\n        'end': time_to_minutes('11:45'),\n        'duration': 30\n    }\n}\n\ncurrent_location = 'Union Square'\ncurrent_time = time_to_minutes('9:00')\n\n# Generate all possible meeting orders\nmeeting_orders = permutations(['Rebecca', 'Karen', 'Carol'])\n\nbest_schedule = None\nbest_meetings = 0\n\nfor order in meeting_orders:\n    schedule = []\n    temp_location = current_location\n    temp_time = current_time\n    meetings = 0\n    \n    for person in order:\n        friend = friends[person]\n        location = friend['location']\n        \n        # Travel to friend's location\n        travel_time = travel_times[(temp_location, location)]\n        arrival_time = temp_time + travel_time\n        \n        # Check if we can meet\n        meeting_start = max(arrival_time, friend['start'])\n        meeting_end = meeting_start + friend['duration']\n        \n        if meeting_end <= friend['end']:\n            # Add meeting to schedule\n            schedule.append({\n                'action': 'meet',\n                'location': location,\n                'person': person,\n                'start_time': minutes_to_time(meeting_start),\n                'end_time': minutes_to_time(meeting_end)\n            })\n            meetings += 1\n            temp_location = location\n            temp_time = meeting_end\n        else:\n            # Can't meet this friend in this order\n            break\n    \n    if meetings > best_meetings:\n        best_meetings = meetings\n        best_schedule = schedule\n    elif meetings == best_meetings and meetings > 0:\n        # Prefer schedules that meet more people or have earlier end times\n        if not best_schedule or (schedule[-1]['end_time'] < best_schedule[-1]['end_time']):\n            best_schedule = schedule\n\n# Output the best schedule\nif best_schedule:\n    result = {'itinerary': best_schedule}\nelse:\n    result = {'itinerary': []}\n\nprint(json.dumps(result, indent=2))\n```"
    }
]