[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nEmbarcadero to Golden Gate Park: 25.\nEmbarcadero to Haight-Ashbury: 21.\nEmbarcadero to Bayview: 21.\nEmbarcadero to Presidio: 20.\nEmbarcadero to Financial District: 5.\nGolden Gate Park to Embarcadero: 25.\nGolden Gate Park to Haight-Ashbury: 7.\nGolden Gate Park to Bayview: 23.\nGolden Gate Park to Presidio: 11.\nGolden Gate Park to Financial District: 26.\nHaight-Ashbury to Embarcadero: 20.\nHaight-Ashbury to Golden Gate Park: 7.\nHaight-Ashbury to Bayview: 18.\nHaight-Ashbury to Presidio: 15.\nHaight-Ashbury to Financial District: 21.\nBayview to Embarcadero: 19.\nBayview to Golden Gate Park: 22.\nBayview to Haight-Ashbury: 19.\nBayview to Presidio: 31.\nBayview to Financial District: 19.\nPresidio to Embarcadero: 20.\nPresidio to Golden Gate Park: 12.\nPresidio to Haight-Ashbury: 15.\nPresidio to Bayview: 31.\nPresidio to Financial District: 23.\nFinancial District to Embarcadero: 4.\nFinancial District to Golden Gate Park: 23.\nFinancial District to Haight-Ashbury: 19.\nFinancial District to Bayview: 19.\nFinancial District to Presidio: 22.\n\nCONSTRAINTS: You arrive at Embarcadero at 9:00AM. Mary will be at Golden Gate Park from 8:45AM to 11:45AM. You'd like to meet Mary for a minimum of 45 minutes. Kevin will be at Haight-Ashbury from 10:15AM to 4:15PM. You'd like to meet Kevin for a minimum of 90 minutes. Deborah will be at Bayview from 3:00PM to 7:15PM. You'd like to meet Deborah for a minimum of 120 minutes. Stephanie will be at Presidio from 10:00AM to 5:15PM. You'd like to meet Stephanie for a minimum of 120 minutes. Emily will be at Financial District from 11:30AM to 9:45PM. You'd like to meet Emily for a minimum of 105 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input data\ntravel_times = {\n    'Embarcadero': {\n        'Golden Gate Park': 25,\n        'Haight-Ashbury': 21,\n        'Bayview': 21,\n        'Presidio': 20,\n        'Financial District': 5\n    },\n    'Golden Gate Park': {\n        'Embarcadero': 25,\n        'Haight-Ashbury': 7,\n        'Bayview': 23,\n        'Presidio': 11,\n        'Financial District': 26\n    },\n    'Haight-Ashbury': {\n        'Embarcadero': 20,\n        'Golden Gate Park': 7,\n        'Bayview': 18,\n        'Presidio': 15,\n        'Financial District': 21\n    },\n    'Bayview': {\n        'Embarcadero': 19,\n        'Golden Gate Park': 22,\n        'Haight-Ashbury': 19,\n        'Presidio': 31,\n        'Financial District': 19\n    },\n    'Presidio': {\n        'Embarcadero': 20,\n        'Golden Gate Park': 12,\n        'Haight-Ashbury': 15,\n        'Bayview': 31,\n        'Financial District': 23\n    },\n    'Financial District': {\n        'Embarcadero': 4,\n        'Golden Gate Park': 23,\n        'Haight-Ashbury': 19,\n        'Bayview': 19,\n        'Presidio': 22\n    }\n}\n\nfriends = [\n    {\n        'name': 'Mary',\n        'location': 'Golden Gate Park',\n        'available_start': '8:45',\n        'available_end': '11:45',\n        'duration': 45\n    },\n    {\n        'name': 'Kevin',\n        'location': 'Haight-Ashbury',\n        'available_start': '10:15',\n        'available_end': '16:15',\n        'duration': 90\n    },\n    {\n        'name': 'Deborah',\n        'location': 'Bayview',\n        'available_start': '15:00',\n        'available_end': '19:15',\n        'duration': 120\n    },\n    {\n        'name': 'Stephanie',\n        'location': 'Presidio',\n        'available_start': '10:00',\n        'available_end': '17:15',\n        'duration': 120\n    },\n    {\n        'name': 'Emily',\n        'location': 'Financial District',\n        'available_start': '11:30',\n        'available_end': '21:45',\n        'duration': 105\n    }\n]\n\n# Generate all possible orders to meet friends\ndef generate_schedules():\n    possible_friends = [f for f in friends]\n    return permutations(possible_friends)\n\ndef calculate_schedule_score(schedule):\n    current_time = time_to_minutes('9:00')\n    current_location = 'Embarcadero'\n    total_meetings = 0\n    itinerary = []\n    \n    for friend in schedule:\n        # Calculate travel time\n        travel_time = travel_times[current_location][friend['location']]\n        arrival_time = current_time + travel_time\n        \n        # Check if we can meet this friend\n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        \n        # Determine meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + friend['duration']\n        \n        if meeting_end > available_end:\n            continue  # Can't meet this friend\n        \n        # Add to itinerary\n        itinerary.append({\n            'action': 'meet',\n            'location': friend['location'],\n            'person': friend['name'],\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        total_meetings += 1\n        current_time = meeting_end\n        current_location = friend['location']\n    \n    return total_meetings, itinerary\n\ndef find_optimal_schedule():\n    best_score = 0\n    best_itinerary = []\n    \n    for schedule in generate_schedules():\n        score, itinerary = calculate_schedule_score(schedule)\n        if score > best_score:\n            best_score = score\n            best_itinerary = itinerary\n    \n    return best_itinerary\n\n# Main execution\noptimal_itinerary = find_optimal_schedule()\noutput = {\n    \"itinerary\": optimal_itinerary\n}\nprint(json.dumps(output, indent=2))\n```"
    }
]