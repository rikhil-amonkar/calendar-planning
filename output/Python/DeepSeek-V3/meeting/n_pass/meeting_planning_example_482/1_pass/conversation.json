[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nHaight-Ashbury to Mission District: 11.\nHaight-Ashbury to Bayview: 18.\nHaight-Ashbury to Pacific Heights: 12.\nHaight-Ashbury to Russian Hill: 17.\nHaight-Ashbury to Fisherman's Wharf: 23.\nMission District to Haight-Ashbury: 12.\nMission District to Bayview: 15.\nMission District to Pacific Heights: 16.\nMission District to Russian Hill: 15.\nMission District to Fisherman's Wharf: 22.\nBayview to Haight-Ashbury: 19.\nBayview to Mission District: 13.\nBayview to Pacific Heights: 23.\nBayview to Russian Hill: 23.\nBayview to Fisherman's Wharf: 25.\nPacific Heights to Haight-Ashbury: 11.\nPacific Heights to Mission District: 15.\nPacific Heights to Bayview: 22.\nPacific Heights to Russian Hill: 7.\nPacific Heights to Fisherman's Wharf: 13.\nRussian Hill to Haight-Ashbury: 17.\nRussian Hill to Mission District: 16.\nRussian Hill to Bayview: 23.\nRussian Hill to Pacific Heights: 7.\nRussian Hill to Fisherman's Wharf: 7.\nFisherman's Wharf to Haight-Ashbury: 22.\nFisherman's Wharf to Mission District: 22.\nFisherman's Wharf to Bayview: 26.\nFisherman's Wharf to Pacific Heights: 12.\nFisherman's Wharf to Russian Hill: 7.\n\nCONSTRAINTS: You arrive at Haight-Ashbury at 9:00AM. Stephanie will be at Mission District from 8:15AM to 1:45PM. You'd like to meet Stephanie for a minimum of 90 minutes. Sandra will be at Bayview from 1:00PM to 7:30PM. You'd like to meet Sandra for a minimum of 15 minutes. Richard will be at Pacific Heights from 7:15AM to 10:15AM. You'd like to meet Richard for a minimum of 75 minutes. Brian will be at Russian Hill from 12:15PM to 4:00PM. You'd like to meet Brian for a minimum of 120 minutes. Jason will be at Fisherman's Wharf from 8:30AM to 5:45PM. You'd like to meet Jason for a minimum of 60 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times in minutes\ntravel_times = {\n    'Haight-Ashbury': {\n        'Mission District': 11,\n        'Bayview': 18,\n        'Pacific Heights': 12,\n        'Russian Hill': 17,\n        'Fisherman\\'s Wharf': 23\n    },\n    'Mission District': {\n        'Haight-Ashbury': 12,\n        'Bayview': 15,\n        'Pacific Heights': 16,\n        'Russian Hill': 15,\n        'Fisherman\\'s Wharf': 22\n    },\n    'Bayview': {\n        'Haight-Ashbury': 19,\n        'Mission District': 13,\n        'Pacific Heights': 23,\n        'Russian Hill': 23,\n        'Fisherman\\'s Wharf': 25\n    },\n    'Pacific Heights': {\n        'Haight-Ashbury': 11,\n        'Mission District': 15,\n        'Bayview': 22,\n        'Russian Hill': 7,\n        'Fisherman\\'s Wharf': 13\n    },\n    'Russian Hill': {\n        'Haight-Ashbury': 17,\n        'Mission District': 16,\n        'Bayview': 23,\n        'Pacific Heights': 7,\n        'Fisherman\\'s Wharf': 7\n    },\n    'Fisherman\\'s Wharf': {\n        'Haight-Ashbury': 22,\n        'Mission District': 22,\n        'Bayview': 26,\n        'Pacific Heights': 12,\n        'Russian Hill': 7\n    }\n}\n\n# Friend constraints\nfriends = {\n    'Stephanie': {\n        'location': 'Mission District',\n        'available_start': (8, 15),\n        'available_end': (13, 45),\n        'min_duration': 90\n    },\n    'Sandra': {\n        'location': 'Bayview',\n        'available_start': (13, 0),\n        'available_end': (19, 30),\n        'min_duration': 15\n    },\n    'Richard': {\n        'location': 'Pacific Heights',\n        'available_start': (7, 15),\n        'available_end': (10, 15),\n        'min_duration': 75\n    },\n    'Brian': {\n        'location': 'Russian Hill',\n        'available_start': (12, 15),\n        'available_end': (16, 0),\n        'min_duration': 120\n    },\n    'Jason': {\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': (8, 30),\n        'available_end': (17, 45),\n        'min_duration': 60\n    }\n}\n\ndef time_to_minutes(time_tuple):\n    return time_tuple[0] * 60 + time_tuple[1]\n\ndef minutes_to_time(minutes):\n    return (minutes // 60, minutes % 60)\n\ndef format_time(time_tuple):\n    return f\"{time_tuple[0]}:{time_tuple[1]:02d}\"\n\ndef is_valid_schedule(schedule):\n    current_location = 'Haight-Ashbury'\n    current_time = time_to_minutes((9, 0))\n    \n    for entry in schedule:\n        person = entry['person']\n        friend = friends[person]\n        location = friend['location']\n        \n        # Travel time\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        \n        # Check if arrival is within friend's availability\n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        \n        if arrival_time > available_end:\n            return False\n        \n        start_time = max(arrival_time, available_start)\n        end_time = start_time + friend['min_duration']\n        \n        if end_time > available_end:\n            return False\n        \n        current_time = end_time\n        current_location = location\n    \n    return True\n\ndef calculate_schedule(schedule_order):\n    itinerary = []\n    current_location = 'Haight-Ashbury'\n    current_time = time_to_minutes((9, 0))\n    \n    for person in schedule_order:\n        friend = friends[person]\n        location = friend['location']\n        \n        # Travel time\n        travel_time = travel_times[current_location][location]\n        arrival_time = current_time + travel_time\n        \n        # Calculate meeting time\n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        \n        start_time = max(arrival_time, available_start)\n        end_time = start_time + friend['min_duration']\n        \n        # Add to itinerary\n        itinerary.append({\n            'action': 'meet',\n            'location': location,\n            'person': person,\n            'start_time': format_time(minutes_to_time(start_time)),\n            'end_time': format_time(minutes_to_time(end_time))\n        })\n        \n        current_time = end_time\n        current_location = location\n    \n    return itinerary\n\ndef main():\n    best_schedule = None\n    max_meetings = 0\n    \n    # Try all possible permutations of friends\n    for perm in permutations(friends.keys()):\n        if is_valid_schedule([{'person': p} for p in perm]):\n            num_meetings = len(perm)\n            if num_meetings > max_meetings:\n                max_meetings = num_meetings\n                best_schedule = perm\n    \n    if best_schedule is None:\n        # Try subsets if full permutation fails\n        for size in range(len(friends), 0, -1):\n            for perm in permutations(friends.keys(), size):\n                if is_valid_schedule([{'person': p} for p in perm]):\n                    best_schedule = perm\n                    break\n            if best_schedule is not None:\n                break\n    \n    if best_schedule:\n        itinerary = calculate_schedule(best_schedule)\n        result = {'itinerary': itinerary}\n    else:\n        result = {'itinerary': []}\n    \n    print(json.dumps(result, indent=2))\n\nif __name__ == '__main__':\n    main()\n```"
    }
]