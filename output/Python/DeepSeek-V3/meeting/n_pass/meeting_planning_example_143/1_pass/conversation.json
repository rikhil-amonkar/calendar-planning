[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nNorth Beach to Pacific Heights: 8.\nNorth Beach to Embarcadero: 6.\nPacific Heights to North Beach: 9.\nPacific Heights to Embarcadero: 10.\nEmbarcadero to North Beach: 5.\nEmbarcadero to Pacific Heights: 11.\n\nCONSTRAINTS: You arrive at North Beach at 9:00AM. Karen will be at Pacific Heights from 6:45PM to 8:15PM. You'd like to meet Karen for a minimum of 90 minutes. Mark will be at Embarcadero from 1:00PM to 5:45PM. You'd like to meet Mark for a minimum of 120 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef calculate_schedule():\n    # Input parameters\n    arrival_time = parse_time(\"9:00\")\n    karen_available_start = parse_time(\"18:45\")\n    karen_available_end = parse_time(\"20:15\")\n    karen_min_duration = timedelta(minutes=90)\n    mark_available_start = parse_time(\"13:00\")\n    mark_available_end = parse_time(\"17:45\")\n    mark_min_duration = timedelta(minutes=120)\n    \n    # Travel times in minutes\n    travel_times = {\n        (\"North Beach\", \"Pacific Heights\"): 8,\n        (\"North Beach\", \"Embarcadero\"): 6,\n        (\"Pacific Heights\", \"North Beach\"): 9,\n        (\"Pacific Heights\", \"Embarcadero\"): 10,\n        (\"Embarcadero\", \"North Beach\"): 5,\n        (\"Embarcadero\", \"Pacific Heights\"): 11\n    }\n    \n    current_location = \"North Beach\"\n    current_time = arrival_time\n    itinerary = []\n    \n    # Try to meet Mark first\n    mark_travel_time = travel_times[(current_location, \"Embarcadero\")]\n    mark_arrival_time = current_time + timedelta(minutes=mark_travel_time)\n    \n    if mark_arrival_time <= mark_available_end - mark_min_duration:\n        mark_start_time = max(mark_arrival_time, mark_available_start)\n        mark_end_time = mark_start_time + mark_min_duration\n        \n        if mark_end_time <= mark_available_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Embarcadero\",\n                \"person\": \"Mark\",\n                \"start_time\": format_time(mark_start_time),\n                \"end_time\": format_time(mark_end_time)\n            })\n            \n            # Travel to Karen after meeting Mark\n            current_time = mark_end_time\n            current_location = \"Embarcadero\"\n            karen_travel_time = travel_times[(current_location, \"Pacific Heights\")]\n            karen_arrival_time = current_time + timedelta(minutes=karen_travel_time)\n            \n            if karen_arrival_time <= karen_available_end - karen_min_duration:\n                karen_start_time = max(karen_arrival_time, karen_available_start)\n                karen_end_time = karen_start_time + karen_min_duration\n                \n                if karen_end_time <= karen_available_end:\n                    itinerary.append({\n                        \"action\": \"meet\",\n                        \"location\": \"Pacific Heights\",\n                        \"person\": \"Karen\",\n                        \"start_time\": format_time(karen_start_time),\n                        \"end_time\": format_time(karen_end_time)\n                    })\n                    return {\"itinerary\": itinerary}\n    \n    # If meeting Mark first doesn't work, try meeting Karen first\n    current_location = \"North Beach\"\n    current_time = arrival_time\n    itinerary = []\n    \n    karen_travel_time = travel_times[(current_location, \"Pacific Heights\")]\n    karen_arrival_time = current_time + timedelta(minutes=karen_travel_time)\n    \n    if karen_arrival_time <= karen_available_end - karen_min_duration:\n        karen_start_time = max(karen_arrival_time, karen_available_start)\n        karen_end_time = karen_start_time + karen_min_duration\n        \n        if karen_end_time <= karen_available_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Pacific Heights\",\n                \"person\": \"Karen\",\n                \"start_time\": format_time(karen_start_time),\n                \"end_time\": format_time(karen_end_time)\n            })\n            \n            # Travel to Mark after meeting Karen\n            current_time = karen_end_time\n            current_location = \"Pacific Heights\"\n            mark_travel_time = travel_times[(current_location, \"Embarcadero\")]\n            mark_arrival_time = current_time + timedelta(minutes=mark_travel_time)\n            \n            if mark_arrival_time <= mark_available_end - mark_min_duration:\n                mark_start_time = max(mark_arrival_time, mark_available_start)\n                mark_end_time = mark_start_time + mark_min_duration\n                \n                if mark_end_time <= mark_available_end:\n                    itinerary.append({\n                        \"action\": \"meet\",\n                        \"location\": \"Embarcadero\",\n                        \"person\": \"Mark\",\n                        \"start_time\": format_time(mark_start_time),\n                        \"end_time\": format_time(mark_end_time)\n                    })\n                    return {\"itinerary\": itinerary}\n    \n    # If neither works, try meeting only one person\n    # Try meeting Mark only\n    current_location = \"North Beach\"\n    current_time = arrival_time\n    itinerary = []\n    \n    mark_travel_time = travel_times[(current_location, \"Embarcadero\")]\n    mark_arrival_time = current_time + timedelta(minutes=mark_travel_time)\n    \n    if mark_arrival_time <= mark_available_end - mark_min_duration:\n        mark_start_time = max(mark_arrival_time, mark_available_start)\n        mark_end_time = mark_start_time + mark_min_duration\n        \n        if mark_end_time <= mark_available_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Embarcadero\",\n                \"person\": \"Mark\",\n                \"start_time\": format_time(mark_start_time),\n                \"end_time\": format_time(mark_end_time)\n            })\n            return {\"itinerary\": itinerary}\n    \n    # Try meeting Karen only\n    current_location = \"North Beach\"\n    current_time = arrival_time\n    itinerary = []\n    \n    karen_travel_time = travel_times[(current_location, \"Pacific Heights\")]\n    karen_arrival_time = current_time + timedelta(minutes=karen_travel_time)\n    \n    if karen_arrival_time <= karen_available_end - karen_min_duration:\n        karen_start_time = max(karen_arrival_time, karen_available_start)\n        karen_end_time = karen_start_time + karen_min_duration\n        \n        if karen_end_time <= karen_available_end:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": \"Pacific Heights\",\n                \"person\": \"Karen\",\n                \"start_time\": format_time(karen_start_time),\n                \"end_time\": format_time(karen_end_time)\n            })\n            return {\"itinerary\": itinerary}\n    \n    # If nothing works, return empty itinerary\n    return {\"itinerary\": []}\n\nresult = calculate_schedule()\nprint(json.dumps(result, indent=2))\n```"
    }
]