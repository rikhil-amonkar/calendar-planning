[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nNob Hill to Pacific Heights: 8.\nNob Hill to Mission District: 13.\nPacific Heights to Nob Hill: 8.\nPacific Heights to Mission District: 15.\nMission District to Nob Hill: 12.\nMission District to Pacific Heights: 16.\n\nCONSTRAINTS: You arrive at Nob Hill at 9:00AM. Thomas will be at Pacific Heights from 3:30PM to 7:15PM. You'd like to meet Thomas for a minimum of 75 minutes. Kenneth will be at Mission District from 12:00PM to 3:45PM. You'd like to meet Kenneth for a minimum of 45 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef main():\n    # Input parameters\n    arrival_time = parse_time(\"9:00\")\n    current_location = \"Nob Hill\"\n    \n    # Friend constraints\n    thomas_available_start = parse_time(\"15:30\")\n    thomas_available_end = parse_time(\"19:15\")\n    thomas_min_duration = timedelta(minutes=75)\n    thomas_location = \"Pacific Heights\"\n    \n    kenneth_available_start = parse_time(\"12:00\")\n    kenneth_available_end = parse_time(\"15:45\")\n    kenneth_min_duration = timedelta(minutes=45)\n    kenneth_location = \"Mission District\"\n    \n    # Travel times in minutes\n    travel_times = {\n        (\"Nob Hill\", \"Pacific Heights\"): 8,\n        (\"Nob Hill\", \"Mission District\"): 13,\n        (\"Pacific Heights\", \"Nob Hill\"): 8,\n        (\"Pacific Heights\", \"Mission District\"): 15,\n        (\"Mission District\", \"Nob Hill\"): 12,\n        (\"Mission District\", \"Pacific Heights\"): 16,\n    }\n    \n    # Possible meeting orders\n    possible_orders = [\n        [\"Kenneth\", \"Thomas\"],\n        [\"Thomas\", \"Kenneth\"],\n    ]\n    \n    best_schedule = None\n    max_meetings = 0\n    \n    for order in possible_orders:\n        current_time = arrival_time\n        location = current_location\n        schedule = []\n        meetings = 0\n        \n        for person in order:\n            if person == \"Kenneth\":\n                available_start = kenneth_available_start\n                available_end = kenneth_available_end\n                min_duration = kenneth_min_duration\n                target_location = kenneth_location\n            else:\n                available_start = thomas_available_start\n                available_end = thomas_available_end\n                min_duration = thomas_min_duration\n                target_location = thomas_location\n            \n            # Travel to the location\n            travel_key = (location, target_location)\n            travel_duration = timedelta(minutes=travel_times[travel_key])\n            arrival_at_target = current_time + travel_duration\n            \n            # Calculate meeting window\n            meeting_start = max(arrival_at_target, available_start)\n            meeting_end = min(meeting_start + min_duration, available_end)\n            \n            if meeting_end > meeting_start:\n                # Add meeting to schedule\n                schedule.append({\n                    \"action\": \"meet\",\n                    \"location\": target_location,\n                    \"person\": person,\n                    \"start_time\": format_time(meeting_start),\n                    \"end_time\": format_time(meeting_end)\n                })\n                meetings += 1\n                current_time = meeting_end\n                location = target_location\n        \n        if meetings > max_meetings or (meetings == max_meetings and best_schedule is None):\n            max_meetings = meetings\n            best_schedule = schedule\n    \n    # Output the best schedule\n    output = {\n        \"itinerary\": best_schedule\n    }\n    print(json.dumps(output, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]