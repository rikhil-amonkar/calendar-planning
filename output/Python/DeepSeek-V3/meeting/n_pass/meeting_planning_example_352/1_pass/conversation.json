[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nUnion Square to Nob Hill: 9.\nUnion Square to Haight-Ashbury: 18.\nUnion Square to Chinatown: 7.\nUnion Square to Marina District: 18.\nNob Hill to Union Square: 7.\nNob Hill to Haight-Ashbury: 13.\nNob Hill to Chinatown: 6.\nNob Hill to Marina District: 11.\nHaight-Ashbury to Union Square: 17.\nHaight-Ashbury to Nob Hill: 15.\nHaight-Ashbury to Chinatown: 19.\nHaight-Ashbury to Marina District: 17.\nChinatown to Union Square: 7.\nChinatown to Nob Hill: 8.\nChinatown to Haight-Ashbury: 19.\nChinatown to Marina District: 12.\nMarina District to Union Square: 16.\nMarina District to Nob Hill: 12.\nMarina District to Haight-Ashbury: 16.\nMarina District to Chinatown: 16.\n\nCONSTRAINTS: You arrive at Union Square at 9:00AM. Karen will be at Nob Hill from 9:15PM to 9:45PM. You'd like to meet Karen for a minimum of 30 minutes. Joseph will be at Haight-Ashbury from 12:30PM to 7:45PM. You'd like to meet Joseph for a minimum of 90 minutes. Sandra will be at Chinatown from 7:15AM to 7:15PM. You'd like to meet Sandra for a minimum of 75 minutes. Nancy will be at Marina District from 11:00AM to 8:15PM. You'd like to meet Nancy for a minimum of 105 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes = minutes % 60\n    return f\"{hours}:{minutes:02d}\"\n\n# Input data\ntravel_times = {\n    'Union Square': {\n        'Nob Hill': 9,\n        'Haight-Ashbury': 18,\n        'Chinatown': 7,\n        'Marina District': 18\n    },\n    'Nob Hill': {\n        'Union Square': 7,\n        'Haight-Ashbury': 13,\n        'Chinatown': 6,\n        'Marina District': 11\n    },\n    'Haight-Ashbury': {\n        'Union Square': 17,\n        'Nob Hill': 15,\n        'Chinatown': 19,\n        'Marina District': 17\n    },\n    'Chinatown': {\n        'Union Square': 7,\n        'Nob Hill': 8,\n        'Haight-Ashbury': 19,\n        'Marina District': 12\n    },\n    'Marina District': {\n        'Union Square': 16,\n        'Nob Hill': 12,\n        'Haight-Ashbury': 16,\n        'Chinatown': 16\n    }\n}\n\nfriends = [\n    {\n        'name': 'Karen',\n        'location': 'Nob Hill',\n        'available_start': '21:15',\n        'available_end': '21:45',\n        'duration': 30\n    },\n    {\n        'name': 'Joseph',\n        'location': 'Haight-Ashbury',\n        'available_start': '12:30',\n        'available_end': '19:45',\n        'duration': 90\n    },\n    {\n        'name': 'Sandra',\n        'location': 'Chinatown',\n        'available_start': '7:15',\n        'available_end': '19:15',\n        'duration': 75\n    },\n    {\n        'name': 'Nancy',\n        'location': 'Marina District',\n        'available_start': '11:00',\n        'available_end': '20:15',\n        'duration': 105\n    }\n]\n\ncurrent_location = 'Union Square'\ncurrent_time = time_to_minutes('9:00')\n\ndef calculate_schedule(order):\n    schedule = []\n    loc = current_location\n    time = current_time\n    met_friends = []\n    \n    for friend_idx in order:\n        friend = friends[friend_idx]\n        travel_time = travel_times[loc][friend['location']]\n        arrival_time = time + travel_time\n        \n        available_start = time_to_minutes(friend['available_start'])\n        available_end = time_to_minutes(friend['available_end'])\n        \n        # Calculate meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + friend['duration']\n        \n        if meeting_end > available_end:\n            return None  # Can't meet this friend\n        \n        schedule.append({\n            'action': 'travel',\n            'location': friend['location'],\n            'start_time': minutes_to_time(time),\n            'end_time': minutes_to_time(arrival_time)\n        })\n        \n        schedule.append({\n            'action': 'meet',\n            'location': friend['location'],\n            'person': friend['name'],\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        met_friends.append(friend['name'])\n        loc = friend['location']\n        time = meeting_end\n    \n    return {\n        'schedule': schedule,\n        'met_friends': met_friends,\n        'total_met': len(met_friends)\n    }\n\n# Try all possible orders of meeting friends\nbest_schedule = None\nmax_met = 0\n\nfor perm in permutations(range(len(friends))):\n    result = calculate_schedule(perm)\n    if result and result['total_met'] > max_met:\n        max_met = result['total_met']\n        best_schedule = result['schedule']\n    elif result and result['total_met'] == max_met:\n        # Prefer schedules that end earlier\n        if not best_schedule or time_to_minutes(result['schedule'][-1]['end_time']) < time_to_minutes(best_schedule[-1]['end_time']):\n            best_schedule = result['schedule']\n\n# Prepare output\nif best_schedule:\n    output = {\n        \"itinerary\": best_schedule\n    }\nelse:\n    output = {\n        \"itinerary\": []\n    }\n\nprint(json.dumps(output, indent=2))\n```"
    }
]