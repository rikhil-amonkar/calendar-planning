[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nBayview to Embarcadero: 19.\nBayview to Fisherman's Wharf: 25.\nBayview to Financial District: 19.\nEmbarcadero to Bayview: 21.\nEmbarcadero to Fisherman's Wharf: 6.\nEmbarcadero to Financial District: 5.\nFisherman's Wharf to Bayview: 26.\nFisherman's Wharf to Embarcadero: 8.\nFisherman's Wharf to Financial District: 11.\nFinancial District to Bayview: 19.\nFinancial District to Embarcadero: 4.\nFinancial District to Fisherman's Wharf: 10.\n\nCONSTRAINTS: You arrive at Bayview at 9:00AM. Betty will be at Embarcadero from 7:45PM to 9:45PM. You'd like to meet Betty for a minimum of 15 minutes. Karen will be at Fisherman's Wharf from 8:45AM to 3:00PM. You'd like to meet Karen for a minimum of 30 minutes. Anthony will be at Financial District from 9:15AM to 9:30PM. You'd like to meet Anthony for a minimum of 105 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\n# Input parameters\ntravel_times = {\n    'Bayview': {\n        'Embarcadero': 19,\n        'Fisherman\\'s Wharf': 25,\n        'Financial District': 19\n    },\n    'Embarcadero': {\n        'Bayview': 21,\n        'Fisherman\\'s Wharf': 6,\n        'Financial District': 5\n    },\n    'Fisherman\\'s Wharf': {\n        'Bayview': 26,\n        'Embarcadero': 8,\n        'Financial District': 11\n    },\n    'Financial District': {\n        'Bayview': 19,\n        'Embarcadero': 4,\n        'Fisherman\\'s Wharf': 10\n    }\n}\n\nfriends = {\n    'Betty': {\n        'location': 'Embarcadero',\n        'available_start': '19:45',\n        'available_end': '21:45',\n        'min_duration': 15\n    },\n    'Karen': {\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '8:45',\n        'available_end': '15:00',\n        'min_duration': 30\n    },\n    'Anthony': {\n        'location': 'Financial District',\n        'available_start': '9:15',\n        'available_end': '21:30',\n        'min_duration': 105\n    }\n}\n\ncurrent_location = 'Bayview'\ncurrent_time = time_to_minutes('9:00')\n\ndef calculate_schedule(order):\n    schedule = []\n    loc = current_location\n    time = current_time\n    met_friends = set()\n    \n    for friend in order:\n        data = friends[friend]\n        dest = data['location']\n        travel_time = travel_times[loc][dest]\n        arrival_time = time + travel_time\n        \n        available_start = time_to_minutes(data['available_start'])\n        available_end = time_to_minutes(data['available_end'])\n        min_duration = data['min_duration']\n        \n        # Calculate meeting window\n        start_time = max(arrival_time, available_start)\n        end_time = min(start_time + min_duration, available_end)\n        \n        if end_time - start_time >= min_duration:\n            schedule.append({\n                'action': 'meet',\n                'location': dest,\n                'person': friend,\n                'start_time': minutes_to_time(start_time),\n                'end_time': minutes_to_time(end_time)\n            })\n            met_friends.add(friend)\n            time = end_time\n            loc = dest\n        else:\n            return None, set()\n    \n    return schedule, met_friends\n\nbest_schedule = None\nmax_met = 0\n\n# Try all possible orders of meeting friends\nfor order in permutations(friends.keys()):\n    schedule, met_friends = calculate_schedule(order)\n    if len(met_friends) > max_met or (len(met_friends) == max_met and schedule is not None):\n        best_schedule = schedule\n        max_met = len(met_friends)\n\nif best_schedule is None:\n    best_schedule = []\n\noutput = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```"
    }
]