[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nRussian Hill to Marina District: 7.\nRussian Hill to Financial District: 11.\nRussian Hill to Alamo Square: 15.\nRussian Hill to Golden Gate Park: 21.\nRussian Hill to The Castro: 21.\nRussian Hill to Bayview: 23.\nRussian Hill to Sunset District: 23.\nRussian Hill to Haight-Ashbury: 17.\nRussian Hill to Nob Hill: 5.\nMarina District to Russian Hill: 8.\nMarina District to Financial District: 17.\nMarina District to Alamo Square: 15.\nMarina District to Golden Gate Park: 18.\nMarina District to The Castro: 22.\nMarina District to Bayview: 27.\nMarina District to Sunset District: 19.\nMarina District to Haight-Ashbury: 16.\nMarina District to Nob Hill: 12.\nFinancial District to Russian Hill: 11.\nFinancial District to Marina District: 15.\nFinancial District to Alamo Square: 17.\nFinancial District to Golden Gate Park: 23.\nFinancial District to The Castro: 20.\nFinancial District to Bayview: 19.\nFinancial District to Sunset District: 30.\nFinancial District to Haight-Ashbury: 19.\nFinancial District to Nob Hill: 8.\nAlamo Square to Russian Hill: 13.\nAlamo Square to Marina District: 15.\nAlamo Square to Financial District: 17.\nAlamo Square to Golden Gate Park: 9.\nAlamo Square to The Castro: 8.\nAlamo Square to Bayview: 16.\nAlamo Square to Sunset District: 16.\nAlamo Square to Haight-Ashbury: 5.\nAlamo Square to Nob Hill: 11.\nGolden Gate Park to Russian Hill: 19.\nGolden Gate Park to Marina District: 16.\nGolden Gate Park to Financial District: 26.\nGolden Gate Park to Alamo Square: 9.\nGolden Gate Park to The Castro: 13.\nGolden Gate Park to Bayview: 23.\nGolden Gate Park to Sunset District: 10.\nGolden Gate Park to Haight-Ashbury: 7.\nGolden Gate Park to Nob Hill: 20.\nThe Castro to Russian Hill: 18.\nThe Castro to Marina District: 21.\nThe Castro to Financial District: 21.\nThe Castro to Alamo Square: 8.\nThe Castro to Golden Gate Park: 11.\nThe Castro to Bayview: 19.\nThe Castro to Sunset District: 17.\nThe Castro to Haight-Ashbury: 6.\nThe Castro to Nob Hill: 16.\nBayview to Russian Hill: 23.\nBayview to Marina District: 27.\nBayview to Financial District: 19.\nBayview to Alamo Square: 16.\nBayview to Golden Gate Park: 22.\nBayview to The Castro: 19.\nBayview to Sunset District: 23.\nBayview to Haight-Ashbury: 19.\nBayview to Nob Hill: 20.\nSunset District to Russian Hill: 24.\nSunset District to Marina District: 21.\nSunset District to Financial District: 30.\nSunset District to Alamo Square: 17.\nSunset District to Golden Gate Park: 11.\nSunset District to The Castro: 17.\nSunset District to Bayview: 22.\nSunset District to Haight-Ashbury: 15.\nSunset District to Nob Hill: 27.\nHaight-Ashbury to Russian Hill: 17.\nHaight-Ashbury to Marina District: 17.\nHaight-Ashbury to Financial District: 21.\nHaight-Ashbury to Alamo Square: 5.\nHaight-Ashbury to Golden Gate Park: 7.\nHaight-Ashbury to The Castro: 6.\nHaight-Ashbury to Bayview: 18.\nHaight-Ashbury to Sunset District: 15.\nHaight-Ashbury to Nob Hill: 15.\nNob Hill to Russian Hill: 5.\nNob Hill to Marina District: 11.\nNob Hill to Financial District: 9.\nNob Hill to Alamo Square: 11.\nNob Hill to Golden Gate Park: 17.\nNob Hill to The Castro: 17.\nNob Hill to Bayview: 19.\nNob Hill to Sunset District: 24.\nNob Hill to Haight-Ashbury: 13.\n\nCONSTRAINTS: You arrive at Russian Hill at 9:00AM. Mark will be at Marina District from 6:45PM to 9:00PM. You'd like to meet Mark for a minimum of 90 minutes. Karen will be at Financial District from 9:30AM to 12:45PM. You'd like to meet Karen for a minimum of 90 minutes. Barbara will be at Alamo Square from 10:00AM to 7:30PM. You'd like to meet Barbara for a minimum of 90 minutes. Nancy will be at Golden Gate Park from 4:45PM to 8:00PM. You'd like to meet Nancy for a minimum of 105 minutes. David will be at The Castro from 9:00AM to 6:00PM. You'd like to meet David for a minimum of 120 minutes. Linda will be at Bayview from 6:15PM to 7:45PM. You'd like to meet Linda for a minimum of 45 minutes. Kevin will be at Sunset District from 10:00AM to 5:45PM. You'd like to meet Kevin for a minimum of 120 minutes. Matthew will be at Haight-Ashbury from 10:15AM to 3:30PM. You'd like to meet Matthew for a minimum of 45 minutes. Andrew will be at Nob Hill from 11:45AM to 4:45PM. You'd like to meet Andrew for a minimum of 105 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom itertools import permutations\n\n# Travel times dictionary\ntravel_times = {\n    'Russian Hill': {\n        'Marina District': 7,\n        'Financial District': 11,\n        'Alamo Square': 15,\n        'Golden Gate Park': 21,\n        'The Castro': 21,\n        'Bayview': 23,\n        'Sunset District': 23,\n        'Haight-Ashbury': 17,\n        'Nob Hill': 5\n    },\n    'Marina District': {\n        'Russian Hill': 8,\n        'Financial District': 17,\n        'Alamo Square': 15,\n        'Golden Gate Park': 18,\n        'The Castro': 22,\n        'Bayview': 27,\n        'Sunset District': 19,\n        'Haight-Ashbury': 16,\n        'Nob Hill': 12\n    },\n    'Financial District': {\n        'Russian Hill': 11,\n        'Marina District': 15,\n        'Alamo Square': 17,\n        'Golden Gate Park': 23,\n        'The Castro': 20,\n        'Bayview': 19,\n        'Sunset District': 30,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 8\n    },\n    'Alamo Square': {\n        'Russian Hill': 13,\n        'Marina District': 15,\n        'Financial District': 17,\n        'Golden Gate Park': 9,\n        'The Castro': 8,\n        'Bayview': 16,\n        'Sunset District': 16,\n        'Haight-Ashbury': 5,\n        'Nob Hill': 11\n    },\n    'Golden Gate Park': {\n        'Russian Hill': 19,\n        'Marina District': 16,\n        'Financial District': 26,\n        'Alamo Square': 9,\n        'The Castro': 13,\n        'Bayview': 23,\n        'Sunset District': 10,\n        'Haight-Ashbury': 7,\n        'Nob Hill': 20\n    },\n    'The Castro': {\n        'Russian Hill': 18,\n        'Marina District': 21,\n        'Financial District': 21,\n        'Alamo Square': 8,\n        'Golden Gate Park': 11,\n        'Bayview': 19,\n        'Sunset District': 17,\n        'Haight-Ashbury': 6,\n        'Nob Hill': 16\n    },\n    'Bayview': {\n        'Russian Hill': 23,\n        'Marina District': 27,\n        'Financial District': 19,\n        'Alamo Square': 16,\n        'Golden Gate Park': 22,\n        'The Castro': 19,\n        'Sunset District': 23,\n        'Haight-Ashbury': 19,\n        'Nob Hill': 20\n    },\n    'Sunset District': {\n        'Russian Hill': 24,\n        'Marina District': 21,\n        'Financial District': 30,\n        'Alamo Square': 17,\n        'Golden Gate Park': 11,\n        'The Castro': 17,\n        'Bayview': 22,\n        'Haight-Ashbury': 15,\n        'Nob Hill': 27\n    },\n    'Haight-Ashbury': {\n        'Russian Hill': 17,\n        'Marina District': 17,\n        'Financial District': 21,\n        'Alamo Square': 5,\n        'Golden Gate Park': 7,\n        'The Castro': 6,\n        'Bayview': 18,\n        'Sunset District': 15,\n        'Nob Hill': 15\n    },\n    'Nob Hill': {\n        'Russian Hill': 5,\n        'Marina District': 11,\n        'Financial District': 9,\n        'Alamo Square': 11,\n        'Golden Gate Park': 17,\n        'The Castro': 17,\n        'Bayview': 19,\n        'Sunset District': 24,\n        'Haight-Ashbury': 13\n    }\n}\n\n# Friend data\nfriends = [\n    {'name': 'Mark', 'location': 'Marina District', 'start': '18:45', 'end': '21:00', 'duration': 90},\n    {'name': 'Karen', 'location': 'Financial District', 'start': '9:30', 'end': '12:45', 'duration': 90},\n    {'name': 'Barbara', 'location': 'Alamo Square', 'start': '10:00', 'end': '19:30', 'duration': 90},\n    {'name': 'Nancy', 'location': 'Golden Gate Park', 'start': '16:45', 'end': '20:00', 'duration': 105},\n    {'name': 'David', 'location': 'The Castro', 'start': '9:00', 'end': '18:00', 'duration': 120},\n    {'name': 'Linda', 'location': 'Bayview', 'start': '18:15', 'end': '19:45', 'duration': 45},\n    {'name': 'Kevin', 'location': 'Sunset District', 'start': '10:00', 'end': '17:45', 'duration': 120},\n    {'name': 'Matthew', 'location': 'Haight-Ashbury', 'start': '10:15', 'end': '15:30', 'duration': 45},\n    {'name': 'Andrew', 'location': 'Nob Hill', 'start': '11:45', 'end': '16:45', 'duration': 105}\n]\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef can_schedule(prev_location, prev_end, friend, current_time):\n    travel_time = travel_times[prev_location][friend['location']]\n    arrival_time = current_time + travel_time\n    friend_start = time_to_minutes(friend['start'])\n    friend_end = time_to_minutes(friend['end'])\n    \n    if arrival_time > friend_end:\n        return None\n    \n    start_time = max(arrival_time, friend_start)\n    end_time = start_time + friend['duration']\n    \n    if end_time > friend_end:\n        return None\n    \n    return (start_time, end_time)\n\ndef evaluate_schedule(order):\n    current_location = 'Russian Hill'\n    current_time = time_to_minutes('9:00')\n    itinerary = []\n    \n    for friend_name in order:\n        friend = next(f for f in friends if f['name'] == friend_name)\n        schedule = can_schedule(current_location, current_time, friend, current_time)\n        if not schedule:\n            return None\n        start_time, end_time = schedule\n        itinerary.append({\n            'action': 'meet',\n            'location': friend['location'],\n            'person': friend['name'],\n            'start_time': minutes_to_time(start_time),\n            'end_time': minutes_to_time(end_time)\n        })\n        current_location = friend['location']\n        current_time = end_time\n    \n    return itinerary\n\ndef find_best_schedule():\n    friend_names = [f['name'] for f in friends]\n    best_schedule = None\n    max_meetings = 0\n    \n    # Try all permutations of 5 friends (to keep computation feasible)\n    from itertools import combinations\n    for friend_combination in combinations(friend_names, 5):\n        for perm in permutations(friend_combination):\n            itinerary = evaluate_schedule(perm)\n            if itinerary and len(itinerary) > max_meetings:\n                max_meetings = len(itinerary)\n                best_schedule = itinerary\n    \n    return best_schedule\n\nbest_itinerary = find_best_schedule()\nif not best_itinerary:\n    best_itinerary = []\n\noutput = {\n    \"itinerary\": best_itinerary\n}\n\nprint(json.dumps(output, indent=2))\n```"
    }
]