[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nSunset District to Russian Hill: 24.\nSunset District to Chinatown: 30.\nSunset District to Presidio: 16.\nSunset District to Fisherman's Wharf: 29.\nRussian Hill to Sunset District: 23.\nRussian Hill to Chinatown: 9.\nRussian Hill to Presidio: 14.\nRussian Hill to Fisherman's Wharf: 7.\nChinatown to Sunset District: 29.\nChinatown to Russian Hill: 7.\nChinatown to Presidio: 19.\nChinatown to Fisherman's Wharf: 8.\nPresidio to Sunset District: 15.\nPresidio to Russian Hill: 14.\nPresidio to Chinatown: 21.\nPresidio to Fisherman's Wharf: 19.\nFisherman's Wharf to Sunset District: 27.\nFisherman's Wharf to Russian Hill: 7.\nFisherman's Wharf to Chinatown: 12.\nFisherman's Wharf to Presidio: 17.\n\nCONSTRAINTS: You arrive at Sunset District at 9:00AM. William will be at Russian Hill from 6:30PM to 8:45PM. You'd like to meet William for a minimum of 105 minutes. Michelle will be at Chinatown from 8:15AM to 2:00PM. You'd like to meet Michelle for a minimum of 15 minutes. George will be at Presidio from 10:30AM to 6:45PM. You'd like to meet George for a minimum of 30 minutes. Robert will be at Fisherman's Wharf from 9:00AM to 1:45PM. You'd like to meet Robert for a minimum of 30 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input parameters\ntravel_times = {\n    'Sunset District': {\n        'Russian Hill': 24,\n        'Chinatown': 30,\n        'Presidio': 16,\n        'Fisherman\\'s Wharf': 29\n    },\n    'Russian Hill': {\n        'Sunset District': 23,\n        'Chinatown': 9,\n        'Presidio': 14,\n        'Fisherman\\'s Wharf': 7\n    },\n    'Chinatown': {\n        'Sunset District': 29,\n        'Russian Hill': 7,\n        'Presidio': 19,\n        'Fisherman\\'s Wharf': 8\n    },\n    'Presidio': {\n        'Sunset District': 15,\n        'Russian Hill': 14,\n        'Chinatown': 21,\n        'Fisherman\\'s Wharf': 19\n    },\n    'Fisherman\\'s Wharf': {\n        'Sunset District': 27,\n        'Russian Hill': 7,\n        'Chinatown': 12,\n        'Presidio': 17\n    }\n}\n\nfriends = {\n    'William': {\n        'location': 'Russian Hill',\n        'available_start': '18:30',\n        'available_end': '20:45',\n        'min_duration': 105\n    },\n    'Michelle': {\n        'location': 'Chinatown',\n        'available_start': '8:15',\n        'available_end': '14:00',\n        'min_duration': 15\n    },\n    'George': {\n        'location': 'Presidio',\n        'available_start': '10:30',\n        'available_end': '18:45',\n        'min_duration': 30\n    },\n    'Robert': {\n        'location': 'Fisherman\\'s Wharf',\n        'available_start': '9:00',\n        'available_end': '13:45',\n        'min_duration': 30\n    }\n}\n\ncurrent_location = 'Sunset District'\ncurrent_time = time_to_minutes('9:00')\n\ndef calculate_schedule(order):\n    schedule = []\n    loc = current_location\n    time = current_time\n    \n    for friend in order:\n        info = friends[friend]\n        dest = info['location']\n        travel = travel_times[loc][dest]\n        arrival = time + travel\n        start = max(arrival, time_to_minutes(info['available_start']))\n        end = min(start + info['min_duration'], time_to_minutes(info['available_end']))\n        \n        if end <= start:\n            return None\n        \n        schedule.append({\n            'action': 'meet',\n            'location': dest,\n            'person': friend,\n            'start_time': minutes_to_time(start),\n            'end_time': minutes_to_time(end)\n        })\n        \n        loc = dest\n        time = end\n    \n    return schedule\n\nbest_schedule = None\nbest_count = 0\n\nfor perm in permutations(friends.keys()):\n    schedule = calculate_schedule(perm)\n    if schedule and len(schedule) > best_count:\n        best_schedule = schedule\n        best_count = len(schedule)\n\nif best_schedule:\n    result = {\"itinerary\": best_schedule}\nelse:\n    result = {\"itinerary\": []}\n\nprint(json.dumps(result, indent=2))\n```"
    }
]