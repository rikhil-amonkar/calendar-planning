[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nSunset District to Alamo Square: 17.\nSunset District to Russian Hill: 24.\nSunset District to Presidio: 16.\nSunset District to Financial District: 30.\nAlamo Square to Sunset District: 16.\nAlamo Square to Russian Hill: 13.\nAlamo Square to Presidio: 18.\nAlamo Square to Financial District: 17.\nRussian Hill to Sunset District: 23.\nRussian Hill to Alamo Square: 15.\nRussian Hill to Presidio: 14.\nRussian Hill to Financial District: 11.\nPresidio to Sunset District: 15.\nPresidio to Alamo Square: 18.\nPresidio to Russian Hill: 14.\nPresidio to Financial District: 23.\nFinancial District to Sunset District: 31.\nFinancial District to Alamo Square: 17.\nFinancial District to Russian Hill: 10.\nFinancial District to Presidio: 22.\n\nCONSTRAINTS: You arrive at Sunset District at 9:00AM. Kevin will be at Alamo Square from 8:15AM to 9:30PM. You'd like to meet Kevin for a minimum of 75 minutes. Kimberly will be at Russian Hill from 8:45AM to 12:30PM. You'd like to meet Kimberly for a minimum of 30 minutes. Joseph will be at Presidio from 6:30PM to 7:15PM. You'd like to meet Joseph for a minimum of 45 minutes. Thomas will be at Financial District from 7:00PM to 9:45PM. You'd like to meet Thomas for a minimum of 45 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Input parameters\ntravel_times = {\n    'Sunset District': {\n        'Alamo Square': 17,\n        'Russian Hill': 24,\n        'Presidio': 16,\n        'Financial District': 30\n    },\n    'Alamo Square': {\n        'Sunset District': 16,\n        'Russian Hill': 13,\n        'Presidio': 18,\n        'Financial District': 17\n    },\n    'Russian Hill': {\n        'Sunset District': 23,\n        'Alamo Square': 15,\n        'Presidio': 14,\n        'Financial District': 11\n    },\n    'Presidio': {\n        'Sunset District': 15,\n        'Alamo Square': 18,\n        'Russian Hill': 14,\n        'Financial District': 23\n    },\n    'Financial District': {\n        'Sunset District': 31,\n        'Alamo Square': 17,\n        'Russian Hill': 10,\n        'Presidio': 22\n    }\n}\n\npeople = [\n    {\n        'name': 'Kevin',\n        'location': 'Alamo Square',\n        'available_start': '8:15',\n        'available_end': '21:30',\n        'duration': 75\n    },\n    {\n        'name': 'Kimberly',\n        'location': 'Russian Hill',\n        'available_start': '8:45',\n        'available_end': '12:30',\n        'duration': 30\n    },\n    {\n        'name': 'Joseph',\n        'location': 'Presidio',\n        'available_start': '18:30',\n        'available_end': '19:15',\n        'duration': 45\n    },\n    {\n        'name': 'Thomas',\n        'location': 'Financial District',\n        'available_start': '19:00',\n        'available_end': '21:45',\n        'duration': 45\n    }\n]\n\ncurrent_location = 'Sunset District'\ncurrent_time = time_to_minutes('9:00')\n\ndef calculate_schedule(order):\n    schedule = []\n    loc = current_location\n    time = current_time\n    \n    for person_idx in order:\n        person = people[person_idx]\n        dest = person['location']\n        travel_time = travel_times[loc][dest]\n        arrival_time = time + travel_time\n        \n        available_start = time_to_minutes(person['available_start'])\n        available_end = time_to_minutes(person['available_end'])\n        \n        # Calculate meeting window\n        meeting_start = max(arrival_time, available_start)\n        meeting_end = meeting_start + person['duration']\n        \n        if meeting_end > available_end:\n            return None  # Not enough time to meet\n        \n        schedule.append({\n            'person': person['name'],\n            'location': dest,\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        \n        time = meeting_end\n        loc = dest\n    \n    return schedule\n\n# Try all possible orders of meetings\nbest_schedule = None\nbest_meetings = 0\n\nfor order in permutations(range(len(people))):\n    schedule = calculate_schedule(order)\n    if schedule and len(schedule) > best_meetings:\n        best_schedule = schedule\n        best_meetings = len(schedule)\n    elif schedule and len(schedule) == best_meetings and schedule:\n        # Prefer schedules that end earlier\n        if not best_schedule or time_to_minutes(schedule[-1]['end_time']) < time_to_minutes(best_schedule[-1]['end_time']):\n            best_schedule = schedule\n\n# Prepare output\nif best_schedule:\n    itinerary = []\n    for meeting in best_schedule:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting['location'],\n            \"person\": meeting['person'],\n            \"start_time\": meeting['start_time'],\n            \"end_time\": meeting['end_time']\n        })\n    output = {\"itinerary\": itinerary}\nelse:\n    output = {\"itinerary\": []}\n\nprint(json.dumps(output, indent=2))\n```"
    }
]