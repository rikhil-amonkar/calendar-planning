[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nBayview to Embarcadero: 19.\nBayview to Richmond District: 25.\nBayview to Fisherman's Wharf: 25.\nEmbarcadero to Bayview: 21.\nEmbarcadero to Richmond District: 21.\nEmbarcadero to Fisherman's Wharf: 6.\nRichmond District to Bayview: 26.\nRichmond District to Embarcadero: 19.\nRichmond District to Fisherman's Wharf: 18.\nFisherman's Wharf to Bayview: 26.\nFisherman's Wharf to Embarcadero: 8.\nFisherman's Wharf to Richmond District: 18.\n\nCONSTRAINTS: You arrive at Bayview at 9:00AM. Jessica will be at Embarcadero from 4:45PM to 7:00PM. You'd like to meet Jessica for a minimum of 30 minutes. Sandra will be at Richmond District from 6:30PM to 9:45PM. You'd like to meet Sandra for a minimum of 120 minutes. Jason will be at Fisherman's Wharf from 4:00PM to 4:45PM. You'd like to meet Jason for a minimum of 30 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nfrom itertools import permutations\n\ndef time_to_minutes(time_str):\n    \"\"\"Convert time string (H:MM) to minutes since midnight.\"\"\"\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    \"\"\"Convert minutes since midnight to time string (H:MM).\"\"\"\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\ndef calculate_schedule():\n    # Travel times in minutes (from -> to)\n    travel_times = {\n        'Bayview': {\n            'Embarcadero': 19,\n            'Richmond District': 25,\n            'Fisherman\\'s Wharf': 25\n        },\n        'Embarcadero': {\n            'Bayview': 21,\n            'Richmond District': 21,\n            'Fisherman\\'s Wharf': 6\n        },\n        'Richmond District': {\n            'Bayview': 26,\n            'Embarcadero': 19,\n            'Fisherman\\'s Wharf': 18\n        },\n        'Fisherman\\'s Wharf': {\n            'Bayview': 26,\n            'Embarcadero': 8,\n            'Richmond District': 18\n        }\n    }\n\n    # Meeting constraints\n    constraints = [\n        {\n            'person': 'Jessica',\n            'location': 'Embarcadero',\n            'available_start': '16:45',\n            'available_end': '19:00',\n            'min_duration': 30\n        },\n        {\n            'person': 'Sandra',\n            'location': 'Richmond District',\n            'available_start': '18:30',\n            'available_end': '21:45',\n            'min_duration': 120\n        },\n        {\n            'person': 'Jason',\n            'location': 'Fisherman\\'s Wharf',\n            'available_start': '16:00',\n            'available_end': '16:45',\n            'min_duration': 30\n        }\n    ]\n\n    current_location = 'Bayview'\n    current_time = time_to_minutes('9:00')\n    itinerary = []\n\n    # Try all possible orders of meeting people\n    best_itinerary = None\n    max_meetings = 0\n\n    for order in permutations(constraints):\n        temp_itinerary = []\n        temp_location = current_location\n        temp_time = current_time\n        meetings_count = 0\n\n        for person in order:\n            # Check if we can meet this person\n            location = person['location']\n            travel_time = travel_times[temp_location][location]\n            arrival_time = temp_time + travel_time\n\n            available_start = time_to_minutes(person['available_start'])\n            available_end = time_to_minutes(person['available_end'])\n            min_duration = person['min_duration']\n\n            # Calculate meeting window\n            meeting_start = max(arrival_time, available_start)\n            meeting_end = meeting_start + min_duration\n\n            if meeting_end <= available_end:\n                # We can meet this person\n                meetings_count += 1\n                temp_itinerary.append({\n                    'action': 'meet',\n                    'location': location,\n                    'person': person['person'],\n                    'start_time': minutes_to_time(meeting_start),\n                    'end_time': minutes_to_time(meeting_end)\n                })\n                temp_location = location\n                temp_time = meeting_end\n            else:\n                # Can't meet this person in this order\n                break\n\n        if meetings_count > max_meetings:\n            max_meetings = meetings_count\n            best_itinerary = temp_itinerary\n\n    return {'itinerary': best_itinerary}\n\nif __name__ == \"__main__\":\n    schedule = calculate_schedule()\n    print(json.dumps(schedule, indent=2))\n```"
    }
]