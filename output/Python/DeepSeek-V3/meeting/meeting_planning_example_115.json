{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Carol",
                        "start_time": "11:30",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jessica",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Carol",
                        "start_time": "11:30",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jessica",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef format_time(dt):\n    return dt.strftime(\"%-H:%M\")\n\ndef compute_schedule():\n    # Input parameters\n    start_location = \"Richmond District\"\n    start_time = parse_time(\"9:00\")\n    \n    # Friend constraints\n    jessica = {\n        \"location\": \"Pacific Heights\",\n        \"available_start\": parse_time(\"15:30\"),\n        \"available_end\": parse_time(\"16:45\"),\n        \"min_duration\": 45\n    }\n    \n    carol = {\n        \"location\": \"Marina District\",\n        \"available_start\": parse_time(\"11:30\"),\n        \"available_end\": parse_time(\"15:00\"),\n        \"min_duration\": 60\n    }\n    \n    # Travel times in minutes between locations\n    travel_times = {\n        (\"Richmond District\", \"Pacific Heights\"): 10,\n        (\"Richmond District\", \"Marina District\"): 9,\n        (\"Pacific Heights\", \"Richmond District\"): 12,\n        (\"Pacific Heights\", \"Marina District\"): 6,\n        (\"Marina District\", \"Richmond District\"): 11,\n        (\"Marina District\", \"Pacific Heights\"): 7\n    }\n    \n    # Corrected travel times dictionary key\n    travel_times = {\n        (\"Richmond District\", \"Pacific Heights\"): 10,\n        (\"Richmond District\", \"Marina District\"): 9,\n        (\"Pacific Heights\", \"Richmond District\"): 12,\n        (\"Pacific Heights\", \"Marina District\"): 6,\n        (\"Marina District\", \"Richmond District\"): 11,\n        (\"Marina District\", \"Pacific Heights\"): 7\n    }\n    \n    best_schedule = []\n    max_meetings = 0\n    \n    # Try meeting Carol first\n    current_location = start_location\n    current_time = start_time\n    itinerary = []\n    \n    # Travel to Carol\n    travel_key = (current_location, carol[\"location\"])\n    travel_duration = timedelta(minutes=travel_times[travel_key])\n    arrival_time = current_time + travel_duration\n    \n    # Meet Carol\n    meet_start = max(arrival_time, carol[\"available_start\"])\n    meet_end = meet_start + timedelta(minutes=carol[\"min_duration\"])\n    \n    if meet_end <= carol[\"available_end\"]:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": carol[\"location\"],\n            \"person\": \"Carol\",\n            \"start_time\": format_time(meet_start),\n            \"end_time\": format_time(meet_end)\n        })\n        \n        # Travel to Jessica\n        current_location = carol[\"location\"]\n        current_time = meet_end\n        travel_key = (current_location, jessica[\"location\"])\n        travel_duration = timedelta(minutes=travel_times[travel_key])\n        arrival_time = current_time + travel_duration\n        \n        # Meet Jessica\n        meet_start = max(arrival_time, jessica[\"available_start\"])\n        meet_end = meet_start + timedelta(minutes=jessica[\"min_duration\"])\n        \n        if meet_end <= jessica[\"available_end\"]:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": jessica[\"location\"],\n                \"person\": \"Jessica\",\n                \"start_time\": format_time(meet_start),\n                \"end_time\": format_time(meet_end)\n            })\n            \n            if len(itinerary) > max_meetings:\n                best_schedule = itinerary\n                max_meetings = len(itinerary)\n    \n    # Try meeting Jessica first\n    current_location = start_location\n    current_time = start_time\n    itinerary = []\n    \n    # Travel to Jessica\n    travel_key = (current_location, jessica[\"location\"])\n    travel_duration = timedelta(minutes=travel_times[travel_key])\n    arrival_time = current_time + travel_duration\n    \n    # Check if we can meet Jessica first (but she's only available in the afternoon)\n    if arrival_time < jessica[\"available_start\"]:\n        # Wait until Jessica is available\n        arrival_time = jessica[\"available_start\"]\n    \n    meet_start = arrival_time\n    meet_end = meet_start + timedelta(minutes=jessica[\"min_duration\"])\n    \n    if meet_end <= jessica[\"available_end\"]:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": jessica[\"location\"],\n            \"person\": \"Jessica\",\n            \"start_time\": format_time(meet_start),\n            \"end_time\": format_time(meet_end)\n        })\n        \n        # Travel to Carol\n        current_location = jessica[\"location\"]\n        current_time = meet_end\n        travel_key = (current_location, carol[\"location\"])\n        travel_duration = timedelta(minutes=travel_times[travel_key])\n        arrival_time = current_time + travel_duration\n        \n        # Meet Carol\n        meet_start = arrival_time\n        meet_end = meet_start + timedelta(minutes=carol[\"min_duration\"])\n        \n        if meet_start >= carol[\"available_start\"] and meet_end <= carol[\"available_end\"]:\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": carol[\"location\"],\n                \"person\": \"Carol\",\n                \"start_time\": format_time(meet_start),\n                \"end_time\": format_time(meet_end)\n            })\n            \n            if len(itinerary) > max_meetings:\n                best_schedule = itinerary\n                max_meetings = len(itinerary)\n        elif meet_start < carol[\"available_start\"]:\n            # Can't meet Carol after Jessica because Carol's window ends before we can arrive\n            pass\n    \n    # If both attempts fail, try meeting just one person\n    if max_meetings == 0:\n        # Try meeting Carol only\n        current_location = start_location\n        current_time = start_time\n        travel_key = (current_location, carol[\"location\"])\n        travel_duration = timedelta(minutes=travel_times[travel_key])\n        arrival_time = current_time + travel_duration\n        \n        meet_start = max(arrival_time, carol[\"available_start\"])\n        meet_end = meet_start + timedelta(minutes=carol[\"min_duration\"])\n        \n        if meet_end <= carol[\"available_end\"]:\n            best_schedule = [{\n                \"action\": \"meet\",\n                \"location\": carol[\"location\"],\n                \"person\": \"Carol\",\n                \"start_time\": format_time(meet_start),\n                \"end_time\": format_time(meet_end)\n            }]\n            max_meetings = 1\n        \n        # Try meeting Jessica only\n        current_location = start_location\n        current_time = start_time\n        travel_key = (current_location, jessica[\"location\"])\n        travel_duration = timedelta(minutes=travel_times[travel_key])\n        arrival_time = current_time + travel_duration\n        \n        if arrival_time < jessica[\"available_start\"]:\n            arrival_time = jessica[\"available_start\"]\n        \n        meet_start = arrival_time\n        meet_end = meet_start + timedelta(minutes=jessica[\"min_duration\"])\n        \n        if meet_end <= jessica[\"available_end\"]:\n            if max_meetings < 1:\n                best_schedule = [{\n                    \"action\": \"meet\",\n                    \"location\": jessica[\"location\"],\n                    \"person\": \"Jessica\",\n                    \"start_time\": format_time(meet_start),\n                    \"end_time\": format_time(meet_end)\n                }]\n            elif max_meetings == 1:\n                # Prefer meeting Carol if we can only meet one\n                pass\n    \n    return {\"itinerary\": best_schedule}\n\nif __name__ == \"__main__\":\n    schedule = compute_schedule()\n    print(json.dumps(schedule, indent=2))\n```",
            "count": "meeting_planning_example_115"
        }
    ]
}