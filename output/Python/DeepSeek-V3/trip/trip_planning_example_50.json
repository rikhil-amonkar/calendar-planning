{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    "None"
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "day_range": "Day 1-4",
                        "place": "Vilnius"
                    },
                    {
                        "day_range": "Day 4-6",
                        "place": "Munich"
                    },
                    {
                        "day_range": "Day 6-12",
                        "place": "Mykonos"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\n\ndef calculate_itinerary():\n    # Input parameters\n    total_days = 12\n    days_in_vilnius = 4\n    days_in_munich = 3\n    days_in_mykonos = 7\n    \n    # Validate total days\n    if days_in_vilnius + days_in_munich + days_in_mykonos != total_days:\n        raise ValueError(\"Total days do not match the sum of days in each city.\")\n    \n    # Flight connections\n    flights = {\n        'Vilnius': ['Munich'],\n        'Munich': ['Vilnius', 'Mykonos'],\n        'Mykonos': ['Munich']\n    }\n    \n    # Determine the itinerary\n    itinerary = []\n    current_day = 1\n    \n    # Start in Vilnius (since it's only connected to Munich)\n    itinerary.append({\n        'day_range': f'Day {current_day}-{current_day + days_in_vilnius - 1}',\n        'place': 'Vilnius'\n    })\n    current_day += days_in_vilnius\n    \n    # Fly from Vilnius to Munich\n    itinerary.append({\n        'flying': f'Day {current_day}-{current_day}',\n        'from': 'Vilnius',\n        'to': 'Munich'\n    })\n    \n    # Stay in Munich\n    itinerary.append({\n        'day_range': f'Day {current_day + 1}-{current_day + days_in_munich}',\n        'place': 'Munich'\n    })\n    current_day += days_in_munich + 1\n    \n    # Fly from Munich to Mykonos\n    itinerary.append({\n        'flying': f'Day {current_day}-{current_day}',\n        'from': 'Munich',\n        'to': 'Mykonos'\n    })\n    \n    # Stay in Mykonos\n    itinerary.append({\n        'day_range': f'Day {current_day + 1}-{current_day + days_in_mykonos}',\n        'place': 'Mykonos'\n    })\n    \n    # Output the itinerary as JSON\n    print(json.dumps(itinerary, indent=2))\n\nif __name__ == \"__main__\":\n    calculate_itinerary()\n```",
            "count": "trip_planning_example_50"
        }
    ]
}