{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "day_range": "Day 1-3",
                        "place": "Naples"
                    },
                    {
                        "day_range": "Day 4-10",
                        "place": "Milan"
                    },
                    {
                        "day_range": "Day 9-12",
                        "place": "Seville"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "day_range": "Day 1-3",
                        "place": "Naples"
                    },
                    {
                        "day_range": "Day 3-9",
                        "place": "Milan"
                    },
                    {
                        "day_range": "Day 9-12",
                        "place": "Seville"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "import json\n\ndef plan_trip():\n    cities_order = [\"Naples\", \"Milan\", \"Seville\"]\n    city_info = {\n        \"Naples\": {\"required_days\": 3},\n        \"Milan\": {\"required_days\": 7},\n        \"Seville\": {\"required_days\": 4, \"fixed_start\": 9, \"fixed_end\": 12}\n    }\n    direct_flights = {(\"Naples\", \"Milan\"), (\"Milan\", \"Seville\")}\n    \n    # Check flight connections\n    valid = True\n    for i in range(len(cities_order)-1):\n        a, b = cities_order[i], cities_order[i+1]\n        if (a, b) not in direct_flights and (b, a) not in direct_flights:\n            valid = False\n            break\n    if not valid:\n        return {\"itinerary\": []}\n    \n    itinerary = []\n    current_day = 1\n    for city in cities_order:\n        info = city_info[city]\n        if city == \"Seville\":\n            start = info[\"fixed_start\"]\n            end = info[\"fixed_end\"]\n            if end - start + 1 != info[\"required_days\"]:\n                return {\"itinerary\": []}\n        else:\n            req_days = info[\"required_days\"]\n            start = current_day\n            end = start + req_days - 1\n            current_day = end + 1  # Next city starts after flight day\n        \n        day_range = f\"Day {start}-{end}\" if start != end else f\"Day {start}\"\n        itinerary.append({\"day_range\": day_range, \"place\": city})\n        if city == \"Seville\":\n            break  # Last city\n    \n    # Ensure Seville ends on day 12\n    if city_info[\"Seville\"][\"fixed_end\"] != 12:\n        return {\"itinerary\": []}\n    \n    return {\"itinerary\": itinerary}\n\nprint(json.dumps(plan_trip()))",
            "count": "trip_planning_example_113"
        }
    ]
}