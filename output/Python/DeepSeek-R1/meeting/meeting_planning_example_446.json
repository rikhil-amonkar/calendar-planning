{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "12:15",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Margaret",
                        "start_time": "12:52",
                        "end_time": "13:22"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kimberly",
                        "start_time": "13:47",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "14:19",
                        "end_time": "15:34"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "19:30",
                        "end_time": "20:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Robert",
                        "start_time": "12:15",
                        "end_time": "12:30"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Margaret",
                        "start_time": "12:52",
                        "end_time": "13:22"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Kimberly",
                        "start_time": "13:47",
                        "end_time": "14:02"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Rebecca",
                        "start_time": "14:19",
                        "end_time": "15:34"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kenneth",
                        "start_time": "19:30",
                        "end_time": "20:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n```python\nimport itertools\nimport json\n\ndef time_to_minutes(timestr):\n    time_part, period = timestr[:-2], timestr[-2:]\n    hours, minutes = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    if period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\nfriends = [\n    {\n        'name': 'Kimberly',\n        'location': 'Marina District',\n        'start': time_to_minutes('1:15PM'),\n        'end': time_to_minutes('4:45PM'),\n        'duration': 15\n    },\n    {\n        'name': 'Robert',\n        'location': 'Chinatown',\n        'start': time_to_minutes('12:15PM'),\n        'end': time_to_minutes('8:15PM'),\n        'duration': 15\n    },\n    {\n        'name': 'Rebecca',\n        'location': 'Financial District',\n        'start': time_to_minutes('1:15PM'),\n        'end': time_to_minutes('4:45PM'),\n        'duration': 75\n    },\n    {\n        'name': 'Margaret',\n        'location': 'Bayview',\n        'start': time_to_minutes('9:30AM'),\n        'end': time_to_minutes('1:30PM'),\n        'duration': 30\n    },\n    {\n        'name': 'Kenneth',\n        'location': 'Union Square',\n        'start': time_to_minutes('7:30PM'),\n        'end': time_to_minutes('9:15PM'),\n        'duration': 75\n    }\n]\n\ntravel_times = {\n    'Richmond District': {'Marina District':9, 'Chinatown':20, 'Financial District':22, 'Bayview':26, 'Union Square':21},\n    'Marina District': {'Richmond District':11, 'Chinatown':16, 'Financial District':17, 'Bayview':27, 'Union Square':16},\n    'Chinatown': {'Richmond District':20, 'Marina District':12, 'Financial District':5, 'Bayview':22, 'Union Square':7},\n    'Financial District': {'Richmond District':21, 'Marina District':15, 'Chinatown':5, 'Bayview':19, 'Union Square':9},\n    'Bayview': {'Richmond District':25, 'Marina District':25, 'Chinatown':18, 'Financial District':19, 'Union Square':17},\n    'Union Square': {'Richmond District':20, 'Marina District':18, 'Chinatown':7, 'Financial District':9, 'Bayview':15}\n}\n\ndef minutes_to_time(mins):\n    hours = mins // 60\n    minutes = mins % 60\n    return f\"{hours}:{minutes:02d}\"\n\nbest_schedule = []\nmax_met = 0\nbest_end_time = float('inf')\n\nfor perm in itertools.permutations(friends):\n    current_location = 'Richmond District'\n    current_time = 540\n    schedule = []\n    met = set()\n    \n    for friend in perm:\n        if friend['name'] in met:\n            continue\n        if friend['location'] not in travel_times[current_location]:\n            continue\n        travel_time = travel_times[current_location][friend['location']]\n        arrival_time = current_time + travel_time\n        start = max(arrival_time, friend['start'])\n        end = start + friend['duration']\n        if end > friend['end']:\n            continue\n        schedule.append({'friend': friend, 'start': start, 'end': end, 'location': friend['location']})\n        met.add(friend['name'])\n        current_time = end\n        current_location = friend['location']\n    \n    if len(met) > max_met or (len(met) == max_met and current_time < best_end_time):\n        max_met = len(met)\n        best_schedule = schedule.copy()\n        best_end_time = current_time\n\nitinerary = []\nfor entry in best_schedule:\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": entry['location'],\n        \"person\": entry['friend']['name'],\n        \"start_time\": minutes_to_time(entry['start']),\n        \"end_time\": minutes_to_time(entry['end'])\n    })\n\noutput = {\"itinerary\": sorted(itinerary, key=lambda x: x['start_time'])}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_446"
        }
    ]
}