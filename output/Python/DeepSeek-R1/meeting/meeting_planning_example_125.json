{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Stephanie",
                        "start_time": "9:05",
                        "end_time": "10:35"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "John",
                        "start_time": "10:52",
                        "end_time": "11:22"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Stephanie",
                        "start_time": "9:05",
                        "end_time": "10:35"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "John",
                        "start_time": "10:52",
                        "end_time": "11:22"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n```python\nimport json\n\ndef min_to_time(mins):\n    hours = mins // 60\n    minutes = mins % 60\n    return f\"{hours}:{minutes:02d}\"\n\ntravel_time = {\n    'Embarcadero': {'Financial District': 5, 'Alamo Square': 19},\n    'Financial District': {'Embarcadero': 4, 'Alamo Square': 17},\n    'Alamo Square': {'Embarcadero': 17, 'Financial District': 17}\n}\n\npeople = {\n    'Stephanie': {\n        'location': 'Financial District',\n        'available_start': 8 * 60 + 15,\n        'available_end': 11 * 60 + 30,\n        'min_duration': 90\n    },\n    'John': {\n        'location': 'Alamo Square',\n        'available_start': 10 * 60 + 15,\n        'available_end': 20 * 60 + 45,\n        'min_duration': 30\n    }\n}\n\norders = [['Stephanie', 'John'], ['John', 'Stephanie']]\nbest = None\n\nfor order in orders:\n    current_time = 9 * 60\n    current_loc = 'Embarcadero'\n    itinerary = []\n    valid = True\n    \n    for name in order:\n        p = people[name]\n        dest = p['location']\n        tt = travel_time[current_loc].get(dest, None)\n        if tt is None:\n            valid = False\n            break\n        arrive = current_time + tt\n        start = max(arrive, p['available_start'])\n        if start + p['min_duration'] > p['available_end']:\n            valid = False\n            break\n        end = start + p['min_duration']\n        itinerary.append((current_loc, dest, name, start, end))\n        current_time = end\n        current_loc = dest\n    \n    if valid:\n        best = [{\n            \"action\": \"meet\",\n            \"location\": dest,\n            \"person\": name,\n            \"start_time\": min_to_time(start),\n            \"end_time\": min_to_time(end)\n        } for (_, dest, name, start, end) in itinerary]\n        break\n\nprint(json.dumps({\"itinerary\": best} if best else {\"itinerary\": []}))\n```",
            "count": "meeting_planning_example_125"
        }
    ]
}