{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "9:10",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "11:",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Karen",
                        "start_time": "13:45",
                        "end_time": "14:"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Brian",
                        "start_time": "15:",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "15:40",
                        "end_time": "17:40"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Rebecca",
                        "start_time": "9:10",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Stephanie",
                        "start_time": "11:00",
                        "end_time": "12:45"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Karen",
                        "start_time": "13:45",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Brian",
                        "start_time": "15:00",
                        "end_time": "15:30"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Steven",
                        "start_time": "15:40",
                        "end_time": "17:40"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n```python\nimport itertools\nimport json\n\ndef time_to_minutes(timestr):\n    period = timestr[-2:]\n    time_part = timestr[:-2].strip() if period in ['AM', 'PM'] else timestr\n    hours, mins = map(int, time_part.split(':'))\n    if period == 'PM' and hours != 12:\n        hours += 12\n    elif period == 'AM' and hours == 12:\n        hours = 0\n    return hours * 60 + mins\n\nfriends = [\n    {'name': 'Rebecca', 'location': 'Fisherman\\'s Wharf', 'start': time_to_minutes('8:00AM'), 'end': time_to_minutes('11:15AM'), 'duration': 30},\n    {'name': 'Stephanie', 'location': 'Golden Gate Park', 'start': time_to_minutes('11:00AM'), 'end': time_to_minutes('3:00PM'), 'duration': 105},\n    {'name': 'Karen', 'location': 'Chinatown', 'start': time_to_minutes('1:45PM'), 'end': time_to_minutes('4:30PM'), 'duration': 15},\n    {'name': 'Brian', 'location': 'Union Square', 'start': time_to_minutes('3:00PM'), 'end': time_to_minutes('5:15PM'), 'duration': 30},\n    {'name': 'Steven', 'location': 'North Beach', 'start': time_to_minutes('2:30PM'), 'end': time_to_minutes('8:45PM'), 'duration': 120}\n]\n\ntravel_times = {\n    ('Financial District', 'Golden Gate Park'): 23,\n    ('Financial District', 'Chinatown'): 5,\n    ('Financial District', 'Union Square'): 9,\n    ('Financial District', 'Fisherman\\'s Wharf'): 10,\n    ('Financial District', 'Pacific Heights'): 13,\n    ('Financial District', 'North Beach'): 7,\n    ('Golden Gate Park', 'Financial District'): 26,\n    ('Golden Gate Park', 'Chinatown'): 23,\n    ('Golden Gate Park', 'Union Square'): 22,\n    ('Golden Gate Park', 'Fisherman\\'s Wharf'): 24,\n    ('Golden Gate Park', 'Pacific Heights'): 16,\n    ('Golden Gate Park', 'North Beach'): 24,\n    ('Chinatown', 'Financial District'): 5,\n    ('Chinatown', 'Golden Gate Park'): 23,\n    ('Chinatown', 'Union Square'): 7,\n    ('Chinatown', 'Fisherman\\'s Wharf'): 8,\n    ('Chinatown', 'Pacific Heights'): 10,\n    ('Chinatown', 'North Beach'): 3,\n    ('Union Square', 'Financial District'): 9,\n    ('Union Square', 'Golden Gate Park'): 22,\n    ('Union Square', 'Chinatown'): 7,\n    ('Union Square', 'Fisherman\\'s Wharf'): 15,\n    ('Union Square', 'Pacific Heights'): 15,\n    ('Union Square', 'North Beach'): 10,\n    ('Fisherman\\'s Wharf', 'Financial District'): 11,\n    ('Fisherman\\'s Wharf', 'Golden Gate Park'): 25,\n    ('Fisherman\\'s Wharf', 'Chinatown'): 12,\n    ('Fisherman\\'s Wharf', 'Union Square'): 13,\n    ('Fisherman\\'s Wharf', 'Pacific Heights'): 12,\n    ('Fisherman\\'s Wharf', 'North Beach'): 6,\n    ('North Beach', 'Financial District'): 8,\n    ('North Beach', 'Golden Gate Park'): 22,\n    ('North Beach', 'Chinatown'): 6,\n    ('North Beach', 'Union Square'): 7,\n    ('North Beach', 'Fisherman\\'s Wharf'): 5,\n    ('North Beach', 'Pacific Heights'): 8\n}\n\nbest_itinerary = []\nbest_count = 0\n\nfor perm in itertools.permutations(friends):\n    current_loc = 'Financial District'\n    current_time = 540\n    itinerary = []\n    valid = True\n    \n    for friend in perm:\n        travel_key = (current_loc, friend['location'])\n        if travel_key not in travel_times:\n            valid = False\n            break\n        travel = travel_times[travel_key]\n        arrive = current_time + travel\n        start = max(arrive, friend['start'])\n        if start + friend['duration'] > friend['end']:\n            valid = False\n            break\n        itinerary.append({\n            'location': friend['location'],\n            'person': friend['name'],\n            'start_time': start,\n            'end_time': start + friend['duration']\n        })\n        current_loc = friend['location']\n        current_time = start + friend['duration']\n    \n    if valid:\n        if len(itinerary) > best_count:\n            best_count = len(itinerary)\n            best_itinerary = itinerary.copy()\n        elif len(itinerary) == best_count and best_itinerary:\n            current_total = sum(e['end_time'] - e['start_time'] for e in itinerary)\n            best_total = sum(e['end_time'] - e['start_time'] for e in best_itinerary)\n            if current_total > best_total:\n                best_itinerary = itinerary.copy()\n\ndef format_time(mins):\n    h = mins // 60\n    m = mins % 60\n    return f\"{h}:{m:02d}\".replace(\":00\", \":0\").replace(\":0\", \":\") if m == 0 else f\"{h}:{m:02d}\"\n\nformatted = []\nfor entry in best_itinerary:\n    formatted.append({\n        'action': 'meet',\n        'location': entry['location'],\n        'person': entry['person'],\n        'start_time': format_time(entry['start_time']),\n        'end_time': format_time(entry['end_time'])\n    })\n\nprint(json.dumps({'itinerary': formatted}, indent=2))\n```",
            "count": "meeting_planning_example_502"
        }
    ]
}