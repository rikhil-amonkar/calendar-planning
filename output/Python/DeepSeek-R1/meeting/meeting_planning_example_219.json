{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Emily",
                        "start_time": "11:45",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "William",
                        "start_time": "17:15",
                        "end_time": "19:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Emily",
                        "start_time": "11:45",
                        "end_time": "13:30"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Barbara",
                        "start_time": "16:45",
                        "end_time": "17:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n```python\nimport json\n\ndef time_to_minutes(t):\n    hours, mins = map(int, t.split(':'))\n    return hours * 60 + mins\n\ndef minutes_to_time(m):\n    return f\"{m // 60}:{m % 60:02d}\".replace(\":0\", \":\") if m % 60 != 0 else f\"{m // 60}:00\"\n\ntravel_times = {\n    ('The Castro', 'Alamo Square'): 8,\n    ('The Castro', 'Union Square'): 19,\n    ('The Castro', 'Chinatown'): 20,\n    ('Alamo Square', 'The Castro'): 8,\n    ('Alamo Square', 'Union Square'): 14,\n    ('Alamo Square', 'Chinatown'): 16,\n    ('Union Square', 'The Castro'): 19,\n    ('Union Square', 'Alamo Square'): 15,\n    ('Union Square', 'Chinatown'): 7,\n    ('Chinatown', 'The Castro'): 22,\n    ('Chinatown', 'Alamo Square'): 17,\n    ('Chinatown', 'Union Square'): 7,\n}\n\nfriends = [\n    {\n        'name': 'Emily',\n        'location': 'Alamo Square',\n        'available_start': time_to_minutes('11:45'),\n        'available_end': time_to_minutes('15:15'),\n        'duration': 105\n    },\n    {\n        'name': 'Barbara',\n        'location': 'Union Square',\n        'available_start': time_to_minutes('16:45'),\n        'available_end': time_to_minutes('18:15'),\n        'duration': 60\n    },\n    {\n        'name': 'William',\n        'location': 'Chinatown',\n        'available_start': time_to_minutes('17:15'),\n        'available_end': time_to_minutes('19:00'),\n        'duration': 105\n    }\n]\n\ncurrent_location = 'The Castro'\ncurrent_time = time_to_minutes('9:00')\nitinerary = []\n\n# Meet Emily first\nemily = [f for f in friends if f['name'] == 'Emily'][0]\ntravel = travel_times[(current_location, emily['location'])]\narrival_time = current_time + travel\nstart_time = max(emily['available_start'], arrival_time)\nend_time = start_time + emily['duration']\nif end_time > emily['available_end']:\n    start_time = emily['available_end'] - emily['duration']\n    end_time = emily['available_end']\nitinerary.append({\n    'action': 'meet',\n    'location': emily['location'],\n    'person': emily['name'],\n    'start_time': minutes_to_time(start_time),\n    'end_time': minutes_to_time(end_time)\n})\ncurrent_time = end_time\ncurrent_location = emily['location']\n\n# Determine next possible meetings\nbest_meeting = None\nmax_duration = 0\nfor friend in [f for f in friends if f['name'] != 'Emily']:\n    travel_time = travel_times.get((current_location, friend['location']), float('inf'))\n    arrival = current_time + travel_time\n    start = max(arrival, friend['available_start'])\n    end = start + friend['duration']\n    if end <= friend['available_end'] and friend['duration'] > max_duration:\n        best_meeting = friend\n        best_start = start\n        best_end = end\n        max_duration = friend['duration']\n\nif best_meeting:\n    itinerary.append({\n        'action': 'meet',\n        'location': best_meeting['location'],\n        'person': best_meeting['name'],\n        'start_time': minutes_to_time(best_start),\n        'end_time': minutes_to_time(best_end)\n    })\n\nprint(json.dumps({\"itinerary\": itinerary}, indent=2))\n```",
            "count": "meeting_planning_example_219"
        }
    ]
}