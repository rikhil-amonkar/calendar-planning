{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Sandra",
                        "start_time": "9:20",
                        "end_time": "9:50"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Brian",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Stephanie",
                        "start_time": "11:03",
                        "end_time": "12:18"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Helen",
                        "start_time": "12:40",
                        "end_time": "14:40"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Laura",
                        "start_time": "14:49",
                        "end_time": "16:04"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Mary",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Financial District",
                        "person": "Deborah",
                        "start_time": "19:00",
                        "end_time": "20:45"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "SOLUTION:\n```python\nimport json\n\ndef time_to_min(t):\n    hours, mins = map(int, t.split(':'))\n    return hours * 60 + mins\n\ndef min_to_time(m):\n    return f\"{m // 60}:{m % 60:02d}\"\n\nfriends = [\n    {'name': 'Laura', 'location': 'Alamo Square', 'start': time_to_min('14:30'), 'end': time_to_min('16:15'), 'duration': 75},\n    {'name': 'Brian', 'location': 'Presidio', 'start': time_to_min('10:15'), 'end': time_to_min('17:00'), 'duration': 30},\n    {'name': 'Karen', 'location': 'Russian Hill', 'start': time_to_min('18:00'), 'end': time_to_min('20:15'), 'duration': 90},\n    {'name': 'Stephanie', 'location': 'North Beach', 'start': time_to_min('10:15'), 'end': time_to_min('16:00'), 'duration': 75},\n    {'name': 'Helen', 'location': 'Golden Gate Park', 'start': time_to_min('11:30'), 'end': time_to_min('21:45'), 'duration': 120},\n    {'name': 'Sandra', 'location': 'Richmond District', 'start': time_to_min('8:00'), 'end': time_to_min('15:15'), 'duration': 30},\n    {'name': 'Mary', 'location': 'Embarcadero', 'start': time_to_min('16:45'), 'end': time_to_min('18:45'), 'duration': 120},\n    {'name': 'Deborah', 'location': 'Financial District', 'start': time_to_min('19:00'), 'end': time_to_min('20:45'), 'duration': 105},\n    {'name': 'Elizabeth', 'location': 'Marina District', 'start': time_to_min('8:30'), 'end': time_to_min('13:15'), 'duration': 105},\n]\n\nfor f in friends:\n    f['latest_start'] = f['end'] - f['duration']\n\ntravel_times = {\n    'Mission District': {'Alamo Square': 11, 'Presidio': 25, 'Russian Hill': 15, 'North Beach': 17, 'Golden Gate Park': 17, 'Richmond District': 20, 'Embarcadero': 19, 'Financial District': 15, 'Marina District': 19},\n    'Alamo Square': {'Mission District': 10, 'Presidio': 17, 'Russian Hill': 13, 'North Beach': 15, 'Golden Gate Park': 9, 'Richmond District': 11, 'Embarcadero': 16, 'Financial District': 17, 'Marina District': 15},\n    'Presidio': {'Mission District': 26, 'Alamo Square': 19, 'Russian Hill': 14, 'North Beach': 18, 'Golden Gate Park': 12, 'Richmond District': 7, 'Embarcadero': 20, 'Financial District': 23, 'Marina District': 11},\n    'Russian Hill': {'Mission District': 16, 'Alamo Square': 15, 'Presidio': 14, 'North Beach': 5, 'Golden Gate Park': 21, 'Richmond District': 14, 'Embarcadero': 8, 'Financial District': 11, 'Marina District': 7},\n    'North Beach': {'Mission District': 18, 'Alamo Square': 16, 'Presidio': 17, 'Russian Hill': 4, 'Golden Gate Park': 22, 'Richmond District': 18, 'Embarcadero': 6, 'Financial District': 8, 'Marina District': 9},\n    'Golden Gate Park': {'Mission District': 17, 'Alamo Square': 9, 'Presidio': 11, 'Russian Hill': 19, 'North Beach': 23, 'Richmond District': 7, 'Embarcadero': 25, 'Financial District': 26, 'Marina District': 16},\n    'Richmond District': {'Mission District': 20, 'Alamo Square': 13, 'Presidio': 7, 'Russian Hill': 13, 'North Beach': 17, 'Golden Gate Park': 9, 'Embarcadero': 19, 'Financial District': 22, 'Marina District': 9},\n    'Embarcadero': {'Mission District': 20, 'Alamo Square': 19, 'Presidio': 20, 'Russian Hill': 8, 'North Beach': 5, 'Golden Gate Park': 25, 'Richmond District': 21, 'Financial District': 5, 'Marina District': 12},\n    'Financial District': {'Mission District': 17, 'Alamo Square': 17, 'Presidio': 22, 'Russian Hill': 11, 'North Beach': 7, 'Golden Gate Park': 23, 'Richmond District': 21, 'Embarcadero': 4, 'Marina District': 15},\n    'Marina District': {'Mission District': 20, 'Alamo Square': 15, 'Presidio': 10, 'Russian Hill': 8, 'North Beach': 11, 'Golden Gate Park': 18, 'Richmond District': 11, 'Embarcadero': 14, 'Financial District': 17},\n}\n\nbest_schedule = []\nbest_count = 0\nbest_duration = 0\n\ndef backtrack(current_time, current_loc, visited, schedule):\n    global best_schedule, best_count, best_duration\n    if len(visited) > best_count or (len(visited) == best_count and sum(f['duration'] for f in schedule) > best_duration):\n        best_schedule = schedule.copy()\n        best_count = len(visited)\n        best_duration = sum(f['duration'] for f in schedule)\n    for i, friend in enumerate(friends):\n        if i not in visited:\n            tt = travel_times[current_loc].get(friend['location'], float('inf'))\n            arrival = current_time + tt\n            start = max(arrival, friend['start'])\n            if start > friend['latest_start']:\n                continue\n            end = start + friend['duration']\n            if end > friend['end']:\n                continue\n            new_schedule = schedule + [{\n                'action': 'meet',\n                'location': friend['location'],\n                'person': friend['name'],\n                'start_time': min_to_time(start).replace(':0', ':') if min_to_time(start).endswith(':00') else min_to_time(start).lstrip('0'),\n                'end_time': min_to_time(end).replace(':0', ':') if min_to_time(end).endswith(':00') else min_to_time(end).lstrip('0')\n            }]\n            new_time = end\n            new_loc = friend['location']\n            new_visited = visited | {i}\n            backtrack(new_time, new_loc, new_visited, new_schedule)\n\nbacktrack(540, 'Mission District', set(), [])\n\noutput = {\n    \"itinerary\": best_schedule\n}\n\nprint(json.dumps(output, indent=2))\n```",
            "count": "meeting_planning_example_862"
        }
    ]
}