{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Deborah",
                        "start_time": "9:16",
                        "end_time": "10:01"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "George",
                        "start_time": "10:23",
                        "end_time": "11:23"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Emily",
                        "start_time": "12:15",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Mark",
                        "start_time": "14:45",
                        "end_time": "15:45"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Steven",
                        "start_time": "15:57",
                        "end_time": "17:42"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Margaret",
                        "start_time": "21:30",
                        "end_time": "22:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n```python\nimport json\nfrom itertools import permutations\n\ndef time_to_min(t):\n    h, m = map(int, t.split(':'))\n    return h * 60 + m\n\ndef min_to_time(m):\n    return f\"{m // 60}:{m % 60:02d}\"\n\nfriends = [\n    {'name': 'Emily', 'location': 'Russian Hill', 'start': time_to_min('12:15'), 'end': time_to_min('14:15'), 'duration': 105},\n    {'name': 'Mark', 'location': 'Presidio', 'start': time_to_min('14:45'), 'end': time_to_min('19:30'), 'duration': 60},\n    {'name': 'Deborah', 'location': 'Chinatown', 'start': time_to_min('7:30'), 'end': time_to_min('15:30'), 'duration': 45},\n    {'name': 'Margaret', 'location': 'Sunset District', 'start': time_to_min('21:30'), 'end': time_to_min('22:30'), 'duration': 60},\n    {'name': 'George', 'location': 'The Castro', 'start': time_to_min('7:30'), 'end': time_to_min('14:15'), 'duration': 60},\n    {'name': 'Andrew', 'location': 'Embarcadero', 'start': time_to_min('20:15'), 'end': time_to_min('22:00'), 'duration': 75},\n    {'name': 'Steven', 'location': 'Golden Gate Park', 'start': time_to_min('11:15'), 'end': time_to_min('21:15'), 'duration': 105}\n]\n\ntravel_times = {\n    'Alamo Square': {'Russian Hill':13, 'Presidio':18, 'Chinatown':16, 'Sunset District':16, 'The Castro':8, 'Embarcadero':17, 'Golden Gate Park':9},\n    'Russian Hill': {'Alamo Square':15, 'Presidio':14, 'Chinatown':9, 'Sunset District':23, 'The Castro':21, 'Embarcadero':8, 'Golden Gate Park':21},\n    'Presidio': {'Alamo Square':18, 'Russian Hill':14, 'Chinatown':21, 'Sunset District':15, 'The Castro':21, 'Embarcadero':20, 'Golden Gate Park':12},\n    'Chinatown': {'Alamo Square':17, 'Russian Hill':7, 'Presidio':19, 'Sunset District':29, 'The Castro':22, 'Embarcadero':5, 'Golden Gate Park':23},\n    'Sunset District': {'Alamo Square':17, 'Russian Hill':24, 'Presidio':16, 'Chinatown':30, 'The Castro':17, 'Embarcadero':31, 'Golden Gate Park':11},\n    'The Castro': {'Alamo Square':8, 'Russian Hill':18, 'Presidio':20, 'Chinatown':20, 'Sunset District':17, 'Embarcadero':22, 'Golden Gate Park':11},\n    'Embarcadero': {'Alamo Square':19, 'Russian Hill':8, 'Presidio':20, 'Chinatown':7, 'Sunset District':30, 'The Castro':25, 'Golden Gate Park':25},\n    'Golden Gate Park': {'Alamo Square':10, 'Russian Hill':19, 'Presidio':11, 'Chinatown':23, 'Sunset District':10, 'The Castro':13, 'Embarcadero':25}\n}\n\ndef calculate_schedule(order):\n    current_loc = 'Alamo Square'\n    current_time = time_to_min('9:00')\n    schedule = []\n    for friend in order:\n        travel = travel_times[current_loc].get(friend['location'], 0)\n        arrive = current_time + travel\n        start = max(arrive, friend['start'])\n        if start + friend['duration'] > friend['end']:\n            return None\n        end = start + friend['duration']\n        schedule.append((friend, start, end))\n        current_loc = friend['location']\n        current_time = end\n    return schedule\n\nbest = []\nmax_count = 0\n\nfor perm in permutations(friends):\n    if len(perm) < len(friends):\n        continue\n    valid = True\n    for f in perm:\n        if f['name'] == 'Margaret' and len(perm) > perm.index(f) + 1:\n            valid = False\n            break\n    if not valid:\n        continue\n    schedule = calculate_schedule(perm)\n    if schedule:\n        count = len(schedule)\n        if count > max_count or (count == max_count and schedule[-1][2] < best[-1][2]):\n            max_count = count\n            best = schedule\n\nitinerary = []\ncurrent_loc = 'Alamo Square'\ncurrent_time = time_to_min('9:00')\nfor entry in best:\n    friend, start, end = entry\n    travel = travel_times[current_loc][friend['location']]\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": friend['location'],\n        \"person\": friend['name'],\n        \"start_time\": min_to_time(start),\n        \"end_time\": min_to_time(end)\n    })\n    current_loc = friend['location']\n    current_time = end\n\nprint(json.dumps({\"itinerary\": itinerary}, indent=None))\n```",
            "count": "meeting_planning_example_612"
        }
    ]
}