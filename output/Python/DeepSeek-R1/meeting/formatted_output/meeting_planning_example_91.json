{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Daniel",
                        "start_time": "19:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Daniel",
                        "start_time": "19:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n```python\nimport json\nfrom datetime import datetime\n\ndef time_to_min(time_str):\n    time_obj = datetime.strptime(time_str, \"%I:%M%p\")\n    return time_obj.hour * 60 + time_obj.minute\n\ndef min_to_time(mins):\n    hours = mins // 60\n    minutes = mins % 60\n    return f\"{hours}:{minutes:02}\"\n\ntravel_times = {\n    ('Russian Hill', 'Richmond District'): 14,\n    ('Richmond District', 'Russian Hill'): 13\n}\n\nstart_location = 'Russian Hill'\nstart_time_str = '9:00AM'\ndaniel_location = 'Richmond District'\ndaniel_available_start_str = '7:00PM'\ndaniel_available_end_str = '8:15PM'\nrequired_duration = 75\n\nstart_time = time_to_min(start_time_str)\ndaniel_start = time_to_min(daniel_available_start_str)\ndaniel_end = time_to_min(daniel_available_end_str)\navailable_duration = daniel_end - daniel_start\n\nitinerary = []\n\nif available_duration >= required_duration:\n    travel_time = travel_times.get((start_location, daniel_location), 0)\n    departure_time = daniel_start - travel_time\n    if departure_time >= start_time:\n        meet_end = min(daniel_start + required_duration, daniel_end)\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": daniel_location,\n            \"person\": \"Daniel\",\n            \"start_time\": min_to_time(daniel_start),\n            \"end_time\": min_to_time(meet_end)\n        })\n\nprint(json.dumps({\"itinerary\": itinerary}, indent=2))\n```",
            "count": "meeting_planning_example_91"
        }
    ]
}