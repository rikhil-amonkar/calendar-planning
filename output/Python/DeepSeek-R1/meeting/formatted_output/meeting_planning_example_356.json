{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Margaret",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Barbara",
                        "start_time": "13:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kimberly",
                        "start_time": "14:52",
                        "end_time": "15:22"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "20:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Margaret",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Barbara",
                        "start_time": "13:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kimberly",
                        "start_time": "14:52",
                        "end_time": "15:22"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "20:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\nimport itertools\nimport json\n\nfriends = [\n    {'name': 'Barbara', 'location': 'North Beach', 'start': 825, 'end': 1215, 'duration': 60},\n    {'name': 'Margaret', 'location': 'Presidio', 'start': 615, 'end': 915, 'duration': 30},\n    {'name': 'Kevin', 'location': 'Haight-Ashbury', 'start': 1200, 'end': 1245, 'duration': 30},\n    {'name': 'Kimberly', 'location': 'Union Square', 'start': 465, 'end': 1005, 'duration': 30}\n]\n\ntravel_times = {\n    'Bayview': {'North Beach':21,'Presidio':31,'Haight-Ashbury':19,'Union Square':17},\n    'North Beach': {'Bayview':22,'Presidio':17,'Haight-Ashbury':18,'Union Square':7},\n    'Presidio': {'Bayview':31,'North Beach':18,'Haight-Ashbury':15,'Union Square':22},\n    'Haight-Ashbury': {'Bayview':18,'North Beach':19,'Presidio':15,'Union Square':17},\n    'Union Square': {'Bayview':15,'North Beach':10,'Presidio':24,'Haight-Ashbury':18}\n}\n\ndef format_time(mins):\n    return f\"{mins//60}:{mins%60:02d}\"\n\ndef compute():\n    best = []\n    max_met = 0\n    min_end = float('inf')\n    \n    for perm in itertools.permutations(friends):\n        current_loc = 'Bayview'\n        current_time = 540\n        itinerary = []\n        valid = True\n        \n        for f in perm:\n            travel = travel_times[current_loc].get(f['location'], None)\n            if not travel:\n                valid = False\n                break\n            arrive = current_time + travel\n            start = max(arrive, f['start'])\n            latest_start = f['end'] - f['duration']\n            if start > latest_start:\n                valid = False\n                break\n            end = start + f['duration']\n            itinerary.append((f, start, end))\n            current_loc = f['location']\n            current_time = end\n        \n        if valid:\n            met = len(itinerary)\n            if met > max_met or (met == max_met and current_time < min_end):\n                best = itinerary\n                max_met = met\n                min_end = current_time\n\n    result = []\n    for item in best:\n        f, s, e = item\n        result.append({\n            \"action\": \"meet\",\n            \"location\": f['location'],\n            \"person\": f['name'],\n            \"start_time\": format_time(s),\n            \"end_time\": format_time(e)\n        })\n    \n    return {\"itinerary\": result}\n\nprint(json.dumps(compute(), indent=2))",
            "count": "meeting_planning_example_356"
        }
    ]
}