{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "9:25",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Melissa",
                        "start_time": "9:25",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Emily",
                        "start_time": "16:45",
                        "end_time": "18:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n```python\nimport json\nfrom itertools import permutations\n\ndef time_to_str(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\" if mins != 0 else f\"{hours}:00\"\n\ndef main():\n    friends = [\n        {\n            'name': 'Melissa',\n            'location': 'Golden Gate Park',\n            'start': 8 * 60 + 30,\n            'end': 20 * 60,\n            'duration': 15\n        },\n        {\n            'name': 'Nancy',\n            'location': 'Presidio',\n            'start': 19 * 60 + 45,\n            'end': 22 * 60,\n            'duration': 105\n        },\n        {\n            'name': 'Emily',\n            'location': 'Richmond District',\n            'start': 16 * 60 + 45,\n            'end': 22 * 60,\n            'duration': 120\n        }\n    ]\n\n    travel_times = {\n        'Fisherman\\'s Wharf': {\n            'Golden Gate Park': 25,\n            'Presidio': 17,\n            'Richmond District': 18\n        },\n        'Golden Gate Park': {\n            'Fisherman\\'s Wharf': 24,\n            'Presidio': 11,\n            'Richmond District': 7\n        },\n        'Presidio': {\n            'Fisherman\\'s Wharf': 19,\n            'Golden Gate Park': 12,\n            'Richmond District': 7\n        },\n        'Richmond District': {\n            'Fisherman\\'s Wharf': 18,\n            'Golden Gate Park': 9,\n            'Presidio': 7\n        }\n    }\n\n    best_itinerary = []\n    max_met = 0\n\n    for perm in permutations(friends):\n        current_loc = 'Fisherman\\'s Wharf'\n        current_time = 9 * 60\n        itinerary = []\n        valid = True\n\n        for friend in perm:\n            dest = friend['location']\n            tt = travel_times[current_loc].get(dest)\n            if tt is None:\n                valid = False\n                break\n            arrival = current_time + tt\n            start = max(arrival, friend['start'])\n            end = start + friend['duration']\n            if end > friend['end']:\n                valid = False\n                break\n            itinerary.append({\n                'location': friend['location'],\n                'person': friend['name'],\n                'start': start,\n                'end': end\n            })\n            current_time = end\n            current_loc = dest\n\n        if valid and len(itinerary) > max_met:\n            max_met = len(itinerary)\n            best_itinerary = itinerary\n        elif valid and len(itinerary) == max_met and best_itinerary:\n            current_last = max([item['end'] for item in itinerary])\n            best_last = max([item['end'] for item in best_itinerary])\n            if current_last < best_last:\n                best_itinerary = itinerary\n\n    result = {\"itinerary\": []}\n    for item in best_itinerary:\n        result[\"itinerary\"].append({\n            \"action\": \"meet\",\n            \"location\": item['location'],\n            \"person\": item['person'],\n            \"start_time\": time_to_str(item['start']).replace(':00', ':0') if item['start'] % 60 == 0 else time_to_str(item['start']),\n            \"end_time\": time_to_str(item['end']).replace(':00', ':0') if item['end'] % 60 == 0 else time_to_str(item['end'])\n        })\n\n    print(json.dumps(result))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_224"
        }
    ]
}