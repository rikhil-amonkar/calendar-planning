{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Jeffrey",
                        "start_time": "10:15",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Ronald",
                        "start_time": "12:06",
                        "end_time": "14:06"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "Margaret",
                        "start_time": "14:22",
                        "end_time": "15:52"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Richard",
                        "start_time": "15:59",
                        "end_time": "16:14"
                    },
                    {
                        "action": "meet",
                        "location": "Richmond District",
                        "person": "Laura",
                        "start_time": "16:34",
                        "end_time": "17:34"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Melissa",
                        "start_time": "17:55",
                        "end_time": "18:10"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "George",
                        "start_time": "19:00",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "SOLUTION:\n```python\nimport heapq\nimport json\n\ndef minutes_to_time(m):\n    hours = m // 60\n    minutes = m % 60\n    return f\"{hours}:{minutes:02d}\"\n\nfriends = [\n    {'name': 'Jeffrey', 'location': 'Fisherman\\'s Wharf', 'start': 615, 'end': 780, 'duration': 90, 'index': 0},\n    {'name': 'Ronald', 'location': 'Alamo Square', 'start': 465, 'end': 885, 'duration': 120, 'index': 1},\n    {'name': 'Jason', 'location': 'Financial District', 'start': 645, 'end': 960, 'duration': 105, 'index': 2},\n    {'name': 'Melissa', 'location': 'Union Square', 'start': 1065, 'end': 1095, 'duration': 15, 'index': 3},\n    {'name': 'Elizabeth', 'location': 'Sunset District', 'start': 885, 'end': 1050, 'duration': 105, 'index': 4},\n    {'name': 'Margaret', 'location': 'Embarcadero', 'start': 795, 'end': 1140, 'duration': 90, 'index': 5},\n    {'name': 'George', 'location': 'Golden Gate Park', 'start': 1140, 'end': 1320, 'duration': 75, 'index': 6},\n    {'name': 'Richard', 'location': 'Chinatown', 'start': 570, 'end': 1260, 'duration': 15, 'index': 7},\n    {'name': 'Laura', 'location': 'Richmond District', 'start': 585, 'end': 1080, 'duration': 60, 'index': 8},\n]\n\ntravel_time = {\n    ('Presidio', 'Fisherman\\'s Wharf'): 19,\n    ('Presidio', 'Alamo Square'): 19,\n    ('Presidio', 'Financial District'): 23,\n    ('Presidio', 'Union Square'): 22,\n    ('Presidio', 'Sunset District'): 15,\n    ('Presidio', 'Embarcadero'): 20,\n    ('Presidio', 'Golden Gate Park'): 12,\n    ('Presidio', 'Chinatown'): 21,\n    ('Presidio', 'Richmond District'): 7,\n    ('Fisherman\\'s Wharf', 'Presidio'): 17,\n    ('Fisherman\\'s Wharf', 'Alamo Square'): 21,\n    ('Fisherman\\'s Wharf', 'Financial District'): 11,\n    ('Fisherman\\'s Wharf', 'Union Square'): 13,\n    ('Fisherman\\'s Wharf', 'Sunset District'): 27,\n    ('Fisherman\\'s Wharf', 'Embarcadero'): 8,\n    ('Fisherman\\'s Wharf', 'Golden Gate Park'): 25,\n    ('Fisherman\\'s Wharf', 'Chinatown'): 12,\n    ('Fisherman\\'s Wharf', 'Richmond District'): 18,\n    ('Alamo Square', 'Presidio'): 17,\n    ('Alamo Square', 'Fisherman\\'s Wharf'): 19,\n    ('Alamo Square', 'Financial District'): 17,\n    ('Alamo Square', 'Union Square'): 14,\n    ('Alamo Square', 'Sunset District'): 16,\n    ('Alamo Square', 'Embarcadero'): 16,\n    ('Alamo Square', 'Golden Gate Park'): 9,\n    ('Alamo Square', 'Chinatown'): 15,\n    ('Alamo Square', 'Richmond District'): 11,\n    ('Financial District', 'Presidio'): 22,\n    ('Financial District', 'Fisherman\\'s Wharf'): 10,\n    ('Financial District', 'Alamo Square'): 17,\n    ('Financial District', 'Union Square'): 9,\n    ('Financial District', 'Sunset District'): 30,\n    ('Financial District', 'Embarcadero'): 4,\n    ('Financial District', 'Golden Gate Park'): 23,\n    ('Financial District', 'Chinatown'): 5,\n    ('Financial District', 'Richmond District'): 21,\n    ('Union Square', 'Presidio'): 24,\n    ('Union Square', 'Fisherman\\'s Wharf'): 15,\n    ('Union Square', 'Alamo Square'): 15,\n    ('Union Square', 'Financial District'): 9,\n    ('Union Square', 'Sunset District'): 27,\n    ('Union Square', 'Embarcadero'): 11,\n    ('Union Square', 'Golden Gate Park'): 22,\n    ('Union Square', 'Chinatown'): 7,\n    ('Union Square', 'Richmond District'): 20,\n    ('Sunset District', 'Presidio'): 16,\n    ('Sunset District', 'Fisherman\\'s Wharf'): 29,\n    ('Sunset District', 'Alamo Square'): 17,\n    ('Sunset District', 'Financial District'): 30,\n    ('Sunset District', 'Union Square'): 30,\n    ('Sunset District', 'Embarcadero'): 30,\n    ('Sunset District', 'Golden Gate Park'): 11,\n    ('Sunset District', 'Chinatown'): 30,\n    ('Sunset District', 'Richmond District'): 12,\n    ('Embarcadero', 'Presidio'): 20,\n    ('Embarcadero', 'Fisherman\\'s Wharf'): 6,\n    ('Embarcadero', 'Alamo Square'): 19,\n    ('Embarcadero', 'Financial District'): 5,\n    ('Embarcadero', 'Union Square'): 10,\n    ('Embarcadero', 'Sunset District'): 30,\n    ('Embarcadero', 'Golden Gate Park'): 25,\n    ('Embarcadero', 'Chinatown'): 7,\n    ('Embarcadero', 'Richmond District'): 21,\n    ('Golden Gate Park', 'Presidio'): 11,\n    ('Golden Gate Park', 'Fisherman\\'s Wharf'): 24,\n    ('Golden Gate Park', 'Alamo Square'): 9,\n    ('Golden Gate Park', 'Financial District'): 26,\n    ('Golden Gate Park', 'Union Square'): 22,\n    ('Golden Gate Park', 'Sunset District'): 10,\n    ('Golden Gate Park', 'Embarcadero'): 25,\n    ('Golden Gate Park', 'Chinatown'): 23,\n    ('Golden Gate Park', 'Richmond District'): 7,\n    ('Chinatown', 'Presidio'): 19,\n    ('Chinatown', 'Fisherman\\'s Wharf'): 8,\n    ('Chinatown', 'Alamo Square'): 17,\n    ('Chinatown', 'Financial District'): 5,\n    ('Chinatown', 'Union Square'): 7,\n    ('Chinatown', 'Sunset District'): 29,\n    ('Chinatown', 'Embarcadero'): 5,\n    ('Chinatown', 'Golden Gate Park'): 23,\n    ('Chinatown', 'Richmond District'): 20,\n    ('Richmond District', 'Presidio'): 7,\n    ('Richmond District', 'Fisherman\\'s Wharf'): 18,\n    ('Richmond District', 'Alamo Square'): 13,\n    ('Richmond District', 'Financial District'): 22,\n    ('Richmond District', 'Union Square'): 21,\n    ('Richmond District', 'Sunset District'): 11,\n    ('Richmond District', 'Embarcadero'): 19,\n    ('Richmond District', 'Golden Gate Park'): 9,\n    ('Richmond District', 'Chinatown'): 20,\n}\n\nheap = []\ndp = {}\nbest_count = 0\nbest_schedule = []\n\nheapq.heappush(heap, ((-0, 540, 540, 'Presidio', 0, []))\ndp[('Presidio', 0)] = 540\n\nwhile heap:\n    priority, current_priority_time, current_time, current_location, mask, schedule = heapq.heappop(heap)\n    num_friends = -priority\n\n    if (current_location, mask) in dp and dp[(current_location, mask)] < current_time:\n        continue\n\n    if num_friends > best_count or (num_friends == best_count and current_time < (int(best_schedule[-1]['end_time'].split(':')[0]) * 60 + int(best_schedule[-1]['end_time'].split(':')[1]) if best_schedule else 0)):\n        best_count = num_friends\n        best_schedule = schedule.copy()\n\n    for friend in friends:\n        if not (mask & (1 << friend['index'])):\n            from_loc = current_location\n            to_loc = friend['location']\n            tt = travel_time.get((from_loc, to_loc))\n            if tt is None:\n                continue\n            arrival_time = current_time + tt\n            start_time = max(arrival_time, friend['start'])\n            end_time = start_time + friend['duration']\n            if end_time > friend['end']:\n                continue\n            new_mask = mask | (1 << friend['index'])\n            new_schedule = schedule.copy()\n            new_schedule.append({\n                'action': 'meet',\n                'location': to_loc,\n                'person': friend['name'],\n                'start_time': minutes_to_time(start_time),\n                'end_time': minutes_to_time(end_time)\n            })\n            new_key = (to_loc, new_mask)\n            if new_key not in dp or end_time < dp.get(new_key, float('inf')):\n                dp[new_key] = end_time\n                heapq.heappush(heap, ((-num_friends - 1, end_time, end_time, to_loc, new_mask, new_schedule)))\n\noutput = {\"itinerary\": best_schedule}\nprint(json.dumps(output))\n```",
            "count": "meeting_planning_example_831"
        }
    ]
}