{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Mary",
                        "start_time": "9:17",
                        "end_time": "10:32"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Nancy",
                        "start_time": "10:48",
                        "end_time": "12:18"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jessica",
                        "start_time": "12:40",
                        "end_time": "13:25"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Nancy",
                        "start_time": "9:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Mary",
                        "start_time": "11:17",
                        "end_time": "12:32"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Jessica",
                        "start_time": "12:48",
                        "end_time": "13:33"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n```python\nimport itertools\nimport json\n\ndef time_to_minutes(t):\n    hours, mins = map(int, t.split(':'))\n    return hours * 60 + mins\n\ndef minutes_to_time(m):\n    return f\"{m // 60}:{m % 60:02d}\"\n\nfriends = [\n    {\n        'name': 'Nancy',\n        'location': 'Chinatown',\n        'start': time_to_minutes('9:30'),\n        'end': time_to_minutes('13:30'),\n        'duration': 90\n    },\n    {\n        'name': 'Mary',\n        'location': 'Alamo Square',\n        'start': time_to_minutes('7:00'),\n        'end': time_to_minutes('21:00'),\n        'duration': 75\n    },\n    {\n        'name': 'Jessica',\n        'location': 'Bayview',\n        'start': time_to_minutes('11:15'),\n        'end': time_to_minutes('13:45'),\n        'duration': 45\n    }\n]\n\ntravel_times = {\n    'Financial District': {'Chinatown': 5, 'Alamo Square': 17, 'Bayview': 19, 'Fisherman\\'s Wharf': 10},\n    'Chinatown': {'Financial District': 5, 'Alamo Square': 17, 'Bayview': 22, 'Fisherman\\'s Wharf': 8},\n    'Alamo Square': {'Financial District': 17, 'Chinatown': 16, 'Bayview': 16, 'Fisherman\\'s Wharf': 19},\n    'Bayview': {'Financial District': 19, 'Chinatown': 18, 'Alamo Square': 16, 'Fisherman\\'s Wharf': 25},\n    'Fisherman\\'s Wharf': {'Financial District': 11, 'Chinatown': 12, 'Alamo Square': 20, 'Bayview': 26}\n}\n\nbest_count = 0\nbest_schedule = []\ncurrent_location = 'Financial District'\nstart_time = time_to_minutes('9:00')\n\nfor perm in itertools.permutations(friends):\n    current_loc = 'Financial District'\n    current_time = start_time\n    schedule = []\n    count = 0\n    possible = True\n    for friend in perm:\n        try:\n            travel = travel_times[current_loc][friend['location']]\n        except KeyError:\n            possible = False\n            break\n        arrival = current_time + travel\n        start = max(arrival, friend['start'])\n        end = start + friend['duration']\n        if end > friend['end']:\n            possible = False\n            break\n        schedule.append((friend, start, end))\n        current_time = end\n        current_loc = friend['location']\n        count += 1\n    if possible and count > best_count or (count == best_count and current_time < sum(entry[2] for entry in best_schedule)):\n        best_count = count\n        best_schedule = schedule.copy()\n\nitinerary = []\nfor entry in best_schedule:\n    friend, start, end = entry\n    itinerary.append({\n        \"action\": \"meet\",\n        \"location\": friend['location'],\n        \"person\": friend['name'],\n        \"start_time\": minutes_to_time(start).replace(':0', ':') if (start % 60) < 10 else minutes_to_time(start),\n        \"end_time\": minutes_to_time(end).replace(':0', ':') if (end % 60) < 10 else minutes_to_time(end)\n    })\n\nprint(json.dumps({\"itinerary\": itinerary}, indent=2))\n```",
            "count": "meeting_planning_example_309"
        }
    ]
}