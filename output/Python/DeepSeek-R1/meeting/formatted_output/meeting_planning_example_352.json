{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joseph",
                        "start_time": "12:30",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Sandra",
                        "start_time": "14:19",
                        "end_time": "15:34"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Nancy",
                        "start_time": "15:46",
                        "end_time": "17:31"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Karen",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joseph",
                        "start_time": "12:30",
                        "end_time": "14:00"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Sandra",
                        "start_time": "14:19",
                        "end_time": "15:34"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Nancy",
                        "start_time": "15:46",
                        "end_time": "17:31"
                    },
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Karen",
                        "start_time": "21:15",
                        "end_time": "21:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\nimport itertools\nimport json\n\ndef parse_time(time_str):\n    time_str = time_str.strip().upper()\n    if time_str.endswith(('AM', 'PM')):\n        time_part, period = time_str[:-2], time_str[-2:]\n        hours, minutes = map(int, time_part.split(':'))\n        if period == 'PM' and hours != 12:\n            hours += 12\n        elif period == 'AM' and hours == 12:\n            hours = 0\n        return hours * 60 + minutes\n    else:\n        hours, minutes = map(int, time_str.split(':'))\n        return hours * 60 + minutes\n\ndef format_time(mins):\n    h, m = divmod(mins, 60)\n    return f\"{h}:{m:02d}\".replace(\":00\", \":0\").replace(\":0\", \":\")\n\ntravel_times = {\n    'Union Square': {'Nob Hill': 9, 'Haight-Ashbury': 18, 'Chinatown': 7, 'Marina District': 18},\n    'Nob Hill': {'Union Square': 7, 'Haight-Ashbury': 13, 'Chinatown': 6, 'Marina District': 11},\n    'Haight-Ashbury': {'Union Square': 17, 'Nob Hill': 15, 'Chinatown': 19, 'Marina District': 17},\n    'Chinatown': {'Union Square': 7, 'Nob Hill': 8, 'Haight-Ashbury': 19, 'Marina District': 12},\n    'Marina District': {'Union Square': 16, 'Nob Hill': 12, 'Haight-Ashbury': 16, 'Chinatown': 16}\n}\n\nfriends = [\n    {'name':'Karen', 'location':'Nob Hill', 'start':parse_time('9:15PM'), 'end':parse_time('9:45PM'), 'duration':30},\n    {'name':'Joseph', 'location':'Haight-Ashbury', 'start':parse_time('12:30PM'), 'end':parse_time('7:45PM'), 'duration':90},\n    {'name':'Sandra', 'location':'Chinatown', 'start':parse_time('7:15AM'), 'end':parse_time('7:15PM'), 'duration':75},\n    {'name':'Nancy', 'location':'Marina District', 'start':parse_time('11:00AM'), 'end':parse_time('8:15PM'), 'duration':105}\n]\n\nkaren = friends[0]\nothers = friends[1:]\n\nbest = []\nmax_people = 0\n\nfor perm in itertools.permutations(others):\n    schedule = []\n    current = 540\n    loc = 'Union Square'\n    valid = True\n    \n    for p in perm:\n        travel = travel_times[loc][p['location']]\n        arrive = current + travel\n        start = max(arrive, p['start'])\n        end = start + p['duration']\n        if end > p['end']:\n            valid = False\n            break\n        schedule.append((p['name'], p['location'], start, end))\n        current = end\n        loc = p['location']\n    \n    if valid:\n        travel_k = travel_times[loc][karen['location']]\n        arrive_k = current + travel_k\n        k_start = karen['start']\n        if arrive_k <= k_start and (k_start + karen['duration']) <= karen['end']:\n            total = len(perm) + 1\n            temp = schedule + [('Karen', 'Nob Hill', k_start, k_start +30)]\n        else:\n            total = len(perm)\n            temp = schedule\n        \n        if total > max_people or (total == max_people and current < current):\n            max_people = total\n            best = temp\n\nformatted = []\nfor entry in best:\n    name, loc, s, e = entry\n    formatted.append({\n        \"action\": \"meet\",\n        \"location\": loc,\n        \"person\": name,\n        \"start_time\": format_time(s).replace(':0',':'),\n        \"end_time\": format_time(e).replace(':0',':')\n    })\n\nprint(json.dumps({\"itinerary\": formatted}, indent=2))",
            "count": "meeting_planning_example_352"
        }
    ]
}