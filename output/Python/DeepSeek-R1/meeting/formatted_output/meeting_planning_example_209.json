{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "9:29",
                        "end_time": "11:14"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Anthony",
                        "start_time": "13:15",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Rebecca",
                        "start_time": "19:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Melissa",
                        "start_time": "9:29",
                        "end_time": "11:14"
                    },
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Anthony",
                        "start_time": "13:15",
                        "end_time": "14:15"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Rebecca",
                        "start_time": "19:30",
                        "end_time": "21:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\nimport itertools\nimport json\n\ndef time_to_minutes(time_str):\n    hours, mins = map(int, time_str.split(':'))\n    return hours * 60 + mins\n\ndef minutes_to_time(mins):\n    hours = mins // 60\n    minutes = mins % 60\n    return f\"{hours}:{minutes:02d}\"\n\nfriends = [\n    {\n        'name': 'Melissa',\n        'location': 'North Beach',\n        'available_start': time_to_minutes('8:15'),\n        'available_end': time_to_minutes('13:30'),\n        'min_duration': 105\n    },\n    {\n        'name': 'Anthony',\n        'location': 'Chinatown',\n        'available_start': time_to_minutes('13:15'),\n        'available_end': time_to_minutes('14:30'),\n        'min_duration': 60\n    },\n    {\n        'name': 'Rebecca',\n        'location': 'Russian Hill',\n        'available_start': time_to_minutes('19:30'),\n        'available_end': time_to_minutes('21:15'),\n        'min_duration': 105\n    }\n]\n\ntravel_times = {\n    ('Sunset District', 'Chinatown'): 30,\n    ('Sunset District', 'Russian Hill'): 24,\n    ('Sunset District', 'North Beach'): 29,\n    ('Chinatown', 'Sunset District'): 29,\n    ('Chinatown', 'Russian Hill'): 7,\n    ('Chinatown', 'North Beach'): 3,\n    ('Russian Hill', 'Sunset District'): 23,\n    ('Russian Hill', 'Chinatown'): 9,\n    ('Russian Hill', 'North Beach'): 5,\n    ('North Beach', 'Sunset District'): 27,\n    ('North Beach', 'Chinatown'): 6,\n    ('North Beach', 'Russian Hill'): 4,\n}\n\nbest_itinerary = []\nmax_met = 0\nbest_end = float('inf')\n\nfor perm in itertools.permutations(friends):\n    current_loc = 'Sunset District'\n    current_time = 540\n    itinerary = []\n    \n    for friend in perm:\n        travel_key = (current_loc, friend['location'])\n        if travel_key not in travel_times:\n            continue\n        travel = travel_times[travel_key]\n        arrive = current_time + travel\n        start = max(arrive, friend['available_start'])\n        end = start + friend['min_duration']\n        \n        if end <= friend['available_end']:\n            itinerary.append({\n                'action': 'meet',\n                'location': friend['location'],\n                'person': friend['name'],\n                'start_time': minutes_to_time(start).replace('0','', 1) if minutes_to_time(start).startswith('0') else minutes_to_time(start),\n                'end_time': minutes_to_time(end).replace('0','', 1) if minutes_to_time(end).startswith('0') else minutes_to_time(end)\n            })\n            current_loc = friend['location']\n            current_time = end\n    \n    if len(itinerary) > max_met or (len(itinerary) == max_met and current_time < best_end):\n        max_met = len(itinerary)\n        best_itinerary = itinerary.copy()\n        best_end = current_time\n\nprint(json.dumps({'itinerary': best_itinerary}))",
            "count": "meeting_planning_example_209"
        }
    ]
}