{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Betty",
                        "start_time": "9:13",
                        "end_time": "10:58"
                    },
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Melissa",
                        "start_time": "11:13",
                        "end_time": "12:58"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Joshua",
                        "start_time": "13:03",
                        "end_time": "14:33"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Jeffrey",
                        "start_time": "14:50",
                        "end_time": "15:35"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "James",
                        "start_time": "16:02",
                        "end_time": "17:32"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Emily",
                        "start_time": "19:30",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "SOLUTION:\nimport itertools\nimport json\n\nfriends_data = [\n    {'name': 'Betty', 'location': 'Russian Hill', 'start': 420, 'end': 1005, 'duration': 105},\n    {'name': 'Melissa', 'location': 'Alamo Square', 'start': 570, 'end': 1035, 'duration': 105},\n    {'name': 'Joshua', 'location': 'Haight-Ashbury', 'start': 735, 'end': 1140, 'duration': 90},\n    {'name': 'Jeffrey', 'location': 'Marina District', 'start': 735, 'end': 1080, 'duration': 45},\n    {'name': 'James', 'location': 'Bayview', 'start': 450, 'end': 1200, 'duration': 90},\n    {'name': 'Anthony', 'location': 'Chinatown', 'start': 705, 'end': 810, 'duration': 75},\n    {'name': 'Timothy', 'location': 'Presidio', 'start': 750, 'end': 885, 'duration': 90},\n    {'name': 'Emily', 'location': 'Sunset District', 'start': 1170, 'end': 1290, 'duration': 120},\n]\n\ntravel_times = {\n    'Union Square': {\n        'Russian Hill': 13,\n        'Alamo Square': 15,\n        'Haight-Ashbury': 18,\n        'Marina District': 18,\n        'Bayview': 15,\n        'Chinatown': 7,\n        'Presidio': 24,\n        'Sunset District': 27\n    },\n    'Russian Hill': {\n        'Union Square': 10,\n        'Alamo Square': 15,\n        'Haight-Ashbury': 17,\n        'Marina District': 7,\n        'Bayview': 23,\n        'Chinatown': 9,\n        'Presidio': 14,\n        'Sunset District': 23\n    },\n    'Alamo Square': {\n        'Union Square': 14,\n        'Russian Hill': 13,\n        'Haight-Ashbury': 5,\n        'Marina District': 15,\n        'Bayview': 16,\n        'Chinatown': 15,\n        'Presidio': 17,\n        'Sunset District': 16\n    },\n    'Haight-Ashbury': {\n        'Union Square': 19,\n        'Russian Hill': 17,\n        'Alamo Square': 5,\n        'Marina District': 17,\n        'Bayview': 18,\n        'Chinatown': 19,\n        'Presidio': 15,\n        'Sunset District': 15\n    },\n    'Marina District': {\n        'Union Square': 16,\n        'Russian Hill': 8,\n        'Alamo Square': 15,\n        'Haight-Ashbury': 16,\n        'Bayview': 27,\n        'Chinatown': 15,\n        'Presidio': 10,\n        'Sunset District': 19\n    },\n    'Bayview': {\n        'Union Square': 18,\n        'Russian Hill': 23,\n        'Alamo Square': 16,\n        'Haight-Ashbury': 19,\n        'Marina District': 27,\n        'Chinatown': 19,\n        'Presidio': 32,\n        'Sunset District': 23\n    },\n    'Chinatown': {\n        'Union Square': 7,\n        'Russian Hill': 7,\n        'Alamo Square': 17,\n        'Haight-Ashbury': 19,\n        'Marina District': 12,\n        'Bayview': 20,\n        'Presidio': 19,\n        'Sunset District': 29\n    },\n    'Presidio': {\n        'Union Square': 22,\n        'Russian Hill': 14,\n        'Alamo Square': 19,\n        'Haight-Ashbury': 15,\n        'Marina District': 11,\n        'Bayview': 31,\n        'Chinatown': 21,\n        'Sunset District': 15\n    },\n    'Sunset District': {\n        'Union Square': 30,\n        'Russian Hill': 24,\n        'Alamo Square': 17,\n        'Haight-Ashbury': 15,\n        'Marina District': 21,\n        'Bayview': 22,\n        'Chinatown': 30,\n        'Presidio': 16\n    }\n}\n\ndef minutes_to_time(m):\n    hours = m // 60\n    minutes = m % 60\n    return f\"{hours}:{minutes:02d}\"\n\nmax_count = 0\nbest_itinerary = []\n\nfor perm in itertools.permutations(friends_data):\n    current_time = 540\n    current_location = 'Union Square'\n    itinerary = []\n    for friend in perm:\n        loc = friend['location']\n        if current_location not in travel_times or loc not in travel_times[current_location]:\n            break\n        travel = travel_times[current_location][loc]\n        arrival = current_time + travel\n        arrival = max(arrival, friend['start'])\n        if arrival >= friend['end']:\n            continue\n        end = arrival + friend['duration']\n        if end > friend['end']:\n            continue\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": loc,\n            \"person\": friend['name'],\n            \"start_time\": minutes_to_time(arrival),\n            \"end_time\": minutes_to_time(end)\n        })\n        current_time = end\n        current_location = loc\n    if len(itinerary) > max_count:\n        max_count = len(itinerary)\n        best_itinerary = itinerary\n    elif len(itinerary) == max_count and itinerary:\n        current_last = current_time\n        best_last = sum(int(t.split(':')[0])*60 + int(t.split(':')[1]) for entry in best_itinerary[-1:]) if best_itinerary else 0\n        if current_last < best_last or not best_itinerary:\n            best_itinerary = itinerary\n\nprint(json.dumps({\"itinerary\": best_itinerary}, indent=2))",
            "count": "meeting_planning_example_789"
        }
    ]
}