{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Michelle",
                        "start_time": "9:30",
                        "end_time": "9:45"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Robert",
                        "start_time": "9:53",
                        "end_time": "10:23"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "George",
                        "start_time": "10:40",
                        "end_time": "11:10"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "William",
                        "start_time": "18:30",
                        "end_time": "20:15"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Chinatown",
                        "person": "Michelle",
                        "start_time": "9:30",
                        "end_time": "9:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "George",
                        "start_time": "10:30",
                        "end_time": "11:00"
                    },
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Robert",
                        "start_time": "11:19",
                        "end_time": "11:49"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "William",
                        "start_time": "18:30",
                        "end_time": "20:15"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "SOLUTION:\n```python\nimport itertools\nimport json\n\nfriends_data = [\n    {\n        'name': 'Michelle',\n        'location': 'Chinatown',\n        'start': 8 * 60 + 15,\n        'end': 14 * 60 + 0,\n        'duration': 15\n    },\n    {\n        'name': 'Robert',\n        'location': 'Fisherman\\'s Wharf',\n        'start': 9 * 60 + 0,\n        'end': 13 * 60 + 45,\n        'duration': 30\n    },\n    {\n        'name': 'George',\n        'location': 'Presidio',\n        'start': 10 * 60 + 30,\n        'end': 18 * 60 + 45,\n        'duration': 30\n    },\n    {\n        'name': 'William',\n        'location': 'Russian Hill',\n        'start': 18 * 60 + 30,\n        'end': 20 * 60 + 45,\n        'duration': 105\n    }\n]\n\ntravel_times = {\n    'Sunset District': {\n        'Russian Hill': 24,\n        'Chinatown': 30,\n        'Presidio': 16,\n        'Fisherman\\'s Wharf': 29\n    },\n    'Russian Hill': {\n        'Sunset District': 23,\n        'Chinatown': 9,\n        'Presidio': 14,\n        'Fisherman\\'s Wharf': 7\n    },\n    'Chinatown': {\n        'Sunset District': 29,\n        'Russian Hill': 7,\n        'Presidio': 19,\n        'Fisherman\\'s Wharf': 8\n    },\n    'Presidio': {\n        'Sunset District': 15,\n        'Russian Hill': 14,\n        'Chinatown': 21,\n        'Fisherman\\'s Wharf': 19\n    },\n    'Fisherman\\'s Wharf': {\n        'Sunset District': 27,\n        'Russian Hill': 7,\n        'Chinatown': 12,\n        'Presidio': 17\n    }\n}\n\ndef time_to_str(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\nnon_william = [f for f in friends_data if f['name'] != 'William']\nwilliam = [f for f in friends_data if f['name'] == 'William'][0]\nbest_itinerary = None\nmax_met = 0\n\nfor perm in itertools.permutations(non_william):\n    candidate_order = list(perm) + [william]\n    current_location = 'Sunset District'\n    current_time = 9 * 60\n    itinerary = []\n    valid = True\n    \n    for friend in candidate_order:\n        travel_duration = travel_times[current_location].get(friend['location'])\n        if travel_duration is None:\n            valid = False\n            break\n        arrival_time = current_time + travel_duration\n        start_meeting = max(arrival_time, friend['start'])\n        end_meeting = start_meeting + friend['duration']\n        \n        if end_meeting > friend['end']:\n            valid = False\n            break\n        \n        itinerary.append({\n            'action': 'meet',\n            'location': friend['location'],\n            'person': friend['name'],\n            'start_time': time_to_str(start_meeting),\n            'end_time': time_to_str(end_meeting)\n        })\n        \n        current_time = end_meeting\n        current_location = friend['location']\n    \n    if valid and len(candidate_order) > max_met:\n        max_met = len(candidate_order)\n        best_itinerary = itinerary.copy()\n\nif best_itinerary is None:\n    for perm in itertools.permutations(non_william):\n        current_location = 'Sunset District'\n        current_time = 9 * 60\n        itinerary = []\n        valid = True\n        \n        for friend in perm:\n            travel_duration = travel_times[current_location].get(friend['location'])\n            if travel_duration is None:\n                valid = False\n                break\n            arrival_time = current_time + travel_duration\n            start_meeting = max(arrival_time, friend['start'])\n            end_meeting = start_meeting + friend['duration']\n            \n            if end_meeting > friend['end']:\n                valid = False\n                break\n            \n            itinerary.append({\n                'action': 'meet',\n                'location': friend['location'],\n                'person': friend['name'],\n                'start_time': time_to_str(start_meeting),\n                'end_time': time_to_str(end_meeting)\n            })\n            \n            current_time = end_meeting\n            current_location = friend['location']\n        \n        if valid and len(perm) > max_met:\n            max_met = len(perm)\n            best_itinerary = itinerary.copy()\n\nprint(json.dumps({\"itinerary\": best_itinerary}, indent=2))\n```",
            "count": "meeting_planning_example_322"
        }
    ]
}