[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nUnion Square to Presidio: 24.\nUnion Square to Alamo Square: 15.\nUnion Square to Marina District: 18.\nUnion Square to Financial District: 9.\nUnion Square to Nob Hill: 9.\nUnion Square to Sunset District: 27.\nUnion Square to Chinatown: 7.\nUnion Square to Russian Hill: 13.\nUnion Square to North Beach: 10.\nUnion Square to Haight-Ashbury: 18.\nPresidio to Union Square: 22.\nPresidio to Alamo Square: 19.\nPresidio to Marina District: 11.\nPresidio to Financial District: 23.\nPresidio to Nob Hill: 18.\nPresidio to Sunset District: 15.\nPresidio to Chinatown: 21.\nPresidio to Russian Hill: 14.\nPresidio to North Beach: 18.\nPresidio to Haight-Ashbury: 15.\nAlamo Square to Union Square: 14.\nAlamo Square to Presidio: 17.\nAlamo Square to Marina District: 15.\nAlamo Square to Financial District: 17.\nAlamo Square to Nob Hill: 11.\nAlamo Square to Sunset District: 16.\nAlamo Square to Chinatown: 15.\nAlamo Square to Russian Hill: 13.\nAlamo Square to North Beach: 15.\nAlamo Square to Haight-Ashbury: 5.\nMarina District to Union Square: 16.\nMarina District to Presidio: 10.\nMarina District to Alamo Square: 15.\nMarina District to Financial District: 17.\nMarina District to Nob Hill: 12.\nMarina District to Sunset District: 19.\nMarina District to Chinatown: 15.\nMarina District to Russian Hill: 8.\nMarina District to North Beach: 11.\nMarina District to Haight-Ashbury: 16.\nFinancial District to Union Square: 9.\nFinancial District to Presidio: 22.\nFinancial District to Alamo Square: 17.\nFinancial District to Marina District: 15.\nFinancial District to Nob Hill: 8.\nFinancial District to Sunset District: 30.\nFinancial District to Chinatown: 5.\nFinancial District to Russian Hill: 11.\nFinancial District to North Beach: 7.\nFinancial District to Haight-Ashbury: 19.\nNob Hill to Union Square: 7.\nNob Hill to Presidio: 17.\nNob Hill to Alamo Square: 11.\nNob Hill to Marina District: 11.\nNob Hill to Financial District: 9.\nNob Hill to Sunset District: 24.\nNob Hill to Chinatown: 6.\nNob Hill to Russian Hill: 5.\nNob Hill to North Beach: 8.\nNob Hill to Haight-Ashbury: 13.\nSunset District to Union Square: 30.\nSunset District to Presidio: 16.\nSunset District to Alamo Square: 17.\nSunset District to Marina District: 21.\nSunset District to Financial District: 30.\nSunset District to Nob Hill: 27.\nSunset District to Chinatown: 30.\nSunset District to Russian Hill: 24.\nSunset District to North Beach: 28.\nSunset District to Haight-Ashbury: 15.\nChinatown to Union Square: 7.\nChinatown to Presidio: 19.\nChinatown to Alamo Square: 17.\nChinatown to Marina District: 12.\nChinatown to Financial District: 5.\nChinatown to Nob Hill: 9.\nChinatown to Sunset District: 29.\nChinatown to Russian Hill: 7.\nChinatown to North Beach: 3.\nChinatown to Haight-Ashbury: 19.\nRussian Hill to Union Square: 10.\nRussian Hill to Presidio: 14.\nRussian Hill to Alamo Square: 15.\nRussian Hill to Marina District: 7.\nRussian Hill to Financial District: 11.\nRussian Hill to Nob Hill: 5.\nRussian Hill to Sunset District: 23.\nRussian Hill to Chinatown: 9.\nRussian Hill to North Beach: 5.\nRussian Hill to Haight-Ashbury: 17.\nNorth Beach to Union Square: 7.\nNorth Beach to Presidio: 17.\nNorth Beach to Alamo Square: 16.\nNorth Beach to Marina District: 9.\nNorth Beach to Financial District: 8.\nNorth Beach to Nob Hill: 7.\nNorth Beach to Sunset District: 27.\nNorth Beach to Chinatown: 6.\nNorth Beach to Russian Hill: 4.\nNorth Beach to Haight-Ashbury: 18.\nHaight-Ashbury to Union Square: 19.\nHaight-Ashbury to Presidio: 15.\nHaight-Ashbury to Alamo Square: 5.\nHaight-Ashbury to Marina District: 17.\nHaight-Ashbury to Financial District: 21.\nHaight-Ashbury to Nob Hill: 15.\nHaight-Ashbury to Sunset District: 15.\nHaight-Ashbury to Chinatown: 19.\nHaight-Ashbury to Russian Hill: 17.\nHaight-Ashbury to North Beach: 19.\n\nCONSTRAINTS: You arrive at Union Square at 9:00AM. Kimberly will be at Presidio from 3:30PM to 4:00PM. You'd like to meet Kimberly for a minimum of 15 minutes. Elizabeth will be at Alamo Square from 7:15PM to 8:15PM. You'd like to meet Elizabeth for a minimum of 15 minutes. Joshua will be at Marina District from 10:30AM to 2:15PM. You'd like to meet Joshua for a minimum of 45 minutes. Sandra will be at Financial District from 7:30PM to 8:15PM. You'd like to meet Sandra for a minimum of 45 minutes. Kenneth will be at Nob Hill from 12:45PM to 9:45PM. You'd like to meet Kenneth for a minimum of 30 minutes. Betty will be at Sunset District from 2:00PM to 7:00PM. You'd like to meet Betty for a minimum of 60 minutes. Deborah will be at Chinatown from 5:15PM to 8:30PM. You'd like to meet Deborah for a minimum of 15 minutes. Barbara will be at Russian Hill from 5:30PM to 9:15PM. You'd like to meet Barbara for a minimum of 120 minutes. Steven will be at North Beach from 5:45PM to 8:45PM. You'd like to meet Steven for a minimum of 90 minutes. Daniel will be at Haight-Ashbury from 6:30PM to 6:45PM. You'd like to meet Daniel for a minimum of 15 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "SOLUTION:\n```python\nimport json\n\ndef main():\n    # Define all locations\n    all_locations = [\n        'Union Square',\n        'Presidio',\n        'Alamo Square',\n        'Marina District',\n        'Financial District',\n        'Nob Hill',\n        'Sunset District',\n        'Chinatown',\n        'Russian Hill',\n        'North Beach',\n        'Haight-Ashbury'\n    ]\n    \n    # Map location to index for fast lookup\n    location_to_index = {loc: idx for idx, loc in enumerate(all_locations)}\n    \n    # Build the travel_times dictionary\n    travel_times = {\n        ('Union Square', 'Presidio'): 24,\n        ('Union Square', 'Alamo Square'): 15,\n        ('Union Square', 'Marina District'): 18,\n        ('Union Square', 'Financial District'): 9,\n        ('Union Square', 'Nob Hill'): 9,\n        ('Union Square', 'Sunset District'): 27,\n        ('Union Square', 'Chinatown'): 7,\n        ('Union Square', 'Russian Hill'): 13,\n        ('Union Square', 'North Beach'): 10,\n        ('Union Square', 'Haight-Ashbury'): 18,\n        ('Presidio', 'Union Square'): 22,\n        ('Presidio', 'Alamo Square'): 19,\n        ('Presidio', 'Marina District'): 11,\n        ('Presidio', 'Financial District'): 23,\n        ('Presidio', 'Nob Hill'): 18,\n        ('Presidio', 'Sunset District'): 15,\n        ('Presidio', 'Chinatown'): 21,\n        ('Presidio', 'Russian Hill'): 14,\n        ('Presidio', 'North Beach'): 18,\n        ('Presidio', 'Haight-Ashbury'): 15,\n        ('Alamo Square', 'Union Square'): 14,\n        ('Alamo Square', 'Presidio'): 17,\n        ('Alamo Square', 'Marina District'): 15,\n        ('Alamo Square', 'Financial District'): 17,\n        ('Alamo Square', 'Nob Hill'): 11,\n        ('Alamo Square', 'Sunset District'): 16,\n        ('Alamo Square', 'Chinatown'): 15,\n        ('Alamo Square', 'Russian Hill'): 13,\n        ('Alamo Square', 'North Beach'): 15,\n        ('Alamo Square', 'Haight-Ashbury'): 5,\n        ('Marina District', 'Union Square'): 16,\n        ('Marina District', 'Presidio'): 10,\n        ('Marina District', 'Alamo Square'): 15,\n        ('Marina District', 'Financial District'): 17,\n        ('Marina District', 'Nob Hill'): 12,\n        ('Marina District', 'Sunset District'): 19,\n        ('Marina District', 'Chinatown'): 15,\n        ('Marina District', 'Russian Hill'): 8,\n        ('Marina District', 'North Beach'): 11,\n        ('Marina District', 'Haight-Ashbury'): 16,\n        ('Financial District', 'Union Square'): 9,\n        ('Financial District', 'Presidio'): 22,\n        ('Financial District', 'Alamo Square'): 17,\n        ('Financial District', 'Marina District'): 15,\n        ('Financial District', 'Nob Hill'): 8,\n        ('Financial District', 'Sunset District'): 30,\n        ('Financial District', 'Chinatown'): 5,\n        ('Financial District', 'Russian Hill'): 11,\n        ('Financial District', 'North Beach'): 7,\n        ('Financial District', 'Haight-Ashbury'): 19,\n        ('Nob Hill', 'Union Square'): 7,\n        ('Nob Hill', 'Presidio'): 17,\n        ('Nob Hill', 'Alamo Square'): 11,\n        ('Nob Hill', 'Marina District'): 11,\n        ('Nob Hill', 'Financial District'): 9,\n        ('Nob Hill', 'Sunset District'): 24,\n        ('Nob Hill', 'Chinatown'): 6,\n        ('Nob Hill', 'Russian Hill'): 5,\n        ('Nob Hill', 'North Beach'): 8,\n        ('Nob Hill', 'Haight-Ashbury'): 13,\n        ('Sunset District', 'Union Square'): 30,\n        ('Sunset District', 'Presidio'): 16,\n        ('Sunset District', 'Alamo Square'): 17,\n        ('Sunset District', 'Marina District'): 21,\n        ('Sunset District', 'Financial District'): 30,\n        ('Sunset District', 'Nob Hill'): 27,\n        ('Sunset District', 'Chinatown'): 30,\n        ('Sunset District', 'Russian Hill'): 24,\n        ('Sunset District', 'North Beach'): 28,\n        ('Sunset District', 'Haight-Ashbury'): 15,\n        ('Chinatown', 'Union Square'): 7,\n        ('Chinatown', 'Presidio'): 19,\n        ('Chinatown', 'Alamo Square'): 17,\n        ('Chinatown', 'Marina District'): 12,\n        ('Chinatown', 'Financial District'): 5,\n        ('Chinatown', 'Nob Hill'): 9,\n        ('Chinatown', 'Sunset District'): 29,\n        ('Chinatown', 'Russian Hill'): 7,\n        ('Chinatown', 'North Beach'): 3,\n        ('Chinatown', 'Haight-Ashbury'): 19,\n        ('Russian Hill', 'Union Square'): 10,\n        ('Russian Hill', 'Presidio'): 14,\n        ('Russian Hill', 'Alamo Square'): 15,\n        ('Russian Hill', 'Marina District'): 7,\n        ('Russian Hill', 'Financial District'): 11,\n        ('Russian Hill', 'Nob Hill'): 5,\n        ('Russian Hill', 'Sunset District'): 23,\n        ('Russian Hill', 'Chinatown'): 9,\n        ('Russian Hill', 'North Beach'): 5,\n        ('Russian Hill', 'Haight-Ashbury'): 17,\n        ('North Beach', 'Union Square'): 7,\n        ('North Beach', 'Presidio'): 17,\n        ('North Beach', 'Alamo Square'): 16,\n        ('North Beach', 'Marina District'): 9,\n        ('North Beach', 'Financial District'): 8,\n        ('North Beach', 'Nob Hill'): 7,\n        ('North Beach', 'Sunset District'): 27,\n        ('North Beach', 'Chinatown'): 6,\n        ('North Beach', 'Russian Hill'): 4,\n        ('North Beach', 'Haight-Ashbury'): 18,\n        ('Haight-Ashbury', 'Union Square'): 19,\n        ('Haight-Ashbury', 'Presidio'): 15,\n        ('Haight-Ashbury', 'Alamo Square'): 5,\n        ('Haight-Ashbury', 'Marina District'): 17,\n        ('Haight-Ashbury', 'Financial District'): 21,\n        ('Haight-Ashbury', 'Nob Hill'): 15,\n        ('Haight-Ashbury', 'Sunset District'): 15,\n        ('Haight-Ashbury', 'Chinatown'): 19,\n        ('Haight-Ashbury', 'Russian Hill'): 17,\n        ('Haight-Ashbury', 'North Beach'): 19\n    }\n    \n    # Define friends with their constraints (times in minutes from midnight)\n    friends = [\n        {'name': 'Kimberly', 'location': 'Presidio', 'start': 15*60+30, 'end': 16*60, 'min_duration': 15},\n        {'name': 'Elizabeth', 'location': 'Alamo Square', 'start': 19*60+15, 'end': 20*60+15, 'min_duration': 15},\n        {'name': 'Joshua', 'location': 'Marina District', 'start': 10*60+30, 'end': 14*60+15, 'min_duration': 45},\n        {'name': 'Sandra', 'location': 'Financial District', 'start': 19*60+30, 'end': 20*60+15, 'min_duration': 45},\n        {'name': 'Kenneth', 'location': 'Nob Hill', 'start': 12*60+45, 'end': 21*60+45, 'min_duration': 30},\n        {'name': 'Betty', 'location': 'Sunset District', 'start': 14*60, 'end': 19*60, 'min_duration': 60},\n        {'name': 'Deborah', 'location': 'Chinatown', 'start': 17*60+15, 'end': 20*60+30, 'min_duration': 15},\n        {'name': 'Barbara', 'location': 'Russian Hill', 'start': 17*60+30, 'end': 21*60+15, 'min_duration': 120},\n        {'name': 'Steven', 'location': 'North Beach', 'start': 17*60+45, 'end': 20*60+45, 'min_duration': 90},\n        {'name': 'Daniel', 'location': 'Haight-Ashbury', 'start': 18*60+30, 'end': 18*60+45, 'min_duration': 15}\n    ]\n    \n    n = len(friends)  # 10 friends\n    num_masks = 1 << n\n    num_locations = len(all_locations)\n    INF = 10**9\n    \n    # dp[mask][loc_index] = minimal end time (time we finish meeting and are free to leave) at location with index loc_index, having scheduled friends in mask\n    dp = [[INF] * num_locations for _ in range(num_masks)]\n    # parent: (prev_mask, prev_loc_index, friend_index, start_time, end_time) for state (mask, loc_index)\n    parent = [[None] * num_locations for _ in range(num_masks)]\n    \n    # Initialize: start at Union Square at 9:00 (540 minutes)\n    start_loc_index = location_to_index['Union Square']\n    dp[0][start_loc_index] = 540  # 9:00 AM in minutes\n    \n    # Iterate over masks\n    for mask in range(num_masks):\n        for loc_idx in range(num_locations):\n            if dp[mask][loc_idx] == INF:\n                continue\n            current_time = dp[mask][loc_idx]\n            current_loc = all_locations[loc_idx]\n            # Try to schedule each unscheduled friend\n            for j, friend in enumerate(friends):\n                if mask & (1 << j):\n                    continue\n                # Get travel time from current_loc to friend's location\n                to_loc = friend['location']\n                key = (current_loc, to_loc)\n                if key not in travel_times:\n                    # Skip if no travel time (shouldn't happen)\n                    continue\n                travel = travel_times[key]\n                # Calculate arrival time at friend's location\n                arrival_time = current_time + travel\n                # The meeting can start at the later of arrival_time and friend's start time\n                start_time = max(arrival_time, friend['start'])\n                # Check if we can meet for the minimum duration\n                if start_time + friend['min_duration'] <= friend['end']:\n                    end_time = start_time + friend['min_duration']\n                    new_mask = mask | (1 << j)\n                    new_loc_idx = location_to_index[to_loc]\n                    # Update if we found a smaller end time for the new state\n                    if end_time < dp[new_mask][new_loc_idx]:\n                        dp[new_mask][new_loc_idx] = end_time\n                        parent[new_mask][new_loc_idx] = (mask, loc_idx, j, start_time, end_time)\n    \n    # Find the best state: maximum number of meetings, and if tie minimal end time\n    best_mask = 0\n    best_count = 0\n    best_end_time = INF\n    best_loc_idx = -1\n    for mask in range(num_masks):\n        for loc_idx in range(num_locations):\n            if dp[mask][loc_idx] < INF:\n                count = bin(mask).count(\"1\")\n                if count > best_count or (count == best_count and dp[mask][loc_idx] < best_end_time):\n                    best_count = count\n                    best_end_time = dp[mask][loc_idx]\n                    best_mask = mask\n                    best_loc_idx = loc_idx\n    \n    # Reconstruct the itinerary\n    itinerary = []\n    current_mask = best_mask\n    current_loc_idx = best_loc_idx\n    # Backtrack to get meetings in reverse order\n    while current_mask != 0:\n        if parent[current_mask][current_loc_idx] is None:\n            break\n        prev_mask, prev_loc_idx, j, start_time, end_time = parent[current_mask][current_loc_idx]\n        friend_j = friends[j]\n        # Convert times to string\n        def format_time(minutes):\n            h = minutes // 60\n            m = minutes % 60\n            return f\"{h}:{m:02d}\"\n        meeting = {\n            'action': 'meet',\n            'location': friend_j['location'],\n            'person': friend_j['name'],\n            'start_time': format_time(start_time),\n            'end_time': format_time(end_time)\n        }\n        itinerary.append(meeting)\n        current_mask = prev_mask\n        current_loc_idx = prev_loc_idx\n    \n    # Reverse to get chronological order\n    itinerary.reverse()\n    \n    # Output as JSON\n    result = {\n        \"itinerary\": itinerary\n    }\n    print(json.dumps(result))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]