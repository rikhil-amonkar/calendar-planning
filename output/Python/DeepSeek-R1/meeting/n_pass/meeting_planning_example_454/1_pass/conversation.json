[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nPresidio to Golden Gate Park: 12.\nPresidio to Bayview: 31.\nPresidio to Chinatown: 21.\nPresidio to North Beach: 18.\nPresidio to Mission District: 26.\nGolden Gate Park to Presidio: 11.\nGolden Gate Park to Bayview: 23.\nGolden Gate Park to Chinatown: 23.\nGolden Gate Park to North Beach: 24.\nGolden Gate Park to Mission District: 17.\nBayview to Presidio: 31.\nBayview to Golden Gate Park: 22.\nBayview to Chinatown: 18.\nBayview to North Beach: 21.\nBayview to Mission District: 13.\nChinatown to Presidio: 19.\nChinatown to Golden Gate Park: 23.\nChinatown to Bayview: 22.\nChinatown to North Beach: 3.\nChinatown to Mission District: 18.\nNorth Beach to Presidio: 17.\nNorth Beach to Golden Gate Park: 22.\nNorth Beach to Bayview: 22.\nNorth Beach to Chinatown: 6.\nNorth Beach to Mission District: 18.\nMission District to Presidio: 25.\nMission District to Golden Gate Park: 17.\nMission District to Bayview: 15.\nMission District to Chinatown: 16.\nMission District to North Beach: 17.\n\nCONSTRAINTS: You arrive at Presidio at 9:00AM. Jessica will be at Golden Gate Park from 1:45PM to 3:00PM. You'd like to meet Jessica for a minimum of 30 minutes. Ashley will be at Bayview from 5:15PM to 8:00PM. You'd like to meet Ashley for a minimum of 105 minutes. Ronald will be at Chinatown from 7:15AM to 2:45PM. You'd like to meet Ronald for a minimum of 90 minutes. William will be at North Beach from 1:15PM to 8:15PM. You'd like to meet William for a minimum of 15 minutes. Daniel will be at Mission District from 7:00AM to 11:15AM. You'd like to meet Daniel for a minimum of 105 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport itertools\nimport json\n\ndef main():\n    # Convert time string to minutes since midnight\n    def time_to_min(time_str):\n        parts = time_str.split(':')\n        hour = int(parts[0])\n        minute = int(parts[1]) if len(parts) > 1 else 0\n        return hour * 60 + minute\n\n    # Convert minutes back to \"H:MM\" format\n    def min_to_time(minutes):\n        h = minutes // 60\n        m = minutes % 60\n        return f\"{h}:{m:02d}\"\n\n    # Build travel time matrix\n    travel_times = {\n        \"Presidio\": {\n            \"Golden Gate Park\": 12,\n            \"Bayview\": 31,\n            \"Chinatown\": 21,\n            \"North Beach\": 18,\n            \"Mission District\": 26\n        },\n        \"Golden Gate Park\": {\n            \"Presidio\": 11,\n            \"Bayview\": 23,\n            \"Chinatown\": 23,\n            \"North Beach\": 24,\n            \"Mission District\": 17\n        },\n        \"Bayview\": {\n            \"Presidio\": 31,\n            \"Golden Gate Park\": 22,\n            \"Chinatown\": 18,\n            \"North Beach\": 21,\n            \"Mission District\": 13\n        },\n        \"Chinatown\": {\n            \"Presidio\": 19,\n            \"Golden Gate Park\": 23,\n            \"Bayview\": 22,\n            \"North Beach\": 3,\n            \"Mission District\": 18\n        },\n        \"North Beach\": {\n            \"Presidio\": 17,\n            \"Golden Gate Park\": 22,\n            \"Bayview\": 22,\n            \"Chinatown\": 6,\n            \"Mission District\": 17\n        },\n        \"Mission District\": {\n            \"Presidio\": 25,\n            \"Golden Gate Park\": 17,\n            \"Bayview\": 15,\n            \"Chinatown\": 16,\n            \"North Beach\": 17\n        }\n    }\n\n    # Define friends with their constraints (converted to minutes)\n    friends = [\n        {\"name\": \"Jessica\", \"location\": \"Golden Gate Park\", \"start_avail\": time_to_min(\"13:45\"), \"end_avail\": time_to_min(\"15:00\"), \"min_duration\": 30},\n        {\"name\": \"Ashley\", \"location\": \"Bayview\", \"start_avail\": time_to_min(\"17:15\"), \"end_avail\": time_to_min(\"20:00\"), \"min_duration\": 105},\n        {\"name\": \"Ronald\", \"location\": \"Chinatown\", \"start_avail\": time_to_min(\"7:15\"), \"end_avail\": time_to_min(\"14:45\"), \"min_duration\": 90},\n        {\"name\": \"William\", \"location\": \"North Beach\", \"start_avail\": time_to_min(\"13:15\"), \"end_avail\": time_to_min(\"20:15\"), \"min_duration\": 15},\n        {\"name\": \"Daniel\", \"location\": \"Mission District\", \"start_avail\": time_to_min(\"7:00\"), \"end_avail\": time_to_min(\"11:15\"), \"min_duration\": 105}\n    ]\n\n    # Start time at Presidio: 9:00 AM\n    start_time = time_to_min(\"9:00\")\n    start_location = \"Presidio\"\n    \n    # Try to meet as many friends as possible, starting from 5 down to 1\n    best_schedule = None\n    max_count = 0\n    found = False\n    n = len(friends)\n    \n    # We'll iterate from largest subset (5) down to 1\n    for size in range(n, 0, -1):\n        for subset in itertools.combinations(friends, size):\n            for perm in itertools.permutations(subset):\n                current_time = start_time\n                current_loc = start_location\n                schedule = []\n                feasible = True\n                \n                for friend in perm:\n                    # Get travel time to friend's location\n                    travel = travel_times[current_loc][friend[\"location\"]]\n                    current_time += travel\n                    \n                    # Determine meeting start time (max of arrival and friend's availability start)\n                    meeting_start = max(current_time, friend[\"start_avail\"])\n                    # If we arrive after the friend's availability ends, not feasible\n                    if meeting_start > friend[\"end_avail\"]:\n                        feasible = False\n                        break\n                    \n                    meeting_end = meeting_start + friend[\"min_duration\"]\n                    # If meeting duration exceeds friend's availability end, not feasible\n                    if meeting_end > friend[\"end_avail\"]:\n                        feasible = False\n                        break\n                    \n                    # Record meeting details\n                    schedule.append({\n                        \"friend\": friend,\n                        \"start\": meeting_start,\n                        \"end\": meeting_end\n                    })\n                    \n                    # Update current time and location after meeting\n                    current_time = meeting_end\n                    current_loc = friend[\"location\"]\n                \n                if feasible:\n                    best_schedule = schedule\n                    max_count = size\n                    found = True\n                    break  # break out of permutation loop\n            if found:\n                break  # break out of subset loop\n        if found:\n            break  # break out of size loop\n    \n    # Prepare the itinerary for output\n    itinerary = []\n    if best_schedule:\n        for meeting in best_schedule:\n            friend = meeting[\"friend\"]\n            itinerary.append({\n                \"action\": \"meet\",\n                \"location\": friend[\"location\"],\n                \"person\": friend[\"name\"],\n                \"start_time\": min_to_time(meeting[\"start\"]),\n                \"end_time\": min_to_time(meeting[\"end\"])\n            })\n    \n    # Output as JSON\n    result = {\"itinerary\": itinerary}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]