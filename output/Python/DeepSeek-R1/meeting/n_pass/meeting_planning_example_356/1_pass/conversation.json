[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nBayview to North Beach: 21.\nBayview to Presidio: 31.\nBayview to Haight-Ashbury: 19.\nBayview to Union Square: 17.\nNorth Beach to Bayview: 22.\nNorth Beach to Presidio: 17.\nNorth Beach to Haight-Ashbury: 18.\nNorth Beach to Union Square: 7.\nPresidio to Bayview: 31.\nPresidio to North Beach: 18.\nPresidio to Haight-Ashbury: 15.\nPresidio to Union Square: 22.\nHaight-Ashbury to Bayview: 18.\nHaight-Ashbury to North Beach: 19.\nHaight-Ashbury to Presidio: 15.\nHaight-Ashbury to Union Square: 17.\nUnion Square to Bayview: 15.\nUnion Square to North Beach: 10.\nUnion Square to Presidio: 24.\nUnion Square to Haight-Ashbury: 18.\n\nCONSTRAINTS: You arrive at Bayview at 9:00AM. Barbara will be at North Beach from 1:45PM to 8:15PM. You'd like to meet Barbara for a minimum of 60 minutes. Margaret will be at Presidio from 10:15AM to 3:15PM. You'd like to meet Margaret for a minimum of 30 minutes. Kevin will be at Haight-Ashbury from 8:00PM to 8:45PM. You'd like to meet Kevin for a minimum of 30 minutes. Kimberly will be at Union Square from 7:45AM to 4:45PM. You'd like to meet Kimberly for a minimum of 30 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport itertools\nimport json\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\ndef main():\n    travel_times = {\n        'Bayview': {'North Beach': 21, 'Presidio': 31, 'Haight-Ashbury': 19, 'Union Square': 17},\n        'North Beach': {'Bayview': 22, 'Presidio': 17, 'Haight-Ashbury': 18, 'Union Square': 7},\n        'Presidio': {'Bayview': 31, 'North Beach': 18, 'Haight-Ashbury': 15, 'Union Square': 22},\n        'Haight-Ashbury': {'Bayview': 18, 'North Beach': 19, 'Presidio': 15, 'Union Square': 17},\n        'Union Square': {'Bayview': 15, 'North Beach': 10, 'Presidio': 24, 'Haight-Ashbury': 18}\n    }\n    \n    friends = [\n        {'name': 'Barbara', 'location': 'North Beach', 'start_avail': 13*60+45, 'end_avail': 20*60+15, 'min_duration': 60},\n        {'name': 'Margaret', 'location': 'Presidio', 'start_avail': 10*60+15, 'end_avail': 15*60+15, 'min_duration': 30},\n        {'name': 'Kevin', 'location': 'Haight-Ashbury', 'start_avail': 20*60, 'end_avail': 20*60+45, 'min_duration': 30},\n        {'name': 'Kimberly', 'location': 'Union Square', 'start_avail': 7*60+45, 'end_avail': 16*60+45, 'min_duration': 30}\n    ]\n    \n    start_time = 9*60\n    start_location = 'Bayview'\n    best_count = 0\n    best_itinerary = None\n    \n    for perm in itertools.permutations(friends):\n        current_time = start_time\n        current_loc = start_location\n        itinerary = []\n        count = 0\n        valid = True\n        for friend in perm:\n            travel = travel_times[current_loc][friend['location']]\n            current_time += travel\n            start_meeting = max(current_time, friend['start_avail'])\n            end_meeting = start_meeting + friend['min_duration']\n            if end_meeting > friend['end_avail']:\n                break\n            itinerary.append({\n                'action': 'meet',\n                'location': friend['location'],\n                'person': friend['name'],\n                'start_time': start_meeting,\n                'end_time': end_meeting\n            })\n            count += 1\n            current_time = end_meeting\n            current_loc = friend['location']\n            if count == 4:\n                best_itinerary = itinerary\n                best_count = count\n                break\n        if best_count == 4:\n            break\n        if count > best_count:\n            best_count = count\n            best_itinerary = itinerary\n    \n    if best_itinerary is None:\n        best_itinerary = []\n    \n    for event in best_itinerary:\n        event['start_time'] = minutes_to_time(event['start_time'])\n        event['end_time'] = minutes_to_time(event['end_time'])\n    \n    result = {'itinerary': best_itinerary}\n    print(json.dumps(result))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]