[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nEmbarcadero to Presidio: 20.\nEmbarcadero to Richmond District: 21.\nEmbarcadero to Fisherman's Wharf: 6.\nPresidio to Embarcadero: 20.\nPresidio to Richmond District: 7.\nPresidio to Fisherman's Wharf: 19.\nRichmond District to Embarcadero: 19.\nRichmond District to Presidio: 7.\nRichmond District to Fisherman's Wharf: 18.\nFisherman's Wharf to Embarcadero: 8.\nFisherman's Wharf to Presidio: 17.\nFisherman's Wharf to Richmond District: 18.\n\nCONSTRAINTS: You arrive at Embarcadero at 9:00AM. Betty will be at Presidio from 10:15AM to 9:30PM. You'd like to meet Betty for a minimum of 45 minutes. David will be at Richmond District from 1:00PM to 8:15PM. You'd like to meet David for a minimum of 90 minutes. Barbara will be at Fisherman's Wharf from 9:15AM to 8:15PM. You'd like to meet Barbara for a minimum of 120 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "SOLUTION:\n```python\nimport json\nfrom itertools import permutations\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    minutes_remain = minutes % 60\n    return f\"{hours}:{minutes_remain:02d}\"\n\ndef try_schedule(permutation, start_location, start_time, travel_times):\n    current_location = start_location\n    current_time = start_time\n    schedule = []\n    for friend in permutation:\n        travel_time = travel_times[current_location][friend['location']]\n        arrival = current_time + travel_time\n        meeting_start = max(arrival, friend['start_available'])\n        if meeting_start > friend['end_available'] - friend['min_duration']:\n            return None\n        meeting_end = meeting_start + friend['min_duration']\n        schedule.append({\n            'person': friend['name'],\n            'location': friend['location'],\n            'start_time': meeting_start,\n            'end_time': meeting_end\n        })\n        current_location = friend['location']\n        current_time = meeting_end\n    return schedule\n\ndef main():\n    travel_times = {\n        \"Embarcadero\": {\"Presidio\": 20, \"Richmond District\": 21, \"Fisherman's Wharf\": 6},\n        \"Presidio\": {\"Embarcadero\": 20, \"Richmond District\": 7, \"Fisherman's Wharf\": 17},\n        \"Richmond District\": {\"Embarcadero\": 19, \"Presidio\": 7, \"Fisherman's Wharf\": 18},\n        \"Fisherman's Wharf\": {\"Embarcadero\": 8, \"Presidio\": 17, \"Richmond District\": 18}\n    }\n    \n    friends = [\n        {'name': 'Betty', 'location': 'Presidio', 'start_available': 615, 'end_available': 1290, 'min_duration': 45},\n        {'name': 'David', 'location': 'Richmond District', 'start_available': 780, 'end_available': 1215, 'min_duration': 90},\n        {'name': 'Barbara', 'location': \"Fisherman's Wharf\", 'start_available': 555, 'end_available': 1215, 'min_duration': 120}\n    ]\n    \n    start_location = \"Embarcadero\"\n    start_time = 540\n    \n    best_schedule = None\n    \n    for perm in permutations(friends):\n        candidate = try_schedule(perm, start_location, start_time, travel_times)\n        if candidate is not None:\n            best_schedule = candidate\n            break\n    \n    if best_schedule is None:\n        for perm in permutations(friends, 2):\n            candidate = try_schedule(perm, start_location, start_time, travel_times)\n            if candidate is not None:\n                best_schedule = candidate\n                break\n    \n    if best_schedule is None:\n        for friend in friends:\n            candidate = try_schedule([friend], start_location, start_time, travel_times)\n            if candidate is not None:\n                best_schedule = candidate\n                break\n    \n    itinerary = []\n    for event in best_schedule:\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": event['location'],\n            \"person\": event['person'],\n            \"start_time\": minutes_to_time(event['start_time']),\n            \"end_time\": minutes_to_time(event['end_time'])\n        })\n    \n    result = {\"itinerary\": itinerary}\n    print(json.dumps(result))\n\nif __name__ == '__main__':\n    main()\n```"
    }
]