[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nNob Hill to Embarcadero: 9.\nNob Hill to The Castro: 17.\nNob Hill to Haight-Ashbury: 13.\nNob Hill to Union Square: 7.\nNob Hill to North Beach: 8.\nNob Hill to Pacific Heights: 8.\nNob Hill to Chinatown: 6.\nNob Hill to Golden Gate Park: 17.\nNob Hill to Marina District: 11.\nNob Hill to Russian Hill: 5.\nEmbarcadero to Nob Hill: 10.\nEmbarcadero to The Castro: 25.\nEmbarcadero to Haight-Ashbury: 21.\nEmbarcadero to Union Square: 10.\nEmbarcadero to North Beach: 5.\nEmbarcadero to Pacific Heights: 11.\nEmbarcadero to Chinatown: 7.\nEmbarcadero to Golden Gate Park: 25.\nEmbarcadero to Marina District: 12.\nEmbarcadero to Russian Hill: 8.\nThe Castro to Nob Hill: 16.\nThe Castro to Embarcadero: 22.\nThe Castro to Haight-Ashbury: 6.\nThe Castro to Union Square: 19.\nThe Castro to North Beach: 20.\nThe Castro to Pacific Heights: 16.\nThe Castro to Chinatown: 22.\nThe Castro to Golden Gate Park: 11.\nThe Castro to Marina District: 21.\nThe Castro to Russian Hill: 18.\nHaight-Ashbury to Nob Hill: 15.\nHaight-Ashbury to Embarcadero: 20.\nHaight-Ashbury to The Castro: 6.\nHaight-Ashbury to Union Square: 19.\nHaight-Ashbury to North Beach: 19.\nHaight-Ashbury to Pacific Heights: 12.\nHaight-Ashbury to Chinatown: 19.\nHaight-Ashbury to Golden Gate Park: 7.\nHaight-Ashbury to Marina District: 17.\nHaight-Ashbury to Russian Hill: 17.\nUnion Square to Nob Hill: 9.\nUnion Square to Embarcadero: 11.\nUnion Square to The Castro: 17.\nUnion Square to Haight-Ashbury: 18.\nUnion Square to North Beach: 10.\nUnion Square to Pacific Heights: 15.\nUnion Square to Chinatown: 7.\nUnion Square to Golden Gate Park: 22.\nUnion Square to Marina District: 18.\nUnion Square to Russian Hill: 13.\nNorth Beach to Nob Hill: 7.\nNorth Beach to Embarcadero: 6.\nNorth Beach to The Castro: 23.\nNorth Beach to Haight-Ashbury: 18.\nNorth Beach to Union Square: 7.\nNorth Beach to Pacific Heights: 8.\nNorth Beach to Chinatown: 6.\nNorth Beach to Golden Gate Park: 22.\nNorth Beach to Marina District: 9.\nNorth Beach to Russian Hill: 4.\nPacific Heights to Nob Hill: 8.\nPacific Heights to Embarcadero: 10.\nPacific Heights to The Castro: 16.\nPacific Heights to Haight-Ashbury: 11.\nPacific Heights to Union Square: 12.\nPacific Heights to North Beach: 9.\nPacific Heights to Chinatown: 11.\nPacific Heights to Golden Gate Park: 15.\nPacific Heights to Marina District: 6.\nPacific Heights to Russian Hill: 7.\nChinatown to Nob Hill: 9.\nChinatown to Embarcadero: 5.\nChinatown to The Castro: 22.\nChinatown to Haight-Ashbury: 19.\nChinatown to Union Square: 7.\nChinatown to North Beach: 3.\nChinatown to Pacific Heights: 10.\nChinatown to Golden Gate Park: 23.\nChinatown to Marina District: 12.\nChinatown to Russian Hill: 7.\nGolden Gate Park to Nob Hill: 20.\nGolden Gate Park to Embarcadero: 25.\nGolden Gate Park to The Castro: 13.\nGolden Gate Park to Haight-Ashbury: 7.\nGolden Gate Park to Union Square: 22.\nGolden Gate Park to North Beach: 23.\nGolden Gate Park to Pacific Heights: 16.\nGolden Gate Park to Chinatown: 23.\nGolden Gate Park to Marina District: 16.\nGolden Gate Park to Russian Hill: 19.\nMarina District to Nob Hill: 12.\nMarina District to Embarcadero: 14.\nMarina District to The Castro: 22.\nMarina District to Haight-Ashbury: 16.\nMarina District to Union Square: 16.\nMarina District to North Beach: 11.\nMarina District to Pacific Heights: 7.\nMarina District to Chinatown: 15.\nMarina District to Golden Gate Park: 18.\nMarina District to Russian Hill: 8.\nRussian Hill to Nob Hill: 5.\nRussian Hill to Embarcadero: 8.\nRussian Hill to The Castro: 21.\nRussian Hill to Haight-Ashbury: 17.\nRussian Hill to Union Square: 10.\nRussian Hill to North Beach: 5.\nRussian Hill to Pacific Heights: 7.\nRussian Hill to Chinatown: 9.\nRussian Hill to Golden Gate Park: 21.\nRussian Hill to Marina District: 7.\n\nCONSTRAINTS: You arrive at Nob Hill at 9:00AM. Mary will be at Embarcadero from 8:00PM to 9:15PM. You'd like to meet Mary for a minimum of 75 minutes. Kenneth will be at The Castro from 11:15AM to 7:15PM. You'd like to meet Kenneth for a minimum of 30 minutes. Joseph will be at Haight-Ashbury from 8:00PM to 10:00PM. You'd like to meet Joseph for a minimum of 120 minutes. Sarah will be at Union Square from 11:45AM to 2:30PM. You'd like to meet Sarah for a minimum of 90 minutes. Thomas will be at North Beach from 7:15PM to 7:45PM. You'd like to meet Thomas for a minimum of 15 minutes. Daniel will be at Pacific Heights from 1:45PM to 8:30PM. You'd like to meet Daniel for a minimum of 15 minutes. Richard will be at Chinatown from 8:00AM to 6:45PM. You'd like to meet Richard for a minimum of 30 minutes. Mark will be at Golden Gate Park from 5:30PM to 9:30PM. You'd like to meet Mark for a minimum of 120 minutes. David will be at Marina District from 8:00PM to 9:00PM. You'd like to meet David for a minimum of 60 minutes. Karen will be at Russian Hill from 1:15PM to 6:30PM. You'd like to meet Karen for a minimum of 120 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\n\ndef min_to_time(m):\n    hour = m // 60\n    minute = m % 60\n    return f\"{hour}:{minute:02d}\"\n\ndef main():\n    travel_dict = {\n        \"Nob Hill\": {\n            \"Embarcadero\": 9,\n            \"The Castro\": 17,\n            \"Haight-Ashbury\": 13,\n            \"Union Square\": 7,\n            \"North Beach\": 8,\n            \"Pacific Heights\": 8,\n            \"Chinatown\": 6,\n            \"Golden Gate Park\": 17,\n            \"Marina District\": 11,\n            \"Russian Hill\": 5\n        },\n        \"Embarcadero\": {\n            \"Nob Hill\": 10,\n            \"The Castro\": 25,\n            \"Haight-Ashbury\": 21,\n            \"Union Square\": 10,\n            \"North Beach\": 5,\n            \"Pacific Heights\": 11,\n            \"Chinatown\": 7,\n            \"Golden Gate Park\": 25,\n            \"Marina District\": 12,\n            \"Russian Hill\": 8\n        },\n        \"The Castro\": {\n            \"Nob Hill\": 16,\n            \"Embarcadero\": 22,\n            \"Haight-Ashbury\": 6,\n            \"Union Square\": 19,\n            \"North Beach\": 20,\n            \"Pacific Heights\": 16,\n            \"Chinatown\": 22,\n            \"Golden Gate Park\": 11,\n            \"Marina District\": 21,\n            \"Russian Hill\": 18\n        },\n        \"Haight-Ashbury\": {\n            \"Nob Hill\": 15,\n            \"Embarcadero\": 20,\n            \"The Castro\": 6,\n            \"Union Square\": 19,\n            \"North Beach\": 19,\n            \"Pacific Heights\": 12,\n            \"Chinatown\": 19,\n            \"Golden Gate Park\": 7,\n            \"Marina District\": 17,\n            \"Russian Hill\": 17\n        },\n        \"Union Square\": {\n            \"Nob Hill\": 9,\n            \"Embarcadero\": 11,\n            \"The Castro\": 17,\n            \"Haight-Ashbury\": 18,\n            \"North Beach\": 10,\n            \"Pacific Heights\": 15,\n            \"Chinatown\": 7,\n            \"Golden Gate Park\": 22,\n            \"Marina District\": 18,\n            \"Russian Hill\": 13\n        },\n        \"North Beach\": {\n            \"Nob Hill\": 7,\n            \"Embarcadero\": 6,\n            \"The Castro\": 23,\n            \"Haight-Ashbury\": 18,\n            \"Union Square\": 7,\n            \"Pacific Heights\": 8,\n            \"Chinatown\": 6,\n            \"Golden Gate Park\": 22,\n            \"Marina District\": 9,\n            \"Russian Hill\": 4\n        },\n        \"Pacific Heights\": {\n            \"Nob Hill\": 8,\n            \"Embarcadero\": 10,\n            \"The Castro\": 16,\n            \"Haight-Ashbury\": 11,\n            \"Union Square\": 12,\n            \"North Beach\": 9,\n            \"Chinatown\": 11,\n            \"Golden Gate Park\": 15,\n            \"Marina District\": 6,\n            \"Russian Hill\": 7\n        },\n        \"Chinatown\": {\n            \"Nob Hill\": 9,\n            \"Embarcadero\": 5,\n            \"The Castro\": 22,\n            \"Haight-Ashbury\": 19,\n            \"Union Square\": 7,\n            \"North Beach\": 3,\n            \"Pacific Heights\": 10,\n            \"Golden Gate Park\": 23,\n            \"Marina District\": 12,\n            \"Russian Hill\": 7\n        },\n        \"Golden Gate Park\": {\n            \"Nob Hill\": 20,\n            \"Embarcadero\": 25,\n            \"The Castro\": 13,\n            \"Haight-Ashbury\": 7,\n            \"Union Square\": 22,\n            \"North Beach\": 23,\n            \"Pacific Heights\": 16,\n            \"Chinatown\": 23,\n            \"Marina District\": 16,\n            \"Russian Hill\": 19\n        },\n        \"Marina District\": {\n            \"Nob Hill\": 12,\n            \"Embarcadero\": 14,\n            \"The Castro\": 22,\n            \"Haight-Ashbury\": 16,\n            \"Union Square\": 16,\n            \"North Beach\": 11,\n            \"Pacific Heights\": 7,\n            \"Chinatown\": 15,\n            \"Golden Gate Park\": 18,\n            \"Russian Hill\": 8\n        },\n        \"Russian Hill\": {\n            \"Nob Hill\": 5,\n            \"Embarcadero\": 8,\n            \"The Castro\": 21,\n            \"Haight-Ashbury\": 17,\n            \"Union Square\": 10,\n            \"North Beach\": 5,\n            \"Pacific Heights\": 7,\n            \"Chinatown\": 9,\n            \"Golden Gate Park\": 21,\n            \"Marina District\": 7\n        }\n    }\n\n    locations = [\n        \"Nob Hill\",\n        \"Embarcadero\",\n        \"The Castro\",\n        \"Haight-Ashbury\",\n        \"Union Square\",\n        \"North Beach\",\n        \"Pacific Heights\",\n        \"Chinatown\",\n        \"Golden Gate Park\",\n        \"Marina District\",\n        \"Russian Hill\"\n    ]\n    location_to_index = {loc: idx for idx, loc in enumerate(locations)}\n\n    friends = [\n        {\"name\": \"Mary\", \"location\": \"Embarcadero\", \"start_avail\": 20*60, \"end_avail\": 21*60+15, \"min_dur\": 75},\n        {\"name\": \"Kenneth\", \"location\": \"The Castro\", \"start_avail\": 11*60+15, \"end_avail\": 19*60+15, \"min_dur\": 30},\n        {\"name\": \"Joseph\", \"location\": \"Haight-Ashbury\", \"start_avail\": 20*60, \"end_avail\": 22*60, \"min_dur\": 120},\n        {\"name\": \"Sarah\", \"location\": \"Union Square\", \"start_avail\": 11*60+45, \"end_avail\": 14*60+30, \"min_dur\": 90},\n        {\"name\": \"Thomas\", \"location\": \"North Beach\", \"start_avail\": 19*60+15, \"end_avail\": 19*60+45, \"min_dur\": 15},\n        {\"name\": \"Daniel\", \"location\": \"Pacific Heights\", \"start_avail\": 13*60+45, \"end_avail\": 20*60+30, \"min_dur\": 15},\n        {\"name\": \"Richard\", \"location\": \"Chinatown\", \"start_avail\": 8*60, \"end_avail\": 18*60+45, \"min_dur\": 30},\n        {\"name\": \"Mark\", \"location\": \"Golden Gate Park\", \"start_avail\": 17*60+30, \"end_avail\": 21*60+30, \"min_dur\": 120},\n        {\"name\": \"David\", \"location\": \"Marina District\", \"start_avail\": 20*60, \"end_avail\": 21*60, \"min_dur\": 60},\n        {\"name\": \"Karen\", \"location\": \"Russian Hill\", \"start_avail\": 13*60+15, \"end_avail\": 18*60+30, \"min_dur\": 120}\n    ]\n\n    n_locations = len(locations)\n    n_friends = len(friends)\n    BIG = 10**9\n\n    travel_matrix = [[0] * n_locations for _ in range(n_locations)]\n    for i in range(n_locations):\n        for j in range(n_locations):\n            if i == j:\n                travel_matrix[i][j] = 0\n            else:\n                travel_matrix[i][j] = travel_dict[locations[i]][locations[j]]\n\n    dp = [[BIG] * n_locations for _ in range(1 << n_friends)]\n    parent = [[None] * n_locations for _ in range(1 << n_friends)]\n\n    start_time = 9 * 60\n    start_loc = location_to_index[\"Nob Hill\"]\n    dp[0][start_loc] = start_time\n\n    for mask in range(1 << n_friends):\n        for loc_idx in range(n_locations):\n            if dp[mask][loc_idx] >= BIG:\n                continue\n            for friend_idx in range(n_friends):\n                if mask & (1 << friend_idx):\n                    continue\n                friend = friends[friend_idx]\n                to_loc = location_to_index[friend[\"location\"]]\n                travel_time = travel_matrix[loc_idx][to_loc]\n                current_time = dp[mask][loc_idx]\n                arrival_time = current_time + travel_time\n                start_meeting = max(arrival_time, friend[\"start_avail\"])\n                end_meeting = start_meeting + friend[\"min_dur\"]\n                if end_meeting > friend[\"end_avail\"]:\n                    continue\n                new_mask = mask | (1 << friend_idx)\n                if end_meeting < dp[new_mask][to_loc]:\n                    dp[new_mask][to_loc] = end_meeting\n                    parent[new_mask][to_loc] = (mask, loc_idx, friend_idx, start_meeting, end_meeting)\n\n    best_mask = None\n    best_loc = None\n    max_count = -1\n    for mask in range(1 << n_friends):\n        count = bin(mask).count(\"1\")\n        for loc in range(n_locations):\n            if dp[mask][loc] < BIG:\n                if count > max_count:\n                    max_count = count\n                    best_mask = mask\n                    best_loc = loc\n\n    meetings = []\n    current_mask = best_mask\n    current_loc = best_loc\n    while current_mask != 0:\n        if parent[current_mask][current_loc] is None:\n            break\n        prev_mask, prev_loc, friend_idx, start_meeting, end_meeting = parent[current_mask][current_loc]\n        friend = friends[friend_idx]\n        meetings.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"person\": friend[\"name\"],\n            \"start_time\": min_to_time(start_meeting),\n            \"end_time\": min_to_time(end_meeting)\n        })\n        current_mask = prev_mask\n        current_loc = prev_loc\n\n    meetings.reverse()\n    result = {\"itinerary\": meetings}\n    print(json.dumps(result))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]