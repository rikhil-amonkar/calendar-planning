[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nPresidio to Richmond District: 7.\nPresidio to North Beach: 18.\nPresidio to Financial District: 23.\nPresidio to Golden Gate Park: 12.\nPresidio to Union Square: 22.\nRichmond District to Presidio: 7.\nRichmond District to North Beach: 17.\nRichmond District to Financial District: 22.\nRichmond District to Golden Gate Park: 9.\nRichmond District to Union Square: 21.\nNorth Beach to Presidio: 17.\nNorth Beach to Richmond District: 18.\nNorth Beach to Financial District: 8.\nNorth Beach to Golden Gate Park: 22.\nNorth Beach to Union Square: 7.\nFinancial District to Presidio: 22.\nFinancial District to Richmond District: 21.\nFinancial District to North Beach: 7.\nFinancial District to Golden Gate Park: 23.\nFinancial District to Union Square: 9.\nGolden Gate Park to Presidio: 11.\nGolden Gate Park to Richmond District: 7.\nGolden Gate Park to North Beach: 24.\nGolden Gate Park to Financial District: 26.\nGolden Gate Park to Union Square: 22.\nUnion Square to Presidio: 24.\nUnion Square to Richmond District: 20.\nUnion Square to North Beach: 10.\nUnion Square to Financial District: 9.\nUnion Square to Golden Gate Park: 22.\n\nCONSTRAINTS: You arrive at Presidio at 9:00AM. Jason will be at Richmond District from 1:00PM to 8:45PM. You'd like to meet Jason for a minimum of 90 minutes. Melissa will be at North Beach from 6:45PM to 8:15PM. You'd like to meet Melissa for a minimum of 45 minutes. Brian will be at Financial District from 9:45AM to 9:45PM. You'd like to meet Brian for a minimum of 15 minutes. Elizabeth will be at Golden Gate Park from 8:45AM to 9:30PM. You'd like to meet Elizabeth for a minimum of 105 minutes. Laura will be at Union Square from 2:15PM to 7:30PM. You'd like to meet Laura for a minimum of 75 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport itertools\nimport json\nfrom collections import namedtuple\n\ndef main():\n    travel_matrix = {\n        'Presidio': {\n            'Richmond District': 7,\n            'North Beach': 18,\n            'Financial District': 23,\n            'Golden Gate Park': 12,\n            'Union Square': 22\n        },\n        'Richmond District': {\n            'Presidio': 7,\n            'North Beach': 17,\n            'Financial District': 22,\n            'Golden Gate Park': 9,\n            'Union Square': 21\n        },\n        'North Beach': {\n            'Presidio': 17,\n            'Richmond District': 18,\n            'Financial District': 8,\n            'Golden Gate Park': 22,\n            'Union Square': 7\n        },\n        'Financial District': {\n            'Presidio': 22,\n            'Richmond District': 21,\n            'North Beach': 7,\n            'Golden Gate Park': 23,\n            'Union Square': 9\n        },\n        'Golden Gate Park': {\n            'Presidio': 11,\n            'Richmond District': 7,\n            'North Beach': 24,\n            'Financial District': 26,\n            'Union Square': 22\n        },\n        'Union Square': {\n            'Presidio': 24,\n            'Richmond District': 20,\n            'North Beach': 10,\n            'Financial District': 9,\n            'Golden Gate Park': 22\n        }\n    }\n    \n    Friend = namedtuple('Friend', ['name', 'location', 'start', 'end', 'duration'])\n    friends = [\n        Friend('Jason', 'Richmond District', 13*60, 20*60+45, 90),\n        Friend('Melissa', 'North Beach', 18*60+45, 20*60+15, 45),\n        Friend('Brian', 'Financial District', 9*60+45, 21*60+45, 15),\n        Friend('Elizabeth', 'Golden Gate Park', 8*60+45, 21*60+30, 105),\n        Friend('Laura', 'Union Square', 14*60+15, 19*60+30, 75)\n    ]\n    \n    start_time = 9 * 60\n    start_location = 'Presidio'\n    max_count = 0\n    best_itinerary = None\n    \n    for perm in itertools.permutations(friends):\n        current_location = start_location\n        current_time = start_time\n        itinerary_this = []\n        count = 0\n        \n        for friend in perm:\n            travel_time = travel_matrix[current_location][friend.location]\n            arrival_time = current_time + travel_time\n            meeting_start = max(arrival_time, friend.start)\n            \n            if meeting_start > friend.end - friend.duration:\n                continue\n                \n            meeting_end = meeting_start + friend.duration\n            if meeting_end > friend.end:\n                continue\n                \n            itinerary_this.append((friend, meeting_start, meeting_end))\n            current_time = meeting_end\n            current_location = friend.location\n            count += 1\n            \n        if count > max_count:\n            max_count = count\n            best_itinerary = itinerary_this\n            if count == len(friends):\n                break\n                \n    def format_time(minutes):\n        hours = minutes // 60\n        mins = minutes % 60\n        return f\"{hours}:{mins:02d}\"\n    \n    itinerary_json = []\n    if best_itinerary is not None:\n        for meeting in best_itinerary:\n            friend, start, end = meeting\n            itinerary_json.append({\n                \"action\": \"meet\",\n                \"location\": friend.location,\n                \"person\": friend.name,\n                \"start_time\": format_time(start),\n                \"end_time\": format_time(end)\n            })\n    \n    result = {\"itinerary\": itinerary_json}\n    print(json.dumps(result))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]