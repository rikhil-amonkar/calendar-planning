[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nHaight-Ashbury to Fisherman's Wharf: 23.\nHaight-Ashbury to Richmond District: 10.\nHaight-Ashbury to Mission District: 11.\nHaight-Ashbury to Bayview: 18.\nFisherman's Wharf to Haight-Ashbury: 22.\nFisherman's Wharf to Richmond District: 18.\nFisherman's Wharf to Mission District: 22.\nFisherman's Wharf to Bayview: 26.\nRichmond District to Haight-Ashbury: 10.\nRichmond District to Fisherman's Wharf: 18.\nRichmond District to Mission District: 20.\nRichmond District to Bayview: 26.\nMission District to Haight-Ashbury: 12.\nMission District to Fisherman's Wharf: 22.\nMission District to Richmond District: 20.\nMission District to Bayview: 15.\nBayview to Haight-Ashbury: 19.\nBayview to Fisherman's Wharf: 25.\nBayview to Richmond District: 25.\nBayview to Mission District: 13.\n\nCONSTRAINTS: You arrive at Haight-Ashbury at 9:00AM. Sarah will be at Fisherman's Wharf from 2:45PM to 5:30PM. You'd like to meet Sarah for a minimum of 105 minutes. Mary will be at Richmond District from 1:00PM to 7:15PM. You'd like to meet Mary for a minimum of 75 minutes. Helen will be at Mission District from 9:45PM to 10:30PM. You'd like to meet Helen for a minimum of 30 minutes. Thomas will be at Bayview from 3:15PM to 6:45PM. You'd like to meet Thomas for a minimum of 120 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport itertools\nimport json\n\ndef main():\n    # Define travel times between locations\n    travel_times = {\n        \"Haight-Ashbury\": {\n            \"Fisherman's Wharf\": 23,\n            \"Richmond District\": 10,\n            \"Mission District\": 11,\n            \"Bayview\": 18\n        },\n        \"Fisherman's Wharf\": {\n            \"Haight-Ashbury\": 22,\n            \"Richmond District\": 18,\n            \"Mission District\": 22,\n            \"Bayview\": 26\n        },\n        \"Richmond District\": {\n            \"Haight-Ashbury\": 10,\n            \"Fisherman's Wharf\": 18,\n            \"Mission District\": 20,\n            \"Bayview\": 26\n        },\n        \"Mission District\": {\n            \"Haight-Ashbury\": 12,\n            \"Fisherman's Wharf\": 22,\n            \"Richmond District\": 20,\n            \"Bayview\": 15\n        },\n        \"Bayview\": {\n            \"Haight-Ashbury\": 19,\n            \"Fisherman's Wharf\": 25,\n            \"Richmond District\": 25,\n            \"Mission District\": 13\n        }\n    }\n    \n    # Define meetings with constraints (times in minutes from midnight)\n    meetings = [\n        {\n            'person': 'Sarah',\n            'location': \"Fisherman's Wharf\",\n            'start_avail': 14 * 60 + 45,  # 14:45\n            'end_avail': 17 * 60 + 30,    # 17:30\n            'min_dur': 105\n        },\n        {\n            'person': 'Mary',\n            'location': \"Richmond District\",\n            'start_avail': 13 * 60,       # 13:00\n            'end_avail': 19 * 60 + 15,    # 19:15\n            'min_dur': 75\n        },\n        {\n            'person': 'Helen',\n            'location': \"Mission District\",\n            'start_avail': 21 * 60 + 45,  # 21:45\n            'end_avail': 22 * 60 + 30,    # 22:30\n            'min_dur': 30\n        },\n        {\n            'person': 'Thomas',\n            'location': \"Bayview\",\n            'start_avail': 15 * 60 + 15,  # 15:15\n            'end_avail': 18 * 60 + 45,    # 18:45\n            'min_dur': 120\n        }\n    ]\n    \n    # Initial conditions\n    start_time = 9 * 60  # 9:00 AM in minutes\n    start_location = \"Haight-Ashbury\"\n    best_itinerary = []\n    found = False\n    \n    # Try subsets from largest (size 4) to smallest (size 1)\n    n = len(meetings)\n    for k in range(n, 0, -1):\n        for subset in itertools.combinations(meetings, k):\n            for perm in itertools.permutations(subset):\n                current_time = start_time\n                current_location = start_location\n                itinerary = []\n                feasible = True\n                \n                for meeting in perm:\n                    loc = meeting['location']\n                    # Get travel time\n                    travel = travel_times[current_location][loc]\n                    current_time += travel  # arrival time at meeting location\n                    \n                    # Calculate meeting start time\n                    start_meeting = max(current_time, meeting['start_avail'])\n                    end_meeting = start_meeting + meeting['min_dur']\n                    \n                    # Check if meeting fits within availability\n                    if end_meeting > meeting['end_avail']:\n                        feasible = False\n                        break\n                    \n                    # Add meeting to itinerary\n                    itinerary.append({\n                        'person': meeting['person'],\n                        'location': loc,\n                        'start_time': start_meeting,\n                        'end_time': end_meeting\n                    })\n                    \n                    current_time = end_meeting\n                    current_location = loc\n                \n                if feasible:\n                    best_itinerary = itinerary\n                    found = True\n                    break\n            if found:\n                break\n        if found:\n            break\n    \n    # Convert itinerary to output format\n    output_itinerary = []\n    for event in best_itinerary:\n        # Format start time\n        start_minutes = event['start_time']\n        start_hour = start_minutes // 60\n        start_min = start_minutes % 60\n        start_str = f\"{start_hour}:{start_min:02d}\"\n        \n        # Format end time\n        end_minutes = event['end_time']\n        end_hour = end_minutes // 60\n        end_min = end_minutes % 60\n        end_str = f\"{end_hour}:{end_min:02d}\"\n        \n        output_itinerary.append({\n            \"action\": \"meet\",\n            \"location\": event['location'],\n            \"person\": event['person'],\n            \"start_time\": start_str,\n            \"end_time\": end_str\n        })\n    \n    # Output as JSON\n    result = {\"itinerary\": output_itinerary}\n    print(json.dumps(result))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]