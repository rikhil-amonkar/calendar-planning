[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nFinancial District to Fisherman's Wharf: 10.\nFinancial District to Pacific Heights: 13.\nFinancial District to Mission District: 17.\nFisherman's Wharf to Financial District: 11.\nFisherman's Wharf to Pacific Heights: 12.\nFisherman's Wharf to Mission District: 22.\nPacific Heights to Financial District: 13.\nPacific Heights to Fisherman's Wharf: 13.\nPacific Heights to Mission District: 15.\nMission District to Financial District: 17.\nMission District to Fisherman's Wharf: 22.\nMission District to Pacific Heights: 16.\n\nCONSTRAINTS: You arrive at Financial District at 9:00AM. David will be at Fisherman's Wharf from 10:45AM to 3:30PM. You'd like to meet David for a minimum of 15 minutes. Timothy will be at Pacific Heights from 9:00AM to 3:30PM. You'd like to meet Timothy for a minimum of 75 minutes. Robert will be at Mission District from 12:15PM to 7:45PM. You'd like to meet Robert for a minimum of 90 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport itertools\nimport json\n\ndef time_to_minutes(time_str):\n    parts = time_str.split(':')\n    hour = int(parts[0])\n    minute = int(parts[1])\n    total_minutes = (hour - 9) * 60 + minute\n    return total_minutes\n\ndef minutes_to_time(minutes):\n    total_minutes = minutes\n    hour = 9 + total_minutes // 60\n    minute = total_minutes % 60\n    return f\"{hour}:{minute:02d}\"\n\ndef try_schedule(sequence, travel_times, start_location, start_time):\n    current_time = start_time\n    current_loc = start_location\n    itinerary = []\n    for friend in sequence:\n        if current_loc == friend['location']:\n            travel_time = 0\n        else:\n            travel_time = travel_times[current_loc][friend['location']]\n        current_time += travel_time\n        start_meeting = max(current_time, friend['available_start'])\n        end_meeting = start_meeting + friend['min_duration']\n        if end_meeting > friend['available_end']:\n            break\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": friend['location'],\n            \"person\": friend['name'],\n            \"start_time\": minutes_to_time(start_meeting),\n            \"end_time\": minutes_to_time(end_meeting)\n        })\n        current_time = end_meeting\n        current_loc = friend['location']\n    return itinerary\n\ntravel_times = {\n    \"Financial District\": {\"Fisherman's Wharf\": 10, \"Pacific Heights\": 13, \"Mission District\": 17},\n    \"Fisherman's Wharf\": {\"Financial District\": 11, \"Pacific Heights\": 12, \"Mission District\": 22},\n    \"Pacific Heights\": {\"Financial District\": 13, \"Fisherman's Wharf\": 13, \"Mission District\": 15},\n    \"Mission District\": {\"Financial District\": 17, \"Fisherman's Wharf\": 22, \"Pacific Heights\": 16}\n}\n\nfriends = [\n    {\"name\": \"David\", \"location\": \"Fisherman's Wharf\", \"available_start\": time_to_minutes(\"10:45\"), \"available_end\": time_to_minutes(\"15:30\"), \"min_duration\": 15},\n    {\"name\": \"Timothy\", \"location\": \"Pacific Heights\", \"available_start\": time_to_minutes(\"9:00\"), \"available_end\": time_to_minutes(\"15:30\"), \"min_duration\": 75},\n    {\"name\": \"Robert\", \"location\": \"Mission District\", \"available_start\": time_to_minutes(\"12:15\"), \"available_end\": time_to_minutes(\"19:45\"), \"min_duration\": 90}\n]\n\nstart_location = \"Financial District\"\nstart_time_minutes = 0\noutput_itinerary = None\n\nfor perm in itertools.permutations(friends):\n    itinerary = try_schedule(perm, travel_times, start_location, start_time_minutes)\n    if len(itinerary) == 3:\n        output_itinerary = itinerary\n        break\n\nif output_itinerary is None:\n    found = False\n    for pair in itertools.combinations(friends, 2):\n        for perm in itertools.permutations(pair):\n            itinerary = try_schedule(perm, travel_times, start_location, start_time_minutes)\n            if len(itinerary) == 2:\n                output_itinerary = itinerary\n                found = True\n                break\n        if found:\n            break\n\nif output_itinerary is None:\n    candidates = []\n    for friend in friends:\n        travel_time = travel_times[start_location][friend['location']]\n        arrival = start_time_minutes + travel_time\n        start_meeting = max(arrival, friend['available_start'])\n        end_meeting = start_meeting + friend['min_duration']\n        if end_meeting <= friend['available_end']:\n            meeting = {\n                \"action\": \"meet\",\n                \"location\": friend['location'],\n                \"person\": friend['name'],\n                \"start_time\": minutes_to_time(start_meeting),\n                \"end_time\": minutes_to_time(end_meeting)\n            }\n            candidates.append((start_meeting, [meeting]))\n    if candidates:\n        candidates.sort(key=lambda x: x[0])\n        output_itinerary = candidates[0][1]\n    else:\n        output_itinerary = []\n\nresult = {\"itinerary\": output_itinerary}\nprint(json.dumps(result))\n```"
    }
]