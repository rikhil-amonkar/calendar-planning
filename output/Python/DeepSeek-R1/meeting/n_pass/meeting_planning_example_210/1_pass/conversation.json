[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nFisherman's Wharf to Presidio: 17.\nFisherman's Wharf to Richmond District: 18.\nFisherman's Wharf to Financial District: 11.\nPresidio to Fisherman's Wharf: 19.\nPresidio to Richmond District: 7.\nPresidio to Financial District: 23.\nRichmond District to Fisherman's Wharf: 18.\nRichmond District to Presidio: 7.\nRichmond District to Financial District: 22.\nFinancial District to Fisherman's Wharf: 10.\nFinancial District to Presidio: 22.\nFinancial District to Richmond District: 21.\n\nCONSTRAINTS: You arrive at Fisherman's Wharf at 9:00AM. Emily will be at Presidio from 4:15PM to 9:00PM. You'd like to meet Emily for a minimum of 105 minutes. Joseph will be at Richmond District from 5:15PM to 10:00PM. You'd like to meet Joseph for a minimum of 120 minutes. Melissa will be at Financial District from 3:45PM to 9:45PM. You'd like to meet Melissa for a minimum of 75 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport itertools\nimport json\n\ndef main():\n    # Define travel times (in minutes) between locations\n    travel_times = {\n        'Fisherman\\'s Wharf': {\n            'Presidio': 17,\n            'Richmond District': 18,\n            'Financial District': 11\n        },\n        'Presidio': {\n            'Fisherman\\'s Wharf': 19,\n            'Richmond District': 7,\n            'Financial District': 23\n        },\n        'Richmond District': {\n            'Fisherman\\'s Wharf': 18,\n            'Presidio': 7,\n            'Financial District': 22\n        },\n        'Financial District': {\n            'Fisherman\\'s Wharf': 10,\n            'Presidio': 22,\n            'Richmond District': 21\n        }\n    }\n    \n    # Meeting constraints\n    meetings = [\n        {\n            'name': 'Emily',\n            'location': 'Presidio',\n            'start_avail': 16 * 60 + 15,  # 4:15 PM in minutes since midnight\n            'end_avail': 21 * 60,          # 9:00 PM\n            'min_duration': 105\n        },\n        {\n            'name': 'Joseph',\n            'location': 'Richmond District',\n            'start_avail': 17 * 60 + 15,   # 5:15 PM\n            'end_avail': 22 * 60,          # 10:00 PM\n            'min_duration': 120\n        },\n        {\n            'name': 'Melissa',\n            'location': 'Financial District',\n            'start_avail': 15 * 60 + 45,   # 3:45 PM\n            'end_avail': 21 * 60 + 45,     # 9:45 PM\n            'min_duration': 75\n        }\n    ]\n    \n    start_location = 'Fisherman\\'s Wharf'\n    start_time = 9 * 60  # 9:00 AM in minutes since midnight (540)\n    \n    candidates = []\n    \n    # Try all permutations of three meetings\n    for perm in itertools.permutations(meetings):\n        current_loc = start_location\n        current_time = start_time\n        schedule = []\n        feasible = True\n        \n        for meeting in perm:\n            # Travel to meeting location\n            travel_duration = travel_times[current_loc][meeting['location']]\n            current_time += travel_duration\n            \n            # Wait if arriving before available time\n            if current_time < meeting['start_avail']:\n                current_time = meeting['start_avail']\n                \n            # Check if meeting can be scheduled\n            meeting_end = current_time + meeting['min_duration']\n            if meeting_end > meeting['end_avail']:\n                feasible = False\n                break\n                \n            # Schedule meeting\n            schedule.append({\n                'meeting': meeting,\n                'start': current_time,\n                'end': meeting_end\n            })\n            \n            # Update for next meeting\n            current_time = meeting_end\n            current_loc = meeting['location']\n        \n        if feasible:\n            candidates.append({\n                'count': 3,\n                'finish_time': current_time,\n                'schedule': schedule\n            })\n    \n    # If no 3-meeting schedule, try 2-meeting schedules\n    if not candidates:\n        for pair in itertools.combinations(meetings, 2):\n            for perm in itertools.permutations(pair):\n                current_loc = start_location\n                current_time = start_time\n                schedule = []\n                feasible = True\n                \n                for meeting in perm:\n                    travel_duration = travel_times[current_loc][meeting['location']]\n                    current_time += travel_duration\n                    \n                    if current_time < meeting['start_avail']:\n                        current_time = meeting['start_avail']\n                    \n                    meeting_end = current_time + meeting['min_duration']\n                    if meeting_end > meeting['end_avail']:\n                        feasible = False\n                        break\n                    \n                    schedule.append({\n                        'meeting': meeting,\n                        'start': current_time,\n                        'end': meeting_end\n                    })\n                    \n                    current_time = meeting_end\n                    current_loc = meeting['location']\n                \n                if feasible:\n                    candidates.append({\n                        'count': len(perm),\n                        'finish_time': current_time,\n                        'schedule': schedule\n                    })\n    \n    # If no 2-meeting schedule, try 1-meeting schedules\n    if not candidates:\n        for meeting in meetings:\n            current_loc = start_location\n            current_time = start_time\n            schedule = []\n            \n            travel_duration = travel_times[current_loc][meeting['location']]\n            current_time += travel_duration\n            \n            if current_time < meeting['start_avail']:\n                current_time = meeting['start_avail']\n            \n            meeting_end = current_time + meeting['min_duration']\n            if meeting_end <= meeting['end_avail']:\n                schedule.append({\n                    'meeting': meeting,\n                    'start': current_time,\n                    'end': meeting_end\n                })\n                \n                candidates.append({\n                    'count': 1,\n                    'finish_time': meeting_end,\n                    'schedule': schedule\n                })\n    \n    # Select best candidate (most meetings, then earliest finish)\n    if candidates:\n        best_candidate = min(candidates, key=lambda c: (-c['count'], c['finish_time']))\n    else:\n        best_candidate = {'schedule': []}\n    \n    # Format itinerary\n    itinerary = []\n    for event in best_candidate['schedule']:\n        meeting = event['meeting']\n        start_minutes = event['start']\n        end_minutes = event['end']\n        \n        # Convert minutes to \"H:MM\" format\n        def format_time(minutes):\n            hour = minutes // 60\n            minute = minutes % 60\n            return f\"{hour}:{minute:02d}\"\n        \n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting['location'],\n            \"person\": meeting['name'],\n            \"start_time\": format_time(start_minutes),\n            \"end_time\": format_time(end_minutes)\n        })\n    \n    # Output as JSON\n    result = {\"itinerary\": itinerary}\n    print(json.dumps(result))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]