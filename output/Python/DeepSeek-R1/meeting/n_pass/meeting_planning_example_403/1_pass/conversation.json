[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nUnion Square to Golden Gate Park: 22.\nUnion Square to Pacific Heights: 15.\nUnion Square to Presidio: 24.\nUnion Square to Chinatown: 7.\nUnion Square to The Castro: 19.\nGolden Gate Park to Union Square: 22.\nGolden Gate Park to Pacific Heights: 16.\nGolden Gate Park to Presidio: 11.\nGolden Gate Park to Chinatown: 23.\nGolden Gate Park to The Castro: 13.\nPacific Heights to Union Square: 12.\nPacific Heights to Golden Gate Park: 15.\nPacific Heights to Presidio: 11.\nPacific Heights to Chinatown: 11.\nPacific Heights to The Castro: 16.\nPresidio to Union Square: 22.\nPresidio to Golden Gate Park: 12.\nPresidio to Pacific Heights: 11.\nPresidio to Chinatown: 21.\nPresidio to The Castro: 21.\nChinatown to Union Square: 7.\nChinatown to Golden Gate Park: 23.\nChinatown to Pacific Heights: 10.\nChinatown to Presidio: 19.\nChinatown to The Castro: 22.\nThe Castro to Union Square: 19.\nThe Castro to Golden Gate Park: 11.\nThe Castro to Pacific Heights: 16.\nThe Castro to Presidio: 20.\nThe Castro to Chinatown: 20.\n\nCONSTRAINTS: You arrive at Union Square at 9:00AM. Andrew will be at Golden Gate Park from 11:45AM to 2:30PM. You'd like to meet Andrew for a minimum of 75 minutes. Sarah will be at Pacific Heights from 4:15PM to 6:45PM. You'd like to meet Sarah for a minimum of 15 minutes. Nancy will be at Presidio from 5:30PM to 7:15PM. You'd like to meet Nancy for a minimum of 60 minutes. Rebecca will be at Chinatown from 9:45AM to 9:30PM. You'd like to meet Rebecca for a minimum of 90 minutes. Robert will be at The Castro from 8:30AM to 2:15PM. You'd like to meet Robert for a minimum of 30 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "SOLUTION:\n```python\nimport itertools\nimport json\n\ndef time_to_minutes(time_str):\n    parts = time_str.split(':')\n    hours = int(parts[0])\n    minutes = int(parts[1])\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes_val):\n    hours = minutes_val // 60\n    minutes = minutes_val % 60\n    return f\"{hours}:{minutes:02}\"\n\n# Define travel times\ntravel_times = {\n    'Union Square': {\n        'Golden Gate Park': 22,\n        'Pacific Heights': 15,\n        'Presidio': 24,\n        'Chinatown': 7,\n        'The Castro': 19\n    },\n    'Golden Gate Park': {\n        'Union Square': 22,\n        'Pacific Heights': 16,\n        'Presidio': 11,\n        'Chinatown': 23,\n        'The Castro': 13\n    },\n    'Pacific Heights': {\n        'Union Square': 12,\n        'Golden Gate Park': 15,\n        'Presidio': 11,\n        'Chinatown': 11,\n        'The Castro': 16\n    },\n    'Presidio': {\n        'Union Square': 22,\n        'Golden Gate Park': 12,\n        'Pacific Heights': 11,\n        'Chinatown': 21,\n        'The Castro': 21\n    },\n    'Chinatown': {\n        'Union Square': 7,\n        'Golden Gate Park': 23,\n        'Pacific Heights': 10,\n        'Presidio': 19,\n        'The Castro': 22\n    },\n    'The Castro': {\n        'Union Square': 19,\n        'Golden Gate Park': 11,\n        'Pacific Heights': 16,\n        'Presidio': 20,\n        'Chinatown': 20\n    }\n}\n\n# Define friends with constraints\nfriends = [\n    {'name': 'Andrew', 'location': 'Golden Gate Park', 'start_available': time_to_minutes('11:45'), 'end_available': time_to_minutes('14:30'), 'min_duration': 75},\n    {'name': 'Sarah', 'location': 'Pacific Heights', 'start_available': time_to_minutes('16:15'), 'end_available': time_to_minutes('18:45'), 'min_duration': 15},\n    {'name': 'Nancy', 'location': 'Presidio', 'start_available': time_to_minutes('17:30'), 'end_available': time_to_minutes('19:15'), 'min_duration': 60},\n    {'name': 'Rebecca', 'location': 'Chinatown', 'start_available': time_to_minutes('9:45'), 'end_available': time_to_minutes('21:30'), 'min_duration': 90},\n    {'name': 'Robert', 'location': 'The Castro', 'start_available': time_to_minutes('8:30'), 'end_available': time_to_minutes('14:15'), 'min_duration': 30}\n]\n\ninitial_location = 'Union Square'\ninitial_time = time_to_minutes('9:00')  # 9:00 AM\n\n# Generate all permutations of friends\nall_perms = list(itertools.permutations(friends))\nbest_schedule = None\nbest_count = 0\nbest_wait = float('inf')\n\nfor perm in all_perms:\n    current_location = initial_location\n    current_time = initial_time\n    itinerary = []\n    count = 0\n    total_wait = 0\n    \n    for friend in perm:\n        # Get travel time from current location to friend's location\n        travel_time = travel_times[current_location][friend['location']]\n        arrival_time = current_time + travel_time\n        \n        # Skip if we arrive after the friend's availability ends\n        if arrival_time > friend['end_available']:\n            continue\n        \n        # Calculate meeting start time (max of arrival and friend's start available)\n        start_meeting = max(arrival_time, friend['start_available'])\n        # Check if meeting can be scheduled within the friend's availability\n        if start_meeting + friend['min_duration'] > friend['end_available']:\n            continue\n        \n        # Calculate wait time at the location (if any)\n        wait_time = start_meeting - arrival_time\n        total_wait += wait_time\n        end_meeting = start_meeting + friend['min_duration']\n        \n        # Add meeting to itinerary\n        meeting = {\n            \"action\": \"meet\",\n            \"location\": friend['location'],\n            \"person\": friend['name'],\n            \"start_time\": minutes_to_time(start_meeting),\n            \"end_time\": minutes_to_time(end_meeting)\n        }\n        itinerary.append(meeting)\n        \n        # Update current location and time\n        current_location = friend['location']\n        current_time = end_meeting\n        count += 1\n    \n    # Update best schedule if this permutation yields more meetings or same meetings with less waiting\n    if count > best_count or (count == best_count and total_wait < best_wait):\n        best_count = count\n        best_schedule = itinerary\n        best_wait = total_wait\n\n# Output the best schedule as JSON\nresult = {\"itinerary\": best_schedule}\nprint(json.dumps(result))\n```"
    }
]