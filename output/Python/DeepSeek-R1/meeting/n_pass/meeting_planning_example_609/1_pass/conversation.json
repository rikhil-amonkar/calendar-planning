[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nChinatown to Mission District: 18.\nChinatown to Alamo Square: 17.\nChinatown to Pacific Heights: 10.\nChinatown to Union Square: 7.\nChinatown to Golden Gate Park: 23.\nChinatown to Sunset District: 29.\nChinatown to Presidio: 19.\nMission District to Chinatown: 16.\nMission District to Alamo Square: 11.\nMission District to Pacific Heights: 16.\nMission District to Union Square: 15.\nMission District to Golden Gate Park: 17.\nMission District to Sunset District: 24.\nMission District to Presidio: 25.\nAlamo Square to Chinatown: 16.\nAlamo Square to Mission District: 10.\nAlamo Square to Pacific Heights: 10.\nAlamo Square to Union Square: 14.\nAlamo Square to Golden Gate Park: 9.\nAlamo Square to Sunset District: 16.\nAlamo Square to Presidio: 18.\nPacific Heights to Chinatown: 11.\nPacific Heights to Mission District: 15.\nPacific Heights to Alamo Square: 10.\nPacific Heights to Union Square: 12.\nPacific Heights to Golden Gate Park: 15.\nPacific Heights to Sunset District: 21.\nPacific Heights to Presidio: 11.\nUnion Square to Chinatown: 7.\nUnion Square to Mission District: 14.\nUnion Square to Alamo Square: 15.\nUnion Square to Pacific Heights: 15.\nUnion Square to Golden Gate Park: 22.\nUnion Square to Sunset District: 26.\nUnion Square to Presidio: 24.\nGolden Gate Park to Chinatown: 23.\nGolden Gate Park to Mission District: 17.\nGolden Gate Park to Alamo Square: 10.\nGolden Gate Park to Pacific Heights: 16.\nGolden Gate Park to Union Square: 22.\nGolden Gate Park to Sunset District: 10.\nGolden Gate Park to Presidio: 11.\nSunset District to Chinatown: 30.\nSunset District to Mission District: 24.\nSunset District to Alamo Square: 17.\nSunset District to Pacific Heights: 21.\nSunset District to Union Square: 30.\nSunset District to Golden Gate Park: 11.\nSunset District to Presidio: 16.\nPresidio to Chinatown: 21.\nPresidio to Mission District: 26.\nPresidio to Alamo Square: 18.\nPresidio to Pacific Heights: 11.\nPresidio to Union Square: 22.\nPresidio to Golden Gate Park: 12.\nPresidio to Sunset District: 15.\n\nCONSTRAINTS: You arrive at Chinatown at 9:00AM. David will be at Mission District from 8:00AM to 7:45PM. You'd like to meet David for a minimum of 45 minutes. Kenneth will be at Alamo Square from 2:00PM to 7:45PM. You'd like to meet Kenneth for a minimum of 120 minutes. John will be at Pacific Heights from 5:00PM to 8:00PM. You'd like to meet John for a minimum of 15 minutes. Charles will be at Union Square from 9:45PM to 10:45PM. You'd like to meet Charles for a minimum of 60 minutes. Deborah will be at Golden Gate Park from 7:00AM to 6:15PM. You'd like to meet Deborah for a minimum of 90 minutes. Karen will be at Sunset District from 5:45PM to 9:15PM. You'd like to meet Karen for a minimum of 15 minutes. Carol will be at Presidio from 8:15AM to 9:15AM. You'd like to meet Carol for a minimum of 30 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport itertools\nimport json\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\ndef main():\n    # Define travel times matrix\n    locations = [\n        'Chinatown', 'Mission District', 'Alamo Square', 'Pacific Heights',\n        'Union Square', 'Golden Gate Park', 'Sunset District', 'Presidio'\n    ]\n    travel_times = {loc: {} for loc in locations}\n    \n    travel_data = [\n        ('Chinatown', 'Mission District', 18),\n        ('Chinatown', 'Alamo Square', 17),\n        ('Chinatown', 'Pacific Heights', 10),\n        ('Chinatown', 'Union Square', 7),\n        ('Chinatown', 'Golden Gate Park', 23),\n        ('Chinatown', 'Sunset District', 29),\n        ('Chinatown', 'Presidio', 19),\n        ('Mission District', 'Chinatown', 16),\n        ('Mission District', 'Alamo Square', 11),\n        ('Mission District', 'Pacific Heights', 16),\n        ('Mission District', 'Union Square', 15),\n        ('Mission District', 'Golden Gate Park', 17),\n        ('Mission District', 'Sunset District', 24),\n        ('Mission District', 'Presidio', 25),\n        ('Alamo Square', 'Chinatown', 16),\n        ('Alamo Square', 'Mission District', 10),\n        ('Alamo Square', 'Pacific Heights', 10),\n        ('Alamo Square', 'Union Square', 14),\n        ('Alamo Square', 'Golden Gate Park', 9),\n        ('Alamo Square', 'Sunset District', 16),\n        ('Alamo Square', 'Presidio', 18),\n        ('Pacific Heights', 'Chinatown', 11),\n        ('Pacific Heights', 'Mission District', 15),\n        ('Pacific Heights', 'Alamo Square', 10),\n        ('Pacific Heights', 'Union Square', 12),\n        ('Pacific Heights', 'Golden Gate Park', 15),\n        ('Pacific Heights', 'Sunset District', 21),\n        ('Pacific Heights', 'Presidio', 11),\n        ('Union Square', 'Chinatown', 7),\n        ('Union Square', 'Mission District', 14),\n        ('Union Square', 'Alamo Square', 15),\n        ('Union Square', 'Pacific Heights', 15),\n        ('Union Square', 'Golden Gate Park', 22),\n        ('Union Square', 'Sunset District', 26),\n        ('Union Square', 'Presidio', 24),\n        ('Golden Gate Park', 'Chinatown', 23),\n        ('Golden Gate Park', 'Mission District', 17),\n        ('Golden Gate Park', 'Alamo Square', 10),\n        ('Golden Gate Park', 'Pacific Heights', 16),\n        ('Golden Gate Park', 'Union Square', 22),\n        ('Golden Gate Park', 'Sunset District', 10),\n        ('Golden Gate Park', 'Presidio', 11),\n        ('Sunset District', 'Chinatown', 30),\n        ('Sunset District', 'Mission District', 24),\n        ('Sunset District', 'Alamo Square', 17),\n        ('Sunset District', 'Pacific Heights', 21),\n        ('Sunset District', 'Union Square', 30),\n        ('Sunset District', 'Golden Gate Park', 11),\n        ('Sunset District', 'Presidio', 16),\n        ('Presidio', 'Chinatown', 21),\n        ('Presidio', 'Mission District', 26),\n        ('Presidio', 'Alamo Square', 18),\n        ('Presidio', 'Pacific Heights', 11),\n        ('Presidio', 'Union Square', 22),\n        ('Presidio', 'Golden Gate Park', 12),\n        ('Presidio', 'Sunset District', 15)\n    ]\n    \n    for from_loc, to_loc, time_val in travel_data:\n        travel_times[from_loc][to_loc] = time_val\n\n    # Define friends' constraints (excluding Carol)\n    friends = [\n        {'name': 'David', 'location': 'Mission District', \n         'start_available': 8 * 60, 'end_available': 19 * 60 + 45, 'min_duration': 45},\n        {'name': 'Kenneth', 'location': 'Alamo Square', \n         'start_available': 14 * 60, 'end_available': 19 * 60 + 45, 'min_duration': 120},\n        {'name': 'John', 'location': 'Pacific Heights', \n         'start_available': 17 * 60, 'end_available': 20 * 60, 'min_duration': 15},\n        {'name': 'Charles', 'location': 'Union Square', \n         'start_available': 21 * 60 + 45, 'end_available': 22 * 60 + 45, 'min_duration': 60},\n        {'name': 'Deborah', 'location': 'Golden Gate Park', \n         'start_available': 7 * 60, 'end_available': 18 * 60 + 15, 'min_duration': 90},\n        {'name': 'Karen', 'location': 'Sunset District', \n         'start_available': 17 * 60 + 45, 'end_available': 21 * 60 + 15, 'min_duration': 15}\n    ]\n    \n    start_location = 'Chinatown'\n    start_time = 9 * 60  # 9:00 AM in minutes\n    best_itinerary = None\n    found = False\n    n = len(friends)\n    \n    # Try to find a feasible schedule with maximum meetings\n    for r in range(n, 0, -1):\n        for subset in itertools.combinations(friends, r):\n            for perm in itertools.permutations(subset):\n                current_loc = start_location\n                current_time_val = start_time\n                itinerary = []\n                valid = True\n                \n                for friend in perm:\n                    to_loc = friend['location']\n                    travel_duration = travel_times[current_loc][to_loc]\n                    current_time_val += travel_duration\n                    \n                    # Calculate meeting start and end times\n                    meeting_start = max(current_time_val, friend['start_available'])\n                    meeting_end = meeting_start + friend['min_duration']\n                    \n                    # Check if meeting fits within friend's availability\n                    if meeting_end > friend['end_available']:\n                        valid = False\n                        break\n                    \n                    # Record meeting\n                    itinerary.append({\n                        'action': 'meet',\n                        'location': to_loc,\n                        'person': friend['name'],\n                        'start_time': minutes_to_time(meeting_start),\n                        'end_time': minutes_to_time(meeting_end)\n                    })\n                    \n                    current_time_val = meeting_end\n                    current_loc = to_loc\n                \n                if valid:\n                    best_itinerary = itinerary\n                    found = True\n                    break\n            if found:\n                break\n        if found:\n            break\n    \n    # Prepare output\n    if best_itinerary is None:\n        result = {\"itinerary\": []}\n    else:\n        result = {\"itinerary\": best_itinerary}\n    \n    print(json.dumps(result))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]