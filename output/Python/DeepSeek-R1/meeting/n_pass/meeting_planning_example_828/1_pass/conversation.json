[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nMarina District to Richmond District: 11.\nMarina District to Union Square: 16.\nMarina District to Nob Hill: 12.\nMarina District to Fisherman's Wharf: 10.\nMarina District to Golden Gate Park: 18.\nMarina District to Embarcadero: 14.\nMarina District to Financial District: 17.\nMarina District to North Beach: 11.\nMarina District to Presidio: 10.\nRichmond District to Marina District: 9.\nRichmond District to Union Square: 21.\nRichmond District to Nob Hill: 17.\nRichmond District to Fisherman's Wharf: 18.\nRichmond District to Golden Gate Park: 9.\nRichmond District to Embarcadero: 19.\nRichmond District to Financial District: 22.\nRichmond District to North Beach: 17.\nRichmond District to Presidio: 7.\nUnion Square to Marina District: 18.\nUnion Square to Richmond District: 20.\nUnion Square to Nob Hill: 9.\nUnion Square to Fisherman's Wharf: 15.\nUnion Square to Golden Gate Park: 22.\nUnion Square to Embarcadero: 11.\nUnion Square to Financial District: 9.\nUnion Square to North Beach: 10.\nUnion Square to Presidio: 24.\nNob Hill to Marina District: 11.\nNob Hill to Richmond District: 14.\nNob Hill to Union Square: 7.\nNob Hill to Fisherman's Wharf: 10.\nNob Hill to Golden Gate Park: 17.\nNob Hill to Embarcadero: 9.\nNob Hill to Financial District: 9.\nNob Hill to North Beach: 8.\nNob Hill to Presidio: 17.\nFisherman's Wharf to Marina District: 9.\nFisherman's Wharf to Richmond District: 18.\nFisherman's Wharf to Union Square: 13.\nFisherman's Wharf to Nob Hill: 11.\nFisherman's Wharf to Golden Gate Park: 25.\nFisherman's Wharf to Embarcadero: 8.\nFisherman's Wharf to Financial District: 11.\nFisherman's Wharf to North Beach: 6.\nFisherman's Wharf to Presidio: 17.\nGolden Gate Park to Marina District: 16.\nGolden Gate Park to Richmond District: 7.\nGolden Gate Park to Union Square: 22.\nGolden Gate Park to Nob Hill: 20.\nGolden Gate Park to Fisherman's Wharf: 24.\nGolden Gate Park to Embarcadero: 25.\nGolden Gate Park to Financial District: 26.\nGolden Gate Park to North Beach: 23.\nGolden Gate Park to Presidio: 11.\nEmbarcadero to Marina District: 12.\nEmbarcadero to Richmond District: 21.\nEmbarcadero to Union Square: 10.\nEmbarcadero to Nob Hill: 10.\nEmbarcadero to Fisherman's Wharf: 6.\nEmbarcadero to Golden Gate Park: 25.\nEmbarcadero to Financial District: 5.\nEmbarcadero to North Beach: 5.\nEmbarcadero to Presidio: 20.\nFinancial District to Marina District: 15.\nFinancial District to Richmond District: 21.\nFinancial District to Union Square: 9.\nFinancial District to Nob Hill: 8.\nFinancial District to Fisherman's Wharf: 10.\nFinancial District to Golden Gate Park: 23.\nFinancial District to Embarcadero: 4.\nFinancial District to North Beach: 7.\nFinancial District to Presidio: 22.\nNorth Beach to Marina District: 9.\nNorth Beach to Richmond District: 18.\nNorth Beach to Union Square: 7.\nNorth Beach to Nob Hill: 7.\nNorth Beach to Fisherman's Wharf: 5.\nNorth Beach to Golden Gate Park: 22.\nNorth Beach to Embarcadero: 6.\nNorth Beach to Financial District: 8.\nNorth Beach to Presidio: 17.\nPresidio to Marina District: 11.\nPresidio to Richmond District: 7.\nPresidio to Union Square: 22.\nPresidio to Nob Hill: 18.\nPresidio to Fisherman's Wharf: 19.\nPresidio to Golden Gate Park: 12.\nPresidio to Embarcadero: 20.\nPresidio to Financial District: 23.\nPresidio to North Beach: 18.\n\nCONSTRAINTS: You arrive at Marina District at 9:00AM. Stephanie will be at Richmond District from 4:15PM to 9:30PM. You'd like to meet Stephanie for a minimum of 75 minutes. William will be at Union Square from 10:45AM to 5:30PM. You'd like to meet William for a minimum of 45 minutes. Elizabeth will be at Nob Hill from 12:15PM to 3:00PM. You'd like to meet Elizabeth for a minimum of 105 minutes. Joseph will be at Fisherman's Wharf from 12:45PM to 2:00PM. You'd like to meet Joseph for a minimum of 75 minutes. Anthony will be at Golden Gate Park from 1:00PM to 8:30PM. You'd like to meet Anthony for a minimum of 75 minutes. Barbara will be at Embarcadero from 7:15PM to 8:30PM. You'd like to meet Barbara for a minimum of 75 minutes. Carol will be at Financial District from 11:45AM to 4:15PM. You'd like to meet Carol for a minimum of 60 minutes. Sandra will be at North Beach from 10:00AM to 12:30PM. You'd like to meet Sandra for a minimum of 15 minutes. Kenneth will be at Presidio from 9:15PM to 10:15PM. You'd like to meet Kenneth for a minimum of 45 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "To solve this problem, we need to schedule meetings with as many friends as possible in San Francisco, considering travel times between different districts and the time constraints of each friend's availability. The solution involves using dynamic programming to explore all possible meeting sequences while respecting travel times and availability windows.\n\n### Approach\n1. **Problem Analysis**: The problem requires scheduling meetings with friends located in different districts. Each friend has a specific time window during which they are available, and each meeting must last at least a minimum duration. Travel times between districts are provided. The goal is to maximize the number of meetings starting from the Marina District at 9:00 AM.\n\n2. **Dynamic Programming Setup**: We use a dynamic programming (DP) approach where the state is defined by the current location, a bitmask representing the set of friends already met, and the current time. The DP state `dp[loc][mask]` stores the earliest time we can be at location `loc` after meeting the friends represented by `mask`.\n\n3. **State Transitions**: For each state, we consider extending the schedule by meeting a friend not yet met (as per the bitmask). We calculate the arrival time at the friend's location, considering travel time. The meeting starts at the later of the arrival time or the start of the friend's availability window, ensuring the meeting duration fits within their window.\n\n4. **Reconstruction**: After filling the DP table, we find the state with the maximum number of meetings (highest bitmask popcount) and reconstruct the itinerary by backtracking from the best state using parent pointers stored during DP transitions.\n\n5. **Time Conversion**: Helper functions convert time strings (e.g., \"9:00AM\") to minutes past midnight for easier arithmetic and back to the required output format (e.g., \"9:00\").\n\n### Solution Code\n```python\nimport json\n\ndef time_str_to_minutes(s):\n    ampm = s[-2:]\n    time_str = s[:-2].strip()\n    if ':' in time_str:\n        parts = time_str.split(':')\n        hour = int(parts[0])\n        minute = int(parts[1])\n    else:\n        hour = int(time_str)\n        minute = 0\n    if ampm == 'PM' and hour != 12:\n        hour += 12\n    if ampm == 'AM' and hour == 12:\n        hour = 0\n    return hour * 60 + minute\n\ndef minutes_to_time(mins):\n    hour = mins // 60\n    minute = mins % 60\n    return f\"{hour}:{minute:02d}\"\n\nlocations = [\n    \"Richmond District\",\n    \"Union Square\",\n    \"Nob Hill\",\n    \"Fisherman's Wharf\",\n    \"Golden Gate Park\",\n    \"Embarcadero\",\n    \"Financial District\",\n    \"North Beach\",\n    \"Presidio\",\n    \"Marina District\"\n]\n\ntravel_data = [\n    (\"Marina District\", \"Richmond District\", 11),\n    (\"Marina District\", \"Union Square\", 16),\n    (\"Marina District\", \"Nob Hill\", 12),\n    (\"Marina District\", \"Fisherman's Wharf\", 10),\n    (\"Marina District\", \"Golden Gate Park\", 18),\n    (\"Marina District\", \"Embarcadero\", 14),\n    (\"Marina District\", \"Financial District\", 17),\n    (\"Marina District\", \"North Beach\", 11),\n    (\"Marina District\", \"Presidio\", 10),\n    (\"Richmond District\", \"Marina District\", 9),\n    (\"Richmond District\", \"Union Square\", 21),\n    (\"Richmond District\", \"Nob Hill\", 17),\n    (\"Richmond District\", \"Fisherman's Wharf\", 18),\n    (\"Richmond District\", \"Golden Gate Park\", 9),\n    (\"Richmond District\", \"Embarcadero\", 19),\n    (\"Richmond District\", \"Financial District\", 22),\n    (\"Richmond District\", \"North Beach\", 17),\n    (\"Richmond District\", \"Presidio\", 7),\n    (\"Union Square\", \"Marina District\", 18),\n    (\"Union Square\", \"Richmond District\", 20),\n    (\"Union Square\", \"Nob Hill\", 9),\n    (\"Union Square\", \"Fisherman's Wharf\", 15),\n    (\"Union Square\", \"Golden Gate Park\", 22),\n    (\"Union Square\", \"Embarcadero\", 11),\n    (\"Union Square\", \"Financial District\", 9),\n    (\"Union Square\", \"North Beach\", 10),\n    (\"Union Square\", \"Presidio\", 24),\n    (\"Nob Hill\", \"Marina District\", 11),\n    (\"Nob Hill\", \"Richmond District\", 14),\n    (\"Nob Hill\", \"Union Square\", 7),\n    (\"Nob Hill\", \"Fisherman's Wharf\", 10),\n    (\"Nob Hill\", \"Golden Gate Park\", 17),\n    (\"Nob Hill\", \"Embarcadero\", 9),\n    (\"Nob Hill\", \"Financial District\", 9),\n    (\"Nob Hill\", \"North Beach\", 8),\n    (\"Nob Hill\", \"Presidio\", 17),\n    (\"Fisherman's Wharf\", \"Marina District\", 9),\n    (\"Fisherman's Wharf\", \"Richmond District\", 18),\n    (\"Fisherman's Wharf\", \"Union Square\", 13),\n    (\"Fisherman's Wharf\", \"Nob Hill\", 11),\n    (\"Fisherman's Wharf\", \"Golden Gate Park\", 25),\n    (\"Fisherman's Wharf\", \"Embarcadero\", 8),\n    (\"Fisherman's Wharf\", \"Financial District\", 11),\n    (\"Fisherman's Wharf\", \"North Beach\", 6),\n    (\"Fisherman's Wharf\", \"Presidio\", 17),\n    (\"Golden Gate Park\", \"Marina District\", 16),\n    (\"Golden Gate Park\", \"Richmond District\", 7),\n    (\"Golden Gate Park\", \"Union Square\", 22),\n    (\"Golden Gate Park\", \"Nob Hill\", 20),\n    (\"Golden Gate Park\", \"Fisherman's Wharf\", 24),\n    (\"Golden Gate Park\", \"Embarcadero\", 25),\n    (\"Golden Gate Park\", \"Financial District\", 26),\n    (\"Golden Gate Park\", \"North Beach\", 23),\n    (\"Golden Gate Park\", \"Presidio\", 11),\n    (\"Embarcadero\", \"Marina District\", 12),\n    (\"Embarcadero\", \"Richmond District\", 21),\n    (\"Embarcadero\", \"Union Square\", 10),\n    (\"Embarcadero\", \"Nob Hill\", 10),\n    (\"Embarcadero\", \"Fisherman's Wharf\", 6),\n    (\"Embarcadero\", \"Golden Gate Park\", 25),\n    (\"Embarcadero\", \"Financial District\", 5),\n    (\"Embarcadero\", \"North Beach\", 5),\n    (\"Embarcadero\", \"Presidio\", 20),\n    (\"Financial District\", \"Marina District\", 15),\n    (\"Financial District\", \"Richmond District\", 21),\n    (\"Financial District\", \"Union Square\", 9),\n    (\"Financial District\", \"Nob Hill\", 8),\n    (\"Financial District\", \"Fisherman's Wharf\", 10),\n    (\"Financial District\", \"Golden Gate Park\", 23),\n    (\"Financial District\", \"Embarcadero\", 4),\n    (\"Financial District\", \"North Beach\", 7),\n    (\"Financial District\", \"Presidio\", 22),\n    (\"North Beach\", \"Marina District\", 9),\n    (\"North Beach\", \"Richmond District\", 18),\n    (\"North Beach\", \"Union Square\", 7),\n    (\"North Beach\", \"Nob Hill\", 7),\n    (\"North Beach\", \"Fisherman's Wharf\", 5),\n    (\"North Beach\", \"Golden Gate Park\", 22),\n    (\"North Beach\", \"Embarcadero\", 6),\n    (\"North Beach\", \"Financial District\", 8),\n    (\"North Beach\", \"Presidio\", 17),\n    (\"Presidio\", \"Marina District\", 11),\n    (\"Presidio\", \"Richmond District\", 7),\n    (\"Presidio\", \"Union Square\", 22),\n    (\"Presidio\", \"Nob Hill\", 18),\n    (\"Presidio\", \"Fisherman's Wharf\", 19),\n    (\"Presidio\", \"Golden Gate Park\", 12),\n    (\"Presidio\", \"Embarcadero\", 20),\n    (\"Presidio\", \"Financial District\", 23),\n    (\"Presidio\", \"North Beach\", 18)\n]\n\ntravel_dict = {}\nfor item in travel_data:\n    from_loc, to_loc, t = item\n    travel_dict[(from_loc, to_loc)] = t\n\nn = len(locations)\ntravel_matrix = [[0] * n for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        from_name = locations[i]\n        to_name = locations[j]\n        travel_matrix[i][j] = travel_dict[(from_name, to_name)]\n\nfriend_names = [\n    \"Stephanie\",\n    \"William\",\n    \"Elizabeth\",\n    \"Joseph\",\n    \"Anthony\",\n    \"Barbara\",\n    \"Carol\",\n    \"Sandra\",\n    \"Kenneth\"\n]\n\nfriend_windows = [\n    (\"4:15PM\", \"9:30PM\"),\n    (\"10:45AM\", \"5:30PM\"),\n    (\"12:15PM\", \"3:00PM\"),\n    (\"12:45PM\", \"2:00PM\"),\n    (\"1:00PM\", \"8:30PM\"),\n    (\"7:15PM\", \"8:30PM\"),\n    (\"11:45AM\", \"4:15PM\"),\n    (\"10:00AM\", \"12:30PM\"),\n    (\"9:15PM\", \"10:15PM\")\n]\n\nfriend_start = [time_str_to_minutes(win[0]) for win in friend_windows]\nfriend_end = [time_str_to_minutes(win[1]) for win in friend_windows]\nfriend_duration = [75, 45, 105, 75, 75, 75, 60, 15, 45]\n\nn_friends = len(friend_names)\nn_masks = 1 << n_friends\nINF = 10**9\n\ndp = [[INF] * n_masks for _ in range(n)]\nparent = [[None] * n_masks for _ in range(n)]\n\nstart_loc = 9\nstart_mask = 0\ndp[start_loc][start_mask] = 540\n\nfor mask in range(n_masks):\n    for loc in range(n):\n        if dp[loc][mask] < INF:\n            for i in range(n_friends):\n                if mask & (1 << i) == 0:\n                    next_loc = i\n                    travel_time = travel_matrix[loc][next_loc]\n                    arrival_time = dp[loc][mask] + travel_time\n                    s_i = friend_start[i]\n                    e_i = friend_end[i]\n                    d_i = friend_duration[i]\n                    start_meeting = max(arrival_time, s_i)\n                    end_meeting = start_meeting + d_i\n                    if end_meeting <= e_i:\n                        new_mask = mask | (1 << i)\n                        if end_meeting < dp[next_loc][new_mask]:\n                            dp[next_loc][new_mask] = end_meeting\n                            parent[next_loc][new_mask] = (loc, mask, i, start_meeting, end_meeting)\n\nbest_count = -1\nbest_mask = None\nbest_loc = None\nfor mask in range(n_masks):\n    for loc in range(n):\n        if dp[loc][mask] < INF:\n            count = bin(mask).count(\"1\")\n            if count > best_count:\n                best_count = count\n                best_mask = mask\n                best_loc = loc\n\nitinerary_list = []\ncurrent_loc = best_loc\ncurrent_mask = best_mask\nwhile current_mask != 0 and parent[current_loc][current_mask] is not None:\n    prev_loc, prev_mask, friend_index, start_meeting, end_meeting = parent[current_loc][current_mask]\n    meeting = {\n        \"action\": \"meet\",\n        \"location\": locations[friend_index],\n        \"person\": friend_names[friend_index],\n        \"start_time\": minutes_to_time(start_meeting),\n        \"end_time\": minutes_to_time(end_meeting)\n    }\n    itinerary_list.append(meeting)\n    current_loc = prev_loc\n    current_mask = prev_mask\n\nitinerary_list.reverse()\n\nresult = {\n    \"itinerary\": itinerary_list\n}\n\nprint(json.dumps(result))\n```\n\n### Explanation\n1. **Time Conversion**: The `time_str_to_minutes` function converts time strings (e.g., \"9:00AM\") into minutes past midnight for easier arithmetic. The `minutes_to_time` function converts minutes back to the required time format (e.g., \"9:00\").\n\n2. **Travel Matrix**: The travel times between districts are stored in a dictionary and then converted into a 10x10 matrix for quick lookup during scheduling.\n\n3. **Dynamic Programming**: The DP table `dp[loc][mask]` tracks the earliest time to reach location `loc` after meeting friends represented by the bitmask `mask`. The `parent` table stores backtracking information to reconstruct the itinerary.\n\n4. **Scheduling**: For each state in the DP table, the algorithm attempts to extend the schedule by meeting each unvisited friend, ensuring the meeting fits within their availability window and accounts for travel time.\n\n5. **Reconstruction**: After finding the optimal state (maximizing the number of meetings), the itinerary is reconstructed by backtracking through the `parent` pointers and reversing the list to present meetings in chronological order.\n\n6. **Output**: The itinerary is formatted as a JSON object with each meeting's details (action, location, person, start, and end times) and printed."
    }
]