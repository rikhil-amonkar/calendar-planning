[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nRichmond District to Sunset District: 11.\nRichmond District to Haight-Ashbury: 10.\nRichmond District to Mission District: 20.\nRichmond District to Golden Gate Park: 9.\nSunset District to Richmond District: 12.\nSunset District to Haight-Ashbury: 15.\nSunset District to Mission District: 24.\nSunset District to Golden Gate Park: 11.\nHaight-Ashbury to Richmond District: 10.\nHaight-Ashbury to Sunset District: 15.\nHaight-Ashbury to Mission District: 11.\nHaight-Ashbury to Golden Gate Park: 7.\nMission District to Richmond District: 20.\nMission District to Sunset District: 24.\nMission District to Haight-Ashbury: 12.\nMission District to Golden Gate Park: 17.\nGolden Gate Park to Richmond District: 7.\nGolden Gate Park to Sunset District: 10.\nGolden Gate Park to Haight-Ashbury: 7.\nGolden Gate Park to Mission District: 17.\n\nCONSTRAINTS: You arrive at Richmond District at 9:00AM. Sarah will be at Sunset District from 10:45AM to 7:00PM. You'd like to meet Sarah for a minimum of 30 minutes. Richard will be at Haight-Ashbury from 11:45AM to 3:45PM. You'd like to meet Richard for a minimum of 90 minutes. Elizabeth will be at Mission District from 11:00AM to 5:15PM. You'd like to meet Elizabeth for a minimum of 120 minutes. Michelle will be at Golden Gate Park from 6:15PM to 8:45PM. You'd like to meet Michelle for a minimum of 90 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\n# SOLUTION:\nimport itertools\nimport json\n\ndef main():\n    # Define constraints in minutes since 9:00 AM\n    constraints = {\n        \"Sunset District\": {\"person\": \"Sarah\", \"min_duration\": 30, \"start\": 105, \"end\": 600},   # 10:45 AM to 7:00 PM\n        \"Haight-Ashbury\": {\"person\": \"Richard\", \"min_duration\": 90, \"start\": 165, \"end\": 405},  # 11:45 AM to 3:45 PM\n        \"Mission District\": {\"person\": \"Elizabeth\", \"min_duration\": 120, \"start\": 120, \"end\": 495}, # 11:00 AM to 5:15 PM\n        \"Golden Gate Park\": {\"person\": \"Michelle\", \"min_duration\": 90, \"start\": 555, \"end\": 705}   # 6:15 PM to 8:45 PM\n    }\n    \n    # Define travel times (in minutes)\n    travel_times = {\n        'Richmond District': {\n            'Sunset District': 11,\n            'Haight-Ashbury': 10,\n            'Mission District': 20,\n            'Golden Gate Park': 9\n        },\n        'Sunset District': {\n            'Richmond District': 12,\n            'Haight-Ashbury': 15,\n            'Mission District': 24,\n            'Golden Gate Park': 11\n        },\n        'Haight-Ashbury': {\n            'Richmond District': 10,\n            'Sunset District': 15,\n            'Mission District': 11,\n            'Golden Gate Park': 7\n        },\n        'Mission District': {\n            'Richmond District': 20,\n            'Sunset District': 24,\n            'Haight-Ashbury': 12,\n            'Golden Gate Park': 17\n        },\n        'Golden Gate Park': {\n            'Richmond District': 7,\n            'Sunset District': 10,\n            'Haight-Ashbury': 7,\n            'Mission District': 17\n        }\n    }\n    \n    locations = list(constraints.keys())\n    all_permutations = list(itertools.permutations(locations))\n    \n    best_schedule = []\n    best_count = 0\n    \n    for perm in all_permutations:\n        current_loc = 'Richmond District'\n        current_time = 0\n        schedule = []\n        count = 0\n        feasible = True\n        \n        for loc in perm:\n            travel_duration = travel_times[current_loc][loc]\n            current_time += travel_duration\n            constr = constraints[loc]\n            start_meeting = max(current_time, constr['start'])\n            end_meeting = start_meeting + constr['min_duration']\n            \n            if end_meeting > constr['end']:\n                feasible = False\n                break\n                \n            schedule.append({\n                'location': loc,\n                'person': constr['person'],\n                'start_time': start_meeting,\n                'end_time': end_meeting\n            })\n            count += 1\n            current_loc = loc\n            current_time = end_meeting\n        \n        if count > best_count:\n            best_count = count\n            best_schedule = schedule\n            if best_count == 4:\n                break\n    \n    # Convert minutes to time strings (24-hour format)\n    itinerary = []\n    for event in best_schedule:\n        start_total_minutes = 540 + event['start_time']  # 9:00 AM is 540 minutes from midnight\n        end_total_minutes = 540 + event['end_time']\n        \n        start_h = start_total_minutes // 60\n        start_m = start_total_minutes % 60\n        end_h = end_total_minutes // 60\n        end_m = end_total_minutes % 60\n        \n        start_str = f\"{start_h}:{start_m:02d}\"\n        end_str = f\"{end_h}:{end_m:02d}\"\n        \n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": event['location'],\n            \"person\": event['person'],\n            \"start_time\": start_str,\n            \"end_time\": end_str\n        })\n    \n    result = {\"itinerary\": itinerary}\n    print(json.dumps(result))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]