[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nRussian Hill to Presidio: 14.\nRussian Hill to Chinatown: 9.\nRussian Hill to Pacific Heights: 7.\nRussian Hill to Richmond District: 14.\nRussian Hill to Fisherman's Wharf: 7.\nRussian Hill to Golden Gate Park: 21.\nRussian Hill to Bayview: 23.\nPresidio to Russian Hill: 14.\nPresidio to Chinatown: 21.\nPresidio to Pacific Heights: 11.\nPresidio to Richmond District: 7.\nPresidio to Fisherman's Wharf: 19.\nPresidio to Golden Gate Park: 12.\nPresidio to Bayview: 31.\nChinatown to Russian Hill: 7.\nChinatown to Presidio: 19.\nChinatown to Pacific Heights: 10.\nChinatown to Richmond District: 20.\nChinatown to Fisherman's Wharf: 8.\nChinatown to Golden Gate Park: 23.\nChinatown to Bayview: 22.\nPacific Heights to Russian Hill: 7.\nPacific Heights to Presidio: 11.\nPacific Heights to Chinatown: 11.\nPacific Heights to Richmond District: 12.\nPacific Heights to Fisherman's Wharf: 13.\nPacific Heights to Golden Gate Park: 15.\nPacific Heights to Bayview: 22.\nRichmond District to Russian Hill: 13.\nRichmond District to Presidio: 7.\nRichmond District to Chinatown: 20.\nRichmond District to Pacific Heights: 10.\nRichmond District to Fisherman's Wharf: 18.\nRichmond District to Golden Gate Park: 9.\nRichmond District to Bayview: 26.\nFisherman's Wharf to Russian Hill: 7.\nFisherman's Wharf to Presidio: 17.\nFisherman's Wharf to Chinatown: 12.\nFisherman's Wharf to Pacific Heights: 12.\nFisherman's Wharf to Richmond District: 18.\nFisherman's Wharf to Golden Gate Park: 25.\nFisherman's Wharf to Bayview: 26.\nGolden Gate Park to Russian Hill: 19.\nGolden Gate Park to Presidio: 11.\nGolden Gate Park to Chinatown: 23.\nGolden Gate Park to Pacific Heights: 16.\nGolden Gate Park to Richmond District: 7.\nGolden Gate Park to Fisherman's Wharf: 24.\nGolden Gate Park to Bayview: 23.\nBayview to Russian Hill: 23.\nBayview to Presidio: 31.\nBayview to Chinatown: 18.\nBayview to Pacific Heights: 23.\nBayview to Richmond District: 25.\nBayview to Fisherman's Wharf: 25.\nBayview to Golden Gate Park: 22.\n\nCONSTRAINTS: You arrive at Russian Hill at 9:00AM. Matthew will be at Presidio from 11:00AM to 9:00PM. You'd like to meet Matthew for a minimum of 90 minutes. Margaret will be at Chinatown from 9:15AM to 6:45PM. You'd like to meet Margaret for a minimum of 90 minutes. Nancy will be at Pacific Heights from 2:15PM to 5:00PM. You'd like to meet Nancy for a minimum of 15 minutes. Helen will be at Richmond District from 7:45PM to 10:00PM. You'd like to meet Helen for a minimum of 60 minutes. Rebecca will be at Fisherman's Wharf from 9:15PM to 10:15PM. You'd like to meet Rebecca for a minimum of 60 minutes. Kimberly will be at Golden Gate Park from 1:00PM to 4:30PM. You'd like to meet Kimberly for a minimum of 120 minutes. Kenneth will be at Bayview from 2:30PM to 6:00PM. You'd like to meet Kenneth for a minimum of 60 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\n\ndef main():\n    # Define the travel matrix as a dictionary of dictionaries\n    travel_matrix = {\n        \"Russian Hill\": {\n            \"Presidio\": 14,\n            \"Chinatown\": 9,\n            \"Pacific Heights\": 7,\n            \"Richmond District\": 14,\n            \"Fisherman's Wharf\": 7,\n            \"Golden Gate Park\": 21,\n            \"Bayview\": 23\n        },\n        \"Presidio\": {\n            \"Russian Hill\": 14,\n            \"Chinatown\": 21,\n            \"Pacific Heights\": 11,\n            \"Richmond District\": 7,\n            \"Fisherman's Wharf\": 19,\n            \"Golden Gate Park\": 12,\n            \"Bayview\": 31\n        },\n        \"Chinatown\": {\n            \"Russian Hill\": 7,\n            \"Presidio\": 21,\n            \"Pacific Heights\": 10,\n            \"Richmond District\": 20,\n            \"Fisherman's Wharf\": 8,\n            \"Golden Gate Park\": 23,\n            \"Bayview\": 22\n        },\n        \"Pacific Heights\": {\n            \"Russian Hill\": 7,\n            \"Presidio\": 11,\n            \"Chinatown\": 11,\n            \"Richmond District\": 12,\n            \"Fisherman's Wharf\": 13,\n            \"Golden Gate Park\": 15,\n            \"Bayview\": 22\n        },\n        \"Richmond District\": {\n            \"Russian Hill\": 13,\n            \"Presidio\": 7,\n            \"Chinatown\": 20,\n            \"Pacific Heights\": 10,\n            \"Fisherman's Wharf\": 18,\n            \"Golden Gate Park\": 9,\n            \"Bayview\": 26\n        },\n        \"Fisherman's Wharf\": {\n            \"Russian Hill\": 7,\n            \"Presidio\": 17,\n            \"Chinatown\": 12,\n            \"Pacific Heights\": 12,\n            \"Richmond District\": 18,\n            \"Golden Gate Park\": 25,\n            \"Bayview\": 26\n        },\n        \"Golden Gate Park\": {\n            \"Russian Hill\": 19,\n            \"Presidio\": 11,\n            \"Chinatown\": 23,\n            \"Pacific Heights\": 16,\n            \"Richmond District\": 7,\n            \"Fisherman's Wharf\": 24,\n            \"Bayview\": 23\n        },\n        \"Bayview\": {\n            \"Russian Hill\": 23,\n            \"Presidio\": 31,\n            \"Chinatown\": 18,\n            \"Pacific Heights\": 23,\n            \"Richmond District\": 25,\n            \"Fisherman's Wharf\": 25,\n            \"Golden Gate Park\": 22\n        }\n    }\n    \n    # Define the friends with their constraints (time in minutes)\n    friends = [\n        {\"name\": \"Matthew\", \"location\": \"Presidio\", \"start\": 11*60, \"end\": 21*60, \"min_duration\": 90},\n        {\"name\": \"Margaret\", \"location\": \"Chinatown\", \"start\": 9*60+15, \"end\": 18*60+45, \"min_duration\": 90},\n        {\"name\": \"Nancy\", \"location\": \"Pacific Heights\", \"start\": 14*60+15, \"end\": 17*60, \"min_duration\": 15},\n        {\"name\": \"Helen\", \"location\": \"Richmond District\", \"start\": 19*60+45, \"end\": 22*60, \"min_duration\": 60},\n        {\"name\": \"Rebecca\", \"location\": \"Fisherman's Wharf\", \"start\": 21*60+15, \"end\": 22*60+15, \"min_duration\": 60},\n        {\"name\": \"Kimberly\", \"location\": \"Golden Gate Park\", \"start\": 13*60, \"end\": 16*60+30, \"min_duration\": 120},\n        {\"name\": \"Kenneth\", \"location\": \"Bayview\", \"start\": 14*60+30, \"end\": 18*60, \"min_duration\": 60}\n    ]\n    \n    # Helper function to convert minutes to time string (H:MM)\n    def minutes_to_time(mins):\n        h = mins // 60\n        m = mins % 60\n        return f\"{h}:{m:02d}\"\n    \n    # Memoization dictionary for DFS states\n    memo = {}\n    \n    # DFS function with memoization\n    def dfs(current_time, current_location, unscheduled):\n        key = (current_time, current_location, unscheduled)\n        if key in memo:\n            return memo[key]\n        \n        best_count = 0\n        best_itinerary = []\n        \n        # If no more friends to schedule, return empty itinerary\n        if not unscheduled:\n            return (0, [])\n        \n        # Try to schedule each unscheduled friend\n        for idx in sorted(unscheduled):\n            friend = friends[idx]\n            loc = friend['location']\n            \n            # Get travel time\n            if current_location == loc:\n                travel_time = 0\n            else:\n                travel_time = travel_matrix[current_location][loc]\n            \n            arrival_time = current_time + travel_time\n            meeting_start = max(arrival_time, friend['start'])\n            meeting_end = meeting_start + friend['min_duration']\n            \n            # Check if meeting is feasible\n            if meeting_end <= friend['end']:\n                # Create meeting event\n                meeting_event = {\n                    \"action\": \"meet\",\n                    \"location\": loc,\n                    \"person\": friend['name'],\n                    \"start_time\": minutes_to_time(meeting_start),\n                    \"end_time\": minutes_to_time(meeting_end)\n                }\n                new_unscheduled = unscheduled - {idx}\n                # Recurse to schedule the remaining friends\n                count_rest, itinerary_rest = dfs(meeting_end, loc, new_unscheduled)\n                total_count = 1 + count_rest\n                # Update best if we found a better count\n                if total_count > best_count:\n                    best_count = total_count\n                    best_itinerary = [meeting_event] + itinerary_rest\n        \n        memo[key] = (best_count, best_itinerary)\n        return (best_count, best_itinerary)\n    \n    # Initial state: start at Russian Hill at 9:00 AM (540 minutes) with all friends unscheduled\n    start_time = 540\n    start_location = \"Russian Hill\"\n    unscheduled = frozenset(range(len(friends)))\n    count, itinerary = dfs(start_time, start_location, unscheduled)\n    \n    # Format the result as JSON\n    result = {\n        \"itinerary\": itinerary\n    }\n    print(json.dumps(result))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]