[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nPresidio to Pacific Heights: 11.\nPresidio to Golden Gate Park: 12.\nPresidio to Fisherman's Wharf: 19.\nPresidio to Marina District: 11.\nPresidio to Alamo Square: 19.\nPresidio to Sunset District: 15.\nPresidio to Nob Hill: 18.\nPresidio to North Beach: 18.\nPacific Heights to Presidio: 11.\nPacific Heights to Golden Gate Park: 15.\nPacific Heights to Fisherman's Wharf: 13.\nPacific Heights to Marina District: 6.\nPacific Heights to Alamo Square: 10.\nPacific Heights to Sunset District: 21.\nPacific Heights to Nob Hill: 8.\nPacific Heights to North Beach: 9.\nGolden Gate Park to Presidio: 11.\nGolden Gate Park to Pacific Heights: 16.\nGolden Gate Park to Fisherman's Wharf: 24.\nGolden Gate Park to Marina District: 16.\nGolden Gate Park to Alamo Square: 9.\nGolden Gate Park to Sunset District: 10.\nGolden Gate Park to Nob Hill: 20.\nGolden Gate Park to North Beach: 23.\nFisherman's Wharf to Presidio: 17.\nFisherman's Wharf to Pacific Heights: 12.\nFisherman's Wharf to Golden Gate Park: 25.\nFisherman's Wharf to Marina District: 9.\nFisherman's Wharf to Alamo Square: 21.\nFisherman's Wharf to Sunset District: 27.\nFisherman's Wharf to Nob Hill: 11.\nFisherman's Wharf to North Beach: 6.\nMarina District to Presidio: 10.\nMarina District to Pacific Heights: 7.\nMarina District to Golden Gate Park: 18.\nMarina District to Fisherman's Wharf: 10.\nMarina District to Alamo Square: 15.\nMarina District to Sunset District: 19.\nMarina District to Nob Hill: 12.\nMarina District to North Beach: 11.\nAlamo Square to Presidio: 17.\nAlamo Square to Pacific Heights: 10.\nAlamo Square to Golden Gate Park: 9.\nAlamo Square to Fisherman's Wharf: 19.\nAlamo Square to Marina District: 15.\nAlamo Square to Sunset District: 16.\nAlamo Square to Nob Hill: 11.\nAlamo Square to North Beach: 15.\nSunset District to Presidio: 16.\nSunset District to Pacific Heights: 21.\nSunset District to Golden Gate Park: 11.\nSunset District to Fisherman's Wharf: 29.\nSunset District to Marina District: 21.\nSunset District to Alamo Square: 17.\nSunset District to Nob Hill: 27.\nSunset District to North Beach: 28.\nNob Hill to Presidio: 17.\nNob Hill to Pacific Heights: 8.\nNob Hill to Golden Gate Park: 17.\nNob Hill to Fisherman's Wharf: 10.\nNob Hill to Marina District: 11.\nNob Hill to Alamo Square: 11.\nNob Hill to Sunset District: 24.\nNob Hill to North Beach: 8.\nNorth Beach to Presidio: 17.\nNorth Beach to Pacific Heights: 8.\nNorth Beach to Golden Gate Park: 22.\nNorth Beach to Fisherman's Wharf: 5.\nNorth Beach to Marina District: 9.\nNorth Beach to Alamo Square: 16.\nNorth Beach to Sunset District: 27.\nNorth Beach to Nob Hill: 7.\n\nCONSTRAINTS: You arrive at Presidio at 9:00AM. Kevin will be at Pacific Heights from 7:15AM to 8:45AM. You'd like to meet Kevin for a minimum of 90 minutes. Michelle will be at Golden Gate Park from 8:00PM to 9:00PM. You'd like to meet Michelle for a minimum of 15 minutes. Emily will be at Fisherman's Wharf from 4:15PM to 7:00PM. You'd like to meet Emily for a minimum of 30 minutes. Mark will be at Marina District from 6:15PM to 7:45PM. You'd like to meet Mark for a minimum of 75 minutes. Barbara will be at Alamo Square from 5:00PM to 7:00PM. You'd like to meet Barbara for a minimum of 120 minutes. Laura will be at Sunset District from 7:00PM to 9:15PM. You'd like to meet Laura for a minimum of 75 minutes. Mary will be at Nob Hill from 5:30PM to 7:00PM. You'd like to meet Mary for a minimum of 45 minutes. Helen will be at North Beach from 11:00AM to 12:15PM. You'd like to meet Helen for a minimum of 45 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "SOLUTION:\n```python\nimport json\n\ndef time_str_to_minutes(time_str):\n    # Convert time string (e.g., \"9:00AM\" or \"8:00PM\") to minutes from 9:00AM\n    time_str_clean = time_str.replace(\" \", \"\")\n    hour_part = time_str_clean[:-2]\n    period = time_str_clean[-2:]\n    hour, minute = map(int, hour_part.split(':'))\n    if period == 'PM' and hour != 12:\n        hour += 12\n    if period == 'AM' and hour == 12:\n        hour = 0\n    total_minutes = hour * 60 + minute\n    base_minutes = 9 * 60  # 9:00AM in minutes from midnight\n    return total_minutes - base_minutes\n\ndef minutes_to_time(minutes):\n    base_minutes = 9 * 60\n    total_minutes = base_minutes + minutes\n    h = total_minutes // 60\n    m = total_minutes % 60\n    return f\"{h}:{m:02d}\"\n\n# Define locations\nlocations = [\n    \"Presidio\",\n    \"Pacific Heights\",\n    \"Golden Gate Park\",\n    \"Fisherman's Wharf\",\n    \"Marina District\",\n    \"Alamo Square\",\n    \"Sunset District\",\n    \"Nob Hill\",\n    \"North Beach\"\n]\n\n# Build travel_times dictionary from provided data\ntravel_times = {\n    \"Presidio\": {\n        \"Presidio\": 0,\n        \"Pacific Heights\": 11,\n        \"Golden Gate Park\": 12,\n        \"Fisherman's Wharf\": 19,\n        \"Marina District\": 11,\n        \"Alamo Square\": 19,\n        \"Sunset District\": 15,\n        \"Nob Hill\": 18,\n        \"North Beach\": 18\n    },\n    \"Pacific Heights\": {\n        \"Presidio\": 11,\n        \"Pacific Heights\": 0,\n        \"Golden Gate Park\": 15,\n        \"Fisherman's Wharf\": 13,\n        \"Marina District\": 6,\n        \"Alamo Square\": 10,\n        \"Sunset District\": 21,\n        \"Nob Hill\": 8,\n        \"North Beach\": 9\n    },\n    \"Golden Gate Park\": {\n        \"Presidio\": 11,\n        \"Pacific Heights\": 16,\n        \"Golden Gate Park\": 0,\n        \"Fisherman's Wharf\": 24,\n        \"Marina District\": 16,\n        \"Alamo Square\": 9,\n        \"Sunset District\": 10,\n        \"Nob Hill\": 20,\n        \"North Beach\": 23\n    },\n    \"Fisherman's Wharf\": {\n        \"Presidio\": 17,\n        \"Pacific Heights\": 12,\n        \"Golden Gate Park\": 25,\n        \"Fisherman's Wharf\": 0,\n        \"Marina District\": 9,\n        \"Alamo Square\": 21,\n        \"Sunset District\": 27,\n        \"Nob Hill\": 11,\n        \"North Beach\": 6\n    },\n    \"Marina District\": {\n        \"Presidio\": 10,\n        \"Pacific Heights\": 7,\n        \"Golden Gate Park\": 18,\n        \"Fisherman's Wharf\": 10,\n        \"Marina District\": 0,\n        \"Alamo Square\": 15,\n        \"Sunset District\": 19,\n        \"Nob Hill\": 12,\n        \"North Beach\": 11\n    },\n    \"Alamo Square\": {\n        \"Presidio\": 17,\n        \"Pacific Heights\": 10,\n        \"Golden Gate Park\": 9,\n        \"Fisherman's Wharf\": 19,\n        \"Marina District\": 15,\n        \"Alamo Square\": 0,\n        \"Sunset District\": 16,\n        \"Nob Hill\": 11,\n        \"North Beach\": 15\n    },\n    \"Sunset District\": {\n        \"Presidio\": 16,\n        \"Pacific Heights\": 21,\n        \"Golden Gate Park\": 11,\n        \"Fisherman's Wharf\": 29,\n        \"Marina District\": 21,\n        \"Alamo Square\": 17,\n        \"Sunset District\": 0,\n        \"Nob Hill\": 27,\n        \"North Beach\": 28\n    },\n    \"Nob Hill\": {\n        \"Presidio\": 17,\n        \"Pacific Heights\": 8,\n        \"Golden Gate Park\": 17,\n        \"Fisherman's Wharf\": 10,\n        \"Marina District\": 11,\n        \"Alamo Square\": 11,\n        \"Sunset District\": 24,\n        \"Nob Hill\": 0,\n        \"North Beach\": 7\n    },\n    \"North Beach\": {\n        \"Presidio\": 17,\n        \"Pacific Heights\": 8,\n        \"Golden Gate Park\": 22,\n        \"Fisherman's Wharf\": 5,\n        \"Marina District\": 9,\n        \"Alamo Square\": 16,\n        \"Sunset District\": 27,\n        \"Nob Hill\": 7,\n        \"North Beach\": 0\n    }\n}\n\n# Build travel_matrix: 9x9 matrix\ntravel_matrix = []\nfor loc1 in locations:\n    row = []\n    for loc2 in locations:\n        row.append(travel_times[loc1][loc2])\n    travel_matrix.append(row)\n\n# Define friends and their constraints (converted to minutes from 9:00AM)\nfriends = [\n    {'name': 'Michelle', 'location_name': 'Golden Gate Park', 'location_index': 2, \n     'start': time_str_to_minutes(\"8:00PM\"), 'end': time_str_to_minutes(\"9:00PM\"), 'duration': 15},\n    {'name': 'Emily', 'location_name': \"Fisherman's Wharf\", 'location_index': 3, \n     'start': time_str_to_minutes(\"4:15PM\"), 'end': time_str_to_minutes(\"7:00PM\"), 'duration': 30},\n    {'name': 'Mark', 'location_name': 'Marina District', 'location_index': 4, \n     'start': time_str_to_minutes(\"6:15PM\"), 'end': time_str_to_minutes(\"7:45PM\"), 'duration': 75},\n    {'name': 'Barbara', 'location_name': 'Alamo Square', 'location_index': 5, \n     'start': time_str_to_minutes(\"5:00PM\"), 'end': time_str_to_minutes(\"7:00PM\"), 'duration': 120},\n    {'name': 'Laura', 'location_name': 'Sunset District', 'location_index': 6, \n     'start': time_str_to_minutes(\"7:00PM\"), 'end': time_str_to_minutes(\"9:15PM\"), 'duration': 75},\n    {'name': 'Mary', 'location_name': 'Nob Hill', 'location_index': 7, \n     'start': time_str_to_minutes(\"5:30PM\"), 'end': time_str_to_minutes(\"7:00PM\"), 'duration': 45},\n    {'name': 'Helen', 'location_name': 'North Beach', 'location_index': 8, \n     'start': time_str_to_minutes(\"11:00AM\"), 'end': time_str_to_minutes(\"12:15PM\"), 'duration': 45}\n]\n\n# Map location index to friend index (if any friend is at that location)\nlocation_to_friend = {}\nfor idx, friend in enumerate(friends):\n    location_to_friend[friend['location_index']] = idx\n\n# Maximum time: 9:15PM (Laura's end) -> minutes from 9:00AM\nmax_time = time_str_to_minutes(\"9:15PM\")\n\n# Initialize dp and prev arrays\ndp = [[[False] * 128 for _ in range(9)] for __ in range(max_time + 1)]\nprev = [[[None] * 128 for _ in range(9)] for __ in range(max_time + 1)]\n\n# Base state: at time 0 (9:00AM) at Presidio (index 0) with no meetings\ndp[0][0][0] = True\n\n# Run the DP\nfor t in range(max_time + 1):\n    for loc in range(9):\n        for mask in range(128):\n            if not dp[t][loc][mask]:\n                continue\n            # Option 1: Travel to another location\n            for next_loc in range(9):\n                if next_loc == loc:\n                    continue\n                tt = travel_matrix[loc][next_loc]\n                nt = t + tt\n                if nt <= max_time and not dp[nt][next_loc][mask]:\n                    dp[nt][next_loc][mask] = True\n                    prev[nt][next_loc][mask] = (t, loc, mask, 'travel', next_loc)\n            # Option 2: Start a meeting at current location (if applicable)\n            if loc in location_to_friend:\n                friend_idx = location_to_friend[loc]\n                if mask & (1 << friend_idx) == 0:\n                    friend = friends[friend_idx]\n                    start_meeting = max(t, friend['start'])\n                    end_meeting = start_meeting + friend['duration']\n                    if end_meeting <= friend['end'] and end_meeting <= max_time:\n                        new_mask = mask | (1 << friend_idx)\n                        if not dp[end_meeting][loc][new_mask]:\n                            dp[end_meeting][loc][new_mask] = True\n                            prev[end_meeting][loc][new_mask] = (t, loc, mask, 'meet', friend_idx)\n\n# Find the state with the maximum number of meetings\nbest_count = -1\nbest_t = -1\nbest_loc = -1\nbest_mask = -1\nfor t in range(max_time + 1):\n    for loc in range(9):\n        for mask in range(128):\n            if dp[t][loc][mask]:\n                count = bin(mask).count(\"1\")\n                if count > best_count:\n                    best_count = count\n                    best_t = t\n                    best_loc = loc\n                    best_mask = mask\n\n# Backtrack to get the itinerary (only meetings)\nitinerary_actions = []\nif best_count > 0:\n    t = best_t\n    loc = best_loc\n    mask = best_mask\n    while prev[t][loc][mask] is not None:\n        prev_t, prev_loc, prev_mask, action_type, info = prev[t][loc][mask]\n        if action_type == 'meet':\n            friend_idx = info\n            friend = friends[friend_idx]\n            start_meeting = max(prev_t, friend['start'])\n            end_meeting = t\n            action_entry = {\n                \"action\": \"meet\",\n                \"location\": friend['location_name'],\n                \"person\": friend['name'],\n                \"start_time\": minutes_to_time(start_meeting),\n                \"end_time\": minutes_to_time(end_meeting)\n            }\n            itinerary_actions.append(action_entry)\n            t, loc, mask = prev_t, prev_loc, prev_mask\n        else:\n            t, loc, mask = prev_t, prev_loc, prev_mask\n    itinerary_actions.reverse()\n\n# Output the result as JSON\nresult = {\n    \"itinerary\": itinerary_actions\n}\nprint(json.dumps(result))\n```"
    }
]