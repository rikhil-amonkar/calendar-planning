[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nMission District to Alamo Square: 11.\nMission District to Presidio: 25.\nMission District to Russian Hill: 15.\nMission District to North Beach: 17.\nMission District to Golden Gate Park: 17.\nMission District to Richmond District: 20.\nMission District to Embarcadero: 19.\nMission District to Financial District: 15.\nMission District to Marina District: 19.\nAlamo Square to Mission District: 10.\nAlamo Square to Presidio: 17.\nAlamo Square to Russian Hill: 13.\nAlamo Square to North Beach: 15.\nAlamo Square to Golden Gate Park: 9.\nAlamo Square to Richmond District: 11.\nAlamo Square to Embarcadero: 16.\nAlamo Square to Financial District: 17.\nAlamo Square to Marina District: 15.\nPresidio to Mission District: 26.\nPresidio to Alamo Square: 19.\nPresidio to Russian Hill: 14.\nPresidio to North Beach: 18.\nPresidio to Golden Gate Park: 12.\nPresidio to Richmond District: 7.\nPresidio to Embarcadero: 20.\nPresidio to Financial District: 23.\nPresidio to Marina District: 11.\nRussian Hill to Mission District: 16.\nRussian Hill to Alamo Square: 15.\nRussian Hill to Presidio: 14.\nRussian Hill to North Beach: 5.\nRussian Hill to Golden Gate Park: 21.\nRussian Hill to Richmond District: 14.\nRussian Hill to Embarcadero: 8.\nRussian Hill to Financial District: 11.\nRussian Hill to Marina District: 7.\nNorth Beach to Mission District: 18.\nNorth Beach to Alamo Square: 16.\nNorth Beach to Presidio: 17.\nNorth Beach to Russian Hill: 4.\nNorth Beach to Golden Gate Park: 22.\nNorth Beach to Richmond District: 18.\nNorth Beach to Embarcadero: 6.\nNorth Beach to Financial District: 8.\nNorth Beach to Marina District: 9.\nGolden Gate Park to Mission District: 17.\nGolden Gate Park to Alamo Square: 9.\nGolden Gate Park to Presidio: 11.\nGolden Gate Park to Russian Hill: 19.\nGolden Gate Park to North Beach: 23.\nGolden Gate Park to Richmond District: 7.\nGolden Gate Park to Embarcadero: 25.\nGolden Gate Park to Financial District: 26.\nGolden Gate Park to Marina District: 16.\nRichmond District to Mission District: 20.\nRichmond District to Alamo Square: 13.\nRichmond District to Presidio: 7.\nRichmond District to Russian Hill: 13.\nRichmond District to North Beach: 17.\nRichmond District to Golden Gate Park: 9.\nRichmond District to Embarcadero: 19.\nRichmond District to Financial District: 22.\nRichmond District to Marina District: 9.\nEmbarcadero to Mission District: 20.\nEmbarcadero to Alamo Square: 19.\nEmbarcadero to Presidio: 20.\nEmbarcadero to Russian Hill: 8.\nEmbarcadero to North Beach: 5.\nEmbarcadero to Golden Gate Park: 25.\nEmbarcadero to Richmond District: 21.\nEmbarcadero to Financial District: 5.\nEmbarcadero to Marina District: 12.\nFinancial District to Mission District: 17.\nFinancial District to Alamo Square: 17.\nFinancial District to Presidio: 22.\nFinancial District to Russian Hill: 11.\nFinancial District to North Beach: 7.\nFinancial District to Golden Gate Park: 23.\nFinancial District to Richmond District: 21.\nFinancial District to Embarcadero: 4.\nFinancial District to Marina District: 15.\nMarina District to Mission District: 20.\nMarina District to Alamo Square: 15.\nMarina District to Presidio: 10.\nMarina District to Russian Hill: 8.\nMarina District to North Beach: 11.\nMarina District to Golden Gate Park: 18.\nMarina District to Richmond District: 11.\nMarina District to Embarcadero: 14.\nMarina District to Financial District: 17.\n\nCONSTRAINTS: You arrive at Mission District at 9:00AM. Laura will be at Alamo Square from 2:30PM to 4:15PM. You'd like to meet Laura for a minimum of 75 minutes. Brian will be at Presidio from 10:15AM to 5:00PM. You'd like to meet Brian for a minimum of 30 minutes. Karen will be at Russian Hill from 6:00PM to 8:15PM. You'd like to meet Karen for a minimum of 90 minutes. Stephanie will be at North Beach from 10:15AM to 4:00PM. You'd like to meet Stephanie for a minimum of 75 minutes. Helen will be at Golden Gate Park from 11:30AM to 9:45PM. You'd like to meet Helen for a minimum of 120 minutes. Sandra will be at Richmond District from 8:00AM to 3:15PM. You'd like to meet Sandra for a minimum of 30 minutes. Mary will be at Embarcadero from 4:45PM to 6:45PM. You'd like to meet Mary for a minimum of 120 minutes. Deborah will be at Financial District from 7:00PM to 8:45PM. You'd like to meet Deborah for a minimum of 105 minutes. Elizabeth will be at Marina District from 8:30AM to 1:15PM. You'd like to meet Elizabeth for a minimum of 105 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\n\ndef format_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h}:{m:02d}\"\n\ndef main():\n    # Define locations with indices\n    locations = [\n        \"Mission District\",\n        \"Alamo Square\",\n        \"Presidio\",\n        \"Russian Hill\",\n        \"North Beach\",\n        \"Golden Gate Park\",\n        \"Richmond District\",\n        \"Embarcadero\",\n        \"Financial District\",\n        \"Marina District\"\n    ]\n    \n    # Asymmetric travel time matrix (10x10)\n    travel_time = [\n        [0, 11, 25, 15, 17, 17, 20, 19, 15, 19],  # from Mission District (0)\n        [10, 0, 17, 13, 15, 9, 11, 16, 17, 15],   # from Alamo Square (1)\n        [26, 19, 0, 14, 18, 12, 7, 20, 23, 11],   # from Presidio (2)\n        [16, 15, 14, 0, 5, 21, 14, 8, 11, 7],     # from Russian Hill (3)\n        [18, 16, 17, 4, 0, 22, 18, 6, 8, 9],      # from North Beach (4)\n        [17, 9, 11, 19, 23, 0, 7, 25, 26, 16],    # from Golden Gate Park (5)\n        [20, 13, 7, 13, 17, 9, 0, 19, 22, 9],     # from Richmond District (6)\n        [20, 19, 20, 8, 5, 25, 21, 0, 5, 12],    # from Embarcadero (7)\n        [17, 17, 22, 11, 7, 23, 21, 4, 0, 15],    # from Financial District (8)\n        [20, 15, 10, 8, 11, 18, 11, 14, 17, 0]   # from Marina District (9)\n    ]\n    \n    # Friends data: name, location index, start (min), end (min), duration (min)\n    friends = [\n        {\"name\": \"Laura\", \"location\": 1, \"start\": 870, \"end\": 975, \"duration\": 75},      # Alamo Square (1)\n        {\"name\": \"Brian\", \"location\": 2, \"start\": 615, \"end\": 1020, \"duration\": 30},      # Presidio (2)\n        {\"name\": \"Karen\", \"location\": 3, \"start\": 1080, \"end\": 1215, \"duration\": 90},     # Russian Hill (3)\n        {\"name\": \"Stephanie\", \"location\": 4, \"start\": 615, \"end\": 960, \"duration\": 75},    # North Beach (4)\n        {\"name\": \"Helen\", \"location\": 5, \"start\": 690, \"end\": 1305, \"duration\": 120},      # Golden Gate Park (5)\n        {\"name\": \"Sandra\", \"location\": 6, \"start\": 480, \"end\": 915, \"duration\": 30},       # Richmond District (6)\n        {\"name\": \"Mary\", \"location\": 7, \"start\": 1005, \"end\": 1125, \"duration\": 120},      # Embarcadero (7)\n        {\"name\": \"Deborah\", \"location\": 8, \"start\": 1140, \"end\": 1245, \"duration\": 105},   # Financial District (8)\n        {\"name\": \"Elizabeth\", \"location\": 9, \"start\": 510, \"end\": 795, \"duration\": 105}    # Marina District (9)\n    ]\n    \n    n = len(friends)  # 9 friends\n    n_locations = 10  # 10 locations including Mission District\n    \n    # Initialize DP table: dp[mask][location] = earliest finish time\n    dp = [[10**9] * n_locations for _ in range(1 << n)]\n    # Start at Mission District (index 0) at 9:00 AM (540 minutes)\n    dp[0][0] = 540\n    \n    # Parent structure: (prev_mask, prev_location, friend_index, start_time, end_time)\n    parent = [[None] * n_locations for _ in range(1 << n)]\n    \n    # Iterate over all masks\n    for mask in range(1 << n):\n        for loc in range(n_locations):\n            if dp[mask][loc] == 10**9:\n                continue\n            # Try to meet each unvisited friend\n            for j in range(n):\n                if mask & (1 << j):\n                    continue\n                friend_loc = friends[j][\"location\"]\n                # Travel time from current location to friend's location\n                t = travel_time[loc][friend_loc]\n                arrival_time = dp[mask][loc] + t\n                # Calculate meeting start time (must be within friend's window)\n                start_meeting = max(arrival_time, friends[j][\"start\"])\n                end_meeting = start_meeting + friends[j][\"duration\"]\n                # Check if meeting fits within friend's availability\n                if end_meeting <= friends[j][\"end\"]:\n                    new_mask = mask | (1 << j)\n                    # Update DP if we found an earlier finish time\n                    if end_meeting < dp[new_mask][friend_loc]:\n                        dp[new_mask][friend_loc] = end_meeting\n                        parent[new_mask][friend_loc] = (mask, loc, j, start_meeting, end_meeting)\n    \n    # Find the best state (maximize number of meetings, then minimize finish time)\n    best_mask = None\n    best_count = -1\n    best_loc = -1\n    best_time = 10**9\n    for mask in range(1 << n):\n        count = bin(mask).count(\"1\")\n        for loc in range(n_locations):\n            if dp[mask][loc] < 10**9:\n                if count > best_count or (count == best_count and dp[mask][loc] < best_time):\n                    best_count = count\n                    best_mask = mask\n                    best_loc = loc\n                    best_time = dp[mask][loc]\n    \n    # Backtrack to build itinerary\n    itinerary = []\n    cur_mask = best_mask\n    cur_loc = best_loc\n    while cur_mask != 0 and parent[cur_mask][cur_loc] is not None:\n        prev_mask, prev_loc, j, start_meeting, end_meeting = parent[cur_mask][cur_loc]\n        # Append meeting details (in reverse order)\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": locations[friends[j][\"location\"]],\n            \"person\": friends[j][\"name\"],\n            \"start_time\": format_time(start_meeting),\n            \"end_time\": format_time(end_meeting)\n        })\n        cur_mask = prev_mask\n        cur_loc = prev_loc\n    \n    # Reverse to get chronological order\n    itinerary.reverse()\n    \n    # Output as JSON\n    result = {\"itinerary\": itinerary}\n    print(json.dumps(result))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]