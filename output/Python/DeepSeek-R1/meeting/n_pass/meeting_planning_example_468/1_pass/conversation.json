[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nThe Castro to Bayview: 19.\nThe Castro to Pacific Heights: 16.\nThe Castro to Alamo Square: 8.\nThe Castro to Fisherman's Wharf: 24.\nThe Castro to Golden Gate Park: 11.\nBayview to The Castro: 20.\nBayview to Pacific Heights: 23.\nBayview to Alamo Square: 16.\nBayview to Fisherman's Wharf: 25.\nBayview to Golden Gate Park: 22.\nPacific Heights to The Castro: 16.\nPacific Heights to Bayview: 22.\nPacific Heights to Alamo Square: 10.\nPacific Heights to Fisherman's Wharf: 13.\nPacific Heights to Golden Gate Park: 15.\nAlamo Square to The Castro: 8.\nAlamo Square to Bayview: 16.\nAlamo Square to Pacific Heights: 10.\nAlamo Square to Fisherman's Wharf: 19.\nAlamo Square to Golden Gate Park: 9.\nFisherman's Wharf to The Castro: 26.\nFisherman's Wharf to Bayview: 26.\nFisherman's Wharf to Pacific Heights: 12.\nFisherman's Wharf to Alamo Square: 20.\nFisherman's Wharf to Golden Gate Park: 25.\nGolden Gate Park to The Castro: 13.\nGolden Gate Park to Bayview: 23.\nGolden Gate Park to Pacific Heights: 16.\nGolden Gate Park to Alamo Square: 10.\nGolden Gate Park to Fisherman's Wharf: 24.\n\nCONSTRAINTS: You arrive at The Castro at 9:00AM. Rebecca will be at Bayview from 9:00AM to 12:45PM. You'd like to meet Rebecca for a minimum of 90 minutes. Amanda will be at Pacific Heights from 6:30PM to 9:45PM. You'd like to meet Amanda for a minimum of 90 minutes. James will be at Alamo Square from 9:45AM to 9:15PM. You'd like to meet James for a minimum of 90 minutes. Sarah will be at Fisherman's Wharf from 8:00AM to 9:30PM. You'd like to meet Sarah for a minimum of 90 minutes. Melissa will be at Golden Gate Park from 9:00AM to 6:45PM. You'd like to meet Melissa for a minimum of 90 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport itertools\nimport json\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02}\"\n\ndef build_schedule(perm, travel_times, start_time, start_location):\n    current_time = start_time\n    current_location = start_location\n    itinerary = []\n    for friend in perm:\n        travel_duration = travel_times[current_location][friend['location']]\n        current_time += travel_duration\n        meeting_start = max(current_time, friend['start'])\n        meeting_end = meeting_start + friend['min_duration']\n        if meeting_end > friend['end']:\n            return False, None\n        itinerary.append({\n            'location': friend['location'],\n            'person': friend['name'],\n            'start_time': minutes_to_time(meeting_start),\n            'end_time': minutes_to_time(meeting_end)\n        })\n        current_time = meeting_end\n        current_location = friend['location']\n    return True, itinerary\n\ntravel_times = {\n    \"The Castro\": {\n        \"Bayview\": 19,\n        \"Pacific Heights\": 16,\n        \"Alamo Square\": 8,\n        \"Fisherman's Wharf\": 24,\n        \"Golden Gate Park\": 11\n    },\n    \"Bayview\": {\n        \"The Castro\": 20,\n        \"Pacific Heights\": 23,\n        \"Alamo Square\": 16,\n        \"Fisherman's Wharf\": 25,\n        \"Golden Gate Park\": 22\n    },\n    \"Pacific Heights\": {\n        \"The Castro\": 16,\n        \"Bayview\": 22,\n        \"Alamo Square\": 10,\n        \"Fisherman's Wharf\": 13,\n        \"Golden Gate Park\": 15\n    },\n    \"Alamo Square\": {\n        \"The Castro\": 8,\n        \"Bayview\": 16,\n        \"Pacific Heights\": 10,\n        \"Fisherman's Wharf\": 19,\n        \"Golden Gate Park\": 9\n    },\n    \"Fisherman's Wharf\": {\n        \"The Castro\": 26,\n        \"Bayview\": 26,\n        \"Pacific Heights\": 12,\n        \"Alamo Square\": 20,\n        \"Golden Gate Park\": 25\n    },\n    \"Golden Gate Park\": {\n        \"The Castro\": 13,\n        \"Bayview\": 23,\n        \"Pacific Heights\": 16,\n        \"Alamo Square\": 10,\n        \"Fisherman's Wharf\": 24\n    }\n}\n\nfriends = [\n    {'name': 'Rebecca', 'location': 'Bayview', 'start': 540, 'end': 765, 'min_duration': 90},\n    {'name': 'Amanda', 'location': 'Pacific Heights', 'start': 1110, 'end': 1305, 'min_duration': 90},\n    {'name': 'James', 'location': 'Alamo Square', 'start': 585, 'end': 1275, 'min_duration': 90},\n    {'name': 'Sarah', 'location': \"Fisherman's Wharf\", 'start': 480, 'end': 1290, 'min_duration': 90},\n    {'name': 'Melissa', 'location': 'Golden Gate Park', 'start': 540, 'end': 1125, 'min_duration': 90}\n]\n\nstart_time = 540\nstart_location = \"The Castro\"\nn = len(friends)\nfound = False\nresult_itinerary = None\n\nfor num in range(n, 0, -1):\n    for subset in itertools.combinations(friends, num):\n        for perm in itertools.permutations(subset):\n            feasible, itinerary = build_schedule(perm, travel_times, start_time, start_location)\n            if feasible:\n                found = True\n                result_itinerary = itinerary\n                break\n        if found:\n            break\n    if found:\n        break\n\nif found:\n    result = {\"itinerary\": []}\n    for meet in result_itinerary:\n        result[\"itinerary\"].append({\n            \"action\": \"meet\",\n            \"location\": meet['location'],\n            \"person\": meet['person'],\n            \"start_time\": meet['start_time'],\n            \"end_time\": meet['end_time']\n        })\n    print(json.dumps(result))\nelse:\n    print(json.dumps({\"itinerary\": []}))\n```"
    }
]