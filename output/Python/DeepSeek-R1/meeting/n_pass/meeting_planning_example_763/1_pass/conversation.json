[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nChinatown to Embarcadero: 5.\nChinatown to Pacific Heights: 10.\nChinatown to Russian Hill: 7.\nChinatown to Haight-Ashbury: 19.\nChinatown to Golden Gate Park: 23.\nChinatown to Fisherman's Wharf: 8.\nChinatown to Sunset District: 29.\nChinatown to The Castro: 22.\nEmbarcadero to Chinatown: 7.\nEmbarcadero to Pacific Heights: 11.\nEmbarcadero to Russian Hill: 8.\nEmbarcadero to Haight-Ashbury: 21.\nEmbarcadero to Golden Gate Park: 25.\nEmbarcadero to Fisherman's Wharf: 6.\nEmbarcadero to Sunset District: 30.\nEmbarcadero to The Castro: 25.\nPacific Heights to Chinatown: 11.\nPacific Heights to Embarcadero: 10.\nPacific Heights to Russian Hill: 7.\nPacific Heights to Haight-Ashbury: 11.\nPacific Heights to Golden Gate Park: 15.\nPacific Heights to Fisherman's Wharf: 13.\nPacific Heights to Sunset District: 21.\nPacific Heights to The Castro: 16.\nRussian Hill to Chinatown: 9.\nRussian Hill to Embarcadero: 8.\nRussian Hill to Pacific Heights: 7.\nRussian Hill to Haight-Ashbury: 17.\nRussian Hill to Golden Gate Park: 21.\nRussian Hill to Fisherman's Wharf: 7.\nRussian Hill to Sunset District: 23.\nRussian Hill to The Castro: 21.\nHaight-Ashbury to Chinatown: 19.\nHaight-Ashbury to Embarcadero: 20.\nHaight-Ashbury to Pacific Heights: 12.\nHaight-Ashbury to Russian Hill: 17.\nHaight-Ashbury to Golden Gate Park: 7.\nHaight-Ashbury to Fisherman's Wharf: 23.\nHaight-Ashbury to Sunset District: 15.\nHaight-Ashbury to The Castro: 6.\nGolden Gate Park to Chinatown: 23.\nGolden Gate Park to Embarcadero: 25.\nGolden Gate Park to Pacific Heights: 16.\nGolden Gate Park to Russian Hill: 19.\nGolden Gate Park to Haight-Ashbury: 7.\nGolden Gate Park to Fisherman's Wharf: 24.\nGolden Gate Park to Sunset District: 10.\nGolden Gate Park to The Castro: 13.\nFisherman's Wharf to Chinatown: 12.\nFisherman's Wharf to Embarcadero: 8.\nFisherman's Wharf to Pacific Heights: 12.\nFisherman's Wharf to Russian Hill: 7.\nFisherman's Wharf to Haight-Ashbury: 22.\nFisherman's Wharf to Golden Gate Park: 25.\nFisherman's Wharf to Sunset District: 27.\nFisherman's Wharf to The Castro: 27.\nSunset District to Chinatown: 30.\nSunset District to Embarcadero: 30.\nSunset District to Pacific Heights: 21.\nSunset District to Russian Hill: 24.\nSunset District to Haight-Ashbury: 15.\nSunset District to Golden Gate Park: 11.\nSunset District to Fisherman's Wharf: 29.\nSunset District to The Castro: 17.\nThe Castro to Chinatown: 22.\nThe Castro to Embarcadero: 22.\nThe Castro to Pacific Heights: 16.\nThe Castro to Russian Hill: 18.\nThe Castro to Haight-Ashbury: 6.\nThe Castro to Golden Gate Park: 11.\nThe Castro to Fisherman's Wharf: 24.\nThe Castro to Sunset District: 17.\n\nCONSTRAINTS: You arrive at Chinatown at 9:00AM. Richard will be at Embarcadero from 3:15PM to 6:45PM. You'd like to meet Richard for a minimum of 90 minutes. Mark will be at Pacific Heights from 3:00PM to 5:00PM. You'd like to meet Mark for a minimum of 45 minutes. Matthew will be at Russian Hill from 5:30PM to 9:00PM. You'd like to meet Matthew for a minimum of 90 minutes. Rebecca will be at Haight-Ashbury from 2:45PM to 6:00PM. You'd like to meet Rebecca for a minimum of 60 minutes. Melissa will be at Golden Gate Park from 1:45PM to 5:30PM. You'd like to meet Melissa for a minimum of 90 minutes. Margaret will be at Fisherman's Wharf from 2:45PM to 8:15PM. You'd like to meet Margaret for a minimum of 15 minutes. Emily will be at Sunset District from 3:45PM to 5:00PM. You'd like to meet Emily for a minimum of 45 minutes. George will be at The Castro from 2:00PM to 4:15PM. You'd like to meet George for a minimum of 75 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "SOLUTION:\n```python\nimport json\n\ndef main():\n    # Define the locations and create a mapping to indices\n    locations = [\n        \"Chinatown\",\n        \"Embarcadero\",\n        \"Pacific Heights\",\n        \"Russian Hill\",\n        \"Haight-Ashbury\",\n        \"Golden Gate Park\",\n        \"Fisherman's Wharf\",\n        \"Sunset District\",\n        \"The Castro\"\n    ]\n    location_index_map = {loc: idx for idx, loc in enumerate(locations)}\n    \n    # Define travel times dictionary\n    travel_times = {\n        \"Chinatown\": {\n            \"Embarcadero\": 5,\n            \"Pacific Heights\": 10,\n            \"Russian Hill\": 7,\n            \"Haight-Ashbury\": 19,\n            \"Golden Gate Park\": 23,\n            \"Fisherman's Wharf\": 8,\n            \"Sunset District\": 29,\n            \"The Castro\": 22\n        },\n        \"Embarcadero\": {\n            \"Chinatown\": 7,\n            \"Pacific Heights\": 11,\n            \"Russian Hill\": 8,\n            \"Haight-Ashbury\": 21,\n            \"Golden Gate Park\": 25,\n            \"Fisherman's Wharf\": 6,\n            \"Sunset District\": 30,\n            \"The Castro\": 25\n        },\n        \"Pacific Heights\": {\n            \"Chinatown\": 11,\n            \"Embarcadero\": 10,\n            \"Russian Hill\": 7,\n            \"Haight-Ashbury\": 11,\n            \"Golden Gate Park\": 15,\n            \"Fisherman's Wharf\": 13,\n            \"Sunset District\": 21,\n            \"The Castro\": 16\n        },\n        \"Russian Hill\": {\n            \"Chinatown\": 9,\n            \"Embarcadero\": 8,\n            \"Pacific Heights\": 7,\n            \"Haight-Ashbury\": 17,\n            \"Golden Gate Park\": 21,\n            \"Fisherman's Wharf\": 7,\n            \"Sunset District\": 23,\n            \"The Castro\": 21\n        },\n        \"Haight-Ashbury\": {\n            \"Chinatown\": 19,\n            \"Embarcadero\": 20,\n            \"Pacific Heights\": 12,\n            \"Russian Hill\": 17,\n            \"Golden Gate Park\": 7,\n            \"Fisherman's Wharf\": 23,\n            \"Sunset District\": 15,\n            \"The Castro\": 6\n        },\n        \"Golden Gate Park\": {\n            \"Chinatown\": 23,\n            \"Embarcadero\": 25,\n            \"Pacific Heights\": 16,\n            \"Russian Hill\": 19,\n            \"Haight-Ashbury\": 7,\n            \"Fisherman's Wharf\": 24,\n            \"Sunset District\": 10,\n            \"The Castro\": 13\n        },\n        \"Fisherman's Wharf\": {\n            \"Chinatown\": 12,\n            \"Embarcadero\": 8,\n            \"Pacific Heights\": 12,\n            \"Russian Hill\": 7,\n            \"Haight-Ashbury\": 22,\n            \"Golden Gate Park\": 25,\n            \"Sunset District\": 27,\n            \"The Castro\": 27\n        },\n        \"Sunset District\": {\n            \"Chinatown\": 30,\n            \"Embarcadero\": 30,\n            \"Pacific Heights\": 21,\n            \"Russian Hill\": 24,\n            \"Haight-Ashbury\": 15,\n            \"Golden Gate Park\": 11,\n            \"Fisherman's Wharf\": 29,\n            \"The Castro\": 17\n        },\n        \"The Castro\": {\n            \"Chinatown\": 22,\n            \"Embarcadero\": 22,\n            \"Pacific Heights\": 16,\n            \"Russian Hill\": 18,\n            \"Haight-Ashbury\": 6,\n            \"Golden Gate Park\": 11,\n            \"Fisherman's Wharf\": 24,\n            \"Sunset District\": 17\n        }\n    }\n    \n    # Define friends with their constraints (times in minutes from midnight)\n    friends = [\n        {\"name\": \"Richard\", \"location\": \"Embarcadero\", \"start\": 15*60+15, \"end\": 18*60+45, \"min_dur\": 90},\n        {\"name\": \"Mark\", \"location\": \"Pacific Heights\", \"start\": 15*60+0, \"end\": 17*60+0, \"min_dur\": 45},\n        {\"name\": \"Matthew\", \"location\": \"Russian Hill\", \"start\": 17*60+30, \"end\": 21*60+0, \"min_dur\": 90},\n        {\"name\": \"Rebecca\", \"location\": \"Haight-Ashbury\", \"start\": 14*60+45, \"end\": 18*60+0, \"min_dur\": 60},\n        {\"name\": \"Melissa\", \"location\": \"Golden Gate Park\", \"start\": 13*60+45, \"end\": 17*60+30, \"min_dur\": 90},\n        {\"name\": \"Margaret\", \"location\": \"Fisherman's Wharf\", \"start\": 14*60+45, \"end\": 20*60+15, \"min_dur\": 15},\n        {\"name\": \"Emily\", \"location\": \"Sunset District\", \"start\": 15*60+45, \"end\": 17*60+0, \"min_dur\": 45},\n        {\"name\": \"George\", \"location\": \"The Castro\", \"start\": 14*60+0, \"end\": 16*60+15, \"min_dur\": 75}\n    ]\n    \n    n = len(friends)  # 8 friends\n    num_locations = len(locations)  # 9 locations\n    \n    # Initialize DP table and parent table\n    dp = [[10**9] * num_locations for _ in range(1 << n)]\n    parent = [[None] * num_locations for _ in range(1 << n)]  # (prev_mask, prev_loc, friend_index, start_time, end_time)\n    \n    # Base state: start at Chinatown (index 0) at 9:00 (540 minutes)\n    dp[0][0] = 540\n    \n    # Iterate over all masks\n    for mask in range(1 << n):\n        for loc_idx in range(num_locations):\n            current_time = dp[mask][loc_idx]\n            if current_time == 10**9:\n                continue\n            current_loc = locations[loc_idx]\n            \n            # Try each friend not yet visited\n            for friend_idx in range(n):\n                if mask & (1 << friend_idx):\n                    continue\n                friend = friends[friend_idx]\n                next_loc = friend[\"location\"]\n                \n                # Get travel time from current_loc to next_loc\n                travel_time = travel_times[current_loc][next_loc]\n                arrival_time = current_time + travel_time\n                start_time = max(arrival_time, friend[\"start\"])\n                end_time = start_time + friend[\"min_dur\"]\n                \n                # Check if meeting is feasible within the friend's window\n                if end_time <= friend[\"end\"]:\n                    new_mask = mask | (1 << friend_idx)\n                    new_loc_idx = location_index_map[next_loc]\n                    \n                    # Update DP state if we found a better (earlier) end time\n                    if end_time < dp[new_mask][new_loc_idx]:\n                        dp[new_mask][new_loc_idx] = end_time\n                        parent[new_mask][new_loc_idx] = (mask, loc_idx, friend_idx, start_time, end_time)\n    \n    # Find the best state (mask with maximum meetings)\n    best_mask = 0\n    best_count = 0\n    best_loc_idx = 0\n    for mask in range(1 << n):\n        count = bin(mask).count(\"1\")\n        for loc_idx in range(num_locations):\n            if dp[mask][loc_idx] < 10**9:\n                if count > best_count:\n                    best_count = count\n                    best_mask = mask\n                    best_loc_idx = loc_idx\n                if best_count == n:  # Found a schedule with all friends\n                    break\n        if best_count == n:\n            break\n    \n    # Backtrack to build itinerary\n    itinerary = []\n    current_mask = best_mask\n    current_loc_idx = best_loc_idx\n    \n    def format_time(minutes):\n        h = minutes // 60\n        m = minutes % 60\n        return f\"{h}:{m:02d}\"\n    \n    while current_mask != 0:\n        if parent[current_mask][current_loc_idx] is None:\n            break\n        prev_mask, prev_loc_idx, friend_idx, start_time, end_time = parent[current_mask][current_loc_idx]\n        friend = friends[friend_idx]\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"person\": friend[\"name\"],\n            \"start_time\": format_time(start_time),\n            \"end_time\": format_time(end_time)\n        })\n        current_mask = prev_mask\n        current_loc_idx = prev_loc_idx\n    \n    # Reverse to get chronological order\n    itinerary.reverse()\n    \n    # Output as JSON\n    result = {\"itinerary\": itinerary}\n    print(json.dumps(result))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]