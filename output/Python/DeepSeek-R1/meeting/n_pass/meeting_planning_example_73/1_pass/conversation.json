[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nRussian Hill to Pacific Heights: 7.\nPacific Heights to Russian Hill: 7.\n\nCONSTRAINTS: You arrive at Russian Hill at 9:00AM. Barbara will be at Pacific Heights from 7:15AM to 10:00PM. You'd like to meet Barbara for a minimum of 60 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "SOLUTION:\n```python\nimport json\n\ndef time_to_minutes(time_str):\n    parts = time_str.split(':')\n    hours = int(parts[0])\n    minutes = int(parts[1])\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes_val):\n    hours = minutes_val // 60\n    minutes = minutes_val % 60\n    return f\"{hours}:{minutes:02d}\"\n\n# Input parameters\nstart_location = \"Russian Hill\"\nstart_time_str = \"9:00\"\ntravel_times = {\n    (\"Russian Hill\", \"Pacific Heights\"): 7,\n    (\"Pacific Heights\", \"Russian Hill\"): 7\n}\n\nfriends = [\n    {\n        \"name\": \"Barbara\",\n        \"location\": \"Pacific Heights\",\n        \"available_start\": \"7:15\",\n        \"available_end\": \"22:00\",\n        \"min_duration\": 60\n    }\n]\n\n# Convert start time to minutes\ncurrent_time = time_to_minutes(start_time_str)\ncurrent_location = start_location\nitinerary = []\n\n# Process each friend (only one in this case)\nfor friend in friends:\n    # Calculate travel time to friend's location\n    travel_key = (current_location, friend[\"location\"])\n    if travel_key in travel_times:\n        travel_duration = travel_times[travel_key]\n    else:\n        travel_duration = 0  # Default if location not found\n    \n    # Calculate arrival time at friend's location\n    arrival_time = current_time + travel_duration\n    \n    # Convert friend's availability to minutes\n    available_start_min = time_to_minutes(friend[\"available_start\"])\n    available_end_min = time_to_minutes(friend[\"available_end\"])\n    min_duration = friend[\"min_duration\"]\n    \n    # Determine meeting window\n    meeting_start = max(arrival_time, available_start_min)\n    latest_start = available_end_min - min_duration\n    \n    if meeting_start <= latest_start:\n        # Schedule meeting at earliest possible time\n        meeting_end = meeting_start + min_duration\n        \n        # Update current time and location after meeting\n        current_time = meeting_end\n        current_location = friend[\"location\"]\n        \n        # Add meeting to itinerary\n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": friend[\"location\"],\n            \"person\": friend[\"name\"],\n            \"start_time\": minutes_to_time(meeting_start),\n            \"end_time\": minutes_to_time(meeting_end)\n        })\n\n# Output itinerary as JSON\nresult = {\"itinerary\": itinerary}\nprint(json.dumps(result))\n```"
    }
]