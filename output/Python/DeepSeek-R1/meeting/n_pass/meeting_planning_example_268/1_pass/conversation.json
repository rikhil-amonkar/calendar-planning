[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nGolden Gate Park to Alamo Square: 10.\nGolden Gate Park to Presidio: 11.\nGolden Gate Park to Russian Hill: 19.\nAlamo Square to Golden Gate Park: 9.\nAlamo Square to Presidio: 18.\nAlamo Square to Russian Hill: 13.\nPresidio to Golden Gate Park: 12.\nPresidio to Alamo Square: 18.\nPresidio to Russian Hill: 14.\nRussian Hill to Golden Gate Park: 21.\nRussian Hill to Alamo Square: 15.\nRussian Hill to Presidio: 14.\n\nCONSTRAINTS: You arrive at Golden Gate Park at 9:00AM. Timothy will be at Alamo Square from 12:00PM to 4:15PM. You'd like to meet Timothy for a minimum of 105 minutes. Mark will be at Presidio from 6:45PM to 9:00PM. You'd like to meet Mark for a minimum of 60 minutes. Joseph will be at Russian Hill from 4:45PM to 9:30PM. You'd like to meet Joseph for a minimum of 60 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nimport itertools\n\ndef main():\n    # Define travel times in minutes\n    travel_time = {\n        (\"Golden Gate Park\", \"Alamo Square\"): 10,\n        (\"Golden Gate Park\", \"Presidio\"): 11,\n        (\"Golden Gate Park\", \"Russian Hill\"): 19,\n        (\"Alamo Square\", \"Golden Gate Park\"): 9,\n        (\"Alamo Square\", \"Presidio\"): 18,\n        (\"Alamo Square\", \"Russian Hill\"): 13,\n        (\"Presidio\", \"Golden Gate Park\"): 12,\n        (\"Presidio\", \"Alamo Square\"): 18,\n        (\"Presidio\", \"Russian Hill\"): 14,\n        (\"Russian Hill\", \"Golden Gate Park\"): 21,\n        (\"Russian Hill\", \"Alamo Square\"): 15,\n        (\"Russian Hill\", \"Presidio\"): 14\n    }\n    \n    # Friend constraints: name, location, start (minutes), end (minutes), min_duration\n    friends = [\n        {\"name\": \"Timothy\", \"location\": \"Alamo Square\", \"start\": 720, \"end\": 975, \"min_duration\": 105},\n        {\"name\": \"Mark\", \"location\": \"Presidio\", \"start\": 1125, \"end\": 1260, \"min_duration\": 60},\n        {\"name\": \"Joseph\", \"location\": \"Russian Hill\", \"start\": 1005, \"end\": 1290, \"min_duration\": 60}\n    ]\n    \n    start_location = \"Golden Gate Park\"\n    start_time = 540  # 9:00 in minutes\n    \n    # Generate all permutations of friends\n    perm_indices = list(itertools.permutations(range(len(friends))))\n    candidates = []\n    \n    for perm in perm_indices:\n        current_loc = start_location\n        current_time = start_time\n        total_waiting = 0\n        meetings = []\n        valid = True\n        \n        for idx in perm:\n            friend = friends[idx]\n            key = (current_loc, friend['location'])\n            travel = travel_time[key]\n            \n            leave_time = max(current_time, friend['start'] - travel)\n            initial_wait = leave_time - current_time\n            total_waiting += initial_wait\n            \n            arrival_time = leave_time + travel\n            wait_at_location = max(0, friend['start'] - arrival_time)\n            total_waiting += wait_at_location\n            \n            start_meeting = max(arrival_time, friend['start'])\n            end_meeting = start_meeting + friend['min_duration']\n            if end_meeting > friend['end']:\n                valid = False\n                break\n                \n            meetings.append({\n                \"friend\": friend['name'],\n                \"location\": friend['location'],\n                \"start\": start_meeting,\n                \"end\": end_meeting\n            })\n            \n            current_loc = friend['location']\n            current_time = end_meeting\n        \n        if valid:\n            num_met = len(meetings)\n            candidates.append({\n                \"num_met\": num_met,\n                \"total_waiting\": total_waiting,\n                \"meetings\": meetings\n            })\n        else:\n            num_met = len(meetings)\n            if num_met > 0:\n                candidates.append({\n                    \"num_met\": num_met,\n                    \"total_waiting\": total_waiting,\n                    \"meetings\": meetings\n                })\n    \n    if not candidates:\n        best_candidate = {\"num_met\": 0, \"meetings\": []}\n    else:\n        best_candidate = None\n        for candidate in candidates:\n            if best_candidate is None:\n                best_candidate = candidate\n            else:\n                if candidate['num_met'] > best_candidate['num_met']:\n                    best_candidate = candidate\n                elif candidate['num_met'] == best_candidate['num_met']:\n                    if candidate['total_waiting'] < best_candidate['total_waiting']:\n                        best_candidate = candidate\n    \n    # Convert to output format\n    itinerary = []\n    for meeting in best_candidate['meetings']:\n        start_minutes = meeting['start']\n        end_minutes = meeting['end']\n        \n        start_hour = start_minutes // 60\n        start_minute = start_minutes % 60\n        end_hour = end_minutes // 60\n        end_minute = end_minutes % 60\n        \n        start_str = f\"{start_hour}:{start_minute:02d}\"\n        end_str = f\"{end_hour}:{end_minute:02d}\"\n        \n        itinerary.append({\n            \"action\": \"meet\",\n            \"location\": meeting['location'],\n            \"person\": meeting['friend'],\n            \"start_time\": start_str,\n            \"end_time\": end_str\n        })\n    \n    # Output as JSON\n    result = {\"itinerary\": itinerary}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]