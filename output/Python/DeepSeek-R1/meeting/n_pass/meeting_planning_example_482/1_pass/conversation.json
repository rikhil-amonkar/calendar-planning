[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nHaight-Ashbury to Mission District: 11.\nHaight-Ashbury to Bayview: 18.\nHaight-Ashbury to Pacific Heights: 12.\nHaight-Ashbury to Russian Hill: 17.\nHaight-Ashbury to Fisherman's Wharf: 23.\nMission District to Haight-Ashbury: 12.\nMission District to Bayview: 15.\nMission District to Pacific Heights: 16.\nMission District to Russian Hill: 15.\nMission District to Fisherman's Wharf: 22.\nBayview to Haight-Ashbury: 19.\nBayview to Mission District: 13.\nBayview to Pacific Heights: 23.\nBayview to Russian Hill: 23.\nBayview to Fisherman's Wharf: 25.\nPacific Heights to Haight-Ashbury: 11.\nPacific Heights to Mission District: 15.\nPacific Heights to Bayview: 22.\nPacific Heights to Russian Hill: 7.\nPacific Heights to Fisherman's Wharf: 13.\nRussian Hill to Haight-Ashbury: 17.\nRussian Hill to Mission District: 16.\nRussian Hill to Bayview: 23.\nRussian Hill to Pacific Heights: 7.\nRussian Hill to Fisherman's Wharf: 7.\nFisherman's Wharf to Haight-Ashbury: 22.\nFisherman's Wharf to Mission District: 22.\nFisherman's Wharf to Bayview: 26.\nFisherman's Wharf to Pacific Heights: 12.\nFisherman's Wharf to Russian Hill: 7.\n\nCONSTRAINTS: You arrive at Haight-Ashbury at 9:00AM. Stephanie will be at Mission District from 8:15AM to 1:45PM. You'd like to meet Stephanie for a minimum of 90 minutes. Sandra will be at Bayview from 1:00PM to 7:30PM. You'd like to meet Sandra for a minimum of 15 minutes. Richard will be at Pacific Heights from 7:15AM to 10:15AM. You'd like to meet Richard for a minimum of 75 minutes. Brian will be at Russian Hill from 12:15PM to 4:00PM. You'd like to meet Brian for a minimum of 120 minutes. Jason will be at Fisherman's Wharf from 8:30AM to 5:45PM. You'd like to meet Jason for a minimum of 60 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport itertools\nimport json\n\ndef main():\n    # Convert time to minutes from midnight\n    def time_to_minutes(time_str):\n        parts = time_str.split(':')\n        hour = int(parts[0])\n        minute = int(parts[1][:2])  # Handle possible AM/PM by taking first two digits\n        return hour * 60 + minute\n\n    # Format minutes back to \"H:MM\"\n    def format_minutes(m):\n        hours = m // 60\n        minutes = m % 60\n        return f\"{hours}:{minutes:02d}\"\n\n    # Build travel time dictionary\n    travel_data = [\n        ('Haight-Ashbury', 'Mission District', 11),\n        ('Haight-Ashbury', 'Bayview', 18),\n        ('Haight-Ashbury', 'Pacific Heights', 12),\n        ('Haight-Ashbury', 'Russian Hill', 17),\n        ('Haight-Ashbury', \"Fisherman's Wharf\", 23),\n        ('Mission District', 'Haight-Ashbury', 12),\n        ('Mission District', 'Bayview', 15),\n        ('Mission District', 'Pacific Heights', 16),\n        ('Mission District', 'Russian Hill', 15),\n        ('Mission District', \"Fisherman's Wharf\", 22),\n        ('Bayview', 'Haight-Ashbury', 19),\n        ('Bayview', 'Mission District', 13),\n        ('Bayview', 'Pacific Heights', 23),\n        ('Bayview', 'Russian Hill', 23),\n        ('Bayview', \"Fisherman's Wharf\", 25),\n        ('Pacific Heights', 'Haight-Ashbury', 11),\n        ('Pacific Heights', 'Mission District', 15),\n        ('Pacific Heights', 'Bayview', 22),\n        ('Pacific Heights', 'Russian Hill', 7),\n        ('Pacific Heights', \"Fisherman's Wharf\", 13),\n        ('Russian Hill', 'Haight-Ashbury', 17),\n        ('Russian Hill', 'Mission District', 16),\n        ('Russian Hill', 'Bayview', 23),\n        ('Russian Hill', 'Pacific Heights', 7),\n        ('Russian Hill', \"Fisherman's Wharf\", 7),\n        (\"Fisherman's Wharf\", 'Haight-Ashbury', 22),\n        (\"Fisherman's Wharf\", 'Mission District', 22),\n        (\"Fisherman's Wharf\", 'Bayview', 26),\n        (\"Fisherman's Wharf\", 'Pacific Heights', 12),\n        (\"Fisherman's Wharf\", 'Russian Hill', 7)\n    ]\n    \n    travel_times = {}\n    for loc1, loc2, time in travel_data:\n        if loc1 not in travel_times:\n            travel_times[loc1] = {}\n        travel_times[loc1][loc2] = time\n\n    # Define friends with constraints in minutes\n    friends = [\n        ('Stephanie', 'Mission District', 8*60+15, 13*60+45, 90),  # 8:15AM to 1:45PM -> 495 to 825 minutes\n        ('Sandra', 'Bayview', 13*60+0, 19*60+30, 15),              # 1:00PM to 7:30PM -> 780 to 1170\n        ('Brian', 'Russian Hill', 12*60+15, 16*60+0, 120),          # 12:15PM to 4:00PM -> 735 to 960\n        ('Jason', \"Fisherman's Wharf\", 8*60+30, 17*60+45, 60)      # 8:30AM to 5:45PM -> 510 to 1065\n    ]\n    \n    start_time_minutes = 9 * 60  # 9:00 AM\n    start_location = 'Haight-Ashbury'\n    \n    best_count = 0\n    best_itinerary = None\n    \n    for perm in itertools.permutations(friends):\n        current_location = start_location\n        current_time = start_time_minutes\n        itinerary_perm = []\n        \n        for friend in perm:\n            name, loc, avail_start, avail_end, min_dur = friend\n            \n            # Travel to friend's location\n            tt = travel_times[current_location][loc]\n            current_time += tt\n            \n            # Calculate meeting start and end\n            start_meeting = max(current_time, avail_start)\n            end_meeting = start_meeting + min_dur\n            \n            # Check if meeting is possible\n            if end_meeting <= avail_end:\n                itinerary_perm.append({\n                    'person': name,\n                    'location': loc,\n                    'start_meeting': start_meeting,\n                    'end_meeting': end_meeting\n                })\n                current_time = end_meeting  # Update time after meeting\n            else:\n                # Skip meeting, but still update location\n                pass\n            current_location = loc  # Update current location\n        \n        if len(itinerary_perm) > best_count:\n            best_count = len(itinerary_perm)\n            best_itinerary = itinerary_perm\n            if best_count == 4:\n                break  # Found optimal schedule\n    \n    # Convert to output format\n    output_itinerary = []\n    if best_itinerary:\n        for meeting in best_itinerary:\n            output_itinerary.append({\n                \"action\": \"meet\",\n                \"location\": meeting['location'],\n                \"person\": meeting['person'],\n                \"start_time\": format_minutes(meeting['start_meeting']),\n                \"end_time\": format_minutes(meeting['end_meeting'])\n            })\n    \n    # Output as JSON\n    result = {\"itinerary\": output_itinerary}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]