[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nFinancial District to Fisherman's Wharf: 10.\nFinancial District to Presidio: 22.\nFinancial District to Bayview: 19.\nFinancial District to Haight-Ashbury: 19.\nFinancial District to Russian Hill: 11.\nFinancial District to The Castro: 20.\nFinancial District to Marina District: 15.\nFinancial District to Richmond District: 21.\nFinancial District to Union Square: 9.\nFinancial District to Sunset District: 30.\nFisherman's Wharf to Financial District: 11.\nFisherman's Wharf to Presidio: 17.\nFisherman's Wharf to Bayview: 26.\nFisherman's Wharf to Haight-Ashbury: 22.\nFisherman's Wharf to Russian Hill: 7.\nFisherman's Wharf to The Castro: 27.\nFisherman's Wharf to Marina District: 9.\nFisherman's Wharf to Richmond District: 18.\nFisherman's Wharf to Union Square: 13.\nFisherman's Wharf to Sunset District: 27.\nPresidio to Financial District: 23.\nPresidio to Fisherman's Wharf: 19.\nPresidio to Bayview: 31.\nPresidio to Haight-Ashbury: 15.\nPresidio to Russian Hill: 14.\nPresidio to The Castro: 21.\nPresidio to Marina District: 11.\nPresidio to Richmond District: 7.\nPresidio to Union Square: 22.\nPresidio to Sunset District: 15.\nBayview to Financial District: 19.\nBayview to Fisherman's Wharf: 25.\nBayview to Presidio: 32.\nBayview to Haight-Ashbury: 19.\nBayview to Russian Hill: 23.\nBayview to The Castro: 19.\nBayview to Marina District: 27.\nBayview to Richmond District: 25.\nBayview to Union Square: 18.\nBayview to Sunset District: 23.\nHaight-Ashbury to Financial District: 21.\nHaight-Ashbury to Fisherman's Wharf: 23.\nHaight-Ashbury to Presidio: 15.\nHaight-Ashbury to Bayview: 18.\nHaight-Ashbury to Russian Hill: 17.\nHaight-Ashbury to The Castro: 6.\nHaight-Ashbury to Marina District: 17.\nHaight-Ashbury to Richmond District: 10.\nHaight-Ashbury to Union Square: 19.\nHaight-Ashbury to Sunset District: 15.\nRussian Hill to Financial District: 11.\nRussian Hill to Fisherman's Wharf: 7.\nRussian Hill to Presidio: 14.\nRussian Hill to Bayview: 23.\nRussian Hill to Haight-Ashbury: 17.\nRussian Hill to The Castro: 21.\nRussian Hill to Marina District: 7.\nRussian Hill to Richmond District: 14.\nRussian Hill to Union Square: 10.\nRussian Hill to Sunset District: 23.\nThe Castro to Financial District: 21.\nThe Castro to Fisherman's Wharf: 24.\nThe Castro to Presidio: 20.\nThe Castro to Bayview: 19.\nThe Castro to Haight-Ashbury: 6.\nThe Castro to Russian Hill: 18.\nThe Castro to Marina District: 21.\nThe Castro to Richmond District: 16.\nThe Castro to Union Square: 19.\nThe Castro to Sunset District: 17.\nMarina District to Financial District: 17.\nMarina District to Fisherman's Wharf: 10.\nMarina District to Presidio: 10.\nMarina District to Bayview: 27.\nMarina District to Haight-Ashbury: 16.\nMarina District to Russian Hill: 8.\nMarina District to The Castro: 22.\nMarina District to Richmond District: 11.\nMarina District to Union Square: 16.\nMarina District to Sunset District: 19.\nRichmond District to Financial District: 22.\nRichmond District to Fisherman's Wharf: 18.\nRichmond District to Presidio: 7.\nRichmond District to Bayview: 27.\nRichmond District to Haight-Ashbury: 10.\nRichmond District to Russian Hill: 13.\nRichmond District to The Castro: 16.\nRichmond District to Marina District: 9.\nRichmond District to Union Square: 21.\nRichmond District to Sunset District: 11.\nUnion Square to Financial District: 9.\nUnion Square to Fisherman's Wharf: 15.\nUnion Square to Presidio: 24.\nUnion Square to Bayview: 15.\nUnion Square to Haight-Ashbury: 18.\nUnion Square to Russian Hill: 13.\nUnion Square to The Castro: 17.\nUnion Square to Marina District: 18.\nUnion Square to Richmond District: 20.\nUnion Square to Sunset District: 27.\nSunset District to Financial District: 30.\nSunset District to Fisherman's Wharf: 29.\nSunset District to Presidio: 16.\nSunset District to Bayview: 22.\nSunset District to Haight-Ashbury: 15.\nSunset District to Russian Hill: 24.\nSunset District to The Castro: 17.\nSunset District to Marina District: 21.\nSunset District to Richmond District: 12.\nSunset District to Union Square: 30.\n\nCONSTRAINTS: You arrive at Financial District at 9:00AM. Mark will be at Fisherman's Wharf from 8:15AM to 10:00AM. You'd like to meet Mark for a minimum of 30 minutes. Stephanie will be at Presidio from 12:15PM to 3:00PM. You'd like to meet Stephanie for a minimum of 75 minutes. Betty will be at Bayview from 7:15AM to 8:30PM. You'd like to meet Betty for a minimum of 15 minutes. Lisa will be at Haight-Ashbury from 3:30PM to 6:30PM. You'd like to meet Lisa for a minimum of 45 minutes. William will be at Russian Hill from 6:45PM to 8:00PM. You'd like to meet William for a minimum of 60 minutes. Brian will be at The Castro from 9:15AM to 1:15PM. You'd like to meet Brian for a minimum of 30 minutes. Joseph will be at Marina District from 10:45AM to 3:00PM. You'd like to meet Joseph for a minimum of 90 minutes. Ashley will be at Richmond District from 9:45AM to 11:15AM. You'd like to meet Ashley for a minimum of 45 minutes. Patricia will be at Union Square from 4:30PM to 8:00PM. You'd like to meet Patricia for a minimum of 120 minutes. Karen will be at Sunset District from 4:30PM to 10:00PM. You'd like to meet Karen for a minimum of 105 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\n\ndef time_to_minutes(time_str):\n    s = time_str.strip()\n    if s.endswith(\"AM\"):\n        s = s.replace(\"AM\", \"\").strip()\n        base = 0\n    elif s.endswith(\"PM\"):\n        s = s.replace(\"PM\", \"\").strip()\n        base = 12\n    else:\n        base = 0\n\n    parts = s.split(':')\n    hour = int(parts[0])\n    minute = int(parts[1])\n    if base == 12 and hour != 12:\n        hour += 12\n    if base == 0 and hour == 12:\n        hour = 0\n    return hour * 60 + minute\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\ntravel_times = {\n    \"Financial District\": {\n        \"Fisherman's Wharf\": 10,\n        \"Presidio\": 22,\n        \"Bayview\": 19,\n        \"Haight-Ashbury\": 19,\n        \"Russian Hill\": 11,\n        \"The Castro\": 20,\n        \"Marina District\": 15,\n        \"Richmond District\": 21,\n        \"Union Square\": 9,\n        \"Sunset District\": 30\n    },\n    \"Fisherman's Wharf\": {\n        \"Financial District\": 11,\n        \"Presidio\": 17,\n        \"Bayview\": 26,\n        \"Haight-Ashbury\": 22,\n        \"Russian Hill\": 7,\n        \"The Castro\": 27,\n        \"Marina District\": 9,\n        \"Richmond District\": 18,\n        \"Union Square\": 13,\n        \"Sunset District\": 27\n    },\n    \"Presidio\": {\n        \"Financial District\": 23,\n        \"Fisherman's Wharf\": 19,\n        \"Bayview\": 31,\n        \"Haight-Ashbury\": 15,\n        \"Russian Hill\": 14,\n        \"The Castro\": 21,\n        \"Marina District\": 11,\n        \"Richmond District\": 7,\n        \"Union Square\": 22,\n        \"Sunset District\": 15\n    },\n    \"Bayview\": {\n        \"Financial District\": 19,\n        \"Fisherman's Wharf\": 25,\n        \"Presidio\": 32,\n        \"Haight-Ashbury\": 19,\n        \"Russian Hill\": 23,\n        \"The Castro\": 19,\n        \"Marina District\": 27,\n        \"Richmond District\": 25,\n        \"Union Square\": 18,\n        \"Sunset District\": 23\n    },\n    \"Haight-Ashbury\": {\n        \"Financial District\": 21,\n        \"Fisherman's Wharf\": 23,\n        \"Presidio\": 15,\n        \"Bayview\": 18,\n        \"Russian Hill\": 17,\n        \"The Castro\": 6,\n        \"Marina District\": 17,\n        \"Richmond District\": 10,\n        \"Union Square\": 19,\n        \"Sunset District\": 15\n    },\n    \"Russian Hill\": {\n        \"Financial District\": 11,\n        \"Fisherman's Wharf\": 7,\n        \"Presidio\": 14,\n        \"Bayview\": 23,\n        \"Haight-Ashbury\": 17,\n        \"The Castro\": 21,\n        \"Marina District\": 7,\n        \"Richmond District\": 14,\n        \"Union Square\": 10,\n        \"Sunset District\": 23\n    },\n    \"The Castro\": {\n        \"Financial District\": 21,\n        \"Fisherman's Wharf\": 24,\n        \"Presidio\": 20,\n        \"Bayview\": 19,\n        \"Haight-Ashbury\": 6,\n        \"Russian Hill\": 18,\n        \"Marina District\": 21,\n        \"Richmond District\": 16,\n        \"Union Square\": 19,\n        \"Sunset District\": 17\n    },\n    \"Marina District\": {\n        \"Financial District\": 17,\n        \"Fisherman's Wharf\": 10,\n        \"Presidio\": 10,\n        \"Bayview\": 27,\n        \"Haight-Ashbury\": 16,\n        \"Russian Hill\": 8,\n        \"The Castro\": 22,\n        \"Richmond District\": 11,\n        \"Union Square\": 16,\n        \"Sunset District\": 19\n    },\n    \"Richmond District\": {\n        \"Financial District\": 22,\n        \"Fisherman's Wharf\": 18,\n        \"Presidio\": 7,\n        \"Bayview\": 27,\n        \"Haight-Ashbury\": 10,\n        \"Russian Hill\": 13,\n        \"The Castro\": 16,\n        \"Marina District\": 9,\n        \"Union Square\": 21,\n        \"Sunset District\": 11\n    },\n    \"Union Square\": {\n        \"Financial District\": 9,\n        \"Fisherman's Wharf\": 15,\n        \"Presidio\": 24,\n        \"Bayview\": 15,\n        \"Haight-Ashbury\": 18,\n        \"Russian Hill\": 13,\n        \"The Castro\": 17,\n        \"Marina District\": 18,\n        \"Richmond District\": 20,\n        \"Sunset District\": 27\n    },\n    \"Sunset District\": {\n        \"Financial District\": 30,\n        \"Fisherman's Wharf\": 29,\n        \"Presidio\": 16,\n        \"Bayview\": 22,\n        \"Haight-Ashbury\": 15,\n        \"Russian Hill\": 24,\n        \"The Castro\": 17,\n        \"Marina District\": 21,\n        \"Richmond District\": 12,\n        \"Union Square\": 30\n    }\n}\n\nfriends = [\n    {\"name\": \"Mark\", \"location\": \"Fisherman's Wharf\", \"start\": time_to_minutes(\"8:15AM\"), \"end\": time_to_minutes(\"10:00AM\"), \"min_duration\": 30},\n    {\"name\": \"Stephanie\", \"location\": \"Presidio\", \"start\": time_to_minutes(\"12:15PM\"), \"end\": time_to_minutes(\"3:00PM\"), \"min_duration\": 75},\n    {\"name\": \"Betty\", \"location\": \"Bayview\", \"start\": time_to_minutes(\"7:15AM\"), \"end\": time_to_minutes(\"8:30PM\"), \"min_duration\": 15},\n    {\"name\": \"Lisa\", \"location\": \"Haight-Ashbury\", \"start\": time_to_minutes(\"3:30PM\"), \"end\": time_to_minutes(\"6:30PM\"), \"min_duration\": 45},\n    {\"name\": \"William\", \"location\": \"Russian Hill\", \"start\": time_to_minutes(\"6:45PM\"), \"end\": time_to_minutes(\"8:00PM\"), \"min_duration\": 60},\n    {\"name\": \"Brian\", \"location\": \"The Castro\", \"start\": time_to_minutes(\"9:15AM\"), \"end\": time_to_minutes(\"1:15PM\"), \"min_duration\": 30},\n    {\"name\": \"Joseph\", \"location\": \"Marina District\", \"start\": time_to_minutes(\"10:45AM\"), \"end\": time_to_minutes(\"3:00PM\"), \"min_duration\": 90},\n    {\"name\": \"Ashley\", \"location\": \"Richmond District\", \"start\": time_to_minutes(\"9:45AM\"), \"end\": time_to_minutes(\"11:15AM\"), \"min_duration\": 45},\n    {\"name\": \"Patricia\", \"location\": \"Union Square\", \"start\": time_to_minutes(\"4:30PM\"), \"end\": time_to_minutes(\"8:00PM\"), \"min_duration\": 120},\n    {\"name\": \"Karen\", \"location\": \"Sunset District\", \"start\": time_to_minutes(\"4:30PM\"), \"end\": time_to_minutes(\"10:00PM\"), \"min_duration\": 105}\n]\n\ndef main():\n    stack = []\n    start_loc = \"Financial District\"\n    start_time = time_to_minutes(\"9:00AM\")\n    stack.append((start_loc, start_time, set(), []))\n    \n    best_count = 0\n    best_schedule = None\n    found_all = False\n    \n    while stack and not found_all:\n        loc, time, visited, schedule = stack.pop()\n        \n        if len(visited) > best_count:\n            best_count = len(visited)\n            best_schedule = schedule\n            if best_count == len(friends):\n                found_all = True\n                continue\n                \n        unvisited = [i for i in range(len(friends)) if i not in visited]\n        unvisited.sort(key=lambda i: friends[i]['end'])\n        \n        for i in unvisited:\n            friend = friends[i]\n            try:\n                tt = travel_times[loc][friend['location']]\n            except KeyError:\n                continue\n            arrival = time + tt\n            start_meeting = max(arrival, friend['start'])\n            end_meeting = start_meeting + friend['min_duration']\n            \n            if end_meeting <= friend['end']:\n                new_visited = visited | {i}\n                new_schedule = schedule + [{\n                    \"action\": \"meet\",\n                    \"location\": friend['location'],\n                    \"person\": friend['name'],\n                    \"start_time\": start_meeting,\n                    \"end_time\": end_meeting\n                }]\n                stack.append((friend['location'], end_meeting, new_visited, new_schedule))\n    \n    if best_schedule is None:\n        best_schedule = []\n    else:\n        for meeting in best_schedule:\n            meeting[\"start_time\"] = minutes_to_time(meeting[\"start_time\"])\n            meeting[\"end_time\"] = minutes_to_time(meeting[\"end_time\"])\n    \n    result = {\"itinerary\": best_schedule}\n    print(json.dumps(result, indent=2))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]