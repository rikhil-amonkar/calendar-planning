{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "{16:00",
                "end_time": "17:00}"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "{16:00",
                "end_time": "17:00}"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    work_start = 9 * 60\n    work_end = 17 * 60\n    duration = 60\n\n    kayla_busy = [(10*60, 10*60+30), (14*60+30, 16*60)]\n    rebecca_busy = [(9*60, 13*60), (13*60+30, 15*60), (15*60+30, 16*60)]\n\n    free_slots = []\n    current_start = work_start\n\n    # Merge and sort all busy times for both participants\n    all_busy = sorted(kayla_busy + rebecca_busy, key=lambda x: x[0])\n\n    for start, end in all_busy:\n        if current_start < start:\n            free_slots.append((current_start, start))\n        current_start = max(current_start, end)\n    if current_start < work_end:\n        free_slots.append((current_start, work_end))\n\n    # Find first suitable slot\n    for slot_start, slot_end in free_slots:\n        available_time = slot_end - slot_start\n        if available_time >= duration:\n            meeting_end = slot_start + duration\n            return (\n                f\"{slot_start//60:02d}:{slot_start%60:02d}:\"\n                f\"{meeting_end//60:02d}:{meeting_end%60:02d}\",\n                \"Monday\"\n            )\n\n    return None\n\ntime_range, day = find_meeting_time()\nprint(f\"{day} {time_range}\")\n'''",
            "count": "calendar_scheduling_example_541"
        }
    ]
}