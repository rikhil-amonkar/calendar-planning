{
    "0shot": [
        {
            "final_program_time": {
                "day": "Friday",
                "start_time": "{14:30",
                "end_time": "15:30}"
            },
            "expected_time": {
                "day": "Friday",
                "start_time": "{14:30",
                "end_time": "15:30}"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    # Define work hours and days\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    \n    # Define schedules in minutes since midnight\n    bryan_busy = {\n        'Thursday': [(9*60+30, 10*60), (12*60+30, 13*60)],\n        'Friday': [(10*60+30, 11*60), (14*60, 14*60+30)]\n    }\n    \n    nicholas_busy = {\n        'Monday': [(11*60+30, 12*60), (13*60, 15*60+30)],\n        'Tuesday': [(9*60, 9*60+30), (11*60, 13*60+30), (14*60, 16*60+30)],\n        'Wednesday': [(9*60, 9*60+30), (10*60, 11*60), (11*60+30, 13*60+30), \n                     (14*60, 14*60+30), (15*60, 16*60+30)],\n        'Thursday': [(10*60+30, 11*60+30), (12*60, 12*60+30), \n                    (15*60, 15*60+30), (16*60+30, 17*60)],\n        'Friday': [(9*60, 10*60+30), (11*60, 12*60), (12*60+30, 14*60+30),\n                  (15*60+30, 16*60), (16*60+30, 17*60)]\n    }\n    \n    # Preferred day constraints\n    preferred_days = ['Wednesday', 'Friday']  # Exclude Tuesday (Bryan) and Monday/Thursday (Nicholas)\n    \n    for day in preferred_days:\n        # Get busy times for both participants\n        bryan_day = bryan_busy.get(day, [])\n        nicholas_day = nicholas_busy.get(day, [])\n        \n        # Combine and sort all busy intervals\n        all_busy = sorted(bryan_day + nicholas_day, key=lambda x: x[0])\n        \n        # Find free slots\n        current_time = work_start\n        for start, end in all_busy:\n            if current_time < start:\n                free_slot = (current_time, start)\n                if free_slot[1] - free_slot[0] >= 60:  # Check if slot can fit 1 hour\n                    return format_time(free_slot[0], free_slot[1], day)\n            current_time = max(current_time, end)\n        \n        # Check after last meeting\n        if current_time < work_end:\n            if work_end - current_time >= 60:\n                return format_time(current_time, current_time + 60, day)\n    \n    return \"No suitable time found\"\n\ndef format_time(start, end, day):\n    def to_hhmm(minutes):\n        return f\"{minutes//60:02}:{minutes%60:02}\"\n    return f\"{day} {to_hhmm(start)}:{to_hhmm(end)}\"\n\nprint(find_meeting_time())\n'''",
            "count": "calendar_scheduling_example_910"
        }
    ]
}