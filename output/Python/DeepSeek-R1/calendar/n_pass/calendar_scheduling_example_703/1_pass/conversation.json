[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Stephanie and Betty for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nStephanie has meetings on Monday during 9:30 to 10:00, 10:30 to 11:00, 11:30 to 12:00, 14:00 to 14:30, Tuesday during 12:00 to 13:00, Wednesday during 9:00 to 10:00, 13:00 to 14:00; \nBetty has meetings on Monday during 9:00 to 10:00, 11:00 to 11:30, 14:30 to 15:00, 15:30 to 16:00, Tuesday during 9:00 to 9:30, 11:30 to 12:00, 12:30 to 14:30, 15:30 to 16:00, Wednesday during 10:00 to 11:30, 12:00 to 14:00, 14:30 to 17:00; \n\nStephanie would like to avoid more meetings on Monday. Betty can not meet on Tuesday after 12:30. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef get_free_intervals(busy_intervals, work_start, work_end):\n    if not busy_intervals:\n        return [(work_start, work_end)]\n    sorted_busy = sorted(busy_intervals, key=lambda x: x[0])\n    free = []\n    current = work_start\n    for interval in sorted_busy:\n        if current < interval[0]:\n            free.append((current, interval[0]))\n        current = max(current, interval[1])\n    if current < work_end:\n        free.append((current, work_end))\n    return free\n\ndef get_common_intervals(free1, free2):\n    common = []\n    for start1, end1 in free1:\n        for start2, end2 in free2:\n            low = max(start1, start2)\n            high = min(end1, end2)\n            if low < high:\n                common.append((low, high))\n    return common\n\ndef main():\n    # Define work hours in minutes (9:00 to 17:00)\n    work_start = 9 * 60  # 540 minutes\n    work_end = 17 * 60   # 1020 minutes\n    \n    # Define busy intervals in minutes for each participant per day\n    stephanie_busy = {\n        'Monday': [(9*60+30, 10*60), (10*60+30, 11*60), (11*60+30, 12*60), (14*60, 14*60+30)],\n        'Tuesday': [(12*60, 13*60)],\n        'Wednesday': [(9*60, 10*60), (13*60, 14*60)]\n    }\n    \n    betty_busy = {\n        'Monday': [(9*60, 10*60), (11*60, 11*60+30), (14*60+30, 15*60), (15*60+30, 16*60)],\n        'Tuesday': [(9*60, 9*60+30), (11*60+30, 12*60), (12*60+30, 14*60+30), (15*60+30, 16*60)],\n        'Wednesday': [(10*60, 11*60+30), (12*60, 14*60), (14*60+30, 17*60)]\n    }\n    \n    # Days in order of preference: Tuesday, Wednesday, Monday\n    days = ['Tuesday', 'Wednesday', 'Monday']\n    meeting_duration = 60  # minutes\n    \n    # Store the result\n    result_day = None\n    result_start = None\n    \n    for day in days:\n        # Adjust work_end for Betty on Tuesday (cannot meet after 12:30)\n        betty_work_end = 12*60 + 30 if day == 'Tuesday' else work_end\n        stephanie_work_end = work_end\n        \n        # Get free intervals for Stephanie and Betty\n        steph_free = get_free_intervals(stephanie_busy.get(day, []), work_start, stephanie_work_end)\n        betty_free = get_free_intervals(betty_busy.get(day, []), work_start, betty_work_end)\n        \n        # Find common free intervals\n        common_free = get_common_intervals(steph_free, betty_free)\n        \n        # Check for a slot of at least meeting_duration\n        for start, end in common_free:\n            if end - start >= meeting_duration:\n                result_day = day\n                result_start = start\n                break\n        if result_day is not None:\n            break\n    \n    # Format the result\n    start_hour = result_start // 60\n    start_minute = result_start % 60\n    end_time = result_start + meeting_duration\n    end_hour = end_time // 60\n    end_minute = end_time % 60\n    \n    time_str = f\"{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}\"\n    print(f\"{result_day} {time_str}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]