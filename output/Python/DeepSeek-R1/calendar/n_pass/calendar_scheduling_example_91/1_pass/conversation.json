[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Danielle, Bruce and Eric for one hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nDanielle has meetings on Monday during 9:00 to 10:00, 10:30 to 11:00, 14:30 to 15:00, 15:30 to 16:00, 16:30 to 17:00; \nBruce has meetings on Monday during 11:00 to 11:30, 12:30 to 13:00, 14:00 to 14:30, 15:30 to 16:00; \nEric has blocked their calendar on Monday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 13:00, 14:30 to 15:30; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    # Work hours: 9:00 to 17:00 (480 minutes from 9:00)\n    work_start = 0    # 9:00 in minutes from reference\n    work_end = 480    # 17:00 in minutes from reference\n    meeting_duration = 60  # minutes\n\n    # Define busy intervals in minutes (relative to 9:00) as (start, end) where end is exclusive\n    danielle_busy = [\n        (0, 60),    # 9:00-10:00\n        (90, 120),   # 10:30-11:00\n        (330, 360),  # 14:30-15:00\n        (390, 420),  # 15:30-16:00\n        (450, 480)   # 16:30-17:00\n    ]\n    \n    bruce_busy = [\n        (120, 150),  # 11:00-11:30\n        (210, 240),  # 12:30-13:00\n        (300, 330),  # 14:00-14:30\n        (390, 420)   # 15:30-16:00\n    ]\n    \n    eric_busy = [\n        (0, 30),     # 9:00-9:30\n        (60, 120),   # 10:00-11:00\n        (150, 240),  # 11:30-13:00\n        (330, 390)   # 14:30-15:30\n    ]\n    \n    # Combine all busy intervals\n    all_busy = danielle_busy + bruce_busy + eric_busy\n    \n    # Sort by start time\n    all_busy_sorted = sorted(all_busy, key=lambda x: x[0])\n    \n    # Merge overlapping or adjacent intervals\n    merged = []\n    if all_busy_sorted:\n        current_start, current_end = all_busy_sorted[0]\n        for i in range(1, len(all_busy_sorted)):\n            s, e = all_busy_sorted[i]\n            if s <= current_end:  # Overlapping or adjacent\n                if e > current_end:\n                    current_end = e\n            else:\n                merged.append((current_start, current_end))\n                current_start, current_end = s, e\n        merged.append((current_start, current_end))\n    \n    # Find free intervals within work hours\n    free_intervals = []\n    # Check before first busy interval\n    if merged and merged[0][0] > work_start:\n        free_intervals.append((work_start, merged[0][0]))\n    \n    # Check between busy intervals\n    for i in range(len(merged) - 1):\n        current_end = merged[i][1]\n        next_start = merged[i+1][0]\n        if next_start > current_end:\n            free_intervals.append((current_end, next_start))\n    \n    # Check after last busy interval\n    if merged and merged[-1][1] < work_end:\n        free_intervals.append((merged[-1][1], work_end))\n    \n    # If there are no busy intervals, the whole day is free\n    if not merged:\n        free_intervals.append((work_start, work_end))\n    \n    # Find the first free interval that can fit the meeting\n    meeting_start_minutes = None\n    for start, end in free_intervals:\n        duration = end - start\n        if duration >= meeting_duration:\n            meeting_start_minutes = start\n            break\n    \n    # Convert meeting start from minutes to time string\n    if meeting_start_minutes is not None:\n        total_minutes_start = meeting_start_minutes\n        start_hour = 9 + total_minutes_start // 60\n        start_minute = total_minutes_start % 60\n        total_minutes_end = total_minutes_start + meeting_duration\n        end_hour = 9 + total_minutes_end // 60\n        end_minute = total_minutes_end % 60\n        \n        # Format as HH:MM for start and end\n        time_str = f\"{start_hour}:{start_minute:02d}:{end_hour}:{end_minute:02d}\"\n        print(time_str)\n        print(\"Monday\")\n    else:\n        # According to the problem, there is a solution, so this should not happen\n        print(\"No suitable time found\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]