[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Danielle, Bruce and Eric for one hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nDanielle has meetings on Monday during 9:00 to 10:00, 10:30 to 11:00, 14:30 to 15:00, 15:30 to 16:00, 16:30 to 17:00; \nBruce has meetings on Monday during 11:00 to 11:30, 12:30 to 13:00, 14:00 to 14:30, 15:30 to 16:00; \nEric has blocked their calendar on Monday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 13:00, 14:30 to 15:30; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    # Work hours: 9:00 to 17:00 (converted to minutes since 9:00: 0 to 480 minutes)\n    work_start = 0\n    work_end = 480  # 8 hours * 60 minutes\n\n    # Helper function to convert time string to minutes since 9:00\n    def time_to_minutes(time_str):\n        parts = time_str.split(':')\n        hour = int(parts[0])\n        minute = int(parts[1])\n        return (hour - 9) * 60 + minute\n\n    # Parse Danielle's meetings\n    danielle_meetings = [\n        (\"9:00\", \"10:00\"),\n        (\"10:30\", \"11:00\"),\n        (\"14:30\", \"15:00\"),\n        (\"15:30\", \"16:00\"),\n        (\"16:30\", \"17:00\")\n    ]\n    danielle_busy = []\n    for start, end in danielle_meetings:\n        s = time_to_minutes(start)\n        e = time_to_minutes(end)\n        danielle_busy.append((s, e))\n\n    # Parse Bruce's meetings\n    bruce_meetings = [\n        (\"11:00\", \"11:30\"),\n        (\"12:30\", \"13:00\"),\n        (\"14:00\", \"14:30\"),\n        (\"15:30\", \"16:00\")\n    ]\n    bruce_busy = []\n    for start, end in bruce_meetings:\n        s = time_to_minutes(start)\n        e = time_to_minutes(end)\n        bruce_busy.append((s, e))\n\n    # Parse Eric's meetings\n    eric_meetings = [\n        (\"9:00\", \"9:30\"),\n        (\"10:00\", \"11:00\"),\n        (\"11:30\", \"13:00\"),\n        (\"14:30\", \"15:30\")\n    ]\n    eric_busy = []\n    for start, end in eric_meetings:\n        s = time_to_minutes(start)\n        e = time_to_minutes(end)\n        eric_busy.append((s, e))\n\n    # Combine all busy intervals\n    all_busy = danielle_busy + bruce_busy + eric_busy\n    \n    # Sort by start time\n    all_busy.sort(key=lambda x: x[0])\n    \n    # Merge overlapping or adjacent intervals\n    merged_busy = []\n    current_start, current_end = all_busy[0]\n    for i in range(1, len(all_busy)):\n        s, e = all_busy[i]\n        if s <= current_end:\n            current_end = max(current_end, e)\n        else:\n            merged_busy.append((current_start, current_end))\n            current_start, current_end = s, e\n    merged_busy.append((current_start, current_end))\n    \n    # Find free intervals\n    free_intervals = []\n    # Before first meeting\n    if merged_busy[0][0] > work_start:\n        free_intervals.append((work_start, merged_busy[0][0]))\n    \n    # Between meetings\n    for i in range(len(merged_busy) - 1):\n        end_current = merged_busy[i][1]\n        start_next = merged_busy[i+1][0]\n        if end_current < start_next:\n            free_intervals.append((end_current, start_next))\n    \n    # After last meeting\n    if merged_busy[-1][1] < work_end:\n        free_intervals.append((merged_busy[-1][1], work_end))\n    \n    # Find first free interval that is at least 60 minutes\n    meeting_duration = 60\n    for start, end in free_intervals:\n        if end - start >= meeting_duration:\n            meeting_start = start\n            meeting_end = start + meeting_duration\n            break\n    \n    # Convert meeting start and end back to time strings\n    def minutes_to_time(minutes):\n        total_minutes = minutes\n        hour = 9 + total_minutes // 60\n        minute = total_minutes % 60\n        return f\"{hour:02d}:{minute:02d}\"\n    \n    start_str = minutes_to_time(meeting_start)\n    end_str = minutes_to_time(meeting_end)\n    \n    # Output day and time range in the format HH:MM:HH:MM\n    print(\"Monday\")\n    print(f\"{start_str}:{end_str}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]