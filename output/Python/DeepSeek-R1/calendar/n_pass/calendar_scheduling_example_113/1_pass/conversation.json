[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Bradley, Teresa, Elizabeth and Christian for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nBradley has blocked their calendar on Monday during 9:30 to 10:00, 12:30 to 13:00, 13:30 to 14:00, 15:30 to 16:00; \nTeresa has meetings on Monday during 10:30 to 11:00, 12:00 to 12:30, 13:00 to 13:30, 14:30 to 15:00; \nElizabeth has meetings on Monday during 9:00 to 9:30, 10:30 to 11:30, 13:00 to 13:30, 14:30 to 15:00, 15:30 to 17:00; \nChristian has meetings on Monday during 9:00 to 9:30, 10:30 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    # Meeting duration and work hours\n    meeting_duration = 30  # minutes\n    work_start = 9 * 60  # 9:00 in minutes (from midnight)\n    work_end = 17 * 60   # 17:00 in minutes\n\n    # Convert time string to minutes since midnight\n    def time_to_minutes(time_str):\n        parts = time_str.split(':')\n        hour = int(parts[0])\n        minute = int(parts[1])\n        return hour * 60 + minute\n\n    # Convert minutes since midnight back to HH:MM format\n    def minutes_to_time(total_minutes):\n        hour = total_minutes // 60\n        minute = total_minutes % 60\n        return f\"{hour:02d}:{minute:02d}\"\n\n    # Participants' busy intervals (each interval is [start_minute, end_minute])\n    bradley_busy = [\n        (\"9:30\", \"10:00\"),\n        (\"12:30\", \"13:00\"),\n        (\"13:30\", \"14:00\"),\n        (\"15:30\", \"16:00\")\n    ]\n    teresa_busy = [\n        (\"10:30\", \"11:00\"),\n        (\"12:00\", \"12:30\"),\n        (\"13:00\", \"13:30\"),\n        (\"14:30\", \"15:00\")\n    ]\n    elizabeth_busy = [\n        (\"9:00\", \"9:30\"),\n        (\"10:30\", \"11:30\"),\n        (\"13:00\", \"13:30\"),\n        (\"14:30\", \"15:00\"),\n        (\"15:30\", \"17:00\")\n    ]\n    christian_busy = [\n        (\"9:00\", \"9:30\"),\n        (\"10:30\", \"17:00\")\n    ]\n\n    # Combine all busy intervals into a list of (start, end) in minutes\n    all_busy = []\n    for intervals in [bradley_busy, teresa_busy, elizabeth_busy, christian_busy]:\n        for start_str, end_str in intervals:\n            start_min = time_to_minutes(start_str)\n            end_min = time_to_minutes(end_str)\n            all_busy.append((start_min, end_min))\n\n    # Create a timeline for the work day (in minutes)\n    timeline = [0] * (work_end + 1)  # Index represents minutes from 00:00\n    # Mark work hours as available (1), but we'll mark busy times separately\n    for start, end in all_busy:\n        # Clamp the interval to the work day\n        start_clamp = max(start, work_start)\n        end_clamp = min(end, work_end)\n        # Mark each minute in the busy interval as unavailable (0)\n        for minute in range(start_clamp, end_clamp):\n            if minute <= work_end:\n                timeline[minute] = 1  # Mark as busy\n\n    # Find available slots (consecutive free minutes)\n    available_slots = []\n    in_slot = False\n    slot_start = work_start\n    for minute in range(work_start, work_end):\n        if timeline[minute] == 0:  # Free minute\n            if not in_slot:\n                in_slot = True\n                slot_start = minute\n        else:  # Busy minute\n            if in_slot:\n                in_slot = False\n                slot_end = minute\n                available_slots.append((slot_start, slot_end))\n    if in_slot:\n        available_slots.append((slot_start, work_end))\n\n    # Find first available slot that fits the meeting duration\n    meeting_time = None\n    for start, end in available_slots:\n        duration = end - start\n        if duration >= meeting_duration:\n            meeting_time = (start, start + meeting_duration)\n            break\n\n    if meeting_time:\n        start_time = minutes_to_time(meeting_time[0])\n        end_time = minutes_to_time(meeting_time[1])\n        print(f\"{start_time}:{end_time}\")\n        print(\"Monday\")\n    else:\n        print(\"No suitable time found\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]