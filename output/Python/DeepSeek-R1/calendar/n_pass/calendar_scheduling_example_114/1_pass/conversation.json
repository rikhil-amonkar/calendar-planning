[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Stephanie, Cheryl, Bradley and Steven for one hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nStephanie is busy on Monday during 10:00 to 10:30, 16:00 to 16:30; \nCheryl has meetings on Monday during 10:00 to 10:30, 11:30 to 12:00, 13:30 to 14:00, 16:30 to 17:00; \nBradley has meetings on Monday during 9:30 to 10:00, 10:30 to 11:30, 13:30 to 14:00, 14:30 to 15:00, 15:30 to 17:00; \nSteven has blocked their calendar on Monday during 9:00 to 12:00, 13:00 to 13:30, 14:30 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    # Define work hours (9:00 to 17:00) in minutes from 9:00\n    work_start = 0   # 9:00\n    work_end = 480   # 17:00\n    meeting_duration = 60  # 1 hour\n\n    # Busy intervals for each participant (in minutes from 9:00)\n    all_busy = [\n        # Stephanie\n        (60, 90), (420, 450),\n        # Cheryl\n        (60, 90), (150, 180), (270, 300), (450, 480),\n        # Bradley\n        (30, 60), (90, 150), (270, 300), (330, 360), (390, 480),\n        # Steven\n        (0, 180), (240, 270), (330, 480)\n    ]\n\n    # Aggregate events: +1 for start, -1 for end\n    events_aggregated = {}\n    for s, e in all_busy:\n        events_aggregated[s] = events_aggregated.get(s, 0) + 1\n        events_aggregated[e] = events_aggregated.get(e, 0) - 1\n\n    # Sort event times\n    event_times = sorted(events_aggregated.keys())\n    counter = 0\n    free_start = work_start\n    free_intervals = []\n    \n    # Track free intervals\n    for time in event_times:\n        net_delta = events_aggregated[time]\n        prev_counter = counter\n        counter += net_delta\n        \n        if prev_counter == 0 and counter > 0:\n            if time > free_start:\n                free_intervals.append((free_start, time))\n            free_start = None\n        if prev_counter > 0 and counter == 0:\n            free_start = time\n    \n    # Add last free interval if applicable\n    if free_start is not None and free_start < work_end:\n        free_intervals.append((free_start, work_end))\n    \n    # Find first free interval that fits the meeting\n    meeting_slot = None\n    for start, end in free_intervals:\n        if end - start >= meeting_duration:\n            meeting_slot = (start, start + meeting_duration)\n            break\n    \n    if meeting_slot:\n        start_min, end_min = meeting_slot\n        # Convert start time to HH:MM\n        start_hour = 9 + start_min // 60\n        start_minute = start_min % 60\n        start_str = f\"{start_hour:02d}:{start_minute:02d}\"\n        \n        # Convert end time to HH:MM\n        end_hour = 9 + end_min // 60\n        end_minute = end_min % 60\n        end_str = f\"{end_hour:02d}:{end_minute:02d}\"\n        \n        # Output day and time range\n        print(\"Monday\")\n        print(f\"{start_str}:{end_str}\")\n    else:\n        print(\"No suitable time found\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]