[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Arthur and Michael for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nArthur has meetings on Monday during 11:00 to 11:30, 13:30 to 14:00, 15:00 to 15:30, Tuesday during 13:00 to 13:30, 16:00 to 16:30, Wednesday during 10:00 to 10:30, 11:00 to 11:30, 12:00 to 12:30, 14:00 to 14:30, 16:00 to 16:30; \nMichael has meetings on Monday during 9:00 to 12:00, 12:30 to 13:00, 14:00 to 14:30, 15:00 to 17:00, Tuesday during 9:30 to 11:30, 12:00 to 13:30, 14:00 to 15:30, Wednesday during 10:00 to 12:30, 13:00 to 13:30; \n\nArthur can not meet on Tuesday. The group would like to meet at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    duration = 30         # meeting duration in minutes\n\n    # Define busy times in minutes for each day (start, end)\n    arthur_busy = {\n        'Monday': [\n            (11 * 60, 11 * 60 + 30),    # 11:00-11:30\n            (13 * 60 + 30, 14 * 60),    # 13:30-14:00\n            (15 * 60, 15 * 60 + 30)     # 15:00-15:30\n        ],\n        'Wednesday': [\n            (10 * 60, 10 * 60 + 30),    # 10:00-10:30\n            (11 * 60, 11 * 60 + 30),    # 11:00-11:30\n            (12 * 60, 12 * 60 + 30),    # 12:00-12:30\n            (14 * 60, 14 * 60 + 30),    # 14:00-14:30\n            (16 * 60, 16 * 60 + 30)     # 16:00-16:30\n        ]\n    }\n\n    michael_busy = {\n        'Monday': [\n            (9 * 60, 12 * 60),          # 9:00-12:00\n            (12 * 60 + 30, 13 * 60),    # 12:30-13:00\n            (14 * 60, 14 * 60 + 30),    # 14:00-14:30\n            (15 * 60, 17 * 60)          # 15:00-17:00\n        ],\n        'Wednesday': [\n            (10 * 60, 12 * 60 + 30),    # 10:00-12:30\n            (13 * 60, 13 * 60 + 30)     # 13:00-13:30\n        ]\n    }\n\n    days = ['Monday', 'Wednesday']  # Skip Tuesday as Arthur cannot meet\n\n    found_slot = None\n    for day in days:\n        # Get busy intervals for the day and sort by start time\n        a_busy = sorted(arthur_busy.get(day, []))\n        m_busy = sorted(michael_busy.get(day, []))\n\n        # Compute free intervals for Arthur\n        a_free = []\n        current = work_start\n        for s, e in a_busy:\n            if current < s:\n                a_free.append((current, s))\n            current = e\n        if current < work_end:\n            a_free.append((current, work_end))\n\n        # Compute free intervals for Michael\n        m_free = []\n        current = work_start\n        for s, e in m_busy:\n            if current < s:\n                m_free.append((current, s))\n            current = e\n        if current < work_end:\n            m_free.append((current, work_end))\n\n        # Find overlapping free intervals\n        i = j = 0\n        while i < len(a_free) and j < len(m_free):\n            a_start, a_end = a_free[i]\n            m_start, m_end = m_free[j]\n            # Calculate overlap\n            low = max(a_start, m_start)\n            high = min(a_end, m_end)\n            if low < high and high - low >= duration:\n                found_slot = (day, low, low + duration)\n                break\n            # Move to next interval\n            if a_end < m_end:\n                i += 1\n            else:\n                j += 1\n        if found_slot:\n            break\n\n    if found_slot:\n        day, start_min, end_min = found_slot\n        # Format time as HH:MM:HH:MM\n        start_hour = start_min // 60\n        start_minute = start_min % 60\n        end_hour = end_min // 60\n        end_minute = end_min % 60\n        time_str = f\"{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}\"\n        print(day)\n        print(time_str)\n    else:\n        print(\"No solution found\")  # Should not happen per problem\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]