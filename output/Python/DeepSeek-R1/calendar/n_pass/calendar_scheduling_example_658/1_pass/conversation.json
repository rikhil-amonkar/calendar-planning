[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Shirley and Albert for half an hour between the work hours of 9:00 to 17:00 on either Monday or Tuesday. \n\nHere are the existing schedules for everyone during the days: \nShirley has blocked their calendar on Monday during 10:30 to 11:00, 12:00 to 12:30, 16:00 to 16:30, Tuesday during 9:30 to 10:00; \nAlbert is busy on Monday during 9:00 to 17:00, Tuesday during 9:30 to 11:00, 11:30 to 12:30, 13:00 to 16:00, 16:30 to 17:00; \n\nShirley would rather not meet on Tuesday after 10:30. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_str_to_minutes(time_str):\n    hours, minutes = time_str.split(':')\n    return int(hours) * 60 + int(minutes)\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\ndef get_free_slots(work_start, work_end, busy_list):\n    free_slots = [(work_start, work_end)]\n    if not busy_list:\n        return free_slots\n    \n    busy_intervals = []\n    for busy in busy_list:\n        s = time_str_to_minutes(busy[0])\n        e = time_str_to_minutes(busy[1])\n        busy_intervals.append((s, e))\n    busy_intervals.sort(key=lambda x: x[0])\n    \n    for busy in busy_intervals:\n        new_free = []\n        for slot in free_slots:\n            if slot[1] <= busy[0] or slot[0] >= busy[1]:\n                new_free.append(slot)\n            else:\n                if slot[0] < busy[0]:\n                    new_free.append((slot[0], busy[0]))\n                if slot[1] > busy[1]:\n                    new_free.append((busy[1], slot[1]))\n        free_slots = new_free\n    return free_slots\n\ndef find_common_slots(slots1, slots2, duration):\n    common = []\n    for slot1 in slots1:\n        for slot2 in slots2:\n            start_overlap = max(slot1[0], slot2[0])\n            end_overlap = min(slot1[1], slot2[1])\n            if start_overlap < end_overlap and (end_overlap - start_overlap) >= duration:\n                common.append((start_overlap, end_overlap))\n    common.sort(key=lambda x: x[0])\n    return common\n\ndef main():\n    work_start = time_str_to_minutes('09:00')\n    work_end = time_str_to_minutes('17:00')\n    duration = 30\n    \n    shirley_busy = {\n        'Monday': [('10:30','11:00'), ('12:00','12:30'), ('16:00','16:30')],\n        'Tuesday': [('09:30','10:00')]\n    }\n    \n    albert_busy = {\n        'Monday': [('09:00','17:00')],\n        'Tuesday': [('09:30','11:00'), ('11:30','12:30'), ('13:00','16:00'), ('16:30','17:00')]\n    }\n    \n    days = ['Monday', 'Tuesday']\n    tuesday_cutoff = time_str_to_minutes('10:30')\n    \n    for day in days:\n        shirley_free = get_free_slots(work_start, work_end, shirley_busy.get(day, []))\n        albert_free = get_free_slots(work_start, work_end, albert_busy.get(day, []))\n        common = find_common_slots(shirley_free, albert_free, duration)\n        \n        if day == 'Tuesday':\n            common = [slot for slot in common if slot[0] < tuesday_cutoff]\n            \n        if common:\n            slot = common[0]\n            start_minutes = slot[0]\n            end_minutes = start_minutes + duration\n            start_str = minutes_to_time(start_minutes)\n            end_str = minutes_to_time(end_minutes)\n            print(day)\n            print(f\"{start_str}:{end_str}\")\n            return\n\nif __name__ == '__main__':\n    main()\n```"
    }
]