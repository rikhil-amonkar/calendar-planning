[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Adam, John, Stephanie and Anna for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nAdam has meetings on Monday during 14:00 to 15:00; \nJohn is busy on Monday during 13:00 to 13:30, 14:00 to 14:30, 15:30 to 16:00, 16:30 to 17:00; \nStephanie has meetings on Monday during 9:30 to 10:00, 10:30 to 11:00, 11:30 to 16:00, 16:30 to 17:00; \nAnna is busy on Monday during 9:30 to 10:00, 12:00 to 12:30, 13:00 to 15:30, 16:30 to 17:00; \n\nAnna would rather not meet on Monday before 14:30. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h:02d}:{m:02d}\"\n\n# Work hours\nwork_start = time_to_minutes(\"9:00\")  # 540 minutes\nwork_end = time_to_minutes(\"17:00\")   # 1020 minutes\n\n# Collect all busy intervals (as half-open [start, end))\nbusy_intervals = []\n\n# Adam: 14:00 to 15:00\nbusy_intervals.append([time_to_minutes(\"14:00\"), time_to_minutes(\"15:00\")])\n\n# John\nbusy_intervals.append([time_to_minutes(\"13:00\"), time_to_minutes(\"13:30\")])\nbusy_intervals.append([time_to_minutes(\"14:00\"), time_to_minutes(\"14:30\")])\nbusy_intervals.append([time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\")])\nbusy_intervals.append([time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\")])\n\n# Stephanie\nbusy_intervals.append([time_to_minutes(\"9:30\"), time_to_minutes(\"10:00\")])\nbusy_intervals.append([time_to_minutes(\"10:30\"), time_to_minutes(\"11:00\")])\nbusy_intervals.append([time_to_minutes(\"11:30\"), time_to_minutes(\"16:00\")])\nbusy_intervals.append([time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\")])\n\n# Anna\nbusy_intervals.append([time_to_minutes(\"9:30\"), time_to_minutes(\"10:00\")])\nbusy_intervals.append([time_to_minutes(\"12:00\"), time_to_minutes(\"12:30\")])\nbusy_intervals.append([time_to_minutes(\"13:00\"), time_to_minutes(\"15:30\")])\nbusy_intervals.append([time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\")])\n\n# Merge busy intervals\nbusy_intervals.sort(key=lambda x: x[0])\nmerged_busy = []\ncurrent_start, current_end = busy_intervals[0]\nfor i in range(1, len(busy_intervals)):\n    s, e = busy_intervals[i]\n    if s <= current_end:\n        current_end = max(current_end, e)\n    else:\n        merged_busy.append([current_start, current_end])\n        current_start, current_end = s, e\nmerged_busy.append([current_start, current_end])\n\n# Compute free intervals within work hours\nfree_intervals = []\nprev_end = work_start\nfor start, end in merged_busy:\n    if prev_end < start:\n        free_intervals.append([prev_end, start])\n    prev_end = end\nif prev_end < work_end:\n    free_intervals.append([prev_end, work_end])\n\n# Anna's preference: not before 14:30 (870 minutes)\nanna_pref_min = time_to_minutes(\"14:30\")\nmeeting_duration = 30\n\n# Find the first free interval that can accommodate the meeting after 14:30\nmeeting_start = None\nfor start, end in free_intervals:\n    candidate_start = max(start, anna_pref_min)\n    if candidate_start + meeting_duration <= end:\n        meeting_start = candidate_start\n        break\n\n# Convert meeting start and end times\nmeeting_end = meeting_start + meeting_duration\nstart_time_str = minutes_to_time(meeting_start)\nend_time_str = minutes_to_time(meeting_end)\n\n# Output day and time in the required format\nprint(\"Monday\")\nprint(f\"{start_time_str}:{end_time_str}\")\n```"
    }
]