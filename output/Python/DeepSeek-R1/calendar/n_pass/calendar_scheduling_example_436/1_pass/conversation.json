[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Patrick, Shirley, Jeffrey, Gloria, Nathan, Angela and David for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nPatrick has meetings on Monday during 13:30 to 14:00, 14:30 to 15:00; \nShirley has meetings on Monday during 9:00 to 9:30, 11:00 to 11:30, 12:00 to 12:30, 14:30 to 15:00, 16:00 to 17:00; \nJeffrey has meetings on Monday during 9:00 to 9:30, 10:30 to 11:00, 11:30 to 12:00, 13:00 to 13:30, 16:00 to 17:00; \nGloria is busy on Monday during 11:30 to 12:00, 15:00 to 15:30; \nNathan is busy on Monday during 9:00 to 9:30, 10:30 to 12:00, 14:00 to 17:00; \nAngela has meetings on Monday during 9:00 to 9:30, 10:00 to 11:00, 12:30 to 15:00, 15:30 to 16:30; \nDavid is busy on Monday during 9:00 to 9:30, 10:00 to 10:30, 11:00 to 14:00, 14:30 to 16:30; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    # Define work hours: 9:00 to 17:00 (480 minutes from 0 to 479)\n    total_minutes = 480\n    available = [True] * total_minutes  # True means minute is available for meeting\n\n    # Helper function to convert time string to minutes from 9:00\n    def time_to_minutes(time_str):\n        h, m = time_str.split(':')\n        return (int(h) - 9) * 60 + int(m)\n\n    # Busy intervals for each participant\n    participants_schedule = {\n        \"Patrick\": [\"13:30 to 14:00\", \"14:30 to 15:00\"],\n        \"Shirley\": [\"9:00 to 9:30\", \"11:00 to 11:30\", \"12:00 to 12:30\", \"14:30 to 15:00\", \"16:00 to 17:00\"],\n        \"Jeffrey\": [\"9:00 to 9:30\", \"10:30 to 11:00\", \"11:30 to 12:00\", \"13:00 to 13:30\", \"16:00 to 17:00\"],\n        \"Gloria\": [\"11:30 to 12:00\", \"15:00 to 15:30\"],\n        \"Nathan\": [\"9:00 to 9:30\", \"10:30 to 12:00\", \"14:00 to 17:00\"],\n        \"Angela\": [\"9:00 to 9:30\", \"10:00 to 11:00\", \"12:30 to 15:00\", \"15:30 to 16:30\"],\n        \"David\": [\"9:00 to 9:30\", \"10:00 to 10:30\", \"11:00 to 14:00\", \"14:30 to 16:30\"]\n    }\n\n    # Mark busy minutes in the available array\n    for person, intervals in participants_schedule.items():\n        for interval in intervals:\n            start_str, end_str = interval.split(' to ')\n            start_min = time_to_minutes(start_str)\n            end_min = time_to_minutes(end_str)\n            # Clamp end_min to 480 (17:00)\n            end_min = min(end_min, total_minutes)\n            # Mark minutes from start_min to end_min-1 as unavailable\n            for minute in range(start_min, end_min):\n                if minute < total_minutes:\n                    available[minute] = False\n\n    # Find first available 30-minute slot\n    meeting_duration = 30\n    consecutive_count = 0\n    start_slot = -1\n\n    for minute in range(total_minutes):\n        if available[minute]:\n            consecutive_count += 1\n            if consecutive_count >= meeting_duration:\n                start_slot = minute - meeting_duration + 1\n                break\n        else:\n            consecutive_count = 0\n\n    # Convert start_slot back to time string\n    def minutes_to_time(minutes):\n        total = minutes\n        hour = 9 + total // 60\n        minute = total % 60\n        return f\"{hour:02d}:{minute:02d}\"\n\n    start_time = minutes_to_time(start_slot)\n    end_time = minutes_to_time(start_slot + meeting_duration)\n\n    # Output day and time range in HH:MM:HH:MM format\n    print(\"Monday\")\n    print(f\"{start_time}:{end_time}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]