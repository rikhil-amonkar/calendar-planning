[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Terry and Frances for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday, Wednesday, Thursday or Friday. \n\nHere are the existing schedules for everyone during the days: \nTerry is busy on Monday during 10:30 to 11:00, 12:30 to 14:00, 15:00 to 17:00, Tuesday during 9:30 to 10:00, 10:30 to 11:00, 14:00 to 14:30, 16:00 to 16:30, Wednesday during 9:30 to 10:30, 11:00 to 12:00, 13:00 to 13:30, 15:00 to 16:00, 16:30 to 17:00, Thursday during 9:30 to 10:00, 12:00 to 12:30, 13:00 to 14:30, 16:00 to 16:30, Friday during 9:00 to 11:30, 12:00 to 12:30, 13:30 to 16:00, 16:30 to 17:00; \nFrances has blocked their calendar on Monday during 9:30 to 11:00, 11:30 to 13:00, 14:00 to 14:30, 15:00 to 16:00, Tuesday during 9:00 to 9:30, 10:00 to 10:30, 11:00 to 12:00, 13:00 to 14:30, 15:30 to 16:30, Wednesday during 9:30 to 10:00, 10:30 to 11:00, 11:30 to 16:00, 16:30 to 17:00, Thursday during 11:00 to 12:30, 14:30 to 17:00, Friday during 9:30 to 10:30, 11:00 to 12:30, 13:00 to 16:00, 16:30 to 17:00; \n\nFrances would like to avoid more meetings on Tuesday. You would like to schedule the meeting at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_str_to_minutes(time_str):\n    parts = time_str.split(':')\n    return int(parts[0]) * 60 + int(parts[1])\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\ndef merge_intervals(intervals):\n    if not intervals:\n        return []\n    sorted_intervals = sorted(intervals, key=lambda x: x[0])\n    merged = []\n    start, end = sorted_intervals[0]\n    for i in range(1, len(sorted_intervals)):\n        if sorted_intervals[i][0] <= end:\n            end = max(end, sorted_intervals[i][1])\n        else:\n            merged.append((start, end))\n            start, end = sorted_intervals[i]\n    merged.append((start, end))\n    return merged\n\ndef free_intervals(busy_intervals, work_start, work_end):\n    if not busy_intervals:\n        return [(work_start, work_end)]\n    merged_busy = merge_intervals(busy_intervals)\n    free = []\n    current = work_start\n    for start_busy, end_busy in merged_busy:\n        if current < start_busy:\n            free.append((current, start_busy))\n        current = max(current, end_busy)\n    if current < work_end:\n        free.append((current, work_end))\n    return free\n\ndef intersect_intervals(intervals1, intervals2):\n    i, j = 0, 0\n    result = []\n    while i < len(intervals1) and j < len(intervals2):\n        low = max(intervals1[i][0], intervals2[j][0])\n        high = min(intervals1[i][1], intervals2[j][1])\n        if low < high:\n            result.append((low, high))\n        if intervals1[i][1] < intervals2[j][1]:\n            i += 1\n        else:\n            j += 1\n    return result\n\ndef main():\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    day_index_map = {\n        'Monday': 0,\n        'Tuesday': 1,\n        'Wednesday': 2,\n        'Thursday': 3,\n        'Friday': 4\n    }\n    \n    # Terry's busy times\n    terry_busy = {\n        'Monday': [('10:30','11:00'), ('12:30','14:00'), ('15:00','17:00')],\n        'Tuesday': [('9:30','10:00'), ('10:30','11:00'), ('14:00','14:30'), ('16:00','16:30')],\n        'Wednesday': [('9:30','10:30'), ('11:00','12:00'), ('13:00','13:30'), ('15:00','16:00'), ('16:30','17:00')],\n        'Thursday': [('9:30','10:00'), ('12:00','12:30'), ('13:00','14:30'), ('16:00','16:30')],\n        'Friday': [('9:00','11:30'), ('12:00','12:30'), ('13:30','16:00'), ('16:30','17:00')]\n    }\n    \n    # Frances's busy times\n    frances_busy = {\n        'Monday': [('9:30','11:00'), ('11:30','13:00'), ('14:00','14:30'), ('15:00','16:00')],\n        'Tuesday': [('9:00','9:30'), ('10:00','10:30'), ('11:00','12:00'), ('13:00','14:30'), ('15:30','16:30')],\n        'Wednesday': [('9:30','10:00'), ('10:30','11:00'), ('11:30','16:00'), ('16:30','17:00')],\n        'Thursday': [('11:00','12:30'), ('14:30','17:00')],\n        'Friday': [('9:30','10:30'), ('11:00','12:30'), ('13:00','16:00'), ('16:30','17:00')]\n    }\n    \n    non_tuesday_candidates = []\n    tuesday_candidates = []\n    \n    for day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']:\n        # Convert Terry's busy times to minutes\n        terry_busy_minutes = []\n        for interval in terry_busy[day]:\n            start_min = time_str_to_minutes(interval[0])\n            end_min = time_str_to_minutes(interval[1])\n            terry_busy_minutes.append((start_min, end_min))\n        \n        # Convert Frances's busy times to minutes\n        frances_busy_minutes = []\n        for interval in frances_busy[day]:\n            start_min = time_str_to_minutes(interval[0])\n            end_min = time_str_to_minutes(interval[1])\n            frances_busy_minutes.append((start_min, end_min))\n        \n        # Get free intervals for Terry and Frances\n        terry_free = free_intervals(terry_busy_minutes, work_start, work_end)\n        frances_free = free_intervals(frances_busy_minutes, work_start, work_end)\n        \n        # Find overlapping free intervals\n        overlap = intersect_intervals(terry_free, frances_free)\n        \n        # Check each overlapping interval for 30-minute availability\n        for start, end in overlap:\n            duration = end - start\n            if duration >= 30:\n                day_idx = day_index_map[day]\n                candidate = (day_idx, start, day)\n                if day != 'Tuesday':\n                    non_tuesday_candidates.append(candidate)\n                else:\n                    tuesday_candidates.append(candidate)\n    \n    # Select the earliest candidate, avoiding Tuesday if possible\n    if non_tuesday_candidates:\n        non_tuesday_candidates.sort(key=lambda x: (x[0], x[1]))\n        chosen = non_tuesday_candidates[0]\n    elif tuesday_candidates:\n        tuesday_candidates.sort(key=lambda x: (x[0], x[1]))\n        chosen = tuesday_candidates[0]\n    else:\n        # According to the problem, a solution exists, so this should not happen\n        print(\"No solution found\")\n        return\n    \n    day_name = chosen[2]\n    start_minutes = chosen[1]\n    end_minutes = start_minutes + 30\n    start_str = minutes_to_time(start_minutes)\n    end_str = minutes_to_time(end_minutes)\n    time_range_str = f\"{start_str}:{end_str}\"\n    \n    print(day_name)\n    print(time_range_str)\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]