[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Julie, Sean and Lori for one hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nJulie has blocked their calendar on Monday during 9:00 to 9:30, 11:00 to 11:30, 12:00 to 12:30, 13:30 to 14:00, 16:00 to 17:00; \nSean has meetings on Monday during 9:00 to 9:30, 13:00 to 13:30, 15:00 to 15:30, 16:00 to 16:30; \nLori is busy on Monday during 10:00 to 10:30, 11:00 to 13:00, 15:30 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_to_minutes(time_str):\n    parts = time_str.split(':')\n    return int(parts[0]) * 60 + int(parts[1])\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h:02d}:{m:02d}\"\n\ndef get_free_intervals(busy_list, work_start, work_end):\n    if not busy_list:\n        return [(work_start, work_end)]\n    sorted_busy = sorted(busy_list, key=lambda x: x[0])\n    free = []\n    current = work_start\n    for interval in sorted_busy:\n        start, end = interval\n        if current < start:\n            free.append((current, start))\n        current = max(current, end)\n    if current < work_end:\n        free.append((current, work_end))\n    return free\n\ndef intersect_intervals(intervals1, intervals2):\n    i, j = 0, 0\n    result = []\n    while i < len(intervals1) and j < len(intervals2):\n        start1, end1 = intervals1[i]\n        start2, end2 = intervals2[j]\n        low = max(start1, start2)\n        high = min(end1, end2)\n        if low < high:\n            result.append((low, high))\n        if end1 < end2:\n            i += 1\n        else:\n            j += 1\n    return result\n\n# Main\nwork_start = time_to_minutes(\"9:00\")\nwork_end = time_to_minutes(\"17:00\")\nmeeting_duration = 60\n\n# Define busy intervals\njulie_busy = [\n    (time_to_minutes(\"9:00\"), time_to_minutes(\"9:30\")),\n    (time_to_minutes(\"11:00\"), time_to_minutes(\"11:30\")),\n    (time_to_minutes(\"12:00\"), time_to_minutes(\"12:30\")),\n    (time_to_minutes(\"13:30\"), time_to_minutes(\"14:00\")),\n    (time_to_minutes(\"16:00\"), time_to_minutes(\"17:00\"))\n]\n\nsean_busy = [\n    (time_to_minutes(\"9:00\"), time_to_minutes(\"9:30\")),\n    (time_to_minutes(\"13:00\"), time_to_minutes(\"13:30\")),\n    (time_to_minutes(\"15:00\"), time_to_minutes(\"15:30\")),\n    (time_to_minutes(\"16:00\"), time_to_minutes(\"16:30\"))\n]\n\nlori_busy = [\n    (time_to_minutes(\"10:00\"), time_to_minutes(\"10:30\")),\n    (time_to_minutes(\"11:00\"), time_to_minutes(\"13:00\")),\n    (time_to_minutes(\"15:30\"), time_to_minutes(\"17:00\"))\n]\n\n# Compute free intervals\njulie_free = get_free_intervals(julie_busy, work_start, work_end)\nsean_free = get_free_intervals(sean_busy, work_start, work_end)\nlori_free = get_free_intervals(lori_busy, work_start, work_end)\n\n# Find common free times\ncommon_js = intersect_intervals(julie_free, sean_free)\ncommon_all = intersect_intervals(common_js, lori_free)\n\n# Find first suitable slot\nfor start, end in common_all:\n    if end - start >= meeting_duration:\n        meeting_start = start\n        meeting_end = start + meeting_duration\n        time_str = f\"{minutes_to_time(meeting_start)}:{minutes_to_time(meeting_end)}\"\n        print(time_str)\n        print(\"Monday\")\n        break\n```"
    }
]