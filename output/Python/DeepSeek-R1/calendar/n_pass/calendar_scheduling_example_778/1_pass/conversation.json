[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Susan and Sandra for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nSusan has blocked their calendar on Monday during 12:30 to 13:00, 13:30 to 14:00, Tuesday during 11:30 to 12:00, Wednesday during 9:30 to 10:30, 14:00 to 14:30, 15:30 to 16:30; \nSandra has meetings on Monday during 9:00 to 13:00, 14:00 to 15:00, 16:00 to 16:30, Tuesday during 9:00 to 9:30, 10:30 to 12:00, 12:30 to 13:30, 14:00 to 14:30, 16:00 to 17:00, Wednesday during 9:00 to 11:30, 12:00 to 12:30, 13:00 to 17:00; \n\nSusan would rather not meet on Tuesday. Sandra can not meet on Monday after 16:00. Wednesday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_str_to_minutes(time_str):\n    h, m = time_str.split(':')\n    return int(h) * 60 + int(m)\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h:02d}:{m:02d}\"\n\ndef compute_free(work_start, work_end, busy_list):\n    if not busy_list:\n        return [(work_start, work_end)]\n    sorted_busy = sorted(busy_list, key=lambda x: x[0])\n    free = []\n    current_start = work_start\n    for s, e in sorted_busy:\n        if s < current_start:\n            if e > current_start:\n                current_start = e\n            continue\n        if current_start < s:\n            free.append((current_start, s))\n        current_start = max(current_start, e)\n    if current_start < work_end:\n        free.append((current_start, work_end))\n    return free\n\ndef main():\n    days = ['Monday', 'Wednesday', 'Tuesday']\n    work_start = 9 * 60  # 9:00\n    work_end = 17 * 60   # 17:00\n\n    susan_busy = {\n        'Monday': [(12*60+30, 13*60), (13*60+30, 14*60)],\n        'Tuesday': [(11*60+30, 12*60)],\n        'Wednesday': [(9*60+30, 10*60+30), (14*60, 14*60+30), (15*60+30, 16*60+30)]\n    }\n\n    sandra_busy = {\n        'Monday': [(9*60, 13*60), (14*60, 15*60)],\n        'Tuesday': [(9*60, 9*60+30), (10*60+30, 12*60), (12*60+30, 13*60+30), (14*60, 14*60+30), (16*60, 17*60)],\n        'Wednesday': [(9*60, 11*60+30), (12*60, 12*60+30), (13*60, 17*60)]\n    }\n\n    for day in days:\n        susan_work = (work_start, work_end)\n        if day == 'Monday':\n            sandra_work = (work_start, 16*60)\n        else:\n            sandra_work = (work_start, work_end)\n            \n        susan_free = compute_free(susan_work[0], susan_work[1], susan_busy.get(day, []))\n        sandra_free = compute_free(sandra_work[0], sandra_work[1], sandra_busy.get(day, []))\n        \n        for s1, e1 in susan_free:\n            for s2, e2 in sandra_free:\n                start_overlap = max(s1, s2)\n                end_overlap = min(e1, e2)\n                if end_overlap - start_overlap >= 30:\n                    start_time = minutes_to_time(start_overlap)\n                    end_time = minutes_to_time(start_overlap + 30)\n                    time_output = f\"{start_time.replace(':', '')}:{end_time.replace(':', '')}\"\n                    print(day)\n                    print(time_output)\n                    return\n                    \n    print(\"No suitable time found\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]