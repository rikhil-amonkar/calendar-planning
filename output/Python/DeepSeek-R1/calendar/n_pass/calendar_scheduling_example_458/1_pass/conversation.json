[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Wayne, Melissa, Catherine, Gregory, Victoria, Thomas and Jennifer for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nWayne is free the entire day.\nMelissa has meetings on Monday during 10:00 to 11:00, 12:30 to 14:00, 15:00 to 15:30; \nCatherine is free the entire day.\nGregory has blocked their calendar on Monday during 12:30 to 13:00, 15:30 to 16:00; \nVictoria is busy on Monday during 9:00 to 9:30, 10:30 to 11:30, 13:00 to 14:00, 14:30 to 15:00, 15:30 to 16:30; \nThomas has meetings on Monday during 10:00 to 12:00, 12:30 to 13:00, 14:30 to 16:00; \nJennifer has blocked their calendar on Monday during 9:00 to 9:30, 10:00 to 10:30, 11:00 to 13:00, 13:30 to 14:30, 15:00 to 15:30, 16:00 to 16:30; \n\nWayne would like to avoid more meetings on Monday before 14:00. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_str_to_minutes(time_str):\n    parts = time_str.split(':')\n    hour = int(parts[0])\n    minute = int(parts[1])\n    return hour * 60 + minute\n\ndef minutes_to_time_str(minutes):\n    hour = minutes // 60\n    minute = minutes % 60\n    return f\"{hour:02d}:{minute:02d}\"\n\ndef compute_free_intervals(busy_intervals, day_start, day_end):\n    if not busy_intervals:\n        return [(day_start, day_end)]\n    sorted_busy = sorted(busy_intervals, key=lambda x: x[0])\n    free_intervals = []\n    current = day_start\n    for start, end in sorted_busy:\n        if current < start:\n            free_intervals.append((current, start))\n        current = max(current, end)\n    if current < day_end:\n        free_intervals.append((current, day_end))\n    return free_intervals\n\ndef intersect_two_interval_lists(list1, list2):\n    if not list1 or not list2:\n        return []\n    common = []\n    for iv1 in list1:\n        for iv2 in list2:\n            low = max(iv1[0], iv2[0])\n            high = min(iv1[1], iv2[1])\n            if low < high:\n                common.append((low, high))\n    return common\n\ndef main():\n    day_start = time_str_to_minutes(\"9:00\")\n    day_end = time_str_to_minutes(\"17:00\")\n    meeting_duration = 30  # minutes\n\n    # Define busy intervals for each participant in minutes\n    participants_busy = {\n        \"Wayne\": [],\n        \"Melissa\": [\n            (\"10:00\", \"11:00\"),\n            (\"12:30\", \"14:00\"),\n            (\"15:00\", \"15:30\")\n        ],\n        \"Catherine\": [],\n        \"Gregory\": [\n            (\"12:30\", \"13:00\"),\n            (\"15:30\", \"16:00\")\n        ],\n        \"Victoria\": [\n            (\"9:00\", \"9:30\"),\n            (\"10:30\", \"11:30\"),\n            (\"13:00\", \"14:00\"),\n            (\"14:30\", \"15:00\"),\n            (\"15:30\", \"16:30\")\n        ],\n        \"Thomas\": [\n            (\"10:00\", \"12:00\"),\n            (\"12:30\", \"13:00\"),\n            (\"14:30\", \"16:00\")\n        ],\n        \"Jennifer\": [\n            (\"9:00\", \"9:30\"),\n            (\"10:00\", \"10:30\"),\n            (\"11:00\", \"13:00\"),\n            (\"13:30\", \"14:30\"),\n            (\"15:00\", \"15:30\"),\n            (\"16:00\", \"16:30\")\n        ]\n    }\n\n    # Convert busy times to minutes\n    busy_minutes = {}\n    for participant, intervals in participants_busy.items():\n        converted = []\n        for start_str, end_str in intervals:\n            start_min = time_str_to_minutes(start_str)\n            end_min = time_str_to_minutes(end_str)\n            converted.append((start_min, end_min))\n        busy_minutes[participant] = converted\n\n    # Compute free intervals for each participant\n    free_intervals = {}\n    for participant, busy_list in busy_minutes.items():\n        free_intervals[participant] = compute_free_intervals(busy_list, day_start, day_end)\n    \n    # Apply Wayne's constraint: avoid before 14:00 (840 minutes)\n    wayne_free = free_intervals[\"Wayne\"]\n    wayne_constrained = []\n    for start, end in wayne_free:\n        low = max(start, 840)\n        high = min(end, day_end)\n        if low < high:\n            wayne_constrained.append((low, high))\n    free_intervals[\"Wayne\"] = wayne_constrained\n\n    # List of participants in order\n    participant_names = [\"Wayne\", \"Melissa\", \"Catherine\", \"Gregory\", \"Victoria\", \"Thomas\", \"Jennifer\"]\n    all_free = [free_intervals[name] for name in participant_names]\n    \n    # Compute common free intervals\n    common = all_free[0]\n    for i in range(1, len(all_free)):\n        common = intersect_two_interval_lists(common, all_free[i])\n        if not common:\n            break\n    \n    # Find the first 30-minute slot\n    meeting_start = None\n    for start, end in common:\n        if end - start >= meeting_duration:\n            meeting_start = start\n            break\n    \n    if meeting_start is None:\n        print(\"No suitable time found\")\n        return\n    \n    meeting_end = meeting_start + meeting_duration\n    start_h = meeting_start // 60\n    start_m = meeting_start % 60\n    end_h = meeting_end // 60\n    end_m = meeting_end % 60\n    \n    print(\"Monday\")\n    print(f\"{start_h:02d}:{start_m:02d}:{end_h:02d}:{end_m:02d}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]