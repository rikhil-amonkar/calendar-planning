[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Ryan and Adam for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nRyan has meetings on Monday during 9:30 to 10:00, 11:00 to 12:00, 13:00 to 13:30, 15:30 to 16:00, Tuesday during 11:30 to 12:30, 15:30 to 16:00, Wednesday during 12:00 to 13:00, 15:30 to 16:00, 16:30 to 17:00; \nAdam is busy on Monday during 9:00 to 10:30, 11:00 to 13:30, 14:00 to 16:00, 16:30 to 17:00, Tuesday during 9:00 to 10:00, 10:30 to 15:30, 16:00 to 17:00, Wednesday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 14:30, 15:00 to 15:30, 16:00 to 16:30; \n\nRyan can not meet on Wednesday. Adam would like to avoid more meetings on Monday before 14:30. Tuesday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_str_to_minutes(time_str):\n    h, m = time_str.split(':')\n    return int(h) * 60 + int(m)\n\ndef minutes_to_time_str(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h:02d}:{m:02d}\"\n\ndef get_free_intervals(busy_list, start_min, end_min):\n    busy_intervals = []\n    for s, e in busy_list:\n        s_min = time_str_to_minutes(s)\n        e_min = time_str_to_minutes(e)\n        busy_intervals.append((s_min, e_min))\n    \n    busy_intervals.sort()\n    free = []\n    current = start_min\n    for s, e in busy_intervals:\n        if s > current:\n            free.append((current, s))\n            current = e\n        else:\n            if e > current:\n                current = e\n    if current < end_min:\n        free.append((current, end_min))\n    return free\n\ndef intersect_intervals(intervals1, intervals2):\n    i, j = 0, 0\n    common = []\n    while i < len(intervals1) and j < len(intervals2):\n        low = max(intervals1[i][0], intervals2[j][0])\n        high = min(intervals1[i][1], intervals2[j][1])\n        if low < high:\n            common.append((low, high))\n        if intervals1[i][1] < intervals2[j][1]:\n            i += 1\n        else:\n            j += 1\n    return common\n\ndef main():\n    ryan_busy = {\n        'Monday': [('09:30', '10:00'), ('11:00', '12:00'), ('13:00', '13:30'), ('15:30', '16:00')],\n        'Tuesday': [('11:30', '12:30'), ('15:30', '16:00')],\n        'Wednesday': [('12:00', '13:00'), ('15:30', '16:00'), ('16:30', '17:00')]\n    }\n    adam_busy = {\n        'Monday': [('09:00', '10:30'), ('11:00', '13:30'), ('14:00', '16:00'), ('16:30', '17:00')],\n        'Tuesday': [('09:00', '10:00'), ('10:30', '15:30'), ('16:00', '17:00')],\n        'Wednesday': [('09:00', '09:30'), ('10:00', '11:00'), ('11:30', '14:30'), ('15:00', '15:30'), ('16:00', '16:30')]\n    }\n    \n    days = ['Monday', 'Tuesday']\n    work_start = 9 * 60\n    work_end = 17 * 60\n    duration = 30\n    \n    for day in days:\n        if day == 'Monday':\n            constraint_start = 14 * 60 + 30\n        else:\n            constraint_start = work_start\n            \n        ryan_free = get_free_intervals(ryan_busy[day], constraint_start, work_end)\n        adam_free = get_free_intervals(adam_busy[day], constraint_start, work_end)\n        common_free = intersect_intervals(ryan_free, adam_free)\n        \n        for start, end in common_free:\n            if end - start >= duration:\n                meeting_end = start + duration\n                start_str = minutes_to_time_str(start)\n                end_str = minutes_to_time_str(meeting_end)\n                print(day)\n                print(f\"{start_str}:{end_str}\")\n                return\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]