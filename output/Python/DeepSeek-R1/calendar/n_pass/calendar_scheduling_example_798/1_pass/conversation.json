[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Nancy and Jose for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nNancy has blocked their calendar on Monday during 10:00 to 10:30, 11:30 to 12:30, 13:30 to 14:00, 14:30 to 15:30, 16:00 to 17:00, Tuesday during 9:30 to 10:30, 11:00 to 11:30, 12:00 to 12:30, 13:00 to 13:30, 15:30 to 16:00, Wednesday during 10:00 to 11:30, 13:30 to 16:00; \nJose is busy on Monday during 9:00 to 17:00, Tuesday during 9:00 to 17:00, Wednesday during 9:00 to 9:30, 10:00 to 12:30, 13:30 to 14:30, 15:00 to 17:00; \n\nThe group would like to meet at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_to_minutes(time_str):\n    parts = time_str.split(':')\n    hours = int(parts[0])\n    minutes = int(parts[1]) if len(parts) > 1 else 0\n    return (hours - 9) * 60 + minutes\n\ndef minutes_to_time(minutes_val):\n    total_minutes = minutes_val\n    hours = 9 + total_minutes // 60\n    minutes = total_minutes % 60\n    return f\"{hours}:{minutes:02d}\"\n\ndef merge_intervals(intervals):\n    if not intervals:\n        return []\n    sorted_intervals = sorted(intervals, key=lambda x: x[0])\n    merged = []\n    start, end = sorted_intervals[0]\n    for interval in sorted_intervals[1:]:\n        if interval[0] <= end:\n            if interval[1] > end:\n                end = interval[1]\n        else:\n            merged.append([start, end])\n            start, end = interval\n    merged.append([start, end])\n    return merged\n\ndef find_free_intervals(busy_intervals, day_end=480):\n    free_intervals = []\n    if not busy_intervals:\n        return [(0, day_end)]\n    current = 0\n    for start, end in busy_intervals:\n        if current < start:\n            free_intervals.append((current, start))\n        current = max(current, end)\n    if current < day_end:\n        free_intervals.append((current, day_end))\n    return free_intervals\n\ndef main():\n    nancy_schedule = {\n        'Monday': ['10:00-10:30', '11:30-12:30', '13:30-14:00', '14:30-15:30', '16:00-17:00'],\n        'Tuesday': ['9:30-10:30', '11:00-11:30', '12:00-12:30', '13:00-13:30', '15:30-16:00'],\n        'Wednesday': ['10:00-11:30', '13:30-16:00']\n    }\n    \n    jose_schedule = {\n        'Monday': ['9:00-17:00'],\n        'Tuesday': ['9:00-17:00'],\n        'Wednesday': ['9:00-9:30', '10:00-12:30', '13:30-14:30', '15:00-17:00']\n    }\n    \n    days = ['Monday', 'Tuesday', 'Wednesday']\n    meeting_duration = 30\n    day_end_minutes = 480  # 17:00 is 480 minutes from 9:00\n    \n    for day in days:\n        nancy_busy = []\n        if day in nancy_schedule:\n            for interval in nancy_schedule[day]:\n                start_str, end_str = interval.split('-')\n                start_min = time_to_minutes(start_str)\n                end_min = time_to_minutes(end_str)\n                nancy_busy.append([start_min, end_min])\n        \n        jose_busy = []\n        if day in jose_schedule:\n            for interval in jose_schedule[day]:\n                start_str, end_str = interval.split('-')\n                start_min = time_to_minutes(start_str)\n                end_min = time_to_minutes(end_str)\n                jose_busy.append([start_min, end_min])\n        \n        all_busy = nancy_busy + jose_busy\n        merged_busy = merge_intervals(all_busy)\n        free_intervals = find_free_intervals(merged_busy, day_end_minutes)\n        \n        for start_free, end_free in free_intervals:\n            if end_free - start_free >= meeting_duration:\n                meeting_start = start_free\n                meeting_end = meeting_start + meeting_duration\n                start_time_str = minutes_to_time(meeting_start)\n                end_time_str = minutes_to_time(meeting_end)\n                print(f\"{day} {start_time_str}:{end_time_str}\")\n                return\n    \n    # According to the problem, a solution exists, so this line should not be reached.\n    print(\"No meeting time found\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]