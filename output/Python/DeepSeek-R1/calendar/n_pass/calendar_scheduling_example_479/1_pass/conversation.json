[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Evelyn, Joshua, Kevin, Gerald, Jerry, Jesse and Kenneth for one hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nEvelyn's calendar is wide open the entire day.\nJoshua is busy on Monday during 11:00 to 12:30, 13:30 to 14:30, 16:30 to 17:00; \nKevin is free the entire day.\nGerald is free the entire day.\nJerry has blocked their calendar on Monday during 9:00 to 9:30, 10:30 to 12:00, 12:30 to 13:00, 13:30 to 14:00, 14:30 to 15:00, 15:30 to 16:00; \nJesse is busy on Monday during 9:00 to 9:30, 10:30 to 12:00, 12:30 to 13:00, 14:30 to 15:00, 15:30 to 16:30; \nKenneth is busy on Monday during 10:30 to 12:30, 13:30 to 14:00, 14:30 to 15:00, 15:30 to 16:00, 16:30 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_to_minutes(time_str):\n    parts = time_str.split(':')\n    hour = int(parts[0])\n    minute = int(parts[1])\n    return hour * 60 + minute\n\ndef minutes_to_time(minutes):\n    hour = minutes // 60\n    minute = minutes % 60\n    return f\"{hour:02d}:{minute:02d}\"\n\ndef main():\n    # Work hours\n    work_start = time_to_minutes(\"9:00\")\n    work_end = time_to_minutes(\"17:00\")\n    \n    # Participants' busy intervals (each as list of [start, end] in minutes)\n    busy_intervals = []\n    \n    # Evelyn: free entire day -> no intervals\n    # Joshua\n    busy_intervals.extend([\n        [time_to_minutes(\"11:00\"), time_to_minutes(\"12:30\")],\n        [time_to_minutes(\"13:30\"), time_to_minutes(\"14:30\")],\n        [time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\")]\n    ])\n    \n    # Kevin: free entire day -> no intervals\n    # Gerald: free entire day -> no intervals\n    \n    # Jerry\n    busy_intervals.extend([\n        [time_to_minutes(\"9:00\"), time_to_minutes(\"9:30\")],\n        [time_to_minutes(\"10:30\"), time_to_minutes(\"12:00\")],\n        [time_to_minutes(\"12:30\"), time_to_minutes(\"13:00\")],\n        [time_to_minutes(\"13:30\"), time_to_minutes(\"14:00\")],\n        [time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")],\n        [time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\")]\n    ])\n    \n    # Jesse\n    busy_intervals.extend([\n        [time_to_minutes(\"9:00\"), time_to_minutes(\"9:30\")],\n        [time_to_minutes(\"10:30\"), time_to_minutes(\"12:00\")],\n        [time_to_minutes(\"12:30\"), time_to_minutes(\"13:00\")],\n        [time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")],\n        [time_to_minutes(\"15:30\"), time_to_minutes(\"16:30\")]\n    ])\n    \n    # Kenneth\n    busy_intervals.extend([\n        [time_to_minutes(\"10:30\"), time_to_minutes(\"12:30\")],\n        [time_to_minutes(\"13:30\"), time_to_minutes(\"14:00\")],\n        [time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")],\n        [time_to_minutes(\"15:30\"), time_to_minutes(\"16:00\")],\n        [time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\")]\n    ])\n    \n    # Sort all busy intervals by start time\n    busy_intervals.sort(key=lambda x: x[0])\n    \n    # Merge overlapping intervals\n    merged = []\n    if busy_intervals:\n        current_start, current_end = busy_intervals[0]\n        for interval in busy_intervals[1:]:\n            if interval[0] <= current_end:\n                current_end = max(current_end, interval[1])\n            else:\n                merged.append([current_start, current_end])\n                current_start, current_end = interval\n        merged.append([current_start, current_end])\n    \n    # Find free intervals within work hours\n    free_intervals = []\n    start = work_start\n    \n    for interval in merged:\n        if interval[0] > start:\n            free_intervals.append([start, interval[0]])\n        start = max(start, interval[1])\n    if start < work_end:\n        free_intervals.append([start, work_end])\n    \n    # Find the first free interval that is at least 60 minutes\n    meeting_duration = 60\n    for interval in free_intervals:\n        start_min, end_min = interval\n        if end_min - start_min >= meeting_duration:\n            # Found a suitable interval\n            meeting_start = start_min\n            meeting_end = start_min + meeting_duration\n            start_str = minutes_to_time(meeting_start)\n            end_str = minutes_to_time(meeting_end)\n            print(\"Monday\")\n            print(f\"{start_str}:{end_str}\")\n            return\n    \n    # If no suitable interval found (though problem states there is one)\n    print(\"No suitable time found\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]