[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Jean and Doris for half an hour between the work hours of 9:00 to 17:00 on either Monday or Tuesday. \n\nHere are the existing schedules for everyone during the days: \nJean is busy on Tuesday during 11:30 to 12:00, 16:00 to 16:30; \nDoris has meetings on Monday during 9:00 to 11:30, 12:00 to 12:30, 13:30 to 16:00, 16:30 to 17:00, Tuesday during 9:00 to 17:00; \n\nDoris would rather not meet on Monday after 14:00. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    work_start = 540  # 9:00 in minutes\n    work_end = 1020   # 17:00 in minutes\n    days = ['Monday', 'Tuesday']\n    \n    # Busy intervals for Jean and Doris for each day (in minutes, [start, end))\n    jean_busy = {\n        'Monday': [],\n        'Tuesday': [[690, 720], [960, 990]]  # 11:30-12:00, 16:00-16:30\n    }\n    \n    doris_busy = {\n        'Monday': [[540, 690], [720, 750], [810, 960], [990, 1020]],  # 9:00-11:30, 12:00-12:30, 13:30-16:00, 16:30-17:00\n        'Tuesday': [[540, 1020]]  # Entire work day busy\n    }\n    \n    # Helper function to compute free intervals\n    def compute_free(work_start, work_end, busy_intervals):\n        if not busy_intervals:\n            return [[work_start, work_end]]\n        sorted_busy = sorted(busy_intervals, key=lambda x: x[0])\n        free = []\n        current = work_start\n        for s, e in sorted_busy:\n            if s > current:\n                free.append([current, s])\n            if e > current:\n                current = e\n        if current < work_end:\n            free.append([current, work_end])\n        return free\n    \n    # Helper function to find intersection of two sets of intervals\n    def intersect_intervals(intervals1, intervals2):\n        i = j = 0\n        common = []\n        while i < len(intervals1) and j < len(intervals2):\n            low = max(intervals1[i][0], intervals2[j][0])\n            high = min(intervals1[i][1], intervals2[j][1])\n            if low < high:\n                common.append([low, high])\n            if intervals1[i][1] < intervals2[j][1]:\n                i += 1\n            else:\n                j += 1\n        return common\n    \n    # Helper function to convert minutes to HH:MM string\n    def format_time(minutes):\n        h = minutes // 60\n        m = minutes % 60\n        return f\"{h:02d}:{m:02d}\"\n    \n    # Iterate over days to find a suitable meeting time\n    chosen_day = None\n    chosen_interval = None\n    \n    for day in days:\n        jean_free = compute_free(work_start, work_end, jean_busy[day])\n        doris_free = compute_free(work_start, work_end, doris_busy[day])\n        common = intersect_intervals(jean_free, doris_free)\n        # Filter intervals with at least 30 minutes duration\n        common = [interv for interv in common if interv[1] - interv[0] >= 30]\n        \n        if not common:\n            continue\n            \n        if day == 'Monday':\n            # Filter intervals starting before 14:00 (840 minutes) for Doris's preference\n            preferred_common = [interv for interv in common if interv[0] < 840]\n            if preferred_common:\n                chosen_interval = preferred_common[0]\n                chosen_day = day\n                break\n            else:\n                chosen_interval = common[0]\n                chosen_day = day\n                break\n        else:\n            chosen_interval = common[0]\n            chosen_day = day\n            break\n    \n    if chosen_interval:\n        start_time = format_time(chosen_interval[0])\n        end_time = format_time(chosen_interval[1])\n        time_str = f\"{start_time}:{end_time}\"\n        print(chosen_day)\n        print(time_str)\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]