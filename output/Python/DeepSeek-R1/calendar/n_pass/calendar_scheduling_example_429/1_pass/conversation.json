[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Judy, Olivia, Eric, Jacqueline, Laura, Tyler and Lisa for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nJudy has blocked their calendar on Monday during 13:00 to 13:30, 16:00 to 16:30; \nOlivia is busy on Monday during 10:00 to 10:30, 12:00 to 13:00, 14:00 to 14:30; \nEric is free the entire day.\nJacqueline has meetings on Monday during 10:00 to 10:30, 15:00 to 15:30; \nLaura is busy on Monday during 9:00 to 10:00, 10:30 to 12:00, 13:00 to 13:30, 14:30 to 15:00, 15:30 to 17:00; \nTyler has blocked their calendar on Monday during 9:00 to 10:00, 11:00 to 11:30, 12:30 to 13:00, 14:00 to 14:30, 15:30 to 17:00; \nLisa has blocked their calendar on Monday during 9:30 to 10:30, 11:00 to 11:30, 12:00 to 12:30, 13:00 to 13:30, 14:00 to 14:30, 16:00 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    meeting_duration = 30  # minutes\n\n    # List of busy intervals (start_minute, end_minute) for all participants\n    busy_intervals = []\n    \n    # Judy's busy times\n    busy_intervals.append((13 * 60, 13 * 60 + 30))  # 13:00-13:30\n    busy_intervals.append((16 * 60, 16 * 60 + 30))  # 16:00-16:30\n    \n    # Olivia's busy times\n    busy_intervals.append((10 * 60, 10 * 60 + 30))  # 10:00-10:30\n    busy_intervals.append((12 * 60, 13 * 60))        # 12:00-13:00\n    busy_intervals.append((14 * 60, 14 * 60 + 30))   # 14:00-14:30\n    \n    # Eric: free all day (no busy intervals)\n    \n    # Jacqueline's busy times\n    busy_intervals.append((10 * 60, 10 * 60 + 30))  # 10:00-10:30\n    busy_intervals.append((15 * 60, 15 * 60 + 30))  # 15:00-15:30\n    \n    # Laura's busy times\n    busy_intervals.append((9 * 60, 10 * 60))         # 9:00-10:00\n    busy_intervals.append((10 * 60 + 30, 12 * 60))   # 10:30-12:00\n    busy_intervals.append((13 * 60, 13 * 60 + 30))   # 13:00-13:30\n    busy_intervals.append((14 * 60 + 30, 15 * 60))   # 14:30-15:00\n    busy_intervals.append((15 * 60 + 30, 17 * 60))   # 15:30-17:00\n    \n    # Tyler's busy times\n    busy_intervals.append((9 * 60, 10 * 60))         # 9:00-10:00\n    busy_intervals.append((11 * 60, 11 * 60 + 30))   # 11:00-11:30\n    busy_intervals.append((12 * 60 + 30, 13 * 60))   # 12:30-13:00\n    busy_intervals.append((14 * 60, 14 * 60 + 30))   # 14:00-14:30\n    busy_intervals.append((15 * 60 + 30, 17 * 60))   # 15:30-17:00\n    \n    # Lisa's busy times\n    busy_intervals.append((9 * 60 + 30, 10 * 60 + 30))  # 9:30-10:30\n    busy_intervals.append((11 * 60, 11 * 60 + 30))      # 11:00-11:30\n    busy_intervals.append((12 * 60, 12 * 60 + 30))      # 12:00-12:30\n    busy_intervals.append((13 * 60, 13 * 60 + 30))      # 13:00-13:30\n    busy_intervals.append((14 * 60, 14 * 60 + 30))      # 14:00-14:30\n    busy_intervals.append((16 * 60, 17 * 60))           # 16:00-17:00\n\n    # Merge overlapping busy intervals\n    busy_intervals.sort(key=lambda x: x[0])\n    merged = []\n    start, end = busy_intervals[0]\n    for interval in busy_intervals[1:]:\n        if interval[0] <= end:\n            end = max(end, interval[1])\n        else:\n            merged.append((start, end))\n            start, end = interval\n    merged.append((start, end))\n\n    # Compute free intervals within work hours\n    free_intervals = []\n    current = work_start\n    for start, end in merged:\n        if current < start:\n            free_intervals.append((current, start))\n        current = end\n    if current < work_end:\n        free_intervals.append((current, work_end))\n\n    # Find first free interval with sufficient duration\n    meeting_start = None\n    for start, end in free_intervals:\n        if end - start >= meeting_duration:\n            meeting_start = start\n            meeting_end = start + meeting_duration\n            break\n\n    # Format the meeting time\n    def format_time(minutes):\n        h = minutes // 60\n        m = minutes % 60\n        return f\"{h:02d}:{m:02d}\"\n\n    start_str = format_time(meeting_start)\n    end_str = format_time(meeting_end)\n    time_output = f\"{start_str}:{end_str}\"\n\n    # Output day and time\n    print(\"Monday\")\n    print(time_output)\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]