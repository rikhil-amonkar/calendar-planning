[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Andrea, Jack, Madison, Rachel, Douglas and Ryan for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nAndrea's calendar is wide open the entire day.\nJack has meetings on Monday during 9:00 to 9:30, 14:00 to 14:30; \nMadison has blocked their calendar on Monday during 9:30 to 10:30, 13:00 to 14:00, 15:00 to 15:30, 16:30 to 17:00; \nRachel is busy on Monday during 9:30 to 10:30, 11:00 to 11:30, 12:00 to 13:30, 14:30 to 15:30, 16:00 to 17:00; \nDouglas is busy on Monday during 9:00 to 11:30, 12:00 to 16:30; \nRyan has blocked their calendar on Monday during 9:00 to 9:30, 13:00 to 14:00, 14:30 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    # Convert time string to minutes since midnight\n    def time_to_minutes(time_str):\n        parts = time_str.split(':')\n        return int(parts[0]) * 60 + int(parts[1])\n\n    # Work hours boundaries\n    work_start = time_to_minutes(\"9:00\")  # 540 minutes\n    work_end = time_to_minutes(\"17:00\")   # 1020 minutes\n    meeting_duration = 30  # minutes\n\n    # Collect all busy intervals (in minutes)\n    busy_intervals = []\n    \n    # Andrea: no meetings (skip)\n    \n    # Jack's meetings\n    busy_intervals.append([time_to_minutes(\"9:00\"), time_to_minutes(\"9:30\")])\n    busy_intervals.append([time_to_minutes(\"14:00\"), time_to_minutes(\"14:30\")])\n    \n    # Madison's meetings\n    busy_intervals.append([time_to_minutes(\"9:30\"), time_to_minutes(\"10:30\")])\n    busy_intervals.append([time_to_minutes(\"13:00\"), time_to_minutes(\"14:00\")])\n    busy_intervals.append([time_to_minutes(\"15:00\"), time_to_minutes(\"15:30\")])\n    busy_intervals.append([time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\")])\n    \n    # Rachel's meetings\n    busy_intervals.append([time_to_minutes(\"9:30\"), time_to_minutes(\"10:30\")])\n    busy_intervals.append([time_to_minutes(\"11:00\"), time_to_minutes(\"11:30\")])\n    busy_intervals.append([time_to_minutes(\"12:00\"), time_to_minutes(\"13:30\")])\n    busy_intervals.append([time_to_minutes(\"14:30\"), time_to_minutes(\"15:30\")])\n    busy_intervals.append([time_to_minutes(\"16:00\"), time_to_minutes(\"17:00\")])\n    \n    # Douglas's meetings\n    busy_intervals.append([time_to_minutes(\"9:00\"), time_to_minutes(\"11:30\")])\n    busy_intervals.append([time_to_minutes(\"12:00\"), time_to_minutes(\"16:30\")])\n    \n    # Ryan's meetings\n    busy_intervals.append([time_to_minutes(\"9:00\"), time_to_minutes(\"9:30\")])\n    busy_intervals.append([time_to_minutes(\"13:00\"), time_to_minutes(\"14:00\")])\n    busy_intervals.append([time_to_minutes(\"14:30\"), time_to_minutes(\"17:00\")])\n    \n    # Sort intervals by start time\n    busy_intervals.sort(key=lambda x: x[0])\n    \n    # Merge overlapping busy intervals\n    merged_busy = []\n    if busy_intervals:\n        current_start, current_end = busy_intervals[0]\n        for interval in busy_intervals[1:]:\n            if interval[0] <= current_end:\n                current_end = max(current_end, interval[1])\n            else:\n                merged_busy.append([current_start, current_end])\n                current_start, current_end = interval\n        merged_busy.append([current_start, current_end])\n    \n    # Find free intervals within work hours\n    free_intervals = []\n    current = work_start\n    for start, end in merged_busy:\n        if current < start:\n            free_intervals.append([current, start])\n        current = max(current, end)\n    if current < work_end:\n        free_intervals.append([current, work_end])\n    \n    # Find the first free interval that can fit the meeting\n    meeting_start = None\n    for start, end in free_intervals:\n        if end - start >= meeting_duration:\n            meeting_start = start\n            break\n    \n    if meeting_start is None:\n        print(\"No solution found\")\n        return\n    \n    meeting_end = meeting_start + meeting_duration\n    \n    # Format meeting times\n    def format_time(minutes):\n        return f\"{minutes // 60:02d}:{minutes % 60:02d}\"\n    \n    start_str = format_time(meeting_start)\n    end_str = format_time(meeting_end)\n    time_range_str = f\"{start_str}:{end_str}\"\n    \n    # Output day and time range\n    print(\"Monday\")\n    print(time_range_str)\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]