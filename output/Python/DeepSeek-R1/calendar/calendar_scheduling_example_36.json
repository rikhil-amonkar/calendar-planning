{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "{10:30",
                "end_time": "11:30}"
            },
            "has_error": false,
            "raw_model_response": "'''python\nwork_start = 9 * 60\nwork_end = 17 * 60\n\nryan_busy = [(9*60, 9*60 + 30), (12*60 + 30, 13*60)]\nruth_busy = []\ndenise_busy = [(9*60 + 30, 10*60 + 30), (12*60, 13*60), (14*60 + 30, 16*60 + 30)]\n\ndef get_free_intervals(busy, work_start, work_end):\n    sorted_busy = sorted(busy, key=lambda x: x[0])\n    free = []\n    current_start = work_start\n    for start, end in sorted_busy:\n        if current_start < start:\n            free.append((current_start, start))\n        current_start = max(current_start, end)\n    if current_start < work_end:\n        free.append((current_start, work_end))\n    return free\n\nryan_free = get_free_intervals(ryan_busy, work_start, work_end)\nruth_free = get_free_intervals(ruth_busy, work_start, work_end)\ndenise_free = get_free_intervals(denise_busy, work_start, work_end)\n\ndef get_available_starts(free_intervals, constraint_end=None):\n    starts = []\n    for start, end in free_intervals:\n        current_end = min(end, constraint_end) if constraint_end else end\n        if current_end - start >= 60:\n            starts.extend(range(start, current_end - 60 + 1))\n    return starts\n\nryan_starts = get_available_starts(ryan_free)\nruth_starts = get_available_starts(ruth_free)\ndenise_starts = get_available_starts(denise_free, 12*60 + 30)\n\ncommon_starts = set(ryan_starts) & set(ruth_starts) & set(denise_starts)\n\nif common_starts:\n    earliest = min(common_starts)\n    start_h, start_m = divmod(earliest, 60)\n    end_time = earliest + 60\n    end_h, end_m = divmod(end_time, 60)\n    print(f\"Monday {start_h:02d}:{start_m:02d}-{end_h:02d}:{end_m:02d}\")\nelse:\n    print(\"No suitable time found.\")\n'''",
            "count": "calendar_scheduling_example_36"
        }
    ]
}