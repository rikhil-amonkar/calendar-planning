{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "{13:30",
                "end_time": "14:30}"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "{13:30",
                "end_time": "14:30}"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef time_to_minutes(t):\n    hours, mins = map(int, t.split(':'))\n    return hours * 60 + mins\n\ndef minutes_to_time(m):\n    return f\"{m // 60:02d}:{m % 60:02d}\"\n\ndef compute_free_intervals(busy_intervals, work_start, work_end):\n    sorted_busy = sorted(busy_intervals, key=lambda x: x[0])\n    free = []\n    prev_end = work_start\n    for start, end in sorted_busy:\n        if start > prev_end:\n            free.append((prev_end, start))\n        prev_end = max(prev_end, end)\n    if prev_end < work_end:\n        free.append((prev_end, work_end))\n    return free\n\nwork_start = time_to_minutes(\"9:00\")\nwork_end = time_to_minutes(\"17:00\")\n\njames_busy = [\n    (time_to_minutes(\"11:30\"), time_to_minutes(\"12:00\")),\n    (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\"))\n]\n\njohn_busy = [\n    (time_to_minutes(\"9:30\"), time_to_minutes(\"11:00\")),\n    (time_to_minutes(\"11:30\"), time_to_minutes(\"12:00\")),\n    (time_to_minutes(\"12:30\"), time_to_minutes(\"13:30\")),\n    (time_to_minutes(\"14:30\"), time_to_minutes(\"16:30\"))\n]\n\njames_free = compute_free_intervals(james_busy, work_start, work_end)\njohn_free = compute_free_intervals(john_busy, work_start, work_end)\n\noverlapping = []\nfor j_start, j_end in james_free:\n    for jo_start, jo_end in john_free:\n        start = max(j_start, jo_start)\n        end = min(j_end, jo_end)\n        if start < end:\n            overlapping.append((start, end))\n\nmeeting_duration = 60\nproposed_time = None\nfor start, end in overlapping:\n    if end - start >= meeting_duration:\n        proposed_time = (start, start + meeting_duration)\n        break\n\nstart_time = minutes_to_time(proposed_time[0])\nend_time = minutes_to_time(proposed_time[1])\nprint(f\"{start_time}:{end_time}\")\nprint(\"Monday\")\n'''",
            "count": "calendar_scheduling_example_543"
        }
    ]
}