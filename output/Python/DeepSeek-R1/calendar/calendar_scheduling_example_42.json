{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "{14:00",
                "end_time": "15:00}"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "{14:00",
                "end_time": "15:00}"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    # Define work hours and day\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    day = \"Monday\"\n    duration = 60  # 1 hour\n    \n    # Convert schedules to minutes since midnight\n    schedules = {\n        \"Julie\": [(9*60, 9*60+30), (11*60, 11*60+30), (12*60, 12*60+30),\n                  (13*60+30, 14*60), (16*60, 17*60)],\n        \"Sean\": [(9*60, 9*60+30), (13*60, 13*60+30), (15*60, 15*60+30),\n                 (16*60, 16*60+30)],\n        \"Lori\": [(10*60, 10*60+30), (11*60, 13*60), (15*60+30, 17*60)]\n    }\n    \n    # Create a merged busy timeline\n    timeline = [0] * (work_end - work_start)\n    for person, busy_slots in schedules.items():\n        for start, end in busy_slots:\n            for t in range(max(start, work_start) - work_start, \n                          min(end, work_end) - work_start):\n                timeline[t] += 1\n    \n    # Find first available slot\n    current_start = None\n    for i, count in enumerate(timeline):\n        if count == 0:\n            if current_start is None:\n                current_start = i\n            if i - current_start + 1 >= duration:\n                # Convert back to time\n                start_h = (work_start + current_start) // 60\n                start_m = (work_start + current_start) % 60\n                end_h = (work_start + current_start + duration) // 60\n                end_m = (work_start + current_start + duration) % 60\n                return (\n                    f\"{start_h:02d}:{start_m:02d}:{end_h:02d}:{end_m:02d}\",\n                    day\n                )\n        else:\n            current_start = None\n    \n    return None\n\ntime_range, day = find_meeting_time()\nprint(f\"{day}:{time_range}\")\n'''",
            "count": "calendar_scheduling_example_42"
        }
    ]
}