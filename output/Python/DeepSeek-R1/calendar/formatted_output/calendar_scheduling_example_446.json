{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    work_hours = (9, 17)\n    participants = {\n        'Megan': [(9, 9.5), (10, 11), (12, 12.5)],\n        'Christine': [(9, 9.5), (11.5, 12), (13, 14), (15.5, 16.5)],\n        'Gabriel': [],\n        'Sara': [(11.5, 12), (14.5, 15)],\n        'Bruce': [(9.5, 10), (10.5, 12), (12.5, 14), (14.5, 15), (15.5, 16.5)],\n        'Kathryn': [(10, 15.5), (16, 16.5)],\n        'Billy': [(9, 9.5), (11, 11.5), (12, 14), (14.5, 15.5)]\n    }\n\n    for hour in range(work_hours[0], work_hours[1]):\n        for minute in [0, 0.5]:\n            start = hour + minute\n            end = start + 0.5\n            if end > work_hours[1]:\n                continue\n            all_free = True\n            for busy in participants.values():\n                for slot in busy:\n                    if start < slot[1] and end > slot[0]:\n                        all_free = False\n                        break\n                if not all_free:\n                    break\n            if all_free:\n                def format_time(t):\n                    hours = int(t)\n                    minutes = int((t - hours) * 60)\n                    return f\"{hours:02d}:{minutes:02d}\"\n                return f\"Monday {format_time(start)}-{format_time(end)}\"\n    return \"No time found\"\n\nprint(find_meeting_time())\n'''",
            "count": "calendar_scheduling_example_446"
        }
    ]
}