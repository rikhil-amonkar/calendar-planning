{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    # Define work hours and constraints\n    work_start = 9 * 60\n    work_end = 17 * 60\n    meeting_duration = 60\n    day = \"Monday\"\n    \n    # Convert schedules to minutes since midnight\n    schedules = {\n        'Anthony': [(9*60+30, 10*60), (12*60, 13*60), (16*60, 16*60+30)],\n        'Pamela': [(9*60+30, 10*60), (16*60+30, 17*60)],\n        'Zachary': [(9*60, 11*60+30), (12*60, 12*60+30), (13*60, 13*60+30), (14*60+30, 15*60), (16*60, 17*60)],\n    }\n    \n    # Pamela's time restriction (meeting must end by 14:30)\n    max_end = 14 * 60 + 30\n    \n    # Find available slots for all participants\n    for start in range(work_start, max_end - meeting_duration + 1):\n        end = start + meeting_duration\n        if end > max_end:\n            continue\n        \n        # Check all participants' availability\n        valid = True\n        for person, busy in schedules.items():\n            for s, e in busy:\n                if not (end <= s or start >= e):\n                    valid = False\n                    break\n            if not valid:\n                break\n        \n        if valid:\n            # Format time to HH:MM\n            return f\"{day} {start//60:02d}:{start%60:02d}-{end//60:02d}:{end%60:02d}\"\n    \n    return \"No suitable time found\"\n\nresult = find_meeting_time()\nprint(result)\n'''",
            "count": "calendar_scheduling_example_25"
        }
    ]
}