{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    # Define work hours\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    duration = 30        # Meeting duration in minutes\n\n    # Convert all blocked times to minutes\n    blocked = {\n        'Judy': [(13*60, 13*60+30), (16*60, 16*60+30)],\n        'Olivia': [(10*60, 10*60+30), (12*60, 13*60), (14*60, 14*60+30)],\n        'Eric': [],\n        'Jacqueline': [(10*60, 10*60+30), (15*60, 15*60+30)],\n        'Laura': [(9*60, 10*60), (10*60+30, 12*60), (13*60, 13*60+30), (14*60+30, 15*60), (15*60+30, 17*60)],\n        'Tyler': [(9*60, 10*60), (11*60, 11*60+30), (12*60+30, 13*60), (14*60, 14*60+30), (15*60+30, 17*60)],\n        'Lisa': [(9*60+30, 10*60+30), (11*60, 11*60+30), (12*60, 12*60+30), (13*60, 13*60+30), (14*60, 14*60+30), (16*60, 17*60)]\n    }\n\n    # Combine all busy times across participants\n    all_busy = []\n    for person in blocked.values():\n        all_busy.extend(person)\n\n    # Create a timeline of available slots\n    timeline = []\n    current_time = work_start\n    for start, end in sorted(all_busy + [(work_end, work_end)]):\n        if current_time < start:\n            timeline.append((current_time, start))\n        current_time = max(current_time, end)\n\n    # Find first available slot that fits duration\n    for slot_start, slot_end in timeline:\n        if slot_end - slot_start >= duration:\n            # Convert back to HH:MM format\n            start_h = slot_start // 60\n            start_m = slot_start % 60\n            end_time = slot_start + duration\n            end_h = end_time // 60\n            end_m = end_time % 60\n            return f\"Monday\\n{start_h:02d}:{start_m:02d}:{end_h:02d}:{end_m:02d}\"\n\n    return \"No suitable time found\"\n\nprint(find_meeting_time())\n'''",
            "count": "calendar_scheduling_example_429"
        }
    ]
}