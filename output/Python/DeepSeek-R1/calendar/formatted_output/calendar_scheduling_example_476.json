{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef convert_time(h, m):\n    return h * 60 + m\n\ndef find_meeting_time():\n    work_start = convert_time(9, 0)\n    work_end = convert_time(17, 0)\n    duration = 30\n    day = \"Monday\"\n    \n    # Convert all busy times to minutes\n    busy = {\n        'Kathleen': [(convert_time(14,30), convert_time(15,30))],\n        'Carolyn': [(convert_time(12,0), convert_time(12,30)), (convert_time(13,0), convert_time(13,30))],\n        'Cheryl': [(convert_time(9,0), convert_time(9,30)), (convert_time(10,0), convert_time(11,30)), \n                  (convert_time(12,30), convert_time(13,30)), (convert_time(14,0), convert_time(17,0))],\n        'Virginia': [(convert_time(9,30), convert_time(11,30)), (convert_time(12,0), convert_time(12,30)), \n                    (convert_time(13,0), convert_time(13,30)), (convert_time(14,30), convert_time(15,30)),\n                    (convert_time(16,0), convert_time(17,0))],\n        'Angela': [(convert_time(9,30), convert_time(10,0)), (convert_time(10,30), convert_time(11,30)),\n                  (convert_time(12,0), convert_time(12,30)), (convert_time(13,0), convert_time(13,30)),\n                  (convert_time(14,0), convert_time(16,30))]\n    }\n    \n    # Combine all busy intervals and Roger's preference\n    all_busy = []\n    for intervals in busy.values():\n        all_busy.extend(intervals)\n    all_busy.append((work_start, convert_time(12,30)))  # Roger's preference\n    \n    # Sort all intervals and merge overlapping\n    sorted_intervals = sorted(all_busy)\n    merged = []\n    for start, end in sorted_intervals:\n        if not merged or merged[-1][1] < start:\n            merged.append([start, end])\n        else:\n            merged[-1][1] = max(merged[-1][1], end)\n    \n    # Check gaps between merged intervals and work hours\n    possible_start = work_start\n    for start, end in merged:\n        if possible_start + duration <= start:\n            final_start = possible_start\n            final_end = final_start + duration\n            return (final_start, final_end, day)\n        possible_start = max(possible_start, end)\n    \n    # Check after last interval\n    if possible_start + duration <= work_end:\n        final_start = possible_start\n        final_end = final_start + duration\n        return (final_start, final_end, day)\n    \n    return None\n\ndef format_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h:02d}:{m:02d}\"\n\nresult = find_meeting_time()\nif result:\n    start, end, day = result\n    start_str = format_time(start)\n    end_str = format_time(end)\n    print(f\"{day}:{start_str}:{end_str}\")\nelse:\n    print(\"No suitable time found\")\n'''",
            "count": "calendar_scheduling_example_476"
        }
    ]
}