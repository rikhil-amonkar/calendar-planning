{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    work_start = 540  # 9:00 in minutes\n    work_end = 1020   # 17:00 in minutes\n\n    mary_schedule = {\n        'Monday': [],\n        'Tuesday': [(600, 630), (930, 960)],\n        'Wednesday': [(570, 600), (900, 930)],\n        'Thursday': [(540, 600), (630, 690)]\n    }\n\n    alexis_schedule = {\n        'Monday': [(540, 600), (630, 720), (750, 990)],\n        'Tuesday': [(540, 600), (630, 690), (720, 930), (960, 1020)],\n        'Wednesday': [(540, 660), (690, 1020)],\n        'Thursday': [(600, 720), (840, 870), (930, 960), (990, 1020)]\n    }\n\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n\n    for day in days:\n        intervals = []\n        intervals.extend(mary_schedule[day])\n        intervals.extend(alexis_schedule[day])\n        merged = merge(intervals)\n        available = find_available_slots(merged, work_start, work_end)\n        for slot in available:\n            start, end = slot\n            if end - start >= 30:\n                start_time = f\"{start//60:02d}:{start%60:02d}\"\n                end_time = f\"{end//60:02d}:{end%60:02d}\"\n                print(f\"{day}:{start_time}:{end_time}\")\n                return\n\n    print(\"No suitable time found\")\n\ndef merge(intervals):\n    if not intervals:\n        return []\n    sorted_intervals = sorted(intervals, key=lambda x: x[0])\n    merged = [sorted_intervals[0]]\n    for current in sorted_intervals[1:]:\n        last = merged[-1]\n        if current[0] <= last[1]:\n            merged[-1] = (last[0], max(last[1], current[1]))\n        else:\n            merged.append(current)\n    return merged\n\ndef find_available_slots(merged, work_start, work_end):\n    available = []\n    prev_end = work_start\n    for start, end in merged:\n        if start > prev_end:\n            available.append((prev_end, start))\n        prev_end = max(prev_end, end)\n    if prev_end < work_end:\n        available.append((prev_end, work_end))\n    return available\n\nfind_meeting_time()\n'''",
            "count": "calendar_scheduling_example_812"
        }
    ]
}