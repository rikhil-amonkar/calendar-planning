{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef convert_time(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef find_meeting_time(busy_slots, work_start, work_end, duration):\n    for start in range(work_start, work_end - duration + 1, 15):\n        end = start + duration\n        if all(not any(slot_start <= start < slot_end or slot_start < end <= slot_end for slot_start, slot_end in person) for person in busy_slots.values()):\n            return start, end\n    return None\n\nparticipants = {\n    'Jacob': ['13:30-14:00', '14:30-15:00'],\n    'Diana': ['9:30-10:00', '11:30-12:00', '13:00-13:30', '16:00-16:30'],\n    'Adam': ['9:30-10:30', '11:00-12:30', '15:30-16:00'],\n    'Angela': ['9:30-10:00', '10:30-12:00', '13:00-15:30', '16:00-16:30'],\n    'Dennis': ['9:00-9:30', '10:30-11:30', '13:00-15:00', '16:30-17:00']\n}\n\nbusy_slots = {}\nfor person, slots in participants.items():\n    busy_slots[person] = []\n    for slot in slots:\n        start_str, end_str = slot.split('-')\n        busy_slots[person].append((convert_time(start_str), convert_time(end_str)))\n\nwork_start = convert_time('09:00')\nwork_end = convert_time('17:00')\nduration = 30\n\nresult = find_meeting_time(busy_slots, work_start, work_end, duration)\n\ndef format_time(minutes):\n    return f\"{minutes // 60:02d}:{minutes % 60:02d}\"\n\nif result:\n    start, end = result\n    print(f\"Monday:{format_time(start)}:{format_time(end)}\")\nelse:\n    print(\"No suitable time found\")\n'''",
            "count": "calendar_scheduling_example_246"
        }
    ]
}