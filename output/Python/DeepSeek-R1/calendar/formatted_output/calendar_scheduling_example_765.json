{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": false,
            "raw_model_response": "```python\ndef time_to_min(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef min_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\ndef merge_intervals(intervals):\n    if not intervals:\n        return []\n    sorted_intervals = sorted(intervals, key=lambda x: x[0])\n    merged = [sorted_intervals[0]]\n    for current in sorted_intervals[1:]:\n        last = merged[-1]\n        if current[0] <= last[1]:\n            merged[-1] = (last[0], max(last[1], current[1]))\n        else:\n            merged.append(current)\n    return merged\n\ndef find_slot():\n    days_order = ['Monday', 'Tuesday', 'Wednesday']\n    work_start = time_to_min('09:00')\n    work_end = time_to_min('17:00')\n    duration = 30\n\n    schedules = {\n        'Monday': {\n            'Joshua': [(time_to_min('15:00'), time_to_min('15:30'))],\n            'Joyce': [\n                (time_to_min('09:00'), time_to_min('09:30')),\n                (time_to_min('10:00'), time_to_min('11:00')),\n                (time_to_min('11:30'), time_to_min('12:30')),\n                (time_to_min('13:00'), time_to_min('15:00')),\n                (time_to_min('15:30'), time_to_min('17:00'))\n            ]\n        },\n        'Tuesday': {\n            'Joshua': [\n                (time_to_min('11:30'), time_to_min('12:00')),\n                (time_to_min('13:00'), time_to_min('13:30')),\n                (time_to_min('14:30'), time_to_min('15:00'))\n            ],\n            'Joyce': [(time_to_min('09:00'), time_to_min('17:00'))]\n        },\n        'Wednesday': {\n            'Joshua': [],\n            'Joyce': [\n                (time_to_min('09:00'), time_to_min('09:30')),\n                (time_to_min('10:00'), time_to_min('11:00')),\n                (time_to_min('12:30'), time_to_min('15:30')),\n                (time_to_min('16:00'), time_to_min('16:30'))\n            ]\n        }\n    }\n\n    for day in days_order:\n        busy = []\n        busy.extend(schedules[day]['Joshua'])\n        busy.extend(schedules[day]['Joyce'])\n        merged = merge_intervals(busy)\n        free = []\n        prev_end = work_start\n        for start, end in merged:\n            if start > prev_end:\n                free.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        if prev_end < work_end:\n            free.append((prev_end, work_end))\n        if day == 'Monday':\n            free = [(s, e) for s, e in free if s >= time_to_min('12:00')]\n        for start, end in free:\n            if end - start >= duration:\n                slot_start = start\n                slot_end = slot_start + duration\n                return (day, min_to_time(slot_start), min_to_time(slot_end))\n    return None\n\nresult = find_slot()\nif result:\n    day, start, end = result\n    print(f\"{day} {start}-{end}\")\n```",
            "count": "calendar_scheduling_example_765"
        }
    ]
}