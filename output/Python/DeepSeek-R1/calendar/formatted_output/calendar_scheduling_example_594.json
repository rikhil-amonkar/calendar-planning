{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_time():\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    duration = 30\n\n    # Busy times for Adam and Roy in minutes\n    adam_busy = [(9*60+30, 10*60), (12*60+30, 13*60), (14*60+30, 15*60), (16*60+30, 17*60)]\n    roy_busy = [(10*60, 11*60), (11*60+30, 13*60), (13*60+30, 14*60+30), (16*60+30, 17*60)]\n\n    # Combine and sort all busy intervals\n    merged = sorted(adam_busy + roy_busy, key=lambda x: x[0])\n\n    # Merge overlapping intervals\n    merged_busy = []\n    for start, end in merged:\n        if not merged_busy:\n            merged_busy.append([start, end])\n        else:\n            last_start, last_end = merged_busy[-1]\n            if start <= last_end:\n                merged_busy[-1][1] = max(last_end, end)\n            else:\n                merged_busy.append([start, end])\n\n    # Check for available slot before first meeting\n    if merged_busy[0][0] - work_start >= duration:\n        return format_time(work_start, merged_busy[0][0], 'Monday')\n\n    # Check gaps between meetings\n    for i in range(1, len(merged_busy)):\n        prev_end = merged_busy[i-1][1]\n        curr_start = merged_busy[i][0]\n        if curr_start - prev_end >= duration:\n            return format_time(prev_end, curr_start, 'Monday')\n\n    # Check after last meeting\n    if work_end - merged_busy[-1][1] >= duration:\n        return format_time(merged_busy[-1][1], work_end, 'Monday')\n\ndef format_time(start, end, day):\n    start_hr, start_min = divmod(start, 60)\n    end_hr, end_min = divmod(end, 60)\n    return f\"{day} {start_hr:02}:{start_min:02}:{end_hr:02}:{end_min:02}\"\n\nprint(find_time())\n'''",
            "count": "calendar_scheduling_example_594"
        }
    ]
}