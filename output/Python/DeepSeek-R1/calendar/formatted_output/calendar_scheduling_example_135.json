{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef time_to_min(t):\n    hours, minutes = map(int, t.split(':'))\n    return hours * 60 + minutes\n\ndef min_to_time(m):\n    hours = m // 60\n    minutes = m % 60\n    return f\"{hours:02d}:{minutes:02d}\"\n\ndef merge_intervals(intervals):\n    if not intervals:\n        return []\n    sorted_intervals = sorted(intervals, key=lambda x: x[0])\n    merged = [sorted_intervals[0]]\n    for current in sorted_intervals[1:]:\n        last = merged[-1]\n        if current[0] <= last[1]:\n            merged[-1] = (last[0], max(last[1], current[1]))\n        else:\n            merged.append(current)\n    return merged\n\ndef get_free_intervals(busy_intervals, work_start, work_end):\n    merged_busy = merge_intervals(busy_intervals)\n    free = []\n    previous_end = work_start\n    for start, end in merged_busy:\n        if start > previous_end:\n            free.append((previous_end, start))\n        previous_end = max(previous_end, end)\n    if previous_end < work_end:\n        free.append((previous_end, work_end))\n    return free\n\ndef intersect_intervals(a, b):\n    i = j = 0\n    result = []\n    while i < len(a) and j < len(b):\n        a_start, a_end = a[i]\n        b_start, b_end = b[j]\n        start = max(a_start, b_start)\n        end = min(a_end, b_end)\n        if start < end:\n            result.append((start, end))\n        if a_end < b_end:\n            i += 1\n        else:\n            j += 1\n    return result\n\n# Define work hours\nwork_start = time_to_min('09:00')\nwork_end = time_to_min('17:00')\n\n# Define participant busy intervals\neric_busy = []\nashley_busy = [('10:00', '10:30'), ('11:00', '12:00'), ('12:30', '13:00'), ('15:00', '16:00')]\nronald_busy = [('09:00', '09:30'), ('10:00', '11:30'), ('12:30', '14:00'), ('14:30', '17:00')]\nlarry_busy = [('09:00', '12:00'), ('13:00', '17:00')]\n\n# Convert to minutes\ndef parse_busy(busy_list):\n    return [(time_to_min(s), time_to_min(e)) for s, e in busy_list]\n\neric_free = get_free_intervals(parse_busy(eric_busy), work_start, work_end)\nashley_free = get_free_intervals(parse_busy(ashley_busy), work_start, work_end)\nronald_free = get_free_intervals(parse_busy(ronald_busy), work_start, work_end)\nlarry_free = get_free_intervals(parse_busy(larry_busy), work_start, work_end)\n\n# Find intersection\ncurrent = eric_free\ncurrent = intersect_intervals(current, ashley_free)\ncurrent = intersect_intervals(current, ronald_free)\ncurrent = intersect_intervals(current, larry_free)\n\n# Find first 30-minute slot\nfor start, end in current:\n    if end - start >= 30:\n        print(f\"{min_to_time(start)}:{min_to_time(start + 30)}\")\n        print(\"Monday\")\n        exit()\n\nprint(\"No suitable time found.\")\n'''",
            "count": "calendar_scheduling_example_135"
        }
    ]
}