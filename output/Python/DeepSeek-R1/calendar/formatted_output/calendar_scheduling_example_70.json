{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    # Participants' busy intervals in minutes since midnight\n    denise = [(12*60, 12*60+30), (15*60+30, 16*60)]\n    angela = []\n    natalie = [(9*60, 11*60+30), (12*60, 13*60), (14*60, 14*60+30), (15*60, 17*60)]\n    \n    # Combine all busy intervals\n    busy_intervals = denise + angela + natalie\n    # Sort intervals by start time\n    busy_intervals.sort()\n    \n    # Merge overlapping intervals\n    merged = []\n    for interval in busy_intervals:\n        if not merged or merged[-1][1] < interval[0]:\n            merged.append(interval)\n        else:\n            merged[-1] = (merged[-1][0], max(merged[-1][1], interval[1]))\n    \n    # Work hours 9:00 (540) to 17:00 (1020)\n    work_start = 9 * 60\n    work_end = 17 * 60\n    duration = 30  # minutes\n    \n    current_start = work_start\n    # Check gaps between merged intervals\n    for start, end in merged:\n        if start > current_start:\n            if start - current_start >= duration:\n                # Found a suitable slot\n                return format_time(current_start, current_start + duration, \"Monday\")\n        current_start = max(current_start, end)\n    # Check after last interval\n    if work_end - current_start >= duration:\n        return format_time(current_start, current_start + duration, \"Monday\")\n    return None\n\ndef format_time(start, end, day):\n    def to_hhmm(minutes):\n        return f\"{minutes//60:02}:{minutes%60:02}\"\n    return f\"{day} {to_hhmm(start)}:{to_hhmm(end)}\"\n\n# Find and print the meeting time\nresult = find_meeting_time()\nprint(result)\n'''",
            "count": "calendar_scheduling_example_70"
        }
    ]
}