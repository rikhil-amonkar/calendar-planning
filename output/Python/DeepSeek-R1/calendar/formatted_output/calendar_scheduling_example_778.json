{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:00",
                "end_time": "13:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "15:00",
                "end_time": "15:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    import datetime\n\n    def time_to_minutes(t):\n        return t.hour * 60 + t.minute\n\n    def minutes_to_time(m):\n        hours = m // 60\n        minutes = m % 60\n        return datetime.time(hours, minutes)\n\n    days = ['Monday', 'Wednesday', 'Tuesday']\n    work_start = datetime.time(9, 0)\n    work_end = datetime.time(17, 0)\n    duration = 30\n\n    # Define schedules for each day\n    schedules = {\n        'Monday': {\n            'Susan': [(datetime.time(12, 30), datetime.time(13, 0)),\n                      (datetime.time(13, 30), datetime.time(14, 0))],\n            'Sandra': [(datetime.time(9, 0), datetime.time(13, 0)),\n                       (datetime.time(14, 0), datetime.time(15, 0)),\n                       (datetime.time(16, 0), datetime.time(16, 30))]\n        },\n        'Wednesday': {\n            'Susan': [(datetime.time(9, 30), datetime.time(10, 30)),\n                      (datetime.time(14, 0), datetime.time(14, 30)),\n                      (datetime.time(15, 30), datetime.time(16, 30))],\n            'Sandra': [(datetime.time(9, 0), datetime.time(11, 30)),\n                       (datetime.time(12, 0), datetime.time(12, 30)),\n                       (datetime.time(13, 0), datetime.time(17, 0))]\n        },\n        'Tuesday': {\n            'Susan': [(datetime.time(11, 30), datetime.time(12, 0))],\n            'Sandra': [(datetime.time(9, 0), datetime.time(9, 30)),\n                       (datetime.time(10, 30), datetime.time(12, 0)),\n                       (datetime.time(12, 30), datetime.time(13, 30)),\n                       (datetime.time(14, 0), datetime.time(14, 30)),\n                       (datetime.time(16, 0), datetime.time(17, 0))]\n        }\n    }\n\n    for day in days:\n        if day == 'Tuesday':  # Susan's preference\n            continue\n        \n        susan_busy = schedules[day]['Susan']\n        sandra_busy = schedules[day]['Sandra']\n\n        # Convert busy times to minutes\n        def convert_intervals(intervals):\n            converted = []\n            for start, end in intervals:\n                s = time_to_minutes(start)\n                e = time_to_minutes(end)\n                converted.append((s, e))\n            return converted\n        \n        susan_blocked = convert_intervals(susan_busy)\n        sandra_blocked = convert_intervals(sandra_busy)\n\n        # Generate free slots\n        def get_free_slots(blocked, work_start, work_end):\n            start_min = time_to_minutes(work_start)\n            end_min = time_to_minutes(work_end)\n            blocked = sorted(blocked + [(end_min, end_min)])\n            free = []\n            prev_end = start_min\n            for s, e in blocked:\n                if s > prev_end:\n                    free.append((prev_end, s))\n                prev_end = max(prev_end, e)\n            return free\n        \n        susan_free = get_free_slots(susan_blocked, work_start, work_end)\n        sandra_free = get_free_slots(sandra_blocked, work_start, work_end)\n\n        # Apply Sandra's Monday constraint\n        if day == 'Monday':\n            sandra_free = [ (s, e) for (s, e) in sandra_free if e <= 960 ]  # 16:00 in minutes\n\n        # Find overlapping slots\n        combined_free = []\n        i = j = 0\n        while i < len(susan_free) and j < len(sandra_free):\n            s_start, s_end = susan_free[i]\n            sa_start, sa_end = sandra_free[j]\n\n            start = max(s_start, sa_start)\n            end = min(s_end, sa_end)\n            if start < end:\n                combined_free.append((start, end))\n            if s_end < sa_end:\n                i += 1\n            else:\n                j += 1\n\n        # Check for valid slot\n        for start, end in combined_free:\n            if end - start >= duration:\n                meeting_start = start\n                meeting_end = meeting_start + duration\n                start_time = minutes_to_time(meeting_start)\n                end_time = minutes_to_time(meeting_end)\n                return (day, f\"{start_time.hour:02d}:{start_time.minute:02d}:{end_time.hour:02d}:{end_time.minute:02d}\")\n\n    # Fallback to Tuesday if necessary (though problem states solution exists)\n    day = 'Tuesday'\n    susan_busy = schedules[day]['Susan']\n    sandra_busy = schedules[day]['Sandra']\n    susan_blocked = convert_intervals(susan_busy)\n    sandra_blocked = convert_intervals(sandra_busy)\n    susan_free = get_free_slots(susan_blocked, work_start, work_end)\n    sandra_free = get_free_slots(sandra_blocked, work_start, work_end)\n    combined_free = []\n    i = j = 0\n    while i < len(susan_free) and j < len(sandra_free):\n        s_start, s_end = susan_free[i]\n        sa_start, sa_end = sandra_free[j]\n        start = max(s_start, sa_start)\n        end = min(s_end, sa_end)\n        if start < end:\n            combined_free.append((start, end))\n        if s_end < sa_end:\n            i += 1\n        else:\n            j += 1\n    for start, end in combined_free:\n        if end - start >= duration:\n            meeting_start = start\n            meeting_end = meeting_start + duration\n            start_time = minutes_to_time(meeting_start)\n            end_time = minutes_to_time(meeting_end)\n            return (day, f\"{start_time.hour:02d}:{start_time.minute:02d}:{end_time.hour:02d}:{end_time.minute:02d}\")\n\nday, time = find_meeting_time()\nprint(f\"{day}:{time}\")\n'''",
            "count": "calendar_scheduling_example_778"
        }
    ]
}