{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef convert_time(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef inverse_convert(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\ndef find_meeting_time(schedules, duration, work_start, work_end):\n    work_start_min = convert_time(work_start)\n    work_end_min = convert_time(work_end)\n    timeline = []\n\n    for person in schedules.values():\n        for start, end in person:\n            timeline.append((start, end))\n\n    timeline.sort()\n    merged = []\n    for start, end in timeline:\n        if not merged:\n            merged.append([start, end])\n        else:\n            last_end = merged[-1][1]\n            if start <= last_end:\n                merged[-1][1] = max(last_end, end)\n            else:\n                merged.append([start, end])\n\n    prev_end = work_start_min\n    for interval in merged:\n        start, end = interval\n        if start - prev_end >= duration:\n            return (prev_end, prev_end + duration)\n        prev_end = max(prev_end, end)\n    if work_end_min - prev_end >= duration:\n        return (prev_end, prev_end + duration)\n    return None\n\nparticipants = {\n    'Emily': [('10:00', '10:30'), ('16:00', '16:30')],\n    'Mason': [],\n    'Maria': [('10:30', '11:00'), ('14:00', '14:30')],\n    'Carl': [('9:30', '10:00'), ('10:30', '12:30'), ('13:30', '14:00'), ('14:30', '15:30'), ('16:00', '17:00')],\n    'David': [('9:30', '11:00'), ('11:30', '12:00'), ('12:30', '13:30'), ('14:00', '15:00'), ('16:00', '17:00')],\n    'Frank': [('9:30', '10:30'), ('11:00', '11:30'), ('12:30', '13:30'), ('14:30', '17:00')]\n}\n\n# Convert schedules to minutes\nconverted_schedules = {}\nfor person, meetings in participants.items():\n    converted = []\n    for start, end in meetings:\n        converted.append((convert_time(start), convert_time(end)))\n    converted_schedules[person] = converted\n\n# Find meeting time\nmeeting_time = find_meeting_time(\n    converted_schedules,\n    30,\n    '9:00',\n    '17:00'\n)\n\nif meeting_time:\n    start, end = meeting_time\n    print(f\"Monday:{inverse_convert(start)}:{inverse_convert(end)}\")\nelse:\n    print(\"No suitable time found\")\n'''",
            "count": "calendar_scheduling_example_360"
        }
    ]
}