{
    "0shot": [
        {
            "final_program_time": {
                "day": "Wednesday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "11:30",
                "end_time": "12:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n    nicole_busy = {\n        \"Monday\": [(9, 0, 9, 30), (13, 0, 13, 30), (14, 30, 15, 30)],\n        \"Tuesday\": [(9, 0, 9, 30), (11, 30, 13, 30), (14, 30, 15, 30)],\n        \"Wednesday\": [(10, 0, 11, 0), (12, 30, 15, 0), (16, 0, 17, 0)]\n    }\n    ruth_busy = {\n        \"Monday\": [(9, 0, 17, 0)],\n        \"Tuesday\": [(9, 0, 17, 0)],\n        \"Wednesday\": [(9, 0, 10, 30), (11, 0, 11, 30), (12, 0, 12, 30), (13, 30, 15, 30), (16, 0, 16, 30)]\n    }\n    ruth_preference = {\"Wednesday\": (13, 30)}\n\n    for day in days:\n        if day == \"Wednesday\":\n            ruth_end_pref = ruth_preference[\"Wednesday\"][0] * 60 + ruth_preference[\"Wednesday\"][1]\n        else:\n            ruth_end_pref = 17 * 60\n        \n        ruth_slots = []\n        ruth_blocked = ruth_busy[day]\n        ruth_blocked_sorted = sorted(ruth_blocked, key=lambda x: x[0]*60 + x[1])\n        current_start = 9 * 60\n        for block in ruth_blocked_sorted:\n            block_start = block[0] * 60 + block[1]\n            block_end = block[2] * 60 + block[3]\n            if current_start < block_start:\n                ruth_slots.append((current_start, block_start))\n            current_start = max(current_start, block_end)\n        if current_start < 17 * 60:\n            ruth_slots.append((current_start, 17 * 60))\n        \n        nicole_slots = []\n        nicole_blocked = nicole_busy[day]\n        nicole_blocked_sorted = sorted(nicole_blocked, key=lambda x: x[0]*60 + x[1])\n        current_start = 9 * 60\n        for block in nicole_blocked_sorted:\n            block_start = block[0] * 60 + block[1]\n            block_end = block[2] * 60 + block[3]\n            if current_start < block_start:\n                nicole_slots.append((current_start, block_start))\n            current_start = max(current_start, block_end)\n        if current_start < 17 * 60:\n            nicole_slots.append((current_start, 17 * 60))\n        \n        for ruth_start, ruth_end in ruth_slots:\n            if day == \"Wednesday\":\n                ruth_end = min(ruth_end, ruth_end_pref)\n            for nicole_start, nicole_end in nicole_slots:\n                overlap_start = max(ruth_start, nicole_start)\n                overlap_end = min(ruth_end, nicole_end)\n                if overlap_end - overlap_start >= 30:\n                    start_h = overlap_start // 60\n                    start_m = overlap_start % 60\n                    end_h = (overlap_start + 30) // 60\n                    end_m = (overlap_start + 30) % 60\n                    return (f\"{day} {start_h:02d}:{start_m:02d}-{end_h:02d}:{end_m:02d}\")\n\n    return \"No suitable time found\"\n\nresult = find_meeting_time()\nprint(result)\n'''",
            "count": "calendar_scheduling_example_791"
        }
    ]
}