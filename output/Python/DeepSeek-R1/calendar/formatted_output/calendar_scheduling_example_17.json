{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:00",
                "end_time": "12:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef time_to_minutes(t):\n    hours, minutes = map(int, t.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(m):\n    return f\"{m // 60:02d}:{m % 60:02d}\"\n\ndef get_free_intervals(busy_intervals, work_start, work_end):\n    sorted_busy = sorted(busy_intervals, key=lambda x: x[0])\n    free = []\n    prev_end = work_start\n    for start, end in sorted_busy:\n        if start > prev_end:\n            free.append([prev_end, start])\n        prev_end = max(prev_end, end)\n    if prev_end < work_end:\n        free.append([prev_end, work_end])\n    return free\n\ndef find_meeting_time():\n    work_start = time_to_minutes(\"09:00\")\n    work_end = time_to_minutes(\"13:30\")  # Helen's constraint\n    duration = 30\n\n    # Define busy intervals in minutes (within adjusted work hours)\n    margaret_busy = [\n        [time_to_minutes(\"09:00\"), time_to_minutes(\"10:00\")],\n        [time_to_minutes(\"10:30\"), time_to_minutes(\"11:00\")],\n        [time_to_minutes(\"11:30\"), time_to_minutes(\"12:00\")],\n        [time_to_minutes(\"13:00\"), time_to_minutes(\"13:30\")]\n    ]\n    \n    donna_busy = []  # No conflicts in adjusted window\n    \n    helen_busy = [\n        [time_to_minutes(\"09:00\"), time_to_minutes(\"09:30\")],\n        [time_to_minutes(\"10:00\"), time_to_minutes(\"11:30\")],\n        [time_to_minutes(\"13:00\"), time_to_minutes(\"13:30\")]\n    ]\n\n    # Get free intervals\n    margaret_free = get_free_intervals(margaret_busy, work_start, work_end)\n    donna_free = get_free_intervals(donna_busy, work_start, work_end)\n    helen_free = get_free_intervals(helen_busy, work_start, work_end)\n\n    # Find common free intervals\n    common_free = []\n    for m_int in margaret_free:\n        for h_int in helen_free:\n            start = max(m_int[0], h_int[0])\n            end = min(m_int[1], h_int[1])\n            if start < end:\n                common_free.append([start, end])\n    \n    final_free = []\n    for c_int in common_free:\n        for d_int in donna_free:\n            start = max(c_int[0], d_int[0])\n            end = min(c_int[1], d_int[1])\n            if start < end:\n                final_free.append([start, end])\n\n    # Find first suitable slot\n    for interval in final_free:\n        available_start = interval[0]\n        available_end = interval[1]\n        if available_end - available_start >= duration:\n            meeting_start = available_start\n            meeting_end = meeting_start + duration\n            return (\"Monday\", \n                    minutes_to_time(meeting_start),\n                    minutes_to_time(meeting_end))\n\n    return None\n\nresult = find_meeting_time()\nif result:\n    day, start, end = result\n    print(f\"{day} {start}:{end}\")\nelse:\n    print(\"No suitable time found\")\n'''",
            "count": "calendar_scheduling_example_17"
        }
    ]
}