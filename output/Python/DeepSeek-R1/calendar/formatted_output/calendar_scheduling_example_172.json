{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "14:00",
                "end_time": "14:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    work_start = 9 * 60\n    work_end = 17 * 60\n    duration = 30\n\n    # Convert schedules to minutes since midnight\n    schedules = {\n        'Patrick': [(540, 570), (600, 630), (810, 840), (960, 990)],\n        'Kayla': [(750, 810), (900, 930), (960, 990)],\n        'Carl': [(630, 660), (720, 750), (780, 810), (870, 1020)],\n        'Christian': [(540, 750), (780, 840), (870, 1020)]\n    }\n\n    # Create a unified busy timeline\n    timeline = [0] * (work_end - work_start)\n    for person in schedules.values():\n        for start, end in person:\n            for t in range(max(start, work_start) - work_start, min(end, work_end) - work_start):\n                timeline[t] += 1\n\n    # Find available slot\n    current_start = None\n    for i, count in enumerate(timeline):\n        if count == 0:\n            if current_start is None:\n                current_start = i\n            if i - current_start + 1 >= duration:\n                start_time = current_start + work_start\n                end_time = start_time + duration\n                return (\n                    f\"{start_time // 60:02d}:{start_time % 60:02d}-\"\n                    f\"{end_time // 60:02d}:{end_time % 60:02d}\",\n                    \"Monday\"\n                )\n        else:\n            current_start = None\n\n    return None\n\ntime_range, day = find_meeting_time()\nprint(f\"{day}: {time_range}\")\n'''",
            "count": "calendar_scheduling_example_172"
        }
    ]
}