{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef time_to_minutes(time):\n    hours, minutes = map(int, time.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\ndef compute_free_intervals(busy_schedule, work_start, work_end):\n    busy_schedule.sort()\n    free_intervals = []\n    current_start = work_start\n    for start, end in busy_schedule:\n        if start > current_start:\n            free_intervals.append((current_start, start))\n        current_start = max(current_start, end)\n    if current_start < work_end:\n        free_intervals.append((current_start, work_end))\n    return free_intervals\n\n# Participant schedules and preferences\nlarry_schedule = {}\nsamuel_schedule = {\n    'Monday': [('10:30', '11:00'), ('12:00', '12:30'), ('13:00', '15:00'), ('15:30', '16:30')],\n    'Tuesday': [('9:00', '12:00'), ('14:00', '15:30'), ('16:30', '17:00')],\n    'Wednesday': [('10:30', '11:00'), ('11:30', '12:00'), ('12:30', '13:00'), ('14:00', '14:30'), ('15:00', '16:00')]\n}\n\n# Convert schedules to minutes\nsamuel_busy = {}\nfor day, meetings in samuel_schedule.items():\n    samuel_busy[day] = [(time_to_minutes(start), time_to_minutes(end)) for start, end in meetings]\n\nwork_hours = (9*60, 17*60)\nduration = 30\ndays_order = ['Monday', 'Tuesday', 'Wednesday']\n\n# Process preferences\navoid_days = set()\nlarry_preferences = ['would rather not meet on Wednesday']\nsamuel_preferences = ['would like to avoid more meetings on Tuesday']\n\nif 'would rather not meet on Wednesday' in larry_preferences:\n    avoid_days.add('Wednesday')\nif 'would like to avoid more meetings on Tuesday' in samuel_preferences:\n    avoid_days.add('Tuesday')\n\n# Find earliest possible slot\nfound = False\nfor day in days_order:\n    if day in avoid_days:\n        continue\n    \n    work_start, work_end = work_hours\n    busy = samuel_busy.get(day, [])\n    free_intervals = compute_free_intervals(busy, work_start, work_end)\n    \n    possible_slots = []\n    for interval in free_intervals:\n        start, end = interval\n        current_start = start\n        while current_start + duration <= end:\n            possible_slots.append((current_start, current_start + duration))\n            current_start += 1  # Check every minute\n    \n    if possible_slots:\n        possible_slots.sort()\n        chosen_start, chosen_end = possible_slots[0]\n        start_time = minutes_to_time(chosen_start)\n        end_time = minutes_to_time(chosen_end)\n        print(f\"{day}:{start_time}:{end_time}\")\n        found = True\n        break\n\nif not found:\n    print(\"No suitable time found\")\n'''",
            "count": "calendar_scheduling_example_704"
        }
    ]
}