{
    "0shot": [
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "12:30",
                "end_time": "13:00"
            },
            "has_error": true,
            "raw_model_response": "'''python\ndef find_time_slot():\n    import datetime\n\n    # Define work hours (9:00 to 17:00)\n    work_start = 9 * 60\n    work_end = 17 * 60\n\n    # Define participants' schedules in minutes since midnight\n    # Format: {day: [busy_intervals]}\n    jean_busy = {\n        'Tuesday': [(11*60 +30, 12*60), (16*60, 16*60 +30)]\n    }\n\n    doris_busy = {\n        'Monday': [(9*60, 11*60 +30), (12*60, 12*60 +30), \n                   (13*60 +30, 16*60), (16*60 +30, 17*60)],\n        'Tuesday': [(9*60, 17*60)]\n    }\n\n    # Check days in order: Monday first\n    for day in ['Monday', 'Tuesday']:\n        # Skip Tuesday as Doris is fully booked\n        if day == 'Tuesday':\n            continue\n\n        # Generate all possible 30-minute slots on this day\n        for start_min in range(work_start, work_end - 30 + 1, 30):\n            end_min = start_min + 30\n\n            # Check Jean's availability (free on Monday)\n            jean_available = True\n            if day == 'Tuesday':\n                # Check Jean's Tuesday schedule\n                for (busy_start, busy_end) in jean_busy.get(day, []):\n                    if not (end_min <= busy_start or start_min >= busy_end):\n                        jean_available = False\n                        break\n\n            # Check Doris's availability\n            doris_available = True\n            for (busy_start, busy_end) in doris_busy.get(day, []):\n                if not (end_min <= busy_start or start_min >= busy_end):\n                    doris_available = False\n                    break\n\n            # Apply Doris's preference (avoid Monday after 14:00)\n            if day == 'Monday' and start_min >= 14 * 60:\n                continue  # Skip slots after 14:00\n\n            if jean_available and doris_available:\n                # Format time to HH:MM\n                def format_time(mins):\n                    return f\"{mins//60:02d}:{mins%60:02d}\"\n\n                time_slot = (\n                    f\"{format_time(start_min)}:{format_time(end_min)}\"\n                )\n                return (day, time_slot)\n\n    return None  # Shouldn't reach here per problem statement\n\nday, time_slot = find_time_slot()\nstart, end = time_slot.split(':')\nprint(f\"{day} {start}:{end}\")\n'''",
            "count": "calendar_scheduling_example_669"
        }
    ]
}