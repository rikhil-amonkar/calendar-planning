{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "16:30",
                "end_time": "17:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    work_hours = (9, 17)  # 9:00 to 17:00\n    participants = {\n        'Wayne': [],\n        'Melissa': [(10, 11), (12.5, 14), (15, 15.5)],\n        'Catherine': [],\n        'Gregory': [(12.5, 13), (15.5, 16)],\n        'Victoria': [(9, 9.5), (10.5, 11.5), (13, 14), (14.5, 15), (15.5, 16.5)],\n        'Thomas': [(10, 12), (12.5, 13), (14.5, 16)],\n        'Jennifer': [(9, 9.5), (10, 10.5), (11, 13), (13.5, 14.5), (15, 15.5), (16, 16.5)]\n    }\n    \n    # Wayne's preference: not before 14:00\n    possible_start = 14.0  # 14:00 in decimal\n    \n    # Convert time to decimal for easier comparison\n    for start in [14.0, 14.5, 15.0, 15.5, 16.0, 16.5]:\n        end = start + 0.5  # 30 minutes duration\n        if end > 17.0:\n            continue\n        \n        # Check all participants\n        conflict = False\n        for person, meetings in participants.items():\n            # Check Wayne's preference\n            if person == 'Wayne' and start < 14.0:\n                conflict = True\n                break\n            \n            # Check existing meetings\n            for (meeting_start, meeting_end) in meetings:\n                if not (end <= meeting_start or start >= meeting_end):\n                    conflict = True\n                    break\n            if conflict:\n                break\n        \n        if not conflict:\n            # Convert decimal back to time string\n            def decimal_to_time(decimal):\n                hours = int(decimal)\n                minutes = int((decimal - hours) * 60)\n                return f\"{hours:02d}:{minutes:02d}\"\n            \n            start_str = decimal_to_time(start)\n            end_str = decimal_to_time(end)\n            return f\"Monday {start_str}-{end_str}\"\n    \n    return \"No time found\"\n\nmeeting_time = find_meeting_time()\nprint(meeting_time)\n'''",
            "count": "calendar_scheduling_example_458"
        }
    ]
}