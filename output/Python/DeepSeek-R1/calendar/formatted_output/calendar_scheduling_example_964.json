{
    "0shot": [
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": "11:00",
                "end_time": "12:00"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "11:00",
                "end_time": "12:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    # Define work hours\n    work_start = 9 * 60\n    work_end = 17 * 60\n\n    # Define days to check\n    days = [\"Tuesday\"]  # Monday and Friday excluded due to Megan's full day blocks\n\n    # Convert schedules to minutes since midnight\n    betty_busy = {\n        \"Tuesday\": [\n            (9*60+30, 10*60),\n            (10*60+30, 11*60),\n            (12*60, 12*60+30),\n            (13*60+30, 15*60),\n            (16*60+30, 17*60)\n        ]\n    }\n\n    megan_busy = {\n        \"Tuesday\": [\n            (9*60, 9*60+30),\n            (10*60, 10*60+30),\n            (12*60, 14*60),\n            (15*60, 15*60+30),\n            (16*60, 16*60+30)\n        ]\n    }\n\n    for day in days:\n        # Generate free slots for Betty\n        betty_slots = []\n        prev_end = work_start\n        for start, end in sorted(betty_busy[day]):\n            if start > prev_end:\n                betty_slots.append((prev_end, start))\n            prev_end = end\n        if prev_end < work_end:\n            betty_slots.append((prev_end, work_end))\n\n        # Generate free slots for Megan\n        megan_slots = []\n        prev_end = work_start\n        for start, end in sorted(megan_busy[day]):\n            if start > prev_end:\n                megan_slots.append((prev_end, start))\n            prev_end = end\n        if prev_end < work_end:\n            megan_slots.append((prev_end, work_end))\n\n        # Find overlapping slots with 60+ minutes duration\n        for b_start, b_end in betty_slots:\n            for m_start, m_end in megan_slots:\n                overlap_start = max(b_start, m_start)\n                overlap_end = min(b_end, m_end)\n                if overlap_end - overlap_start >= 60:\n                    # Convert back to time\n                    start_hr, start_min = divmod(overlap_start, 60)\n                    end_hr, end_min = divmod(overlap_start + 60, 60)\n                    return (\n                        f\"{start_hr:02d}:{start_min:02d}:{end_hr:02d}:{end_min:02d}\",\n                        day\n                    )\n\n    return None\n\ntime_slot, day = find_meeting_time()\nprint(f\"{day} {time_slot}\")\n'''",
            "count": "calendar_scheduling_example_964"
        }
    ]
}