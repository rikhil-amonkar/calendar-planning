{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:30",
                "end_time": "11:00"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    # Work hours and constraints\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    meeting_duration = 30\n    day = \"Monday\"\n    \n    # Evelyn's availability (before 13:00)\n    evelyn_available = [(9*60, 13*60)]\n    \n    # Randy's blocked times converted to free slots within work hours\n    randy_blocked = [(9*60, 10.5*60), (11*60, 15.5*60), (16*60, 17*60)]\n    randy_free = []\n    previous_end = work_start\n    for start, end in sorted(randy_blocked):\n        if start > previous_end:\n            randy_free.append((previous_end, start))\n        previous_end = end\n    if previous_end < work_end:\n        randy_free.append((previous_end, work_end))\n    \n    # Find overlapping slots that satisfy Evelyn's time preference\n    for e_start, e_end in evelyn_available:\n        for r_start, r_end in randy_free:\n            overlap_start = max(e_start, r_start)\n            overlap_end = min(e_end, r_end)\n            if overlap_end - overlap_start >= meeting_duration:\n                # Convert minutes back to HH:MM format\n                return (\n                    f\"{day}: \"\n                    f\"{int(overlap_start//60):02d}:{int(overlap_start%60):02d}:\"\n                    f\"{int((overlap_start+meeting_duration)//60):02d}:{int((overlap_start+meeting_duration)%60):02d}\"\n                )\n    \n    return \"No suitable time found\"\n\nprint(find_meeting_time())\n'''",
            "count": "calendar_scheduling_example_555"
        }
    ]
}