{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "{9:30",
                "end_time": "10:00}"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "{9:30",
                "end_time": "10:00}"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef convert_time(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes - 9 * 60  # Convert to minutes since 09:00\n\ndef main():\n    participants = {\n        \"Patrick\": [(\"13:30\", \"14:00\"), (\"14:30\", \"15:00\")],\n        \"Shirley\": [(\"09:00\", \"09:30\"), (\"11:00\", \"11:30\"), (\"12:00\", \"12:30\"), (\"14:30\", \"15:00\"), (\"16:00\", \"17:00\")],\n        \"Jeffrey\": [(\"09:00\", \"09:30\"), (\"10:30\", \"11:00\"), (\"11:30\", \"12:00\"), (\"13:00\", \"13:30\"), (\"16:00\", \"17:00\")],\n        \"Gloria\": [(\"11:30\", \"12:00\"), (\"15:00\", \"15:30\")],\n        \"Nathan\": [(\"09:00\", \"09:30\"), (\"10:30\", \"12:00\"), (\"14:00\", \"17:00\")],\n        \"Angela\": [(\"09:00\", \"09:30\"), (\"10:00\", \"11:00\"), (\"12:30\", \"15:00\"), (\"15:30\", \"16:30\")],\n        \"David\": [(\"09:00\", \"09:30\"), (\"10:00\", \"10:30\"), (\"11:00\", \"14:00\"), (\"14:30\", \"16:30\")]\n    }\n\n    # Convert all time slots to minutes since 09:00\n    busy_slots = {}\n    for person, slots in participants.items():\n        busy_slots[person] = []\n        for start, end in slots:\n            start_min = convert_time(start)\n            end_min = convert_time(end)\n            busy_slots[person].append((start_min, end_min))\n\n    # Check every 30-minute slot from 09:00 to 16:30\n    for start_min in range(0, 480 - 30 + 1, 1):\n        end_min = start_min + 30\n        all_free = True\n        for person, slots in busy_slots.items():\n            conflict = any(s < end_min and e > start_min for (s, e) in slots)\n            if conflict:\n                all_free = False\n                break\n        if all_free:\n            # Convert back to HH:MM format\n            total_min = start_min + 9 * 60\n            start_h = total_min // 60\n            start_m = total_min % 60\n            end_total_min = end_min + 9 * 60\n            end_h = end_total_min // 60\n            end_m = end_total_min % 60\n            print(f\"{start_h:02d}:{start_m:02d}:{end_h:02d}:{end_m:02d}\")\n            print(\"Monday\")\n            return\n\nif __name__ == \"__main__\":\n    main()\n'''",
            "count": "calendar_scheduling_example_436"
        }
    ]
}