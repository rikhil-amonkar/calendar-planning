{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "{11:00",
                "end_time": "11:30}"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "{11:00",
                "end_time": "11:30}"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef time_to_minutes(t):\n    hours, minutes = map(int, t.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(m):\n    return f\"{m // 60:02d}:{m % 60:02d}\"\n\ndef merge_intervals(intervals):\n    if not intervals:\n        return []\n    sorted_intervals = sorted(intervals, key=lambda x: x[0])\n    merged = [sorted_intervals[0]]\n    for current in sorted_intervals[1:]:\n        last = merged[-1]\n        if current[0] <= last[1]:\n            merged[-1] = (last[0], max(last[1], current[1]))\n        else:\n            merged.append(current)\n    return merged\n\nwork_start = time_to_minutes(\"09:00\")\nwork_end = time_to_minutes(\"17:00\")\n\nbusy_intervals = []\n\ncynthia_busy = [\n    (\"09:30\", \"10:30\"),\n    (\"11:30\", \"12:00\"),\n    (\"13:00\", \"13:30\"),\n    (\"15:00\", \"16:00\")\n]\nfor start, end in cynthia_busy:\n    busy_intervals.append((time_to_minutes(start), time_to_minutes(end)))\n\nlauren_busy = [\n    (\"09:00\", \"09:30\"),\n    (\"10:30\", \"11:00\"),\n    (\"11:30\", \"12:00\"),\n    (\"13:00\", \"13:30\"),\n    (\"14:00\", \"14:30\"),\n    (\"15:00\", \"15:30\"),\n    (\"16:00\", \"17:00\")\n]\nfor start, end in lauren_busy:\n    busy_intervals.append((time_to_minutes(start), time_to_minutes(end)))\n\nrobert_busy = [\n    (\"10:30\", \"11:00\"),\n    (\"11:30\", \"12:00\"),\n    (\"12:30\", \"13:30\"),\n    (\"14:00\", \"16:00\")\n]\nfor start, end in robert_busy:\n    busy_intervals.append((time_to_minutes(start), time_to_minutes(end)))\n\nmerged_busy = merge_intervals(busy_intervals)\n\nfree_intervals = []\nprevious_end = work_start\nfor start, end in merged_busy:\n    if start > previous_end:\n        free_intervals.append((previous_end, start))\n    previous_end = max(previous_end, end)\nif previous_end < work_end:\n    free_intervals.append((previous_end, work_end))\n\nmeeting_duration = 30\nfor start, end in free_intervals:\n    if end - start >= meeting_duration:\n        meeting_start = start\n        meeting_end = meeting_start + meeting_duration\n        start_time = minutes_to_time(meeting_start)\n        end_time = minutes_to_time(meeting_end)\n        print(f\"Monday:{start_time}:{end_time}\")\n        break\n'''",
            "count": "calendar_scheduling_example_215"
        }
    ]
}