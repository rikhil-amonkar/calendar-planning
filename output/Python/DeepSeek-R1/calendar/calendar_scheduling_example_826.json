{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "{9:30",
                "end_time": "10:00}"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "{9:30",
                "end_time": "10:00}"
            },
            "has_error": false,
            "raw_model_response": "'''python\nimport datetime\n\ndef parse_time(time_str):\n    return datetime.datetime.strptime(time_str, \"%H:%M\").time()\n\ndef time_to_minutes(time):\n    return time.hour * 60 + time.minute\n\ndef minutes_to_time_str(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\ndef find_meeting_slot():\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    meeting_duration = 30\n    \n    james_busy = {\n        \"Monday\": [\"9:00-9:30\", \"10:30-11:00\", \"12:30-13:00\", \"14:30-15:30\", \"16:30-17:00\"],\n        \"Tuesday\": [\"9:00-11:00\", \"11:30-12:00\", \"12:30-15:30\", \"16:00-17:00\"],\n        \"Wednesday\": [\"10:00-11:00\", \"12:00-13:00\", \"13:30-16:00\"],\n        \"Thursday\": [\"9:30-11:30\", \"12:00-12:30\", \"13:00-13:30\", \"14:00-14:30\", \"16:30-17:00\"]\n    }\n    \n    preferred_days = [\"Monday\", \"Tuesday\"]  # Cheryl's preference excludes Wed/Thu\n    \n    for day in preferred_days:\n        busy_intervals = []\n        for slot in james_busy[day]:\n            start_str, end_str = slot.split(\"-\")\n            start = time_to_minutes(parse_time(start_str))\n            end = time_to_minutes(parse_time(end_str))\n            busy_intervals.append((start, end))\n        \n        busy_intervals.sort()\n        free_slots = []\n        prev_end = work_start\n        \n        for start, end in busy_intervals:\n            if start > prev_end:\n                free_slots.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        \n        if prev_end < work_end:\n            free_slots.append((prev_end, work_end))\n        \n        for slot_start, slot_end in free_slots:\n            if slot_end - slot_start >= meeting_duration:\n                meeting_start = slot_start\n                meeting_end = meeting_start + meeting_duration\n                start_time = minutes_to_time_str(meeting_start)\n                end_time = minutes_to_time_str(meeting_end)\n                return f\"{day} {start_time}-{end_time}\"\n    \n    return \"No available slot\"\n\nresult = find_meeting_slot()\nday, time_range = result.split()\nstart, end = time_range.split(\"-\")\nprint(f\"{day} {start}:{end}\")\n'''",
            "count": "calendar_scheduling_example_826"
        }
    ]
}