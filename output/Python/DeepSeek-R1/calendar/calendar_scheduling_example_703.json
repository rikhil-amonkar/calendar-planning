{
    "0shot": [
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "{9:30",
                "end_time": "10:30}"
            },
            "has_error": true,
            "raw_model_response": "'''python\ndef main():\n    from datetime import time\n\n    def minutes_to_time(m):\n        return time(hour=m // 60, minute=m % 60)\n\n    # Define participants' schedules and constraints\n    days = ['Monday', 'Tuesday', 'Wednesday']\n    stephanie_busy = {\n        'Monday': [(570, 600), (630, 660), (690, 720), (840, 870)],\n        'Tuesday': [(720, 780)],\n        'Wednesday': [(540, 600), (780, 840)]\n    }\n    betty_busy = {\n        'Monday': [(540, 600), (660, 690), (870, 900), (930, 960)],\n        'Tuesday': [(540, 570), (690, 720), (750, 870)],  # Post-12:30 blocked by constraint\n        'Wednesday': [(600, 690), (720, 840), (870, 1020)]\n    }\n\n    # Check each day in preferred order (Tuesday, Wednesday, Monday)\n    for day in ['Tuesday', 'Wednesday', 'Monday']:\n        # Adjust Betty's availability based on Tuesday constraint\n        work_start, work_end = 540, 1020\n        betty_work_end = work_end\n        if day == 'Tuesday':\n            betty_work_end = 750  # 12:30 in minutes\n\n        # Calculate free slots for Stephanie\n        st_free = []\n        prev_end = work_start\n        for start, end in sorted(stephanie_busy.get(day, [])):\n            if start > prev_end:\n                st_free.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        if prev_end < work_end:\n            st_free.append((prev_end, work_end))\n\n        # Calculate free slots for Betty\n        bt_free = []\n        prev_end = work_start\n        for start, end in sorted([(s, e) for s, e in betty_busy.get(day, []) if s < betty_work_end]):\n            if start > prev_end:\n                bt_free.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        if prev_end < betty_work_end:\n            bt_free.append((prev_end, betty_work_end))\n\n        # Find overlapping free slots of at least 60 minutes\n        overlap = []\n        i = j = 0\n        while i < len(st_free) and j < len(bt_free)):\n            s_start, s_end = st_free[i]\n            b_start, b_end = bt_free[j]\n            start = max(s_start, b_start)\n            end = min(s_end, b_end)\n            if start < end:\n                if end - start >= 60:\n                    overlap.append((start, start + 60))\n                    break  # Take earliest possible slot\n                # Move the pointer which ends earlier\n                if s_end < b_end:\n                    i += 1\n                else:\n                    j += 1\n            else:\n                if s_start < b_start:\n                    i += 1\n                else:\n                    j += 1\n        if overlap:\n            start, end = overlap[0]\n            print(f\"{day}:{minutes_to_time(start).strftime('%H:%M')}-{minutes_to_time(end).strftime('%H:%M')}\")\n            return\n\nif __name__ == \"__main__\":\n    main()\n'''",
            "count": "calendar_scheduling_example_703"
        }
    ]
}