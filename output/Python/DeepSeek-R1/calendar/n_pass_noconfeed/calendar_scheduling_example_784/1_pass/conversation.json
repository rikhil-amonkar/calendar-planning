[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Judith and Timothy for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nJudith has blocked their calendar on Monday during 12:00 to 12:30, Wednesday during 11:30 to 12:00; \nTimothy has blocked their calendar on Monday during 9:30 to 10:00, 10:30 to 11:30, 12:30 to 14:00, 15:30 to 17:00, Tuesday during 9:30 to 13:00, 13:30 to 14:00, 14:30 to 17:00, Wednesday during 9:00 to 9:30, 10:30 to 11:00, 13:30 to 14:30, 15:00 to 15:30, 16:00 to 16:30; \n\nJudith would like to avoid more meetings on Monday. Wednesday before 12:00. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef get_free_intervals(blocks, work_start, work_end):\n    if not blocks:\n        return [(work_start, work_end)]\n    sorted_blocks = sorted(blocks, key=lambda x: x[0])\n    merged = []\n    start_curr, end_curr = sorted_blocks[0]\n    for i in range(1, len(sorted_blocks)):\n        s, e = sorted_blocks[i]\n        if s <= end_curr:\n            end_curr = max(end_curr, e)\n        else:\n            merged.append((start_curr, end_curr))\n            start_curr, end_curr = s, e\n    merged.append((start_curr, end_curr))\n    \n    free = []\n    current = work_start\n    for s, e in merged:\n        if current < s:\n            free.append((current, s))\n        current = max(current, e)\n    if current < work_end:\n        free.append((current, work_end))\n    return free\n\ndef format_time_range(start_min, end_min):\n    start_h = start_min // 60\n    start_m = start_min % 60\n    end_h = end_min // 60\n    end_m = end_min % 60\n    return f\"{start_h:02d}:{start_m:02d}:{end_h:02d}:{end_m:02d}\"\n\ndef main():\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    duration = 60        # 60 minutes\n\n    # Define blocked times for each participant by day\n    judith_blocks = {\n        'Monday': [(12*60, 12*60+30)],       # 12:00-12:30\n        'Wednesday': [(11*60+30, 12*60)],     # 11:30-12:00\n    }\n    \n    timothy_blocks = {\n        'Monday': [\n            (9*60+30, 10*60),        # 9:30-10:00\n            (10*60+30, 11*60+30),     # 10:30-11:30\n            (12*60+30, 14*60),        # 12:30-14:00\n            (15*60+30, 17*60)         # 15:30-17:00\n        ],\n        'Tuesday': [\n            (9*60+30, 13*60),        # 9:30-13:00\n            (13*60+30, 14*60),        # 13:30-14:00\n            (14*60+30, 17*60)         # 14:30-17:00\n        ],\n        'Wednesday': [\n            (9*60, 9*60+30),          # 9:00-9:30\n            (10*60+30, 11*60),        # 10:30-11:00\n            (13*60+30, 14*60+30),     # 13:30-14:30\n            (15*60, 15*60+30),        # 15:00-15:30\n            (16*60, 16*60+30)         # 16:00-16:30\n        ]\n    }\n    \n    days_order = ['Tuesday', 'Wednesday', 'Monday']  # Preference order\n    \n    for day in days_order:\n        # Get blocks for Judith and Timothy for this day\n        j_blocks = judith_blocks.get(day, [])\n        t_blocks = timothy_blocks.get(day, [])\n        \n        # Compute free intervals\n        free_j = get_free_intervals(j_blocks, work_start, work_end)\n        free_t = get_free_intervals(t_blocks, work_start, work_end)\n        \n        # For Wednesday, filter Judith's free intervals to after 12:00\n        if day == 'Wednesday':\n            free_j = [(s, e) for s, e in free_j if s >= 12*60]  # 12:00 in minutes\n        \n        # Find overlapping free intervals with sufficient duration\n        for j_start, j_end in free_j:\n            for t_start, t_end in free_t:\n                start_overlap = max(j_start, t_start)\n                end_overlap = min(j_end, t_end)\n                if end_overlap - start_overlap >= duration:\n                    meeting_start = start_overlap\n                    meeting_end = meeting_start + duration\n                    time_str = format_time_range(meeting_start, meeting_end)\n                    print(day)\n                    print(time_str)\n                    return\n    \n    # If no slot found (though problem states there is a solution)\n    print(\"No suitable time found\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]