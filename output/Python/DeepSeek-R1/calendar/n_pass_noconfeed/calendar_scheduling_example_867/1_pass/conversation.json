[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Betty and Scott for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday, Wednesday or Thursday. \n\nHere are the existing schedules for everyone during the days: \nBetty is busy on Monday during 10:00 to 10:30, 13:30 to 14:00, 15:00 to 15:30, 16:00 to 16:30, Tuesday during 9:00 to 9:30, 11:30 to 12:00, 12:30 to 13:00, 13:30 to 14:00, 16:30 to 17:00, Wednesday during 9:30 to 10:30, 13:00 to 13:30, 14:00 to 14:30, Thursday during 9:30 to 10:00, 11:30 to 12:00, 14:00 to 14:30, 15:00 to 15:30, 16:30 to 17:00; \nScott is busy on Monday during 9:30 to 15:00, 15:30 to 16:00, 16:30 to 17:00, Tuesday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 12:00, 12:30 to 13:30, 14:00 to 15:00, 16:00 to 16:30, Wednesday during 9:30 to 12:30, 13:00 to 13:30, 14:00 to 14:30, 15:00 to 15:30, 16:00 to 16:30, Thursday during 9:00 to 9:30, 10:00 to 10:30, 11:00 to 12:00, 12:30 to 13:00, 15:00 to 16:00, 16:30 to 17:00; \n\nBetty can not meet on Monday. Tuesday. Thursday before 15:00. Scott would like to avoid more meetings on Wednesday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_str_to_minutes(time_str):\n    parts = time_str.split(':')\n    return int(parts[0]) * 60 + int(parts[1])\n\ndef minutes_to_time(minutes):\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h:02d}:{m:02d}\"\n\ndef get_free_intervals(base, busy_list):\n    free = [base]\n    for busy_interval in busy_list:\n        new_free = []\n        for interval in free:\n            if busy_interval[1] <= interval[0] or busy_interval[0] >= interval[1]:\n                new_free.append(interval)\n            else:\n                if interval[0] < busy_interval[0]:\n                    new_free.append([interval[0], busy_interval[0]])\n                if interval[1] > busy_interval[1]:\n                    new_free.append([busy_interval[1], interval[1]])\n        free = new_free\n    return free\n\ndef get_common_intervals(intervals1, intervals2):\n    common = []\n    for i1 in intervals1:\n        for i2 in intervals2:\n            start = max(i1[0], i2[0])\n            end = min(i1[1], i2[1])\n            if start < end:\n                common.append([start, end])\n    return common\n\ndef main():\n    work_start = 540   # 9:00\n    work_end = 1020    # 17:00\n    duration = 30\n\n    betty_base = {\n        'Tuesday': [900, 1020],   # 15:00 to 17:00\n        'Thursday': [900, 1020],\n        'Wednesday': [work_start, work_end]\n    }\n\n    scott_base = {\n        'Tuesday': [work_start, work_end],\n        'Wednesday': [work_start, work_end],\n        'Thursday': [work_start, work_end]\n    }\n\n    busy = {\n        'Tuesday': {\n            'Betty': [[540, 570], [690, 720], [750, 780], [810, 840], [990, 1020]],\n            'Scott': [[540, 570], [600, 660], [690, 720], [750, 810], [840, 900], [960, 990]]\n        },\n        'Wednesday': {\n            'Betty': [[570, 630], [780, 810], [840, 870]],\n            'Scott': [[570, 750], [780, 810], [840, 870], [900, 930], [960, 990]]\n        },\n        'Thursday': {\n            'Betty': [[570, 600], [690, 720], [840, 870], [900, 930], [990, 1020]],\n            'Scott': [[540, 570], [600, 630], [660, 720], [750, 780], [900, 960], [990, 1020]]\n        }\n    }\n\n    days = ['Tuesday', 'Thursday', 'Wednesday']\n    \n    for day in days:\n        betty_busy = busy[day]['Betty']\n        scott_busy = busy[day]['Scott']\n        \n        betty_free = get_free_intervals(betty_base[day], betty_busy)\n        scott_free = get_free_intervals(scott_base[day], scott_busy)\n        \n        common_free = get_common_intervals(betty_free, scott_free)\n        \n        for interval in common_free:\n            start_min, end_min = interval\n            if end_min - start_min >= duration:\n                meeting_start = start_min\n                meeting_end = start_min + duration\n                start_str = minutes_to_time(meeting_start)\n                end_str = minutes_to_time(meeting_end)\n                print(day)\n                print(f\"{start_str}:{end_str}\")\n                return\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]