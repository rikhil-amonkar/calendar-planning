[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Stephanie and Betty for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nStephanie has meetings on Monday during 9:30 to 10:00, 10:30 to 11:00, 11:30 to 12:00, 14:00 to 14:30, Tuesday during 12:00 to 13:00, Wednesday during 9:00 to 10:00, 13:00 to 14:00; \nBetty has meetings on Monday during 9:00 to 10:00, 11:00 to 11:30, 14:30 to 15:00, 15:30 to 16:00, Tuesday during 9:00 to 9:30, 11:30 to 12:00, 12:30 to 14:30, 15:30 to 16:00, Wednesday during 10:00 to 11:30, 12:00 to 14:00, 14:30 to 17:00; \n\nStephanie would like to avoid more meetings on Monday. Betty can not meet on Tuesday after 12:30. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_to_minutes(time_str):\n    h, m = map(int, time_str.split(':'))\n    return h * 60 + m\n\ndef minutes_to_time(mins):\n    h, m = divmod(mins, 60)\n    return f\"{h:02d}:{m:02d}\"\n\ndef merge_intervals(intervals):\n    if not intervals:\n        return []\n    intervals.sort(key=lambda x: x[0])\n    merged = [intervals[0]]\n    for current in intervals[1:]:\n        last = merged[-1]\n        if current[0] <= last[1]:\n            merged[-1] = (last[0], max(last[1], current[1]))\n        else:\n            merged.append(current)\n    return merged\n\ndef main():\n    stephanie_schedule = {\n        'Monday': [('9:30','10:00'), ('10:30','11:00'), ('11:30','12:00'), ('14:00','14:30')],\n        'Tuesday': [('12:00','13:00')],\n        'Wednesday': [('9:00','10:00'), ('13:00','14:00')]\n    }\n    \n    betty_schedule = {\n        'Monday': [('9:00','10:00'), ('11:00','11:30'), ('14:30','15:00'), ('15:30','16:00')],\n        'Tuesday': [('9:00','9:30'), ('11:30','12:00'), ('12:30','14:30'), ('15:30','16:00')],\n        'Wednesday': [('10:00','11:30'), ('12:00','14:00'), ('14:30','17:00')]\n    }\n    \n    work_start = time_to_minutes('9:00')\n    days = ['Tuesday', 'Wednesday', 'Monday']\n    meeting_duration = 60\n    \n    for day in days:\n        if day == 'Tuesday':\n            work_end = time_to_minutes('12:30')\n        else:\n            work_end = time_to_minutes('17:00')\n        \n        busy_intervals = []\n        for meet in stephanie_schedule.get(day, []):\n            s, e = meet\n            busy_intervals.append((time_to_minutes(s), time_to_minutes(e)))\n        for meet in betty_schedule.get(day, []):\n            s, e = meet\n            busy_intervals.append((time_to_minutes(s), time_to_minutes(e)))\n        \n        if not busy_intervals:\n            free_intervals = [(work_start, work_end)]\n        else:\n            merged = merge_intervals(busy_intervals)\n            free_intervals = []\n            current = work_start\n            for start, end in merged:\n                if current < start:\n                    free_intervals.append((current, start))\n                current = max(current, end)\n            if current < work_end:\n                free_intervals.append((current, work_end))\n        \n        for start, end in free_intervals:\n            if end - start >= meeting_duration:\n                meeting_start = start\n                meeting_end = start + meeting_duration\n                start_str = minutes_to_time(meeting_start)\n                end_str = minutes_to_time(meeting_end)\n                print(day)\n                print(f\"{start_str}:{end_str}\")\n                return\n    \n    # Fallback if no slot found (shouldn't happen per problem)\n    print(\"No suitable time found\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]