[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Ryan and Adam for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nRyan has meetings on Monday during 9:30 to 10:00, 11:00 to 12:00, 13:00 to 13:30, 15:30 to 16:00, Tuesday during 11:30 to 12:30, 15:30 to 16:00, Wednesday during 12:00 to 13:00, 15:30 to 16:00, 16:30 to 17:00; \nAdam is busy on Monday during 9:00 to 10:30, 11:00 to 13:30, 14:00 to 16:00, 16:30 to 17:00, Tuesday during 9:00 to 10:00, 10:30 to 15:30, 16:00 to 17:00, Wednesday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 14:30, 15:00 to 15:30, 16:00 to 16:30; \n\nRyan can not meet on Wednesday. Adam would like to avoid more meetings on Monday before 14:30. Tuesday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef min_to_time(m):\n    total_minutes = 9 * 60 + m\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    return f\"{hours}:{minutes:02d}\"\n\ndef main():\n    # Define the busy intervals in minutes from 9:00 for each participant and day\n    # Monday\n    ryan_monday = [(30, 60), (120, 180), (240, 270), (390, 420)]  # 9:30-10:00, 11:00-12:00, 13:00-13:30, 15:30-16:00\n    adam_monday = [(0, 90), (120, 270), (300, 420), (450, 480)]    # 9:00-10:30, 11:00-13:30, 14:00-16:00, 16:30-17:00\n    \n    # Tuesday\n    ryan_tuesday = [(150, 210), (390, 420)]                        # 11:30-12:30, 15:30-16:00\n    adam_tuesday = [(0, 60), (90, 390), (420, 480)]                # 9:00-10:00, 10:30-15:30, 16:00-17:00\n\n    # Days to check: Monday (only after 14:30) and Tuesday (all day)\n    days = [\n        (\"Monday\", 330, 480, ryan_monday + adam_monday),  # 14:30 = 330 minutes from 9:00\n        (\"Tuesday\", 0, 480, ryan_tuesday + adam_tuesday)\n    ]\n\n    for day, window_start, window_end, intervals in days:\n        # Merge overlapping busy intervals\n        intervals.sort(key=lambda x: x[0])\n        merged = []\n        for start, end in intervals:\n            if not merged:\n                merged.append((start, end))\n            else:\n                last_start, last_end = merged[-1]\n                if start <= last_end:\n                    merged[-1] = (last_start, max(last_end, end))\n                else:\n                    merged.append((start, end))\n        \n        # Compute free intervals within the window\n        free = []\n        current = window_start\n        for start, end in merged:\n            if end <= window_start:\n                continue\n            if start > window_end:\n                break\n            if start > current:\n                free.append((current, start))\n                current = end\n            else:\n                if end > current:\n                    current = end\n        if current < window_end:\n            free.append((current, window_end))\n        \n        # Find the first free interval with at least 30 minutes\n        for start, end in free:\n            if end - start >= 30:\n                meeting_start = start\n                meeting_end = meeting_start + 30\n                start_str = min_to_time(meeting_start)\n                end_str = min_to_time(meeting_end)\n                print(day)\n                print(f\"{start_str}:{end_str}\")\n                return\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]