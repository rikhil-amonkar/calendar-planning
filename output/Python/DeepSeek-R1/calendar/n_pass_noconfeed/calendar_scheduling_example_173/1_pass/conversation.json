[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Jacqueline, Harold, Arthur and Kelly for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nJacqueline has blocked their calendar on Monday during 9:00 to 9:30, 11:00 to 11:30, 12:30 to 13:00, 15:30 to 16:00; \nHarold is busy on Monday during 10:00 to 10:30, 13:00 to 13:30, 15:00 to 17:00; \nArthur has meetings on Monday during 9:00 to 9:30, 10:00 to 12:30, 14:30 to 15:00, 15:30 to 17:00; \nKelly is busy on Monday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 12:30, 14:00 to 15:00, 15:30 to 16:00; \n\nHarold do not want to meet on Monday after 13:00. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef format_time(minutes):\n    total_minutes = 9 * 60 + minutes\n    hours = total_minutes // 60\n    minutes_part = total_minutes % 60\n    return f\"{hours:02d}:{minutes_part:02d}\"\n\n# Define the busy intervals for each participant (in minutes relative to 9:00, as [start, end))\nbusy_intervals_jacqueline = [\n    (0, 30),    # 9:00-9:30\n    (120, 150), # 11:00-11:30\n    (210, 240), # 12:30-13:00\n]\n\nbusy_intervals_harold = [\n    (60, 90),   # 10:00-10:30\n]\n\nbusy_intervals_arthur = [\n    (0, 30),    # 9:00-9:30\n    (60, 210),  # 10:00-12:30\n]\n\nbusy_intervals_kelly = [\n    (0, 30),    # 9:00-9:30\n    (60, 120),  # 10:00-11:00\n    (150, 210), # 11:30-12:30\n]\n\n# Combine all participants' busy intervals\nall_busy = [\n    busy_intervals_jacqueline,\n    busy_intervals_harold,\n    busy_intervals_arthur,\n    busy_intervals_kelly\n]\n\nmeeting_duration = 30\nwork_start = 0\nconstraint_end = 240  # 13:00 relative to 9:00 (4 hours in minutes)\n\n# Candidate start times every 30 minutes from work_start to constraint_end - meeting_duration\ncandidate_starts = list(range(work_start, constraint_end - meeting_duration + 1, 30))\n\n# Check each candidate start time\nfor start in candidate_starts:\n    end = start + meeting_duration\n    found = True\n    for participant in all_busy:\n        for interval in participant:\n            # Check for overlap: [start, end) overlaps [interval_start, interval_end)\n            if start < interval[1] and interval[0] < end:\n                found = False\n                break\n        if not found:\n            break\n    if found:\n        start_str = format_time(start)\n        end_str = format_time(end)\n        print(\"Monday\")\n        print(f\"{start_str}:{end_str}\")\n        break\n```"
    }
]