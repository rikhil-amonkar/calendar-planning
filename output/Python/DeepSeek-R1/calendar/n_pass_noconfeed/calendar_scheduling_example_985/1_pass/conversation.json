[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Diane and Matthew for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday, Wednesday, Thursday or Friday. \n\nHere are the existing schedules for everyone during the days: \nDiane is busy on Monday during 12:00 to 12:30, 15:00 to 15:30, Tuesday during 10:00 to 11:00, 11:30 to 12:00, 12:30 to 13:00, 16:00 to 17:00, Wednesday during 9:00 to 9:30, 14:30 to 15:00, 16:30 to 17:00, Thursday during 15:30 to 16:30, Friday during 9:30 to 11:30, 14:30 to 15:00, 16:00 to 17:00; \nMatthew has meetings on Monday during 9:00 to 10:00, 10:30 to 17:00, Tuesday during 9:00 to 17:00, Wednesday during 9:00 to 11:00, 12:00 to 14:30, 16:00 to 17:00, Thursday during 9:00 to 16:00, Friday during 9:00 to 17:00; \n\nMatthew would rather not meet on Wednesday before 12:30. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_str_to_minutes(time_str):\n    h, m = time_str.split(':')\n    return int(h) * 60 + int(m)\n\ndef minutes_to_time_str(mins):\n    h = mins // 60\n    m = mins % 60\n    return f\"{h}:{m:02d}\"\n\ndef get_free_intervals(busy_intervals, work_start, work_end):\n    if not busy_intervals:\n        return [[work_start, work_end]]\n    sorted_busy = sorted(busy_intervals, key=lambda x: x[0])\n    free = []\n    current_start = work_start\n    for interval in sorted_busy:\n        s, e = interval\n        if current_start < s:\n            free.append([current_start, s])\n        current_start = max(current_start, e)\n    if current_start < work_end:\n        free.append([current_start, work_end])\n    return free\n\ndef main():\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    work_start = time_str_to_minutes(\"9:00\")  # 540 minutes\n    work_end = time_str_to_minutes(\"17:00\")   # 1020 minutes\n    wednesday_constraint = time_str_to_minutes(\"12:30\")  # 750 minutes\n\n    diane_busy = {\n        \"Monday\": [(\"12:00\", \"12:30\"), (\"15:00\", \"15:30\")],\n        \"Tuesday\": [(\"10:00\", \"11:00\"), (\"11:30\", \"12:00\"), (\"12:30\", \"13:00\"), (\"16:00\", \"17:00\")],\n        \"Wednesday\": [(\"9:00\", \"9:30\"), (\"14:30\", \"15:00\"), (\"16:30\", \"17:00\")],\n        \"Thursday\": [(\"15:30\", \"16:30\")],\n        \"Friday\": [(\"9:30\", \"11:30\"), (\"14:30\", \"15:00\"), (\"16:00\", \"17:00\")]\n    }\n\n    matthew_busy = {\n        \"Monday\": [(\"9:00\", \"10:00\"), (\"10:30\", \"17:00\")],\n        \"Tuesday\": [(\"9:00\", \"17:00\")],\n        \"Wednesday\": [(\"9:00\", \"11:00\"), (\"12:00\", \"14:30\"), (\"16:00\", \"17:00\")],\n        \"Thursday\": [(\"9:00\", \"16:00\")],\n        \"Friday\": [(\"9:00\", \"17:00\")]\n    }\n\n    # Convert busy times to minutes for each day\n    diane_busy_min = {}\n    matthew_busy_min = {}\n    for day in days:\n        diane_busy_min[day] = []\n        for s, e in diane_busy[day]:\n            s_min = time_str_to_minutes(s)\n            e_min = time_str_to_minutes(e)\n            diane_busy_min[day].append([s_min, e_min])\n        \n        matthew_busy_min[day] = []\n        for s, e in matthew_busy[day]:\n            s_min = time_str_to_minutes(s)\n            e_min = time_str_to_minutes(e)\n            matthew_busy_min[day].append([s_min, e_min])\n    \n    for day in days:\n        free_diane = get_free_intervals(diane_busy_min[day], work_start, work_end)\n        free_matthew = get_free_intervals(matthew_busy_min[day], work_start, work_end)\n        \n        common_free = []\n        for interval_d in free_diane:\n            for interval_m in free_matthew:\n                low = max(interval_d[0], interval_m[0])\n                high = min(interval_d[1], interval_m[1])\n                if low < high:\n                    common_free.append([low, high])\n        \n        for interval in common_free:\n            start, end = interval\n            if day == \"Wednesday\":\n                candidate_start = max(start, wednesday_constraint)\n            else:\n                candidate_start = start\n                \n            if candidate_start + 60 <= end:\n                meeting_start = candidate_start\n                meeting_end = candidate_start + 60\n                start_str = minutes_to_time_str(meeting_start)\n                end_str = minutes_to_time_str(meeting_end)\n                print(day)\n                print(f\"{start_str}:{end_str}\")\n                return\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]