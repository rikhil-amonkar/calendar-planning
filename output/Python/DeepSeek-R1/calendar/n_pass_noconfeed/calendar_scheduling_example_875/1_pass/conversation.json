[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Natalie and William for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday, Wednesday or Thursday. \n\nHere are the existing schedules for everyone during the days: \nNatalie is busy on Monday during 9:00 to 9:30, 10:00 to 12:00, 12:30 to 13:00, 14:00 to 14:30, 15:00 to 16:30, Tuesday during 9:00 to 9:30, 10:00 to 10:30, 12:30 to 14:00, 16:00 to 17:00, Wednesday during 11:00 to 11:30, 16:00 to 16:30, Thursday during 10:00 to 11:00, 11:30 to 15:00, 15:30 to 16:00, 16:30 to 17:00; \nWilliam is busy on Monday during 9:30 to 11:00, 11:30 to 17:00, Tuesday during 9:00 to 13:00, 13:30 to 16:00, Wednesday during 9:00 to 12:30, 13:00 to 14:30, 15:30 to 16:00, 16:30 to 17:00, Thursday during 9:00 to 10:30, 11:00 to 11:30, 12:00 to 12:30, 13:00 to 14:00, 15:00 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    base_minutes = 9 * 60  # 540 minutes (absolute for 9:00)\n    natalie_schedule_str = \"Monday during 9:00 to 9:30, 10:00 to 12:00, 12:30 to 13:00, 14:00 to 14:30, 15:00 to 16:30; Tuesday during 9:00 to 9:30, 10:00 to 10:30, 12:30 to 14:00, 16:00 to 17:00; Wednesday during 11:00 to 11:30, 16:00 to 16:30; Thursday during 10:00 to 11:00, 11:30 to 15:00, 15:30 to 16:00, 16:30 to 17:00\"\n    william_schedule_str = \"Monday during 9:30 to 11:00, 11:30 to 17:00; Tuesday during 9:00 to 13:00, 13:30 to 16:00; Wednesday during 9:00 to 12:30, 13:00 to 14:30, 15:30 to 16:00, 16:30 to 17:00; Thursday during 9:00 to 10:30, 11:00 to 11:30, 12:00 to 12:30, 13:00 to 14:00, 15:00 to 17:00\"\n\n    def parse_schedule(schedule_str):\n        schedule = {}\n        day_parts = schedule_str.split(';')\n        for part in day_parts:\n            part = part.strip()\n            if not part:\n                continue\n            if \"during\" not in part:\n                continue\n            day, intervals_str = part.split(\"during\", 1)\n            day = day.strip()\n            intervals_list = []\n            interval_strs = [s.strip() for s in intervals_str.split(',')]\n            for interval in interval_strs:\n                if not interval:\n                    continue\n                if \" to \" not in interval:\n                    continue\n                start_str, end_str = interval.split(\" to \", 1)\n                start_str = start_str.strip()\n                end_str = end_str.strip()\n                start_parts = start_str.split(':')\n                start_abs = int(start_parts[0]) * 60 + int(start_parts[1])\n                start_rel = start_abs - base_minutes\n                end_parts = end_str.split(':')\n                end_abs = int(end_parts[0]) * 60 + int(end_parts[1])\n                end_rel = end_abs - base_minutes\n                intervals_list.append((start_rel, end_rel))\n            schedule[day] = intervals_list\n        return schedule\n\n    natalie_schedule = parse_schedule(natalie_schedule_str)\n    william_schedule = parse_schedule(william_schedule_str)\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n\n    def compute_free_intervals(busy_intervals):\n        if not busy_intervals:\n            return [(0, 480)]\n        busy_sorted = sorted(busy_intervals, key=lambda x: x[0])\n        free = []\n        current = 0\n        for start, end in busy_sorted:\n            if current < start:\n                free.append((current, start))\n            current = max(current, end)\n        if current < 480:\n            free.append((current, 480))\n        return free\n\n    for day in days:\n        natalie_busy = natalie_schedule.get(day, [])\n        william_busy = william_schedule.get(day, [])\n        natalie_free = compute_free_intervals(natalie_busy)\n        william_free = compute_free_intervals(william_busy)\n        common_free = []\n        i = j = 0\n        while i < len(natalie_free) and j < len(william_free):\n            a_low, a_high = natalie_free[i]\n            b_low, b_high = william_free[j]\n            low = max(a_low, b_low)\n            high = min(a_high, b_high)\n            if low < high:\n                common_free.append((low, high))\n            if a_high < b_high:\n                i += 1\n            else:\n                j += 1\n        for start, end in common_free:\n            if end - start >= 60:\n                meeting_start = start\n                meeting_end = start + 60\n                start_abs = meeting_start + base_minutes\n                end_abs = meeting_end + base_minutes\n                start_hh = start_abs // 60\n                start_mm = start_abs % 60\n                end_hh = end_abs // 60\n                end_mm = end_abs % 60\n                time_str = f\"{start_hh:02d}:{start_mm:02d}:{end_hh:02d}:{end_mm:02d}\"\n                print(day)\n                print(time_str)\n                return\n    print(\"No meeting time found\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]