[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Danielle, Bruce and Eric for one hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nDanielle has meetings on Monday during 9:00 to 10:00, 10:30 to 11:00, 14:30 to 15:00, 15:30 to 16:00, 16:30 to 17:00; \nBruce has meetings on Monday during 11:00 to 11:30, 12:30 to 13:00, 14:00 to 14:30, 15:30 to 16:00; \nEric has blocked their calendar on Monday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 13:00, 14:30 to 15:30; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    # Work hours: 9:00 to 17:00 (converted to minutes from 9:00)\n    work_start = 0      # 9:00\n    work_end = 480      # 17:00 (8 hours * 60 minutes)\n    meeting_duration = 60  # 60 minutes\n\n    # Collect all busy intervals in minutes (relative to 9:00)\n    busy_intervals = []\n\n    # Danielle's meetings\n    busy_intervals.append((0, 60))     # 9:00-10:00\n    busy_intervals.append((90, 120))    # 10:30-11:00\n    busy_intervals.append((330, 360))   # 14:30-15:00\n    busy_intervals.append((390, 420))   # 15:30-16:00\n    busy_intervals.append((450, 480))   # 16:30-17:00\n\n    # Bruce's meetings\n    busy_intervals.append((120, 150))   # 11:00-11:30\n    busy_intervals.append((210, 240))   # 12:30-13:00\n    busy_intervals.append((300, 330))   # 14:00-14:30\n    busy_intervals.append((390, 420))   # 15:30-16:00\n\n    # Eric's meetings\n    busy_intervals.append((0, 30))      # 9:00-9:30\n    busy_intervals.append((60, 120))    # 10:00-11:00\n    busy_intervals.append((150, 240))   # 11:30-13:00\n    busy_intervals.append((330, 390))   # 14:30-15:30\n\n    # Sort busy intervals by start time\n    busy_intervals.sort(key=lambda x: x[0])\n\n    # Merge overlapping or adjacent intervals\n    merged_busy = []\n    if busy_intervals:\n        merged_busy = [busy_intervals[0]]\n        for i in range(1, len(busy_intervals)):\n            current_start, current_end = busy_intervals[i]\n            last_start, last_end = merged_busy[-1]\n            if current_start <= last_end:\n                merged_busy[-1] = (last_start, max(last_end, current_end))\n            else:\n                merged_busy.append((current_start, current_end))\n\n    # Find free intervals within work hours\n    free_intervals = []\n    current = work_start\n    for start_busy, end_busy in merged_busy:\n        if current < start_busy:\n            free_intervals.append((current, start_busy))\n        current = end_busy\n    if current < work_end:\n        free_intervals.append((current, work_end))\n\n    # Find the first free interval that can fit the meeting\n    meeting_start = None\n    for start_free, end_free in free_intervals:\n        if end_free - start_free >= meeting_duration:\n            meeting_start = start_free\n            break\n\n    # Convert meeting start and end from minutes to time strings\n    def minutes_to_time(total_minutes):\n        hours = 9 + total_minutes // 60\n        minutes = total_minutes % 60\n        return f\"{hours:02d}:{minutes:02d}\"\n\n    meeting_end = meeting_start + meeting_duration\n    start_str = minutes_to_time(meeting_start)\n    end_str = minutes_to_time(meeting_end)\n\n    # Output day and time range in HH:MM:HH:MM format\n    print(\"Monday\")\n    print(f\"{start_str}:{end_str}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]