[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Shirley and Albert for half an hour between the work hours of 9:00 to 17:00 on either Monday or Tuesday. \n\nHere are the existing schedules for everyone during the days: \nShirley has blocked their calendar on Monday during 10:30 to 11:00, 12:00 to 12:30, 16:00 to 16:30, Tuesday during 9:30 to 10:00; \nAlbert is busy on Monday during 9:00 to 17:00, Tuesday during 9:30 to 11:00, 11:30 to 12:30, 13:00 to 16:00, 16:30 to 17:00; \n\nShirley would rather not meet on Tuesday after 10:30. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    # Define work hours (9:00 to 17:00) in minutes\n    work_start = 9 * 60   # 540 minutes (9:00)\n    work_end = 17 * 60    # 1020 minutes (17:00)\n    meeting_duration = 30  # 30 minutes\n\n    # Busy intervals for each participant per day in minutes\n    busy_times = {\n        'Monday': {\n            'Shirley': [(630, 660), (720, 750), (960, 990)],\n            'Albert': [(540, 1020)]\n        },\n        'Tuesday': {\n            'Shirley': [(570, 600)],\n            'Albert': [(570, 660), (690, 750), (780, 960), (990, 1020)]\n        }\n    }\n    \n    days = ['Monday', 'Tuesday']\n    tuesday_cutoff = 10 * 60 + 30  # 10:30 in minutes (630)\n    found = False\n    result_day = None\n    result_start = None\n\n    for day in days:\n        # Combine all busy intervals for the day\n        all_busy = []\n        for intervals in busy_times[day].values():\n            all_busy.extend(intervals)\n        \n        # Sort busy intervals by start time\n        all_busy.sort(key=lambda x: x[0])\n        \n        # Merge overlapping intervals\n        merged = []\n        for start, end in all_busy:\n            if not merged:\n                merged.append((start, end))\n            else:\n                last_start, last_end = merged[-1]\n                if start <= last_end:\n                    merged[-1] = (last_start, max(last_end, end))\n                else:\n                    merged.append((start, end))\n        \n        # Calculate free intervals within work hours\n        free_intervals = []\n        current = work_start\n        for start, end in merged:\n            if current < start:\n                free_intervals.append((current, start))\n            current = end\n        if current < work_end:\n            free_intervals.append((current, work_end))\n        \n        # Check for a suitable meeting slot\n        if day == 'Tuesday':\n            # First pass: try to find a slot ending by 10:30 (preference)\n            for start_free, end_free in free_intervals:\n                if end_free - start_free >= meeting_duration:\n                    if start_free + meeting_duration <= tuesday_cutoff:\n                        result_day = day\n                        result_start = start_free\n                        found = True\n                        break\n            if found:\n                break\n            # Second pass: any available slot on Tuesday\n            for start_free, end_free in free_intervals:\n                if end_free - start_free >= meeting_duration:\n                    result_day = day\n                    result_start = start_free\n                    found = True\n                    break\n            if found:\n                break\n        else:  # Monday\n            for start_free, end_free in free_intervals:\n                if end_free - start_free >= meeting_duration:\n                    result_day = day\n                    result_start = start_free\n                    found = True\n                    break\n            if found:\n                break\n    \n    # Format the result\n    def format_minutes(m):\n        h = m // 60\n        m = m % 60\n        return f\"{h:02d}:{m:02d}\"\n    \n    start_time = format_minutes(result_start)\n    end_time = format_minutes(result_start + meeting_duration)\n    time_range_str = f\"{start_time}:{end_time}\"\n    print(f\"{result_day} {time_range_str}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]