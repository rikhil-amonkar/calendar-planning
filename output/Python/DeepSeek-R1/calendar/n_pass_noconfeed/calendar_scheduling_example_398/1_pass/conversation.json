[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Doris, Theresa, Christian, Terry, Carolyn and Kyle for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nDoris has blocked their calendar on Monday during 9:00 to 11:00, 13:30 to 14:00, 16:00 to 16:30; \nTheresa has blocked their calendar on Monday during 10:00 to 12:00; \nChristianhas no meetings the whole day.\nTerry has blocked their calendar on Monday during 9:30 to 10:00, 11:30 to 12:00, 12:30 to 13:00, 13:30 to 14:00, 14:30 to 15:00, 15:30 to 17:00; \nCarolyn has blocked their calendar on Monday during 9:00 to 10:30, 11:00 to 11:30, 12:00 to 13:00, 13:30 to 14:30, 15:00 to 17:00; \nKyle has blocked their calendar on Monday during 9:00 to 9:30, 11:30 to 12:00, 12:30 to 13:00, 14:30 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    # Convert time string to minutes from 9:00\n    def time_str_to_minutes(time_str):\n        h, m = time_str.split(':')\n        return (int(h) - 9) * 60 + int(m)\n    \n    # Collect all busy intervals in minutes (from 9:00 as 0 to 17:00 as 480)\n    busy_intervals = []\n    \n    # Doris\n    busy_intervals.append((time_str_to_minutes(\"9:00\"), time_str_to_minutes(\"11:00\")))\n    busy_intervals.append((time_str_to_minutes(\"13:30\"), time_str_to_minutes(\"14:00\")))\n    busy_intervals.append((time_str_to_minutes(\"16:00\"), time_str_to_minutes(\"16:30\")))\n    \n    # Theresa\n    busy_intervals.append((time_str_to_minutes(\"10:00\"), time_str_to_minutes(\"12:00\")))\n    \n    # Terry\n    busy_intervals.append((time_str_to_minutes(\"9:30\"), time_str_to_minutes(\"10:00\")))\n    busy_intervals.append((time_str_to_minutes(\"11:30\"), time_str_to_minutes(\"12:00\")))\n    busy_intervals.append((time_str_to_minutes(\"12:30\"), time_str_to_minutes(\"13:00\")))\n    busy_intervals.append((time_str_to_minutes(\"13:30\"), time_str_to_minutes(\"14:00\")))\n    busy_intervals.append((time_str_to_minutes(\"14:30\"), time_str_to_minutes(\"15:00\")))\n    busy_intervals.append((time_str_to_minutes(\"15:30\"), time_str_to_minutes(\"17:00\")))\n    \n    # Carolyn\n    busy_intervals.append((time_str_to_minutes(\"9:00\"), time_str_to_minutes(\"10:30\")))\n    busy_intervals.append((time_str_to_minutes(\"11:00\"), time_str_to_minutes(\"11:30\")))\n    busy_intervals.append((time_str_to_minutes(\"12:00\"), time_str_to_minutes(\"13:00\")))\n    busy_intervals.append((time_str_to_minutes(\"13:30\"), time_str_to_minutes(\"14:30\")))\n    busy_intervals.append((time_str_to_minutes(\"15:00\"), time_str_to_minutes(\"17:00\")))\n    \n    # Kyle\n    busy_intervals.append((time_str_to_minutes(\"9:00\"), time_str_to_minutes(\"9:30\")))\n    busy_intervals.append((time_str_to_minutes(\"11:30\"), time_str_to_minutes(\"12:00\")))\n    busy_intervals.append((time_str_to_minutes(\"12:30\"), time_str_to_minutes(\"13:00\")))\n    busy_intervals.append((time_str_to_minutes(\"14:30\"), time_str_to_minutes(\"17:00\")))\n    \n    # Sort busy intervals by start time\n    busy_intervals.sort(key=lambda x: x[0])\n    \n    # Merge overlapping or adjacent intervals\n    merged_busy = []\n    if busy_intervals:\n        current_start, current_end = busy_intervals[0]\n        for s, e in busy_intervals[1:]:\n            if s <= current_end:\n                current_end = max(current_end, e)\n            else:\n                merged_busy.append((current_start, current_end))\n                current_start, current_end = s, e\n        merged_busy.append((current_start, current_end))\n    \n    # Find free intervals within 9:00 (0 min) to 17:00 (480 min)\n    free_intervals = []\n    # Before first busy interval\n    if not merged_busy:\n        free_intervals.append((0, 480))\n    else:\n        first_start = merged_busy[0][0]\n        if first_start > 0:\n            free_intervals.append((0, first_start))\n        \n        # Between busy intervals\n        for i in range(len(merged_busy) - 1):\n            current_end = merged_busy[i][1]\n            next_start = merged_busy[i+1][0]\n            if next_start > current_end:\n                free_intervals.append((current_end, next_start))\n        \n        # After last busy interval\n        last_end = merged_busy[-1][1]\n        if last_end < 480:\n            free_intervals.append((last_end, 480))\n    \n    # Find first free interval of at least 30 minutes\n    meeting_start = None\n    for start, end in free_intervals:\n        if end - start >= 30:\n            meeting_start = start\n            break\n    \n    # Convert meeting start and end (30 min later) to time strings\n    total_minutes = meeting_start\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    start_hour = 9 + hours\n    start_minute = minutes\n    \n    total_minutes_end = meeting_start + 30\n    hours_end = total_minutes_end // 60\n    minutes_end = total_minutes_end % 60\n    end_hour = 9 + hours_end\n    end_minute = minutes_end\n    \n    # Format as HH:MM:HH:MM\n    print(f\"Monday {start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]