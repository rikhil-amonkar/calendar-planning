[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Martha and Beverly for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nMartha has blocked their calendar on Monday during 16:00 to 17:00, Tuesday during 15:00 to 15:30, Wednesday during 10:00 to 11:00, 14:00 to 14:30; \nBeverly has blocked their calendar on Monday during 9:00 to 13:30, 14:00 to 17:00, Tuesday during 9:00 to 17:00, Wednesday during 9:30 to 15:30, 16:30 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_str_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time_str(total_minutes):\n    hours = total_minutes // 60\n    minutes = total_minutes % 60\n    return f\"{hours:02d}:{minutes:02d}\"\n\ndef merge_intervals(intervals):\n    if not intervals:\n        return []\n    sorted_intervals = sorted(intervals, key=lambda x: x[0])\n    merged = []\n    current_start, current_end = sorted_intervals[0]\n    for s, e in sorted_intervals[1:]:\n        if s <= current_end:\n            current_end = max(current_end, e)\n        else:\n            merged.append((current_start, current_end))\n            current_start, current_end = s, e\n    merged.append((current_start, current_end))\n    return merged\n\ndef invert_intervals(work_start, work_end, busy_intervals):\n    merged_busy = merge_intervals(busy_intervals)\n    free = []\n    if not merged_busy:\n        return [(work_start, work_end)]\n    if work_start < merged_busy[0][0]:\n        free.append((work_start, merged_busy[0][0]))\n    for i in range(1, len(merged_busy)):\n        free.append((merged_busy[i-1][1], merged_busy[i][0]))\n    if merged_busy[-1][1] < work_end:\n        free.append((merged_busy[-1][1], work_end))\n    return free\n\ndef find_common_free_intervals(free1, free2):\n    common_free = []\n    i = j = 0\n    while i < len(free1) and j < len(free2):\n        start = max(free1[i][0], free2[j][0])\n        end = min(free1[i][1], free2[j][1])\n        if start < end:\n            common_free.append((start, end))\n        if free1[i][1] < free2[j][1]:\n            i += 1\n        else:\n            j += 1\n    return common_free\n\ndef main():\n    work_start_min = time_str_to_minutes(\"9:00\")\n    work_end_min = time_str_to_minutes(\"17:00\")\n    meeting_duration = 60  # minutes\n    \n    # Define the schedule\n    schedule = {\n        'Martha': {\n            'Monday': [(\"16:00\", \"17:00\")],\n            'Tuesday': [(\"15:00\", \"15:30\")],\n            'Wednesday': [(\"10:00\", \"11:00\"), (\"14:00\", \"14:30\")]\n        },\n        'Beverly': {\n            'Monday': [(\"9:00\", \"13:30\"), (\"14:00\", \"17:00\")],\n            'Tuesday': [(\"9:00\", \"17:00\")],\n            'Wednesday': [(\"9:30\", \"15:30\"), (\"16:30\", \"17:00\")]\n        }\n    }\n    \n    days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    for day in days:\n        # Get busy intervals for Martha and convert to minutes\n        martha_busy = []\n        for interval in schedule['Martha'][day]:\n            start_min = time_str_to_minutes(interval[0])\n            end_min = time_str_to_minutes(interval[1])\n            martha_busy.append((start_min, end_min))\n        \n        # Get busy intervals for Beverly and convert to minutes\n        beverly_busy = []\n        for interval in schedule['Beverly'][day]:\n            start_min = time_str_to_minutes(interval[0])\n            end_min = time_str_to_minutes(interval[1])\n            beverly_busy.append((start_min, end_min))\n        \n        # Calculate free intervals for each\n        martha_free = invert_intervals(work_start_min, work_end_min, martha_busy)\n        beverly_free = invert_intervals(work_start_min, work_end_min, beverly_busy)\n        \n        # Find common free intervals\n        common_free = find_common_free_intervals(martha_free, beverly_free)\n        \n        # Check for a slot that fits the meeting duration\n        for start, end in common_free:\n            if end - start >= meeting_duration:\n                meeting_start = start\n                meeting_end = meeting_start + meeting_duration\n                start_str = minutes_to_time_str(meeting_start)\n                end_str = minutes_to_time_str(meeting_end)\n                print(f\"{day}:{start_str}:{end_str}\")\n                return\n    \n    # If no slot is found (though problem states there is a solution)\n    print(\"No suitable time found\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]