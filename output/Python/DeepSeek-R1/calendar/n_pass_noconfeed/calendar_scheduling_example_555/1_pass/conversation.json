[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Evelyn and Randy for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nEvelynhas no meetings the whole day.\nRandy has blocked their calendar on Monday during 9:00 to 10:30, 11:00 to 15:30, 16:00 to 17:00; \n\nEvelyn do not want to meet on Monday after 13:00. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef min_to_time_str(minutes):\n    total_minutes = minutes\n    hour = 9 + total_minutes // 60\n    minute = total_minutes % 60\n    return f\"{hour:02d}:{minute:02d}\"\n\n# Define available intervals (in minutes from 9:00, [start, end))\nevelyn_available = [(0, 240)]  # 9:00 to 13:00 (exclusive)\nrandy_available = [(90, 120), (390, 420)]  # 10:30-11:00 and 15:30-16:00\n\nduration = 30  # Meeting duration in minutes\n\nfound = False\nslot_start = None\nfor r_int in randy_available:\n    for e_int in evelyn_available:\n        start_overlap = max(r_int[0], e_int[0])\n        end_overlap = min(r_int[1], e_int[1])\n        if end_overlap - start_overlap >= duration:\n            slot_start = start_overlap\n            found = True\n            break\n    if found:\n        break\n\nif found:\n    start_str = min_to_time_str(slot_start)\n    end_str = min_to_time_str(slot_start + duration)\n    time_output = start_str + \":\" + end_str\n    print(\"Monday\")\n    print(time_output)\nelse:\n    print(\"No suitable time found.\")\n```"
    }
]