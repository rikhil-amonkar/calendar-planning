[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Olivia, Anna, Virginia and Paul for one hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nOlivia has blocked their calendar on Monday during 12:30 to 13:30, 14:30 to 15:00, 16:30 to 17:00; \nAnnahas no meetings the whole day.\nVirginia has blocked their calendar on Monday during 9:00 to 10:00, 11:30 to 16:00, 16:30 to 17:00; \nPaul has meetings on Monday during 9:00 to 9:30, 11:00 to 11:30, 13:00 to 14:00, 14:30 to 16:00, 16:30 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_to_minutes(time_str):\n    parts = time_str.split(':')\n    hour = int(parts[0])\n    minute = int(parts[1])\n    return (hour - 9) * 60 + minute\n\ndef minutes_to_time(minutes):\n    total_minutes = 9 * 60 + minutes\n    hour = total_minutes // 60\n    minute = total_minutes % 60\n    return hour, minute\n\ndef compute_free_intervals(busy_intervals, work_start, work_end):\n    if not busy_intervals:\n        return [(work_start, work_end)]\n    sorted_busy = sorted(busy_intervals, key=lambda x: x[0])\n    merged = []\n    start_curr, end_curr = sorted_busy[0]\n    for i in range(1, len(sorted_busy)):\n        s, e = sorted_busy[i]\n        if s <= end_curr:\n            if e > end_curr:\n                end_curr = e\n        else:\n            merged.append((start_curr, end_curr))\n            start_curr, end_curr = s, e\n    merged.append((start_curr, end_curr))\n    free = []\n    current = work_start\n    for interval in merged:\n        s, e = interval\n        if current < s:\n            free.append((current, s))\n        current = e\n    if current < work_end:\n        free.append((current, work_end))\n    return free\n\ndef intersect_intervals(intervals1, intervals2):\n    i = j = 0\n    result = []\n    while i < len(intervals1) and j < len(intervals2):\n        low = max(intervals1[i][0], intervals2[j][0])\n        high = min(intervals1[i][1], intervals2[j][1])\n        if low < high:\n            result.append((low, high))\n        if intervals1[i][1] < intervals2[j][1]:\n            i += 1\n        else:\n            j += 1\n    return result\n\ndef main():\n    work_start = 0\n    work_end = 480\n    olivia_busy = [\n        (time_to_minutes(\"12:30\"), time_to_minutes(\"13:30\")),\n        (time_to_minutes(\"14:30\"), time_to_minutes(\"15:00\")),\n        (time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\"))\n    ]\n    anna_busy = []\n    virginia_busy = [\n        (time_to_minutes(\"9:00\"), time_to_minutes(\"10:00\")),\n        (time_to_minutes(\"11:30\"), time_to_minutes(\"16:00\")),\n        (time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\"))\n    ]\n    paul_busy = [\n        (time_to_minutes(\"9:00\"), time_to_minutes(\"9:30\")),\n        (time_to_minutes(\"11:00\"), time_to_minutes(\"11:30\")),\n        (time_to_minutes(\"13:00\"), time_to_minutes(\"14:00\")),\n        (time_to_minutes(\"14:30\"), time_to_minutes(\"16:00\")),\n        (time_to_minutes(\"16:30\"), time_to_minutes(\"17:00\"))\n    ]\n    persons_busy = [olivia_busy, anna_busy, virginia_busy, paul_busy]\n    persons_free = []\n    for busy in persons_busy:\n        free_intervals = compute_free_intervals(busy, work_start, work_end)\n        persons_free.append(free_intervals)\n    common = persons_free[0]\n    for i in range(1, len(persons_free)):\n        common = intersect_intervals(common, persons_free[i])\n    meeting_start = None\n    for interval in common:\n        start, end = interval\n        if end - start >= 60:\n            meeting_start = start\n            break\n    if meeting_start is None:\n        return\n    start_hour, start_minute = minutes_to_time(meeting_start)\n    end_hour, end_minute = minutes_to_time(meeting_start + 60)\n    print(\"Monday\")\n    print(f\"{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]