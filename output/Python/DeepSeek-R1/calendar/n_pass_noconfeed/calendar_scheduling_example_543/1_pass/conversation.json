[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for James and John for one hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nJames has blocked their calendar on Monday during 11:30 to 12:00, 14:30 to 15:00; \nJohn is busy on Monday during 9:30 to 11:00, 11:30 to 12:00, 12:30 to 13:30, 14:30 to 16:30; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    # Work day: 9:00 to 17:00 (480 minutes from 9:00)\n    work_start = 0\n    work_end = 480  # 8 hours * 60 minutes\n    meeting_duration = 60  # 1 hour in minutes\n\n    # Convert time string to minutes since 9:00\n    def time_to_minutes(time_str):\n        h, m = map(int, time_str.split(':'))\n        return (h - 9) * 60 + m\n\n    # Convert minutes since 9:00 back to \"HH:MM\" format\n    def minutes_to_time(minutes):\n        total_minutes = 9 * 60 + minutes\n        h = total_minutes // 60\n        m = total_minutes % 60\n        return f\"{h:02d}:{m:02d}\"\n\n    # Busy intervals for James and John\n    james_busy = [\"11:30-12:00\", \"14:30-15:00\"]\n    john_busy = [\"9:30-11:00\", \"11:30-12:00\", \"12:30-13:30\", \"14:30-16:30\"]\n    \n    # Parse and convert busy intervals to minutes\n    intervals = []\n    for busy_str in james_busy:\n        start_str, end_str = busy_str.split('-')\n        start_min = time_to_minutes(start_str)\n        end_min = time_to_minutes(end_str)\n        intervals.append((start_min, end_min))\n    \n    for busy_str in john_busy:\n        start_str, end_str = busy_str.split('-')\n        start_min = time_to_minutes(start_str)\n        end_min = time_to_minutes(end_str)\n        intervals.append((start_min, end_min))\n    \n    # Sort intervals by start time\n    intervals.sort(key=lambda x: x[0])\n    \n    # Merge overlapping or adjacent intervals\n    merged = []\n    for start, end in intervals:\n        if not merged:\n            merged.append([start, end])\n        else:\n            last = merged[-1]\n            if start <= last[1]:\n                last[1] = max(last[1], end)\n            else:\n                merged.append([start, end])\n    \n    # Find free intervals\n    free_intervals = []\n    current_start = work_start\n    \n    for start, end in merged:\n        if start > current_start:\n            free_intervals.append((current_start, start))\n        current_start = max(current_start, end)\n    \n    if current_start < work_end:\n        free_intervals.append((current_start, work_end))\n    \n    # Find first free interval that can fit the meeting\n    meeting_time = None\n    for start, end in free_intervals:\n        if end - start >= meeting_duration:\n            meeting_start = start\n            meeting_end = start + meeting_duration\n            meeting_time = (meeting_start, meeting_end)\n            break\n    \n    # Convert meeting time to string and output\n    day = \"Monday\"\n    if meeting_time:\n        start_str = minutes_to_time(meeting_time[0])\n        end_str = minutes_to_time(meeting_time[1])\n        print(day)\n        print(f\"{start_str}:{end_str}\")\n    else:\n        print(\"No suitable time found\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]