[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Bryan and Nicholas for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday, Wednesday, Thursday or Friday. \n\nHere are the existing schedules for everyone during the days: \nBryan has meetings on Thursday during 9:30 to 10:00, 12:30 to 13:00, Friday during 10:30 to 11:00, 14:00 to 14:30; \nNicholas has meetings on Monday during 11:30 to 12:00, 13:00 to 15:30, Tuesday during 9:00 to 9:30, 11:00 to 13:30, 14:00 to 16:30, Wednesday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 13:30, 14:00 to 14:30, 15:00 to 16:30, Thursday during 10:30 to 11:30, 12:00 to 12:30, 15:00 to 15:30, 16:30 to 17:00, Friday during 9:00 to 10:30, 11:00 to 12:00, 12:30 to 14:30, 15:30 to 16:00, 16:30 to 17:00; \n\nBryan would like to avoid more meetings on Tuesday. Nicholas would rather not meet on Monday. Thursday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    # Convert time to minutes from start of day (9:00 AM = 540 minutes, 5:00 PM = 1020 minutes)\n    work_start = 9 * 60\n    work_end = 17 * 60\n    meeting_duration = 60  # 60 minutes\n\n    # Define the schedules for each participant per day (busy intervals as [start, end) in minutes)\n    schedules = {\n        'Bryan': {\n            'Wednesday': [],\n            'Friday': [(10*60+30, 11*60), (14*60, 14*60+30)]  # 10:30-11:00, 14:00-14:30\n        },\n        'Nicholas': {\n            'Wednesday': [\n                (9*60, 9*60+30),        # 9:00-9:30\n                (10*60, 11*60),          # 10:00-11:00\n                (11*60+30, 13*60+30),    # 11:30-13:30\n                (14*60, 14*60+30),       # 14:00-14:30\n                (15*60, 16*60+30)        # 15:00-16:30\n            ],\n            'Friday': [\n                (9*60, 10*60+30),       # 9:00-10:30\n                (11*60, 12*60),         # 11:00-12:00\n                (12*60+30, 14*60+30),   # 12:30-14:30\n                (15*60+30, 16*60),      # 15:30-16:00\n                (16*60+30, 17*60)       # 16:30-17:00\n            ]\n        }\n    }\n\n    # Days to consider (avoid Tuesday for Bryan, Monday/Thursday for Nicholas -> only Wed/Fri)\n    days = ['Wednesday', 'Friday']\n\n    # Iterate through each day to find a slot\n    for day in days:\n        busy_intervals = []\n        # Collect all busy intervals for the day from both participants\n        for participant in schedules:\n            busy_intervals.extend(schedules[participant][day])\n        \n        # If no meetings, the entire day is free\n        if not busy_intervals:\n            # Check if the work day has enough time\n            if work_end - work_start >= meeting_duration:\n                start_min = work_start\n                end_min = work_start + meeting_duration\n                # Format and output\n                print(day)\n                print(f\"{start_min//60:02d}:{start_min%60:02d}:{end_min//60:02d}:{end_min%60:02d}\")\n                return\n        \n        # Sort busy intervals by start time\n        busy_intervals.sort()\n        merged = []\n        start_curr, end_curr = busy_intervals[0]\n        # Merge overlapping or adjacent intervals\n        for i in range(1, len(busy_intervals)):\n            s, e = busy_intervals[i]\n            if s <= end_curr:  # Overlapping or adjacent\n                if e > end_curr:\n                    end_curr = e\n            else:\n                merged.append((start_curr, end_curr))\n                start_curr, end_curr = s, e\n        merged.append((start_curr, end_curr))\n        \n        # Find free intervals\n        free_intervals = []\n        current = work_start\n        for interval in merged:\n            s, e = interval\n            if current < s:  # Free interval before this busy period\n                free_intervals.append((current, s))\n            current = max(current, e)\n        if current < work_end:  # Free interval after last busy period\n            free_intervals.append((current, work_end))\n        \n        # Check each free interval for sufficient duration\n        for interval in free_intervals:\n            start_free, end_free = interval\n            duration = end_free - start_free\n            if duration >= meeting_duration:\n                start_min = start_free\n                end_min = start_free + meeting_duration\n                # Format and output\n                print(day)\n                print(f\"{start_min//60:02d}:{start_min%60:02d}:{end_min//60:02d}:{end_min%60:02d}\")\n                return\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]