[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for John and Jennifer for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nJohnhas no meetings the whole week.\nJennifer has meetings on Monday during 9:00 to 11:00, 11:30 to 13:00, 13:30 to 14:30, 15:00 to 17:00, Tuesday during 9:00 to 11:30, 12:00 to 17:00, Wednesday during 9:00 to 11:30, 12:00 to 12:30, 13:00 to 14:00, 14:30 to 16:00, 16:30 to 17:00; \n\nJohn would like to avoid more meetings on Monday after 14:30. Tuesday. Wednesday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef main():\n    # Define work hours in minutes (9:00 AM to 5:00 PM)\n    work_start = 540   # 9:00 in minutes\n    work_end = 1020    # 17:00 in minutes\n\n    # Jennifer's busy intervals in minutes (start inclusive, end exclusive)\n    jennifer_busy = {\n        'Monday': [(540, 660), (690, 780), (810, 870), (900, 1020)],\n        'Tuesday': [(540, 690), (720, 1020)],\n        'Wednesday': [(540, 690), (720, 750), (780, 840), (870, 960), (990, 1020)]\n    }\n    \n    # Days to consider in order\n    days = ['Monday', 'Tuesday', 'Wednesday']\n    \n    # Meeting duration in minutes\n    meeting_duration = 30\n    \n    # Monday constraint: meeting must end by 14:30 (870 minutes)\n    monday_constraint = 870\n    \n    found = False\n    result_day = None\n    meeting_start_minutes = None\n    meeting_end_minutes = None\n\n    for day in days:\n        busy_intervals = jennifer_busy[day]\n        # Sort intervals by start time\n        busy_intervals_sorted = sorted(busy_intervals, key=lambda x: x[0])\n        \n        # Compute free gaps\n        current = work_start\n        gaps = []\n        for interval in busy_intervals_sorted:\n            start_interval, end_interval = interval\n            if current < start_interval:\n                gaps.append((current, start_interval))\n            current = max(current, end_interval)\n        if current < work_end:\n            gaps.append((current, work_end))\n            \n        # Check each gap for availability\n        for gap in gaps:\n            start_gap, end_gap = gap\n            gap_duration = end_gap - start_gap\n            if gap_duration >= meeting_duration:\n                candidate_start = start_gap\n                candidate_end = candidate_start + meeting_duration\n                # Skip if on Monday and violates the end constraint\n                if day == 'Monday' and candidate_end > monday_constraint:\n                    continue\n                # Valid candidate found\n                result_day = day\n                meeting_start_minutes = candidate_start\n                meeting_end_minutes = candidate_end\n                found = True\n                break  # Break inner loop\n        if found:\n            break  # Break outer loop\n\n    # Format and output result\n    if found:\n        # Convert minutes to HH:MM components\n        start_hour = meeting_start_minutes // 60\n        start_minute = meeting_start_minutes % 60\n        end_hour = meeting_end_minutes // 60\n        end_minute = meeting_end_minutes % 60\n        \n        # Format as two-digit strings\n        time_str = f\"{start_hour:02d}:{start_minute:02d}:{end_hour:02d}:{end_minute:02d}\"\n        print(result_day)\n        print(\"{\" + time_str + \"}\")\n    else:\n        # Fallback (though problem states a solution exists)\n        print(\"No valid time found\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]