[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Arthur and Michael for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nArthur has meetings on Monday during 11:00 to 11:30, 13:30 to 14:00, 15:00 to 15:30, Tuesday during 13:00 to 13:30, 16:00 to 16:30, Wednesday during 10:00 to 10:30, 11:00 to 11:30, 12:00 to 12:30, 14:00 to 14:30, 16:00 to 16:30; \nMichael has meetings on Monday during 9:00 to 12:00, 12:30 to 13:00, 14:00 to 14:30, 15:00 to 17:00, Tuesday during 9:30 to 11:30, 12:00 to 13:30, 14:00 to 15:30, Wednesday during 10:00 to 12:30, 13:00 to 13:30; \n\nArthur can not meet on Tuesday. The group would like to meet at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_to_minutes(time_str):\n    parts = time_str.split(':')\n    return int(parts[0]) * 60 + int(parts[1])\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours}:{mins:02d}\"\n\ndef is_free(slot_start, slot_end, meetings):\n    for meet_start, meet_end in meetings:\n        if slot_start < meet_end and slot_end > meet_start:\n            return False\n    return True\n\n# Define schedules in minutes\narthur_schedule = {\n    'Monday': [\n        (time_to_minutes('11:00'), time_to_minutes('11:30')),\n        (time_to_minutes('13:30'), time_to_minutes('14:00')),\n        (time_to_minutes('15:00'), time_to_minutes('15:30'))\n    ],\n    'Tuesday': [\n        (time_to_minutes('13:00'), time_to_minutes('13:30')),\n        (time_to_minutes('16:00'), time_to_minutes('16:30'))\n    ],\n    'Wednesday': [\n        (time_to_minutes('10:00'), time_to_minutes('10:30')),\n        (time_to_minutes('11:00'), time_to_minutes('11:30')),\n        (time_to_minutes('12:00'), time_to_minutes('12:30')),\n        (time_to_minutes('14:00'), time_to_minutes('14:30')),\n        (time_to_minutes('16:00'), time_to_minutes('16:30'))\n    ]\n}\n\nmichael_schedule = {\n    'Monday': [\n        (time_to_minutes('9:00'), time_to_minutes('12:00')),\n        (time_to_minutes('12:30'), time_to_minutes('13:00')),\n        (time_to_minutes('14:00'), time_to_minutes('14:30')),\n        (time_to_minutes('15:00'), time_to_minutes('17:00'))\n    ],\n    'Tuesday': [\n        (time_to_minutes('9:30'), time_to_minutes('11:30')),\n        (time_to_minutes('12:00'), time_to_minutes('13:30')),\n        (time_to_minutes('14:00'), time_to_minutes('15:30'))\n    ],\n    'Wednesday': [\n        (time_to_minutes('10:00'), time_to_minutes('12:30')),\n        (time_to_minutes('13:00'), time_to_minutes('13:30'))\n    ]\n}\n\ndays_to_check = ['Monday', 'Wednesday']\nwork_start = time_to_minutes('9:00')\nwork_end = time_to_minutes('17:00')\nduration = 30\n\nfor day in days_to_check:\n    arthur_meetings = arthur_schedule.get(day, [])\n    michael_meetings = michael_schedule.get(day, [])\n    \n    slot_start = work_start\n    while slot_start + duration <= work_end:\n        slot_end = slot_start + duration\n        \n        arthur_free = is_free(slot_start, slot_end, arthur_meetings)\n        michael_free = is_free(slot_start, slot_end, michael_meetings)\n        \n        if arthur_free and michael_free:\n            start_time_str = minutes_to_time(slot_start)\n            end_time_str = minutes_to_time(slot_end)\n            time_range_str = f\"{start_time_str}:{end_time_str}\"\n            print(day)\n            print(time_range_str)\n            exit(0)\n        \n        slot_start += 30\n\n# Since there is guaranteed to be a solution, this exit may not be reached.\nprint(\"No suitable time found\")\n```"
    }
]