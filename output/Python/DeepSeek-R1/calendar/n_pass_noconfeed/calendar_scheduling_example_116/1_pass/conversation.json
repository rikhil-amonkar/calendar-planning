[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Adam, John, Stephanie and Anna for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nAdam has meetings on Monday during 14:00 to 15:00; \nJohn is busy on Monday during 13:00 to 13:30, 14:00 to 14:30, 15:30 to 16:00, 16:30 to 17:00; \nStephanie has meetings on Monday during 9:30 to 10:00, 10:30 to 11:00, 11:30 to 16:00, 16:30 to 17:00; \nAnna is busy on Monday during 9:30 to 10:00, 12:00 to 12:30, 13:00 to 15:30, 16:30 to 17:00; \n\nAnna would rather not meet on Monday before 14:30. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef time_str_to_minutes(time_str):\n    parts = time_str.split(':')\n    return int(parts[0]) * 60 + int(parts[1])\n\n# Work hours: 9:00 to 17:00 (Monday)\nwork_start = 9 * 60   # 540 minutes (9:00)\nwork_end = 17 * 60    # 1020 minutes (17:00)\n\n# Meeting duration\nduration = 30\n\n# Anna's preference: not before 14:30 (870 minutes)\nanna_pref_start = 14 * 60 + 30\n\n# Collect all busy intervals from every participant\nbusy_intervals = []\n\n# Adam's schedule\nbusy_intervals.append((time_str_to_minutes(\"14:00\"), time_str_to_minutes(\"15:00\")))\n\n# John's schedule\nbusy_intervals.append((time_str_to_minutes(\"13:00\"), time_str_to_minutes(\"13:30\")))\nbusy_intervals.append((time_str_to_minutes(\"14:00\"), time_str_to_minutes(\"14:30\")))\nbusy_intervals.append((time_str_to_minutes(\"15:30\"), time_str_to_minutes(\"16:00\")))\nbusy_intervals.append((time_str_to_minutes(\"16:30\"), time_str_to_minutes(\"17:00\")))\n\n# Stephanie's schedule\nbusy_intervals.append((time_str_to_minutes(\"9:30\"), time_str_to_minutes(\"10:00\")))\nbusy_intervals.append((time_str_to_minutes(\"10:30\"), time_str_to_minutes(\"11:00\")))\nbusy_intervals.append((time_str_to_minutes(\"11:30\"), time_str_to_minutes(\"16:00\")))\nbusy_intervals.append((time_str_to_minutes(\"16:30\"), time_str_to_minutes(\"17:00\")))\n\n# Anna's schedule\nbusy_intervals.append((time_str_to_minutes(\"9:30\"), time_str_to_minutes(\"10:00\")))\nbusy_intervals.append((time_str_to_minutes(\"12:00\"), time_str_to_minutes(\"12:30\")))\nbusy_intervals.append((time_str_to_minutes(\"13:00\"), time_str_to_minutes(\"15:30\")))\nbusy_intervals.append((time_str_to_minutes(\"16:30\"), time_str_to_minutes(\"17:00\")))\n\n# Merge overlapping busy intervals\nbusy_intervals.sort(key=lambda x: x[0])\nmerged_busy = []\nif busy_intervals:\n    current_start, current_end = busy_intervals[0]\n    for interval in busy_intervals[1:]:\n        s, e = interval\n        if s <= current_end:\n            current_end = max(current_end, e)\n        else:\n            merged_busy.append((current_start, current_end))\n            current_start, current_end = s, e\n    merged_busy.append((current_start, current_end))\n\n# Compute free intervals within work hours\nfree_intervals = []\ncurrent = work_start\nfor s, e in merged_busy:\n    if current < s:\n        free_intervals.append((current, s))\n    current = max(current, e)  # Ensure we move forward\nif current < work_end:\n    free_intervals.append((current, work_end))\n\n# Find first free interval that fits meeting and Anna's preference\nfor start_free, end_free in free_intervals:\n    candidate_start = max(start_free, anna_pref_start)\n    if candidate_start + duration <= end_free:\n        meeting_start = candidate_start\n        meeting_end = candidate_start + duration\n        break\n\n# Format meeting time as HH:MM:HH:MM\ns_hour = meeting_start // 60\ns_min = meeting_start % 60\ne_hour = meeting_end // 60\ne_min = meeting_end % 60\ntime_range_str = f\"{s_hour:02d}:{s_min:02d}:{e_hour:02d}:{e_min:02d}\"\n\n# Output the day and time range\nprint(\"Monday\")\nprint(time_range_str)\n```"
    }
]