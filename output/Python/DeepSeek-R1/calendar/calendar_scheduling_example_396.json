{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "{11:30",
                "end_time": "12:00}"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "{11:30",
                "end_time": "12:00}"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    # Define work hours and meeting duration\n    work_start = 9 * 60  # 9:00 in minutes\n    work_end = 17 * 60   # 17:00 in minutes\n    meeting_duration = 30\n\n    # Convert all schedules to minute-based blocks\n    schedules = {\n        'Andrea': [],\n        'Jack': [(9*60, 9*60+30), (14*60, 14*60+30)],\n        'Madison': [(9*60+30, 10*60+30), (13*60, 14*60), (15*60, 15*60+30), (16*60+30, 17*60)],\n        'Rachel': [(9*60+30, 10*60+30), (11*60, 11*60+30), (12*60, 13*60+30), (14*60+30, 15*60+30), (16*60, 17*60)],\n        'Douglas': [(9*60, 11*60+30), (12*60, 16*60+30)],\n        'Ryan': [(9*60, 9*60+30), (13*60, 14*60), (14*60+30, 17*60)]\n    }\n\n    # Find free slots for all participants\n    for start in range(work_start, work_end - meeting_duration + 1):\n        end = start + meeting_duration\n        if all(\n            not any(s_start <= start < s_end or s_start < end <= s_end for s_start, s_end in person_schedule)\n            for person_schedule in schedules.values()\n        ):\n            # Convert back to HH:MM format\n            return f\"{start//60:02}:{start%60:02}-{end//60:02}:{end%60:02}\"\n\n    return None\n\nresult = find_meeting_time()\nprint(f\"Monday {result.replace('-', ':')}\")\n'''",
            "count": "calendar_scheduling_example_396"
        }
    ]
}