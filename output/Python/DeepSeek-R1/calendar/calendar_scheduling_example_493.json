{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "{12:00",
                "end_time": "12:30}"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef find_meeting_time():\n    work_hours = (9*60, 17*60)  # 9:00 to 17:00 in minutes\n    duration = 30\n    participants = {\n        'Tyler': [],\n        'Kelly': [],\n        'Stephanie': [(11*60, 11*60+30), (14*60+30, 15*60)],\n        'Hannah': [],\n        'Joe': [(9*60, 9*60+30), (10*60, 12*60), (12*60+30, 13*60), (14*60, 17*60)],\n        'Diana': [(9*60, 10*60+30), (11*60+30, 12*60), (13*60, 14*60), (14*60+30, 15*60+30), (16*60, 17*60)],\n        'Deborah': [(9*60, 10*60), (10*60+30, 12*60), (12*60+30, 13*60), (13*60+30, 14*60), (14*60+30, 15*60+30), (16*60, 16*60+30)]\n    }\n\n    # Convert all busy slots to minutes and merge\n    all_busy = []\n    for person in participants.values():\n        all_busy.extend(person)\n    all_busy.sort()\n\n    # Find free slots by checking gaps between busy times and work hours\n    free_slots = []\n    prev_end = work_hours[0]\n    for start, end in all_busy + [(work_hours[1], work_hours[1])]:\n        if start > prev_end:\n            free_slots.append((prev_end, start))\n        prev_end = max(prev_end, end)\n\n    # Find first suitable slot\n    for slot_start, slot_end in free_slots:\n        if slot_end - slot_start >= duration:\n            meeting_start = slot_start\n            meeting_end = meeting_start + duration\n            # Convert back to HH:MM format\n            def time_str(minutes):\n                return f\"{minutes//60:02d}:{minutes%60:02d}\"\n            return f\"Monday {time_str(meeting_start)}-{time_str(meeting_end)}\"\n\nprint(find_meeting_time())\n'''",
            "count": "calendar_scheduling_example_493"
        }
    ]
}