{
    "0shot": [
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": "{12:00",
                "end_time": "13:00}"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "{12:00",
                "end_time": "13:00}"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef time_to_min(t):\n    h, m = map(int, t.split(':'))\n    return h * 60 + m\n\ndef min_to_time(m):\n    return f\"{m // 60:02d}:{m % 60:02d}\"\n\ndef parse_schedule(busy_schedule, day):\n    intervals = []\n    for entry in busy_schedule.get(day, []):\n        start = time_to_min(entry[0])\n        end = time_to_min(entry[1])\n        intervals.append((start, end))\n    intervals.sort()\n    return intervals\n\ndef get_free_intervals(busy_intervals):\n    work_start = 540  # 9:00\n    work_end = 1020   # 17:00\n    free = []\n    prev_end = work_start\n    for start, end in sorted(busy_intervals, key=lambda x: x[0]):\n        if start > prev_end:\n            free.append((prev_end, start))\n        prev_end = max(prev_end, end)\n    if prev_end < work_end:\n        free.append((prev_end, work_end))\n    return free\n\ndef interval_intersection(a, b):\n    i = j = 0\n    res = []\n    while i < len(a) and j < len(b):\n        a_start, a_end = a[i]\n        b_start, b_end = b[j]\n        start = max(a_start, b_start)\n        end = min(a_end, b_end)\n        if start < end:\n            res.append((start, end))\n        if a_end < b_end:\n            i += 1\n        else:\n            j += 1\n    return res\n\nlaura_busy = {\n    'Monday': [('10:30', '11:00'), ('12:30', '13:00'), ('14:30', '15:30'), ('16:00', '17:00')],\n    'Tuesday': [('9:30', '10:00'), ('11:00', '11:30'), ('13:00', '13:30'), ('14:30', '15:00'), ('16:00', '17:00')],\n    'Thursday': [('10:30', '11:00'), ('12:00', '13:30'), ('15:00', '15:30'), ('16:00', '16:30')]\n}\n\nphilip_busy = {\n    'Monday': [('9:00', '17:00')],\n    'Tuesday': [('9:00', '11:00'), ('11:30', '12:00'), ('13:00', '13:30'), ('14:00', '14:30'), ('15:00', '16:30')],\n    'Thursday': [('9:00', '10:30'), ('11:00', '12:30'), ('13:00', '17:00')]\n}\n\ndays_to_check = ['Monday', 'Tuesday', 'Thursday']\n\nfor day in days_to_check:\n    laura_intervals = parse_schedule(laura_busy, day)\n    philip_intervals = parse_schedule(philip_busy, day)\n    \n    laura_free = get_free_intervals(laura_intervals)\n    philip_free = get_free_intervals(philip_intervals)\n    \n    common_free = interval_intersection(laura_free, philip_free)\n    \n    for start, end in common_free:\n        if end - start >= 60:\n            meeting_start = start\n            meeting_end = start + 60\n            start_time = min_to_time(meeting_start)\n            end_time = min_to_time(meeting_end)\n            print(f\"{day} {start_time}:{end_time}\")\n            exit()\n\nprint(\"No suitable time found\")\n'''",
            "count": "calendar_scheduling_example_825"
        }
    ]
}