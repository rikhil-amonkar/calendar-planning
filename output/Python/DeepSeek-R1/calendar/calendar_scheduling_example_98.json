{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "{10:30",
                "end_time": "11:00}"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "{13:30",
                "end_time": "14:00}"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02}:{mins:02}\"\n\nparticipants = {\n    \"juan\": {\n        \"busy\": [(540, 630), (930, 960)],  # 9:00-10:30, 15:30-16:00\n        \"max_end\": 960  # Can't meet after 16:00\n    },\n    \"marilyn\": {\n        \"busy\": [(600, 630), (750, 780)]  # 11:00-11:30, 12:30-13:00\n    },\n    \"ronald\": {\n        \"busy\": [(540, 630), (720, 750), (780, 810), (840, 990)]  # 9:00-10:30, 12:00-12:30, 13:00-13:30, 14:00-16:30\n    }\n}\n\nduration = 30\nwork_start = 540   # 9:00\nwork_end = 1020    # 17:00\n\nfor start in range(work_start, work_end - duration + 1, 30):\n    end = start + duration\n    # Check global work hours\n    if end > work_end:\n        continue\n    \n    # Check Juan's special constraint\n    if end > participants[\"juan\"][\"max_end\"]:\n        continue\n    \n    # Check Juan's availability\n    juan_conflict = any(start < busy_end and end > busy_start for busy_start, busy_end in participants[\"juan\"][\"busy\"])\n    if juan_conflict:\n        continue\n    \n    # Check Marilyn's availability\n    marilyn_conflict = any(start < busy_end and end > busy_start for busy_start, busy_end in participants[\"marilyn\"][\"busy\"])\n    if marilyn_conflict:\n        continue\n    \n    # Check Ronald's availability\n    ronald_conflict = any(start < busy_end and end > busy_start for busy_start, busy_end in participants[\"ronald\"][\"busy\"])\n    if ronald_conflict:\n        continue\n    \n    # Found valid slot\n    print(f\"Monday:{to_time(start)}:{to_time(end)}\")\n    exit()\n\n# Fallback if no slot found (though problem states solution exists)\nprint(\"No valid time found\")\n'''",
            "count": "calendar_scheduling_example_98"
        }
    ]
}