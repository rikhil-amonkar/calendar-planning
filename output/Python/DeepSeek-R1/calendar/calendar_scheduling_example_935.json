{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "{9:00",
                "end_time": "9:30}"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "{9:00",
                "end_time": "9:30}"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{hours:02d}:{mins:02d}\"\n\ndef merge_intervals(intervals):\n    if not intervals:\n        return []\n    sorted_intervals = sorted(intervals, key=lambda x: x[0])\n    merged = [sorted_intervals[0]]\n    for current in sorted_intervals[1:]:\n        last = merged[-1]\n        if current[0] <= last[1]:\n            merged[-1] = (last[0], max(last[1], current[1]))\n        else:\n            merged.append(current)\n    return merged\n\ndef find_slot(terry, frances):\n    days_order = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    work_start = time_to_minutes(\"9:00\")\n    work_end = time_to_minutes(\"17:00\")\n    \n    for day in days_order:\n        terry_busy = terry.get(day, [])\n        frances_busy = frances.get(day, [])\n        all_busy = terry_busy + frances_busy\n        intervals = []\n        for start, end in all_busy:\n            intervals.append((start, end))\n        merged = merge_intervals(intervals)\n        free = []\n        prev_end = work_start\n        for start, end in merged:\n            if start > prev_end:\n                free.append((prev_end, start))\n            prev_end = max(prev_end, end)\n        if prev_end < work_end:\n            free.append((prev_end, work_end))\n        for start, end in free:\n            if end - start >= 30:\n                return (day, start, start + 30)\n    return None\n\nterry_schedule = {\n    \"Monday\": [\n        (\"10:30\", \"11:00\"),\n        (\"12:30\", \"14:00\"),\n        (\"15:00\", \"17:00\")\n    ],\n    \"Tuesday\": [\n        (\"9:30\", \"10:00\"),\n        (\"10:30\", \"11:00\"),\n        (\"14:00\", \"14:30\"),\n        (\"16:00\", \"16:30\")\n    ],\n    \"Wednesday\": [\n        (\"9:30\", \"10:30\"),\n        (\"11:00\", \"12:00\"),\n        (\"13:00\", \"13:30\"),\n        (\"15:00\", \"16:00\"),\n        (\"16:30\", \"17:00\")\n    ],\n    \"Thursday\": [\n        (\"9:30\", \"10:00\"),\n        (\"12:00\", \"12:30\"),\n        (\"13:00\", \"14:30\"),\n        (\"16:00\", \"16:30\")\n    ],\n    \"Friday\": [\n        (\"9:00\", \"11:30\"),\n        (\"12:00\", \"12:30\"),\n        (\"13:30\", \"16:00\"),\n        (\"16:30\", \"17:00\")\n    ]\n}\n\nfrances_schedule = {\n    \"Monday\": [\n        (\"9:30\", \"11:00\"),\n        (\"11:30\", \"13:00\"),\n        (\"14:00\", \"14:30\"),\n        (\"15:00\", \"16:00\")\n    ],\n    \"Tuesday\": [\n        (\"9:00\", \"9:30\"),\n        (\"10:00\", \"10:30\"),\n        (\"11:00\", \"12:00\"),\n        (\"13:00\", \"14:30\"),\n        (\"15:30\", \"16:30\")\n    ],\n    \"Wednesday\": [\n        (\"9:30\", \"10:00\"),\n        (\"10:30\", \"11:00\"),\n        (\"11:30\", \"16:00\"),\n        (\"16:30\", \"17:00\")\n    ],\n    \"Thursday\": [\n        (\"11:00\", \"12:30\"),\n        (\"14:30\", \"17:00\")\n    ],\n    \"Friday\": [\n        (\"9:30\", \"10:30\"),\n        (\"11:00\", \"12:30\"),\n        (\"13:00\", \"16:00\"),\n        (\"16:30\", \"17:00\")\n    ]\n}\n\nterry = {day: [(time_to_minutes(s), time_to_minutes(e)) for s, e in intervals] for day, intervals in terry_schedule.items()}\nfrances = {day: [(time_to_minutes(s), time_to_minutes(e)) for s, e in intervals] for day, intervals in frances_schedule.items()}\n\nresult = find_slot(terry, frances)\nif result:\n    day, start, end = result\n    print(f\"{day} {minutes_to_time(start)}:{minutes_to_time(end)}\")\nelse:\n    print(\"No slot found\")\n'''",
            "count": "calendar_scheduling_example_935"
        }
    ]
}