{
    "0shot": [
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Wednesday",
                "start_time": "{15:00",
                "end_time": "16:00}"
            },
            "has_error": true,
            "raw_model_response": "'''python\nfrom datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, \"%H:%M\")\n\ndef time_range(start, end):\n    return (start.hour, start.minute), (end.hour, end.minute)\n\ndef get_available_slots(busy_slots, day_start, day_end):\n    slots = []\n    prev_end = day_start\n    for start, end in sorted(busy_slots):\n        if prev_end < start:\n            slots.append((prev_end, start))\n        prev_end = max(prev_end, end)\n    if prev_end < day_end:\n        slots.append((prev_end, day_end))\n    return slots\n\ndef find_meeting_time(diane_busy, matthew_busy, matthew_prefs, duration):\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    day_start = parse_time(\"09:00\")\n    day_end = parse_time(\"17:00\")\n    delta = timedelta(minutes=duration)\n\n    for day_idx in range(5):\n        day = days[day_idx]\n        \n        diane_day = [time_range(parse_time(s.split()[0]), parse_time(s.split()[2])) for s in diane_busy[day]]\n        matthew_day = [time_range(parse_time(s.split()[0]), parse_time(s.split()[2])) for s in matthew_busy[day]]\n        \n        diane_free = get_available_slots(diane_day, day_start, day_end)\n        matthew_free = get_available_slots(matthew_day, day_start, day_end)\n        \n        for slot in diane_free:\n            d_start, d_end = slot\n            for m_slot in matthew_free:\n                m_start, m_end = m_slot\n                start = max(d_start, m_start)\n                end = min(d_end, m_end)\n                if (end - start) >= delta:\n                    if day == \"Wednesday\" and (start < parse_time(\"12:30\")):\n                        continue\n                    meeting_end = start + delta\n                    return (\n                        day,\n                        f\"{start.hour:02d}:{start.minute:02d}\",\n                        f\"{meeting_end.hour:02d}:{meeting_end.minute:02d}\"\n                    )\n    return None\n\ndiane_busy = {\n    \"Monday\": [\"12:00 to 12:30\", \"15:00 to 15:30\"],\n    \"Tuesday\": [\"10:00 to 11:00\", \"11:30 to 12:00\", \"12:30 to 13:00\", \"16:00 to 17:00\"],\n    \"Wednesday\": [\"9:00 to 9:30\", \"14:30 to 15:00\", \"16:30 to 17:00\"],\n    \"Thursday\": [\"15:30 to 16:30\"],\n    \"Friday\": [\"9:30 to 11:30\", \"14:30 to 15:00\", \"16:00 to 17:00\"]\n}\n\nmatthew_busy = {\n    \"Monday\": [\"9:00 to 10:00\", \"10:30 to 17:00\"],\n    \"Tuesday\": [\"9:00 to 17:00\"],\n    \"Wednesday\": [\"9:00 to 11:00\", \"12:00 to 14:30\", \"16:00 to 17:00\"],\n    \"Thursday\": [\"9:00 to 16:00\"],\n    \"Friday\": [\"9:00 to 17:00\"]\n}\n\nresult = find_meeting_time(diane_busy, matthew_busy, [\"Wednesday\"], 60)\nprint(f\"{result[0]} {result[1]}-{result[2]}\")\n'''",
            "count": "calendar_scheduling_example_985"
        }
    ]
}