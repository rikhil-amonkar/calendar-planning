{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "{16:00",
                "end_time": "16:30}"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef parse_time(time_str):\n    hours, minutes = map(int, time_str.split(':'))\n    return hours * 60 + minutes\n\ndef format_time(minutes):\n    return f\"{minutes // 60:02d}:{minutes % 60:02d}\"\n\nwork_hours = (9*60, 17*60)\ndays = ['Monday', 'Tuesday']\n\nryan_schedule = {\n    'Monday': [('9:30', '10:00'), ('11:00', '12:00'), ('13:00', '13:30'), ('15:30', '16:00')],\n    'Tuesday': [('11:30', '12:30'), ('15:30', '16:00')]\n}\n\nadam_schedule = {\n    'Monday': [('9:00', '10:30'), ('11:00', '13:30'), ('14:00', '16:00'), ('16:30', '17:00')],\n    'Tuesday': [('9:00', '10:00'), ('10:30', '15:30'), ('16:00', '17:00')]\n}\n\nadam_preferences = {'Monday': (14*60 + 30, None)}\n\ndef get_busy_intervals(day):\n    ryan = [tuple(parse_time(t) for t in interval) for interval in ryan_schedule.get(day, [])]\n    adam = [tuple(parse_time(t) for t in interval) for interval in adam_schedule.get(day, [])]\n    merged = sorted(ryan + adam, key=lambda x: x[0])\n    if not merged:\n        return []\n    intervals = [merged[0]]\n    for current in merged[1:]:\n        last = intervals[-1]\n        if current[0] <= last[1]:\n            intervals[-1] = (last[0], max(last[1], current[1]))\n        else:\n            intervals.append(current)\n    return intervals\n\ndef find_slot():\n    for day in days:\n        start_adjust = adam_preferences.get(day, (0, None))[0] if day == 'Monday' else 0\n        day_start = max(work_hours[0], start_adjust)\n        busy = get_busy_intervals(day)\n        free_start = day_start\n        for start, end in busy:\n            if start > free_start:\n                if end - free_start >= 30:\n                    slot_end = free_start + 30\n                    return day, format_time(free_start), format_time(slot_end)\n            free_start = max(free_start, end)\n        if work_hours[1] - free_start >= 30:\n            slot_end = free_start + 30\n            return day, format_time(free_start), format_time(slot_end)\n    return None\n\nday, start, end = find_slot()\nprint(f\"{day} {start.replace(':','')}:{end.replace(':','')}\")\n'''",
            "count": "calendar_scheduling_example_707"
        }
    ]
}