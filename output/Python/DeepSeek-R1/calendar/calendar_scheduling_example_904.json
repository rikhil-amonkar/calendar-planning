{
    "0shot": [
        {
            "final_program_time": {
                "day": "Thursday",
                "start_time": "{13:00",
                "end_time": "13:30}"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "{14:00",
                "end_time": "14:30}"
            },
            "has_error": false,
            "raw_model_response": "'''python\ndef parse_time(s):\n    hours, minutes = map(int, s.split(':'))\n    return hours * 60 + minutes\n\ndef format_time(m):\n    return f\"{m // 60:02}:{m % 60:02}\"\n\ndaniel_busy = {\n    'Tuesday': [(parse_time('11:00'), parse_time('12:00')), (parse_time('13:00'), parse_time('13:30')),\n                (parse_time('15:30'), parse_time('16:00')), (parse_time('16:30'), parse_time('17:00'))],\n    'Thursday': [(parse_time('10:30'), parse_time('11:00')), (parse_time('12:00'), parse_time('13:00')),\n                 (parse_time('14:30'), parse_time('15:00')), (parse_time('15:30'), parse_time('16:00'))]\n}\n\nbradley_busy = {\n    'Tuesday': [(parse_time('12:00'), parse_time('13:00')), (parse_time('13:30'), parse_time('14:00')),\n                (parse_time('15:30'), parse_time('16:30'))],\n    'Thursday': [(parse_time('09:00'), parse_time('12:30')), (parse_time('13:30'), parse_time('14:00')),\n                 (parse_time('14:30'), parse_time('15:00')), (parse_time('15:30'), parse_time('16:30'))]\n}\n\nwork_start = parse_time('09:00')\nwork_end = parse_time('17:00')\n\ndef find_slot(day):\n    merged = []\n    for start, end in daniel_busy.get(day, []) + bradley_busy.get(day, []):\n        merged.append((start, end))\n    merged.sort()\n    if not merged:\n        return (work_start, work_start + 30)\n    merged_combined = []\n    for interval in merged:\n        if not merged_combined:\n            merged_combined.append(interval)\n        else:\n            last = merged_combined[-1]\n            if interval[0] <= last[1]:\n                merged_combined[-1] = (last[0], max(last[1], interval[1]))\n            else:\n                merged_combined.append(interval)\n    free_slots = []\n    prev_end = work_start\n    for start, end in merged_combined:\n        if start > prev_end:\n            free_slots.append((prev_end, start))\n        prev_end = max(prev_end, end)\n    if prev_end < work_end:\n        free_slots.append((prev_end, work_end))\n    for start, end in free_slots:\n        if end - start >= 30:\n            return (start, start + 30)\n    return None\n\n# Check possible days considering preferences\nfor day in ['Tuesday', 'Thursday']:\n    if day == 'Tuesday':\n        slot = find_slot('Tuesday')\n        if slot and slot[0] >= parse_time('12:00'):\n            start, end = slot\n            print(f\"{day}:{format_time(start)}:{format_time(end)}\")\n            exit()\n    elif day == 'Thursday':\n        slot = find_slot('Thursday')\n        if slot:\n            start, end = slot\n            print(f\"{day}:{format_time(start)}:{format_time(end)}\")\n            exit()\n'''",
            "count": "calendar_scheduling_example_904"
        }
    ]
}