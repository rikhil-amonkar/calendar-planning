{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "{9:30",
                "end_time": "10:30}"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "{9:30",
                "end_time": "10:30}"
            },
            "has_error": false,
            "raw_model_response": "'''python\nfrom datetime import time, datetime, timedelta\n\ndef parse_time(t_str):\n    return datetime.strptime(t_str, \"%H:%M\").time()\n\ndef time_to_minutes(t):\n    return t.hour * 60 + t.minute\n\ndef minutes_to_time(m):\n    return time(hour=m // 60, minute=m % 60)\n\nparticipants = {\n    \"Joshua\": [\n        (\"11:00\", \"12:30\"),\n        (\"13:30\", \"14:30\"),\n        (\"16:30\", \"17:00\")\n    ],\n    \"Jerry\": [\n        (\"09:00\", \"09:30\"),\n        (\"10:30\", \"12:00\"),\n        (\"12:30\", \"13:00\"),\n        (\"13:30\", \"14:00\"),\n        (\"14:30\", \"15:00\"),\n        (\"15:30\", \"16:00\")\n    ],\n    \"Jesse\": [\n        (\"09:00\", \"09:30\"),\n        (\"10:30\", \"12:00\"),\n        (\"12:30\", \"13:00\"),\n        (\"14:30\", \"15:00\"),\n        (\"15:30\", \"16:30\")\n    ],\n    \"Kenneth\": [\n        (\"10:30\", \"12:30\"),\n        (\"13:30\", \"14:00\"),\n        (\"14:30\", \"15:00\"),\n        (\"15:30\", \"16:00\"),\n        (\"16:30\", \"17:00\")\n    ]\n}\n\nwork_start = time_to_minutes(parse_time(\"09:00\"))\nwork_end = time_to_minutes(parse_time(\"17:00\"))\n\n# Collect all busy intervals\nbusy_intervals = []\nfor person, intervals in participants.items():\n    for start, end in intervals:\n        s = time_to_minutes(parse_time(start))\n        e = time_to_minutes(parse_time(end))\n        busy_intervals.append((s, e))\n\n# Sort intervals by start time\nbusy_intervals.sort()\n\n# Merge overlapping intervals\nmerged = []\nfor start, end in busy_intervals:\n    if not merged:\n        merged.append((start, end))\n    else:\n        last_start, last_end = merged[-1]\n        if start <= last_end:\n            merged[-1] = (last_start, max(last_end, end))\n        else:\n            merged.append((start, end))\n\n# Find available slots\navailable = []\nprev_end = work_start\nfor start, end in merged:\n    if start > prev_end:\n        available.append((prev_end, start))\n    prev_end = max(prev_end, end)\nif prev_end < work_end:\n    available.append((prev_end, work_end))\n\n# Find first available slot with >=60 minutes duration\nmeeting_duration = 60\nfor slot in available:\n    start_min, end_min = slot\n    if end_min - start_min >= meeting_duration:\n        best_start = start_min\n        best_end = start_min + meeting_duration\n        break\n\n# Format output\nstart_time = minutes_to_time(best_start)\nend_time = minutes_to_time(best_end)\nprint(f\"Monday {start_time.hour:02d}:{start_time.minute:02d}:{end_time.hour:02d}:{end_time.minute:02d}\")\n'''",
            "count": "calendar_scheduling_example_479"
        }
    ]
}