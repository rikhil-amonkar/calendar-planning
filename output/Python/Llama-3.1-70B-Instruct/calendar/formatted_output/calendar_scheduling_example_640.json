{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "10:00",
                "end_time": "10:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration, days, start_time, end_time):\n    # Convert time to minutes\n    start_time_minutes = start_time.hour * 60 + start_time.minute\n    end_time_minutes = end_time.hour * 60 + end_time.minute\n\n    # Iterate over each day\n    for day in days:\n        # Initialize a list to store the available time slots\n        available_time_slots = [True] * ((end_time_minutes - start_time_minutes) // meeting_duration)\n\n        # Iterate over each participant's schedule\n        for participant in participants.values():\n            for schedule in participant:\n                if schedule[2] == day:\n                    # Convert schedule time to minutes\n                    schedule_start_minutes = schedule[0].hour * 60 + schedule[0].minute\n                    schedule_end_minutes = schedule[1].hour * 60 + schedule[1].minute\n\n                    # Mark the time slot as unavailable if it overlaps with the participant's schedule\n                    for i in range((schedule_start_minutes - start_time_minutes) // meeting_duration, (schedule_end_minutes - start_time_minutes) // meeting_duration):\n                        if 0 <= i < len(available_time_slots):\n                            available_time_slots[i] = False\n\n        # Find the first available time slot\n        for i, time_slot in enumerate(available_time_slots):\n            if time_slot:\n                # Calculate the start and end time of the meeting\n                meeting_start_time = start_time + timedelta(minutes=i * meeting_duration)\n                meeting_end_time = meeting_start_time + timedelta(minutes=meeting_duration)\n\n                return meeting_start_time.strftime(\"%H:%M\") + \":\" + meeting_end_time.strftime(\"%H:%M\"), day\n\n\n# Define the participants' schedules\nparticipants = {\n    \"Bobby\": [(datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"), \"Monday\"),\n              (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"), \"Tuesday\"),\n              (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"), \"Tuesday\"),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"), \"Tuesday\"),\n              (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"), \"Tuesday\")],\n    \"Michael\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\"), \"Monday\"),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"), \"Monday\"),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"), \"Monday\"),\n                (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"), \"Monday\"),\n                (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\"), \"Tuesday\"),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\"), \"Tuesday\"),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"), \"Tuesday\"),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"), \"Tuesday\"),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"), \"Tuesday\")]\n}\n\n# Define the meeting duration, days, start time, and end time\nmeeting_duration = 30\ndays = [\"Monday\", \"Tuesday\"]\nstart_time = datetime.strptime(\"09:00\", \"%H:%M\")\nend_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Find a suitable time for the meeting\nmeeting_time, meeting_day = find_meeting_time(participants, meeting_duration, days, start_time, end_time)\n\nprint(f\"Proposed meeting time: {meeting_time} on {meeting_day}\")\n```",
            "count": "calendar_scheduling_example_640"
        }
    ]
}