{
    "0shot": [
        {
            "final_program_time": {
                "day": "Tuesday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "expected_time": {
                "day": "Tuesday",
                "start_time": "9:00",
                "end_time": "9:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration, work_hours, days, additional_constraints=None):\n    \"\"\"\n    Find a suitable time for a meeting based on the participants' schedules and constraints.\n\n    Args:\n        participants (dict): A dictionary where the keys are the participant names and the values are dictionaries with day as key and list of tuples representing their busy times as value.\n        meeting_duration (int): The duration of the meeting in minutes.\n        work_hours (tuple): A tuple representing the start and end times of the work hours.\n        days (list): A list of days to consider for the meeting.\n        additional_constraints (dict): A dictionary where the keys are the participant names and the values are additional constraints.\n\n    Returns:\n        tuple: A tuple containing the proposed meeting time and the day of the week.\n    \"\"\"\n\n    # Convert work hours to minutes\n    start_time = datetime.strptime(work_hours[0], \"%H:%M\")\n    end_time = datetime.strptime(work_hours[1], \"%H:%M\")\n    work_hours_in_minutes = (end_time - start_time).total_seconds() / 60\n\n    # Initialize the proposed meeting time\n    proposed_time = None\n\n    # Iterate over the possible meeting days\n    for day in days:\n        # Check if the day is allowed by additional constraints\n        if additional_constraints and day in additional_constraints.get(\"Cheryl\", []):\n            continue\n\n        # Iterate over the possible meeting times\n        for i in range(int(work_hours_in_minutes - meeting_duration + 1)):\n            # Calculate the current time\n            current_time = start_time + timedelta(minutes=i)\n\n            # Check if the current time works for all participants\n            works_for_all = True\n            for participant, schedule in participants.items():\n                for busy_time in schedule.get(day, []):\n                    busy_start_time = datetime.strptime(busy_time[0], \"%H:%M\")\n                    busy_end_time = datetime.strptime(busy_time[1], \"%H:%M\")\n                    if (current_time >= busy_start_time and current_time < busy_end_time) or \\\n                       (current_time + timedelta(minutes=meeting_duration) > busy_start_time and current_time < busy_end_time):\n                        works_for_all = False\n                        break\n                if not works_for_all:\n                    break\n\n            # If the current time works for all participants, propose it\n            if works_for_all:\n                proposed_time = current_time.strftime(\"%H:%M\") + \":\" + (current_time + timedelta(minutes=meeting_duration)).strftime(\"%H:%M\")\n                proposed_day = day\n                break\n\n        if proposed_time:\n            break\n\n    return proposed_time, proposed_day\n\n\n# Example usage\nparticipants = {\n    \"Cheryl\": {\n        \"Monday\": [(\"9:00\", \"9:30\"), (\"11:30\", \"13:00\"), (\"15:30\", \"16:00\")],\n        \"Tuesday\": [(\"15:00\", \"15:30\")],\n        \"Wednesday\": []\n    },\n    \"Kyle\": {\n        \"Monday\": [(\"9:00\", \"17:00\")],\n        \"Tuesday\": [(\"9:30\", \"17:00\")],\n        \"Wednesday\": [(\"9:00\", \"9:30\"), (\"10:00\", \"13:00\"), (\"13:30\", \"14:00\"), (\"14:30\", \"17:00\")]\n    }\n}\nmeeting_duration = 30\nwork_hours = (\"9:00\", \"17:00\")\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\"]\nadditional_constraints = {\n    \"Cheryl\": [\"Wednesday\"]\n}\n\nproposed_time, day = find_meeting_time(participants, meeting_duration, work_hours, days, additional_constraints)\nprint(f\"Proposed meeting time: {proposed_time} on {day}\")\n```",
            "count": "calendar_scheduling_example_710"
        }
    ]
}