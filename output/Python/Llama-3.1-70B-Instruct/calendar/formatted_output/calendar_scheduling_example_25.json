{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:30"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(participants, meeting_duration, work_hours, day, additional_constraints=None):\n    \"\"\"\n    Find a suitable time for a meeting based on the participants' schedules and constraints.\n\n    Args:\n        participants (dict): A dictionary where the keys are the participant names and the values are lists of tuples representing their busy times.\n        meeting_duration (int): The duration of the meeting in minutes.\n        work_hours (tuple): A tuple representing the start and end times of the work hours.\n        day (str): The day of the week.\n        additional_constraints (dict): A dictionary where the keys are the participant names and the values are additional constraints.\n\n    Returns:\n        tuple: A tuple containing the proposed meeting time and the day of the week.\n    \"\"\"\n\n    # Convert work hours to minutes\n    start_time = datetime.strptime(work_hours[0], \"%H:%M\")\n    end_time = datetime.strptime(work_hours[1], \"%H:%M\")\n    work_hours_in_minutes = (end_time - start_time).total_seconds() / 60\n\n    # Initialize the proposed meeting time\n    proposed_time = None\n\n    # Iterate over the possible meeting times\n    for i in range(int(work_hours_in_minutes - meeting_duration + 1)):\n        # Calculate the current time\n        current_time = start_time + timedelta(minutes=i)\n\n        # Check if the current time works for all participants\n        works_for_all = True\n        for participant, busy_times in participants.items():\n            for busy_time in busy_times:\n                busy_start_time = datetime.strptime(busy_time[0], \"%H:%M\")\n                busy_end_time = datetime.strptime(busy_time[1], \"%H:%M\")\n                if (current_time >= busy_start_time and current_time < busy_end_time) or \\\n                   (current_time + timedelta(minutes=meeting_duration) > busy_start_time and current_time < busy_end_time):\n                    works_for_all = False\n                    break\n            if not works_for_all:\n                break\n\n        # Check if the current time satisfies additional constraints\n        if additional_constraints:\n            for participant, constraint in additional_constraints.items():\n                if constraint == \"before 14:30\":\n                    if current_time >= datetime.strptime(\"14:30\", \"%H:%M\"):\n                        works_for_all = False\n                        break\n\n        # If the current time works for all participants and satisfies additional constraints, propose it\n        if works_for_all:\n            proposed_time = current_time.strftime(\"%H:%M\") + \":\" + (current_time + timedelta(minutes=meeting_duration)).strftime(\"%H:%M\")\n            break\n\n    return proposed_time, day\n\n\n# Example usage\nparticipants = {\n    \"Anthony\": [(\"9:30\", \"10:00\"), (\"12:00\", \"13:00\"), (\"16:00\", \"16:30\")],\n    \"Pamela\": [(\"9:30\", \"10:00\"), (\"16:30\", \"17:00\")],\n    \"Zachary\": [(\"9:00\", \"11:30\"), (\"12:00\", \"12:30\"), (\"13:00\", \"13:30\"), (\"14:30\", \"15:00\"), (\"16:00\", \"17:00\")]\n}\nmeeting_duration = 60\nwork_hours = (\"9:00\", \"17:00\")\nday = \"Monday\"\nadditional_constraints = {\n    \"Pamela\": \"before 14:30\"\n}\n\nproposed_time, day = find_meeting_time(participants, meeting_duration, work_hours, day, additional_constraints)\nprint(f\"Proposed meeting time: {proposed_time} on {day}\")\n```",
            "count": "calendar_scheduling_example_25"
        }
    ]
}