{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Margaret",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Barbara",
                        "start_time": "13:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "20:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Margaret",
                        "start_time": "10:15",
                        "end_time": "10:45"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Barbara",
                        "start_time": "13:45",
                        "end_time": "14:45"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Kimberly",
                        "start_time": "14:52",
                        "end_time": "15:22"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Kevin",
                        "start_time": "20:00",
                        "end_time": "20:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel distances in minutes\ntravel_distances = {\n    ('Bayview', 'North Beach'): 21,\n    ('Bayview', 'Presidio'): 31,\n    ('Bayview', 'Haight-Ashbury'): 19,\n    ('Bayview', 'Union Square'): 17,\n    ('North Beach', 'Bayview'): 22,\n    ('North Beach', 'Presidio'): 17,\n    ('North Beach', 'Haight-Ashbury'): 18,\n    ('North Beach', 'Union Square'): 7,\n    ('Presidio', 'Bayview'): 31,\n    ('Presidio', 'North Beach'): 18,\n    ('Presidio', 'Haight-Ashbury'): 15,\n    ('Presidio', 'Union Square'): 22,\n    ('Haight-Ashbury', 'Bayview'): 18,\n    ('Haight-Ashbury', 'North Beach'): 19,\n    ('Haight-Ashbury', 'Presidio'): 15,\n    ('Haight-Ashbury', 'Union Square'): 17,\n    ('Union Square', 'Bayview'): 15,\n    ('Union Square', 'North Beach'): 10,\n    ('Union Square', 'Presidio'): 24,\n    ('Union Square', 'Haight-Ashbury'): 18\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Barbara', 'location': 'North Beach','start_time': '13:45', 'end_time': '20:15','min_duration': 60},\n    {'person': 'Margaret', 'location': 'Presidio','start_time': '10:15', 'end_time': '15:15','min_duration': 30},\n    {'person': 'Kevin', 'location': 'Haight-Ashbury','start_time': '20:00', 'end_time': '20:45','min_duration': 30},\n    {'person': 'Kimberly', 'location': 'Union Square','start_time': '07:45', 'end_time': '16:45','min_duration': 30}\n]\n\n# Define arrival time\narrival_time = '09:00'\n\n# Define current location and time\ncurrent_location = 'Bayview'\ncurrent_time = datetime.strptime(arrival_time, '%H:%M')\n\n# Initialize itinerary\nitinerary = []\n\n# Function to calculate end time\ndef calculate_end_time(start_time, duration):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=duration)).strftime('%H:%M')\n\n# Function to check if meeting can be scheduled\ndef can_schedule_meeting(meeting):\n    global current_time\n    global current_location\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n    if current_time + timedelta(minutes=travel_time) <= meeting_start_time:\n        return True\n    return False\n\n# Function to schedule meeting\ndef schedule_meeting(meeting):\n    global current_time\n    global current_location\n    global itinerary\n    travel_time = travel_distances.get((current_location, meeting['location']), float('inf'))\n    current_time += timedelta(minutes=travel_time)\n    current_location = meeting['location']\n    meeting_end_time = calculate_end_time(meeting['start_time'], meeting['min_duration'])\n    itinerary.append({\n        'action':'meet',\n        'location': meeting['location'],\n        'person': meeting['person'],\n   'start_time': meeting['start_time'],\n        'end_time': meeting_end_time\n    })\n    current_time = datetime.strptime(meeting_end_time, '%H:%M')\n\n# Sort meetings by start time\nmeetings.sort(key=lambda x: x['start_time'])\n\n# Schedule meetings\nfor meeting in meetings:\n    if can_schedule_meeting(meeting):\n        schedule_meeting(meeting)\n\n# Print itinerary as JSON\nprint('SOLUTION:')\nprint(json.dumps({'itinerary': itinerary}, indent=4))\n```",
            "count": "meeting_planning_example_356"
        }
    ]
}