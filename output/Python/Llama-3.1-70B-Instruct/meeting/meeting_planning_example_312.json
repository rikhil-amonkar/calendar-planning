{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Sarah",
                        "start_time": "9:11",
                        "end_time": "9:41"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Richard",
                        "start_time": "9:56",
                        "end_time": "11:26"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "11:37",
                        "end_time": "13:37"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "13:54",
                        "end_time": "15:24"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Sarah",
                        "start_time": "10:45",
                        "end_time": "11:15"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Richard",
                        "start_time": "11:45",
                        "end_time": "13:15"
                    },
                    {
                        "action": "meet",
                        "location": "Mission District",
                        "person": "Elizabeth",
                        "start_time": "13:26",
                        "end_time": "15:26"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Michelle",
                        "start_time": "18:15",
                        "end_time": "19:45"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Define travel times between locations\ntravel_times = {\n    'Richmond District': {'Sunset District': 11, 'Haight-Ashbury': 10, 'Mission District': 20, 'Golden Gate Park': 9},\n    'Sunset District': {'Richmond District': 12, 'Haight-Ashbury': 15, 'Mission District': 24, 'Golden Gate Park': 11},\n    'Haight-Ashbury': {'Richmond District': 10, 'Sunset District': 15, 'Mission District': 11, 'Golden Gate Park': 7},\n    'Mission District': {'Richmond District': 20, 'Sunset District': 24, 'Haight-Ashbury': 12, 'Golden Gate Park': 17},\n    'Golden Gate Park': {'Richmond District': 7, 'Sunset District': 10, 'Haight-Ashbury': 7, 'Mission District': 17}\n}\n\n# Define meeting constraints\nmeetings = [\n    {'person': 'Sarah', 'location': 'Sunset District','start_time': '10:45', 'end_time': '19:00','min_time': 30},\n    {'person': 'Richard', 'location': 'Haight-Ashbury','start_time': '11:45', 'end_time': '15:45','min_time': 90},\n    {'person': 'Elizabeth', 'location': 'Mission District','start_time': '11:00', 'end_time': '17:15','min_time': 120},\n    {'person': 'Michelle', 'location': 'Golden Gate Park','start_time': '18:15', 'end_time': '20:45','min_time': 90}\n]\n\ndef calculate_meeting_schedule(meetings, travel_times):\n    schedule = []\n    current_time = datetime.strptime('09:00', '%H:%M')\n    current_location = 'Richmond District'\n\n    for meeting in meetings:\n        # Calculate travel time to meeting location\n        travel_time = travel_times[current_location][meeting['location']]\n        arrival_time = current_time + timedelta(minutes=travel_time)\n\n        # Check if meeting can be attended\n        meeting_start_time = datetime.strptime(meeting['start_time'], '%H:%M')\n        meeting_end_time = datetime.strptime(meeting['end_time'], '%H:%M')\n        if arrival_time < meeting_end_time and arrival_time + timedelta(minutes=meeting['min_time']) <= meeting_end_time:\n            # Attend meeting\n            meeting_end = min(arrival_time + timedelta(minutes=meeting['min_time']), meeting_end_time)\n            schedule.append({\n                'action':'meet',\n                'location': meeting['location'],\n                'person': meeting['person'],\n           'start_time': arrival_time.strftime('%H:%M'),\n                'end_time': meeting_end.strftime('%H:%M')\n            })\n            current_time = meeting_end\n            current_location = meeting['location']\n        else:\n            # Skip meeting\n            continue\n\n    return schedule\n\n# Calculate and print meeting schedule\nschedule = calculate_meeting_schedule(meetings, travel_times)\nprint(json.dumps({'itinerary': schedule}, indent=4))\n```",
            "count": "meeting_planning_example_312"
        }
    ]
}