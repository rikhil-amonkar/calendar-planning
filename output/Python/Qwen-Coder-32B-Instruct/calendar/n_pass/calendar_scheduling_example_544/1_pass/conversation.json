[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Deborah and Albert for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nDeborah is free the entire day.\nAlbert has blocked their calendar on Monday during 9:00 to 10:00, 10:30 to 12:00, 15:00 to 16:30; \n\nAlbert can not meet on Monday after 11:00. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(deborah_schedule, albert_schedule, meeting_duration, max_time):\n    # Convert times to datetime objects for easier manipulation\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    max_time = datetime.strptime(max_time, \"%H:%M\")\n    meeting_duration = timedelta(minutes=meeting_duration)\n    \n    # Parse available times for Albert\n    albert_available_times = []\n    current_start = start_time\n    \n    for block in albert_schedule:\n        block_start, block_end = map(lambda x: datetime.strptime(x, \"%H:%M\"), block.split(\"-\"))\n        if current_start < block_start:\n            albert_available_times.append((current_start, block_start))\n        current_start = max(current_start, block_end)\n    \n    if current_start < max_time:\n        albert_available_times.append((current_start, max_time))\n    \n    # Find a common slot\n    for albert_start, albert_end in albert_available_times:\n        if albert_end - albert_start >= meeting_duration:\n            return albert_start.strftime(\"%H:%M\"), (albert_start + meeting_duration).strftime(\"%H:%M\")\n    \n    return None\n\n# Define schedules and constraints\ndeborah_schedule = []  # Deborah is free all day\nalbert_schedule = [\"09:00-10:00\", \"10:30-12:00\", \"15:00-16:30\"]\nmeeting_duration = 30  # 30 minutes\nmax_time = \"11:00\"  # Albert cannot meet after 11:00\n\n# Find a suitable meeting time\nmeeting_start, meeting_end = find_meeting_time(deborah_schedule, albert_schedule, meeting_duration, max_time)\n\n# Output the result\nprint(f\"{meeting_start}:{meeting_end} Monday\")\n```"
    }
]