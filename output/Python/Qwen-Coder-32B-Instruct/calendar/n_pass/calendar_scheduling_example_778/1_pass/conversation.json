[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Susan and Sandra for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nSusan has blocked their calendar on Monday during 12:30 to 13:00, 13:30 to 14:00, Tuesday during 11:30 to 12:00, Wednesday during 9:30 to 10:30, 14:00 to 14:30, 15:30 to 16:30; \nSandra has meetings on Monday during 9:00 to 13:00, 14:00 to 15:00, 16:00 to 16:30, Tuesday during 9:00 to 9:30, 10:30 to 12:00, 12:30 to 13:30, 14:00 to 14:30, 16:00 to 17:00, Wednesday during 9:00 to 11:30, 12:00 to 12:30, 13:00 to 17:00; \n\nSusan would rather not meet on Tuesday. Sandra can not meet on Monday after 16:00. Wednesday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours and meeting duration\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules\nsusan_schedule = {\n    \"Monday\": [(datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\nsandra_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\")),\n               (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Constraints\nsusan_avoid_tuesday = True\nsandra_avoid_monday_after_16 = True\n\ndef find_free_slot(day):\n    susan_busy = susan_schedule[day]\n    sandra_busy = sandra_schedule[day]\n    \n    # Combine all busy slots\n    all_busy_slots = sorted(susan_busy + sandra_busy)\n    \n    # Initialize start time\n    current_time = work_start\n    \n    for start, end in all_busy_slots:\n        if current_time < start and current_time + meeting_duration <= start:\n            return current_time, current_time + meeting_duration\n        current_time = max(current_time, end)\n    \n    if current_time + meeting_duration <= work_end:\n        return current_time, current_time + meeting_duration\n    \n    return None, None\n\n# Check each day for a free slot\nfor day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n    if day == \"Tuesday\" and susan_avoid_tuesday:\n        continue\n    if day == \"Monday\":\n        # Check if Sandra can meet before 16:00\n        free_start, free_end = find_free_slot(day)\n        if free_start and free_start < datetime.strptime(\"16:00\", \"%H:%M\"):\n            print(f\"{free_start.strftime('%H:%M')}:{free_end.strftime('%H:%M')},{day}\")\n            break\n    else:\n        free_start, free_end = find_free_slot(day)\n        if free_start:\n            print(f\"{free_start.strftime('%H:%M')}:{free_end.strftime('%H:%M')},{day}\")\n            break\n```"
    }
]