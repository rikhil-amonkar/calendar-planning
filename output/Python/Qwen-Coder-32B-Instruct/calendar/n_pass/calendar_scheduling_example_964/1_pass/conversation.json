[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Betty and Megan for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday, Wednesday, Thursday or Friday. \n\nHere are the existing schedules for everyone during the days: \nBetty is busy on Monday during 10:00 to 10:30, 11:30 to 12:30, 16:00 to 16:30, Tuesday during 9:30 to 10:00, 10:30 to 11:00, 12:00 to 12:30, 13:30 to 15:00, 16:30 to 17:00, Wednesday during 13:30 to 14:00, 14:30 to 15:00, Friday during 9:00 to 10:00, 11:30 to 12:00, 12:30 to 13:00, 14:30 to 15:00; \nMegan has blocked their calendar on Monday during 9:00 to 17:00, Tuesday during 9:00 to 9:30, 10:00 to 10:30, 12:00 to 14:00, 15:00 to 15:30, 16:00 to 16:30, Wednesday during 9:30 to 10:30, 11:00 to 11:30, 12:30 to 13:00, 13:30 to 14:30, 15:30 to 17:00, Thursday during 9:00 to 10:30, 11:30 to 14:00, 14:30 to 15:00, 15:30 to 16:30, Friday during 9:00 to 17:00; \n\nBetty can not meet on Wednesday. Thursday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours and busy times\nwork_start = 9\nwork_end = 17\nmeeting_duration = 1  # in hours\n\nbetty_busy = {\n    'Monday': [(10, 10.5), (11.5, 12.5), (16, 16.5)],\n    'Tuesday': [(9.5, 10), (10.5, 11), (12, 12.5), (13.5, 15), (16.5, 17)],\n    'Wednesday': [(13.5, 14), (14.5, 15)],\n    'Friday': [(9, 10), (11.5, 12), (12.5, 13), (14.5, 15)]\n}\n\nmegan_busy = {\n    'Monday': [(9, 17)],\n    'Tuesday': [(9, 9.5), (10, 10.5), (12, 14), (15, 15.5), (16, 16.5)],\n    'Wednesday': [(9.5, 10.5), (11, 11.5), (12.5, 13), (13.5, 14.5), (15.5, 17)],\n    'Thursday': [(9, 10.5), (11.5, 14), (14.5, 15), (15.5, 16.5)],\n    'Friday': [(9, 17)]\n}\n\ndef is_time_slot_free(day, start, end, busy_times):\n    for busy_start, busy_end in busy_times.get(day, []):\n        if not (end <= busy_start or start >= busy_end):\n            return False\n    return True\n\ndef find_meeting_time():\n    for day in ['Monday', 'Tuesday', 'Friday']:\n        current_time = work_start\n        while current_time < work_end - meeting_duration:\n            next_time = current_time + meeting_duration\n            if is_time_slot_free(day, current_time, next_time, betty_busy) and is_time_slot_free(day, current_time, next_time, megan_busy):\n                return f\"{current_time:02.0f}:{int((current_time % 1) * 60):02}:{next_time:02.0f}:{int((next_time % 1) * 60):02}\", day\n            current_time += 0.5  # check every half hour\n\nmeeting_time, meeting_day = find_meeting_time()\nprint(f\"{meeting_time} {meeting_day}\")\n```"
    }
]