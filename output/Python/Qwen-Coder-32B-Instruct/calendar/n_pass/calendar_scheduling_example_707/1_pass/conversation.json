[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Ryan and Adam for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nRyan has meetings on Monday during 9:30 to 10:00, 11:00 to 12:00, 13:00 to 13:30, 15:30 to 16:00, Tuesday during 11:30 to 12:30, 15:30 to 16:00, Wednesday during 12:00 to 13:00, 15:30 to 16:00, 16:30 to 17:00; \nAdam is busy on Monday during 9:00 to 10:30, 11:00 to 13:30, 14:00 to 16:00, 16:30 to 17:00, Tuesday during 9:00 to 10:00, 10:30 to 15:30, 16:00 to 17:00, Wednesday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 14:30, 15:00 to 15:30, 16:00 to 16:30; \n\nRyan can not meet on Wednesday. Adam would like to avoid more meetings on Monday before 14:30. Tuesday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(ryan_schedule, adam_schedule, meeting_duration, available_days):\n    meeting_duration = timedelta(hours=meeting_duration)\n    \n    for day in available_days:\n        ryan_busy = ryan_schedule[day]\n        adam_busy = adam_schedule[day]\n        \n        start_of_day = datetime.strptime(f\"09:00 {day}\", \"%H:%M %A\")\n        end_of_day = datetime.strptime(f\"17:00 {day}\", \"%H:%M %A\")\n        \n        current_time = start_of_day\n        \n        while current_time + meeting_duration <= end_of_day:\n            if all(current_time < busy_start or current_time + meeting_duration > busy_end for busy_start, busy_end in ryan_busy) and \\\n               all(current_time < busy_start or current_time + meeting_duration > busy_end for busy_start, busy_end in adam_busy):\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}\", day\n            \n            current_time += timedelta(minutes=30)\n\n# Define schedules\nryan_schedule = {\n    \"Monday\": [datetime.strptime(\"09:30 Monday\", \"%H:%M %A\"), datetime.strptime(\"10:00 Monday\", \"%H:%M %A\"),\n               datetime.strptime(\"11:00 Monday\", \"%H:%M %A\"), datetime.strptime(\"12:00 Monday\", \"%H:%M %A\"),\n               datetime.strptime(\"13:00 Monday\", \"%H:%M %A\"), datetime.strptime(\"13:30 Monday\", \"%H:%M %A\"),\n               datetime.strptime(\"15:30 Monday\", \"%H:%M %A\"), datetime.strptime(\"16:00 Monday\", \"%H:%M %A\")],\n    \"Tuesday\": [datetime.strptime(\"11:30 Tuesday\", \"%H:%M %A\"), datetime.strptime(\"12:30 Tuesday\", \"%H:%M %A\"),\n                datetime.strptime(\"15:30 Tuesday\", \"%H:%M %A\"), datetime.strptime(\"16:00 Tuesday\", \"%H:%M %A\")],\n    \"Wednesday\": [datetime.strptime(\"12:00 Wednesday\", \"%H:%M %A\"), datetime.strptime(\"13:00 Wednesday\", \"%H:%M %A\"),\n                  datetime.strptime(\"15:30 Wednesday\", \"%H:%M %A\"), datetime.strptime(\"16:00 Wednesday\", \"%H:%M %A\"),\n                  datetime.strptime(\"16:30 Wednesday\", \"%H:%M %A\"), datetime.strptime(\"17:00 Wednesday\", \"%H:%M %A\")]\n}\n\nadam_schedule = {\n    \"Monday\": [datetime.strptime(\"09:00 Monday\", \"%H:%M %A\"), datetime.strptime(\"10:30 Monday\", \"%H:%M %A\"),\n               datetime.strptime(\"11:00 Monday\", \"%H:%M %A\"), datetime.strptime(\"13:30 Monday\", \"%H:%M %A\"),\n               datetime.strptime(\"14:00 Monday\", \"%H:%M %A\"), datetime.strptime(\"16:00 Monday\", \"%H:%M %A\"),\n               datetime.strptime(\"16:30 Monday\", \"%H:%M %A\"), datetime.strptime(\"17:00 Monday\", \"%H:%M %A\")],\n    \"Tuesday\": [datetime.strptime(\"09:00 Tuesday\", \"%H:%M %A\"), datetime.strptime(\"10:00 Tuesday\", \"%H:%M %A\"),\n                datetime.strptime(\"10:30 Tuesday\", \"%H:%M %A\"), datetime.strptime(\"15:30 Tuesday\", \"%H:%M %A\"),\n                datetime.strptime(\"16:00 Tuesday\", \"%H:%M %A\"), datetime.strptime(\"17:00 Tuesday\", \"%H:%M %A\")],\n    \"Wednesday\": [datetime.strptime(\"09:00 Wednesday\", \"%H:%M %A\"), datetime.strptime(\"09:30 Wednesday\", \"%H:%M %A\"),\n                  datetime.strptime(\"10:00 Wednesday\", \"%H:%M %A\"), datetime.strptime(\"11:00 Wednesday\", \"%H:%M %A\"),\n                  datetime.strptime(\"11:30 Wednesday\", \"%H:%M %A\"), datetime.strptime(\"14:30 Wednesday\", \"%H:%M %A\"),\n                  datetime.strptime(\"15:00 Wednesday\", \"%H:%M %A\"), datetime.strptime(\"15:30 Wednesday\", \"%H:%M %A\"),\n                  datetime.strptime(\"16:00 Wednesday\", \"%H:%M %A\"), datetime.strptime(\"16:30 Wednesday\", \"%H:%M %A\")]\n}\n\n# Available days excluding Wednesday\navailable_days = [\"Monday\", \"Tuesday\"]\n\n# Meeting duration in hours\nmeeting_duration = 0.5\n\n# Find and print the meeting time\nmeeting_time, meeting_day = find_meeting_time(ryan_schedule, adam_schedule, meeting_duration, available_days)\nprint(f\"{meeting_time}, {meeting_day}\")\n```"
    }
]