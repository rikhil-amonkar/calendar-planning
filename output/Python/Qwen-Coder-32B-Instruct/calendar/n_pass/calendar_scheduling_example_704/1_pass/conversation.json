[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Larry and Samuel for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nLarry's calendar is wide open the entire week.\nSamuel has meetings on Monday during 10:30 to 11:00, 12:00 to 12:30, 13:00 to 15:00, 15:30 to 16:30, Tuesday during 9:00 to 12:00, 14:00 to 15:30, 16:30 to 17:00, Wednesday during 10:30 to 11:00, 11:30 to 12:00, 12:30 to 13:00, 14:00 to 14:30, 15:00 to 16:00; \n\nLarry would rather not meet on Wednesday. Samuel would like to avoid more meetings on Tuesday. The group would like to meet at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\ndef find_meeting_time(larry_schedule, samuel_schedule, preferred_days, meeting_duration):\n    work_start = 9 * 60  # 9:00 AM in minutes\n    work_end = 17 * 60   # 5:00 PM in minutes\n    \n    def parse_schedule(schedule):\n        parsed = []\n        for entry in schedule:\n            start, end = entry.split('-')\n            start_hour, start_minute = map(int, start.split(':'))\n            end_hour, end_minute = map(int, end.split(':'))\n            parsed.append((start_hour * 60 + start_minute, end_hour * 60 + end_minute))\n        return parsed\n    \n    larry_schedule = parse_schedule(larry_schedule)\n    samuel_schedule = parse_schedule(samuel_schedule)\n    \n    for day in preferred_days:\n        if day == 'Monday':\n            samuel_busy = samuel_schedule[:5]\n        elif day == 'Tuesday':\n            samuel_busy = samuel_schedule[5:8]\n        elif day == 'Wednesday':\n            samuel_busy = samuel_schedule[8:]\n        \n        available_slots = []\n        current_time = work_start\n        \n        for busy_start, busy_end in samuel_busy:\n            if current_time < busy_start:\n                available_slots.append((current_time, busy_start))\n            current_time = max(current_time, busy_end)\n        \n        if current_time < work_end:\n            available_slots.append((current_time, work_end))\n        \n        for start, end in available_slots:\n            if end - start >= meeting_duration:\n                return f\"{start // 60:02}:{start % 60:02}-{(start + meeting_duration) // 60:02}:{(start + meeting_duration) % 60:02}\", day\n    \n    return None\n\nlarry_schedule = []  # Larry's calendar is wide open\nsamuel_schedule = [\"10:30-11:00\", \"12:00-12:30\", \"13:00-15:00\", \"15:30-16:30\",\n                   \"9:00-12:00\", \"14:00-15:30\", \"16:30-17:00\",\n                   \"10:30-11:00\", \"11:30-12:00\", \"12:30-13:00\", \"14:00-14:30\", \"15:00-16:00\"]\npreferred_days = ['Monday', 'Tuesday', 'Wednesday']\nmeeting_duration = 30  # 30 minutes\n\nmeeting_time, meeting_day = find_meeting_time(larry_schedule, samuel_schedule, preferred_days, meeting_duration)\nprint(f\"{meeting_time} {meeting_day}\")\n```"
    }
]