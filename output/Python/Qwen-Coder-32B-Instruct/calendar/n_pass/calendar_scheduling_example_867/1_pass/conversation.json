[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Betty and Scott for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday, Wednesday or Thursday. \n\nHere are the existing schedules for everyone during the days: \nBetty is busy on Monday during 10:00 to 10:30, 13:30 to 14:00, 15:00 to 15:30, 16:00 to 16:30, Tuesday during 9:00 to 9:30, 11:30 to 12:00, 12:30 to 13:00, 13:30 to 14:00, 16:30 to 17:00, Wednesday during 9:30 to 10:30, 13:00 to 13:30, 14:00 to 14:30, Thursday during 9:30 to 10:00, 11:30 to 12:00, 14:00 to 14:30, 15:00 to 15:30, 16:30 to 17:00; \nScott is busy on Monday during 9:30 to 15:00, 15:30 to 16:00, 16:30 to 17:00, Tuesday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 12:00, 12:30 to 13:30, 14:00 to 15:00, 16:00 to 16:30, Wednesday during 9:30 to 12:30, 13:00 to 13:30, 14:00 to 14:30, 15:00 to 15:30, 16:00 to 16:30, Thursday during 9:00 to 9:30, 10:00 to 10:30, 11:00 to 12:00, 12:30 to 13:00, 15:00 to 16:00, 16:30 to 17:00; \n\nBetty can not meet on Monday. Tuesday. Thursday before 15:00. Scott would like to avoid more meetings on Wednesday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(betty_schedule, scott_schedule, meeting_duration, preferred_days, excluded_times):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    def parse_busy_times(schedule):\n        busy_times = []\n        for day, times in schedule.items():\n            busy_times.append((day, [tuple(map(lambda x: datetime.strptime(x, \"%H:%M\"), t.split('-'))) for t in times]))\n        return busy_times\n    \n    betty_busy = parse_busy_times(betty_schedule)\n    scott_busy = parse_busy_times(scott_schedule)\n    \n    for day in preferred_days:\n        betty_day_busy = next(filter(lambda x: x[0] == day, betty_busy), None)[1]\n        scott_day_busy = next(filter(lambda x: x[0] == day, scott_busy), None)[1]\n        \n        current_time = work_start\n        while current_time < work_end - timedelta(minutes=meeting_duration):\n            available = True\n            for start, end in betty_day_busy + scott_day_busy:\n                if start <= current_time < end or start < current_time + timedelta(minutes=meeting_duration) <= end:\n                    available = False\n                    current_time = end\n                    break\n            if available and current_time.hour * 60 + current_time.minute not in excluded_times[day]:\n                return f\"{current_time.strftime('%H:%M')}:{(current_time + timedelta(minutes=meeting_duration)).strftime('%H:%M')}\", day\n            current_time += timedelta(minutes=15)  # Check every 15 minutes for availability\n    \n    return None, None\n\nbetty_schedule = {\n    'Monday': ['10:00-10:30', '13:30-14:00', '15:00-15:30', '16:00-16:30'],\n    'Tuesday': ['09:00-09:30', '11:30-12:00', '12:30-13:00', '13:30-14:00', '16:30-17:00'],\n    'Wednesday': ['09:30-10:30', '13:00-13:30', '14:00-14:30'],\n    'Thursday': ['09:30-10:00', '11:30-12:00', '14:00-14:30', '15:00-15:30', '16:30-17:00']\n}\n\nscott_schedule = {\n    'Monday': ['09:30-15:00', '15:30-16:00', '16:30-17:00'],\n    'Tuesday': ['09:00-09:30', '10:00-11:00', '11:30-12:00', '12:30-13:30', '14:00-15:00', '16:00-16:30'],\n    'Wednesday': ['09:30-12:30', '13:00-13:30', '14:00-14:30', '15:00-15:30', '16:00-16:30'],\n    'Thursday': ['09:00-09:30', '10:00-10:30', '11:00-12:00', '12:30-13:00', '15:00-16:00', '16:30-17:00']\n}\n\nmeeting_duration = 30\npreferred_days = ['Wednesday', 'Thursday']\nexcluded_times = {\n    'Monday': [],\n    'Tuesday': [],\n    'Wednesday': [14*60+30],  # 14:30 in minutes\n    'Thursday': list(range(9*60, 15*60))  # Before 15:00 in minutes\n}\n\ntime, day = find_meeting_time(betty_schedule, scott_schedule, meeting_duration, preferred_days, excluded_times)\nprint(f\"Meeting time: {time} on {day}\")\n```"
    }
]