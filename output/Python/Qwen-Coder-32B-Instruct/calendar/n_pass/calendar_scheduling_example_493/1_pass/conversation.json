[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Tyler, Kelly, Stephanie, Hannah, Joe, Diana and Deborah for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nTyler is free the entire day.\nKellyhas no meetings the whole day.\nStephanie has blocked their calendar on Monday during 11:00 to 11:30, 14:30 to 15:00; \nHannahhas no meetings the whole day.\nJoe has blocked their calendar on Monday during 9:00 to 9:30, 10:00 to 12:00, 12:30 to 13:00, 14:00 to 17:00; \nDiana has meetings on Monday during 9:00 to 10:30, 11:30 to 12:00, 13:00 to 14:00, 14:30 to 15:30, 16:00 to 17:00; \nDeborah is busy on Monday during 9:00 to 10:00, 10:30 to 12:00, 12:30 to 13:00, 13:30 to 14:00, 14:30 to 15:30, 16:00 to 16:30; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration):\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    time_slot = start_time\n\n    while time_slot + timedelta(minutes=meeting_duration) <= end_time:\n        available = True\n        for person, blocks in schedules.items():\n            for block in blocks:\n                if time_slot >= block[0] and time_slot < block[1]:\n                    available = False\n                    break\n                elif time_slot + timedelta(minutes=meeting_duration) > block[0] and time_slot + timedelta(minutes=meeting_duration) <= block[1]:\n                    available = False\n                    break\n            if not available:\n                break\n        if available:\n            return time_slot.strftime(\"%H:%M\"), (time_slot + timedelta(minutes=meeting_duration)).strftime(\"%H:%M\")\n        time_slot += timedelta(minutes=15)\n\nschedules = {\n    \"Stephanie\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:00\", \"%H:%M\"))],\n    \"Joe\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n            (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n            (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n            (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Diana\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n              (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n              (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n              (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n              (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Deborah\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n                (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\nmeeting_duration = 30\nstart, end = find_meeting_time(schedules, meeting_duration)\nprint(f\"{start}:{end} Monday\")\n```"
    }
]