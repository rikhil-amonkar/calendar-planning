[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Judith and Timothy for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nJudith has blocked their calendar on Monday during 12:00 to 12:30, Wednesday during 11:30 to 12:00; \nTimothy has blocked their calendar on Monday during 9:30 to 10:00, 10:30 to 11:30, 12:30 to 14:00, 15:30 to 17:00, Tuesday during 9:30 to 13:00, 13:30 to 14:00, 14:30 to 17:00, Wednesday during 9:00 to 9:30, 10:30 to 11:00, 13:30 to 14:30, 15:00 to 15:30, 16:00 to 16:30; \n\nJudith would like to avoid more meetings on Monday. Wednesday before 12:00. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(judith_schedule, timothy_schedule, meeting_duration, preferred_days, judith_avoid_monday, judith_avoid_wednesday_before_12):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    for day in preferred_days:\n        judith_blocked_times = judith_schedule.get(day, [])\n        timothy_blocked_times = timothy_schedule.get(day, [])\n        \n        if day == \"Monday\" and judith_avoid_monday:\n            continue\n        \n        if day == \"Wednesday\":\n            judith_blocked_times.append((datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")))\n            if judith_avoid_wednesday_before_12:\n                judith_blocked_times.append((datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")))\n        \n        current_time = work_start\n        while current_time < work_end - timedelta(hours=meeting_duration):\n            available = True\n            for start, end in judith_blocked_times + timothy_blocked_times:\n                if start <= current_time < end or start < current_time + timedelta(hours=meeting_duration) <= end:\n                    available = False\n                    current_time = end\n                    break\n            \n            if available:\n                meeting_start = current_time.strftime(\"%H:%M\")\n                meeting_end = (current_time + timedelta(hours=meeting_duration)).strftime(\"%H:%M\")\n                return f\"{meeting_start}:{meeting_end} {day}\"\n            \n            current_time += timedelta(minutes=30)\n\njudith_schedule = {\n    \"Monday\": [(datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\"))]\n}\n\ntimothy_schedule = {\n    \"Monday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n        (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Tuesday\": [\n        (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n        (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n    ],\n    \"Wednesday\": [\n        (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n        (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n        (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n        (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n        (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))\n    ]\n}\n\nmeeting_duration = 1\npreferred_days = [\"Monday\", \"Tuesday\", \"Wednesday\"]\njudith_avoid_monday = True\njudith_avoid_wednesday_before_12 = True\n\nprint(find_meeting_time(judith_schedule, timothy_schedule, meeting_duration, preferred_days, judith_avoid_monday, judith_avoid_wednesday_before_12))\n```"
    }
]