[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Bryan and Nicholas for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday, Wednesday, Thursday or Friday. \n\nHere are the existing schedules for everyone during the days: \nBryan has meetings on Thursday during 9:30 to 10:00, 12:30 to 13:00, Friday during 10:30 to 11:00, 14:00 to 14:30; \nNicholas has meetings on Monday during 11:30 to 12:00, 13:00 to 15:30, Tuesday during 9:00 to 9:30, 11:00 to 13:30, 14:00 to 16:30, Wednesday during 9:00 to 9:30, 10:00 to 11:00, 11:30 to 13:30, 14:00 to 14:30, 15:00 to 16:30, Thursday during 10:30 to 11:30, 12:00 to 12:30, 15:00 to 15:30, 16:30 to 17:00, Friday during 9:00 to 10:30, 11:00 to 12:00, 12:30 to 14:30, 15:30 to 16:00, 16:30 to 17:00; \n\nBryan would like to avoid more meetings on Tuesday. Nicholas would rather not meet on Monday. Thursday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\n# Define work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define participants' busy times\nbryan_busy = {\n    \"Thursday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))]\n}\n\nnicholas_busy = {\n    \"Monday\": [(datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                    (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                    (datetime.strptime(\"11:30\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                    (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                    (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Thursday\": [(datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                   (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                   (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n                   (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Friday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                 (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n                 (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                 (datetime.strptime(\"15:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                 (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\n# Define preferences\nbryan_avoid_tuesday = True\nnicholas_avoid_monday_thursday = True\n\n# Meeting duration\nmeeting_duration = timedelta(hours=1)\n\n# Function to check if a time slot is free for all participants\ndef is_slot_free(day, start_time):\n    end_time = start_time + meeting_duration\n    \n    # Check Bryan's availability\n    if day in bryan_busy:\n        for busy_start, busy_end in bryan_busy[day]:\n            if busy_start <= end_time and start_time <= busy_end:\n                return False\n    \n    # Check Nicholas's availability\n    if day in nicholas_busy:\n        for busy_start, busy_end in nicholas_busy[day]:\n            if busy_start <= end_time and start_time <= busy_end:\n                return False\n    \n    return True\n\n# Iterate over possible days and times\nfor day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]:\n    if (day == \"Tuesday\" and bryan_avoid_tuesday) or (day in [\"Monday\", \"Thursday\"] and nicholas_avoid_monday_thursday):\n        continue\n    \n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if is_slot_free(day, current_time):\n            print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')} {day}\")\n            break\n        current_time += timedelta(minutes=30)\n```"
    }
]