[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Amanda and Nathan for half an hour between the work hours of 9:00 to 17:00 on either Monday or Tuesday. \n\nHere are the existing schedules for everyone during the days: \nAmanda is busy on Monday during 9:00 to 10:30, 11:00 to 11:30, 12:30 to 13:00, 13:30 to 14:00, 14:30 to 15:00, Tuesday during 9:00 to 9:30, 10:00 to 10:30, 11:30 to 12:00, 13:30 to 14:30, 15:30 to 16:00, 16:30 to 17:00; \nNathan is busy on Monday during 10:00 to 10:30, 11:00 to 11:30, 13:30 to 14:30, 16:00 to 16:30, Tuesday during 9:00 to 10:30, 11:00 to 13:00, 13:30 to 14:00, 14:30 to 15:30, 16:00 to 16:30; \n\nAmanda do not want to meet on Tuesday after 11:00. Nathan can not meet on Monday. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(amanda_schedule, nathan_schedule, meeting_duration, preferred_days, amanda_availability, nathan_availability):\n    def parse_schedule(schedule):\n        parsed = []\n        for entry in schedule:\n            start, end = entry.split('-')\n            parsed.append((datetime.strptime(start, '%H:%M'), datetime.strptime(end, '%H:%M')))\n        return parsed\n\n    def is_time_available(time, schedule):\n        for start, end in schedule:\n            if start <= time < end:\n                return False\n        return True\n\n    def find_common_slot(amanda_slots, nathan_slots, duration):\n        for amanda_start, amanda_end in amanda_slots:\n            current = amanda_start\n            while current + timedelta(minutes=duration) <= amanda_end:\n                if is_time_available(current, nathan_slots):\n                    return current, current + timedelta(minutes=duration)\n                current += timedelta(minutes=5)\n        return None, None\n\n    amanda_schedule = parse_schedule(amanda_schedule)\n    nathan_schedule = parse_schedule(nathan_schedule)\n\n    for day in preferred_days:\n        amanda_day_availability = [t for t in amanda_availability[day] if is_time_available(t[0], amanda_schedule)]\n        nathan_day_availability = [t for t in nathan_availability[day] if is_time_available(t[0], nathan_schedule)]\n\n        meeting_start, meeting_end = find_common_slot(amanda_day_availability, nathan_day_availability, meeting_duration)\n        if meeting_start and meeting_end:\n            return meeting_start.strftime('%H:%M'), meeting_end.strftime('%H:%M'), day\n\n    return None, None, None\n\n# Define schedules and constraints\namanda_schedule = [\"9:00-10:30\", \"11:00-11:30\", \"12:30-13:00\", \"13:30-14:00\", \"14:30-15:00\"]\nnathan_schedule = [\"10:00-10:30\", \"11:00-11:30\", \"13:30-14:30\", \"16:00-16:30\", \"9:00-10:30\", \"11:00-13:00\", \"13:30-14:00\", \"14:30-15:30\", \"16:00-16:30\"]\n\nmeeting_duration = 30  # in minutes\npreferred_days = [\"Monday\", \"Tuesday\"]\n\namanda_availability = {\n    \"Monday\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\"))]\n}\n\nnathan_availability = {\n    \"Monday\": [],\n    \"Tuesday\": [(datetime.strptime(\"9:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nmeeting_start, meeting_end, day = find_meeting_time(amanda_schedule, nathan_schedule, meeting_duration, preferred_days, amanda_availability, nathan_availability)\nprint(f\"{meeting_start}:{meeting_end} {day}\")\n```"
    }
]