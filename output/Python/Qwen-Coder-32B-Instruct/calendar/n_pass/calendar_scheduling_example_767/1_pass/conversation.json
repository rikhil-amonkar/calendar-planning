[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Martha and Beverly for one hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nMartha has blocked their calendar on Monday during 16:00 to 17:00, Tuesday during 15:00 to 15:30, Wednesday during 10:00 to 11:00, 14:00 to 14:30; \nBeverly has blocked their calendar on Monday during 9:00 to 13:30, 14:00 to 17:00, Tuesday during 9:00 to 17:00, Wednesday during 9:30 to 15:30, 16:30 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time():\n    # Define work hours\n    start_time = datetime.strptime(\"09:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"17:00\", \"%H:%M\")\n\n    # Define busy times for Martha and Beverly\n    martha_busy = {\n        \"Monday\": [(datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \"Tuesday\": [(datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n        \"Wednesday\": [\n            (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n            (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\"))\n        ]\n    }\n\n    beverly_busy = {\n        \"Monday\": [\n            (datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n            (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n        ],\n        \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n        \"Wednesday\": [\n            (datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\")),\n            (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))\n        ]\n    }\n\n    # Meeting duration\n    meeting_duration = timedelta(hours=1)\n\n    # Find available time slot\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        current_time = start_time\n        while current_time + meeting_duration <= end_time:\n            available = True\n            for busy_time in martha_busy.get(day, []):\n                if current_time < busy_time[1] and current_time + meeting_duration > busy_time[0]:\n                    available = False\n                    current_time = busy_time[1]\n                    break\n            for busy_time in beverly_busy.get(day, []):\n                if current_time < busy_time[1] and current_time + meeting_duration > busy_time[0]:\n                    available = False\n                    current_time = busy_time[1]\n                    break\n            if available:\n                print(f\"{current_time.strftime('%H:%M')}:{(current_time + meeting_duration).strftime('%H:%M')}, {day}\")\n                return\n            current_time += timedelta(minutes=30)\n\nfind_meeting_time()\n```"
    }
]