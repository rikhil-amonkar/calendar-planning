[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Mary and Alexis for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday, Wednesday or Thursday. \n\nHere are the existing schedules for everyone during the days: \nMary has meetings on Tuesday during 10:00 to 10:30, 15:30 to 16:00, Wednesday during 9:30 to 10:00, 15:00 to 15:30, Thursday during 9:00 to 10:00, 10:30 to 11:30; \nAlexis has blocked their calendar on Monday during 9:00 to 10:00, 10:30 to 12:00, 12:30 to 16:30, Tuesday during 9:00 to 10:00, 10:30 to 11:30, 12:00 to 15:30, 16:00 to 17:00, Wednesday during 9:00 to 11:00, 11:30 to 17:00, Thursday during 10:00 to 12:00, 14:00 to 14:30, 15:30 to 16:00, 16:30 to 17:00; \n\nThe group would like to meet at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, duration, start_time, end_time, days):\n    def parse_time(time_str):\n        return datetime.strptime(time_str, \"%H:%M\")\n\n    def time_range_to_str(start, end):\n        return f\"{start.strftime('%H:%M')}:{end.strftime('%H:%M')}\"\n\n    duration = timedelta(minutes=duration)\n    start_time = parse_time(start_time)\n    end_time = parse_time(end_time)\n\n    for day in days:\n        available_slots = []\n        current_start = start_time\n\n        for event in sorted(schedules[day], key=lambda x: x[0]):\n            event_start, event_end = parse_time(event[0]), parse_time(event[1])\n            if current_start < event_start and event_start - current_start >= duration:\n                available_slots.append((current_start, event_start))\n            current_start = max(current_start, event_end)\n\n        if current_start < end_time and end_time - current_start >= duration:\n            available_slots.append((current_start, end_time))\n\n        for slot_start, slot_end in available_slots:\n            if slot_end - slot_start >= duration:\n                return time_range_to_str(slot_start, slot_start + duration), day\n\n    return None, None\n\n# Define the schedules\nschedules = {\n    \"Monday\": [(\"9:00\", \"10:00\"), (\"10:30\", \"12:00\"), (\"12:30\", \"16:30\")],\n    \"Tuesday\": [(\"10:00\", \"10:30\"), (\"12:00\", \"15:30\"), (\"15:30\", \"16:00\"), (\"16:00\", \"17:00\")],\n    \"Wednesday\": [(\"9:00\", \"11:00\"), (\"11:30\", \"17:00\")],\n    \"Thursday\": [(\"9:00\", \"10:00\"), (\"10:30\", \"11:30\"), (\"12:00\", \"12:30\"), (\"14:00\", \"14:30\"), (\"15:30\", \"16:00\"), (\"16:30\", \"17:00\")]\n}\n\n# Meeting parameters\nmeeting_duration = 30\nwork_start_time = \"9:00\"\nwork_end_time = \"17:00\"\nworking_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\n\n# Find a suitable meeting time\nmeeting_time, meeting_day = find_meeting_time(schedules, meeting_duration, work_start_time, work_end_time, working_days)\n\n# Output the result\nif meeting_time and meeting_day:\n    print(f\"{meeting_time} on {meeting_day}\")\nelse:\n    print(\"No available time found.\")\n```"
    }
]