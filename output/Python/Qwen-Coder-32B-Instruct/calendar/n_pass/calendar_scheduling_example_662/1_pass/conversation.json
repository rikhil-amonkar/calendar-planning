[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Gary and David for one hour between the work hours of 9:00 to 17:00 on either Monday or Tuesday. \n\nHere are the existing schedules for everyone during the days: \nGary has blocked their calendar on Monday during 9:30 to 10:00, 11:00 to 13:00, 14:00 to 14:30, 16:30 to 17:00, Tuesday during 9:00 to 9:30, 10:30 to 11:00, 14:30 to 16:00; \nDavid has blocked their calendar on Monday during 9:00 to 9:30, 10:00 to 13:00, 14:30 to 16:30, Tuesday during 9:00 to 9:30, 10:00 to 10:30, 11:00 to 12:30, 13:00 to 14:30, 15:00 to 16:00, 16:30 to 17:00; \n\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(gary_schedule, david_schedule, meeting_duration, work_start, work_end, days):\n    meeting_duration = timedelta(hours=meeting_duration)\n    work_start = datetime.strptime(work_start, \"%H:%M\")\n    work_end = datetime.strptime(work_end, \"%H:%M\")\n\n    for day in days:\n        gary_blocked = gary_schedule[day]\n        david_blocked = david_schedule[day]\n\n        gary_free_times = get_free_times(gary_blocked, work_start, work_end)\n        david_free_times = get_free_times(david_blocked, work_start, work_end)\n\n        common_free_times = find_common_free_times(gary_free_times, david_free_times)\n\n        for start, end in common_free_times:\n            if end - start >= meeting_duration:\n                meeting_start = start.strftime(\"%H:%M\")\n                meeting_end = (start + meeting_duration).strftime(\"%H:%M\")\n                return f\"{meeting_start}:{meeting_end} {day}\"\n\n    return \"No available time found\"\n\ndef get_free_times(blocked_times, work_start, work_end):\n    free_times = []\n    current_start = work_start\n\n    for start, end in sorted(blocked_times):\n        if current_start < start:\n            free_times.append((current_start, start))\n        current_start = max(current_start, end)\n\n    if current_start < work_end:\n        free_times.append((current_start, work_end))\n\n    return free_times\n\ndef find_common_free_times(free_times1, free_times2):\n    common_free_times = []\n    i, j = 0, 0\n\n    while i < len(free_times1) and j < len(free_times2):\n        start1, end1 = free_times1[i]\n        start2, end2 = free_times2[j]\n\n        common_start = max(start1, start2)\n        common_end = min(end1, end2)\n\n        if common_start < common_end:\n            common_free_times.append((common_start, common_end))\n\n        if end1 <= end2:\n            i += 1\n        else:\n            j += 1\n\n    return common_free_times\n\ngary_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"10:00\", \"%H:%M\")),\n               (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:30\", \"%H:%M\"), datetime.strptime(\"11:00\", \"%H:%M\")),\n                (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\"))]\n}\n\ndavid_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n               (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:30\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"09:30\", \"%H:%M\")),\n                (datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"16:00\", \"%H:%M\")),\n                (datetime.strptime(\"16:30\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))]\n}\n\nprint(find_meeting_time(gary_schedule, david_schedule, 1, \"09:00\", \"17:00\", [\"Monday\", \"Tuesday\"]))\n```"
    }
]