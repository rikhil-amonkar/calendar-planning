[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Juan, Marilyn and Ronald for half an hour between the work hours of 9:00 to 17:00 on Monday. \n\nHere are the existing schedules for everyone during the day: \nJuan is busy on Monday during 9:00 to 10:30, 15:30 to 16:00; \nMarilyn has blocked their calendar on Monday during 11:00 to 11:30, 12:30 to 13:00; \nRonald has blocked their calendar on Monday during 9:00 to 10:30, 12:00 to 12:30, 13:00 to 13:30, 14:00 to 16:30; \n\nJuan can not meet on Monday after 16:00. Find a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(juan_schedule, marilyn_schedule, ronald_schedule, meeting_duration, max_end_time):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(max_end_time, \"%H:%M\")\n    meeting_duration = timedelta(minutes=meeting_duration)\n\n    def parse_schedule(schedule):\n        return [(datetime.strptime(start, \"%H:%M\"), datetime.strptime(end, \"%H:%M\")) for start, end in schedule]\n\n    juan_schedule = parse_schedule(juan_schedule)\n    marilyn_schedule = parse_schedule(marilyn_schedule)\n    ronald_schedule = parse_schedule(ronald_schedule)\n\n    def is_free(time, schedules):\n        for start, end in schedules:\n            if start <= time < end:\n                return False\n        return True\n\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        if (is_free(current_time, juan_schedule) and\n            is_free(current_time, marilyn_schedule) and\n            is_free(current_time, ronald_schedule)):\n            meeting_start = current_time.strftime(\"%H:%M\")\n            meeting_end = (current_time + meeting_duration).strftime(\"%H:%M\")\n            return f\"{meeting_start}:{meeting_end} Monday\"\n        current_time += timedelta(minutes=15)\n\n    return \"No available time found\"\n\njuan_schedule = [(\"09:00\", \"10:30\"), (\"15:30\", \"16:00\")]\nmarilyn_schedule = [(\"11:00\", \"11:30\"), (\"12:30\", \"13:00\")]\nronald_schedule = [(\"09:00\", \"10:30\"), (\"12:00\", \"12:30\"), (\"13:00\", \"13:30\"), (\"14:00\", \"16:30\")]\n\nprint(find_meeting_time(juan_schedule, marilyn_schedule, ronald_schedule, 30, \"16:00\"))\n```"
    }
]