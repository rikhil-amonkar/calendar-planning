[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Arthur and Michael for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nArthur has meetings on Monday during 11:00 to 11:30, 13:30 to 14:00, 15:00 to 15:30, Tuesday during 13:00 to 13:30, 16:00 to 16:30, Wednesday during 10:00 to 10:30, 11:00 to 11:30, 12:00 to 12:30, 14:00 to 14:30, 16:00 to 16:30; \nMichael has meetings on Monday during 9:00 to 12:00, 12:30 to 13:00, 14:00 to 14:30, 15:00 to 17:00, Tuesday during 9:30 to 11:30, 12:00 to 13:30, 14:00 to 15:30, Wednesday during 10:00 to 12:30, 13:00 to 13:30; \n\nArthur can not meet on Tuesday. The group would like to meet at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\n# Define the work hours\nwork_start = datetime.strptime(\"09:00\", \"%H:%M\")\nwork_end = datetime.strptime(\"17:00\", \"%H:%M\")\n\n# Define the meeting duration\nmeeting_duration = timedelta(minutes=30)\n\n# Define the schedules for Arthur and Michael\narthur_schedule = {\n    \"Monday\": [(datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n               (datetime.strptime(\"13:30\", \"%H:%M\"), datetime.strptime(\"14:00\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"10:30\", \"%H:%M\")),\n                  (datetime.strptime(\"11:00\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                  (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n                  (datetime.strptime(\"16:00\", \"%H:%M\"), datetime.strptime(\"16:30\", \"%H:%M\"))]\n}\n\nmichael_schedule = {\n    \"Monday\": [(datetime.strptime(\"09:00\", \"%H:%M\"), datetime.strptime(\"12:00\", \"%H:%M\")),\n               (datetime.strptime(\"12:30\", \"%H:%M\"), datetime.strptime(\"13:00\", \"%H:%M\")),\n               (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"14:30\", \"%H:%M\")),\n               (datetime.strptime(\"15:00\", \"%H:%M\"), datetime.strptime(\"17:00\", \"%H:%M\"))],\n    \"Tuesday\": [(datetime.strptime(\"09:30\", \"%H:%M\"), datetime.strptime(\"11:30\", \"%H:%M\")),\n                (datetime.strptime(\"12:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\")),\n                (datetime.strptime(\"14:00\", \"%H:%M\"), datetime.strptime(\"15:30\", \"%H:%M\"))],\n    \"Wednesday\": [(datetime.strptime(\"10:00\", \"%H:%M\"), datetime.strptime(\"12:30\", \"%H:%M\")),\n                  (datetime.strptime(\"13:00\", \"%H:%M\"), datetime.strptime(\"13:30\", \"%H:%M\"))]\n}\n\n# Define the days to consider\ndays_to_consider = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n\n# Function to check if a time slot is available for both participants\ndef is_slot_available(slot, arthur_slots, michael_slots):\n    for arthur_slot in arthur_slots:\n        if not (slot[1] <= arthur_slot[0] or slot[0] >= arthur_slot[1]):\n            return False\n    for michael_slot in michael_slots:\n        if not (slot[1] <= michael_slot[0] or slot[0] >= michael_slot[1]):\n            return False\n    return True\n\n# Find the earliest available slot\nfor day in days_to_consider:\n    if day == \"Tuesday\":\n        continue  # Arthur cannot meet on Tuesday\n    current_time = work_start\n    while current_time + meeting_duration <= work_end:\n        slot = (current_time, current_time + meeting_duration)\n        if is_slot_available(slot, arthur_schedule[day], michael_schedule[day]):\n            start_time_str = slot[0].strftime(\"%H:%M\")\n            end_time_str = slot[1].strftime(\"%H:%M\")\n            print(f\"{start_time_str}:{end_time_str} {day}\")\n            break\n        current_time += timedelta(minutes=30)\n```"
    }
]