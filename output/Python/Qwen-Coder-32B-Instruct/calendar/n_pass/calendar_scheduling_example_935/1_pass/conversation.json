[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Terry and Frances for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday, Wednesday, Thursday or Friday. \n\nHere are the existing schedules for everyone during the days: \nTerry is busy on Monday during 10:30 to 11:00, 12:30 to 14:00, 15:00 to 17:00, Tuesday during 9:30 to 10:00, 10:30 to 11:00, 14:00 to 14:30, 16:00 to 16:30, Wednesday during 9:30 to 10:30, 11:00 to 12:00, 13:00 to 13:30, 15:00 to 16:00, 16:30 to 17:00, Thursday during 9:30 to 10:00, 12:00 to 12:30, 13:00 to 14:30, 16:00 to 16:30, Friday during 9:00 to 11:30, 12:00 to 12:30, 13:30 to 16:00, 16:30 to 17:00; \nFrances has blocked their calendar on Monday during 9:30 to 11:00, 11:30 to 13:00, 14:00 to 14:30, 15:00 to 16:00, Tuesday during 9:00 to 9:30, 10:00 to 10:30, 11:00 to 12:00, 13:00 to 14:30, 15:30 to 16:30, Wednesday during 9:30 to 10:00, 10:30 to 11:00, 11:30 to 16:00, 16:30 to 17:00, Thursday during 11:00 to 12:30, 14:30 to 17:00, Friday during 9:30 to 10:30, 11:00 to 12:30, 13:00 to 16:00, 16:30 to 17:00; \n\nFrances would like to avoid more meetings on Tuesday. You would like to schedule the meeting at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(terry_schedule, frances_schedule, meeting_duration, preferred_days):\n    work_start = datetime.strptime(\"09:00\", \"%H:%M\")\n    work_end = datetime.strptime(\"17:00\", \"%H:%M\")\n    \n    def parse_schedule(schedule):\n        parsed_schedule = []\n        for entry in schedule:\n            day, times = entry.split(' ')\n            start, end = times.split('-')\n            start_time = datetime.strptime(start, \"%H:%M\")\n            end_time = datetime.strptime(end, \"%H:%M\")\n            parsed_schedule.append((day, start_time, end_time))\n        return parsed_schedule\n    \n    terry_parsed = parse_schedule(terry_schedule)\n    frances_parsed = parse_schedule(frances_schedule)\n    \n    def is_free(day, time, schedule):\n        for d, start, end in schedule:\n            if d == day and start <= time < end:\n                return False\n        return True\n    \n    for day in preferred_days:\n        current_time = work_start\n        while current_time + timedelta(minutes=meeting_duration) <= work_end:\n            terry_free = is_free(day, current_time, terry_parsed)\n            frances_free = is_free(day, current_time, frances_parsed)\n            if terry_free and frances_free:\n                start_time_str = current_time.strftime(\"%H:%M\")\n                end_time_str = (current_time + timedelta(minutes=meeting_duration)).strftime(\"%H:%M\")\n                return f\"{start_time_str}:{end_time_str} {day}\"\n            current_time += timedelta(minutes=15)\n    \n    return \"No available time found\"\n\nterry_schedule = [\n    \"Monday 10:30-11:00\", \"Monday 12:30-14:00\", \"Monday 15:00-17:00\",\n    \"Tuesday 9:30-10:00\", \"Tuesday 10:30-11:00\", \"Tuesday 14:00-14:30\", \"Tuesday 16:00-16:30\",\n    \"Wednesday 9:30-10:30\", \"Wednesday 11:00-12:00\", \"Wednesday 13:00-13:30\", \"Wednesday 15:00-16:00\", \"Wednesday 16:30-17:00\",\n    \"Thursday 9:30-10:00\", \"Thursday 12:00-12:30\", \"Thursday 13:00-14:30\", \"Thursday 16:00-16:30\",\n    \"Friday 9:00-11:30\", \"Friday 12:00-12:30\", \"Friday 13:30-16:00\", \"Friday 16:30-17:00\"\n]\n\nfrances_schedule = [\n    \"Monday 9:30-11:00\", \"Monday 11:30-13:00\", \"Monday 14:00-14:30\", \"Monday 15:00-16:00\",\n    \"Tuesday 9:00-9:30\", \"Tuesday 10:00-10:30\", \"Tuesday 11:00-12:00\", \"Tuesday 13:00-14:30\", \"Tuesday 15:30-16:30\",\n    \"Wednesday 9:30-10:00\", \"Wednesday 10:30-11:00\", \"Wednesday 11:30-16:00\", \"Wednesday 16:30-17:00\",\n    \"Thursday 11:00-12:30\", \"Thursday 14:30-17:00\",\n    \"Friday 9:30-10:30\", \"Friday 11:00-12:30\", \"Friday 13:00-16:00\", \"Friday 16:30-17:00\"\n]\n\nmeeting_duration = 30  # in minutes\npreferred_days = [\"Monday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\nprint(find_meeting_time(terry_schedule, frances_schedule, meeting_duration, preferred_days))\n```"
    }
]