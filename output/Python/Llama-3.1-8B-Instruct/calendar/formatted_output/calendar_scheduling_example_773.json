{
    "0shot": [
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(start_time, end_time, participants, duration):\n    \"\"\"\n    Find a time that works for everyone's schedule and constraints.\n\n    Args:\n    start_time (datetime): The start of the work hours (Monday, 9:00).\n    end_time (datetime): The end of the work hours (Monday, 17:00).\n    participants (list): A list of participants and their schedules.\n    duration (int): The duration of the meeting in minutes.\n\n    Returns:\n    tuple: A proposed time range (start, end) and the day of the week.\n    \"\"\"\n    # Convert duration from minutes to hours and minutes\n    meeting_duration = timedelta(hours=duration // 60, minutes=duration % 60)\n\n    # Iterate over possible meeting days\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\"]:\n        # Iterate over possible meeting times\n        for hour in range(9, 17):\n            for minute in range(0, 60):\n                meeting_time = datetime(int(datetime.now().year), 1, 1, hour, minute)\n                if day == \"Monday\":\n                    meeting_time = meeting_time.replace(day=29)\n                elif day == \"Tuesday\":\n                    meeting_time = meeting_time.replace(day=30)\n                elif day == \"Wednesday\":\n                    meeting_time = meeting_time.replace(day=31)\n                if meeting_time + meeting_duration <= end_time:\n                    # Check if the meeting time works for all participants\n                    if all(\n                        not (meeting_time + meeting_duration).time() in participant[\"busy\"]\n                        for participant in participants\n                        for busy in participant.get(\"busy\", [])\n                    ):\n                        return meeting_time.strftime(\"%H:%M\"), (meeting_time + meeting_duration).strftime(\"%H:%M\"), day\n\n    # If no meeting time is found, return an error message\n    return \"No meeting time found\", \"No meeting time found\", \"No day\"\n\ndef main():\n    # Define the existing schedules for everyone during the days\n    participants = [\n        {\"name\": \"Patrick\", \"busy\": []},\n        {\"name\": \"Roy\", \"busy\": [\n            [\"Monday\", \"10:00\", \"11:30\"],\n            [\"Monday\", \"12:00\", \"13:00\"],\n            [\"Monday\", \"14:00\", \"14:30\"],\n            [\"Monday\", \"15:00\", \"17:00\"],\n            [\"Tuesday\", \"10:30\", \"11:30\"],\n            [\"Tuesday\", \"12:00\", \"14:30\"],\n            [\"Tuesday\", \"15:00\", \"15:30\"],\n            [\"Tuesday\", \"16:00\", \"17:00\"],\n            [\"Wednesday\", \"9:30\", \"11:30\"],\n            [\"Wednesday\", \"12:30\", \"14:00\"],\n            [\"Wednesday\", \"14:30\", \"15:30\"],\n            [\"Wednesday\", \"16:30\", \"17:00\"]\n        ]}\n    ]\n\n    # Define the work hours and meeting duration\n    start_time = datetime(2024, 7, 29, 9, 0, 0)\n    end_time = datetime(2024, 7, 29, 17, 0, 0)\n    duration = 60\n\n    # Find a meeting time that works for everyone's schedule and constraints\n    proposed_time, end_time_str, day = find_meeting_time(start_time, end_time, participants, duration)\n\n    # Print the proposed meeting time and day\n    print(f\"Proposed meeting time: {proposed_time}:{end_time_str} on {day}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "calendar_scheduling_example_773"
        }
    ]
}