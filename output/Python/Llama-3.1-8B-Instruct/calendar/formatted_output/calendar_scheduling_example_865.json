{
    "0shot": [
        {
            "final_program_time": {
                "day": null,
                "start_time": null,
                "end_time": null
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "has_error": true,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(schedules, meeting_duration, days):\n    earliest_start = None\n    for day in days:\n        for start in range(9, 17, 30):\n            start_time = datetime.strptime(f\"{day} {start:02d}:00\", \"%A %H:%M\")\n            end_time = start_time + timedelta(minutes=meeting_duration)\n            if (start_time not in [datetime.strptime(f\"{day} {s[0]:02d}:{s[0].minute:02d}\", \"%A %H:%M\") for s in schedules]\n                    and end_time not in [datetime.strptime(f\"{day} {s[1]:02d}:{s[1].minute:02d}\", \"%A %H:%M\") for s in schedules]):\n                if earliest_start is None or start_time < earliest_start:\n                    earliest_start = start_time\n    if earliest_start is not None:\n        end_time = earliest_start + timedelta(minutes=meeting_duration)\n        return f\"{earliest_start.strftime('%H:%M')} - {end_time.strftime('%H:%M')} on {earliest_start.strftime('%A')}\"\n    return \"No available time found\"\n\nmegan_schedule = [\n    (datetime.strptime(\"Monday 13:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 13:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 14:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 09:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 12:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 09:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 14:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 16:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 13:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 15:30\", \"%A %H:%M\")),\n]\n\ndaniel_schedule = [\n    (datetime.strptime(\"Monday 10:00\", \"%A %H:%M\"), datetime.strptime(\"Monday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Monday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Monday 15:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Tuesday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Tuesday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 10:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 10:30\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 11:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Wednesday 12:00\", \"%A %H:%M\"), datetime.strptime(\"Wednesday 17:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 09:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 12:00\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 12:30\", \"%A %H:%M\"), datetime.strptime(\"Thursday 14:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 15:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 15:30\", \"%A %H:%M\")),\n    (datetime.strptime(\"Thursday 16:00\", \"%A %H:%M\"), datetime.strptime(\"Thursday 17:00\", \"%A %H:%M\")),\n]\n\nmeeting_duration = 60\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"]\n\nprint(find_meeting_time(megan_schedule + daniel_schedule, meeting_duration, days))\n```",
            "count": "calendar_scheduling_example_865"
        }
    ]
}