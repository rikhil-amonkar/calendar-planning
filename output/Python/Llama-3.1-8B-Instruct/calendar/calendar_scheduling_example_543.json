{
    "0shot": [
        {
            "final_program_time": {
                "day": "Monday",
                "start_time": "9:00",
                "end_time": "10:00"
            },
            "expected_time": {
                "day": "Monday",
                "start_time": "13:30",
                "end_time": "14:30"
            },
            "has_error": false,
            "raw_model_response": "```python\nfrom datetime import datetime, timedelta\n\ndef find_available_time(start_time, end_time, schedules):\n    available_time = []\n    for time in [start_time + timedelta(hours=i) for i in range((end_time - start_time).seconds // 3600 + 1)]:\n        time_str = time.strftime('%H:%M')\n        if all(time_str not in schedule for schedule in schedules.values()):\n            available_time.append(time_str)\n    return available_time\n\ndef schedule_meeting(meeting_duration, start_time, schedules):\n    end_time = start_time + timedelta(hours=meeting_duration)\n    available_times = find_available_time(start_time, end_time, schedules)\n    \n    if available_times:\n        best_time = max(available_times, key=lambda x: x.split(':')[-1])\n        best_start_time = datetime.strptime(best_time, '%H:%M')\n        best_end_time = best_start_time + timedelta(hours=meeting_duration)\n        return best_start_time.strftime('%H:%M'), best_end_time.strftime('%H:%M'), best_start_time.strftime('%A')\n    else:\n        return None, None, None\n\n# Define the schedules\nschedules = {\n    'James': ['11:30', '12:00', '14:30', '15:00'],\n    'John': ['9:30', '11:00', '11:30', '12:00', '12:30', '13:30', '14:30', '16:30']\n}\n\n# Define the meeting duration and start time\nmeeting_duration = 1\nstart_time = datetime.strptime('09:00', '%H:%M').replace(year=2024, month=7, day=29)\n\n# Find the available time\nstart_time_str, end_time_str, day_of_week = schedule_meeting(meeting_duration, start_time, schedules)\n\n# Print the result\nif start_time_str and end_time_str:\n    print(f\"Day: {day_of_week}, Time: {start_time_str}:{end_time_str}\")\nelse:\n    print(\"No available time found.\")\n```\n\nThis script first defines a function `find_available_time` to find all available time slots between the start and end time, excluding the time slots in the schedules. Then it defines another function `schedule_meeting` to find the best available time slot for the meeting. The script then defines the schedules, meeting duration, and start time, and finally finds and prints the available time.",
            "count": "calendar_scheduling_example_543"
        }
    ]
}