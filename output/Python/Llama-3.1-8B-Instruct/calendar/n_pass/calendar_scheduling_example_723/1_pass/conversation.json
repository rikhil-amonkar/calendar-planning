[
    {
        "role": "user",
        "content": "You are an expert at scheduling meetings. Your task is to find a suitable time for a meeting based on the participants' schedules and constraints. In this case:\nYou are an expert at scheduling meetings. You are given a few constraints on the existing schedule of each participant, the meeting duration, and possibly some preferences on the meeting time. Note there exists a solution that works with existing schedule of every participant. Here are a few example tasks and solutions:\n\nTASK: You need to schedule a meeting for Arthur and Michael for half an hour between the work hours of 9:00 to 17:00 on either Monday, Tuesday or Wednesday. \n\nHere are the existing schedules for everyone during the days: \nArthur has meetings on Monday during 11:00 to 11:30, 13:30 to 14:00, 15:00 to 15:30, Tuesday during 13:00 to 13:30, 16:00 to 16:30, Wednesday during 10:00 to 10:30, 11:00 to 11:30, 12:00 to 12:30, 14:00 to 14:30, 16:00 to 16:30; \nMichael has meetings on Monday during 9:00 to 12:00, 12:30 to 13:00, 14:00 to 14:30, 15:00 to 17:00, Tuesday during 9:30 to 11:30, 12:00 to 13:30, 14:00 to 15:30, Wednesday during 10:00 to 12:30, 13:00 to 13:30; \n\nArthur can not meet on Tuesday. The group would like to meet at their earlist availability.\nFind a time that works for everyone's schedule and constraints. \nSOLUTION: \nGenerate a fully working Python script with code that calculates a proposed time and outputs it in the format HH:MM:HH:MM. The script should also output the day of the week (e.g., Monday, Tuesday). The script should be clean, well-formatted, and enclosed within ```python and ```. The output of the generated code must include both the time range (like {14:30:15:30}) and the day of the week. Provide the response with only code."
    },
    {
        "role": "assistant",
        "content": "```python\nfrom datetime import datetime, timedelta\n\ndef find_meeting_time(artur_schedule, michael_schedule, day, meeting_duration):\n    # Filter schedules for the given day\n    artur_day_schedule = {time: duration for time, duration in artur_schedule.items() if time[0] == day}\n    michael_day_schedule = {time: duration for time, duration in michael_schedule.items() if time[0] == day}\n\n    # Sort schedules by start time\n    artur_day_schedule = dict(sorted(artur_day_schedule.items()))\n    michael_day_schedule = dict(sorted(michael_day_schedule.items()))\n\n    # Initialize meeting time\n    meeting_time = None\n\n    # Check all possible meeting times\n    for time in range(9, 17):\n        for duration in range(30, 180, 30):\n            start_time = time\n            end_time = start_time + duration\n\n            # Check if meeting time conflicts with anyone's schedule\n            if (start_time not in artur_day_schedule or end_time <= artur_day_schedule[start_time][0]) and \\\n               (start_time not in michael_day_schedule or end_time <= michael_day_schedule[start_time][0]):\n                # Check if meeting time is before Arthur's first meeting\n                if start_time < min(artur_day_schedule.keys()) or not artur_schedule.get(min(artur_day_schedule.keys()), (0, 0))[1] <= start_time:\n                    # Check if meeting time is before Michael's first meeting\n                    if start_time < min(michael_day_schedule.keys()) or not michael_schedule.get(min(michael_day_schedule.keys()), (0, 0))[1] <= start_time:\n                        # Check if meeting time is after everyone's last meeting\n                        if end_time >= max(artur_day_schedule.keys()) or artur_schedule.get(max(artur_day_schedule.keys()), (0, 0))[0] >= end_time:\n                            if end_time >= max(michael_day_schedule.keys()) or michael_schedule.get(max(michael_day_schedule.keys()), (0, 0))[0] >= end_time:\n                                # Meeting time found\n                                meeting_time = (day, f\"{start_time:02d}:{60-start_time%60:02d}\", f\"{end_time:02d}:{60-end_time%60:02d}\")\n                                return meeting_time\n\n    # If no meeting time is found, return None\n    return None\n\n\n# Define schedules\nartur_schedule = {\n    \"Monday\": [(11, 30), (13, 30), (15, 30)],\n    \"Tuesday\": [(13, 30), (16, 30)],\n    \"Wednesday\": [(10, 30), (11, 30), (12, 30), (14, 30), (16, 30)]\n}\n\nmichael_schedule = {\n    \"Monday\": [(9, 0), (12, 0), (14, 30), (15, 0)],\n    \"Tuesday\": [(9, 30), (12, 30), (14, 30)],\n    \"Wednesday\": [(10, 0), (13, 30)]\n}\n\n# Define meeting duration\nmeeting_duration = 30\n\n# Define day\nday = \"Monday\"\n\n# Find meeting time\nmeeting_time = find_meeting_time(artur_schedule, michael_schedule, day, meeting_duration)\n\n# Print meeting time\nif meeting_time:\n    print(f\"Meeting time: {meeting_time[1]} - {meeting_time[2]} on {meeting_time[0]}\")\nelse:\n    print(\"No meeting time found\")\n```"
    }
]