{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Fisherman's Wharf",
                        "person": "Mark",
                        "start_time": "9:10",
                        "end_time": "9:40"
                    },
                    {
                        "action": "meet",
                        "location": "Bayview",
                        "person": "Betty",
                        "start_time": "10:06",
                        "end_time": "10:21"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Brian",
                        "start_time": "10:40",
                        "end_time": "11:10"
                    },
                    {
                        "action": "meet",
                        "location": "Marina District",
                        "person": "Joseph",
                        "start_time": "11:31",
                        "end_time": "13:01"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Stephanie",
                        "start_time": "13:11",
                        "end_time": "14:26"
                    },
                    {
                        "action": "meet",
                        "location": "Haight-Ashbury",
                        "person": "Lisa",
                        "start_time": "15:30",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "Union Square",
                        "person": "Patricia",
                        "start_time": "16:34",
                        "end_time": "18:34"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "William",
                        "start_time": "18:47",
                        "end_time": "19:47"
                    },
                    {
                        "action": "meet",
                        "location": "Sunset District",
                        "person": "Karen",
                        "start_time": "20:10",
                        "end_time": "21:55"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Define travel distances in minutes\ntravel_distances = {\n    \"Financial District\": {\n        \"Fisherman's Wharf\": 10,\n        \"Presidio\": 22,\n        \"Bayview\": 19,\n        \"Haight-Ashbury\": 19,\n        \"Russian Hill\": 11,\n        \"The Castro\": 20,\n        \"Marina District\": 15,\n        \"Richmond District\": 21,\n        \"Union Square\": 9,\n        \"Sunset District\": 30\n    },\n    \"Fisherman's Wharf\": {\n        \"Financial District\": 11,\n        \"Presidio\": 17,\n        \"Bayview\": 26,\n        \"Haight-Ashbury\": 22,\n        \"Russian Hill\": 7,\n        \"The Castro\": 27,\n        \"Marina District\": 9,\n        \"Richmond District\": 18,\n        \"Union Square\": 13,\n        \"Sunset District\": 27\n    },\n    \"Presidio\": {\n        \"Financial District\": 23,\n        \"Fisherman's Wharf\": 19,\n        \"Bayview\": 31,\n        \"Haight-Ashbury\": 15,\n        \"Russian Hill\": 14,\n        \"The Castro\": 21,\n        \"Marina District\": 11,\n        \"Richmond District\": 7,\n        \"Union Square\": 22,\n        \"Sunset District\": 15\n    },\n    \"Bayview\": {\n        \"Financial District\": 19,\n        \"Fisherman's Wharf\": 25,\n        \"Presidio\": 32,\n        \"Haight-Ashbury\": 19,\n        \"Russian Hill\": 23,\n        \"The Castro\": 19,\n        \"Marina District\": 27,\n        \"Richmond District\": 25,\n        \"Union Square\": 18,\n        \"Sunset District\": 23\n    },\n    \"Haight-Ashbury\": {\n        \"Financial District\": 21,\n        \"Fisherman's Wharf\": 23,\n        \"Presidio\": 15,\n        \"Bayview\": 18,\n        \"Russian Hill\": 17,\n        \"The Castro\": 6,\n        \"Marina District\": 17,\n        \"Richmond District\": 10,\n        \"Union Square\": 19,\n        \"Sunset District\": 15\n    },\n    \"Russian Hill\": {\n        \"Financial District\": 11,\n        \"Fisherman's Wharf\": 7,\n        \"Presidio\": 14,\n        \"Bayview\": 23,\n        \"Haight-Ashbury\": 17,\n        \"The Castro\": 21,\n        \"Marina District\": 7,\n        \"Richmond District\": 14,\n        \"Union Square\": 10,\n        \"Sunset District\": 23\n    },\n    \"The Castro\": {\n        \"Financial District\": 21,\n        \"Fisherman's Wharf\": 24,\n        \"Presidio\": 20,\n        \"Bayview\": 19,\n        \"Haight-Ashbury\": 6,\n        \"Russian Hill\": 18,\n        \"Marina District\": 21,\n        \"Richmond District\": 16,\n        \"Union Square\": 19,\n        \"Sunset District\": 17\n    },\n    \"Marina District\": {\n        \"Financial District\": 17,\n        \"Fisherman's Wharf\": 10,\n        \"Presidio\": 10,\n        \"Bayview\": 27,\n        \"Haight-Ashbury\": 16,\n        \"Russian Hill\": 8,\n        \"The Castro\": 22,\n        \"Richmond District\": 11,\n        \"Union Square\": 16,\n        \"Sunset District\": 19\n    },\n    \"Richmond District\": {\n        \"Financial District\": 22,\n        \"Fisherman's Wharf\": 18,\n        \"Presidio\": 7,\n        \"Bayview\": 27,\n        \"Haight-Ashbury\": 10,\n        \"Russian Hill\": 13,\n        \"The Castro\": 16,\n        \"Marina District\": 9,\n        \"Union Square\": 21,\n        \"Sunset District\": 11\n    },\n    \"Union Square\": {\n        \"Financial District\": 9,\n        \"Fisherman's Wharf\": 15,\n        \"Presidio\": 24,\n        \"Bayview\": 15,\n        \"Haight-Ashbury\": 18,\n        \"Russian Hill\": 13,\n        \"The Castro\": 17,\n        \"Marina District\": 18,\n        \"Richmond District\": 20,\n        \"Sunset District\": 27\n    },\n    \"Sunset District\": {\n        \"Financial District\": 30,\n        \"Fisherman's Wharf\": 29,\n        \"Presidio\": 16,\n        \"Bayview\": 22,\n        \"Haight-Ashbury\": 15,\n        \"Russian Hill\": 24,\n        \"The Castro\": 17,\n        \"Marina District\": 21,\n        \"Richmond District\": 12,\n        \"Union Square\": 30\n    }\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Mark\": {\"location\": \"Fisherman's Wharf\", \"start_time\": \"08:15\", \"end_time\": \"10:00\", \"duration\": 30},\n    \"Stephanie\": {\"location\": \"Presidio\", \"start_time\": \"12:15\", \"end_time\": \"15:00\", \"duration\": 75},\n    \"Betty\": {\"location\": \"Bayview\", \"start_time\": \"07:15\", \"end_time\": \"20:30\", \"duration\": 15},\n    \"Lisa\": {\"location\": \"Haight-Ashbury\", \"start_time\": \"15:30\", \"end_time\": \"18:30\", \"duration\": 45},\n    \"William\": {\"location\": \"Russian Hill\", \"start_time\": \"18:45\", \"end_time\": \"20:00\", \"duration\": 60},\n    \"Brian\": {\"location\": \"The Castro\", \"start_time\": \"09:15\", \"end_time\": \"13:15\", \"duration\": 30},\n    \"Joseph\": {\"location\": \"Marina District\", \"start_time\": \"10:45\", \"end_time\": \"15:00\", \"duration\": 90},\n    \"Ashley\": {\"location\": \"Richmond District\", \"start_time\": \"09:45\", \"end_time\": \"11:15\", \"duration\": 45},\n    \"Patricia\": {\"location\": \"Union Square\", \"start_time\": \"16:30\", \"end_time\": \"20:00\", \"duration\": 120},\n    \"Karen\": {\"location\": \"Sunset District\", \"start_time\": \"16:30\", \"end_time\": \"22:00\", \"duration\": 105}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    if start_location == \"Financial District\":\n        return travel_distances[\"Financial District\"][end_location]\n    elif start_location == \"Fisherman's Wharf\":\n        return travel_distances[\"Fisherman's Wharf\"][end_location]\n    elif start_location == \"Presidio\":\n        return travel_distances[\"Presidio\"][end_location]\n    elif start_location == \"Bayview\":\n        return travel_distances[\"Bayview\"][end_location]\n    elif start_location == \"Haight-Ashbury\":\n        return travel_distances[\"Haight-Ashbury\"][end_location]\n    elif start_location == \"Russian Hill\":\n        return travel_distances[\"Russian Hill\"][end_location]\n    elif start_location == \"The Castro\":\n        return travel_distances[\"The Castro\"][end_location]\n    elif start_location == \"Marina District\":\n        return travel_distances[\"Marina District\"][end_location]\n    elif start_location == \"Richmond District\":\n        return travel_distances[\"Richmond District\"][end_location]\n    elif start_location == \"Union Square\":\n        return travel_distances[\"Union Square\"][end_location]\n    elif start_location == \"Sunset District\":\n        return travel_distances[\"Sunset District\"][end_location]\n\ndef check_constraint(person, start_time, end_time):\n    constraint = constraints[person]\n    if start_time >= constraint[\"start_time\"] and end_time <= constraint[\"end_time\"]:\n        return True\n    return False\n\ndef schedule_meeting(person, start_time, end_time):\n    if check_constraint(person, start_time, end_time):\n        return {\"action\": \"meet\", \"location\": constraints[person][\"location\"], \"person\": person, \"start_time\": start_time, \"end_time\": end_time}\n    return None\n\ndef generate_itinerary():\n    start_time = \"09:00\"\n    end_time = \"22:00\"\n    start_location = \"Financial District\"\n    itinerary = []\n    \n    # Generate all possible meeting times\n    for hour in range(9, 22):\n        for minute in range(0, 60):\n            meeting_time = f\"{hour:02d}:{minute:02d}\"\n            if meeting_time >= constraints[\"Mark\"][\"start_time\"] and meeting_time <= constraints[\"Mark\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Mark\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Stephanie\"][\"start_time\"] and meeting_time <= constraints[\"Stephanie\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Stephanie\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Betty\"][\"start_time\"] and meeting_time <= constraints[\"Betty\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Betty\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Lisa\"][\"start_time\"] and meeting_time <= constraints[\"Lisa\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Lisa\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"William\"][\"start_time\"] and meeting_time <= constraints[\"William\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"William\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Brian\"][\"start_time\"] and meeting_time <= constraints[\"Brian\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Brian\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Joseph\"][\"start_time\"] and meeting_time <= constraints[\"Joseph\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Joseph\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Ashley\"][\"start_time\"] and meeting_time <= constraints[\"Ashley\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Ashley\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Patricia\"][\"start_time\"] and meeting_time <= constraints[\"Patricia\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Patricia\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Karen\"][\"start_time\"] and meeting_time <= constraints[\"Karen\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Karen\", meeting_time, meeting_time))\n    \n    # Remove duplicates and sort by start time\n    itinerary = list(set(itinerary))\n    itinerary.sort(key=lambda x: x[\"start_time\"])\n    \n    return itinerary\n\ndef optimize_itinerary(itinerary):\n    optimized_itinerary = []\n    current_location = \"Financial District\"\n    for meeting in itinerary:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"])\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        optimized_itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n        current_location = meeting[\"location\"]\n    return optimized_itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    optimized_itinerary = optimize_itinerary(itinerary)\n    result = {\"itinerary\": optimized_itinerary}\n    print(json.dumps(result, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_908"
        }
    ]
}