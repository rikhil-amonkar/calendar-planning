{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": []
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Nob Hill",
                        "person": "Paul",
                        "start_time": "16:15",
                        "end_time": "17:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Karen",
                        "start_time": "17:32",
                        "end_time": "18:17"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Matthew",
                        "start_time": "18:35",
                        "end_time": "19:50"
                    },
                    {
                        "action": "meet",
                        "location": "Pacific Heights",
                        "person": "Jeffrey",
                        "start_time": "20:00",
                        "end_time": "20:45"
                    },
                    {
                        "action": "meet",
                        "location": "Presidio",
                        "person": "Nancy",
                        "start_time": "20:56",
                        "end_time": "21:26"
                    }
                ]
            },
            "has_error": true,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\nimport itertools\n\n# Define travel distances in minutes\ntravel_distances = {\n    \"Bayview\": {\n        \"Nob Hill\": 20,\n        \"Union Square\": 17,\n        \"Chinatown\": 18,\n        \"The Castro\": 20,\n        \"Presidio\": 31,\n        \"Pacific Heights\": 23,\n        \"Russian Hill\": 23\n    },\n    \"Nob Hill\": {\n        \"Bayview\": 19,\n        \"Union Square\": 7,\n        \"Chinatown\": 6,\n        \"The Castro\": 17,\n        \"Presidio\": 17,\n        \"Pacific Heights\": 8,\n        \"Russian Hill\": 5\n    },\n    \"Union Square\": {\n        \"Bayview\": 15,\n        \"Nob Hill\": 9,\n        \"Chinatown\": 7,\n        \"The Castro\": 19,\n        \"Presidio\": 24,\n        \"Pacific Heights\": 15,\n        \"Russian Hill\": 13\n    },\n    \"Chinatown\": {\n        \"Bayview\": 22,\n        \"Nob Hill\": 8,\n        \"Union Square\": 7,\n        \"The Castro\": 22,\n        \"Presidio\": 19,\n        \"Pacific Heights\": 10,\n        \"Russian Hill\": 7\n    },\n    \"The Castro\": {\n        \"Bayview\": 19,\n        \"Nob Hill\": 16,\n        \"Union Square\": 19,\n        \"Chinatown\": 20,\n        \"Presidio\": 20,\n        \"Pacific Heights\": 16,\n        \"Russian Hill\": 18\n    },\n    \"Presidio\": {\n        \"Bayview\": 31,\n        \"Nob Hill\": 18,\n        \"Union Square\": 22,\n        \"Chinatown\": 21,\n        \"The Castro\": 21,\n        \"Pacific Heights\": 11,\n        \"Russian Hill\": 14\n    },\n    \"Pacific Heights\": {\n        \"Bayview\": 22,\n        \"Nob Hill\": 8,\n        \"Union Square\": 12,\n        \"Chinatown\": 11,\n        \"The Castro\": 16,\n        \"Presidio\": 11,\n        \"Russian Hill\": 7\n    },\n    \"Russian Hill\": {\n        \"Bayview\": 23,\n        \"Nob Hill\": 5,\n        \"Union Square\": 11,\n        \"Chinatown\": 9,\n        \"The Castro\": 21,\n        \"Presidio\": 14,\n        \"Pacific Heights\": 7\n    }\n}\n\n# Define meeting constraints\nconstraints = {\n    \"Paul\": {\"location\": \"Nob Hill\", \"start_time\": \"16:15\", \"end_time\": \"21:15\", \"duration\": 60},\n    \"Carol\": {\"location\": \"Union Square\", \"start_time\": \"18:00\", \"end_time\": \"20:15\", \"duration\": 120},\n    \"Patricia\": {\"location\": \"Chinatown\", \"start_time\": \"20:00\", \"end_time\": \"21:30\", \"duration\": 75},\n    \"Karen\": {\"location\": \"The Castro\", \"start_time\": \"17:00\", \"end_time\": \"19:00\", \"duration\": 45},\n    \"Nancy\": {\"location\": \"Presidio\", \"start_time\": \"11:45\", \"end_time\": \"22:00\", \"duration\": 30},\n    \"Jeffrey\": {\"location\": \"Pacific Heights\", \"start_time\": \"20:00\", \"end_time\": \"20:45\", \"duration\": 45},\n    \"Matthew\": {\"location\": \"Russian Hill\", \"start_time\": \"15:45\", \"end_time\": \"21:45\", \"duration\": 75}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef check_constraint(person, start_time, end_time):\n    constraint = constraints[person]\n    if start_time >= constraint[\"start_time\"] and end_time <= constraint[\"end_time\"]:\n        return True\n    return False\n\ndef schedule_meeting(person, start_time, end_time):\n    if check_constraint(person, start_time, end_time):\n        return {\"action\": \"meet\", \"location\": constraints[person][\"location\"], \"person\": person, \"start_time\": start_time, \"end_time\": end_time}\n    return None\n\ndef generate_itinerary():\n    start_time = \"09:00\"\n    end_time = \"21:00\"\n    start_location = \"Bayview\"\n    itinerary = []\n    \n    # Generate all possible meeting times\n    for hour in range(9, 21):\n        for minute in range(0, 60):\n            meeting_time = f\"{hour:02d}:{minute:02d}\"\n            if meeting_time >= constraints[\"Paul\"][\"start_time\"] and meeting_time <= constraints[\"Paul\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Paul\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Carol\"][\"start_time\"] and meeting_time <= constraints[\"Carol\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Carol\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Patricia\"][\"start_time\"] and meeting_time <= constraints[\"Patricia\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Patricia\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Karen\"][\"start_time\"] and meeting_time <= constraints[\"Karen\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Karen\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Nancy\"][\"start_time\"] and meeting_time <= constraints[\"Nancy\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Nancy\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Jeffrey\"][\"start_time\"] and meeting_time <= constraints[\"Jeffrey\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Jeffrey\", meeting_time, meeting_time))\n            if meeting_time >= constraints[\"Matthew\"][\"start_time\"] and meeting_time <= constraints[\"Matthew\"][\"end_time\"]:\n                itinerary.append(schedule_meeting(\"Matthew\", meeting_time, meeting_time))\n    \n    # Remove duplicates and sort by start time\n    itinerary = list(set(itinerary))\n    itinerary.sort(key=lambda x: x[\"start_time\"])\n    \n    return itinerary\n\ndef optimize_itinerary(itinerary):\n    optimized_itinerary = []\n    current_location = \"Bayview\"\n    for meeting in itinerary:\n        travel_time = calculate_travel_time(current_location, meeting[\"location\"])\n        start_time = datetime.strptime(meeting[\"start_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        end_time = datetime.strptime(meeting[\"end_time\"], \"%H:%M\") + timedelta(minutes=travel_time)\n        optimized_itinerary.append({\"action\": \"meet\", \"location\": meeting[\"location\"], \"person\": meeting[\"person\"], \"start_time\": start_time.strftime(\"%H:%M\"), \"end_time\": end_time.strftime(\"%H:%M\")})\n        current_location = meeting[\"location\"]\n    return optimized_itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    optimized_itinerary = optimize_itinerary(itinerary)\n    result = {\"itinerary\": optimized_itinerary}\n    print(json.dumps(result, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
            "count": "meeting_planning_example_695"
        }
    ]
}