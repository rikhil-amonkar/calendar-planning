{
    "0shot": [
        {
            "final_program_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Laura",
                        "start_time": "9:00",
                        "end_time": "12:00"
                    },
                    {
                        "action": "meet",
                        "location": "Golden Gate Park",
                        "person": "Daniel",
                        "start_time": "12:00",
                        "end_time": "23:15"
                    },
                    {
                        "action": "meet",
                        "location": "Embarcadero",
                        "person": "William",
                        "start_time": "23:15",
                        "end_time": "22:00"
                    }
                ]
            },
            "expected_time": {
                "itinerary": [
                    {
                        "action": "meet",
                        "location": "Alamo Square",
                        "person": "Joseph",
                        "start_time": "11:30",
                        "end_time": "11:45"
                    },
                    {
                        "action": "meet",
                        "location": "Russian Hill",
                        "person": "Karen",
                        "start_time": "14:30",
                        "end_time": "15:00"
                    },
                    {
                        "action": "meet",
                        "location": "North Beach",
                        "person": "Kimberly",
                        "start_time": "15:45",
                        "end_time": "16:15"
                    },
                    {
                        "action": "meet",
                        "location": "The Castro",
                        "person": "Laura",
                        "start_time": "19:45",
                        "end_time": "21:30"
                    }
                ]
            },
            "has_error": false,
            "raw_model_response": "```python\nimport json\nfrom datetime import datetime, timedelta\n\n# Travel distances (in minutes)\ntravel_distances = {\n    'Fisherman\\'s Wharf': {'The Castro': 26, 'Golden Gate Park': 25, 'Embarcadero': 8, 'Russian Hill': 7, 'Nob Hill': 11, 'Alamo Square': 20, 'North Beach': 6},\n    'The Castro': {'Fisherman\\'s Wharf': 24, 'Golden Gate Park': 11, 'Embarcadero': 22, 'Russian Hill': 18, 'Nob Hill': 16, 'Alamo Square': 8, 'North Beach': 20},\n    'Golden Gate Park': {'Fisherman\\'s Wharf': 24, 'The Castro': 13, 'Embarcadero': 25, 'Russian Hill': 19, 'Nob Hill': 20, 'Alamo Square': 10, 'North Beach': 24},\n    'Embarcadero': {'Fisherman\\'s Wharf': 6, 'The Castro': 25, 'Golden Gate Park': 25, 'Russian Hill': 8, 'Nob Hill': 10, 'Alamo Square': 19, 'North Beach': 5},\n    'Russian Hill': {'Fisherman\\'s Wharf': 7, 'The Castro': 21, 'Golden Gate Park': 21, 'Embarcadero': 8, 'Nob Hill': 5, 'Alamo Square': 15, 'North Beach': 5},\n    'Nob Hill': {'Fisherman\\'s Wharf': 11, 'The Castro': 17, 'Golden Gate Park': 17, 'Embarcadero': 9, 'Russian Hill': 5, 'Alamo Square': 11, 'North Beach': 8},\n    'Alamo Square': {'Fisherman\\'s Wharf': 19, 'The Castro': 8, 'Golden Gate Park': 9, 'Embarcadero': 17, 'Russian Hill': 13, 'Nob Hill': 11, 'North Beach': 16},\n    'North Beach': {'Fisherman\\'s Wharf': 5, 'The Castro': 22, 'Golden Gate Park': 22, 'Embarcadero': 6, 'Russian Hill': 4, 'Nob Hill': 7, 'Alamo Square': 16}\n}\n\n# Constraints\nconstraints = {\n    'Laura': {'location': 'The Castro','start_time': '19:45', 'end_time': '21:30','required_time': 105},\n    'Daniel': {'location': 'Golden Gate Park','start_time': '21:15', 'end_time': '21:45','required_time': 15},\n    'William': {'location': 'Embarcadero','start_time': '07:00', 'end_time': '09:00','required_time': 90},\n    'Karen': {'location': 'Russian Hill','start_time': '14:30', 'end_time': '19:45','required_time': 30},\n    'Stephanie': {'location': 'Nob Hill','start_time': '07:30', 'end_time': '09:30','required_time': 45},\n    'Joseph': {'location': 'Alamo Square','start_time': '11:30', 'end_time': '12:45','required_time': 15},\n    'Kimberly': {'location': 'North Beach','start_time': '15:45', 'end_time': '19:15','required_time': 30}\n}\n\ndef calculate_travel_time(start_location, end_location):\n    return travel_distances[start_location][end_location]\n\ndef is_valid_meeting(person, start_time, end_time, required_time):\n    return (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=required_time)).time() <= datetime.strptime(end_time, '%H:%M').time()\n\ndef schedule_meeting(person, start_time, end_time, required_time, location):\n    travel_time = calculate_travel_time('Fisherman\\'s Wharf', location)\n    start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=travel_time)).strftime('%H:%M')\n    return is_valid_meeting(person, start_time, end_time, required_time)\n\ndef generate_itinerary():\n    itinerary = []\n    start_time = '09:00'\n    end_time = '12:00'\n    \n    for person in constraints:\n        location = constraints[person]['location']\n        start_person_time = constraints[person]['start_time']\n        end_person_time = constraints[person]['end_time']\n        required_time = constraints[person]['required_time']\n        \n        if schedule_meeting(person, start_time, end_time, required_time, location):\n            itinerary.append({\n                'action':'meet',\n                'location': location,\n                'person': person,\n'start_time': start_time,\n                'end_time': end_time\n            })\n            start_time = end_time\n            end_time = (datetime.strptime(end_person_time, '%H:%M') + timedelta(minutes=required_time)).strftime('%H:%M')\n    \n    return itinerary\n\ndef main():\n    itinerary = generate_itinerary()\n    print(json.dumps({'itinerary': itinerary}, indent=4))\n\nif __name__ == '__main__':\n    main()\n```",
            "count": "meeting_planning_example_604"
        }
    ]
}