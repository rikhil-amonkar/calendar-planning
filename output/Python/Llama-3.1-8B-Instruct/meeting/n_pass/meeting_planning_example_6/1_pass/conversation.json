[
    {
        "role": "user",
        "content": "You are an expert computational meeting planner. Your task is to write a Python program that algorithmically calculates the optimal meeting schedule based on the participants' constraints.\nThe program must actually compute the plan using the given parameters, not just print a pre-determined answer.\nInput parameters:\nYou are visiting San Francisco for the day and want to meet as many friends as possible. Solve the problem by considering various different schedules and picking the best one to optimize your goals.\n\nTravel distances (in minutes):\nFisherman's Wharf to Nob Hill: 11.\nNob Hill to Fisherman's Wharf: 11.\n\nCONSTRAINTS: You arrive at Fisherman's Wharf at 9:00AM. Kenneth will be at Nob Hill from 2:15PM to 7:45PM. You'd like to meet Kenneth for a minimum of 90 minutes.\n\nYour response should start with 'SOLUTION:'.\n\nGenerate a complete, self-contained Python program that:\n1. Takes the above meeting constraints as input variables\n2. Computes the optimal meeting schedule using logical rules and calculations\n3. Outputs the result as a JSON-formatted dictionary with the following structure:\n{\n  \"itinerary\": [\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"},\n    {\"action\": \"meet\", \"location\": \"Location Name\", \"person\": \"Person Name\", \"start_time\": \"H:MM\", \"end_time\": \"H:MM\"}\n  ]\n}\nRules for the program:\n- Times should be in 24-hour format like '9:00' or '13:30' (no leading zero)\n- The schedule must account for all travel times and constraints\n- The program must actually compute the schedule, not just print a static answer\n\nOutput only the complete Python code with no additional text or explanation.\nThe code must run independently and output valid JSON when executed."
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nimport datetime\n\ndef calculate_travel_time(start_location, end_location, travel_times):\n    if start_location == end_location:\n        return 0\n    return travel_times.get(f\"{start_location}-{end_location}\", travel_times.get(f\"{end_location}-{start_location}\", 0))\n\ndef generate_itinerary(arrival_time, departure_time, locations, travel_times, constraints):\n    itinerary = []\n    current_time = datetime.datetime.strptime(arrival_time, \"%H:%M\")\n    for person, availability in constraints.items():\n        for time_range in availability:\n            start_time = datetime.datetime.strptime(time_range[0], \"%H:%M\")\n            end_time = datetime.datetime.strptime(time_range[1], \"%H:%M\")\n            if (current_time >= start_time and current_time < end_time) or (current_time < start_time and (end_time - current_time).total_seconds() / 60 >= 90):\n                meeting_start_time = max(current_time, start_time)\n                meeting_end_time = min(end_time, meeting_start_time + datetime.timedelta(minutes=90))\n                meeting_location = \"Fisherman's Wharf\" if meeting_start_time.hour < 14 else \"Nob Hill\"\n                itinerary.append({\n                    \"action\": \"meet\",\n                    \"location\": meeting_location,\n                    \"person\": person,\n                    \"start_time\": meeting_start_time.strftime(\"%H:%M\"),\n                    \"end_time\": meeting_end_time.strftime(\"%H:%M\")\n                })\n                current_time = meeting_end_time + datetime.timedelta(minutes=calculate_travel_time(meeting_location, \"Fisherman's Wharf\" if meeting_start_time.hour < 14 else \"Nob Hill\", travel_times))\n    return itinerary\n\ndef main():\n    travel_times = {\n        \"Fisherman's Wharf-Nob Hill\": 11,\n        \"Nob Hill-Fisherman's Wharf\": 11\n    }\n    constraints = {\n        \"Kenneth\": [(\"14:15\", \"19:45\")]\n    }\n    arrival_time = \"09:00\"\n    departure_time = \"23:59\"\n    locations = [\"Fisherman's Wharf\", \"Nob Hill\"]\n    itinerary = generate_itinerary(arrival_time, departure_time, locations, travel_times, constraints)\n    print(json.dumps({\"itinerary\": itinerary}, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]